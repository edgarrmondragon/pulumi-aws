// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type EndpointElasticsearchSettings struct {
	// Endpoint for the OpenSearch cluster.
	EndpointUri string `pulumi:"endpointUri"`
	// Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is `300`.
	ErrorRetryDuration *int `pulumi:"errorRetryDuration"`
	// Maximum percentage of records that can fail to be written before a full load operation stops. Default is `10`.
	FullLoadErrorPercentage *int `pulumi:"fullLoadErrorPercentage"`
	// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
	ServiceAccessRoleArn string `pulumi:"serviceAccessRoleArn"`
}

type EndpointElasticsearchSettingsArgs struct {
	// Endpoint for the OpenSearch cluster.
	EndpointUri pulumix.Input[string] `pulumi:"endpointUri"`
	// Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is `300`.
	ErrorRetryDuration pulumix.Input[*int] `pulumi:"errorRetryDuration"`
	// Maximum percentage of records that can fail to be written before a full load operation stops. Default is `10`.
	FullLoadErrorPercentage pulumix.Input[*int] `pulumi:"fullLoadErrorPercentage"`
	// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
	ServiceAccessRoleArn pulumix.Input[string] `pulumi:"serviceAccessRoleArn"`
}

func (EndpointElasticsearchSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointElasticsearchSettings)(nil)).Elem()
}

func (i EndpointElasticsearchSettingsArgs) ToEndpointElasticsearchSettingsOutput() EndpointElasticsearchSettingsOutput {
	return i.ToEndpointElasticsearchSettingsOutputWithContext(context.Background())
}

func (i EndpointElasticsearchSettingsArgs) ToEndpointElasticsearchSettingsOutputWithContext(ctx context.Context) EndpointElasticsearchSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointElasticsearchSettingsOutput)
}

func (i *EndpointElasticsearchSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointElasticsearchSettingsArgs] {
	return pulumix.Val(i)
}

type EndpointElasticsearchSettingsOutput struct{ *pulumi.OutputState }

func (EndpointElasticsearchSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointElasticsearchSettings)(nil)).Elem()
}

func (o EndpointElasticsearchSettingsOutput) ToEndpointElasticsearchSettingsOutput() EndpointElasticsearchSettingsOutput {
	return o
}

func (o EndpointElasticsearchSettingsOutput) ToEndpointElasticsearchSettingsOutputWithContext(ctx context.Context) EndpointElasticsearchSettingsOutput {
	return o
}

func (o EndpointElasticsearchSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointElasticsearchSettings] {
	return pulumix.Output[EndpointElasticsearchSettings]{
		OutputState: o.OutputState,
	}
}

// Endpoint for the OpenSearch cluster.
func (o EndpointElasticsearchSettingsOutput) EndpointUri() pulumix.Output[string] {
	return pulumix.Apply[EndpointElasticsearchSettings](o, func(v EndpointElasticsearchSettings) string { return v.EndpointUri })
}

// Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is `300`.
func (o EndpointElasticsearchSettingsOutput) ErrorRetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[EndpointElasticsearchSettings](o, func(v EndpointElasticsearchSettings) *int { return v.ErrorRetryDuration })
}

// Maximum percentage of records that can fail to be written before a full load operation stops. Default is `10`.
func (o EndpointElasticsearchSettingsOutput) FullLoadErrorPercentage() pulumix.Output[*int] {
	return pulumix.Apply[EndpointElasticsearchSettings](o, func(v EndpointElasticsearchSettings) *int { return v.FullLoadErrorPercentage })
}

// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
func (o EndpointElasticsearchSettingsOutput) ServiceAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[EndpointElasticsearchSettings](o, func(v EndpointElasticsearchSettings) string { return v.ServiceAccessRoleArn })
}

type EndpointKafkaSettings struct {
	// Kafka broker location. Specify in the form broker-hostname-or-ip:port.
	Broker string `pulumi:"broker"`
	// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is `false`.
	IncludeControlDetails *bool `pulumi:"includeControlDetails"`
	// Include NULL and empty columns for records migrated to the endpoint. Default is `false`.
	IncludeNullAndEmpty *bool `pulumi:"includeNullAndEmpty"`
	// Shows the partition value within the Kafka message output unless the partition type is `schema-table-type`. Default is `false`.
	IncludePartitionValue *bool `pulumi:"includePartitionValue"`
	// Includes any data definition language (DDL) operations that change the table in the control data, such as `rename-table`, `drop-table`, `add-column`, `drop-column`, and `rename-column`. Default is `false`.
	IncludeTableAlterOperations *bool `pulumi:"includeTableAlterOperations"`
	// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for `transactionId`, previous `transactionId`, and `transactionRecordId` (the record offset within a transaction). Default is `false`.
	IncludeTransactionDetails *bool `pulumi:"includeTransactionDetails"`
	// Output format for the records created on the endpoint. Message format is `JSON` (default) or `JSON_UNFORMATTED` (a single line with no tab).
	MessageFormat *string `pulumi:"messageFormat"`
	// Maximum size in bytes for records created on the endpoint Default is `1,000,000`.
	MessageMaxBytes *int `pulumi:"messageMaxBytes"`
	// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the `noHexPrefix` endpoint setting to enable migration of RAW data type columns without adding the `'0x'` prefix.
	NoHexPrefix *bool `pulumi:"noHexPrefix"`
	// Prefixes schema and table names to partition values, when the partition type is `primary-key-type`. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is `false`.
	PartitionIncludeSchemaTable *bool `pulumi:"partitionIncludeSchemaTable"`
	// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
	SaslPassword *string `pulumi:"saslPassword"`
	// Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
	SaslUsername *string `pulumi:"saslUsername"`
	// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include `ssl-encryption`, `ssl-authentication`, and `sasl-ssl`. `sasl-ssl` requires `saslUsername` and `saslPassword`.
	SecurityProtocol *string `pulumi:"securityProtocol"`
	// ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
	SslCaCertificateArn *string `pulumi:"sslCaCertificateArn"`
	// ARN of the client certificate used to securely connect to a Kafka target endpoint.
	SslClientCertificateArn *string `pulumi:"sslClientCertificateArn"`
	// ARN for the client private key used to securely connect to a Kafka target endpoint.
	SslClientKeyArn *string `pulumi:"sslClientKeyArn"`
	// Password for the client private key used to securely connect to a Kafka target endpoint.
	SslClientKeyPassword *string `pulumi:"sslClientKeyPassword"`
	// Kafka topic for migration. Default is `kafka-default-topic`.
	Topic *string `pulumi:"topic"`
}

type EndpointKafkaSettingsArgs struct {
	// Kafka broker location. Specify in the form broker-hostname-or-ip:port.
	Broker pulumix.Input[string] `pulumi:"broker"`
	// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is `false`.
	IncludeControlDetails pulumix.Input[*bool] `pulumi:"includeControlDetails"`
	// Include NULL and empty columns for records migrated to the endpoint. Default is `false`.
	IncludeNullAndEmpty pulumix.Input[*bool] `pulumi:"includeNullAndEmpty"`
	// Shows the partition value within the Kafka message output unless the partition type is `schema-table-type`. Default is `false`.
	IncludePartitionValue pulumix.Input[*bool] `pulumi:"includePartitionValue"`
	// Includes any data definition language (DDL) operations that change the table in the control data, such as `rename-table`, `drop-table`, `add-column`, `drop-column`, and `rename-column`. Default is `false`.
	IncludeTableAlterOperations pulumix.Input[*bool] `pulumi:"includeTableAlterOperations"`
	// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for `transactionId`, previous `transactionId`, and `transactionRecordId` (the record offset within a transaction). Default is `false`.
	IncludeTransactionDetails pulumix.Input[*bool] `pulumi:"includeTransactionDetails"`
	// Output format for the records created on the endpoint. Message format is `JSON` (default) or `JSON_UNFORMATTED` (a single line with no tab).
	MessageFormat pulumix.Input[*string] `pulumi:"messageFormat"`
	// Maximum size in bytes for records created on the endpoint Default is `1,000,000`.
	MessageMaxBytes pulumix.Input[*int] `pulumi:"messageMaxBytes"`
	// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the `noHexPrefix` endpoint setting to enable migration of RAW data type columns without adding the `'0x'` prefix.
	NoHexPrefix pulumix.Input[*bool] `pulumi:"noHexPrefix"`
	// Prefixes schema and table names to partition values, when the partition type is `primary-key-type`. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is `false`.
	PartitionIncludeSchemaTable pulumix.Input[*bool] `pulumi:"partitionIncludeSchemaTable"`
	// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
	SaslPassword pulumix.Input[*string] `pulumi:"saslPassword"`
	// Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
	SaslUsername pulumix.Input[*string] `pulumi:"saslUsername"`
	// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include `ssl-encryption`, `ssl-authentication`, and `sasl-ssl`. `sasl-ssl` requires `saslUsername` and `saslPassword`.
	SecurityProtocol pulumix.Input[*string] `pulumi:"securityProtocol"`
	// ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
	SslCaCertificateArn pulumix.Input[*string] `pulumi:"sslCaCertificateArn"`
	// ARN of the client certificate used to securely connect to a Kafka target endpoint.
	SslClientCertificateArn pulumix.Input[*string] `pulumi:"sslClientCertificateArn"`
	// ARN for the client private key used to securely connect to a Kafka target endpoint.
	SslClientKeyArn pulumix.Input[*string] `pulumi:"sslClientKeyArn"`
	// Password for the client private key used to securely connect to a Kafka target endpoint.
	SslClientKeyPassword pulumix.Input[*string] `pulumi:"sslClientKeyPassword"`
	// Kafka topic for migration. Default is `kafka-default-topic`.
	Topic pulumix.Input[*string] `pulumi:"topic"`
}

func (EndpointKafkaSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointKafkaSettings)(nil)).Elem()
}

func (i EndpointKafkaSettingsArgs) ToEndpointKafkaSettingsOutput() EndpointKafkaSettingsOutput {
	return i.ToEndpointKafkaSettingsOutputWithContext(context.Background())
}

func (i EndpointKafkaSettingsArgs) ToEndpointKafkaSettingsOutputWithContext(ctx context.Context) EndpointKafkaSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointKafkaSettingsOutput)
}

func (i *EndpointKafkaSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointKafkaSettingsArgs] {
	return pulumix.Val(i)
}

type EndpointKafkaSettingsOutput struct{ *pulumi.OutputState }

func (EndpointKafkaSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointKafkaSettings)(nil)).Elem()
}

func (o EndpointKafkaSettingsOutput) ToEndpointKafkaSettingsOutput() EndpointKafkaSettingsOutput {
	return o
}

func (o EndpointKafkaSettingsOutput) ToEndpointKafkaSettingsOutputWithContext(ctx context.Context) EndpointKafkaSettingsOutput {
	return o
}

func (o EndpointKafkaSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointKafkaSettings] {
	return pulumix.Output[EndpointKafkaSettings]{
		OutputState: o.OutputState,
	}
}

// Kafka broker location. Specify in the form broker-hostname-or-ip:port.
func (o EndpointKafkaSettingsOutput) Broker() pulumix.Output[string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) string { return v.Broker })
}

// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is `false`.
func (o EndpointKafkaSettingsOutput) IncludeControlDetails() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.IncludeControlDetails })
}

// Include NULL and empty columns for records migrated to the endpoint. Default is `false`.
func (o EndpointKafkaSettingsOutput) IncludeNullAndEmpty() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.IncludeNullAndEmpty })
}

// Shows the partition value within the Kafka message output unless the partition type is `schema-table-type`. Default is `false`.
func (o EndpointKafkaSettingsOutput) IncludePartitionValue() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.IncludePartitionValue })
}

// Includes any data definition language (DDL) operations that change the table in the control data, such as `rename-table`, `drop-table`, `add-column`, `drop-column`, and `rename-column`. Default is `false`.
func (o EndpointKafkaSettingsOutput) IncludeTableAlterOperations() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.IncludeTableAlterOperations })
}

// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for `transactionId`, previous `transactionId`, and `transactionRecordId` (the record offset within a transaction). Default is `false`.
func (o EndpointKafkaSettingsOutput) IncludeTransactionDetails() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.IncludeTransactionDetails })
}

// Output format for the records created on the endpoint. Message format is `JSON` (default) or `JSON_UNFORMATTED` (a single line with no tab).
func (o EndpointKafkaSettingsOutput) MessageFormat() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.MessageFormat })
}

// Maximum size in bytes for records created on the endpoint Default is `1,000,000`.
func (o EndpointKafkaSettingsOutput) MessageMaxBytes() pulumix.Output[*int] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *int { return v.MessageMaxBytes })
}

// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the `noHexPrefix` endpoint setting to enable migration of RAW data type columns without adding the `'0x'` prefix.
func (o EndpointKafkaSettingsOutput) NoHexPrefix() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.NoHexPrefix })
}

// Prefixes schema and table names to partition values, when the partition type is `primary-key-type`. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is `false`.
func (o EndpointKafkaSettingsOutput) PartitionIncludeSchemaTable() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *bool { return v.PartitionIncludeSchemaTable })
}

// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
func (o EndpointKafkaSettingsOutput) SaslPassword() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SaslPassword })
}

// Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
func (o EndpointKafkaSettingsOutput) SaslUsername() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SaslUsername })
}

// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include `ssl-encryption`, `ssl-authentication`, and `sasl-ssl`. `sasl-ssl` requires `saslUsername` and `saslPassword`.
func (o EndpointKafkaSettingsOutput) SecurityProtocol() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SecurityProtocol })
}

// ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
func (o EndpointKafkaSettingsOutput) SslCaCertificateArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SslCaCertificateArn })
}

// ARN of the client certificate used to securely connect to a Kafka target endpoint.
func (o EndpointKafkaSettingsOutput) SslClientCertificateArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SslClientCertificateArn })
}

// ARN for the client private key used to securely connect to a Kafka target endpoint.
func (o EndpointKafkaSettingsOutput) SslClientKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SslClientKeyArn })
}

// Password for the client private key used to securely connect to a Kafka target endpoint.
func (o EndpointKafkaSettingsOutput) SslClientKeyPassword() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.SslClientKeyPassword })
}

// Kafka topic for migration. Default is `kafka-default-topic`.
func (o EndpointKafkaSettingsOutput) Topic() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKafkaSettings](o, func(v EndpointKafkaSettings) *string { return v.Topic })
}

type EndpointKinesisSettings struct {
	// Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is `false`.
	IncludeControlDetails *bool `pulumi:"includeControlDetails"`
	// Include NULL and empty columns in the target. Default is `false`.
	IncludeNullAndEmpty *bool `pulumi:"includeNullAndEmpty"`
	// Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is `false`.
	IncludePartitionValue *bool `pulumi:"includePartitionValue"`
	// Includes any data definition language (DDL) operations that change the table in the control data. Default is `false`.
	IncludeTableAlterOperations *bool `pulumi:"includeTableAlterOperations"`
	// Provides detailed transaction information from the source database. Default is `false`.
	IncludeTransactionDetails *bool `pulumi:"includeTransactionDetails"`
	// Output format for the records created. Default is `json`. Valid values are `json` and `json-unformatted` (a single line with no tab).
	MessageFormat *string `pulumi:"messageFormat"`
	// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is `false`.
	PartitionIncludeSchemaTable *bool `pulumi:"partitionIncludeSchemaTable"`
	// ARN of the IAM Role with permissions to write to the Kinesis data stream.
	ServiceAccessRoleArn *string `pulumi:"serviceAccessRoleArn"`
	// ARN of the Kinesis data stream.
	StreamArn *string `pulumi:"streamArn"`
}

type EndpointKinesisSettingsArgs struct {
	// Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is `false`.
	IncludeControlDetails pulumix.Input[*bool] `pulumi:"includeControlDetails"`
	// Include NULL and empty columns in the target. Default is `false`.
	IncludeNullAndEmpty pulumix.Input[*bool] `pulumi:"includeNullAndEmpty"`
	// Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is `false`.
	IncludePartitionValue pulumix.Input[*bool] `pulumi:"includePartitionValue"`
	// Includes any data definition language (DDL) operations that change the table in the control data. Default is `false`.
	IncludeTableAlterOperations pulumix.Input[*bool] `pulumi:"includeTableAlterOperations"`
	// Provides detailed transaction information from the source database. Default is `false`.
	IncludeTransactionDetails pulumix.Input[*bool] `pulumi:"includeTransactionDetails"`
	// Output format for the records created. Default is `json`. Valid values are `json` and `json-unformatted` (a single line with no tab).
	MessageFormat pulumix.Input[*string] `pulumi:"messageFormat"`
	// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is `false`.
	PartitionIncludeSchemaTable pulumix.Input[*bool] `pulumi:"partitionIncludeSchemaTable"`
	// ARN of the IAM Role with permissions to write to the Kinesis data stream.
	ServiceAccessRoleArn pulumix.Input[*string] `pulumi:"serviceAccessRoleArn"`
	// ARN of the Kinesis data stream.
	StreamArn pulumix.Input[*string] `pulumi:"streamArn"`
}

func (EndpointKinesisSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointKinesisSettings)(nil)).Elem()
}

func (i EndpointKinesisSettingsArgs) ToEndpointKinesisSettingsOutput() EndpointKinesisSettingsOutput {
	return i.ToEndpointKinesisSettingsOutputWithContext(context.Background())
}

func (i EndpointKinesisSettingsArgs) ToEndpointKinesisSettingsOutputWithContext(ctx context.Context) EndpointKinesisSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointKinesisSettingsOutput)
}

func (i *EndpointKinesisSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointKinesisSettingsArgs] {
	return pulumix.Val(i)
}

type EndpointKinesisSettingsOutput struct{ *pulumi.OutputState }

func (EndpointKinesisSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointKinesisSettings)(nil)).Elem()
}

func (o EndpointKinesisSettingsOutput) ToEndpointKinesisSettingsOutput() EndpointKinesisSettingsOutput {
	return o
}

func (o EndpointKinesisSettingsOutput) ToEndpointKinesisSettingsOutputWithContext(ctx context.Context) EndpointKinesisSettingsOutput {
	return o
}

func (o EndpointKinesisSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointKinesisSettings] {
	return pulumix.Output[EndpointKinesisSettings]{
		OutputState: o.OutputState,
	}
}

// Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is `false`.
func (o EndpointKinesisSettingsOutput) IncludeControlDetails() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *bool { return v.IncludeControlDetails })
}

// Include NULL and empty columns in the target. Default is `false`.
func (o EndpointKinesisSettingsOutput) IncludeNullAndEmpty() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *bool { return v.IncludeNullAndEmpty })
}

// Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is `false`.
func (o EndpointKinesisSettingsOutput) IncludePartitionValue() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *bool { return v.IncludePartitionValue })
}

// Includes any data definition language (DDL) operations that change the table in the control data. Default is `false`.
func (o EndpointKinesisSettingsOutput) IncludeTableAlterOperations() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *bool { return v.IncludeTableAlterOperations })
}

// Provides detailed transaction information from the source database. Default is `false`.
func (o EndpointKinesisSettingsOutput) IncludeTransactionDetails() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *bool { return v.IncludeTransactionDetails })
}

// Output format for the records created. Default is `json`. Valid values are `json` and `json-unformatted` (a single line with no tab).
func (o EndpointKinesisSettingsOutput) MessageFormat() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *string { return v.MessageFormat })
}

// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is `false`.
func (o EndpointKinesisSettingsOutput) PartitionIncludeSchemaTable() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *bool { return v.PartitionIncludeSchemaTable })
}

// ARN of the IAM Role with permissions to write to the Kinesis data stream.
func (o EndpointKinesisSettingsOutput) ServiceAccessRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *string { return v.ServiceAccessRoleArn })
}

// ARN of the Kinesis data stream.
func (o EndpointKinesisSettingsOutput) StreamArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointKinesisSettings](o, func(v EndpointKinesisSettings) *string { return v.StreamArn })
}

type EndpointMongodbSettings struct {
	// Authentication mechanism to access the MongoDB source endpoint. Default is `default`.
	AuthMechanism *string `pulumi:"authMechanism"`
	// Authentication database name. Not used when `authType` is `no`. Default is `admin`.
	AuthSource *string `pulumi:"authSource"`
	// Authentication type to access the MongoDB source endpoint. Default is `password`.
	AuthType *string `pulumi:"authType"`
	// Number of documents to preview to determine the document organization. Use this setting when `nestingLevel` is set to `one`. Default is `1000`.
	DocsToInvestigate *string `pulumi:"docsToInvestigate"`
	// Document ID. Use this setting when `nestingLevel` is set to `none`. Default is `false`.
	ExtractDocId *string `pulumi:"extractDocId"`
	// Specifies either document or table mode. Default is `none`. Valid values are `one` (table mode) and `none` (document mode).
	NestingLevel *string `pulumi:"nestingLevel"`
}

type EndpointMongodbSettingsArgs struct {
	// Authentication mechanism to access the MongoDB source endpoint. Default is `default`.
	AuthMechanism pulumix.Input[*string] `pulumi:"authMechanism"`
	// Authentication database name. Not used when `authType` is `no`. Default is `admin`.
	AuthSource pulumix.Input[*string] `pulumi:"authSource"`
	// Authentication type to access the MongoDB source endpoint. Default is `password`.
	AuthType pulumix.Input[*string] `pulumi:"authType"`
	// Number of documents to preview to determine the document organization. Use this setting when `nestingLevel` is set to `one`. Default is `1000`.
	DocsToInvestigate pulumix.Input[*string] `pulumi:"docsToInvestigate"`
	// Document ID. Use this setting when `nestingLevel` is set to `none`. Default is `false`.
	ExtractDocId pulumix.Input[*string] `pulumi:"extractDocId"`
	// Specifies either document or table mode. Default is `none`. Valid values are `one` (table mode) and `none` (document mode).
	NestingLevel pulumix.Input[*string] `pulumi:"nestingLevel"`
}

func (EndpointMongodbSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMongodbSettings)(nil)).Elem()
}

func (i EndpointMongodbSettingsArgs) ToEndpointMongodbSettingsOutput() EndpointMongodbSettingsOutput {
	return i.ToEndpointMongodbSettingsOutputWithContext(context.Background())
}

func (i EndpointMongodbSettingsArgs) ToEndpointMongodbSettingsOutputWithContext(ctx context.Context) EndpointMongodbSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMongodbSettingsOutput)
}

func (i *EndpointMongodbSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointMongodbSettingsArgs] {
	return pulumix.Val(i)
}

type EndpointMongodbSettingsOutput struct{ *pulumi.OutputState }

func (EndpointMongodbSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMongodbSettings)(nil)).Elem()
}

func (o EndpointMongodbSettingsOutput) ToEndpointMongodbSettingsOutput() EndpointMongodbSettingsOutput {
	return o
}

func (o EndpointMongodbSettingsOutput) ToEndpointMongodbSettingsOutputWithContext(ctx context.Context) EndpointMongodbSettingsOutput {
	return o
}

func (o EndpointMongodbSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointMongodbSettings] {
	return pulumix.Output[EndpointMongodbSettings]{
		OutputState: o.OutputState,
	}
}

// Authentication mechanism to access the MongoDB source endpoint. Default is `default`.
func (o EndpointMongodbSettingsOutput) AuthMechanism() pulumix.Output[*string] {
	return pulumix.Apply[EndpointMongodbSettings](o, func(v EndpointMongodbSettings) *string { return v.AuthMechanism })
}

// Authentication database name. Not used when `authType` is `no`. Default is `admin`.
func (o EndpointMongodbSettingsOutput) AuthSource() pulumix.Output[*string] {
	return pulumix.Apply[EndpointMongodbSettings](o, func(v EndpointMongodbSettings) *string { return v.AuthSource })
}

// Authentication type to access the MongoDB source endpoint. Default is `password`.
func (o EndpointMongodbSettingsOutput) AuthType() pulumix.Output[*string] {
	return pulumix.Apply[EndpointMongodbSettings](o, func(v EndpointMongodbSettings) *string { return v.AuthType })
}

// Number of documents to preview to determine the document organization. Use this setting when `nestingLevel` is set to `one`. Default is `1000`.
func (o EndpointMongodbSettingsOutput) DocsToInvestigate() pulumix.Output[*string] {
	return pulumix.Apply[EndpointMongodbSettings](o, func(v EndpointMongodbSettings) *string { return v.DocsToInvestigate })
}

// Document ID. Use this setting when `nestingLevel` is set to `none`. Default is `false`.
func (o EndpointMongodbSettingsOutput) ExtractDocId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointMongodbSettings](o, func(v EndpointMongodbSettings) *string { return v.ExtractDocId })
}

// Specifies either document or table mode. Default is `none`. Valid values are `one` (table mode) and `none` (document mode).
func (o EndpointMongodbSettingsOutput) NestingLevel() pulumix.Output[*string] {
	return pulumix.Apply[EndpointMongodbSettings](o, func(v EndpointMongodbSettings) *string { return v.NestingLevel })
}

type EndpointRedisSettings struct {
	// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
	AuthPassword *string `pulumi:"authPassword"`
	// The type of authentication to perform when connecting to a Redis target. Options include `none`, `auth-token`, and `auth-role`. The `auth-token` option requires an `authPassword` value to be provided. The `auth-role` option requires `authUserName` and `authPassword` values to be provided.
	AuthType string `pulumi:"authType"`
	// The username provided with the `auth-role` option of the AuthType setting for a Redis target endpoint.
	AuthUserName *string `pulumi:"authUserName"`
	// Transmission Control Protocol (TCP) port for the endpoint.
	Port int `pulumi:"port"`
	// Fully qualified domain name of the endpoint.
	ServerName string `pulumi:"serverName"`
	// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
	SslCaCertificateArn *string `pulumi:"sslCaCertificateArn"`
	// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include `plaintext`, `ssl-encryption`. The default is `ssl-encryption`.
	SslSecurityProtocol *string `pulumi:"sslSecurityProtocol"`
}

type EndpointRedisSettingsArgs struct {
	// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
	AuthPassword pulumix.Input[*string] `pulumi:"authPassword"`
	// The type of authentication to perform when connecting to a Redis target. Options include `none`, `auth-token`, and `auth-role`. The `auth-token` option requires an `authPassword` value to be provided. The `auth-role` option requires `authUserName` and `authPassword` values to be provided.
	AuthType pulumix.Input[string] `pulumi:"authType"`
	// The username provided with the `auth-role` option of the AuthType setting for a Redis target endpoint.
	AuthUserName pulumix.Input[*string] `pulumi:"authUserName"`
	// Transmission Control Protocol (TCP) port for the endpoint.
	Port pulumix.Input[int] `pulumi:"port"`
	// Fully qualified domain name of the endpoint.
	ServerName pulumix.Input[string] `pulumi:"serverName"`
	// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
	SslCaCertificateArn pulumix.Input[*string] `pulumi:"sslCaCertificateArn"`
	// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include `plaintext`, `ssl-encryption`. The default is `ssl-encryption`.
	SslSecurityProtocol pulumix.Input[*string] `pulumi:"sslSecurityProtocol"`
}

func (EndpointRedisSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRedisSettings)(nil)).Elem()
}

func (i EndpointRedisSettingsArgs) ToEndpointRedisSettingsOutput() EndpointRedisSettingsOutput {
	return i.ToEndpointRedisSettingsOutputWithContext(context.Background())
}

func (i EndpointRedisSettingsArgs) ToEndpointRedisSettingsOutputWithContext(ctx context.Context) EndpointRedisSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRedisSettingsOutput)
}

func (i *EndpointRedisSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointRedisSettingsArgs] {
	return pulumix.Val(i)
}

type EndpointRedisSettingsOutput struct{ *pulumi.OutputState }

func (EndpointRedisSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRedisSettings)(nil)).Elem()
}

func (o EndpointRedisSettingsOutput) ToEndpointRedisSettingsOutput() EndpointRedisSettingsOutput {
	return o
}

func (o EndpointRedisSettingsOutput) ToEndpointRedisSettingsOutputWithContext(ctx context.Context) EndpointRedisSettingsOutput {
	return o
}

func (o EndpointRedisSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointRedisSettings] {
	return pulumix.Output[EndpointRedisSettings]{
		OutputState: o.OutputState,
	}
}

// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
func (o EndpointRedisSettingsOutput) AuthPassword() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) *string { return v.AuthPassword })
}

// The type of authentication to perform when connecting to a Redis target. Options include `none`, `auth-token`, and `auth-role`. The `auth-token` option requires an `authPassword` value to be provided. The `auth-role` option requires `authUserName` and `authPassword` values to be provided.
func (o EndpointRedisSettingsOutput) AuthType() pulumix.Output[string] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) string { return v.AuthType })
}

// The username provided with the `auth-role` option of the AuthType setting for a Redis target endpoint.
func (o EndpointRedisSettingsOutput) AuthUserName() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) *string { return v.AuthUserName })
}

// Transmission Control Protocol (TCP) port for the endpoint.
func (o EndpointRedisSettingsOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) int { return v.Port })
}

// Fully qualified domain name of the endpoint.
func (o EndpointRedisSettingsOutput) ServerName() pulumix.Output[string] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) string { return v.ServerName })
}

// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
func (o EndpointRedisSettingsOutput) SslCaCertificateArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) *string { return v.SslCaCertificateArn })
}

// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include `plaintext`, `ssl-encryption`. The default is `ssl-encryption`.
func (o EndpointRedisSettingsOutput) SslSecurityProtocol() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedisSettings](o, func(v EndpointRedisSettings) *string { return v.SslSecurityProtocol })
}

type EndpointRedshiftSettings struct {
	// Custom S3 Bucket Object prefix for intermediate storage.
	BucketFolder *string `pulumi:"bucketFolder"`
	// Custom S3 Bucket name for intermediate storage.
	BucketName *string `pulumi:"bucketName"`
	// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
	EncryptionMode *string `pulumi:"encryptionMode"`
	// ARN or Id of KMS Key to use when `encryptionMode` is `SSE_KMS`.
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.
	ServiceAccessRoleArn *string `pulumi:"serviceAccessRoleArn"`
}

type EndpointRedshiftSettingsArgs struct {
	// Custom S3 Bucket Object prefix for intermediate storage.
	BucketFolder pulumix.Input[*string] `pulumi:"bucketFolder"`
	// Custom S3 Bucket name for intermediate storage.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
	EncryptionMode pulumix.Input[*string] `pulumi:"encryptionMode"`
	// ARN or Id of KMS Key to use when `encryptionMode` is `SSE_KMS`.
	ServerSideEncryptionKmsKeyId pulumix.Input[*string] `pulumi:"serverSideEncryptionKmsKeyId"`
	// Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.
	ServiceAccessRoleArn pulumix.Input[*string] `pulumi:"serviceAccessRoleArn"`
}

func (EndpointRedshiftSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRedshiftSettings)(nil)).Elem()
}

func (i EndpointRedshiftSettingsArgs) ToEndpointRedshiftSettingsOutput() EndpointRedshiftSettingsOutput {
	return i.ToEndpointRedshiftSettingsOutputWithContext(context.Background())
}

func (i EndpointRedshiftSettingsArgs) ToEndpointRedshiftSettingsOutputWithContext(ctx context.Context) EndpointRedshiftSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRedshiftSettingsOutput)
}

func (i *EndpointRedshiftSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointRedshiftSettingsArgs] {
	return pulumix.Val(i)
}

type EndpointRedshiftSettingsOutput struct{ *pulumi.OutputState }

func (EndpointRedshiftSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRedshiftSettings)(nil)).Elem()
}

func (o EndpointRedshiftSettingsOutput) ToEndpointRedshiftSettingsOutput() EndpointRedshiftSettingsOutput {
	return o
}

func (o EndpointRedshiftSettingsOutput) ToEndpointRedshiftSettingsOutputWithContext(ctx context.Context) EndpointRedshiftSettingsOutput {
	return o
}

func (o EndpointRedshiftSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointRedshiftSettings] {
	return pulumix.Output[EndpointRedshiftSettings]{
		OutputState: o.OutputState,
	}
}

// Custom S3 Bucket Object prefix for intermediate storage.
func (o EndpointRedshiftSettingsOutput) BucketFolder() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedshiftSettings](o, func(v EndpointRedshiftSettings) *string { return v.BucketFolder })
}

// Custom S3 Bucket name for intermediate storage.
func (o EndpointRedshiftSettingsOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedshiftSettings](o, func(v EndpointRedshiftSettings) *string { return v.BucketName })
}

// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
func (o EndpointRedshiftSettingsOutput) EncryptionMode() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedshiftSettings](o, func(v EndpointRedshiftSettings) *string { return v.EncryptionMode })
}

// ARN or Id of KMS Key to use when `encryptionMode` is `SSE_KMS`.
func (o EndpointRedshiftSettingsOutput) ServerSideEncryptionKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedshiftSettings](o, func(v EndpointRedshiftSettings) *string { return v.ServerSideEncryptionKmsKeyId })
}

// Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.
func (o EndpointRedshiftSettingsOutput) ServiceAccessRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointRedshiftSettings](o, func(v EndpointRedshiftSettings) *string { return v.ServiceAccessRoleArn })
}

type EndpointS3Settings struct {
	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName *bool `pulumi:"addColumnName"`
	// Custom S3 Bucket Object prefix for intermediate storage.
	BucketFolder *string `pulumi:"bucketFolder"`
	// Custom S3 Bucket name for intermediate storage.
	BucketName *string `pulumi:"bucketName"`
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `none`, `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Default is `none`.
	CannedAclForObjects *string `pulumi:"cannedAclForObjects"`
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates *bool `pulumi:"cdcInsertsAndUpdates"`
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly *bool `pulumi:"cdcInsertsOnly"`
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is `60`.
	CdcMaxBatchInterval *int `pulumi:"cdcMaxBatchInterval"`
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is `32000`. **NOTE:** Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
	CdcMinFileSize *int `pulumi:"cdcMinFileSize"`
	// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath *string `pulumi:"cdcPath"`
	// Set to compress target files. Default is `NONE`. Valid values are `GZIP` and `NONE`.
	CompressionType *string `pulumi:"compressionType"`
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter *string `pulumi:"csvDelimiter"`
	// String to use for all columns not included in the supplemental log.
	CsvNoSupValue *string `pulumi:"csvNoSupValue"`
	// String to as null when writing to the target.
	CsvNullValue *string `pulumi:"csvNullValue"`
	// Delimiter used to separate rows in the source files. Default is `\n`.
	CsvRowDelimiter *string `pulumi:"csvRowDelimiter"`
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`. Default is `csv`.
	DataFormat *string `pulumi:"dataFormat"`
	// Size of one data page in bytes. Default is `1048576` (1 MiB).
	DataPageSize *int `pulumi:"dataPageSize"`
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. Default is `SLASH`.
	DatePartitionDelimiter *string `pulumi:"datePartitionDelimiter"`
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`.
	DatePartitionEnabled *bool `pulumi:"datePartitionEnabled"`
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. Default is `YYYYMMDD`.
	DatePartitionSequence *string `pulumi:"datePartitionSequence"`
	// Maximum size in bytes of an encoded dictionary page of a column. Default is `1048576` (1 MiB).
	DictPageSizeLimit *int `pulumi:"dictPageSizeLimit"`
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics *bool `pulumi:"enableStatistics"`
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. Default is `rleDictionary`.
	EncodingType *string `pulumi:"encodingType"`
	// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
	EncryptionMode *string `pulumi:"encryptionMode"`
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition *string `pulumi:"externalTableDefinition"`
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. Default is `0`.
	IgnoreHeaderRows *int `pulumi:"ignoreHeaderRows"`
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad *bool `pulumi:"includeOpForFullLoad"`
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. Default is `1048576` (1 GB).
	MaxFileSize *int `pulumi:"maxFileSize"`
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`.
	ParquetTimestampInMillisecond *bool `pulumi:"parquetTimestampInMillisecond"`
	// Version of the .parquet file format. Default is `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
	ParquetVersion *string `pulumi:"parquetVersion"`
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`.
	PreserveTransactions *bool `pulumi:"preserveTransactions"`
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 *bool `pulumi:"rfc4180"`
	// Number of rows in a row group. Default is `10000`.
	RowGroupLength *int `pulumi:"rowGroupLength"`
	// ARN or Id of KMS Key to use when `encryptionMode` is `SSE_KMS`.
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
	ServiceAccessRoleArn *string `pulumi:"serviceAccessRoleArn"`
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName *string `pulumi:"timestampColumnName"`
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log.
	UseCsvNoSupValue *bool `pulumi:"useCsvNoSupValue"`
	// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp *bool `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

type EndpointS3SettingsArgs struct {
	// Whether to add column name information to the .csv output file. Default is `false`.
	AddColumnName pulumix.Input[*bool] `pulumi:"addColumnName"`
	// Custom S3 Bucket Object prefix for intermediate storage.
	BucketFolder pulumix.Input[*string] `pulumi:"bucketFolder"`
	// Custom S3 Bucket name for intermediate storage.
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `none`, `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Default is `none`.
	CannedAclForObjects pulumix.Input[*string] `pulumi:"cannedAclForObjects"`
	// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsAndUpdates pulumix.Input[*bool] `pulumi:"cdcInsertsAndUpdates"`
	// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
	CdcInsertsOnly pulumix.Input[*bool] `pulumi:"cdcInsertsOnly"`
	// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is `60`.
	CdcMaxBatchInterval pulumix.Input[*int] `pulumi:"cdcMaxBatchInterval"`
	// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is `32000`. **NOTE:** Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
	CdcMinFileSize pulumix.Input[*int] `pulumi:"cdcMinFileSize"`
	// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
	CdcPath pulumix.Input[*string] `pulumi:"cdcPath"`
	// Set to compress target files. Default is `NONE`. Valid values are `GZIP` and `NONE`.
	CompressionType pulumix.Input[*string] `pulumi:"compressionType"`
	// Delimiter used to separate columns in the source files. Default is `,`.
	CsvDelimiter pulumix.Input[*string] `pulumi:"csvDelimiter"`
	// String to use for all columns not included in the supplemental log.
	CsvNoSupValue pulumix.Input[*string] `pulumi:"csvNoSupValue"`
	// String to as null when writing to the target.
	CsvNullValue pulumix.Input[*string] `pulumi:"csvNullValue"`
	// Delimiter used to separate rows in the source files. Default is `\n`.
	CsvRowDelimiter pulumix.Input[*string] `pulumi:"csvRowDelimiter"`
	// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`. Default is `csv`.
	DataFormat pulumix.Input[*string] `pulumi:"dataFormat"`
	// Size of one data page in bytes. Default is `1048576` (1 MiB).
	DataPageSize pulumix.Input[*int] `pulumi:"dataPageSize"`
	// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. Default is `SLASH`.
	DatePartitionDelimiter pulumix.Input[*string] `pulumi:"datePartitionDelimiter"`
	// Partition S3 bucket folders based on transaction commit dates. Default is `false`.
	DatePartitionEnabled pulumix.Input[*bool] `pulumi:"datePartitionEnabled"`
	// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. Default is `YYYYMMDD`.
	DatePartitionSequence pulumix.Input[*string] `pulumi:"datePartitionSequence"`
	// Maximum size in bytes of an encoded dictionary page of a column. Default is `1048576` (1 MiB).
	DictPageSizeLimit pulumix.Input[*int] `pulumi:"dictPageSizeLimit"`
	// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
	EnableStatistics pulumix.Input[*bool] `pulumi:"enableStatistics"`
	// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. Default is `rleDictionary`.
	EncodingType pulumix.Input[*string] `pulumi:"encodingType"`
	// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
	EncryptionMode pulumix.Input[*string] `pulumi:"encryptionMode"`
	// JSON document that describes how AWS DMS should interpret the data.
	ExternalTableDefinition pulumix.Input[*string] `pulumi:"externalTableDefinition"`
	// When this value is set to `1`, DMS ignores the first row header in a .csv file. Default is `0`.
	IgnoreHeaderRows pulumix.Input[*int] `pulumi:"ignoreHeaderRows"`
	// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
	IncludeOpForFullLoad pulumix.Input[*bool] `pulumi:"includeOpForFullLoad"`
	// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. Default is `1048576` (1 GB).
	MaxFileSize pulumix.Input[*int] `pulumi:"maxFileSize"`
	// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`.
	ParquetTimestampInMillisecond pulumix.Input[*bool] `pulumi:"parquetTimestampInMillisecond"`
	// Version of the .parquet file format. Default is `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
	ParquetVersion pulumix.Input[*string] `pulumi:"parquetVersion"`
	// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`.
	PreserveTransactions pulumix.Input[*bool] `pulumi:"preserveTransactions"`
	// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
	Rfc4180 pulumix.Input[*bool] `pulumi:"rfc4180"`
	// Number of rows in a row group. Default is `10000`.
	RowGroupLength pulumix.Input[*int] `pulumi:"rowGroupLength"`
	// ARN or Id of KMS Key to use when `encryptionMode` is `SSE_KMS`.
	ServerSideEncryptionKmsKeyId pulumix.Input[*string] `pulumi:"serverSideEncryptionKmsKeyId"`
	// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
	ServiceAccessRoleArn pulumix.Input[*string] `pulumi:"serviceAccessRoleArn"`
	// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
	TimestampColumnName pulumix.Input[*string] `pulumi:"timestampColumnName"`
	// Whether to use `csvNoSupValue` for columns not included in the supplemental log.
	UseCsvNoSupValue pulumix.Input[*bool] `pulumi:"useCsvNoSupValue"`
	// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
	UseTaskStartTimeForFullLoadTimestamp pulumix.Input[*bool] `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

func (EndpointS3SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointS3Settings)(nil)).Elem()
}

func (i EndpointS3SettingsArgs) ToEndpointS3SettingsOutput() EndpointS3SettingsOutput {
	return i.ToEndpointS3SettingsOutputWithContext(context.Background())
}

func (i EndpointS3SettingsArgs) ToEndpointS3SettingsOutputWithContext(ctx context.Context) EndpointS3SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointS3SettingsOutput)
}

func (i *EndpointS3SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointS3SettingsArgs] {
	return pulumix.Val(i)
}

type EndpointS3SettingsOutput struct{ *pulumi.OutputState }

func (EndpointS3SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointS3Settings)(nil)).Elem()
}

func (o EndpointS3SettingsOutput) ToEndpointS3SettingsOutput() EndpointS3SettingsOutput {
	return o
}

func (o EndpointS3SettingsOutput) ToEndpointS3SettingsOutputWithContext(ctx context.Context) EndpointS3SettingsOutput {
	return o
}

func (o EndpointS3SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointS3Settings] {
	return pulumix.Output[EndpointS3Settings]{
		OutputState: o.OutputState,
	}
}

// Whether to add column name information to the .csv output file. Default is `false`.
func (o EndpointS3SettingsOutput) AddColumnName() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.AddColumnName })
}

// Custom S3 Bucket Object prefix for intermediate storage.
func (o EndpointS3SettingsOutput) BucketFolder() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.BucketFolder })
}

// Custom S3 Bucket name for intermediate storage.
func (o EndpointS3SettingsOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.BucketName })
}

// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `none`, `private`, `public-read`, `public-read-write`, `authenticated-read`, `aws-exec-read`, `bucket-owner-read`, and `bucket-owner-full-control`. Default is `none`.
func (o EndpointS3SettingsOutput) CannedAclForObjects() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CannedAclForObjects })
}

// Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
func (o EndpointS3SettingsOutput) CdcInsertsAndUpdates() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.CdcInsertsAndUpdates })
}

// Whether to write insert operations to .csv or .parquet output files. Default is `false`.
func (o EndpointS3SettingsOutput) CdcInsertsOnly() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.CdcInsertsOnly })
}

// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is `60`.
func (o EndpointS3SettingsOutput) CdcMaxBatchInterval() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.CdcMaxBatchInterval })
}

// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is `32000`. **NOTE:** Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
func (o EndpointS3SettingsOutput) CdcMinFileSize() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.CdcMinFileSize })
}

// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If `cdcPath` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
func (o EndpointS3SettingsOutput) CdcPath() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CdcPath })
}

// Set to compress target files. Default is `NONE`. Valid values are `GZIP` and `NONE`.
func (o EndpointS3SettingsOutput) CompressionType() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CompressionType })
}

// Delimiter used to separate columns in the source files. Default is `,`.
func (o EndpointS3SettingsOutput) CsvDelimiter() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CsvDelimiter })
}

// String to use for all columns not included in the supplemental log.
func (o EndpointS3SettingsOutput) CsvNoSupValue() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CsvNoSupValue })
}

// String to as null when writing to the target.
func (o EndpointS3SettingsOutput) CsvNullValue() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CsvNullValue })
}

// Delimiter used to separate rows in the source files. Default is `\n`.
func (o EndpointS3SettingsOutput) CsvRowDelimiter() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.CsvRowDelimiter })
}

// Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`. Default is `csv`.
func (o EndpointS3SettingsOutput) DataFormat() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.DataFormat })
}

// Size of one data page in bytes. Default is `1048576` (1 MiB).
func (o EndpointS3SettingsOutput) DataPageSize() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.DataPageSize })
}

// Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. Default is `SLASH`.
func (o EndpointS3SettingsOutput) DatePartitionDelimiter() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.DatePartitionDelimiter })
}

// Partition S3 bucket folders based on transaction commit dates. Default is `false`.
func (o EndpointS3SettingsOutput) DatePartitionEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.DatePartitionEnabled })
}

// Date format to use during folder partitioning. Use this parameter when `datePartitionEnabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. Default is `YYYYMMDD`.
func (o EndpointS3SettingsOutput) DatePartitionSequence() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.DatePartitionSequence })
}

// Maximum size in bytes of an encoded dictionary page of a column. Default is `1048576` (1 MiB).
func (o EndpointS3SettingsOutput) DictPageSizeLimit() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.DictPageSizeLimit })
}

// Whether to enable statistics for Parquet pages and row groups. Default is `true`.
func (o EndpointS3SettingsOutput) EnableStatistics() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.EnableStatistics })
}

// Type of encoding to use. Value values are `rleDictionary`, `plain`, and `plainDictionary`. Default is `rleDictionary`.
func (o EndpointS3SettingsOutput) EncodingType() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.EncodingType })
}

// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to `SSE_S3`. Valid values are `SSE_S3` and `SSE_KMS`.
func (o EndpointS3SettingsOutput) EncryptionMode() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.EncryptionMode })
}

// JSON document that describes how AWS DMS should interpret the data.
func (o EndpointS3SettingsOutput) ExternalTableDefinition() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.ExternalTableDefinition })
}

// When this value is set to `1`, DMS ignores the first row header in a .csv file. Default is `0`.
func (o EndpointS3SettingsOutput) IgnoreHeaderRows() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.IgnoreHeaderRows })
}

// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
func (o EndpointS3SettingsOutput) IncludeOpForFullLoad() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.IncludeOpForFullLoad })
}

// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. Default is `1048576` (1 GB).
func (o EndpointS3SettingsOutput) MaxFileSize() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.MaxFileSize })
}

// Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`.
func (o EndpointS3SettingsOutput) ParquetTimestampInMillisecond() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.ParquetTimestampInMillisecond })
}

// Version of the .parquet file format. Default is `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
func (o EndpointS3SettingsOutput) ParquetVersion() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.ParquetVersion })
}

// Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdcPath`. Default is `false`.
func (o EndpointS3SettingsOutput) PreserveTransactions() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.PreserveTransactions })
}

// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
func (o EndpointS3SettingsOutput) Rfc4180() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.Rfc4180 })
}

// Number of rows in a row group. Default is `10000`.
func (o EndpointS3SettingsOutput) RowGroupLength() pulumix.Output[*int] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *int { return v.RowGroupLength })
}

// ARN or Id of KMS Key to use when `encryptionMode` is `SSE_KMS`.
func (o EndpointS3SettingsOutput) ServerSideEncryptionKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.ServerSideEncryptionKmsKeyId })
}

// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
func (o EndpointS3SettingsOutput) ServiceAccessRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.ServiceAccessRoleArn })
}

// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
func (o EndpointS3SettingsOutput) TimestampColumnName() pulumix.Output[*string] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *string { return v.TimestampColumnName })
}

// Whether to use `csvNoSupValue` for columns not included in the supplemental log.
func (o EndpointS3SettingsOutput) UseCsvNoSupValue() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.UseCsvNoSupValue })
}

// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is `false`.
func (o EndpointS3SettingsOutput) UseTaskStartTimeForFullLoadTimestamp() pulumix.Output[*bool] {
	return pulumix.Apply[EndpointS3Settings](o, func(v EndpointS3Settings) *bool { return v.UseTaskStartTimeForFullLoadTimestamp })
}

type GetEndpointElasticsearchSetting struct {
	EndpointUri             string `pulumi:"endpointUri"`
	ErrorRetryDuration      int    `pulumi:"errorRetryDuration"`
	FullLoadErrorPercentage int    `pulumi:"fullLoadErrorPercentage"`
	ServiceAccessRoleArn    string `pulumi:"serviceAccessRoleArn"`
}

type GetEndpointElasticsearchSettingArgs struct {
	EndpointUri             pulumix.Input[string] `pulumi:"endpointUri"`
	ErrorRetryDuration      pulumix.Input[int]    `pulumi:"errorRetryDuration"`
	FullLoadErrorPercentage pulumix.Input[int]    `pulumi:"fullLoadErrorPercentage"`
	ServiceAccessRoleArn    pulumix.Input[string] `pulumi:"serviceAccessRoleArn"`
}

func (GetEndpointElasticsearchSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointElasticsearchSetting)(nil)).Elem()
}

func (i GetEndpointElasticsearchSettingArgs) ToGetEndpointElasticsearchSettingOutput() GetEndpointElasticsearchSettingOutput {
	return i.ToGetEndpointElasticsearchSettingOutputWithContext(context.Background())
}

func (i GetEndpointElasticsearchSettingArgs) ToGetEndpointElasticsearchSettingOutputWithContext(ctx context.Context) GetEndpointElasticsearchSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointElasticsearchSettingOutput)
}

func (i *GetEndpointElasticsearchSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointElasticsearchSettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointElasticsearchSettingOutput struct{ *pulumi.OutputState }

func (GetEndpointElasticsearchSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointElasticsearchSetting)(nil)).Elem()
}

func (o GetEndpointElasticsearchSettingOutput) ToGetEndpointElasticsearchSettingOutput() GetEndpointElasticsearchSettingOutput {
	return o
}

func (o GetEndpointElasticsearchSettingOutput) ToGetEndpointElasticsearchSettingOutputWithContext(ctx context.Context) GetEndpointElasticsearchSettingOutput {
	return o
}

func (o GetEndpointElasticsearchSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointElasticsearchSetting] {
	return pulumix.Output[GetEndpointElasticsearchSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointElasticsearchSettingOutput) EndpointUri() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointElasticsearchSetting](o, func(v GetEndpointElasticsearchSetting) string { return v.EndpointUri })
}

func (o GetEndpointElasticsearchSettingOutput) ErrorRetryDuration() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointElasticsearchSetting](o, func(v GetEndpointElasticsearchSetting) int { return v.ErrorRetryDuration })
}

func (o GetEndpointElasticsearchSettingOutput) FullLoadErrorPercentage() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointElasticsearchSetting](o, func(v GetEndpointElasticsearchSetting) int { return v.FullLoadErrorPercentage })
}

func (o GetEndpointElasticsearchSettingOutput) ServiceAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointElasticsearchSetting](o, func(v GetEndpointElasticsearchSetting) string { return v.ServiceAccessRoleArn })
}

type GetEndpointKafkaSetting struct {
	Broker                      string `pulumi:"broker"`
	IncludeControlDetails       bool   `pulumi:"includeControlDetails"`
	IncludeNullAndEmpty         bool   `pulumi:"includeNullAndEmpty"`
	IncludePartitionValue       bool   `pulumi:"includePartitionValue"`
	IncludeTableAlterOperations bool   `pulumi:"includeTableAlterOperations"`
	IncludeTransactionDetails   bool   `pulumi:"includeTransactionDetails"`
	MessageFormat               string `pulumi:"messageFormat"`
	MessageMaxBytes             int    `pulumi:"messageMaxBytes"`
	NoHexPrefix                 bool   `pulumi:"noHexPrefix"`
	PartitionIncludeSchemaTable bool   `pulumi:"partitionIncludeSchemaTable"`
	SaslPassword                string `pulumi:"saslPassword"`
	SaslUsername                string `pulumi:"saslUsername"`
	SecurityProtocol            string `pulumi:"securityProtocol"`
	SslCaCertificateArn         string `pulumi:"sslCaCertificateArn"`
	SslClientCertificateArn     string `pulumi:"sslClientCertificateArn"`
	SslClientKeyArn             string `pulumi:"sslClientKeyArn"`
	SslClientKeyPassword        string `pulumi:"sslClientKeyPassword"`
	Topic                       string `pulumi:"topic"`
}

type GetEndpointKafkaSettingArgs struct {
	Broker                      pulumix.Input[string] `pulumi:"broker"`
	IncludeControlDetails       pulumix.Input[bool]   `pulumi:"includeControlDetails"`
	IncludeNullAndEmpty         pulumix.Input[bool]   `pulumi:"includeNullAndEmpty"`
	IncludePartitionValue       pulumix.Input[bool]   `pulumi:"includePartitionValue"`
	IncludeTableAlterOperations pulumix.Input[bool]   `pulumi:"includeTableAlterOperations"`
	IncludeTransactionDetails   pulumix.Input[bool]   `pulumi:"includeTransactionDetails"`
	MessageFormat               pulumix.Input[string] `pulumi:"messageFormat"`
	MessageMaxBytes             pulumix.Input[int]    `pulumi:"messageMaxBytes"`
	NoHexPrefix                 pulumix.Input[bool]   `pulumi:"noHexPrefix"`
	PartitionIncludeSchemaTable pulumix.Input[bool]   `pulumi:"partitionIncludeSchemaTable"`
	SaslPassword                pulumix.Input[string] `pulumi:"saslPassword"`
	SaslUsername                pulumix.Input[string] `pulumi:"saslUsername"`
	SecurityProtocol            pulumix.Input[string] `pulumi:"securityProtocol"`
	SslCaCertificateArn         pulumix.Input[string] `pulumi:"sslCaCertificateArn"`
	SslClientCertificateArn     pulumix.Input[string] `pulumi:"sslClientCertificateArn"`
	SslClientKeyArn             pulumix.Input[string] `pulumi:"sslClientKeyArn"`
	SslClientKeyPassword        pulumix.Input[string] `pulumi:"sslClientKeyPassword"`
	Topic                       pulumix.Input[string] `pulumi:"topic"`
}

func (GetEndpointKafkaSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointKafkaSetting)(nil)).Elem()
}

func (i GetEndpointKafkaSettingArgs) ToGetEndpointKafkaSettingOutput() GetEndpointKafkaSettingOutput {
	return i.ToGetEndpointKafkaSettingOutputWithContext(context.Background())
}

func (i GetEndpointKafkaSettingArgs) ToGetEndpointKafkaSettingOutputWithContext(ctx context.Context) GetEndpointKafkaSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointKafkaSettingOutput)
}

func (i *GetEndpointKafkaSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointKafkaSettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointKafkaSettingOutput struct{ *pulumi.OutputState }

func (GetEndpointKafkaSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointKafkaSetting)(nil)).Elem()
}

func (o GetEndpointKafkaSettingOutput) ToGetEndpointKafkaSettingOutput() GetEndpointKafkaSettingOutput {
	return o
}

func (o GetEndpointKafkaSettingOutput) ToGetEndpointKafkaSettingOutputWithContext(ctx context.Context) GetEndpointKafkaSettingOutput {
	return o
}

func (o GetEndpointKafkaSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointKafkaSetting] {
	return pulumix.Output[GetEndpointKafkaSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointKafkaSettingOutput) Broker() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.Broker })
}

func (o GetEndpointKafkaSettingOutput) IncludeControlDetails() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.IncludeControlDetails })
}

func (o GetEndpointKafkaSettingOutput) IncludeNullAndEmpty() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.IncludeNullAndEmpty })
}

func (o GetEndpointKafkaSettingOutput) IncludePartitionValue() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.IncludePartitionValue })
}

func (o GetEndpointKafkaSettingOutput) IncludeTableAlterOperations() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.IncludeTableAlterOperations })
}

func (o GetEndpointKafkaSettingOutput) IncludeTransactionDetails() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.IncludeTransactionDetails })
}

func (o GetEndpointKafkaSettingOutput) MessageFormat() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.MessageFormat })
}

func (o GetEndpointKafkaSettingOutput) MessageMaxBytes() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) int { return v.MessageMaxBytes })
}

func (o GetEndpointKafkaSettingOutput) NoHexPrefix() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.NoHexPrefix })
}

func (o GetEndpointKafkaSettingOutput) PartitionIncludeSchemaTable() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) bool { return v.PartitionIncludeSchemaTable })
}

func (o GetEndpointKafkaSettingOutput) SaslPassword() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SaslPassword })
}

func (o GetEndpointKafkaSettingOutput) SaslUsername() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SaslUsername })
}

func (o GetEndpointKafkaSettingOutput) SecurityProtocol() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SecurityProtocol })
}

func (o GetEndpointKafkaSettingOutput) SslCaCertificateArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SslCaCertificateArn })
}

func (o GetEndpointKafkaSettingOutput) SslClientCertificateArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SslClientCertificateArn })
}

func (o GetEndpointKafkaSettingOutput) SslClientKeyArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SslClientKeyArn })
}

func (o GetEndpointKafkaSettingOutput) SslClientKeyPassword() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.SslClientKeyPassword })
}

func (o GetEndpointKafkaSettingOutput) Topic() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKafkaSetting](o, func(v GetEndpointKafkaSetting) string { return v.Topic })
}

type GetEndpointKinesisSetting struct {
	IncludeControlDetails       bool   `pulumi:"includeControlDetails"`
	IncludeNullAndEmpty         bool   `pulumi:"includeNullAndEmpty"`
	IncludePartitionValue       bool   `pulumi:"includePartitionValue"`
	IncludeTableAlterOperations bool   `pulumi:"includeTableAlterOperations"`
	IncludeTransactionDetails   bool   `pulumi:"includeTransactionDetails"`
	MessageFormat               string `pulumi:"messageFormat"`
	PartitionIncludeSchemaTable bool   `pulumi:"partitionIncludeSchemaTable"`
	ServiceAccessRoleArn        string `pulumi:"serviceAccessRoleArn"`
	StreamArn                   string `pulumi:"streamArn"`
}

type GetEndpointKinesisSettingArgs struct {
	IncludeControlDetails       pulumix.Input[bool]   `pulumi:"includeControlDetails"`
	IncludeNullAndEmpty         pulumix.Input[bool]   `pulumi:"includeNullAndEmpty"`
	IncludePartitionValue       pulumix.Input[bool]   `pulumi:"includePartitionValue"`
	IncludeTableAlterOperations pulumix.Input[bool]   `pulumi:"includeTableAlterOperations"`
	IncludeTransactionDetails   pulumix.Input[bool]   `pulumi:"includeTransactionDetails"`
	MessageFormat               pulumix.Input[string] `pulumi:"messageFormat"`
	PartitionIncludeSchemaTable pulumix.Input[bool]   `pulumi:"partitionIncludeSchemaTable"`
	ServiceAccessRoleArn        pulumix.Input[string] `pulumi:"serviceAccessRoleArn"`
	StreamArn                   pulumix.Input[string] `pulumi:"streamArn"`
}

func (GetEndpointKinesisSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointKinesisSetting)(nil)).Elem()
}

func (i GetEndpointKinesisSettingArgs) ToGetEndpointKinesisSettingOutput() GetEndpointKinesisSettingOutput {
	return i.ToGetEndpointKinesisSettingOutputWithContext(context.Background())
}

func (i GetEndpointKinesisSettingArgs) ToGetEndpointKinesisSettingOutputWithContext(ctx context.Context) GetEndpointKinesisSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointKinesisSettingOutput)
}

func (i *GetEndpointKinesisSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointKinesisSettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointKinesisSettingOutput struct{ *pulumi.OutputState }

func (GetEndpointKinesisSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointKinesisSetting)(nil)).Elem()
}

func (o GetEndpointKinesisSettingOutput) ToGetEndpointKinesisSettingOutput() GetEndpointKinesisSettingOutput {
	return o
}

func (o GetEndpointKinesisSettingOutput) ToGetEndpointKinesisSettingOutputWithContext(ctx context.Context) GetEndpointKinesisSettingOutput {
	return o
}

func (o GetEndpointKinesisSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointKinesisSetting] {
	return pulumix.Output[GetEndpointKinesisSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointKinesisSettingOutput) IncludeControlDetails() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) bool { return v.IncludeControlDetails })
}

func (o GetEndpointKinesisSettingOutput) IncludeNullAndEmpty() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) bool { return v.IncludeNullAndEmpty })
}

func (o GetEndpointKinesisSettingOutput) IncludePartitionValue() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) bool { return v.IncludePartitionValue })
}

func (o GetEndpointKinesisSettingOutput) IncludeTableAlterOperations() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) bool { return v.IncludeTableAlterOperations })
}

func (o GetEndpointKinesisSettingOutput) IncludeTransactionDetails() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) bool { return v.IncludeTransactionDetails })
}

func (o GetEndpointKinesisSettingOutput) MessageFormat() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) string { return v.MessageFormat })
}

func (o GetEndpointKinesisSettingOutput) PartitionIncludeSchemaTable() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) bool { return v.PartitionIncludeSchemaTable })
}

func (o GetEndpointKinesisSettingOutput) ServiceAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) string { return v.ServiceAccessRoleArn })
}

func (o GetEndpointKinesisSettingOutput) StreamArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointKinesisSetting](o, func(v GetEndpointKinesisSetting) string { return v.StreamArn })
}

type GetEndpointMongodbSetting struct {
	AuthMechanism     string `pulumi:"authMechanism"`
	AuthSource        string `pulumi:"authSource"`
	AuthType          string `pulumi:"authType"`
	DocsToInvestigate string `pulumi:"docsToInvestigate"`
	ExtractDocId      string `pulumi:"extractDocId"`
	NestingLevel      string `pulumi:"nestingLevel"`
}

type GetEndpointMongodbSettingArgs struct {
	AuthMechanism     pulumix.Input[string] `pulumi:"authMechanism"`
	AuthSource        pulumix.Input[string] `pulumi:"authSource"`
	AuthType          pulumix.Input[string] `pulumi:"authType"`
	DocsToInvestigate pulumix.Input[string] `pulumi:"docsToInvestigate"`
	ExtractDocId      pulumix.Input[string] `pulumi:"extractDocId"`
	NestingLevel      pulumix.Input[string] `pulumi:"nestingLevel"`
}

func (GetEndpointMongodbSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointMongodbSetting)(nil)).Elem()
}

func (i GetEndpointMongodbSettingArgs) ToGetEndpointMongodbSettingOutput() GetEndpointMongodbSettingOutput {
	return i.ToGetEndpointMongodbSettingOutputWithContext(context.Background())
}

func (i GetEndpointMongodbSettingArgs) ToGetEndpointMongodbSettingOutputWithContext(ctx context.Context) GetEndpointMongodbSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointMongodbSettingOutput)
}

func (i *GetEndpointMongodbSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointMongodbSettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointMongodbSettingOutput struct{ *pulumi.OutputState }

func (GetEndpointMongodbSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointMongodbSetting)(nil)).Elem()
}

func (o GetEndpointMongodbSettingOutput) ToGetEndpointMongodbSettingOutput() GetEndpointMongodbSettingOutput {
	return o
}

func (o GetEndpointMongodbSettingOutput) ToGetEndpointMongodbSettingOutputWithContext(ctx context.Context) GetEndpointMongodbSettingOutput {
	return o
}

func (o GetEndpointMongodbSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointMongodbSetting] {
	return pulumix.Output[GetEndpointMongodbSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointMongodbSettingOutput) AuthMechanism() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointMongodbSetting](o, func(v GetEndpointMongodbSetting) string { return v.AuthMechanism })
}

func (o GetEndpointMongodbSettingOutput) AuthSource() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointMongodbSetting](o, func(v GetEndpointMongodbSetting) string { return v.AuthSource })
}

func (o GetEndpointMongodbSettingOutput) AuthType() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointMongodbSetting](o, func(v GetEndpointMongodbSetting) string { return v.AuthType })
}

func (o GetEndpointMongodbSettingOutput) DocsToInvestigate() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointMongodbSetting](o, func(v GetEndpointMongodbSetting) string { return v.DocsToInvestigate })
}

func (o GetEndpointMongodbSettingOutput) ExtractDocId() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointMongodbSetting](o, func(v GetEndpointMongodbSetting) string { return v.ExtractDocId })
}

func (o GetEndpointMongodbSettingOutput) NestingLevel() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointMongodbSetting](o, func(v GetEndpointMongodbSetting) string { return v.NestingLevel })
}

type GetEndpointRedisSetting struct {
	AuthPassword        string `pulumi:"authPassword"`
	AuthType            string `pulumi:"authType"`
	AuthUserName        string `pulumi:"authUserName"`
	Port                int    `pulumi:"port"`
	ServerName          string `pulumi:"serverName"`
	SslCaCertificateArn string `pulumi:"sslCaCertificateArn"`
	SslSecurityProtocol string `pulumi:"sslSecurityProtocol"`
}

type GetEndpointRedisSettingArgs struct {
	AuthPassword        pulumix.Input[string] `pulumi:"authPassword"`
	AuthType            pulumix.Input[string] `pulumi:"authType"`
	AuthUserName        pulumix.Input[string] `pulumi:"authUserName"`
	Port                pulumix.Input[int]    `pulumi:"port"`
	ServerName          pulumix.Input[string] `pulumi:"serverName"`
	SslCaCertificateArn pulumix.Input[string] `pulumi:"sslCaCertificateArn"`
	SslSecurityProtocol pulumix.Input[string] `pulumi:"sslSecurityProtocol"`
}

func (GetEndpointRedisSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointRedisSetting)(nil)).Elem()
}

func (i GetEndpointRedisSettingArgs) ToGetEndpointRedisSettingOutput() GetEndpointRedisSettingOutput {
	return i.ToGetEndpointRedisSettingOutputWithContext(context.Background())
}

func (i GetEndpointRedisSettingArgs) ToGetEndpointRedisSettingOutputWithContext(ctx context.Context) GetEndpointRedisSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointRedisSettingOutput)
}

func (i *GetEndpointRedisSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointRedisSettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointRedisSettingOutput struct{ *pulumi.OutputState }

func (GetEndpointRedisSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointRedisSetting)(nil)).Elem()
}

func (o GetEndpointRedisSettingOutput) ToGetEndpointRedisSettingOutput() GetEndpointRedisSettingOutput {
	return o
}

func (o GetEndpointRedisSettingOutput) ToGetEndpointRedisSettingOutputWithContext(ctx context.Context) GetEndpointRedisSettingOutput {
	return o
}

func (o GetEndpointRedisSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointRedisSetting] {
	return pulumix.Output[GetEndpointRedisSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointRedisSettingOutput) AuthPassword() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) string { return v.AuthPassword })
}

func (o GetEndpointRedisSettingOutput) AuthType() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) string { return v.AuthType })
}

func (o GetEndpointRedisSettingOutput) AuthUserName() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) string { return v.AuthUserName })
}

func (o GetEndpointRedisSettingOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) int { return v.Port })
}

func (o GetEndpointRedisSettingOutput) ServerName() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) string { return v.ServerName })
}

func (o GetEndpointRedisSettingOutput) SslCaCertificateArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) string { return v.SslCaCertificateArn })
}

func (o GetEndpointRedisSettingOutput) SslSecurityProtocol() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedisSetting](o, func(v GetEndpointRedisSetting) string { return v.SslSecurityProtocol })
}

type GetEndpointRedshiftSetting struct {
	BucketFolder                 string `pulumi:"bucketFolder"`
	BucketName                   string `pulumi:"bucketName"`
	EncryptionMode               string `pulumi:"encryptionMode"`
	ServerSideEncryptionKmsKeyId string `pulumi:"serverSideEncryptionKmsKeyId"`
	ServiceAccessRoleArn         string `pulumi:"serviceAccessRoleArn"`
}

type GetEndpointRedshiftSettingArgs struct {
	BucketFolder                 pulumix.Input[string] `pulumi:"bucketFolder"`
	BucketName                   pulumix.Input[string] `pulumi:"bucketName"`
	EncryptionMode               pulumix.Input[string] `pulumi:"encryptionMode"`
	ServerSideEncryptionKmsKeyId pulumix.Input[string] `pulumi:"serverSideEncryptionKmsKeyId"`
	ServiceAccessRoleArn         pulumix.Input[string] `pulumi:"serviceAccessRoleArn"`
}

func (GetEndpointRedshiftSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointRedshiftSetting)(nil)).Elem()
}

func (i GetEndpointRedshiftSettingArgs) ToGetEndpointRedshiftSettingOutput() GetEndpointRedshiftSettingOutput {
	return i.ToGetEndpointRedshiftSettingOutputWithContext(context.Background())
}

func (i GetEndpointRedshiftSettingArgs) ToGetEndpointRedshiftSettingOutputWithContext(ctx context.Context) GetEndpointRedshiftSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointRedshiftSettingOutput)
}

func (i *GetEndpointRedshiftSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointRedshiftSettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointRedshiftSettingOutput struct{ *pulumi.OutputState }

func (GetEndpointRedshiftSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointRedshiftSetting)(nil)).Elem()
}

func (o GetEndpointRedshiftSettingOutput) ToGetEndpointRedshiftSettingOutput() GetEndpointRedshiftSettingOutput {
	return o
}

func (o GetEndpointRedshiftSettingOutput) ToGetEndpointRedshiftSettingOutputWithContext(ctx context.Context) GetEndpointRedshiftSettingOutput {
	return o
}

func (o GetEndpointRedshiftSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointRedshiftSetting] {
	return pulumix.Output[GetEndpointRedshiftSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointRedshiftSettingOutput) BucketFolder() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedshiftSetting](o, func(v GetEndpointRedshiftSetting) string { return v.BucketFolder })
}

func (o GetEndpointRedshiftSettingOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedshiftSetting](o, func(v GetEndpointRedshiftSetting) string { return v.BucketName })
}

func (o GetEndpointRedshiftSettingOutput) EncryptionMode() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedshiftSetting](o, func(v GetEndpointRedshiftSetting) string { return v.EncryptionMode })
}

func (o GetEndpointRedshiftSettingOutput) ServerSideEncryptionKmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedshiftSetting](o, func(v GetEndpointRedshiftSetting) string { return v.ServerSideEncryptionKmsKeyId })
}

func (o GetEndpointRedshiftSettingOutput) ServiceAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointRedshiftSetting](o, func(v GetEndpointRedshiftSetting) string { return v.ServiceAccessRoleArn })
}

type GetEndpointS3Setting struct {
	AddColumnName                        bool   `pulumi:"addColumnName"`
	BucketFolder                         string `pulumi:"bucketFolder"`
	BucketName                           string `pulumi:"bucketName"`
	CannedAclForObjects                  string `pulumi:"cannedAclForObjects"`
	CdcInsertsAndUpdates                 bool   `pulumi:"cdcInsertsAndUpdates"`
	CdcInsertsOnly                       bool   `pulumi:"cdcInsertsOnly"`
	CdcMaxBatchInterval                  int    `pulumi:"cdcMaxBatchInterval"`
	CdcMinFileSize                       int    `pulumi:"cdcMinFileSize"`
	CdcPath                              string `pulumi:"cdcPath"`
	CompressionType                      string `pulumi:"compressionType"`
	CsvDelimiter                         string `pulumi:"csvDelimiter"`
	CsvNoSupValue                        string `pulumi:"csvNoSupValue"`
	CsvNullValue                         string `pulumi:"csvNullValue"`
	CsvRowDelimiter                      string `pulumi:"csvRowDelimiter"`
	DataFormat                           string `pulumi:"dataFormat"`
	DataPageSize                         int    `pulumi:"dataPageSize"`
	DatePartitionDelimiter               string `pulumi:"datePartitionDelimiter"`
	DatePartitionEnabled                 bool   `pulumi:"datePartitionEnabled"`
	DatePartitionSequence                string `pulumi:"datePartitionSequence"`
	DictPageSizeLimit                    int    `pulumi:"dictPageSizeLimit"`
	EnableStatistics                     bool   `pulumi:"enableStatistics"`
	EncodingType                         string `pulumi:"encodingType"`
	EncryptionMode                       string `pulumi:"encryptionMode"`
	ExternalTableDefinition              string `pulumi:"externalTableDefinition"`
	IgnoreHeaderRows                     int    `pulumi:"ignoreHeaderRows"`
	IgnoreHeadersRow                     int    `pulumi:"ignoreHeadersRow"`
	IncludeOpForFullLoad                 bool   `pulumi:"includeOpForFullLoad"`
	MaxFileSize                          int    `pulumi:"maxFileSize"`
	ParquetTimestampInMillisecond        bool   `pulumi:"parquetTimestampInMillisecond"`
	ParquetVersion                       string `pulumi:"parquetVersion"`
	PreserveTransactions                 bool   `pulumi:"preserveTransactions"`
	Rfc4180                              bool   `pulumi:"rfc4180"`
	RowGroupLength                       int    `pulumi:"rowGroupLength"`
	ServerSideEncryptionKmsKeyId         string `pulumi:"serverSideEncryptionKmsKeyId"`
	ServiceAccessRoleArn                 string `pulumi:"serviceAccessRoleArn"`
	TimestampColumnName                  string `pulumi:"timestampColumnName"`
	UseCsvNoSupValue                     bool   `pulumi:"useCsvNoSupValue"`
	UseTaskStartTimeForFullLoadTimestamp bool   `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

type GetEndpointS3SettingArgs struct {
	AddColumnName                        pulumix.Input[bool]   `pulumi:"addColumnName"`
	BucketFolder                         pulumix.Input[string] `pulumi:"bucketFolder"`
	BucketName                           pulumix.Input[string] `pulumi:"bucketName"`
	CannedAclForObjects                  pulumix.Input[string] `pulumi:"cannedAclForObjects"`
	CdcInsertsAndUpdates                 pulumix.Input[bool]   `pulumi:"cdcInsertsAndUpdates"`
	CdcInsertsOnly                       pulumix.Input[bool]   `pulumi:"cdcInsertsOnly"`
	CdcMaxBatchInterval                  pulumix.Input[int]    `pulumi:"cdcMaxBatchInterval"`
	CdcMinFileSize                       pulumix.Input[int]    `pulumi:"cdcMinFileSize"`
	CdcPath                              pulumix.Input[string] `pulumi:"cdcPath"`
	CompressionType                      pulumix.Input[string] `pulumi:"compressionType"`
	CsvDelimiter                         pulumix.Input[string] `pulumi:"csvDelimiter"`
	CsvNoSupValue                        pulumix.Input[string] `pulumi:"csvNoSupValue"`
	CsvNullValue                         pulumix.Input[string] `pulumi:"csvNullValue"`
	CsvRowDelimiter                      pulumix.Input[string] `pulumi:"csvRowDelimiter"`
	DataFormat                           pulumix.Input[string] `pulumi:"dataFormat"`
	DataPageSize                         pulumix.Input[int]    `pulumi:"dataPageSize"`
	DatePartitionDelimiter               pulumix.Input[string] `pulumi:"datePartitionDelimiter"`
	DatePartitionEnabled                 pulumix.Input[bool]   `pulumi:"datePartitionEnabled"`
	DatePartitionSequence                pulumix.Input[string] `pulumi:"datePartitionSequence"`
	DictPageSizeLimit                    pulumix.Input[int]    `pulumi:"dictPageSizeLimit"`
	EnableStatistics                     pulumix.Input[bool]   `pulumi:"enableStatistics"`
	EncodingType                         pulumix.Input[string] `pulumi:"encodingType"`
	EncryptionMode                       pulumix.Input[string] `pulumi:"encryptionMode"`
	ExternalTableDefinition              pulumix.Input[string] `pulumi:"externalTableDefinition"`
	IgnoreHeaderRows                     pulumix.Input[int]    `pulumi:"ignoreHeaderRows"`
	IgnoreHeadersRow                     pulumix.Input[int]    `pulumi:"ignoreHeadersRow"`
	IncludeOpForFullLoad                 pulumix.Input[bool]   `pulumi:"includeOpForFullLoad"`
	MaxFileSize                          pulumix.Input[int]    `pulumi:"maxFileSize"`
	ParquetTimestampInMillisecond        pulumix.Input[bool]   `pulumi:"parquetTimestampInMillisecond"`
	ParquetVersion                       pulumix.Input[string] `pulumi:"parquetVersion"`
	PreserveTransactions                 pulumix.Input[bool]   `pulumi:"preserveTransactions"`
	Rfc4180                              pulumix.Input[bool]   `pulumi:"rfc4180"`
	RowGroupLength                       pulumix.Input[int]    `pulumi:"rowGroupLength"`
	ServerSideEncryptionKmsKeyId         pulumix.Input[string] `pulumi:"serverSideEncryptionKmsKeyId"`
	ServiceAccessRoleArn                 pulumix.Input[string] `pulumi:"serviceAccessRoleArn"`
	TimestampColumnName                  pulumix.Input[string] `pulumi:"timestampColumnName"`
	UseCsvNoSupValue                     pulumix.Input[bool]   `pulumi:"useCsvNoSupValue"`
	UseTaskStartTimeForFullLoadTimestamp pulumix.Input[bool]   `pulumi:"useTaskStartTimeForFullLoadTimestamp"`
}

func (GetEndpointS3SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointS3Setting)(nil)).Elem()
}

func (i GetEndpointS3SettingArgs) ToGetEndpointS3SettingOutput() GetEndpointS3SettingOutput {
	return i.ToGetEndpointS3SettingOutputWithContext(context.Background())
}

func (i GetEndpointS3SettingArgs) ToGetEndpointS3SettingOutputWithContext(ctx context.Context) GetEndpointS3SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointS3SettingOutput)
}

func (i *GetEndpointS3SettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEndpointS3SettingArgs] {
	return pulumix.Val(i)
}

type GetEndpointS3SettingOutput struct{ *pulumi.OutputState }

func (GetEndpointS3SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointS3Setting)(nil)).Elem()
}

func (o GetEndpointS3SettingOutput) ToGetEndpointS3SettingOutput() GetEndpointS3SettingOutput {
	return o
}

func (o GetEndpointS3SettingOutput) ToGetEndpointS3SettingOutputWithContext(ctx context.Context) GetEndpointS3SettingOutput {
	return o
}

func (o GetEndpointS3SettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetEndpointS3Setting] {
	return pulumix.Output[GetEndpointS3Setting]{
		OutputState: o.OutputState,
	}
}

func (o GetEndpointS3SettingOutput) AddColumnName() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.AddColumnName })
}

func (o GetEndpointS3SettingOutput) BucketFolder() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.BucketFolder })
}

func (o GetEndpointS3SettingOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.BucketName })
}

func (o GetEndpointS3SettingOutput) CannedAclForObjects() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CannedAclForObjects })
}

func (o GetEndpointS3SettingOutput) CdcInsertsAndUpdates() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.CdcInsertsAndUpdates })
}

func (o GetEndpointS3SettingOutput) CdcInsertsOnly() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.CdcInsertsOnly })
}

func (o GetEndpointS3SettingOutput) CdcMaxBatchInterval() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.CdcMaxBatchInterval })
}

func (o GetEndpointS3SettingOutput) CdcMinFileSize() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.CdcMinFileSize })
}

func (o GetEndpointS3SettingOutput) CdcPath() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CdcPath })
}

func (o GetEndpointS3SettingOutput) CompressionType() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CompressionType })
}

func (o GetEndpointS3SettingOutput) CsvDelimiter() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CsvDelimiter })
}

func (o GetEndpointS3SettingOutput) CsvNoSupValue() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CsvNoSupValue })
}

func (o GetEndpointS3SettingOutput) CsvNullValue() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CsvNullValue })
}

func (o GetEndpointS3SettingOutput) CsvRowDelimiter() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.CsvRowDelimiter })
}

func (o GetEndpointS3SettingOutput) DataFormat() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.DataFormat })
}

func (o GetEndpointS3SettingOutput) DataPageSize() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.DataPageSize })
}

func (o GetEndpointS3SettingOutput) DatePartitionDelimiter() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.DatePartitionDelimiter })
}

func (o GetEndpointS3SettingOutput) DatePartitionEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.DatePartitionEnabled })
}

func (o GetEndpointS3SettingOutput) DatePartitionSequence() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.DatePartitionSequence })
}

func (o GetEndpointS3SettingOutput) DictPageSizeLimit() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.DictPageSizeLimit })
}

func (o GetEndpointS3SettingOutput) EnableStatistics() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.EnableStatistics })
}

func (o GetEndpointS3SettingOutput) EncodingType() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.EncodingType })
}

func (o GetEndpointS3SettingOutput) EncryptionMode() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.EncryptionMode })
}

func (o GetEndpointS3SettingOutput) ExternalTableDefinition() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.ExternalTableDefinition })
}

func (o GetEndpointS3SettingOutput) IgnoreHeaderRows() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.IgnoreHeaderRows })
}

func (o GetEndpointS3SettingOutput) IgnoreHeadersRow() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.IgnoreHeadersRow })
}

func (o GetEndpointS3SettingOutput) IncludeOpForFullLoad() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.IncludeOpForFullLoad })
}

func (o GetEndpointS3SettingOutput) MaxFileSize() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.MaxFileSize })
}

func (o GetEndpointS3SettingOutput) ParquetTimestampInMillisecond() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.ParquetTimestampInMillisecond })
}

func (o GetEndpointS3SettingOutput) ParquetVersion() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.ParquetVersion })
}

func (o GetEndpointS3SettingOutput) PreserveTransactions() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.PreserveTransactions })
}

func (o GetEndpointS3SettingOutput) Rfc4180() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.Rfc4180 })
}

func (o GetEndpointS3SettingOutput) RowGroupLength() pulumix.Output[int] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) int { return v.RowGroupLength })
}

func (o GetEndpointS3SettingOutput) ServerSideEncryptionKmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.ServerSideEncryptionKmsKeyId })
}

func (o GetEndpointS3SettingOutput) ServiceAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.ServiceAccessRoleArn })
}

func (o GetEndpointS3SettingOutput) TimestampColumnName() pulumix.Output[string] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) string { return v.TimestampColumnName })
}

func (o GetEndpointS3SettingOutput) UseCsvNoSupValue() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.UseCsvNoSupValue })
}

func (o GetEndpointS3SettingOutput) UseTaskStartTimeForFullLoadTimestamp() pulumix.Output[bool] {
	return pulumix.Apply[GetEndpointS3Setting](o, func(v GetEndpointS3Setting) bool { return v.UseTaskStartTimeForFullLoadTimestamp })
}

func init() {
	pulumi.RegisterOutputType(EndpointElasticsearchSettingsOutput{})
	pulumi.RegisterOutputType(EndpointKafkaSettingsOutput{})
	pulumi.RegisterOutputType(EndpointKinesisSettingsOutput{})
	pulumi.RegisterOutputType(EndpointMongodbSettingsOutput{})
	pulumi.RegisterOutputType(EndpointRedisSettingsOutput{})
	pulumi.RegisterOutputType(EndpointRedshiftSettingsOutput{})
	pulumi.RegisterOutputType(EndpointS3SettingsOutput{})
	pulumi.RegisterOutputType(GetEndpointElasticsearchSettingOutput{})
	pulumi.RegisterOutputType(GetEndpointKafkaSettingOutput{})
	pulumi.RegisterOutputType(GetEndpointKinesisSettingOutput{})
	pulumi.RegisterOutputType(GetEndpointMongodbSettingOutput{})
	pulumi.RegisterOutputType(GetEndpointRedisSettingOutput{})
	pulumi.RegisterOutputType(GetEndpointRedshiftSettingOutput{})
	pulumi.RegisterOutputType(GetEndpointS3SettingOutput{})
}
