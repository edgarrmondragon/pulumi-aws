// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CapacityProviderAutoScalingGroupProvider struct {
	// ARN of the associated auto scaling group.
	AutoScalingGroupArn string `pulumi:"autoScalingGroupArn"`
	// Configuration block defining the parameters of the auto scaling. Detailed below.
	ManagedScaling *CapacityProviderAutoScalingGroupProviderManagedScaling `pulumi:"managedScaling"`
	// Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
	ManagedTerminationProtection *string `pulumi:"managedTerminationProtection"`
}

type CapacityProviderAutoScalingGroupProviderArgs struct {
	// ARN of the associated auto scaling group.
	AutoScalingGroupArn pulumix.Input[string] `pulumi:"autoScalingGroupArn"`
	// Configuration block defining the parameters of the auto scaling. Detailed below.
	ManagedScaling pulumix.Input[*CapacityProviderAutoScalingGroupProviderManagedScalingArgs] `pulumi:"managedScaling"`
	// Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
	ManagedTerminationProtection pulumix.Input[*string] `pulumi:"managedTerminationProtection"`
}

func (CapacityProviderAutoScalingGroupProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderOutput)
}

func (i *CapacityProviderAutoScalingGroupProviderArgs) ToOutput(ctx context.Context) pulumix.Output[*CapacityProviderAutoScalingGroupProviderArgs] {
	return pulumix.Val(i)
}

type CapacityProviderAutoScalingGroupProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToOutput(ctx context.Context) pulumix.Output[CapacityProviderAutoScalingGroupProvider] {
	return pulumix.Output[CapacityProviderAutoScalingGroupProvider]{
		OutputState: o.OutputState,
	}
}

// ARN of the associated auto scaling group.
func (o CapacityProviderAutoScalingGroupProviderOutput) AutoScalingGroupArn() pulumix.Output[string] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProvider](o, func(v CapacityProviderAutoScalingGroupProvider) string { return v.AutoScalingGroupArn })
}

// Configuration block defining the parameters of the auto scaling. Detailed below.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedScaling() pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProviderManagedScaling, CapacityProviderAutoScalingGroupProviderManagedScalingOutput] {
	value := pulumix.Apply[CapacityProviderAutoScalingGroupProvider](o, func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedScaling {
		return v.ManagedScaling
	})
	return pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProviderManagedScaling, CapacityProviderAutoScalingGroupProviderManagedScalingOutput]{OutputState: value.OutputState}
}

// Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedTerminationProtection() pulumix.Output[*string] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProvider](o, func(v CapacityProviderAutoScalingGroupProvider) *string { return v.ManagedTerminationProtection })
}

type CapacityProviderAutoScalingGroupProviderManagedScaling struct {
	// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
	InstanceWarmupPeriod *int `pulumi:"instanceWarmupPeriod"`
	// Maximum step adjustment size. A number between 1 and 10,000.
	MaximumScalingStepSize *int `pulumi:"maximumScalingStepSize"`
	// Minimum step adjustment size. A number between 1 and 10,000.
	MinimumScalingStepSize *int `pulumi:"minimumScalingStepSize"`
	// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
	Status *string `pulumi:"status"`
	// Target utilization for the capacity provider. A number between 1 and 100.
	TargetCapacity *int `pulumi:"targetCapacity"`
}

type CapacityProviderAutoScalingGroupProviderManagedScalingArgs struct {
	// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
	InstanceWarmupPeriod pulumix.Input[*int] `pulumi:"instanceWarmupPeriod"`
	// Maximum step adjustment size. A number between 1 and 10,000.
	MaximumScalingStepSize pulumix.Input[*int] `pulumi:"maximumScalingStepSize"`
	// Minimum step adjustment size. A number between 1 and 10,000.
	MinimumScalingStepSize pulumix.Input[*int] `pulumi:"minimumScalingStepSize"`
	// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Target utilization for the capacity provider. A number between 1 and 100.
	TargetCapacity pulumix.Input[*int] `pulumi:"targetCapacity"`
}

func (CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderManagedScaling)(nil)).Elem()
}

func (i CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutput() CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderManagedScalingOutput)
}

func (i *CapacityProviderAutoScalingGroupProviderManagedScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*CapacityProviderAutoScalingGroupProviderManagedScalingArgs] {
	return pulumix.Val(i)
}

type CapacityProviderAutoScalingGroupProviderManagedScalingOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutput() CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToCapacityProviderAutoScalingGroupProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) ToOutput(ctx context.Context) pulumix.Output[CapacityProviderAutoScalingGroupProviderManagedScaling] {
	return pulumix.Output[CapacityProviderAutoScalingGroupProviderManagedScaling]{
		OutputState: o.OutputState,
	}
}

// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) InstanceWarmupPeriod() pulumix.Output[*int] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProviderManagedScaling](o, func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.InstanceWarmupPeriod })
}

// Maximum step adjustment size. A number between 1 and 10,000.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) MaximumScalingStepSize() pulumix.Output[*int] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProviderManagedScaling](o, func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.MaximumScalingStepSize })
}

// Minimum step adjustment size. A number between 1 and 10,000.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) MinimumScalingStepSize() pulumix.Output[*int] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProviderManagedScaling](o, func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.MinimumScalingStepSize })
}

// Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProviderManagedScaling](o, func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *string { return v.Status })
}

// Target utilization for the capacity provider. A number between 1 and 100.
func (o CapacityProviderAutoScalingGroupProviderManagedScalingOutput) TargetCapacity() pulumix.Output[*int] {
	return pulumix.Apply[CapacityProviderAutoScalingGroupProviderManagedScaling](o, func(v CapacityProviderAutoScalingGroupProviderManagedScaling) *int { return v.TargetCapacity })
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategy struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base *int `pulumi:"base"`
	// Name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
	Weight *int `pulumi:"weight"`
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base pulumix.Input[*int] `pulumi:"base"`
	// Name of the capacity provider.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProvidersDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return i.ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput)
}

func (i *ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProvidersDefaultCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutput() ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ToClusterCapacityProvidersDefaultCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCapacityProvidersDefaultCapacityProviderStrategy] {
	return pulumix.Output[ClusterCapacityProvidersDefaultCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCapacityProvidersDefaultCapacityProviderStrategy](o, func(v ClusterCapacityProvidersDefaultCapacityProviderStrategy) *int { return v.Base })
}

// Name of the capacity provider.
func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[ClusterCapacityProvidersDefaultCapacityProviderStrategy](o, func(v ClusterCapacityProvidersDefaultCapacityProviderStrategy) string { return v.CapacityProvider })
}

// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
func (o ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCapacityProvidersDefaultCapacityProviderStrategy](o, func(v ClusterCapacityProvidersDefaultCapacityProviderStrategy) *int { return v.Weight })
}

type ClusterConfiguration struct {
	// The details of the execute command configuration. Detailed below.
	ExecuteCommandConfiguration *ClusterConfigurationExecuteCommandConfiguration `pulumi:"executeCommandConfiguration"`
}

type ClusterConfigurationArgs struct {
	// The details of the execute command configuration. Detailed below.
	ExecuteCommandConfiguration pulumix.Input[*ClusterConfigurationExecuteCommandConfigurationArgs] `pulumi:"executeCommandConfiguration"`
}

func (ClusterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return i.ToClusterConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput)
}

func (i *ClusterConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfiguration] {
	return pulumix.Output[ClusterConfiguration]{
		OutputState: o.OutputState,
	}
}

// The details of the execute command configuration. Detailed below.
func (o ClusterConfigurationOutput) ExecuteCommandConfiguration() pulumix.GPtrOutput[ClusterConfigurationExecuteCommandConfiguration, ClusterConfigurationExecuteCommandConfigurationOutput] {
	value := pulumix.Apply[ClusterConfiguration](o, func(v ClusterConfiguration) *ClusterConfigurationExecuteCommandConfiguration {
		return v.ExecuteCommandConfiguration
	})
	return pulumix.GPtrOutput[ClusterConfigurationExecuteCommandConfiguration, ClusterConfigurationExecuteCommandConfigurationOutput]{OutputState: value.OutputState}
}

type ClusterConfigurationExecuteCommandConfiguration struct {
	// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
	LogConfiguration *ClusterConfigurationExecuteCommandConfigurationLogConfiguration `pulumi:"logConfiguration"`
	// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
	Logging *string `pulumi:"logging"`
}

type ClusterConfigurationExecuteCommandConfigurationArgs struct {
	// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
	LogConfiguration pulumix.Input[*ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs] `pulumi:"logConfiguration"`
	// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
	Logging pulumix.Input[*string] `pulumi:"logging"`
}

func (ClusterConfigurationExecuteCommandConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationExecuteCommandConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationExecuteCommandConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationOutput)
}

func (i *ClusterConfigurationExecuteCommandConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfigurationExecuteCommandConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterConfigurationExecuteCommandConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationExecuteCommandConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfigurationExecuteCommandConfiguration] {
	return pulumix.Output[ClusterConfigurationExecuteCommandConfiguration]{
		OutputState: o.OutputState,
	}
}

// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
func (o ClusterConfigurationExecuteCommandConfigurationOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfiguration](o, func(v ClusterConfigurationExecuteCommandConfiguration) *string { return v.KmsKeyId })
}

// The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
func (o ClusterConfigurationExecuteCommandConfigurationOutput) LogConfiguration() pulumix.GPtrOutput[ClusterConfigurationExecuteCommandConfigurationLogConfiguration, ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput] {
	value := pulumix.Apply[ClusterConfigurationExecuteCommandConfiguration](o, func(v ClusterConfigurationExecuteCommandConfiguration) *ClusterConfigurationExecuteCommandConfigurationLogConfiguration {
		return v.LogConfiguration
	})
	return pulumix.GPtrOutput[ClusterConfigurationExecuteCommandConfigurationLogConfiguration, ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput]{OutputState: value.OutputState}
}

// The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.
func (o ClusterConfigurationExecuteCommandConfigurationOutput) Logging() pulumix.Output[*string] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfiguration](o, func(v ClusterConfigurationExecuteCommandConfiguration) *string { return v.Logging })
}

type ClusterConfigurationExecuteCommandConfigurationLogConfiguration struct {
	// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
	CloudWatchEncryptionEnabled *bool `pulumi:"cloudWatchEncryptionEnabled"`
	// The name of the CloudWatch log group to send logs to.
	CloudWatchLogGroupName *string `pulumi:"cloudWatchLogGroupName"`
	// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
	S3BucketEncryptionEnabled *bool `pulumi:"s3BucketEncryptionEnabled"`
	// The name of the S3 bucket to send logs to.
	S3BucketName *string `pulumi:"s3BucketName"`
	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

type ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs struct {
	// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
	CloudWatchEncryptionEnabled pulumix.Input[*bool] `pulumi:"cloudWatchEncryptionEnabled"`
	// The name of the CloudWatch log group to send logs to.
	CloudWatchLogGroupName pulumix.Input[*string] `pulumi:"cloudWatchLogGroupName"`
	// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
	S3BucketEncryptionEnabled pulumix.Input[*bool] `pulumi:"s3BucketEncryptionEnabled"`
	// The name of the S3 bucket to send logs to.
	S3BucketName pulumix.Input[*string] `pulumi:"s3BucketName"`
	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix pulumix.Input[*string] `pulumi:"s3KeyPrefix"`
}

func (ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationLogConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return i.ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput)
}

func (i *ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfigurationExecuteCommandConfigurationLogConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationExecuteCommandConfigurationLogConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput() ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput {
	return o
}

func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfigurationExecuteCommandConfigurationLogConfiguration] {
	return pulumix.Output[ClusterConfigurationExecuteCommandConfigurationLogConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) CloudWatchEncryptionEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfigurationLogConfiguration](o, func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *bool {
		return v.CloudWatchEncryptionEnabled
	})
}

// The name of the CloudWatch log group to send logs to.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) CloudWatchLogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfigurationLogConfiguration](o, func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string {
		return v.CloudWatchLogGroupName
	})
}

// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) S3BucketEncryptionEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfigurationLogConfiguration](o, func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *bool {
		return v.S3BucketEncryptionEnabled
	})
}

// The name of the S3 bucket to send logs to.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) S3BucketName() pulumix.Output[*string] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfigurationLogConfiguration](o, func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string { return v.S3BucketName })
}

// An optional folder in the S3 bucket to place logs in.
func (o ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput) S3KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ClusterConfigurationExecuteCommandConfigurationLogConfiguration](o, func(v ClusterConfigurationExecuteCommandConfigurationLogConfiguration) *string { return v.S3KeyPrefix })
}

type ClusterServiceConnectDefaults struct {
	// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
	Namespace string `pulumi:"namespace"`
}

type ClusterServiceConnectDefaultsArgs struct {
	// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
	Namespace pulumix.Input[string] `pulumi:"namespace"`
}

func (ClusterServiceConnectDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return i.ToClusterServiceConnectDefaultsOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput)
}

func (i *ClusterServiceConnectDefaultsArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterServiceConnectDefaultsArgs] {
	return pulumix.Val(i)
}

type ClusterServiceConnectDefaultsOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterServiceConnectDefaults] {
	return pulumix.Output[ClusterServiceConnectDefaults]{
		OutputState: o.OutputState,
	}
}

// The ARN of the `servicediscovery.HttpNamespace` that's used when you create a service and don't specify a Service Connect configuration.
func (o ClusterServiceConnectDefaultsOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[ClusterServiceConnectDefaults](o, func(v ClusterServiceConnectDefaults) string { return v.Namespace })
}

type ClusterSetting struct {
	// Name of the setting to manage. Valid values: `containerInsights`.
	Name string `pulumi:"name"`
	// The value to assign to the setting. Valid values are `enabled` and `disabled`.
	Value string `pulumi:"value"`
}

type ClusterSettingArgs struct {
	// Name of the setting to manage. Valid values: `containerInsights`.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value to assign to the setting. Valid values are `enabled` and `disabled`.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ClusterSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSetting)(nil)).Elem()
}

func (i ClusterSettingArgs) ToClusterSettingOutput() ClusterSettingOutput {
	return i.ToClusterSettingOutputWithContext(context.Background())
}

func (i ClusterSettingArgs) ToClusterSettingOutputWithContext(ctx context.Context) ClusterSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingOutput)
}

func (i *ClusterSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterSettingArgs] {
	return pulumix.Val(i)
}

type ClusterSettingOutput struct{ *pulumi.OutputState }

func (ClusterSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSetting)(nil)).Elem()
}

func (o ClusterSettingOutput) ToClusterSettingOutput() ClusterSettingOutput {
	return o
}

func (o ClusterSettingOutput) ToClusterSettingOutputWithContext(ctx context.Context) ClusterSettingOutput {
	return o
}

func (o ClusterSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterSetting] {
	return pulumix.Output[ClusterSetting]{
		OutputState: o.OutputState,
	}
}

// Name of the setting to manage. Valid values: `containerInsights`.
func (o ClusterSettingOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ClusterSetting](o, func(v ClusterSetting) string { return v.Name })
}

// The value to assign to the setting. Valid values are `enabled` and `disabled`.
func (o ClusterSettingOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ClusterSetting](o, func(v ClusterSetting) string { return v.Value })
}

type ServiceAlarms struct {
	// One or more CloudWatch alarm names.
	AlarmNames []string `pulumi:"alarmNames"`
	// Determines whether to use the CloudWatch alarm option in the service deployment process.
	Enable bool `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback bool `pulumi:"rollback"`
}

type ServiceAlarmsArgs struct {
	// One or more CloudWatch alarm names.
	AlarmNames pulumix.Input[[]string] `pulumi:"alarmNames"`
	// Determines whether to use the CloudWatch alarm option in the service deployment process.
	Enable pulumix.Input[bool] `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback pulumix.Input[bool] `pulumi:"rollback"`
}

func (ServiceAlarmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlarms)(nil)).Elem()
}

func (i ServiceAlarmsArgs) ToServiceAlarmsOutput() ServiceAlarmsOutput {
	return i.ToServiceAlarmsOutputWithContext(context.Background())
}

func (i ServiceAlarmsArgs) ToServiceAlarmsOutputWithContext(ctx context.Context) ServiceAlarmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAlarmsOutput)
}

func (i *ServiceAlarmsArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceAlarmsArgs] {
	return pulumix.Val(i)
}

type ServiceAlarmsOutput struct{ *pulumi.OutputState }

func (ServiceAlarmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAlarms)(nil)).Elem()
}

func (o ServiceAlarmsOutput) ToServiceAlarmsOutput() ServiceAlarmsOutput {
	return o
}

func (o ServiceAlarmsOutput) ToServiceAlarmsOutputWithContext(ctx context.Context) ServiceAlarmsOutput {
	return o
}

func (o ServiceAlarmsOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAlarms] {
	return pulumix.Output[ServiceAlarms]{
		OutputState: o.OutputState,
	}
}

// One or more CloudWatch alarm names.
func (o ServiceAlarmsOutput) AlarmNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServiceAlarms](o, func(v ServiceAlarms) []string { return v.AlarmNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Determines whether to use the CloudWatch alarm option in the service deployment process.
func (o ServiceAlarmsOutput) Enable() pulumix.Output[bool] {
	return pulumix.Apply[ServiceAlarms](o, func(v ServiceAlarms) bool { return v.Enable })
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceAlarmsOutput) Rollback() pulumix.Output[bool] {
	return pulumix.Apply[ServiceAlarms](o, func(v ServiceAlarms) bool { return v.Rollback })
}

type ServiceCapacityProviderStrategy struct {
	// Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base *int `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// Relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight *int `pulumi:"weight"`
}

type ServiceCapacityProviderStrategyArgs struct {
	// Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base pulumix.Input[*int] `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// Relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (ServiceCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategy)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyArgs) ToServiceCapacityProviderStrategyOutput() ServiceCapacityProviderStrategyOutput {
	return i.ToServiceCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyArgs) ToServiceCapacityProviderStrategyOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyOutput)
}

func (i *ServiceCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type ServiceCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategy)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyOutput) ToServiceCapacityProviderStrategyOutput() ServiceCapacityProviderStrategyOutput {
	return o
}

func (o ServiceCapacityProviderStrategyOutput) ToServiceCapacityProviderStrategyOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyOutput {
	return o
}

func (o ServiceCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceCapacityProviderStrategy] {
	return pulumix.Output[ServiceCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
func (o ServiceCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[ServiceCapacityProviderStrategy](o, func(v ServiceCapacityProviderStrategy) *int { return v.Base })
}

// Short name of the capacity provider.
func (o ServiceCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[ServiceCapacityProviderStrategy](o, func(v ServiceCapacityProviderStrategy) string { return v.CapacityProvider })
}

// Relative percentage of the total number of launched tasks that should use the specified capacity provider.
func (o ServiceCapacityProviderStrategyOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ServiceCapacityProviderStrategy](o, func(v ServiceCapacityProviderStrategy) *int { return v.Weight })
}

type ServiceDeploymentCircuitBreaker struct {
	// Whether to enable the deployment circuit breaker logic for the service.
	Enable bool `pulumi:"enable"`
	// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback bool `pulumi:"rollback"`
}

type ServiceDeploymentCircuitBreakerArgs struct {
	// Whether to enable the deployment circuit breaker logic for the service.
	Enable pulumix.Input[bool] `pulumi:"enable"`
	// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback pulumix.Input[bool] `pulumi:"rollback"`
}

func (ServiceDeploymentCircuitBreakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return i.ToServiceDeploymentCircuitBreakerOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput)
}

func (i *ServiceDeploymentCircuitBreakerArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceDeploymentCircuitBreakerArgs] {
	return pulumix.Val(i)
}

type ServiceDeploymentCircuitBreakerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceDeploymentCircuitBreaker] {
	return pulumix.Output[ServiceDeploymentCircuitBreaker]{
		OutputState: o.OutputState,
	}
}

// Whether to enable the deployment circuit breaker logic for the service.
func (o ServiceDeploymentCircuitBreakerOutput) Enable() pulumix.Output[bool] {
	return pulumix.Apply[ServiceDeploymentCircuitBreaker](o, func(v ServiceDeploymentCircuitBreaker) bool { return v.Enable })
}

// Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentCircuitBreakerOutput) Rollback() pulumix.Output[bool] {
	return pulumix.Apply[ServiceDeploymentCircuitBreaker](o, func(v ServiceDeploymentCircuitBreaker) bool { return v.Rollback })
}

type ServiceDeploymentController struct {
	// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
	Type *string `pulumi:"type"`
}

type ServiceDeploymentControllerArgs struct {
	// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (ServiceDeploymentControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return i.ToServiceDeploymentControllerOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput)
}

func (i *ServiceDeploymentControllerArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceDeploymentControllerArgs] {
	return pulumix.Val(i)
}

type ServiceDeploymentControllerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceDeploymentController] {
	return pulumix.Output[ServiceDeploymentController]{
		OutputState: o.OutputState,
	}
}

// Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
func (o ServiceDeploymentControllerOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[ServiceDeploymentController](o, func(v ServiceDeploymentController) *string { return v.Type })
}

type ServiceLoadBalancer struct {
	// Name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName string `pulumi:"containerName"`
	// Port on the container to associate with the load balancer.
	//
	// > **Version note:** Multiple `loadBalancer` configuration block support was added in version 2.22.0 of the provider. This allows configuration of [ECS service support for multiple target groups](https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecs-services-now-support-multiple-load-balancer-target-groups/).
	ContainerPort int `pulumi:"containerPort"`
	// Name of the ELB (Classic) to associate with the service.
	ElbName *string `pulumi:"elbName"`
	// ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

type ServiceLoadBalancerArgs struct {
	// Name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName pulumix.Input[string] `pulumi:"containerName"`
	// Port on the container to associate with the load balancer.
	//
	// > **Version note:** Multiple `loadBalancer` configuration block support was added in version 2.22.0 of the provider. This allows configuration of [ECS service support for multiple target groups](https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecs-services-now-support-multiple-load-balancer-target-groups/).
	ContainerPort pulumix.Input[int] `pulumi:"containerPort"`
	// Name of the ELB (Classic) to associate with the service.
	ElbName pulumix.Input[*string] `pulumi:"elbName"`
	// ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn pulumix.Input[*string] `pulumi:"targetGroupArn"`
}

func (ServiceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return i.ToServiceLoadBalancerOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerOutput)
}

func (i *ServiceLoadBalancerArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceLoadBalancerArgs] {
	return pulumix.Val(i)
}

type ServiceLoadBalancerOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return o
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return o
}

func (o ServiceLoadBalancerOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceLoadBalancer] {
	return pulumix.Output[ServiceLoadBalancer]{
		OutputState: o.OutputState,
	}
}

// Name of the container to associate with the load balancer (as it appears in a container definition).
func (o ServiceLoadBalancerOutput) ContainerName() pulumix.Output[string] {
	return pulumix.Apply[ServiceLoadBalancer](o, func(v ServiceLoadBalancer) string { return v.ContainerName })
}

// Port on the container to associate with the load balancer.
//
// > **Version note:** Multiple `loadBalancer` configuration block support was added in version 2.22.0 of the provider. This allows configuration of [ECS service support for multiple target groups](https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ecs-services-now-support-multiple-load-balancer-target-groups/).
func (o ServiceLoadBalancerOutput) ContainerPort() pulumix.Output[int] {
	return pulumix.Apply[ServiceLoadBalancer](o, func(v ServiceLoadBalancer) int { return v.ContainerPort })
}

// Name of the ELB (Classic) to associate with the service.
func (o ServiceLoadBalancerOutput) ElbName() pulumix.Output[*string] {
	return pulumix.Apply[ServiceLoadBalancer](o, func(v ServiceLoadBalancer) *string { return v.ElbName })
}

// ARN of the Load Balancer target group to associate with the service.
func (o ServiceLoadBalancerOutput) TargetGroupArn() pulumix.Output[*string] {
	return pulumix.Apply[ServiceLoadBalancer](o, func(v ServiceLoadBalancer) *string { return v.TargetGroupArn })
}

type ServiceNetworkConfiguration struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	//
	// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

type ServiceNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	//
	// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	AssignPublicIp pulumix.Input[*bool] `pulumi:"assignPublicIp"`
	// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// Subnets associated with the task or service.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (ServiceNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return i.ToServiceNetworkConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput)
}

func (i *ServiceNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkConfiguration] {
	return pulumix.Output[ServiceNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
//
// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
func (o ServiceNetworkConfigurationOutput) AssignPublicIp() pulumix.Output[*bool] {
	return pulumix.Apply[ServiceNetworkConfiguration](o, func(v ServiceNetworkConfiguration) *bool { return v.AssignPublicIp })
}

// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o ServiceNetworkConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServiceNetworkConfiguration](o, func(v ServiceNetworkConfiguration) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Subnets associated with the task or service.
func (o ServiceNetworkConfigurationOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServiceNetworkConfiguration](o, func(v ServiceNetworkConfiguration) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ServiceOrderedPlacementStrategy struct {
	// For the `spread` placement strategy, valid values are `instanceId` (or `host`,
	// which has the same effect), or any platform or custom attribute that is applied to a container instance.
	// For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
	// needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
	//
	// > **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
	Field *string `pulumi:"field"`
	// Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
	Type string `pulumi:"type"`
}

type ServiceOrderedPlacementStrategyArgs struct {
	// For the `spread` placement strategy, valid values are `instanceId` (or `host`,
	// which has the same effect), or any platform or custom attribute that is applied to a container instance.
	// For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
	// needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
	//
	// > **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
	Field pulumix.Input[*string] `pulumi:"field"`
	// Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ServiceOrderedPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceOrderedPlacementStrategy)(nil)).Elem()
}

func (i ServiceOrderedPlacementStrategyArgs) ToServiceOrderedPlacementStrategyOutput() ServiceOrderedPlacementStrategyOutput {
	return i.ToServiceOrderedPlacementStrategyOutputWithContext(context.Background())
}

func (i ServiceOrderedPlacementStrategyArgs) ToServiceOrderedPlacementStrategyOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOrderedPlacementStrategyOutput)
}

func (i *ServiceOrderedPlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceOrderedPlacementStrategyArgs] {
	return pulumix.Val(i)
}

type ServiceOrderedPlacementStrategyOutput struct{ *pulumi.OutputState }

func (ServiceOrderedPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceOrderedPlacementStrategy)(nil)).Elem()
}

func (o ServiceOrderedPlacementStrategyOutput) ToServiceOrderedPlacementStrategyOutput() ServiceOrderedPlacementStrategyOutput {
	return o
}

func (o ServiceOrderedPlacementStrategyOutput) ToServiceOrderedPlacementStrategyOutputWithContext(ctx context.Context) ServiceOrderedPlacementStrategyOutput {
	return o
}

func (o ServiceOrderedPlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceOrderedPlacementStrategy] {
	return pulumix.Output[ServiceOrderedPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// For the `spread` placement strategy, valid values are `instanceId` (or `host`,
// which has the same effect), or any platform or custom attribute that is applied to a container instance.
// For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
// needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
//
// > **Note:** for `spread`, `host` and `instanceId` will be normalized, by AWS, to be `instanceId`. This means the statefile will show `instanceId` but your config will differ if you use `host`.
func (o ServiceOrderedPlacementStrategyOutput) Field() pulumix.Output[*string] {
	return pulumix.Apply[ServiceOrderedPlacementStrategy](o, func(v ServiceOrderedPlacementStrategy) *string { return v.Field })
}

// Type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
func (o ServiceOrderedPlacementStrategyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ServiceOrderedPlacementStrategy](o, func(v ServiceOrderedPlacementStrategy) string { return v.Type })
}

type ServicePlacementConstraint struct {
	// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression *string `pulumi:"expression"`
	// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
	Type string `pulumi:"type"`
}

type ServicePlacementConstraintArgs struct {
	// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ServicePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return i.ToServicePlacementConstraintOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintOutput)
}

func (i *ServicePlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*ServicePlacementConstraintArgs] {
	return pulumix.Val(i)
}

type ServicePlacementConstraintOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return o
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return o
}

func (o ServicePlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[ServicePlacementConstraint] {
	return pulumix.Output[ServicePlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
func (o ServicePlacementConstraintOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[ServicePlacementConstraint](o, func(v ServicePlacementConstraint) *string { return v.Expression })
}

// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
func (o ServicePlacementConstraintOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ServicePlacementConstraint](o, func(v ServicePlacementConstraint) string { return v.Type })
}

type ServiceServiceConnectConfiguration struct {
	// Specifies whether to use Service Connect with this service.
	Enabled bool `pulumi:"enabled"`
	// The log configuration for the container. See below.
	LogConfiguration *ServiceServiceConnectConfigurationLogConfiguration `pulumi:"logConfiguration"`
	// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
	Namespace *string `pulumi:"namespace"`
	// The list of Service Connect service objects. See below.
	Services []ServiceServiceConnectConfigurationService `pulumi:"services"`
}

type ServiceServiceConnectConfigurationArgs struct {
	// Specifies whether to use Service Connect with this service.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// The log configuration for the container. See below.
	LogConfiguration pulumix.Input[*ServiceServiceConnectConfigurationLogConfigurationArgs] `pulumi:"logConfiguration"`
	// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
	// The list of Service Connect service objects. See below.
	Services pulumix.Input[[]*ServiceServiceConnectConfigurationServiceArgs] `pulumi:"services"`
}

func (ServiceServiceConnectConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfiguration)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationArgs) ToServiceServiceConnectConfigurationOutput() ServiceServiceConnectConfigurationOutput {
	return i.ToServiceServiceConnectConfigurationOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationArgs) ToServiceServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationOutput)
}

func (i *ServiceServiceConnectConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceServiceConnectConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceServiceConnectConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationOutput) ToServiceServiceConnectConfigurationOutput() ServiceServiceConnectConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationOutput) ToServiceServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceServiceConnectConfiguration] {
	return pulumix.Output[ServiceServiceConnectConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to use Service Connect with this service.
func (o ServiceServiceConnectConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[ServiceServiceConnectConfiguration](o, func(v ServiceServiceConnectConfiguration) bool { return v.Enabled })
}

// The log configuration for the container. See below.
func (o ServiceServiceConnectConfigurationOutput) LogConfiguration() pulumix.GPtrOutput[ServiceServiceConnectConfigurationLogConfiguration, ServiceServiceConnectConfigurationLogConfigurationOutput] {
	value := pulumix.Apply[ServiceServiceConnectConfiguration](o, func(v ServiceServiceConnectConfiguration) *ServiceServiceConnectConfigurationLogConfiguration {
		return v.LogConfiguration
	})
	return pulumix.GPtrOutput[ServiceServiceConnectConfigurationLogConfiguration, ServiceServiceConnectConfigurationLogConfigurationOutput]{OutputState: value.OutputState}
}

// The namespace name or ARN of the `servicediscovery.HttpNamespace` for use with Service Connect.
func (o ServiceServiceConnectConfigurationOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[ServiceServiceConnectConfiguration](o, func(v ServiceServiceConnectConfiguration) *string { return v.Namespace })
}

// The list of Service Connect service objects. See below.
func (o ServiceServiceConnectConfigurationOutput) Services() pulumix.GArrayOutput[ServiceServiceConnectConfigurationService, ServiceServiceConnectConfigurationServiceOutput] {
	value := pulumix.Apply[ServiceServiceConnectConfiguration](o, func(v ServiceServiceConnectConfiguration) []ServiceServiceConnectConfigurationService {
		return v.Services
	})
	return pulumix.GArrayOutput[ServiceServiceConnectConfigurationService, ServiceServiceConnectConfigurationServiceOutput]{OutputState: value.OutputState}
}

type ServiceServiceConnectConfigurationLogConfiguration struct {
	// The log driver to use for the container.
	LogDriver string `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	Options map[string]string `pulumi:"options"`
	// The secrets to pass to the log configuration. See below.
	SecretOptions []ServiceServiceConnectConfigurationLogConfigurationSecretOption `pulumi:"secretOptions"`
}

type ServiceServiceConnectConfigurationLogConfigurationArgs struct {
	// The log driver to use for the container.
	LogDriver pulumix.Input[string] `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	Options pulumix.Input[map[string]string] `pulumi:"options"`
	// The secrets to pass to the log configuration. See below.
	SecretOptions pulumix.Input[[]*ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs] `pulumi:"secretOptions"`
}

func (ServiceServiceConnectConfigurationLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfiguration)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationLogConfigurationArgs) ToServiceServiceConnectConfigurationLogConfigurationOutput() ServiceServiceConnectConfigurationLogConfigurationOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationLogConfigurationArgs) ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationOutput)
}

func (i *ServiceServiceConnectConfigurationLogConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceServiceConnectConfigurationLogConfigurationArgs] {
	return pulumix.Val(i)
}

type ServiceServiceConnectConfigurationLogConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfiguration)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToServiceServiceConnectConfigurationLogConfigurationOutput() ServiceServiceConnectConfigurationLogConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToServiceServiceConnectConfigurationLogConfigurationOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceServiceConnectConfigurationLogConfiguration] {
	return pulumix.Output[ServiceServiceConnectConfigurationLogConfiguration]{
		OutputState: o.OutputState,
	}
}

// The log driver to use for the container.
func (o ServiceServiceConnectConfigurationLogConfigurationOutput) LogDriver() pulumix.Output[string] {
	return pulumix.Apply[ServiceServiceConnectConfigurationLogConfiguration](o, func(v ServiceServiceConnectConfigurationLogConfiguration) string { return v.LogDriver })
}

// The configuration options to send to the log driver.
func (o ServiceServiceConnectConfigurationLogConfigurationOutput) Options() pulumix.MapOutput[string] {
	value := pulumix.Apply[ServiceServiceConnectConfigurationLogConfiguration](o, func(v ServiceServiceConnectConfigurationLogConfiguration) map[string]string { return v.Options })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The secrets to pass to the log configuration. See below.
func (o ServiceServiceConnectConfigurationLogConfigurationOutput) SecretOptions() pulumix.GArrayOutput[ServiceServiceConnectConfigurationLogConfigurationSecretOption, ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput] {
	value := pulumix.Apply[ServiceServiceConnectConfigurationLogConfiguration](o, func(v ServiceServiceConnectConfigurationLogConfiguration) []ServiceServiceConnectConfigurationLogConfigurationSecretOption {
		return v.SecretOptions
	})
	return pulumix.GArrayOutput[ServiceServiceConnectConfigurationLogConfigurationSecretOption, ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput]{OutputState: value.OutputState}
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOption struct {
	// The name of the secret.
	Name string `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
	ValueFrom string `pulumi:"valueFrom"`
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs struct {
	// The name of the secret.
	Name pulumix.Input[string] `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
	ValueFrom pulumix.Input[string] `pulumi:"valueFrom"`
}

func (ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationSecretOption)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return i.ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput)
}

func (i *ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceServiceConnectConfigurationLogConfigurationSecretOptionArgs] {
	return pulumix.Val(i)
}

type ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationLogConfigurationSecretOption)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput() ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ToServiceServiceConnectConfigurationLogConfigurationSecretOptionOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput {
	return o
}

func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceServiceConnectConfigurationLogConfigurationSecretOption] {
	return pulumix.Output[ServiceServiceConnectConfigurationLogConfigurationSecretOption]{
		OutputState: o.OutputState,
	}
}

// The name of the secret.
func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ServiceServiceConnectConfigurationLogConfigurationSecretOption](o, func(v ServiceServiceConnectConfigurationLogConfigurationSecretOption) string { return v.Name })
}

// The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
func (o ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput) ValueFrom() pulumix.Output[string] {
	return pulumix.Apply[ServiceServiceConnectConfigurationLogConfigurationSecretOption](o, func(v ServiceServiceConnectConfigurationLogConfigurationSecretOption) string { return v.ValueFrom })
}

type ServiceServiceConnectConfigurationService struct {
	// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
	ClientAlias []ServiceServiceConnectConfigurationServiceClientAlias `pulumi:"clientAlias"`
	// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
	DiscoveryName *string `pulumi:"discoveryName"`
	// The port number for the Service Connect proxy to listen on.
	IngressPortOverride *int `pulumi:"ingressPortOverride"`
	// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
	PortName string `pulumi:"portName"`
}

type ServiceServiceConnectConfigurationServiceArgs struct {
	// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
	ClientAlias pulumix.Input[[]*ServiceServiceConnectConfigurationServiceClientAliasArgs] `pulumi:"clientAlias"`
	// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
	DiscoveryName pulumix.Input[*string] `pulumi:"discoveryName"`
	// The port number for the Service Connect proxy to listen on.
	IngressPortOverride pulumix.Input[*int] `pulumi:"ingressPortOverride"`
	// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
	PortName pulumix.Input[string] `pulumi:"portName"`
}

func (ServiceServiceConnectConfigurationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationService)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationServiceArgs) ToServiceServiceConnectConfigurationServiceOutput() ServiceServiceConnectConfigurationServiceOutput {
	return i.ToServiceServiceConnectConfigurationServiceOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationServiceArgs) ToServiceServiceConnectConfigurationServiceOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServiceOutput)
}

func (i *ServiceServiceConnectConfigurationServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceServiceConnectConfigurationServiceArgs] {
	return pulumix.Val(i)
}

type ServiceServiceConnectConfigurationServiceOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationService)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToServiceServiceConnectConfigurationServiceOutput() ServiceServiceConnectConfigurationServiceOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToServiceServiceConnectConfigurationServiceOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceServiceConnectConfigurationService] {
	return pulumix.Output[ServiceServiceConnectConfigurationService]{
		OutputState: o.OutputState,
	}
}

// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
func (o ServiceServiceConnectConfigurationServiceOutput) ClientAlias() pulumix.GArrayOutput[ServiceServiceConnectConfigurationServiceClientAlias, ServiceServiceConnectConfigurationServiceClientAliasOutput] {
	value := pulumix.Apply[ServiceServiceConnectConfigurationService](o, func(v ServiceServiceConnectConfigurationService) []ServiceServiceConnectConfigurationServiceClientAlias {
		return v.ClientAlias
	})
	return pulumix.GArrayOutput[ServiceServiceConnectConfigurationServiceClientAlias, ServiceServiceConnectConfigurationServiceClientAliasOutput]{OutputState: value.OutputState}
}

// The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
func (o ServiceServiceConnectConfigurationServiceOutput) DiscoveryName() pulumix.Output[*string] {
	return pulumix.Apply[ServiceServiceConnectConfigurationService](o, func(v ServiceServiceConnectConfigurationService) *string { return v.DiscoveryName })
}

// The port number for the Service Connect proxy to listen on.
func (o ServiceServiceConnectConfigurationServiceOutput) IngressPortOverride() pulumix.Output[*int] {
	return pulumix.Apply[ServiceServiceConnectConfigurationService](o, func(v ServiceServiceConnectConfigurationService) *int { return v.IngressPortOverride })
}

// The name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service.
func (o ServiceServiceConnectConfigurationServiceOutput) PortName() pulumix.Output[string] {
	return pulumix.Apply[ServiceServiceConnectConfigurationService](o, func(v ServiceServiceConnectConfigurationService) string { return v.PortName })
}

type ServiceServiceConnectConfigurationServiceClientAlias struct {
	// The name that you use in the applications of client tasks to connect to this service.
	DnsName *string `pulumi:"dnsName"`
	// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
	Port int `pulumi:"port"`
}

type ServiceServiceConnectConfigurationServiceClientAliasArgs struct {
	// The name that you use in the applications of client tasks to connect to this service.
	DnsName pulumix.Input[*string] `pulumi:"dnsName"`
	// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (ServiceServiceConnectConfigurationServiceClientAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationServiceClientAlias)(nil)).Elem()
}

func (i ServiceServiceConnectConfigurationServiceClientAliasArgs) ToServiceServiceConnectConfigurationServiceClientAliasOutput() ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return i.ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(context.Background())
}

func (i ServiceServiceConnectConfigurationServiceClientAliasArgs) ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceConnectConfigurationServiceClientAliasOutput)
}

func (i *ServiceServiceConnectConfigurationServiceClientAliasArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceServiceConnectConfigurationServiceClientAliasArgs] {
	return pulumix.Val(i)
}

type ServiceServiceConnectConfigurationServiceClientAliasOutput struct{ *pulumi.OutputState }

func (ServiceServiceConnectConfigurationServiceClientAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceConnectConfigurationServiceClientAlias)(nil)).Elem()
}

func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) ToServiceServiceConnectConfigurationServiceClientAliasOutput() ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) ToServiceServiceConnectConfigurationServiceClientAliasOutputWithContext(ctx context.Context) ServiceServiceConnectConfigurationServiceClientAliasOutput {
	return o
}

func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceServiceConnectConfigurationServiceClientAlias] {
	return pulumix.Output[ServiceServiceConnectConfigurationServiceClientAlias]{
		OutputState: o.OutputState,
	}
}

// The name that you use in the applications of client tasks to connect to this service.
func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) DnsName() pulumix.Output[*string] {
	return pulumix.Apply[ServiceServiceConnectConfigurationServiceClientAlias](o, func(v ServiceServiceConnectConfigurationServiceClientAlias) *string { return v.DnsName })
}

// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
func (o ServiceServiceConnectConfigurationServiceClientAliasOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[ServiceServiceConnectConfigurationServiceClientAlias](o, func(v ServiceServiceConnectConfigurationServiceClientAlias) int { return v.Port })
}

type ServiceServiceRegistries struct {
	// Container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName *string `pulumi:"containerName"`
	// Port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort *int `pulumi:"containerPort"`
	// Port value used if your Service Discovery service specified an SRV record.
	Port *int `pulumi:"port"`
	// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
	RegistryArn string `pulumi:"registryArn"`
}

type ServiceServiceRegistriesArgs struct {
	// Container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName pulumix.Input[*string] `pulumi:"containerName"`
	// Port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort pulumix.Input[*int] `pulumi:"containerPort"`
	// Port value used if your Service Discovery service specified an SRV record.
	Port pulumix.Input[*int] `pulumi:"port"`
	// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
	RegistryArn pulumix.Input[string] `pulumi:"registryArn"`
}

func (ServiceServiceRegistriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceRegistries)(nil)).Elem()
}

func (i ServiceServiceRegistriesArgs) ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput {
	return i.ToServiceServiceRegistriesOutputWithContext(context.Background())
}

func (i ServiceServiceRegistriesArgs) ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceServiceRegistriesOutput)
}

func (i *ServiceServiceRegistriesArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceServiceRegistriesArgs] {
	return pulumix.Val(i)
}

type ServiceServiceRegistriesOutput struct{ *pulumi.OutputState }

func (ServiceServiceRegistriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceServiceRegistries)(nil)).Elem()
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesOutput() ServiceServiceRegistriesOutput {
	return o
}

func (o ServiceServiceRegistriesOutput) ToServiceServiceRegistriesOutputWithContext(ctx context.Context) ServiceServiceRegistriesOutput {
	return o
}

func (o ServiceServiceRegistriesOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceServiceRegistries] {
	return pulumix.Output[ServiceServiceRegistries]{
		OutputState: o.OutputState,
	}
}

// Container name value, already specified in the task definition, to be used for your service discovery service.
func (o ServiceServiceRegistriesOutput) ContainerName() pulumix.Output[*string] {
	return pulumix.Apply[ServiceServiceRegistries](o, func(v ServiceServiceRegistries) *string { return v.ContainerName })
}

// Port value, already specified in the task definition, to be used for your service discovery service.
func (o ServiceServiceRegistriesOutput) ContainerPort() pulumix.Output[*int] {
	return pulumix.Apply[ServiceServiceRegistries](o, func(v ServiceServiceRegistries) *int { return v.ContainerPort })
}

// Port value used if your Service Discovery service specified an SRV record.
func (o ServiceServiceRegistriesOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[ServiceServiceRegistries](o, func(v ServiceServiceRegistries) *int { return v.Port })
}

// ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
func (o ServiceServiceRegistriesOutput) RegistryArn() pulumix.Output[string] {
	return pulumix.Apply[ServiceServiceRegistries](o, func(v ServiceServiceRegistries) string { return v.RegistryArn })
}

type TaskDefinitionEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
	SizeInGib int `pulumi:"sizeInGib"`
}

type TaskDefinitionEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
	SizeInGib pulumix.Input[int] `pulumi:"sizeInGib"`
}

func (TaskDefinitionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return i.ToTaskDefinitionEphemeralStorageOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput)
}

func (i *TaskDefinitionEphemeralStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionEphemeralStorageArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionEphemeralStorage] {
	return pulumix.Output[TaskDefinitionEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
func (o TaskDefinitionEphemeralStorageOutput) SizeInGib() pulumix.Output[int] {
	return pulumix.Apply[TaskDefinitionEphemeralStorage](o, func(v TaskDefinitionEphemeralStorage) int { return v.SizeInGib })
}

type TaskDefinitionInferenceAccelerator struct {
	// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
	DeviceName string `pulumi:"deviceName"`
	// Elastic Inference accelerator type to use.
	DeviceType string `pulumi:"deviceType"`
}

type TaskDefinitionInferenceAcceleratorArgs struct {
	// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
	DeviceName pulumix.Input[string] `pulumi:"deviceName"`
	// Elastic Inference accelerator type to use.
	DeviceType pulumix.Input[string] `pulumi:"deviceType"`
}

func (TaskDefinitionInferenceAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return i.ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorOutput)
}

func (i *TaskDefinitionInferenceAcceleratorArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionInferenceAcceleratorArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionInferenceAcceleratorOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionInferenceAccelerator] {
	return pulumix.Output[TaskDefinitionInferenceAccelerator]{
		OutputState: o.OutputState,
	}
}

// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
func (o TaskDefinitionInferenceAcceleratorOutput) DeviceName() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionInferenceAccelerator](o, func(v TaskDefinitionInferenceAccelerator) string { return v.DeviceName })
}

// Elastic Inference accelerator type to use.
func (o TaskDefinitionInferenceAcceleratorOutput) DeviceType() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionInferenceAccelerator](o, func(v TaskDefinitionInferenceAccelerator) string { return v.DeviceType })
}

type TaskDefinitionPlacementConstraint struct {
	// Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression *string `pulumi:"expression"`
	// Type of constraint. Use `memberOf` to restrict selection to a group of valid candidates. Note that `distinctInstance` is not supported in task definitions.
	Type string `pulumi:"type"`
}

type TaskDefinitionPlacementConstraintArgs struct {
	// Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// Type of constraint. Use `memberOf` to restrict selection to a group of valid candidates. Note that `distinctInstance` is not supported in task definitions.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TaskDefinitionPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return i.ToTaskDefinitionPlacementConstraintOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintOutput)
}

func (i *TaskDefinitionPlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionPlacementConstraintArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionPlacementConstraintOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionPlacementConstraint] {
	return pulumix.Output[TaskDefinitionPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
func (o TaskDefinitionPlacementConstraintOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionPlacementConstraint](o, func(v TaskDefinitionPlacementConstraint) *string { return v.Expression })
}

// Type of constraint. Use `memberOf` to restrict selection to a group of valid candidates. Note that `distinctInstance` is not supported in task definitions.
func (o TaskDefinitionPlacementConstraintOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionPlacementConstraint](o, func(v TaskDefinitionPlacementConstraint) string { return v.Type })
}

type TaskDefinitionProxyConfiguration struct {
	// Name of the container that will serve as the App Mesh proxy.
	ContainerName string `pulumi:"containerName"`
	// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
	Properties map[string]string `pulumi:"properties"`
	// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
	Type *string `pulumi:"type"`
}

type TaskDefinitionProxyConfigurationArgs struct {
	// Name of the container that will serve as the App Mesh proxy.
	ContainerName pulumix.Input[string] `pulumi:"containerName"`
	// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
	Properties pulumix.Input[map[string]string] `pulumi:"properties"`
	// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (TaskDefinitionProxyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return i.ToTaskDefinitionProxyConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput)
}

func (i *TaskDefinitionProxyConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionProxyConfigurationArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionProxyConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionProxyConfiguration] {
	return pulumix.Output[TaskDefinitionProxyConfiguration]{
		OutputState: o.OutputState,
	}
}

// Name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationOutput) ContainerName() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionProxyConfiguration](o, func(v TaskDefinitionProxyConfiguration) string { return v.ContainerName })
}

// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
func (o TaskDefinitionProxyConfigurationOutput) Properties() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskDefinitionProxyConfiguration](o, func(v TaskDefinitionProxyConfiguration) map[string]string { return v.Properties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
func (o TaskDefinitionProxyConfigurationOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionProxyConfiguration](o, func(v TaskDefinitionProxyConfiguration) *string { return v.Type })
}

type TaskDefinitionRuntimePlatform struct {
	// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
	OperatingSystemFamily *string `pulumi:"operatingSystemFamily"`
}

type TaskDefinitionRuntimePlatformArgs struct {
	// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
	CpuArchitecture pulumix.Input[*string] `pulumi:"cpuArchitecture"`
	// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
	OperatingSystemFamily pulumix.Input[*string] `pulumi:"operatingSystemFamily"`
}

func (TaskDefinitionRuntimePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return i.ToTaskDefinitionRuntimePlatformOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput)
}

func (i *TaskDefinitionRuntimePlatformArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionRuntimePlatformArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionRuntimePlatformOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionRuntimePlatform] {
	return pulumix.Output[TaskDefinitionRuntimePlatform]{
		OutputState: o.OutputState,
	}
}

// Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
func (o TaskDefinitionRuntimePlatformOutput) CpuArchitecture() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionRuntimePlatform](o, func(v TaskDefinitionRuntimePlatform) *string { return v.CpuArchitecture })
}

// If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
func (o TaskDefinitionRuntimePlatformOutput) OperatingSystemFamily() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionRuntimePlatform](o, func(v TaskDefinitionRuntimePlatform) *string { return v.OperatingSystemFamily })
}

type TaskDefinitionVolume struct {
	// Configuration block to configure a docker volume. Detailed below.
	DockerVolumeConfiguration *TaskDefinitionVolumeDockerVolumeConfiguration `pulumi:"dockerVolumeConfiguration"`
	// Configuration block for an EFS volume. Detailed below.
	EfsVolumeConfiguration *TaskDefinitionVolumeEfsVolumeConfiguration `pulumi:"efsVolumeConfiguration"`
	// Configuration block for an FSX Windows File Server volume. Detailed below.
	FsxWindowsFileServerVolumeConfiguration *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration `pulumi:"fsxWindowsFileServerVolumeConfiguration"`
	// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
	HostPath *string `pulumi:"hostPath"`
	// Name of the volume. This name is referenced in the `sourceVolume`
	// parameter of container definition in the `mountPoints` section.
	Name string `pulumi:"name"`
}

type TaskDefinitionVolumeArgs struct {
	// Configuration block to configure a docker volume. Detailed below.
	DockerVolumeConfiguration pulumix.Input[*TaskDefinitionVolumeDockerVolumeConfigurationArgs] `pulumi:"dockerVolumeConfiguration"`
	// Configuration block for an EFS volume. Detailed below.
	EfsVolumeConfiguration pulumix.Input[*TaskDefinitionVolumeEfsVolumeConfigurationArgs] `pulumi:"efsVolumeConfiguration"`
	// Configuration block for an FSX Windows File Server volume. Detailed below.
	FsxWindowsFileServerVolumeConfiguration pulumix.Input[*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs] `pulumi:"fsxWindowsFileServerVolumeConfiguration"`
	// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
	HostPath pulumix.Input[*string] `pulumi:"hostPath"`
	// Name of the volume. This name is referenced in the `sourceVolume`
	// parameter of container definition in the `mountPoints` section.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (TaskDefinitionVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return i.ToTaskDefinitionVolumeOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeOutput)
}

func (i *TaskDefinitionVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionVolumeArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionVolumeOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return o
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return o
}

func (o TaskDefinitionVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionVolume] {
	return pulumix.Output[TaskDefinitionVolume]{
		OutputState: o.OutputState,
	}
}

// Configuration block to configure a docker volume. Detailed below.
func (o TaskDefinitionVolumeOutput) DockerVolumeConfiguration() pulumix.GPtrOutput[TaskDefinitionVolumeDockerVolumeConfiguration, TaskDefinitionVolumeDockerVolumeConfigurationOutput] {
	value := pulumix.Apply[TaskDefinitionVolume](o, func(v TaskDefinitionVolume) *TaskDefinitionVolumeDockerVolumeConfiguration {
		return v.DockerVolumeConfiguration
	})
	return pulumix.GPtrOutput[TaskDefinitionVolumeDockerVolumeConfiguration, TaskDefinitionVolumeDockerVolumeConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block for an EFS volume. Detailed below.
func (o TaskDefinitionVolumeOutput) EfsVolumeConfiguration() pulumix.GPtrOutput[TaskDefinitionVolumeEfsVolumeConfiguration, TaskDefinitionVolumeEfsVolumeConfigurationOutput] {
	value := pulumix.Apply[TaskDefinitionVolume](o, func(v TaskDefinitionVolume) *TaskDefinitionVolumeEfsVolumeConfiguration {
		return v.EfsVolumeConfiguration
	})
	return pulumix.GPtrOutput[TaskDefinitionVolumeEfsVolumeConfiguration, TaskDefinitionVolumeEfsVolumeConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block for an FSX Windows File Server volume. Detailed below.
func (o TaskDefinitionVolumeOutput) FsxWindowsFileServerVolumeConfiguration() pulumix.GPtrOutput[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration, TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput] {
	value := pulumix.Apply[TaskDefinitionVolume](o, func(v TaskDefinitionVolume) *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration {
		return v.FsxWindowsFileServerVolumeConfiguration
	})
	return pulumix.GPtrOutput[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration, TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput]{OutputState: value.OutputState}
}

// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
func (o TaskDefinitionVolumeOutput) HostPath() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolume](o, func(v TaskDefinitionVolume) *string { return v.HostPath })
}

// Name of the volume. This name is referenced in the `sourceVolume`
// parameter of container definition in the `mountPoints` section.
func (o TaskDefinitionVolumeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionVolume](o, func(v TaskDefinitionVolume) string { return v.Name })
}

type TaskDefinitionVolumeDockerVolumeConfiguration struct {
	// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
	Autoprovision *bool `pulumi:"autoprovision"`
	// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
	Driver *string `pulumi:"driver"`
	// Map of Docker driver specific options.
	DriverOpts map[string]string `pulumi:"driverOpts"`
	// Map of custom metadata to add to your Docker volume.
	Labels map[string]string `pulumi:"labels"`
	// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
	Scope *string `pulumi:"scope"`
}

type TaskDefinitionVolumeDockerVolumeConfigurationArgs struct {
	// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
	Autoprovision pulumix.Input[*bool] `pulumi:"autoprovision"`
	// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
	Driver pulumix.Input[*string] `pulumi:"driver"`
	// Map of Docker driver specific options.
	DriverOpts pulumix.Input[map[string]string] `pulumi:"driverOpts"`
	// Map of custom metadata to add to your Docker volume.
	Labels pulumix.Input[map[string]string] `pulumi:"labels"`
	// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
	Scope pulumix.Input[*string] `pulumi:"scope"`
}

func (TaskDefinitionVolumeDockerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeDockerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToTaskDefinitionVolumeDockerVolumeConfigurationOutput() TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return i.ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeDockerVolumeConfigurationOutput)
}

func (i *TaskDefinitionVolumeDockerVolumeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionVolumeDockerVolumeConfigurationArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionVolumeDockerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeDockerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationOutput() TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToTaskDefinitionVolumeDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionVolumeDockerVolumeConfiguration] {
	return pulumix.Output[TaskDefinitionVolumeDockerVolumeConfiguration]{
		OutputState: o.OutputState,
	}
}

// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Autoprovision() pulumix.Output[*bool] {
	return pulumix.Apply[TaskDefinitionVolumeDockerVolumeConfiguration](o, func(v TaskDefinitionVolumeDockerVolumeConfiguration) *bool { return v.Autoprovision })
}

// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Driver() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolumeDockerVolumeConfiguration](o, func(v TaskDefinitionVolumeDockerVolumeConfiguration) *string { return v.Driver })
}

// Map of Docker driver specific options.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) DriverOpts() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskDefinitionVolumeDockerVolumeConfiguration](o, func(v TaskDefinitionVolumeDockerVolumeConfiguration) map[string]string { return v.DriverOpts })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Map of custom metadata to add to your Docker volume.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[TaskDefinitionVolumeDockerVolumeConfiguration](o, func(v TaskDefinitionVolumeDockerVolumeConfiguration) map[string]string { return v.Labels })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.
func (o TaskDefinitionVolumeDockerVolumeConfigurationOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolumeDockerVolumeConfiguration](o, func(v TaskDefinitionVolumeDockerVolumeConfiguration) *string { return v.Scope })
}

type TaskDefinitionVolumeEfsVolumeConfiguration struct {
	// Configuration block for authorization for the Amazon EFS file system. Detailed below.
	AuthorizationConfig *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig `pulumi:"authorizationConfig"`
	// ID of the EFS File System.
	FileSystemId string `pulumi:"fileSystemId"`
	// Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorizationConfig`.
	RootDirectory *string `pulumi:"rootDirectory"`
	// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	TransitEncryption *string `pulumi:"transitEncryption"`
	// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
	TransitEncryptionPort *int `pulumi:"transitEncryptionPort"`
}

type TaskDefinitionVolumeEfsVolumeConfigurationArgs struct {
	// Configuration block for authorization for the Amazon EFS file system. Detailed below.
	AuthorizationConfig pulumix.Input[*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs] `pulumi:"authorizationConfig"`
	// ID of the EFS File System.
	FileSystemId pulumix.Input[string] `pulumi:"fileSystemId"`
	// Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorizationConfig`.
	RootDirectory pulumix.Input[*string] `pulumi:"rootDirectory"`
	// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	TransitEncryption pulumix.Input[*string] `pulumi:"transitEncryption"`
	// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
	TransitEncryptionPort pulumix.Input[*int] `pulumi:"transitEncryptionPort"`
}

func (TaskDefinitionVolumeEfsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationOutput() TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationOutput)
}

func (i *TaskDefinitionVolumeEfsVolumeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionVolumeEfsVolumeConfigurationArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionVolumeEfsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeEfsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationOutput() TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionVolumeEfsVolumeConfiguration] {
	return pulumix.Output[TaskDefinitionVolumeEfsVolumeConfiguration]{
		OutputState: o.OutputState,
	}
}

// Configuration block for authorization for the Amazon EFS file system. Detailed below.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) AuthorizationConfig() pulumix.GPtrOutput[TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig, TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput] {
	value := pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfiguration](o, func(v TaskDefinitionVolumeEfsVolumeConfiguration) *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig {
		return v.AuthorizationConfig
	})
	return pulumix.GPtrOutput[TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig, TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput]{OutputState: value.OutputState}
}

// ID of the EFS File System.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) FileSystemId() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfiguration](o, func(v TaskDefinitionVolumeEfsVolumeConfiguration) string { return v.FileSystemId })
}

// Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorizationConfig`.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) RootDirectory() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfiguration](o, func(v TaskDefinitionVolumeEfsVolumeConfiguration) *string { return v.RootDirectory })
}

// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) TransitEncryption() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfiguration](o, func(v TaskDefinitionVolumeEfsVolumeConfiguration) *string { return v.TransitEncryption })
}

// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
func (o TaskDefinitionVolumeEfsVolumeConfigurationOutput) TransitEncryptionPort() pulumix.Output[*int] {
	return pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfiguration](o, func(v TaskDefinitionVolumeEfsVolumeConfiguration) *int { return v.TransitEncryptionPort })
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig struct {
	// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
	AccessPointId *string `pulumi:"accessPointId"`
	// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	Iam *string `pulumi:"iam"`
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs struct {
	// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
	AccessPointId pulumix.Input[*string] `pulumi:"accessPointId"`
	// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
	Iam pulumix.Input[*string] `pulumi:"iam"`
}

func (TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return i.ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput)
}

func (i *TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig] {
	return pulumix.Output[TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig]{
		OutputState: o.OutputState,
	}
}

// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) AccessPointId() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig](o, func(v TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *string { return v.AccessPointId })
}

// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
func (o TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput) Iam() pulumix.Output[*string] {
	return pulumix.Apply[TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig](o, func(v TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig) *string { return v.Iam })
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration struct {
	// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
	AuthorizationConfig TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId string `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory string `pulumi:"rootDirectory"`
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs struct {
	// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
	AuthorizationConfig pulumix.Input[*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs] `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId pulumix.Input[string] `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory pulumix.Input[string] `pulumi:"rootDirectory"`
}

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput)
}

func (i *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration] {
	return pulumix.Output[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration]{
		OutputState: o.OutputState,
	}
}

// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) AuthorizationConfig() pulumix.GPtrOutput[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig, TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput] {
	value := pulumix.Apply[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration](o, func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig {
		return v.AuthorizationConfig
	})
	return pulumix.GPtrOutput[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig, TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput]{OutputState: value.OutputState}
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) FileSystemId() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration](o, func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) string { return v.FileSystemId })
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput) RootDirectory() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration](o, func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfiguration) string { return v.RootDirectory })
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig struct {
	// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
	CredentialsParameter string `pulumi:"credentialsParameter"`
	// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	Domain string `pulumi:"domain"`
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs struct {
	// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
	CredentialsParameter pulumix.Input[string] `pulumi:"credentialsParameter"`
	// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	Domain pulumix.Input[string] `pulumi:"domain"`
}

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return i.ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput)
}

func (i *TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigArgs] {
	return pulumix.Val(i)
}

type TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput() TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToTaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig] {
	return pulumix.Output[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig]{
		OutputState: o.OutputState,
	}
}

// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) CredentialsParameter() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig](o, func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) string {
		return v.CredentialsParameter
	})
}

// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
func (o TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput) Domain() pulumix.Output[string] {
	return pulumix.Apply[TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig](o, func(v TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig) string {
		return v.Domain
	})
}

type TaskSetCapacityProviderStrategy struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base *int `pulumi:"base"`
	// The short name or full Amazon Resource Name (ARN) of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight int `pulumi:"weight"`
}

type TaskSetCapacityProviderStrategyArgs struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	Base pulumix.Input[*int] `pulumi:"base"`
	// The short name or full Amazon Resource Name (ARN) of the capacity provider.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (TaskSetCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetCapacityProviderStrategy)(nil)).Elem()
}

func (i TaskSetCapacityProviderStrategyArgs) ToTaskSetCapacityProviderStrategyOutput() TaskSetCapacityProviderStrategyOutput {
	return i.ToTaskSetCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i TaskSetCapacityProviderStrategyArgs) ToTaskSetCapacityProviderStrategyOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetCapacityProviderStrategyOutput)
}

func (i *TaskSetCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskSetCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type TaskSetCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (TaskSetCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetCapacityProviderStrategy)(nil)).Elem()
}

func (o TaskSetCapacityProviderStrategyOutput) ToTaskSetCapacityProviderStrategyOutput() TaskSetCapacityProviderStrategyOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyOutput) ToTaskSetCapacityProviderStrategyOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSetCapacityProviderStrategy] {
	return pulumix.Output[TaskSetCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
func (o TaskSetCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[TaskSetCapacityProviderStrategy](o, func(v TaskSetCapacityProviderStrategy) *int { return v.Base })
}

// The short name or full Amazon Resource Name (ARN) of the capacity provider.
func (o TaskSetCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[TaskSetCapacityProviderStrategy](o, func(v TaskSetCapacityProviderStrategy) string { return v.CapacityProvider })
}

// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
func (o TaskSetCapacityProviderStrategyOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[TaskSetCapacityProviderStrategy](o, func(v TaskSetCapacityProviderStrategy) int { return v.Weight })
}

type TaskSetLoadBalancer struct {
	// The name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName string `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. Defaults to `0` if not specified.
	//
	// > **Note:** Specifying multiple `loadBalancer` configurations is still not supported by AWS for ECS task set.
	ContainerPort *int `pulumi:"containerPort"`
	// The name of the ELB (Classic) to associate with the service.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

type TaskSetLoadBalancerArgs struct {
	// The name of the container to associate with the load balancer (as it appears in a container definition).
	ContainerName pulumix.Input[string] `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. Defaults to `0` if not specified.
	//
	// > **Note:** Specifying multiple `loadBalancer` configurations is still not supported by AWS for ECS task set.
	ContainerPort pulumix.Input[*int] `pulumi:"containerPort"`
	// The name of the ELB (Classic) to associate with the service.
	LoadBalancerName pulumix.Input[*string] `pulumi:"loadBalancerName"`
	// The ARN of the Load Balancer target group to associate with the service.
	TargetGroupArn pulumix.Input[*string] `pulumi:"targetGroupArn"`
}

func (TaskSetLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return i.ToTaskSetLoadBalancerOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerOutput)
}

func (i *TaskSetLoadBalancerArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskSetLoadBalancerArgs] {
	return pulumix.Val(i)
}

type TaskSetLoadBalancerOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return o
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return o
}

func (o TaskSetLoadBalancerOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSetLoadBalancer] {
	return pulumix.Output[TaskSetLoadBalancer]{
		OutputState: o.OutputState,
	}
}

// The name of the container to associate with the load balancer (as it appears in a container definition).
func (o TaskSetLoadBalancerOutput) ContainerName() pulumix.Output[string] {
	return pulumix.Apply[TaskSetLoadBalancer](o, func(v TaskSetLoadBalancer) string { return v.ContainerName })
}

// The port on the container to associate with the load balancer. Defaults to `0` if not specified.
//
// > **Note:** Specifying multiple `loadBalancer` configurations is still not supported by AWS for ECS task set.
func (o TaskSetLoadBalancerOutput) ContainerPort() pulumix.Output[*int] {
	return pulumix.Apply[TaskSetLoadBalancer](o, func(v TaskSetLoadBalancer) *int { return v.ContainerPort })
}

// The name of the ELB (Classic) to associate with the service.
func (o TaskSetLoadBalancerOutput) LoadBalancerName() pulumix.Output[*string] {
	return pulumix.Apply[TaskSetLoadBalancer](o, func(v TaskSetLoadBalancer) *string { return v.LoadBalancerName })
}

// The ARN of the Load Balancer target group to associate with the service.
func (o TaskSetLoadBalancerOutput) TargetGroupArn() pulumix.Output[*string] {
	return pulumix.Apply[TaskSetLoadBalancer](o, func(v TaskSetLoadBalancer) *string { return v.TargetGroupArn })
}

type TaskSetNetworkConfiguration struct {
	// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
	//
	// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html).
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service. Maximum of 16.
	Subnets []string `pulumi:"subnets"`
}

type TaskSetNetworkConfigurationArgs struct {
	// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
	//
	// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html).
	AssignPublicIp pulumix.Input[*bool] `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// The subnets associated with the task or service. Maximum of 16.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (TaskSetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return i.ToTaskSetNetworkConfigurationOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput)
}

func (i *TaskSetNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskSetNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type TaskSetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSetNetworkConfiguration] {
	return pulumix.Output[TaskSetNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.
//
// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html).
func (o TaskSetNetworkConfigurationOutput) AssignPublicIp() pulumix.Output[*bool] {
	return pulumix.Apply[TaskSetNetworkConfiguration](o, func(v TaskSetNetworkConfiguration) *bool { return v.AssignPublicIp })
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
func (o TaskSetNetworkConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TaskSetNetworkConfiguration](o, func(v TaskSetNetworkConfiguration) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The subnets associated with the task or service. Maximum of 16.
func (o TaskSetNetworkConfigurationOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TaskSetNetworkConfiguration](o, func(v TaskSetNetworkConfiguration) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type TaskSetScale struct {
	// The unit of measure for the scale value. Default: `PERCENT`.
	Unit *string `pulumi:"unit"`
	// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
	Value *float64 `pulumi:"value"`
}

type TaskSetScaleArgs struct {
	// The unit of measure for the scale value. Default: `PERCENT`.
	Unit pulumix.Input[*string] `pulumi:"unit"`
	// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
	Value pulumix.Input[*float64] `pulumi:"value"`
}

func (TaskSetScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return i.ToTaskSetScaleOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput)
}

func (i *TaskSetScaleArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskSetScaleArgs] {
	return pulumix.Val(i)
}

type TaskSetScaleOutput struct{ *pulumi.OutputState }

func (TaskSetScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSetScale] {
	return pulumix.Output[TaskSetScale]{
		OutputState: o.OutputState,
	}
}

// The unit of measure for the scale value. Default: `PERCENT`.
func (o TaskSetScaleOutput) Unit() pulumix.Output[*string] {
	return pulumix.Apply[TaskSetScale](o, func(v TaskSetScale) *string { return v.Unit })
}

// The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.
func (o TaskSetScaleOutput) Value() pulumix.Output[*float64] {
	return pulumix.Apply[TaskSetScale](o, func(v TaskSetScale) *float64 { return v.Value })
}

type TaskSetServiceRegistries struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName *string `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort *int `pulumi:"containerPort"`
	// The port value used if your Service Discovery service specified an SRV record.
	Port *int `pulumi:"port"`
	// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
	RegistryArn string `pulumi:"registryArn"`
}

type TaskSetServiceRegistriesArgs struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service.
	ContainerName pulumix.Input[*string] `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service.
	ContainerPort pulumix.Input[*int] `pulumi:"containerPort"`
	// The port value used if your Service Discovery service specified an SRV record.
	Port pulumix.Input[*int] `pulumi:"port"`
	// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
	RegistryArn pulumix.Input[string] `pulumi:"registryArn"`
}

func (TaskSetServiceRegistriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistries)(nil)).Elem()
}

func (i TaskSetServiceRegistriesArgs) ToTaskSetServiceRegistriesOutput() TaskSetServiceRegistriesOutput {
	return i.ToTaskSetServiceRegistriesOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistriesArgs) ToTaskSetServiceRegistriesOutputWithContext(ctx context.Context) TaskSetServiceRegistriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistriesOutput)
}

func (i *TaskSetServiceRegistriesArgs) ToOutput(ctx context.Context) pulumix.Output[*TaskSetServiceRegistriesArgs] {
	return pulumix.Val(i)
}

type TaskSetServiceRegistriesOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistries)(nil)).Elem()
}

func (o TaskSetServiceRegistriesOutput) ToTaskSetServiceRegistriesOutput() TaskSetServiceRegistriesOutput {
	return o
}

func (o TaskSetServiceRegistriesOutput) ToTaskSetServiceRegistriesOutputWithContext(ctx context.Context) TaskSetServiceRegistriesOutput {
	return o
}

func (o TaskSetServiceRegistriesOutput) ToOutput(ctx context.Context) pulumix.Output[TaskSetServiceRegistries] {
	return pulumix.Output[TaskSetServiceRegistries]{
		OutputState: o.OutputState,
	}
}

// The container name value, already specified in the task definition, to be used for your service discovery service.
func (o TaskSetServiceRegistriesOutput) ContainerName() pulumix.Output[*string] {
	return pulumix.Apply[TaskSetServiceRegistries](o, func(v TaskSetServiceRegistries) *string { return v.ContainerName })
}

// The port value, already specified in the task definition, to be used for your service discovery service.
func (o TaskSetServiceRegistriesOutput) ContainerPort() pulumix.Output[*int] {
	return pulumix.Apply[TaskSetServiceRegistries](o, func(v TaskSetServiceRegistries) *int { return v.ContainerPort })
}

// The port value used if your Service Discovery service specified an SRV record.
func (o TaskSetServiceRegistriesOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[TaskSetServiceRegistries](o, func(v TaskSetServiceRegistries) *int { return v.Port })
}

// The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`servicediscovery.Service` resource). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
func (o TaskSetServiceRegistriesOutput) RegistryArn() pulumix.Output[string] {
	return pulumix.Apply[TaskSetServiceRegistries](o, func(v TaskSetServiceRegistries) string { return v.RegistryArn })
}

type GetClusterServiceConnectDefault struct {
	Namespace string `pulumi:"namespace"`
}

type GetClusterServiceConnectDefaultArgs struct {
	Namespace pulumix.Input[string] `pulumi:"namespace"`
}

func (GetClusterServiceConnectDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterServiceConnectDefault)(nil)).Elem()
}

func (i GetClusterServiceConnectDefaultArgs) ToGetClusterServiceConnectDefaultOutput() GetClusterServiceConnectDefaultOutput {
	return i.ToGetClusterServiceConnectDefaultOutputWithContext(context.Background())
}

func (i GetClusterServiceConnectDefaultArgs) ToGetClusterServiceConnectDefaultOutputWithContext(ctx context.Context) GetClusterServiceConnectDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterServiceConnectDefaultOutput)
}

func (i *GetClusterServiceConnectDefaultArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterServiceConnectDefaultArgs] {
	return pulumix.Val(i)
}

type GetClusterServiceConnectDefaultOutput struct{ *pulumi.OutputState }

func (GetClusterServiceConnectDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterServiceConnectDefault)(nil)).Elem()
}

func (o GetClusterServiceConnectDefaultOutput) ToGetClusterServiceConnectDefaultOutput() GetClusterServiceConnectDefaultOutput {
	return o
}

func (o GetClusterServiceConnectDefaultOutput) ToGetClusterServiceConnectDefaultOutputWithContext(ctx context.Context) GetClusterServiceConnectDefaultOutput {
	return o
}

func (o GetClusterServiceConnectDefaultOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterServiceConnectDefault] {
	return pulumix.Output[GetClusterServiceConnectDefault]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterServiceConnectDefaultOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[GetClusterServiceConnectDefault](o, func(v GetClusterServiceConnectDefault) string { return v.Namespace })
}

type GetClusterSetting struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

type GetClusterSettingArgs struct {
	Name  pulumix.Input[string] `pulumi:"name"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetClusterSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSetting)(nil)).Elem()
}

func (i GetClusterSettingArgs) ToGetClusterSettingOutput() GetClusterSettingOutput {
	return i.ToGetClusterSettingOutputWithContext(context.Background())
}

func (i GetClusterSettingArgs) ToGetClusterSettingOutputWithContext(ctx context.Context) GetClusterSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterSettingOutput)
}

func (i *GetClusterSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterSettingArgs] {
	return pulumix.Val(i)
}

type GetClusterSettingOutput struct{ *pulumi.OutputState }

func (GetClusterSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSetting)(nil)).Elem()
}

func (o GetClusterSettingOutput) ToGetClusterSettingOutput() GetClusterSettingOutput {
	return o
}

func (o GetClusterSettingOutput) ToGetClusterSettingOutputWithContext(ctx context.Context) GetClusterSettingOutput {
	return o
}

func (o GetClusterSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterSetting] {
	return pulumix.Output[GetClusterSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterSettingOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetClusterSetting](o, func(v GetClusterSetting) string { return v.Name })
}

func (o GetClusterSettingOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetClusterSetting](o, func(v GetClusterSetting) string { return v.Value })
}

type GetTaskExecutionCapacityProviderStrategy struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base *int `pulumi:"base"`
	// Name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
	Weight *int `pulumi:"weight"`
}

type GetTaskExecutionCapacityProviderStrategyArgs struct {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base pulumix.Input[*int] `pulumi:"base"`
	// Name of the capacity provider.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (GetTaskExecutionCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionCapacityProviderStrategy)(nil)).Elem()
}

func (i GetTaskExecutionCapacityProviderStrategyArgs) ToGetTaskExecutionCapacityProviderStrategyOutput() GetTaskExecutionCapacityProviderStrategyOutput {
	return i.ToGetTaskExecutionCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i GetTaskExecutionCapacityProviderStrategyArgs) ToGetTaskExecutionCapacityProviderStrategyOutputWithContext(ctx context.Context) GetTaskExecutionCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionCapacityProviderStrategyOutput)
}

func (i *GetTaskExecutionCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionCapacityProviderStrategy)(nil)).Elem()
}

func (o GetTaskExecutionCapacityProviderStrategyOutput) ToGetTaskExecutionCapacityProviderStrategyOutput() GetTaskExecutionCapacityProviderStrategyOutput {
	return o
}

func (o GetTaskExecutionCapacityProviderStrategyOutput) ToGetTaskExecutionCapacityProviderStrategyOutputWithContext(ctx context.Context) GetTaskExecutionCapacityProviderStrategyOutput {
	return o
}

func (o GetTaskExecutionCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionCapacityProviderStrategy] {
	return pulumix.Output[GetTaskExecutionCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
func (o GetTaskExecutionCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[GetTaskExecutionCapacityProviderStrategy](o, func(v GetTaskExecutionCapacityProviderStrategy) *int { return v.Base })
}

// Name of the capacity provider.
func (o GetTaskExecutionCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionCapacityProviderStrategy](o, func(v GetTaskExecutionCapacityProviderStrategy) string { return v.CapacityProvider })
}

// The relative percentage of the total number of launched tasks that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` count of tasks has been satisfied. Defaults to `0`.
func (o GetTaskExecutionCapacityProviderStrategyOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[GetTaskExecutionCapacityProviderStrategy](o, func(v GetTaskExecutionCapacityProviderStrategy) *int { return v.Weight })
}

type GetTaskExecutionNetworkConfiguration struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	//
	// For more information, see the [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) documentation.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

type GetTaskExecutionNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
	//
	// For more information, see the [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) documentation.
	AssignPublicIp pulumix.Input[*bool] `pulumi:"assignPublicIp"`
	// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// Subnets associated with the task or service.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (GetTaskExecutionNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionNetworkConfiguration)(nil)).Elem()
}

func (i GetTaskExecutionNetworkConfigurationArgs) ToGetTaskExecutionNetworkConfigurationOutput() GetTaskExecutionNetworkConfigurationOutput {
	return i.ToGetTaskExecutionNetworkConfigurationOutputWithContext(context.Background())
}

func (i GetTaskExecutionNetworkConfigurationArgs) ToGetTaskExecutionNetworkConfigurationOutputWithContext(ctx context.Context) GetTaskExecutionNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionNetworkConfigurationOutput)
}

func (i *GetTaskExecutionNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionNetworkConfiguration)(nil)).Elem()
}

func (o GetTaskExecutionNetworkConfigurationOutput) ToGetTaskExecutionNetworkConfigurationOutput() GetTaskExecutionNetworkConfigurationOutput {
	return o
}

func (o GetTaskExecutionNetworkConfigurationOutput) ToGetTaskExecutionNetworkConfigurationOutputWithContext(ctx context.Context) GetTaskExecutionNetworkConfigurationOutput {
	return o
}

func (o GetTaskExecutionNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionNetworkConfiguration] {
	return pulumix.Output[GetTaskExecutionNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
//
// For more information, see the [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) documentation.
func (o GetTaskExecutionNetworkConfigurationOutput) AssignPublicIp() pulumix.Output[*bool] {
	return pulumix.Apply[GetTaskExecutionNetworkConfiguration](o, func(v GetTaskExecutionNetworkConfiguration) *bool { return v.AssignPublicIp })
}

// Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o GetTaskExecutionNetworkConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTaskExecutionNetworkConfiguration](o, func(v GetTaskExecutionNetworkConfiguration) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Subnets associated with the task or service.
func (o GetTaskExecutionNetworkConfigurationOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTaskExecutionNetworkConfiguration](o, func(v GetTaskExecutionNetworkConfiguration) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetTaskExecutionOverrides struct {
	// One or more container overrides that are sent to a task. See below.
	ContainerOverrides []GetTaskExecutionOverridesContainerOverride `pulumi:"containerOverrides"`
	// The CPU override for the task.
	Cpu *string `pulumi:"cpu"`
	// Amazon Resource Name (ARN) of the task execution role override for the task.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Elastic Inference accelerator override for the task. See below.
	InferenceAcceleratorOverrides []GetTaskExecutionOverridesInferenceAcceleratorOverride `pulumi:"inferenceAcceleratorOverrides"`
	// The memory override for the task.
	Memory *string `pulumi:"memory"`
	// Amazon Resource Name (ARN) of the role that containers in this task can assume.
	TaskRoleArn *string `pulumi:"taskRoleArn"`
}

type GetTaskExecutionOverridesArgs struct {
	// One or more container overrides that are sent to a task. See below.
	ContainerOverrides pulumix.Input[[]*GetTaskExecutionOverridesContainerOverrideArgs] `pulumi:"containerOverrides"`
	// The CPU override for the task.
	Cpu pulumix.Input[*string] `pulumi:"cpu"`
	// Amazon Resource Name (ARN) of the task execution role override for the task.
	ExecutionRoleArn pulumix.Input[*string] `pulumi:"executionRoleArn"`
	// Elastic Inference accelerator override for the task. See below.
	InferenceAcceleratorOverrides pulumix.Input[[]*GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs] `pulumi:"inferenceAcceleratorOverrides"`
	// The memory override for the task.
	Memory pulumix.Input[*string] `pulumi:"memory"`
	// Amazon Resource Name (ARN) of the role that containers in this task can assume.
	TaskRoleArn pulumix.Input[*string] `pulumi:"taskRoleArn"`
}

func (GetTaskExecutionOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverrides)(nil)).Elem()
}

func (i GetTaskExecutionOverridesArgs) ToGetTaskExecutionOverridesOutput() GetTaskExecutionOverridesOutput {
	return i.ToGetTaskExecutionOverridesOutputWithContext(context.Background())
}

func (i GetTaskExecutionOverridesArgs) ToGetTaskExecutionOverridesOutputWithContext(ctx context.Context) GetTaskExecutionOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionOverridesOutput)
}

func (i *GetTaskExecutionOverridesArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionOverridesArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionOverridesOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverrides)(nil)).Elem()
}

func (o GetTaskExecutionOverridesOutput) ToGetTaskExecutionOverridesOutput() GetTaskExecutionOverridesOutput {
	return o
}

func (o GetTaskExecutionOverridesOutput) ToGetTaskExecutionOverridesOutputWithContext(ctx context.Context) GetTaskExecutionOverridesOutput {
	return o
}

func (o GetTaskExecutionOverridesOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionOverrides] {
	return pulumix.Output[GetTaskExecutionOverrides]{
		OutputState: o.OutputState,
	}
}

// One or more container overrides that are sent to a task. See below.
func (o GetTaskExecutionOverridesOutput) ContainerOverrides() pulumix.GArrayOutput[GetTaskExecutionOverridesContainerOverride, GetTaskExecutionOverridesContainerOverrideOutput] {
	value := pulumix.Apply[GetTaskExecutionOverrides](o, func(v GetTaskExecutionOverrides) []GetTaskExecutionOverridesContainerOverride {
		return v.ContainerOverrides
	})
	return pulumix.GArrayOutput[GetTaskExecutionOverridesContainerOverride, GetTaskExecutionOverridesContainerOverrideOutput]{OutputState: value.OutputState}
}

// The CPU override for the task.
func (o GetTaskExecutionOverridesOutput) Cpu() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionOverrides](o, func(v GetTaskExecutionOverrides) *string { return v.Cpu })
}

// Amazon Resource Name (ARN) of the task execution role override for the task.
func (o GetTaskExecutionOverridesOutput) ExecutionRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionOverrides](o, func(v GetTaskExecutionOverrides) *string { return v.ExecutionRoleArn })
}

// Elastic Inference accelerator override for the task. See below.
func (o GetTaskExecutionOverridesOutput) InferenceAcceleratorOverrides() pulumix.GArrayOutput[GetTaskExecutionOverridesInferenceAcceleratorOverride, GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput] {
	value := pulumix.Apply[GetTaskExecutionOverrides](o, func(v GetTaskExecutionOverrides) []GetTaskExecutionOverridesInferenceAcceleratorOverride {
		return v.InferenceAcceleratorOverrides
	})
	return pulumix.GArrayOutput[GetTaskExecutionOverridesInferenceAcceleratorOverride, GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput]{OutputState: value.OutputState}
}

// The memory override for the task.
func (o GetTaskExecutionOverridesOutput) Memory() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionOverrides](o, func(v GetTaskExecutionOverrides) *string { return v.Memory })
}

// Amazon Resource Name (ARN) of the role that containers in this task can assume.
func (o GetTaskExecutionOverridesOutput) TaskRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionOverrides](o, func(v GetTaskExecutionOverrides) *string { return v.TaskRoleArn })
}

type GetTaskExecutionOverridesContainerOverride struct {
	// The command to send to the container that overrides the default command from the Docker image or the task definition.
	Commands []string `pulumi:"commands"`
	// The number of cpu units reserved for the container, instead of the default value from the task definition.
	Cpu *int `pulumi:"cpu"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. See below.
	Environments []GetTaskExecutionOverridesContainerOverrideEnvironment `pulumi:"environments"`
	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed.
	Memory *int `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The name of the container that receives the override. This parameter is required if any override is specified.
	Name string `pulumi:"name"`
	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. See below.
	ResourceRequirements []GetTaskExecutionOverridesContainerOverrideResourceRequirement `pulumi:"resourceRequirements"`
}

type GetTaskExecutionOverridesContainerOverrideArgs struct {
	// The command to send to the container that overrides the default command from the Docker image or the task definition.
	Commands pulumix.Input[[]string] `pulumi:"commands"`
	// The number of cpu units reserved for the container, instead of the default value from the task definition.
	Cpu pulumix.Input[*int] `pulumi:"cpu"`
	// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. See below.
	Environments pulumix.Input[[]*GetTaskExecutionOverridesContainerOverrideEnvironmentArgs] `pulumi:"environments"`
	// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed.
	Memory pulumix.Input[*int] `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition.
	MemoryReservation pulumix.Input[*int] `pulumi:"memoryReservation"`
	// The name of the container that receives the override. This parameter is required if any override is specified.
	Name pulumix.Input[string] `pulumi:"name"`
	// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. See below.
	ResourceRequirements pulumix.Input[[]*GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs] `pulumi:"resourceRequirements"`
}

func (GetTaskExecutionOverridesContainerOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesContainerOverride)(nil)).Elem()
}

func (i GetTaskExecutionOverridesContainerOverrideArgs) ToGetTaskExecutionOverridesContainerOverrideOutput() GetTaskExecutionOverridesContainerOverrideOutput {
	return i.ToGetTaskExecutionOverridesContainerOverrideOutputWithContext(context.Background())
}

func (i GetTaskExecutionOverridesContainerOverrideArgs) ToGetTaskExecutionOverridesContainerOverrideOutputWithContext(ctx context.Context) GetTaskExecutionOverridesContainerOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionOverridesContainerOverrideOutput)
}

func (i *GetTaskExecutionOverridesContainerOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionOverridesContainerOverrideArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionOverridesContainerOverrideOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionOverridesContainerOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesContainerOverride)(nil)).Elem()
}

func (o GetTaskExecutionOverridesContainerOverrideOutput) ToGetTaskExecutionOverridesContainerOverrideOutput() GetTaskExecutionOverridesContainerOverrideOutput {
	return o
}

func (o GetTaskExecutionOverridesContainerOverrideOutput) ToGetTaskExecutionOverridesContainerOverrideOutputWithContext(ctx context.Context) GetTaskExecutionOverridesContainerOverrideOutput {
	return o
}

func (o GetTaskExecutionOverridesContainerOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionOverridesContainerOverride] {
	return pulumix.Output[GetTaskExecutionOverridesContainerOverride]{
		OutputState: o.OutputState,
	}
}

// The command to send to the container that overrides the default command from the Docker image or the task definition.
func (o GetTaskExecutionOverridesContainerOverrideOutput) Commands() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) []string { return v.Commands })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The number of cpu units reserved for the container, instead of the default value from the task definition.
func (o GetTaskExecutionOverridesContainerOverrideOutput) Cpu() pulumix.Output[*int] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) *int { return v.Cpu })
}

// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. See below.
func (o GetTaskExecutionOverridesContainerOverrideOutput) Environments() pulumix.GArrayOutput[GetTaskExecutionOverridesContainerOverrideEnvironment, GetTaskExecutionOverridesContainerOverrideEnvironmentOutput] {
	value := pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) []GetTaskExecutionOverridesContainerOverrideEnvironment {
		return v.Environments
	})
	return pulumix.GArrayOutput[GetTaskExecutionOverridesContainerOverrideEnvironment, GetTaskExecutionOverridesContainerOverrideEnvironmentOutput]{OutputState: value.OutputState}
}

// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed.
func (o GetTaskExecutionOverridesContainerOverrideOutput) Memory() pulumix.Output[*int] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) *int { return v.Memory })
}

// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition.
func (o GetTaskExecutionOverridesContainerOverrideOutput) MemoryReservation() pulumix.Output[*int] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) *int { return v.MemoryReservation })
}

// The name of the container that receives the override. This parameter is required if any override is specified.
func (o GetTaskExecutionOverridesContainerOverrideOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) string { return v.Name })
}

// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. See below.
func (o GetTaskExecutionOverridesContainerOverrideOutput) ResourceRequirements() pulumix.GArrayOutput[GetTaskExecutionOverridesContainerOverrideResourceRequirement, GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput] {
	value := pulumix.Apply[GetTaskExecutionOverridesContainerOverride](o, func(v GetTaskExecutionOverridesContainerOverride) []GetTaskExecutionOverridesContainerOverrideResourceRequirement {
		return v.ResourceRequirements
	})
	return pulumix.GArrayOutput[GetTaskExecutionOverridesContainerOverrideResourceRequirement, GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput]{OutputState: value.OutputState}
}

type GetTaskExecutionOverridesContainerOverrideEnvironment struct {
	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Key string `pulumi:"key"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value string `pulumi:"value"`
}

type GetTaskExecutionOverridesContainerOverrideEnvironmentArgs struct {
	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetTaskExecutionOverridesContainerOverrideEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (i GetTaskExecutionOverridesContainerOverrideEnvironmentArgs) ToGetTaskExecutionOverridesContainerOverrideEnvironmentOutput() GetTaskExecutionOverridesContainerOverrideEnvironmentOutput {
	return i.ToGetTaskExecutionOverridesContainerOverrideEnvironmentOutputWithContext(context.Background())
}

func (i GetTaskExecutionOverridesContainerOverrideEnvironmentArgs) ToGetTaskExecutionOverridesContainerOverrideEnvironmentOutputWithContext(ctx context.Context) GetTaskExecutionOverridesContainerOverrideEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionOverridesContainerOverrideEnvironmentOutput)
}

func (i *GetTaskExecutionOverridesContainerOverrideEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionOverridesContainerOverrideEnvironmentArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionOverridesContainerOverrideEnvironmentOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionOverridesContainerOverrideEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesContainerOverrideEnvironment)(nil)).Elem()
}

func (o GetTaskExecutionOverridesContainerOverrideEnvironmentOutput) ToGetTaskExecutionOverridesContainerOverrideEnvironmentOutput() GetTaskExecutionOverridesContainerOverrideEnvironmentOutput {
	return o
}

func (o GetTaskExecutionOverridesContainerOverrideEnvironmentOutput) ToGetTaskExecutionOverridesContainerOverrideEnvironmentOutputWithContext(ctx context.Context) GetTaskExecutionOverridesContainerOverrideEnvironmentOutput {
	return o
}

func (o GetTaskExecutionOverridesContainerOverrideEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionOverridesContainerOverrideEnvironment] {
	return pulumix.Output[GetTaskExecutionOverridesContainerOverrideEnvironment]{
		OutputState: o.OutputState,
	}
}

// The name of the key-value pair. For environment variables, this is the name of the environment variable.
func (o GetTaskExecutionOverridesContainerOverrideEnvironmentOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverrideEnvironment](o, func(v GetTaskExecutionOverridesContainerOverrideEnvironment) string { return v.Key })
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o GetTaskExecutionOverridesContainerOverrideEnvironmentOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverrideEnvironment](o, func(v GetTaskExecutionOverridesContainerOverrideEnvironment) string { return v.Value })
}

type GetTaskExecutionOverridesContainerOverrideResourceRequirement struct {
	// The type of resource to assign to a container. Valid values are `GPU` or `InferenceAccelerator`.
	Type string `pulumi:"type"`
	// The value for the specified resource type. If the `GPU` type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the `InferenceAccelerator` type is used, the value matches the `deviceName` for an InferenceAccelerator specified in a task definition.
	Value string `pulumi:"value"`
}

type GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs struct {
	// The type of resource to assign to a container. Valid values are `GPU` or `InferenceAccelerator`.
	Type pulumix.Input[string] `pulumi:"type"`
	// The value for the specified resource type. If the `GPU` type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the `InferenceAccelerator` type is used, the value matches the `deviceName` for an InferenceAccelerator specified in a task definition.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (i GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs) ToGetTaskExecutionOverridesContainerOverrideResourceRequirementOutput() GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput {
	return i.ToGetTaskExecutionOverridesContainerOverrideResourceRequirementOutputWithContext(context.Background())
}

func (i GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs) ToGetTaskExecutionOverridesContainerOverrideResourceRequirementOutputWithContext(ctx context.Context) GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput)
}

func (i *GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionOverridesContainerOverrideResourceRequirementArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesContainerOverrideResourceRequirement)(nil)).Elem()
}

func (o GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput) ToGetTaskExecutionOverridesContainerOverrideResourceRequirementOutput() GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput {
	return o
}

func (o GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput) ToGetTaskExecutionOverridesContainerOverrideResourceRequirementOutputWithContext(ctx context.Context) GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput {
	return o
}

func (o GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionOverridesContainerOverrideResourceRequirement] {
	return pulumix.Output[GetTaskExecutionOverridesContainerOverrideResourceRequirement]{
		OutputState: o.OutputState,
	}
}

// The type of resource to assign to a container. Valid values are `GPU` or `InferenceAccelerator`.
func (o GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverrideResourceRequirement](o, func(v GetTaskExecutionOverridesContainerOverrideResourceRequirement) string { return v.Type })
}

// The value for the specified resource type. If the `GPU` type is used, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. If the `InferenceAccelerator` type is used, the value matches the `deviceName` for an InferenceAccelerator specified in a task definition.
func (o GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionOverridesContainerOverrideResourceRequirement](o, func(v GetTaskExecutionOverridesContainerOverrideResourceRequirement) string { return v.Value })
}

type GetTaskExecutionOverridesInferenceAcceleratorOverride struct {
	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName *string `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType *string `pulumi:"deviceType"`
}

type GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs struct {
	// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
	DeviceName pulumix.Input[*string] `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType pulumix.Input[*string] `pulumi:"deviceType"`
}

func (GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (i GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs) ToGetTaskExecutionOverridesInferenceAcceleratorOverrideOutput() GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput {
	return i.ToGetTaskExecutionOverridesInferenceAcceleratorOverrideOutputWithContext(context.Background())
}

func (i GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs) ToGetTaskExecutionOverridesInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput)
}

func (i *GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionOverridesInferenceAcceleratorOverrideArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionOverridesInferenceAcceleratorOverride)(nil)).Elem()
}

func (o GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput) ToGetTaskExecutionOverridesInferenceAcceleratorOverrideOutput() GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput {
	return o
}

func (o GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput) ToGetTaskExecutionOverridesInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput {
	return o
}

func (o GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionOverridesInferenceAcceleratorOverride] {
	return pulumix.Output[GetTaskExecutionOverridesInferenceAcceleratorOverride]{
		OutputState: o.OutputState,
	}
}

// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
func (o GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput) DeviceName() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionOverridesInferenceAcceleratorOverride](o, func(v GetTaskExecutionOverridesInferenceAcceleratorOverride) *string { return v.DeviceName })
}

// The Elastic Inference accelerator type to use.
func (o GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput) DeviceType() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionOverridesInferenceAcceleratorOverride](o, func(v GetTaskExecutionOverridesInferenceAcceleratorOverride) *string { return v.DeviceType })
}

type GetTaskExecutionPlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is `distinctInstance`.
	Expression *string `pulumi:"expression"`
	// The type of constraint. Valid values are `distinctInstance` or `memberOf`. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
	Type string `pulumi:"type"`
}

type GetTaskExecutionPlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is `distinctInstance`.
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// The type of constraint. Valid values are `distinctInstance` or `memberOf`. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetTaskExecutionPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionPlacementConstraint)(nil)).Elem()
}

func (i GetTaskExecutionPlacementConstraintArgs) ToGetTaskExecutionPlacementConstraintOutput() GetTaskExecutionPlacementConstraintOutput {
	return i.ToGetTaskExecutionPlacementConstraintOutputWithContext(context.Background())
}

func (i GetTaskExecutionPlacementConstraintArgs) ToGetTaskExecutionPlacementConstraintOutputWithContext(ctx context.Context) GetTaskExecutionPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionPlacementConstraintOutput)
}

func (i *GetTaskExecutionPlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionPlacementConstraintArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionPlacementConstraintOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionPlacementConstraint)(nil)).Elem()
}

func (o GetTaskExecutionPlacementConstraintOutput) ToGetTaskExecutionPlacementConstraintOutput() GetTaskExecutionPlacementConstraintOutput {
	return o
}

func (o GetTaskExecutionPlacementConstraintOutput) ToGetTaskExecutionPlacementConstraintOutputWithContext(ctx context.Context) GetTaskExecutionPlacementConstraintOutput {
	return o
}

func (o GetTaskExecutionPlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionPlacementConstraint] {
	return pulumix.Output[GetTaskExecutionPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is `distinctInstance`.
func (o GetTaskExecutionPlacementConstraintOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionPlacementConstraint](o, func(v GetTaskExecutionPlacementConstraint) *string { return v.Expression })
}

// The type of constraint. Valid values are `distinctInstance` or `memberOf`. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
func (o GetTaskExecutionPlacementConstraintOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionPlacementConstraint](o, func(v GetTaskExecutionPlacementConstraint) string { return v.Type })
}

type GetTaskExecutionPlacementStrategy struct {
	// The field to apply the placement strategy against.
	Field *string `pulumi:"field"`
	// The type of placement strategy. Valid values are `random`, `spread`, and `binpack`.
	//
	// For more information, see the [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html) documentation.
	Type string `pulumi:"type"`
}

type GetTaskExecutionPlacementStrategyArgs struct {
	// The field to apply the placement strategy against.
	Field pulumix.Input[*string] `pulumi:"field"`
	// The type of placement strategy. Valid values are `random`, `spread`, and `binpack`.
	//
	// For more information, see the [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html) documentation.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetTaskExecutionPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionPlacementStrategy)(nil)).Elem()
}

func (i GetTaskExecutionPlacementStrategyArgs) ToGetTaskExecutionPlacementStrategyOutput() GetTaskExecutionPlacementStrategyOutput {
	return i.ToGetTaskExecutionPlacementStrategyOutputWithContext(context.Background())
}

func (i GetTaskExecutionPlacementStrategyArgs) ToGetTaskExecutionPlacementStrategyOutputWithContext(ctx context.Context) GetTaskExecutionPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTaskExecutionPlacementStrategyOutput)
}

func (i *GetTaskExecutionPlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTaskExecutionPlacementStrategyArgs] {
	return pulumix.Val(i)
}

type GetTaskExecutionPlacementStrategyOutput struct{ *pulumi.OutputState }

func (GetTaskExecutionPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTaskExecutionPlacementStrategy)(nil)).Elem()
}

func (o GetTaskExecutionPlacementStrategyOutput) ToGetTaskExecutionPlacementStrategyOutput() GetTaskExecutionPlacementStrategyOutput {
	return o
}

func (o GetTaskExecutionPlacementStrategyOutput) ToGetTaskExecutionPlacementStrategyOutputWithContext(ctx context.Context) GetTaskExecutionPlacementStrategyOutput {
	return o
}

func (o GetTaskExecutionPlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[GetTaskExecutionPlacementStrategy] {
	return pulumix.Output[GetTaskExecutionPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// The field to apply the placement strategy against.
func (o GetTaskExecutionPlacementStrategyOutput) Field() pulumix.Output[*string] {
	return pulumix.Apply[GetTaskExecutionPlacementStrategy](o, func(v GetTaskExecutionPlacementStrategy) *string { return v.Field })
}

// The type of placement strategy. Valid values are `random`, `spread`, and `binpack`.
//
// For more information, see the [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html) documentation.
func (o GetTaskExecutionPlacementStrategyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetTaskExecutionPlacementStrategy](o, func(v GetTaskExecutionPlacementStrategy) string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderManagedScalingOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProvidersDefaultCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationExecuteCommandConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationExecuteCommandConfigurationLogConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsOutput{})
	pulumi.RegisterOutputType(ClusterSettingOutput{})
	pulumi.RegisterOutputType(ServiceAlarmsOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceOrderedPlacementStrategyOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationLogConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationLogConfigurationSecretOptionOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationServiceOutput{})
	pulumi.RegisterOutputType(ServiceServiceConnectConfigurationServiceClientAliasOutput{})
	pulumi.RegisterOutputType(ServiceServiceRegistriesOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeDockerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeEfsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskSetCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(TaskSetScaleOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistriesOutput{})
	pulumi.RegisterOutputType(GetClusterServiceConnectDefaultOutput{})
	pulumi.RegisterOutputType(GetClusterSettingOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionOverridesOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionOverridesContainerOverrideOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionOverridesContainerOverrideEnvironmentOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionOverridesContainerOverrideResourceRequirementOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionOverridesInferenceAcceleratorOverrideOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionPlacementConstraintOutput{})
	pulumi.RegisterOutputType(GetTaskExecutionPlacementStrategyOutput{})
}
