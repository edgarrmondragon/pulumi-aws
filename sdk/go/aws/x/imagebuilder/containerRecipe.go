// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Image Builder Container Recipe.
type ContainerRecipe struct {
	pulumi.CustomResourceState

	// (Required) Amazon Resource Name (ARN) of the container recipe.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	Components pulumix.GArrayOutput[ContainerRecipeComponent, ContainerRecipeComponentOutput] `pulumi:"components"`
	// The type of the container to create. Valid values: `DOCKER`.
	ContainerType pulumix.Output[string] `pulumi:"containerType"`
	// Date the container recipe was created.
	DateCreated pulumix.Output[string] `pulumi:"dateCreated"`
	// The description of the container recipe.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The Dockerfile template used to build the image as an inline data blob.
	DockerfileTemplateData pulumix.Output[string] `pulumi:"dockerfileTemplateData"`
	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	DockerfileTemplateUri pulumix.Output[*string] `pulumi:"dockerfileTemplateUri"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted pulumix.Output[bool] `pulumi:"encrypted"`
	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	InstanceConfiguration pulumix.GPtrOutput[ContainerRecipeInstanceConfiguration, ContainerRecipeInstanceConfigurationOutput] `pulumi:"instanceConfiguration"`
	// The KMS key used to encrypt the container image.
	KmsKeyId pulumix.Output[*string] `pulumi:"kmsKeyId"`
	// The name of the container recipe.
	Name pulumix.Output[string] `pulumi:"name"`
	// Owner of the container recipe.
	Owner pulumix.Output[string] `pulumi:"owner"`
	// The base image for the container recipe.
	ParentImage pulumix.Output[string] `pulumi:"parentImage"`
	// Platform of the container recipe.
	Platform pulumix.Output[string] `pulumi:"platform"`
	// Specifies the operating system platform when you use a custom base image.
	PlatformOverride pulumix.Output[*string] `pulumi:"platformOverride"`
	// Key-value map of resource tags for the container recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The destination repository for the container image. Detailed below.
	TargetRepository pulumix.GPtrOutput[ContainerRecipeTargetRepository, ContainerRecipeTargetRepositoryOutput] `pulumi:"targetRepository"`
	// Version of the container recipe.
	//
	// The following attributes are optional:
	Version pulumix.Output[string] `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumix.Output[*string] `pulumi:"workingDirectory"`
}

// NewContainerRecipe registers a new resource with the given unique name, arguments, and options.
func NewContainerRecipe(ctx *pulumi.Context,
	name string, args *ContainerRecipeArgs, opts ...pulumi.ResourceOption) (*ContainerRecipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Components == nil {
		return nil, errors.New("invalid value for required argument 'Components'")
	}
	if args.ContainerType == nil {
		return nil, errors.New("invalid value for required argument 'ContainerType'")
	}
	if args.ParentImage == nil {
		return nil, errors.New("invalid value for required argument 'ParentImage'")
	}
	if args.TargetRepository == nil {
		return nil, errors.New("invalid value for required argument 'TargetRepository'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerRecipe
	err := ctx.RegisterResource("aws:imagebuilder/containerRecipe:ContainerRecipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRecipe gets an existing ContainerRecipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRecipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRecipeState, opts ...pulumi.ResourceOption) (*ContainerRecipe, error) {
	var resource ContainerRecipe
	err := ctx.ReadResource("aws:imagebuilder/containerRecipe:ContainerRecipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRecipe resources.
type containerRecipeState struct {
	// (Required) Amazon Resource Name (ARN) of the container recipe.
	Arn *string `pulumi:"arn"`
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	Components []ContainerRecipeComponent `pulumi:"components"`
	// The type of the container to create. Valid values: `DOCKER`.
	ContainerType *string `pulumi:"containerType"`
	// Date the container recipe was created.
	DateCreated *string `pulumi:"dateCreated"`
	// The description of the container recipe.
	Description *string `pulumi:"description"`
	// The Dockerfile template used to build the image as an inline data blob.
	DockerfileTemplateData *string `pulumi:"dockerfileTemplateData"`
	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	DockerfileTemplateUri *string `pulumi:"dockerfileTemplateUri"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted *bool `pulumi:"encrypted"`
	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	InstanceConfiguration *ContainerRecipeInstanceConfiguration `pulumi:"instanceConfiguration"`
	// The KMS key used to encrypt the container image.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of the container recipe.
	Name *string `pulumi:"name"`
	// Owner of the container recipe.
	Owner *string `pulumi:"owner"`
	// The base image for the container recipe.
	ParentImage *string `pulumi:"parentImage"`
	// Platform of the container recipe.
	Platform *string `pulumi:"platform"`
	// Specifies the operating system platform when you use a custom base image.
	PlatformOverride *string `pulumi:"platformOverride"`
	// Key-value map of resource tags for the container recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The destination repository for the container image. Detailed below.
	TargetRepository *ContainerRecipeTargetRepository `pulumi:"targetRepository"`
	// Version of the container recipe.
	//
	// The following attributes are optional:
	Version *string `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

type ContainerRecipeState struct {
	// (Required) Amazon Resource Name (ARN) of the container recipe.
	Arn pulumix.Input[*string]
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	Components pulumix.Input[[]*ContainerRecipeComponentArgs]
	// The type of the container to create. Valid values: `DOCKER`.
	ContainerType pulumix.Input[*string]
	// Date the container recipe was created.
	DateCreated pulumix.Input[*string]
	// The description of the container recipe.
	Description pulumix.Input[*string]
	// The Dockerfile template used to build the image as an inline data blob.
	DockerfileTemplateData pulumix.Input[*string]
	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	DockerfileTemplateUri pulumix.Input[*string]
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted pulumix.Input[*bool]
	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	InstanceConfiguration pulumix.Input[*ContainerRecipeInstanceConfigurationArgs]
	// The KMS key used to encrypt the container image.
	KmsKeyId pulumix.Input[*string]
	// The name of the container recipe.
	Name pulumix.Input[*string]
	// Owner of the container recipe.
	Owner pulumix.Input[*string]
	// The base image for the container recipe.
	ParentImage pulumix.Input[*string]
	// Platform of the container recipe.
	Platform pulumix.Input[*string]
	// Specifies the operating system platform when you use a custom base image.
	PlatformOverride pulumix.Input[*string]
	// Key-value map of resource tags for the container recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The destination repository for the container image. Detailed below.
	TargetRepository pulumix.Input[*ContainerRecipeTargetRepositoryArgs]
	// Version of the container recipe.
	//
	// The following attributes are optional:
	Version pulumix.Input[*string]
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumix.Input[*string]
}

func (ContainerRecipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRecipeState)(nil)).Elem()
}

type containerRecipeArgs struct {
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	Components []ContainerRecipeComponent `pulumi:"components"`
	// The type of the container to create. Valid values: `DOCKER`.
	ContainerType string `pulumi:"containerType"`
	// The description of the container recipe.
	Description *string `pulumi:"description"`
	// The Dockerfile template used to build the image as an inline data blob.
	DockerfileTemplateData *string `pulumi:"dockerfileTemplateData"`
	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	DockerfileTemplateUri *string `pulumi:"dockerfileTemplateUri"`
	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	InstanceConfiguration *ContainerRecipeInstanceConfiguration `pulumi:"instanceConfiguration"`
	// The KMS key used to encrypt the container image.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of the container recipe.
	Name *string `pulumi:"name"`
	// The base image for the container recipe.
	ParentImage string `pulumi:"parentImage"`
	// Specifies the operating system platform when you use a custom base image.
	PlatformOverride *string `pulumi:"platformOverride"`
	// Key-value map of resource tags for the container recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The destination repository for the container image. Detailed below.
	TargetRepository ContainerRecipeTargetRepository `pulumi:"targetRepository"`
	// Version of the container recipe.
	//
	// The following attributes are optional:
	Version string `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a ContainerRecipe resource.
type ContainerRecipeArgs struct {
	// Ordered configuration block(s) with components for the container recipe. Detailed below.
	Components pulumix.Input[[]*ContainerRecipeComponentArgs]
	// The type of the container to create. Valid values: `DOCKER`.
	ContainerType pulumix.Input[string]
	// The description of the container recipe.
	Description pulumix.Input[*string]
	// The Dockerfile template used to build the image as an inline data blob.
	DockerfileTemplateData pulumix.Input[*string]
	// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
	DockerfileTemplateUri pulumix.Input[*string]
	// Configuration block used to configure an instance for building and testing container images. Detailed below.
	InstanceConfiguration pulumix.Input[*ContainerRecipeInstanceConfigurationArgs]
	// The KMS key used to encrypt the container image.
	KmsKeyId pulumix.Input[*string]
	// The name of the container recipe.
	Name pulumix.Input[*string]
	// The base image for the container recipe.
	ParentImage pulumix.Input[string]
	// Specifies the operating system platform when you use a custom base image.
	PlatformOverride pulumix.Input[*string]
	// Key-value map of resource tags for the container recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The destination repository for the container image. Detailed below.
	TargetRepository pulumix.Input[*ContainerRecipeTargetRepositoryArgs]
	// Version of the container recipe.
	//
	// The following attributes are optional:
	Version pulumix.Input[string]
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumix.Input[*string]
}

func (ContainerRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRecipeArgs)(nil)).Elem()
}

type ContainerRecipeOutput struct{ *pulumi.OutputState }

func (ContainerRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipe)(nil)).Elem()
}

func (o ContainerRecipeOutput) ToContainerRecipeOutput() ContainerRecipeOutput {
	return o
}

func (o ContainerRecipeOutput) ToContainerRecipeOutputWithContext(ctx context.Context) ContainerRecipeOutput {
	return o
}

func (o ContainerRecipeOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipe] {
	return pulumix.Output[ContainerRecipe]{
		OutputState: o.OutputState,
	}
}

// (Required) Amazon Resource Name (ARN) of the container recipe.
func (o ContainerRecipeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Ordered configuration block(s) with components for the container recipe. Detailed below.
func (o ContainerRecipeOutput) Components() pulumix.GArrayOutput[ContainerRecipeComponent, ContainerRecipeComponentOutput] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.GArrayOutput[ContainerRecipeComponent, ContainerRecipeComponentOutput] {
		return v.Components
	})
	unwrapped := pulumix.Flatten[[]ContainerRecipeComponent, pulumix.GArrayOutput[ContainerRecipeComponent, ContainerRecipeComponentOutput]](value)
	return pulumix.GArrayOutput[ContainerRecipeComponent, ContainerRecipeComponentOutput]{OutputState: unwrapped.OutputState}
}

// The type of the container to create. Valid values: `DOCKER`.
func (o ContainerRecipeOutput) ContainerType() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.ContainerType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date the container recipe was created.
func (o ContainerRecipeOutput) DateCreated() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.DateCreated })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the container recipe.
func (o ContainerRecipeOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Dockerfile template used to build the image as an inline data blob.
func (o ContainerRecipeOutput) DockerfileTemplateData() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.DockerfileTemplateData })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
func (o ContainerRecipeOutput) DockerfileTemplateUri() pulumix.Output[*string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[*string] { return v.DockerfileTemplateUri })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
func (o ContainerRecipeOutput) Encrypted() pulumix.Output[bool] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[bool] { return v.Encrypted })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Configuration block used to configure an instance for building and testing container images. Detailed below.
func (o ContainerRecipeOutput) InstanceConfiguration() pulumix.GPtrOutput[ContainerRecipeInstanceConfiguration, ContainerRecipeInstanceConfigurationOutput] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.GPtrOutput[ContainerRecipeInstanceConfiguration, ContainerRecipeInstanceConfigurationOutput] {
		return v.InstanceConfiguration
	})
	unwrapped := pulumix.Flatten[*ContainerRecipeInstanceConfiguration, pulumix.GPtrOutput[ContainerRecipeInstanceConfiguration, ContainerRecipeInstanceConfigurationOutput]](value)
	return pulumix.GPtrOutput[ContainerRecipeInstanceConfiguration, ContainerRecipeInstanceConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The KMS key used to encrypt the container image.
func (o ContainerRecipeOutput) KmsKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[*string] { return v.KmsKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the container recipe.
func (o ContainerRecipeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Owner of the container recipe.
func (o ContainerRecipeOutput) Owner() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.Owner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The base image for the container recipe.
func (o ContainerRecipeOutput) ParentImage() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.ParentImage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Platform of the container recipe.
func (o ContainerRecipeOutput) Platform() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.Platform })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the operating system platform when you use a custom base image.
func (o ContainerRecipeOutput) PlatformOverride() pulumix.Output[*string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[*string] { return v.PlatformOverride })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags for the container recipe. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ContainerRecipeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ContainerRecipeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The destination repository for the container image. Detailed below.
func (o ContainerRecipeOutput) TargetRepository() pulumix.GPtrOutput[ContainerRecipeTargetRepository, ContainerRecipeTargetRepositoryOutput] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.GPtrOutput[ContainerRecipeTargetRepository, ContainerRecipeTargetRepositoryOutput] {
		return v.TargetRepository
	})
	unwrapped := pulumix.Flatten[*ContainerRecipeTargetRepository, pulumix.GPtrOutput[ContainerRecipeTargetRepository, ContainerRecipeTargetRepositoryOutput]](value)
	return pulumix.GPtrOutput[ContainerRecipeTargetRepository, ContainerRecipeTargetRepositoryOutput]{OutputState: unwrapped.OutputState}
}

// Version of the container recipe.
//
// The following attributes are optional:
func (o ContainerRecipeOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The working directory to be used during build and test workflows.
func (o ContainerRecipeOutput) WorkingDirectory() pulumix.Output[*string] {
	value := pulumix.Apply[ContainerRecipe](o, func(v ContainerRecipe) pulumix.Output[*string] { return v.WorkingDirectory })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ContainerRecipeOutput{})
}
