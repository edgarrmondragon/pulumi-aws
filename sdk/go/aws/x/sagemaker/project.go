// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Project resource.
//
//	> Note: If you are trying to use SageMaker projects with SageMaker studio you will need to add a tag with the key `sagemaker:studio-visibility` with value `true`. For more on requirements to use projects and permission needed see [AWS Docs](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-projects-templates-custom.html).
type Project struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Project.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description for the project.
	ProjectDescription pulumix.Output[*string] `pulumi:"projectDescription"`
	// The ID of the project.
	ProjectId pulumix.Output[string] `pulumi:"projectId"`
	// The name of the Project.
	ProjectName pulumix.Output[string] `pulumi:"projectName"`
	// The product ID and provisioning artifact ID to provision a service catalog. See Service Catalog Provisioning Details below.
	ServiceCatalogProvisioningDetails pulumix.GPtrOutput[ProjectServiceCatalogProvisioningDetails, ProjectServiceCatalogProvisioningDetailsOutput] `pulumi:"serviceCatalogProvisioningDetails"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.ServiceCatalogProvisioningDetails == nil {
		return nil, errors.New("invalid value for required argument 'ServiceCatalogProvisioningDetails'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("aws:sagemaker/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws:sagemaker/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Project.
	Arn *string `pulumi:"arn"`
	// A description for the project.
	ProjectDescription *string `pulumi:"projectDescription"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The name of the Project.
	ProjectName *string `pulumi:"projectName"`
	// The product ID and provisioning artifact ID to provision a service catalog. See Service Catalog Provisioning Details below.
	ServiceCatalogProvisioningDetails *ProjectServiceCatalogProvisioningDetails `pulumi:"serviceCatalogProvisioningDetails"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ProjectState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Project.
	Arn pulumix.Input[*string]
	// A description for the project.
	ProjectDescription pulumix.Input[*string]
	// The ID of the project.
	ProjectId pulumix.Input[*string]
	// The name of the Project.
	ProjectName pulumix.Input[*string]
	// The product ID and provisioning artifact ID to provision a service catalog. See Service Catalog Provisioning Details below.
	ServiceCatalogProvisioningDetails pulumix.Input[*ProjectServiceCatalogProvisioningDetailsArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// A description for the project.
	ProjectDescription *string `pulumi:"projectDescription"`
	// The name of the Project.
	ProjectName string `pulumi:"projectName"`
	// The product ID and provisioning artifact ID to provision a service catalog. See Service Catalog Provisioning Details below.
	ServiceCatalogProvisioningDetails ProjectServiceCatalogProvisioningDetails `pulumi:"serviceCatalogProvisioningDetails"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// A description for the project.
	ProjectDescription pulumix.Input[*string]
	// The name of the Project.
	ProjectName pulumix.Input[string]
	// The product ID and provisioning artifact ID to provision a service catalog. See Service Catalog Provisioning Details below.
	ServiceCatalogProvisioningDetails pulumix.Input[*ProjectServiceCatalogProvisioningDetailsArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) ToOutput(ctx context.Context) pulumix.Output[Project] {
	return pulumix.Output[Project]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this Project.
func (o ProjectOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description for the project.
func (o ProjectOutput) ProjectDescription() pulumix.Output[*string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[*string] { return v.ProjectDescription })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the project.
func (o ProjectOutput) ProjectId() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.ProjectId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Project.
func (o ProjectOutput) ProjectName() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.ProjectName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The product ID and provisioning artifact ID to provision a service catalog. See Service Catalog Provisioning Details below.
func (o ProjectOutput) ServiceCatalogProvisioningDetails() pulumix.GPtrOutput[ProjectServiceCatalogProvisioningDetails, ProjectServiceCatalogProvisioningDetailsOutput] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.GPtrOutput[ProjectServiceCatalogProvisioningDetails, ProjectServiceCatalogProvisioningDetailsOutput] {
		return v.ServiceCatalogProvisioningDetails
	})
	unwrapped := pulumix.Flatten[*ProjectServiceCatalogProvisioningDetails, pulumix.GPtrOutput[ProjectServiceCatalogProvisioningDetails, ProjectServiceCatalogProvisioningDetailsOutput]](value)
	return pulumix.GPtrOutput[ProjectServiceCatalogProvisioningDetails, ProjectServiceCatalogProvisioningDetailsOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ProjectOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ProjectOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ProjectOutput{})
}
