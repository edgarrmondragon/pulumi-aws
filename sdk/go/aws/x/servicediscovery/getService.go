// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves information about a Service Discovery Service.
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("aws:servicediscovery/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// Name of the service.
	Name string `pulumi:"name"`
	// ID of the namespace that the service belongs to.
	NamespaceId string `pulumi:"namespaceId"`
	// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: this attribute has been deprecated
	TagsAll map[string]string `pulumi:"tagsAll"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// ARN of the service.
	Arn string `pulumi:"arn"`
	// Description of the service.
	Description string `pulumi:"description"`
	// Complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfigs []GetServiceDnsConfig `pulumi:"dnsConfigs"`
	// Complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfigs []GetServiceHealthCheckConfig `pulumi:"healthCheckConfigs"`
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfigs []GetServiceHealthCheckCustomConfig `pulumi:"healthCheckCustomConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// ID of the namespace to use for DNS configuration.
	NamespaceId string `pulumi:"namespaceId"`
	// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: this attribute has been deprecated
	TagsAll map[string]string `pulumi:"tagsAll"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServiceArgs](args.ToOutput(), func(plainArgs *LookupServiceArgs) (*LookupServiceResult, error) {
		return LookupService(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServiceResultOutput, *LookupServiceResult](outputResult)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// Name of the service.
	Name pulumix.Input[string] `pulumi:"name"`
	// ID of the namespace that the service belongs to.
	NamespaceId pulumix.Input[string] `pulumi:"namespaceId"`
	// Map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	//
	// Deprecated: this attribute has been deprecated
	TagsAll pulumix.Input[map[string]string] `pulumi:"tagsAll"`
}

func (args LookupServiceOutputArgs) ToOutput() pulumix.Output[*LookupServiceArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.NamespaceId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TagsAll.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServiceArgs {
		return &LookupServiceArgs{
			Name:        resolvedArgs[0].(string),
			NamespaceId: resolvedArgs[1].(string),
			Tags:        resolvedArgs[2].(map[string]string),
			TagsAll:     resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServiceResult] {
	return pulumix.Output[*LookupServiceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServiceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Arn })
}

func (o LookupServiceResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Description })
}

func (o LookupServiceResultOutput) DnsConfigs() pulumix.GArrayOutput[GetServiceDnsConfig, GetServiceDnsConfigOutput] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) []GetServiceDnsConfig { return v.DnsConfigs })
	return pulumix.GArrayOutput[GetServiceDnsConfig, GetServiceDnsConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceResultOutput) HealthCheckConfigs() pulumix.GArrayOutput[GetServiceHealthCheckConfig, GetServiceHealthCheckConfigOutput] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) []GetServiceHealthCheckConfig { return v.HealthCheckConfigs })
	return pulumix.GArrayOutput[GetServiceHealthCheckConfig, GetServiceHealthCheckConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceResultOutput) HealthCheckCustomConfigs() pulumix.GArrayOutput[GetServiceHealthCheckCustomConfig, GetServiceHealthCheckCustomConfigOutput] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) []GetServiceHealthCheckCustomConfig { return v.HealthCheckCustomConfigs })
	return pulumix.GArrayOutput[GetServiceHealthCheckCustomConfig, GetServiceHealthCheckCustomConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Id })
}

func (o LookupServiceResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Name })
}

func (o LookupServiceResultOutput) NamespaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.NamespaceId })
}

func (o LookupServiceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceResultOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) map[string]string { return v.TagsAll })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
