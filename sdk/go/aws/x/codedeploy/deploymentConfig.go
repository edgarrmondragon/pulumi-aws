// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeDeploy deployment config for an application
type DeploymentConfig struct {
	pulumi.CustomResourceState

	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumix.Output[*string] `pulumi:"computePlatform"`
	// The AWS Assigned deployment config id
	DeploymentConfigId pulumix.Output[string] `pulumi:"deploymentConfigId"`
	// The name of the deployment config.
	DeploymentConfigName pulumix.Output[string] `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts pulumix.GPtrOutput[DeploymentConfigMinimumHealthyHosts, DeploymentConfigMinimumHealthyHostsOutput] `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfig, DeploymentConfigTrafficRoutingConfigOutput] `pulumi:"trafficRoutingConfig"`
}

// NewDeploymentConfig registers a new resource with the given unique name, arguments, and options.
func NewDeploymentConfig(ctx *pulumi.Context,
	name string, args *DeploymentConfigArgs, opts ...pulumi.ResourceOption) (*DeploymentConfig, error) {
	if args == nil {
		args = &DeploymentConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeploymentConfig
	err := ctx.RegisterResource("aws:codedeploy/deploymentConfig:DeploymentConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentConfig gets an existing DeploymentConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentConfigState, opts ...pulumi.ResourceOption) (*DeploymentConfig, error) {
	var resource DeploymentConfig
	err := ctx.ReadResource("aws:codedeploy/deploymentConfig:DeploymentConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentConfig resources.
type deploymentConfigState struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform *string `pulumi:"computePlatform"`
	// The AWS Assigned deployment config id
	DeploymentConfigId *string `pulumi:"deploymentConfigId"`
	// The name of the deployment config.
	DeploymentConfigName *string `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts *DeploymentConfigMinimumHealthyHosts `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig *DeploymentConfigTrafficRoutingConfig `pulumi:"trafficRoutingConfig"`
}

type DeploymentConfigState struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumix.Input[*string]
	// The AWS Assigned deployment config id
	DeploymentConfigId pulumix.Input[*string]
	// The name of the deployment config.
	DeploymentConfigName pulumix.Input[*string]
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts pulumix.Input[*DeploymentConfigMinimumHealthyHostsArgs]
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig pulumix.Input[*DeploymentConfigTrafficRoutingConfigArgs]
}

func (DeploymentConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentConfigState)(nil)).Elem()
}

type deploymentConfigArgs struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform *string `pulumi:"computePlatform"`
	// The name of the deployment config.
	DeploymentConfigName *string `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts *DeploymentConfigMinimumHealthyHosts `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig *DeploymentConfigTrafficRoutingConfig `pulumi:"trafficRoutingConfig"`
}

// The set of arguments for constructing a DeploymentConfig resource.
type DeploymentConfigArgs struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumix.Input[*string]
	// The name of the deployment config.
	DeploymentConfigName pulumix.Input[*string]
	// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts pulumix.Input[*DeploymentConfigMinimumHealthyHostsArgs]
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig pulumix.Input[*DeploymentConfigTrafficRoutingConfigArgs]
}

func (DeploymentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentConfigArgs)(nil)).Elem()
}

type DeploymentConfigOutput struct{ *pulumi.OutputState }

func (DeploymentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfig)(nil)).Elem()
}

func (o DeploymentConfigOutput) ToDeploymentConfigOutput() DeploymentConfigOutput {
	return o
}

func (o DeploymentConfigOutput) ToDeploymentConfigOutputWithContext(ctx context.Context) DeploymentConfigOutput {
	return o
}

func (o DeploymentConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentConfig] {
	return pulumix.Output[DeploymentConfig]{
		OutputState: o.OutputState,
	}
}

// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
func (o DeploymentConfigOutput) ComputePlatform() pulumix.Output[*string] {
	value := pulumix.Apply[DeploymentConfig](o, func(v DeploymentConfig) pulumix.Output[*string] { return v.ComputePlatform })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The AWS Assigned deployment config id
func (o DeploymentConfigOutput) DeploymentConfigId() pulumix.Output[string] {
	value := pulumix.Apply[DeploymentConfig](o, func(v DeploymentConfig) pulumix.Output[string] { return v.DeploymentConfigId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the deployment config.
func (o DeploymentConfigOutput) DeploymentConfigName() pulumix.Output[string] {
	value := pulumix.Apply[DeploymentConfig](o, func(v DeploymentConfig) pulumix.Output[string] { return v.DeploymentConfigName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A minimumHealthyHosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
func (o DeploymentConfigOutput) MinimumHealthyHosts() pulumix.GPtrOutput[DeploymentConfigMinimumHealthyHosts, DeploymentConfigMinimumHealthyHostsOutput] {
	value := pulumix.Apply[DeploymentConfig](o, func(v DeploymentConfig) pulumix.GPtrOutput[DeploymentConfigMinimumHealthyHosts, DeploymentConfigMinimumHealthyHostsOutput] {
		return v.MinimumHealthyHosts
	})
	unwrapped := pulumix.Flatten[*DeploymentConfigMinimumHealthyHosts, pulumix.GPtrOutput[DeploymentConfigMinimumHealthyHosts, DeploymentConfigMinimumHealthyHostsOutput]](value)
	return pulumix.GPtrOutput[DeploymentConfigMinimumHealthyHosts, DeploymentConfigMinimumHealthyHostsOutput]{OutputState: unwrapped.OutputState}
}

// A trafficRoutingConfig block. Traffic Routing Config is documented below.
func (o DeploymentConfigOutput) TrafficRoutingConfig() pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfig, DeploymentConfigTrafficRoutingConfigOutput] {
	value := pulumix.Apply[DeploymentConfig](o, func(v DeploymentConfig) pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfig, DeploymentConfigTrafficRoutingConfigOutput] {
		return v.TrafficRoutingConfig
	})
	unwrapped := pulumix.Flatten[*DeploymentConfigTrafficRoutingConfig, pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfig, DeploymentConfigTrafficRoutingConfigOutput]](value)
	return pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfig, DeploymentConfigTrafficRoutingConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DeploymentConfigOutput{})
}
