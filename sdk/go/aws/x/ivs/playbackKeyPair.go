// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IVS (Interactive Video) Playback Key Pair.
type PlaybackKeyPair struct {
	pulumi.CustomResourceState

	// ARN of the Playback Key Pair.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Key-pair identifier.
	Fingerprint pulumix.Output[string] `pulumi:"fingerprint"`
	// Playback Key Pair name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Public portion of a customer-generated key pair. Must be an ECDSA public key in PEM format.
	//
	// The following arguments are optional:
	PublicKey pulumix.Output[string] `pulumi:"publicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewPlaybackKeyPair registers a new resource with the given unique name, arguments, and options.
func NewPlaybackKeyPair(ctx *pulumi.Context,
	name string, args *PlaybackKeyPairArgs, opts ...pulumi.ResourceOption) (*PlaybackKeyPair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlaybackKeyPair
	err := ctx.RegisterResource("aws:ivs/playbackKeyPair:PlaybackKeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaybackKeyPair gets an existing PlaybackKeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaybackKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaybackKeyPairState, opts ...pulumi.ResourceOption) (*PlaybackKeyPair, error) {
	var resource PlaybackKeyPair
	err := ctx.ReadResource("aws:ivs/playbackKeyPair:PlaybackKeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaybackKeyPair resources.
type playbackKeyPairState struct {
	// ARN of the Playback Key Pair.
	Arn *string `pulumi:"arn"`
	// Key-pair identifier.
	Fingerprint *string `pulumi:"fingerprint"`
	// Playback Key Pair name.
	Name *string `pulumi:"name"`
	// Public portion of a customer-generated key pair. Must be an ECDSA public key in PEM format.
	//
	// The following arguments are optional:
	PublicKey *string `pulumi:"publicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type PlaybackKeyPairState struct {
	// ARN of the Playback Key Pair.
	Arn pulumix.Input[*string]
	// Key-pair identifier.
	Fingerprint pulumix.Input[*string]
	// Playback Key Pair name.
	Name pulumix.Input[*string]
	// Public portion of a customer-generated key pair. Must be an ECDSA public key in PEM format.
	//
	// The following arguments are optional:
	PublicKey pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (PlaybackKeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackKeyPairState)(nil)).Elem()
}

type playbackKeyPairArgs struct {
	// Playback Key Pair name.
	Name *string `pulumi:"name"`
	// Public portion of a customer-generated key pair. Must be an ECDSA public key in PEM format.
	//
	// The following arguments are optional:
	PublicKey string `pulumi:"publicKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PlaybackKeyPair resource.
type PlaybackKeyPairArgs struct {
	// Playback Key Pair name.
	Name pulumix.Input[*string]
	// Public portion of a customer-generated key pair. Must be an ECDSA public key in PEM format.
	//
	// The following arguments are optional:
	PublicKey pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PlaybackKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackKeyPairArgs)(nil)).Elem()
}

type PlaybackKeyPairOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPair)(nil)).Elem()
}

func (o PlaybackKeyPairOutput) ToPlaybackKeyPairOutput() PlaybackKeyPairOutput {
	return o
}

func (o PlaybackKeyPairOutput) ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput {
	return o
}

func (o PlaybackKeyPairOutput) ToOutput(ctx context.Context) pulumix.Output[PlaybackKeyPair] {
	return pulumix.Output[PlaybackKeyPair]{
		OutputState: o.OutputState,
	}
}

// ARN of the Playback Key Pair.
func (o PlaybackKeyPairOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[PlaybackKeyPair](o, func(v PlaybackKeyPair) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-pair identifier.
func (o PlaybackKeyPairOutput) Fingerprint() pulumix.Output[string] {
	value := pulumix.Apply[PlaybackKeyPair](o, func(v PlaybackKeyPair) pulumix.Output[string] { return v.Fingerprint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Playback Key Pair name.
func (o PlaybackKeyPairOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[PlaybackKeyPair](o, func(v PlaybackKeyPair) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Public portion of a customer-generated key pair. Must be an ECDSA public key in PEM format.
//
// The following arguments are optional:
func (o PlaybackKeyPairOutput) PublicKey() pulumix.Output[string] {
	value := pulumix.Apply[PlaybackKeyPair](o, func(v PlaybackKeyPair) pulumix.Output[string] { return v.PublicKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PlaybackKeyPairOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlaybackKeyPair](o, func(v PlaybackKeyPair) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PlaybackKeyPairOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlaybackKeyPair](o, func(v PlaybackKeyPair) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PlaybackKeyPairOutput{})
}
