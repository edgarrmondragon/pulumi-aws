// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53domains

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RegisteredDomainAdminContact struct {
	// First line of the contact's address.
	AddressLine1 *string `pulumi:"addressLine1"`
	// Second line of contact's address, if any.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The city of the contact's address.
	City *string `pulumi:"city"`
	// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
	ContactType *string `pulumi:"contactType"`
	// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
	CountryCode *string `pulumi:"countryCode"`
	// Email address of the contact.
	Email *string `pulumi:"email"`
	// A key-value map of parameters required by certain top-level domains.
	ExtraParams map[string]string `pulumi:"extraParams"`
	// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	Fax *string `pulumi:"fax"`
	// First name of contact.
	FirstName *string `pulumi:"firstName"`
	// Last name of contact.
	LastName *string `pulumi:"lastName"`
	// Name of the organization for contact types other than `PERSON`.
	OrganizationName *string `pulumi:"organizationName"`
	// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	PhoneNumber *string `pulumi:"phoneNumber"`
	// The state or province of the contact's city.
	State *string `pulumi:"state"`
	// The zip or postal code of the contact's address.
	ZipCode *string `pulumi:"zipCode"`
}

type RegisteredDomainAdminContactArgs struct {
	// First line of the contact's address.
	AddressLine1 pulumix.Input[*string] `pulumi:"addressLine1"`
	// Second line of contact's address, if any.
	AddressLine2 pulumix.Input[*string] `pulumi:"addressLine2"`
	// The city of the contact's address.
	City pulumix.Input[*string] `pulumi:"city"`
	// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
	ContactType pulumix.Input[*string] `pulumi:"contactType"`
	// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
	CountryCode pulumix.Input[*string] `pulumi:"countryCode"`
	// Email address of the contact.
	Email pulumix.Input[*string] `pulumi:"email"`
	// A key-value map of parameters required by certain top-level domains.
	ExtraParams pulumix.Input[map[string]string] `pulumi:"extraParams"`
	// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	Fax pulumix.Input[*string] `pulumi:"fax"`
	// First name of contact.
	FirstName pulumix.Input[*string] `pulumi:"firstName"`
	// Last name of contact.
	LastName pulumix.Input[*string] `pulumi:"lastName"`
	// Name of the organization for contact types other than `PERSON`.
	OrganizationName pulumix.Input[*string] `pulumi:"organizationName"`
	// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	PhoneNumber pulumix.Input[*string] `pulumi:"phoneNumber"`
	// The state or province of the contact's city.
	State pulumix.Input[*string] `pulumi:"state"`
	// The zip or postal code of the contact's address.
	ZipCode pulumix.Input[*string] `pulumi:"zipCode"`
}

func (RegisteredDomainAdminContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainAdminContact)(nil)).Elem()
}

func (i RegisteredDomainAdminContactArgs) ToRegisteredDomainAdminContactOutput() RegisteredDomainAdminContactOutput {
	return i.ToRegisteredDomainAdminContactOutputWithContext(context.Background())
}

func (i RegisteredDomainAdminContactArgs) ToRegisteredDomainAdminContactOutputWithContext(ctx context.Context) RegisteredDomainAdminContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainAdminContactOutput)
}

func (i *RegisteredDomainAdminContactArgs) ToOutput(ctx context.Context) pulumix.Output[*RegisteredDomainAdminContactArgs] {
	return pulumix.Val(i)
}

type RegisteredDomainAdminContactOutput struct{ *pulumi.OutputState }

func (RegisteredDomainAdminContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainAdminContact)(nil)).Elem()
}

func (o RegisteredDomainAdminContactOutput) ToRegisteredDomainAdminContactOutput() RegisteredDomainAdminContactOutput {
	return o
}

func (o RegisteredDomainAdminContactOutput) ToRegisteredDomainAdminContactOutputWithContext(ctx context.Context) RegisteredDomainAdminContactOutput {
	return o
}

func (o RegisteredDomainAdminContactOutput) ToOutput(ctx context.Context) pulumix.Output[RegisteredDomainAdminContact] {
	return pulumix.Output[RegisteredDomainAdminContact]{
		OutputState: o.OutputState,
	}
}

// First line of the contact's address.
func (o RegisteredDomainAdminContactOutput) AddressLine1() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.AddressLine1 })
}

// Second line of contact's address, if any.
func (o RegisteredDomainAdminContactOutput) AddressLine2() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.AddressLine2 })
}

// The city of the contact's address.
func (o RegisteredDomainAdminContactOutput) City() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.City })
}

// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
func (o RegisteredDomainAdminContactOutput) ContactType() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.ContactType })
}

// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
func (o RegisteredDomainAdminContactOutput) CountryCode() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.CountryCode })
}

// Email address of the contact.
func (o RegisteredDomainAdminContactOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.Email })
}

// A key-value map of parameters required by certain top-level domains.
func (o RegisteredDomainAdminContactOutput) ExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) map[string]string { return v.ExtraParams })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
func (o RegisteredDomainAdminContactOutput) Fax() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.Fax })
}

// First name of contact.
func (o RegisteredDomainAdminContactOutput) FirstName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.FirstName })
}

// Last name of contact.
func (o RegisteredDomainAdminContactOutput) LastName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.LastName })
}

// Name of the organization for contact types other than `PERSON`.
func (o RegisteredDomainAdminContactOutput) OrganizationName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.OrganizationName })
}

// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
func (o RegisteredDomainAdminContactOutput) PhoneNumber() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.PhoneNumber })
}

// The state or province of the contact's city.
func (o RegisteredDomainAdminContactOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.State })
}

// The zip or postal code of the contact's address.
func (o RegisteredDomainAdminContactOutput) ZipCode() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainAdminContact](o, func(v RegisteredDomainAdminContact) *string { return v.ZipCode })
}

type RegisteredDomainNameServer struct {
	// Glue IP addresses of a name server. The list can contain only one IPv4 and one IPv6 address.
	GlueIps []string `pulumi:"glueIps"`
	// The fully qualified host name of the name server.
	Name string `pulumi:"name"`
}

type RegisteredDomainNameServerArgs struct {
	// Glue IP addresses of a name server. The list can contain only one IPv4 and one IPv6 address.
	GlueIps pulumix.Input[[]string] `pulumi:"glueIps"`
	// The fully qualified host name of the name server.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RegisteredDomainNameServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainNameServer)(nil)).Elem()
}

func (i RegisteredDomainNameServerArgs) ToRegisteredDomainNameServerOutput() RegisteredDomainNameServerOutput {
	return i.ToRegisteredDomainNameServerOutputWithContext(context.Background())
}

func (i RegisteredDomainNameServerArgs) ToRegisteredDomainNameServerOutputWithContext(ctx context.Context) RegisteredDomainNameServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainNameServerOutput)
}

func (i *RegisteredDomainNameServerArgs) ToOutput(ctx context.Context) pulumix.Output[*RegisteredDomainNameServerArgs] {
	return pulumix.Val(i)
}

type RegisteredDomainNameServerOutput struct{ *pulumi.OutputState }

func (RegisteredDomainNameServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainNameServer)(nil)).Elem()
}

func (o RegisteredDomainNameServerOutput) ToRegisteredDomainNameServerOutput() RegisteredDomainNameServerOutput {
	return o
}

func (o RegisteredDomainNameServerOutput) ToRegisteredDomainNameServerOutputWithContext(ctx context.Context) RegisteredDomainNameServerOutput {
	return o
}

func (o RegisteredDomainNameServerOutput) ToOutput(ctx context.Context) pulumix.Output[RegisteredDomainNameServer] {
	return pulumix.Output[RegisteredDomainNameServer]{
		OutputState: o.OutputState,
	}
}

// Glue IP addresses of a name server. The list can contain only one IPv4 and one IPv6 address.
func (o RegisteredDomainNameServerOutput) GlueIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RegisteredDomainNameServer](o, func(v RegisteredDomainNameServer) []string { return v.GlueIps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The fully qualified host name of the name server.
func (o RegisteredDomainNameServerOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RegisteredDomainNameServer](o, func(v RegisteredDomainNameServer) string { return v.Name })
}

type RegisteredDomainRegistrantContact struct {
	// First line of the contact's address.
	AddressLine1 *string `pulumi:"addressLine1"`
	// Second line of contact's address, if any.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The city of the contact's address.
	City *string `pulumi:"city"`
	// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
	ContactType *string `pulumi:"contactType"`
	// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
	CountryCode *string `pulumi:"countryCode"`
	// Email address of the contact.
	Email *string `pulumi:"email"`
	// A key-value map of parameters required by certain top-level domains.
	ExtraParams map[string]string `pulumi:"extraParams"`
	// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	Fax *string `pulumi:"fax"`
	// First name of contact.
	FirstName *string `pulumi:"firstName"`
	// Last name of contact.
	LastName *string `pulumi:"lastName"`
	// Name of the organization for contact types other than `PERSON`.
	OrganizationName *string `pulumi:"organizationName"`
	// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	PhoneNumber *string `pulumi:"phoneNumber"`
	// The state or province of the contact's city.
	State *string `pulumi:"state"`
	// The zip or postal code of the contact's address.
	ZipCode *string `pulumi:"zipCode"`
}

type RegisteredDomainRegistrantContactArgs struct {
	// First line of the contact's address.
	AddressLine1 pulumix.Input[*string] `pulumi:"addressLine1"`
	// Second line of contact's address, if any.
	AddressLine2 pulumix.Input[*string] `pulumi:"addressLine2"`
	// The city of the contact's address.
	City pulumix.Input[*string] `pulumi:"city"`
	// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
	ContactType pulumix.Input[*string] `pulumi:"contactType"`
	// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
	CountryCode pulumix.Input[*string] `pulumi:"countryCode"`
	// Email address of the contact.
	Email pulumix.Input[*string] `pulumi:"email"`
	// A key-value map of parameters required by certain top-level domains.
	ExtraParams pulumix.Input[map[string]string] `pulumi:"extraParams"`
	// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	Fax pulumix.Input[*string] `pulumi:"fax"`
	// First name of contact.
	FirstName pulumix.Input[*string] `pulumi:"firstName"`
	// Last name of contact.
	LastName pulumix.Input[*string] `pulumi:"lastName"`
	// Name of the organization for contact types other than `PERSON`.
	OrganizationName pulumix.Input[*string] `pulumi:"organizationName"`
	// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	PhoneNumber pulumix.Input[*string] `pulumi:"phoneNumber"`
	// The state or province of the contact's city.
	State pulumix.Input[*string] `pulumi:"state"`
	// The zip or postal code of the contact's address.
	ZipCode pulumix.Input[*string] `pulumi:"zipCode"`
}

func (RegisteredDomainRegistrantContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainRegistrantContact)(nil)).Elem()
}

func (i RegisteredDomainRegistrantContactArgs) ToRegisteredDomainRegistrantContactOutput() RegisteredDomainRegistrantContactOutput {
	return i.ToRegisteredDomainRegistrantContactOutputWithContext(context.Background())
}

func (i RegisteredDomainRegistrantContactArgs) ToRegisteredDomainRegistrantContactOutputWithContext(ctx context.Context) RegisteredDomainRegistrantContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainRegistrantContactOutput)
}

func (i *RegisteredDomainRegistrantContactArgs) ToOutput(ctx context.Context) pulumix.Output[*RegisteredDomainRegistrantContactArgs] {
	return pulumix.Val(i)
}

type RegisteredDomainRegistrantContactOutput struct{ *pulumi.OutputState }

func (RegisteredDomainRegistrantContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainRegistrantContact)(nil)).Elem()
}

func (o RegisteredDomainRegistrantContactOutput) ToRegisteredDomainRegistrantContactOutput() RegisteredDomainRegistrantContactOutput {
	return o
}

func (o RegisteredDomainRegistrantContactOutput) ToRegisteredDomainRegistrantContactOutputWithContext(ctx context.Context) RegisteredDomainRegistrantContactOutput {
	return o
}

func (o RegisteredDomainRegistrantContactOutput) ToOutput(ctx context.Context) pulumix.Output[RegisteredDomainRegistrantContact] {
	return pulumix.Output[RegisteredDomainRegistrantContact]{
		OutputState: o.OutputState,
	}
}

// First line of the contact's address.
func (o RegisteredDomainRegistrantContactOutput) AddressLine1() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.AddressLine1 })
}

// Second line of contact's address, if any.
func (o RegisteredDomainRegistrantContactOutput) AddressLine2() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.AddressLine2 })
}

// The city of the contact's address.
func (o RegisteredDomainRegistrantContactOutput) City() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.City })
}

// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
func (o RegisteredDomainRegistrantContactOutput) ContactType() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.ContactType })
}

// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
func (o RegisteredDomainRegistrantContactOutput) CountryCode() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.CountryCode })
}

// Email address of the contact.
func (o RegisteredDomainRegistrantContactOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.Email })
}

// A key-value map of parameters required by certain top-level domains.
func (o RegisteredDomainRegistrantContactOutput) ExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) map[string]string { return v.ExtraParams })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
func (o RegisteredDomainRegistrantContactOutput) Fax() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.Fax })
}

// First name of contact.
func (o RegisteredDomainRegistrantContactOutput) FirstName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.FirstName })
}

// Last name of contact.
func (o RegisteredDomainRegistrantContactOutput) LastName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.LastName })
}

// Name of the organization for contact types other than `PERSON`.
func (o RegisteredDomainRegistrantContactOutput) OrganizationName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.OrganizationName })
}

// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
func (o RegisteredDomainRegistrantContactOutput) PhoneNumber() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.PhoneNumber })
}

// The state or province of the contact's city.
func (o RegisteredDomainRegistrantContactOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.State })
}

// The zip or postal code of the contact's address.
func (o RegisteredDomainRegistrantContactOutput) ZipCode() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainRegistrantContact](o, func(v RegisteredDomainRegistrantContact) *string { return v.ZipCode })
}

type RegisteredDomainTechContact struct {
	// First line of the contact's address.
	AddressLine1 *string `pulumi:"addressLine1"`
	// Second line of contact's address, if any.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The city of the contact's address.
	City *string `pulumi:"city"`
	// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
	ContactType *string `pulumi:"contactType"`
	// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
	CountryCode *string `pulumi:"countryCode"`
	// Email address of the contact.
	Email *string `pulumi:"email"`
	// A key-value map of parameters required by certain top-level domains.
	ExtraParams map[string]string `pulumi:"extraParams"`
	// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	Fax *string `pulumi:"fax"`
	// First name of contact.
	FirstName *string `pulumi:"firstName"`
	// Last name of contact.
	LastName *string `pulumi:"lastName"`
	// Name of the organization for contact types other than `PERSON`.
	OrganizationName *string `pulumi:"organizationName"`
	// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	PhoneNumber *string `pulumi:"phoneNumber"`
	// The state or province of the contact's city.
	State *string `pulumi:"state"`
	// The zip or postal code of the contact's address.
	ZipCode *string `pulumi:"zipCode"`
}

type RegisteredDomainTechContactArgs struct {
	// First line of the contact's address.
	AddressLine1 pulumix.Input[*string] `pulumi:"addressLine1"`
	// Second line of contact's address, if any.
	AddressLine2 pulumix.Input[*string] `pulumi:"addressLine2"`
	// The city of the contact's address.
	City pulumix.Input[*string] `pulumi:"city"`
	// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
	ContactType pulumix.Input[*string] `pulumi:"contactType"`
	// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
	CountryCode pulumix.Input[*string] `pulumi:"countryCode"`
	// Email address of the contact.
	Email pulumix.Input[*string] `pulumi:"email"`
	// A key-value map of parameters required by certain top-level domains.
	ExtraParams pulumix.Input[map[string]string] `pulumi:"extraParams"`
	// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	Fax pulumix.Input[*string] `pulumi:"fax"`
	// First name of contact.
	FirstName pulumix.Input[*string] `pulumi:"firstName"`
	// Last name of contact.
	LastName pulumix.Input[*string] `pulumi:"lastName"`
	// Name of the organization for contact types other than `PERSON`.
	OrganizationName pulumix.Input[*string] `pulumi:"organizationName"`
	// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
	PhoneNumber pulumix.Input[*string] `pulumi:"phoneNumber"`
	// The state or province of the contact's city.
	State pulumix.Input[*string] `pulumi:"state"`
	// The zip or postal code of the contact's address.
	ZipCode pulumix.Input[*string] `pulumi:"zipCode"`
}

func (RegisteredDomainTechContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainTechContact)(nil)).Elem()
}

func (i RegisteredDomainTechContactArgs) ToRegisteredDomainTechContactOutput() RegisteredDomainTechContactOutput {
	return i.ToRegisteredDomainTechContactOutputWithContext(context.Background())
}

func (i RegisteredDomainTechContactArgs) ToRegisteredDomainTechContactOutputWithContext(ctx context.Context) RegisteredDomainTechContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainTechContactOutput)
}

func (i *RegisteredDomainTechContactArgs) ToOutput(ctx context.Context) pulumix.Output[*RegisteredDomainTechContactArgs] {
	return pulumix.Val(i)
}

type RegisteredDomainTechContactOutput struct{ *pulumi.OutputState }

func (RegisteredDomainTechContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomainTechContact)(nil)).Elem()
}

func (o RegisteredDomainTechContactOutput) ToRegisteredDomainTechContactOutput() RegisteredDomainTechContactOutput {
	return o
}

func (o RegisteredDomainTechContactOutput) ToRegisteredDomainTechContactOutputWithContext(ctx context.Context) RegisteredDomainTechContactOutput {
	return o
}

func (o RegisteredDomainTechContactOutput) ToOutput(ctx context.Context) pulumix.Output[RegisteredDomainTechContact] {
	return pulumix.Output[RegisteredDomainTechContact]{
		OutputState: o.OutputState,
	}
}

// First line of the contact's address.
func (o RegisteredDomainTechContactOutput) AddressLine1() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.AddressLine1 })
}

// Second line of contact's address, if any.
func (o RegisteredDomainTechContactOutput) AddressLine2() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.AddressLine2 })
}

// The city of the contact's address.
func (o RegisteredDomainTechContactOutput) City() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.City })
}

// Indicates whether the contact is a person, company, association, or public organization. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-ContactType) for valid values.
func (o RegisteredDomainTechContactOutput) ContactType() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.ContactType })
}

// Code for the country of the contact's address. See the [AWS API documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ContactDetail.html#Route53Domains-Type-domains_ContactDetail-CountryCode) for valid values.
func (o RegisteredDomainTechContactOutput) CountryCode() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.CountryCode })
}

// Email address of the contact.
func (o RegisteredDomainTechContactOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.Email })
}

// A key-value map of parameters required by certain top-level domains.
func (o RegisteredDomainTechContactOutput) ExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) map[string]string { return v.ExtraParams })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Fax number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
func (o RegisteredDomainTechContactOutput) Fax() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.Fax })
}

// First name of contact.
func (o RegisteredDomainTechContactOutput) FirstName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.FirstName })
}

// Last name of contact.
func (o RegisteredDomainTechContactOutput) LastName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.LastName })
}

// Name of the organization for contact types other than `PERSON`.
func (o RegisteredDomainTechContactOutput) OrganizationName() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.OrganizationName })
}

// The phone number of the contact. Phone number must be specified in the format "+[country dialing code].[number including any area code]".
func (o RegisteredDomainTechContactOutput) PhoneNumber() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.PhoneNumber })
}

// The state or province of the contact's city.
func (o RegisteredDomainTechContactOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.State })
}

// The zip or postal code of the contact's address.
func (o RegisteredDomainTechContactOutput) ZipCode() pulumix.Output[*string] {
	return pulumix.Apply[RegisteredDomainTechContact](o, func(v RegisteredDomainTechContact) *string { return v.ZipCode })
}

func init() {
	pulumi.RegisterOutputType(RegisteredDomainAdminContactOutput{})
	pulumi.RegisterOutputType(RegisteredDomainNameServerOutput{})
	pulumi.RegisterOutputType(RegisteredDomainRegistrantContactOutput{})
	pulumi.RegisterOutputType(RegisteredDomainTechContactOutput{})
}
