// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for getting information about AWS EC2 Public IPv4 Pools.
func GetPublicIpv4Pools(ctx *pulumi.Context, args *GetPublicIpv4PoolsArgs, opts ...pulumi.InvokeOption) (*GetPublicIpv4PoolsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPublicIpv4PoolsResult
	err := ctx.Invoke("aws:ec2/getPublicIpv4Pools:getPublicIpv4Pools", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPublicIpv4Pools.
type GetPublicIpv4PoolsArgs struct {
	// Custom filter block as described below.
	Filters []GetPublicIpv4PoolsFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired pools.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPublicIpv4Pools.
type GetPublicIpv4PoolsResult struct {
	Filters []GetPublicIpv4PoolsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all the pool IDs found.
	PoolIds []string          `pulumi:"poolIds"`
	Tags    map[string]string `pulumi:"tags"`
}

func GetPublicIpv4PoolsOutput(ctx *pulumi.Context, args GetPublicIpv4PoolsOutputArgs, opts ...pulumi.InvokeOption) GetPublicIpv4PoolsResultOutput {
	outputResult := pulumix.ApplyErr[*GetPublicIpv4PoolsArgs](args.ToOutput(), func(plainArgs *GetPublicIpv4PoolsArgs) (*GetPublicIpv4PoolsResult, error) {
		return GetPublicIpv4Pools(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPublicIpv4PoolsResultOutput, *GetPublicIpv4PoolsResult](outputResult)
}

// A collection of arguments for invoking getPublicIpv4Pools.
type GetPublicIpv4PoolsOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetPublicIpv4PoolsFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired pools.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetPublicIpv4PoolsOutputArgs) ToOutput() pulumix.Output[*GetPublicIpv4PoolsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPublicIpv4PoolsArgs {
		return &GetPublicIpv4PoolsArgs{
			Filters: resolvedArgs[0].([]GetPublicIpv4PoolsFilter),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type GetPublicIpv4PoolsResultOutput struct{ *pulumi.OutputState }

func (GetPublicIpv4PoolsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicIpv4PoolsResult)(nil)).Elem()
}

func (o GetPublicIpv4PoolsResultOutput) ToOutput(context.Context) pulumix.Output[*GetPublicIpv4PoolsResult] {
	return pulumix.Output[*GetPublicIpv4PoolsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicIpv4PoolsResultOutput) Filters() pulumix.GArrayOutput[GetPublicIpv4PoolsFilter, GetPublicIpv4PoolsFilterOutput] {
	value := pulumix.Apply[*GetPublicIpv4PoolsResult](o, func(v *GetPublicIpv4PoolsResult) []GetPublicIpv4PoolsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetPublicIpv4PoolsFilter, GetPublicIpv4PoolsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetPublicIpv4PoolsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPublicIpv4PoolsResult](o, func(v *GetPublicIpv4PoolsResult) string { return v.Id })
}

func (o GetPublicIpv4PoolsResultOutput) PoolIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetPublicIpv4PoolsResult](o, func(v *GetPublicIpv4PoolsResult) []string { return v.PoolIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetPublicIpv4PoolsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetPublicIpv4PoolsResult](o, func(v *GetPublicIpv4PoolsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
