// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cur

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an AWS Cost and Usage Report Definition.
//
// > *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
//
// > *NOTE:* If AWS Organizations is enabled, only the master account can use this resource.
func LookupReportDefinition(ctx *pulumi.Context, args *LookupReportDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupReportDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReportDefinitionResult
	err := ctx.Invoke("aws:cur/getReportDefinition:getReportDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReportDefinition.
type LookupReportDefinitionArgs struct {
	// Name of the report definition to match.
	ReportName string `pulumi:"reportName"`
}

// A collection of values returned by getReportDefinition.
type LookupReportDefinitionResult struct {
	// A list of additional artifacts.
	AdditionalArtifacts []string `pulumi:"additionalArtifacts"`
	// A list of schema elements.
	AdditionalSchemaElements []string `pulumi:"additionalSchemaElements"`
	// Preferred format for report.
	Compression string `pulumi:"compression"`
	// Preferred compression format for report.
	Format string `pulumi:"format"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// If true reports are updated after they have been finalized.
	RefreshClosedReports bool   `pulumi:"refreshClosedReports"`
	ReportName           string `pulumi:"reportName"`
	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions.
	ReportVersioning string `pulumi:"reportVersioning"`
	// Name of customer S3 bucket.
	S3Bucket string `pulumi:"s3Bucket"`
	// Preferred report path prefix.
	S3Prefix string `pulumi:"s3Prefix"`
	// Region of customer S3 bucket.
	S3Region string `pulumi:"s3Region"`
	// Frequency on which report data are measured and displayed.
	TimeUnit string `pulumi:"timeUnit"`
}

func LookupReportDefinitionOutput(ctx *pulumi.Context, args LookupReportDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupReportDefinitionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupReportDefinitionArgs](args.ToOutput(), func(plainArgs *LookupReportDefinitionArgs) (*LookupReportDefinitionResult, error) {
		return LookupReportDefinition(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupReportDefinitionResultOutput, *LookupReportDefinitionResult](outputResult)
}

// A collection of arguments for invoking getReportDefinition.
type LookupReportDefinitionOutputArgs struct {
	// Name of the report definition to match.
	ReportName pulumix.Input[string] `pulumi:"reportName"`
}

func (args LookupReportDefinitionOutputArgs) ToOutput() pulumix.Output[*LookupReportDefinitionArgs] {
	allArgs := pulumix.All(
		args.ReportName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupReportDefinitionArgs {
		return &LookupReportDefinitionArgs{
			ReportName: resolvedArgs[0].(string),
		}
	})
}

type LookupReportDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupReportDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReportDefinitionResult)(nil)).Elem()
}

func (o LookupReportDefinitionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupReportDefinitionResult] {
	return pulumix.Output[*LookupReportDefinitionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupReportDefinitionResultOutput) AdditionalArtifacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) []string { return v.AdditionalArtifacts })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReportDefinitionResultOutput) AdditionalSchemaElements() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) []string { return v.AdditionalSchemaElements })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReportDefinitionResultOutput) Compression() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.Compression })
}

func (o LookupReportDefinitionResultOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.Format })
}

func (o LookupReportDefinitionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.Id })
}

func (o LookupReportDefinitionResultOutput) RefreshClosedReports() pulumix.Output[bool] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) bool { return v.RefreshClosedReports })
}

func (o LookupReportDefinitionResultOutput) ReportName() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.ReportName })
}

func (o LookupReportDefinitionResultOutput) ReportVersioning() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.ReportVersioning })
}

func (o LookupReportDefinitionResultOutput) S3Bucket() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.S3Bucket })
}

func (o LookupReportDefinitionResultOutput) S3Prefix() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.S3Prefix })
}

func (o LookupReportDefinitionResultOutput) S3Region() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.S3Region })
}

func (o LookupReportDefinitionResultOutput) TimeUnit() pulumix.Output[string] {
	return pulumix.Apply[*LookupReportDefinitionResult](o, func(v *LookupReportDefinitionResult) string { return v.TimeUnit })
}
