// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for enabling Amazon Inspector resource scans.
//
// This resource must be created in the Organization's Administrator Account.
type Enabler struct {
	pulumi.CustomResourceState

	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds pulumix.ArrayOutput[string] `pulumi:"accountIds"`
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes pulumix.ArrayOutput[string] `pulumi:"resourceTypes"`
}

// NewEnabler registers a new resource with the given unique name, arguments, and options.
func NewEnabler(ctx *pulumi.Context,
	name string, args *EnablerArgs, opts ...pulumi.ResourceOption) (*Enabler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountIds == nil {
		return nil, errors.New("invalid value for required argument 'AccountIds'")
	}
	if args.ResourceTypes == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Enabler
	err := ctx.RegisterResource("aws:inspector2/enabler:Enabler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnabler gets an existing Enabler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnabler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnablerState, opts ...pulumi.ResourceOption) (*Enabler, error) {
	var resource Enabler
	err := ctx.ReadResource("aws:inspector2/enabler:Enabler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Enabler resources.
type enablerState struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds []string `pulumi:"accountIds"`
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

type EnablerState struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds pulumix.Input[[]string]
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes pulumix.Input[[]string]
}

func (EnablerState) ElementType() reflect.Type {
	return reflect.TypeOf((*enablerState)(nil)).Elem()
}

type enablerArgs struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds []string `pulumi:"accountIds"`
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// The set of arguments for constructing a Enabler resource.
type EnablerArgs struct {
	// Set of account IDs.
	// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
	AccountIds pulumix.Input[[]string]
	// Type of resources to scan.
	// Valid values are `EC2`, `ECR`, and `LAMBDA`.
	// At least one item is required.
	ResourceTypes pulumix.Input[[]string]
}

func (EnablerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enablerArgs)(nil)).Elem()
}

type EnablerOutput struct{ *pulumi.OutputState }

func (EnablerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Enabler)(nil)).Elem()
}

func (o EnablerOutput) ToEnablerOutput() EnablerOutput {
	return o
}

func (o EnablerOutput) ToEnablerOutputWithContext(ctx context.Context) EnablerOutput {
	return o
}

func (o EnablerOutput) ToOutput(ctx context.Context) pulumix.Output[Enabler] {
	return pulumix.Output[Enabler]{
		OutputState: o.OutputState,
	}
}

// Set of account IDs.
// Can contain one of: the Organization's Administrator Account, or one or more Member Accounts.
func (o EnablerOutput) AccountIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Enabler](o, func(v Enabler) pulumix.ArrayOutput[string] { return v.AccountIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Type of resources to scan.
// Valid values are `EC2`, `ECR`, and `LAMBDA`.
// At least one item is required.
func (o EnablerOutput) ResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Enabler](o, func(v Enabler) pulumix.ArrayOutput[string] { return v.ResourceTypes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EnablerOutput{})
}
