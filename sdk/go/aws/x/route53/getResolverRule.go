// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `route53.ResolverRule` provides details about a specific Route53 Resolver rule.
func LookupResolverRule(ctx *pulumi.Context, args *LookupResolverRuleArgs, opts ...pulumi.InvokeOption) (*LookupResolverRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverRuleResult
	err := ctx.Invoke("aws:route53/getResolverRule:getResolverRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverRule.
type LookupResolverRuleArgs struct {
	// Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolverRuleId`.
	DomainName *string `pulumi:"domainName"`
	// Friendly name of the desired resolver rule. Conflicts with `resolverRuleId`.
	Name *string `pulumi:"name"`
	// ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolverRuleId`.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
	// ID of the desired resolver rule. Conflicts with `domainName`, `name`, `resolverEndpointId` and `ruleType`.
	ResolverRuleId *string `pulumi:"resolverRuleId"`
	// Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolverRuleId`.
	RuleType *string `pulumi:"ruleType"`
	// Map of tags assigned to the resolver rule.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getResolverRule.
type LookupResolverRuleResult struct {
	// ARN (Amazon Resource Name) for the resolver rule.
	Arn        string `pulumi:"arn"`
	DomainName string `pulumi:"domainName"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	OwnerId            string `pulumi:"ownerId"`
	ResolverEndpointId string `pulumi:"resolverEndpointId"`
	ResolverRuleId     string `pulumi:"resolverRuleId"`
	RuleType           string `pulumi:"ruleType"`
	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus string `pulumi:"shareStatus"`
	// Map of tags assigned to the resolver rule.
	Tags map[string]string `pulumi:"tags"`
}

func LookupResolverRuleOutput(ctx *pulumi.Context, args LookupResolverRuleOutputArgs, opts ...pulumi.InvokeOption) LookupResolverRuleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResolverRuleArgs](args.ToOutput(), func(plainArgs *LookupResolverRuleArgs) (*LookupResolverRuleResult, error) {
		return LookupResolverRule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResolverRuleResultOutput, *LookupResolverRuleResult](outputResult)
}

// A collection of arguments for invoking getResolverRule.
type LookupResolverRuleOutputArgs struct {
	// Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolverRuleId`.
	DomainName pulumix.Input[*string] `pulumi:"domainName"`
	// Friendly name of the desired resolver rule. Conflicts with `resolverRuleId`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolverRuleId`.
	ResolverEndpointId pulumix.Input[*string] `pulumi:"resolverEndpointId"`
	// ID of the desired resolver rule. Conflicts with `domainName`, `name`, `resolverEndpointId` and `ruleType`.
	ResolverRuleId pulumix.Input[*string] `pulumi:"resolverRuleId"`
	// Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolverRuleId`.
	RuleType pulumix.Input[*string] `pulumi:"ruleType"`
	// Map of tags assigned to the resolver rule.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupResolverRuleOutputArgs) ToOutput() pulumix.Output[*LookupResolverRuleArgs] {
	allArgs := pulumix.All(
		args.DomainName.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.ResolverEndpointId.ToOutput(context.Background()).AsAny(),
		args.ResolverRuleId.ToOutput(context.Background()).AsAny(),
		args.RuleType.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResolverRuleArgs {
		return &LookupResolverRuleArgs{
			DomainName:         resolvedArgs[0].(*string),
			Name:               resolvedArgs[1].(*string),
			ResolverEndpointId: resolvedArgs[2].(*string),
			ResolverRuleId:     resolvedArgs[3].(*string),
			RuleType:           resolvedArgs[4].(*string),
			Tags:               resolvedArgs[5].(map[string]string),
		}
	})
}

type LookupResolverRuleResultOutput struct{ *pulumi.OutputState }

func (LookupResolverRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverRuleResult)(nil)).Elem()
}

func (o LookupResolverRuleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResolverRuleResult] {
	return pulumix.Output[*LookupResolverRuleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResolverRuleResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.Arn })
}

func (o LookupResolverRuleResultOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.DomainName })
}

func (o LookupResolverRuleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.Id })
}

func (o LookupResolverRuleResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.Name })
}

func (o LookupResolverRuleResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.OwnerId })
}

func (o LookupResolverRuleResultOutput) ResolverEndpointId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.ResolverEndpointId })
}

func (o LookupResolverRuleResultOutput) ResolverRuleId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.ResolverRuleId })
}

func (o LookupResolverRuleResultOutput) RuleType() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.RuleType })
}

func (o LookupResolverRuleResultOutput) ShareStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) string { return v.ShareStatus })
}

func (o LookupResolverRuleResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupResolverRuleResult](o, func(v *LookupResolverRuleResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
