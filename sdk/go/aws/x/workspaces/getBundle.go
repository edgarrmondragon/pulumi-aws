// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an AWS WorkSpaces bundle.
func GetBundle(ctx *pulumi.Context, args *GetBundleArgs, opts ...pulumi.InvokeOption) (*GetBundleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBundleResult
	err := ctx.Invoke("aws:workspaces/getBundle:getBundle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBundle.
type GetBundleArgs struct {
	// ID of the bundle.
	BundleId *string `pulumi:"bundleId"`
	// Name of the bundle. You cannot combine this parameter with `bundleId`.
	Name *string `pulumi:"name"`
	// Owner of the bundles. You have to leave it blank for own bundles. You cannot combine this parameter with `bundleId`.
	Owner *string `pulumi:"owner"`
}

// A collection of values returned by getBundle.
type GetBundleResult struct {
	// The ID of the bundle.
	BundleId *string `pulumi:"bundleId"`
	// The compute type. See supported fields below.
	ComputeTypes []GetBundleComputeType `pulumi:"computeTypes"`
	// The description of the bundle.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the compute type.
	Name *string `pulumi:"name"`
	// The owner of the bundle.
	Owner *string `pulumi:"owner"`
	// The root volume. See supported fields below.
	RootStorages []GetBundleRootStorage `pulumi:"rootStorages"`
	// The user storage. See supported fields below.
	UserStorages []GetBundleUserStorage `pulumi:"userStorages"`
}

func GetBundleOutput(ctx *pulumi.Context, args GetBundleOutputArgs, opts ...pulumi.InvokeOption) GetBundleResultOutput {
	outputResult := pulumix.ApplyErr[*GetBundleArgs](args.ToOutput(), func(plainArgs *GetBundleArgs) (*GetBundleResult, error) {
		return GetBundle(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetBundleResultOutput, *GetBundleResult](outputResult)
}

// A collection of arguments for invoking getBundle.
type GetBundleOutputArgs struct {
	// ID of the bundle.
	BundleId pulumix.Input[*string] `pulumi:"bundleId"`
	// Name of the bundle. You cannot combine this parameter with `bundleId`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Owner of the bundles. You have to leave it blank for own bundles. You cannot combine this parameter with `bundleId`.
	Owner pulumix.Input[*string] `pulumi:"owner"`
}

func (args GetBundleOutputArgs) ToOutput() pulumix.Output[*GetBundleArgs] {
	allArgs := pulumix.All(
		args.BundleId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Owner.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetBundleArgs {
		return &GetBundleArgs{
			BundleId: resolvedArgs[0].(*string),
			Name:     resolvedArgs[1].(*string),
			Owner:    resolvedArgs[2].(*string),
		}
	})
}

type GetBundleResultOutput struct{ *pulumi.OutputState }

func (GetBundleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleResult)(nil)).Elem()
}

func (o GetBundleResultOutput) ToOutput(context.Context) pulumix.Output[*GetBundleResult] {
	return pulumix.Output[*GetBundleResult]{
		OutputState: o.OutputState,
	}
}

func (o GetBundleResultOutput) BundleId() pulumix.Output[*string] {
	return pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) *string { return v.BundleId })
}

func (o GetBundleResultOutput) ComputeTypes() pulumix.GArrayOutput[GetBundleComputeType, GetBundleComputeTypeOutput] {
	value := pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) []GetBundleComputeType { return v.ComputeTypes })
	return pulumix.GArrayOutput[GetBundleComputeType, GetBundleComputeTypeOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetBundleResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) string { return v.Description })
}

func (o GetBundleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) string { return v.Id })
}

func (o GetBundleResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) *string { return v.Name })
}

func (o GetBundleResultOutput) Owner() pulumix.Output[*string] {
	return pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) *string { return v.Owner })
}

func (o GetBundleResultOutput) RootStorages() pulumix.GArrayOutput[GetBundleRootStorage, GetBundleRootStorageOutput] {
	value := pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) []GetBundleRootStorage { return v.RootStorages })
	return pulumix.GArrayOutput[GetBundleRootStorage, GetBundleRootStorageOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetBundleResultOutput) UserStorages() pulumix.GArrayOutput[GetBundleUserStorage, GetBundleUserStorageOutput] {
	value := pulumix.Apply[*GetBundleResult](o, func(v *GetBundleResult) []GetBundleUserStorage { return v.UserStorages })
	return pulumix.GArrayOutput[GetBundleUserStorage, GetBundleUserStorageOutput]{
		OutputState: value.OutputState,
	}
}
