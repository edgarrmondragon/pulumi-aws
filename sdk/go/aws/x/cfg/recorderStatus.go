// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages status (recording / stopped) of an AWS Config Configuration Recorder.
//
// > **Note:** Starting Configuration Recorder requires a Delivery Channel to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
type RecorderStatus struct {
	pulumi.CustomResourceState

	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumix.Output[bool] `pulumi:"isEnabled"`
	// The name of the recorder
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewRecorderStatus registers a new resource with the given unique name, arguments, and options.
func NewRecorderStatus(ctx *pulumi.Context,
	name string, args *RecorderStatusArgs, opts ...pulumi.ResourceOption) (*RecorderStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsEnabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecorderStatus
	err := ctx.RegisterResource("aws:cfg/recorderStatus:RecorderStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecorderStatus gets an existing RecorderStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecorderStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecorderStatusState, opts ...pulumi.ResourceOption) (*RecorderStatus, error) {
	var resource RecorderStatus
	err := ctx.ReadResource("aws:cfg/recorderStatus:RecorderStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecorderStatus resources.
type recorderStatusState struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The name of the recorder
	Name *string `pulumi:"name"`
}

type RecorderStatusState struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumix.Input[*bool]
	// The name of the recorder
	Name pulumix.Input[*string]
}

func (RecorderStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*recorderStatusState)(nil)).Elem()
}

type recorderStatusArgs struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The name of the recorder
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RecorderStatus resource.
type RecorderStatusArgs struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumix.Input[bool]
	// The name of the recorder
	Name pulumix.Input[*string]
}

func (RecorderStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recorderStatusArgs)(nil)).Elem()
}

type RecorderStatusOutput struct{ *pulumi.OutputState }

func (RecorderStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecorderStatus)(nil)).Elem()
}

func (o RecorderStatusOutput) ToRecorderStatusOutput() RecorderStatusOutput {
	return o
}

func (o RecorderStatusOutput) ToRecorderStatusOutputWithContext(ctx context.Context) RecorderStatusOutput {
	return o
}

func (o RecorderStatusOutput) ToOutput(ctx context.Context) pulumix.Output[RecorderStatus] {
	return pulumix.Output[RecorderStatus]{
		OutputState: o.OutputState,
	}
}

// Whether the configuration recorder should be enabled or disabled.
func (o RecorderStatusOutput) IsEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[RecorderStatus](o, func(v RecorderStatus) pulumix.Output[bool] { return v.IsEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The name of the recorder
func (o RecorderStatusOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RecorderStatus](o, func(v RecorderStatus) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RecorderStatusOutput{})
}
