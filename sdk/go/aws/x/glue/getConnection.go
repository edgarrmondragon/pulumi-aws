// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific Glue Connection.
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("aws:glue/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	// Concatenation of the catalog ID and connection name. For example, if your account ID is
	// `123456789123` and the connection name is `conn` then the ID is `123456789123:conn`.
	Id string `pulumi:"id"`
	// Tags assigned to the resource
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	// ARN of the Glue Connection.
	Arn string `pulumi:"arn"`
	// Catalog ID of the Glue Connection.
	CatalogId            string            `pulumi:"catalogId"`
	ConnectionProperties map[string]string `pulumi:"connectionProperties"`
	// Type of Glue Connection.
	ConnectionType string `pulumi:"connectionType"`
	// Description of the connection.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// A list of criteria that can be used in selecting this connection.
	MatchCriterias []string `pulumi:"matchCriterias"`
	// Name of the Glue Connection.
	Name string `pulumi:"name"`
	// A map of physical connection requirements, such as VPC and SecurityGroup.
	PhysicalConnectionRequirements []GetConnectionPhysicalConnectionRequirement `pulumi:"physicalConnectionRequirements"`
	// Tags assigned to the resource
	Tags map[string]string `pulumi:"tags"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectionArgs](args.ToOutput(), func(plainArgs *LookupConnectionArgs) (*LookupConnectionResult, error) {
		return LookupConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectionResultOutput, *LookupConnectionResult](outputResult)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	// Concatenation of the catalog ID and connection name. For example, if your account ID is
	// `123456789123` and the connection name is `conn` then the ID is `123456789123:conn`.
	Id pulumix.Input[string] `pulumi:"id"`
	// Tags assigned to the resource
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupConnectionOutputArgs) ToOutput() pulumix.Output[*LookupConnectionArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectionArgs {
		return &LookupConnectionArgs{
			Id:   resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectionResult] {
	return pulumix.Output[*LookupConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Arn })
}

func (o LookupConnectionResultOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.CatalogId })
}

func (o LookupConnectionResultOutput) ConnectionProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) map[string]string { return v.ConnectionProperties })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectionResultOutput) ConnectionType() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ConnectionType })
}

func (o LookupConnectionResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Description })
}

func (o LookupConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Id })
}

func (o LookupConnectionResultOutput) MatchCriterias() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) []string { return v.MatchCriterias })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Name })
}

func (o LookupConnectionResultOutput) PhysicalConnectionRequirements() pulumix.GArrayOutput[GetConnectionPhysicalConnectionRequirement, GetConnectionPhysicalConnectionRequirementOutput] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) []GetConnectionPhysicalConnectionRequirement {
		return v.PhysicalConnectionRequirements
	})
	return pulumix.GArrayOutput[GetConnectionPhysicalConnectionRequirement, GetConnectionPhysicalConnectionRequirementOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupConnectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
