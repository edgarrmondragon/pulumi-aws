// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Batch Job Queue data source allows access to details of a specific
// job queue within AWS Batch.
func LookupJobQueue(ctx *pulumi.Context, args *LookupJobQueueArgs, opts ...pulumi.InvokeOption) (*LookupJobQueueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupJobQueueResult
	err := ctx.Invoke("aws:batch/getJobQueue:getJobQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getJobQueue.
type LookupJobQueueArgs struct {
	// Name of the job queue.
	Name string `pulumi:"name"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getJobQueue.
type LookupJobQueueResult struct {
	// ARN of the job queue.
	Arn string `pulumi:"arn"`
	// The compute environments that are attached to the job queue and the order in
	// which job placement is preferred. Compute environments are selected for job placement in ascending order.
	// * `compute_environment_order.#.order` - The order of the compute environment.
	// * `compute_environment_order.#.compute_environment` - The ARN of the compute environment.
	ComputeEnvironmentOrders []GetJobQueueComputeEnvironmentOrder `pulumi:"computeEnvironmentOrders"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Priority of the job queue. Job queues with a higher priority are evaluated first when
	// associated with the same compute environment.
	Priority int `pulumi:"priority"`
	// The ARN of the fair share scheduling policy. If this attribute has a value, the job queue uses a fair share scheduling policy. If this attribute does not have a value, the job queue uses a first in, first out (FIFO) scheduling policy.
	SchedulingPolicyArn string `pulumi:"schedulingPolicyArn"`
	// Describes the ability of the queue to accept new jobs (for example, `ENABLED` or `DISABLED`).
	State string `pulumi:"state"`
	// Current status of the job queue (for example, `CREATING` or `VALID`).
	Status string `pulumi:"status"`
	// Short, human-readable string to provide additional details about the current status
	// of the job queue.
	StatusReason string `pulumi:"statusReason"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

func LookupJobQueueOutput(ctx *pulumi.Context, args LookupJobQueueOutputArgs, opts ...pulumi.InvokeOption) LookupJobQueueResultOutput {
	outputResult := pulumix.ApplyErr[*LookupJobQueueArgs](args.ToOutput(), func(plainArgs *LookupJobQueueArgs) (*LookupJobQueueResult, error) {
		return LookupJobQueue(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupJobQueueResultOutput, *LookupJobQueueResult](outputResult)
}

// A collection of arguments for invoking getJobQueue.
type LookupJobQueueOutputArgs struct {
	// Name of the job queue.
	Name pulumix.Input[string] `pulumi:"name"`
	// Key-value map of resource tags
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupJobQueueOutputArgs) ToOutput() pulumix.Output[*LookupJobQueueArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupJobQueueArgs {
		return &LookupJobQueueArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupJobQueueResultOutput struct{ *pulumi.OutputState }

func (LookupJobQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobQueueResult)(nil)).Elem()
}

func (o LookupJobQueueResultOutput) ToOutput(context.Context) pulumix.Output[*LookupJobQueueResult] {
	return pulumix.Output[*LookupJobQueueResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupJobQueueResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.Arn })
}

func (o LookupJobQueueResultOutput) ComputeEnvironmentOrders() pulumix.GArrayOutput[GetJobQueueComputeEnvironmentOrder, GetJobQueueComputeEnvironmentOrderOutput] {
	value := pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) []GetJobQueueComputeEnvironmentOrder { return v.ComputeEnvironmentOrders })
	return pulumix.GArrayOutput[GetJobQueueComputeEnvironmentOrder, GetJobQueueComputeEnvironmentOrderOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupJobQueueResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.Id })
}

func (o LookupJobQueueResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.Name })
}

func (o LookupJobQueueResultOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) int { return v.Priority })
}

func (o LookupJobQueueResultOutput) SchedulingPolicyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.SchedulingPolicyArn })
}

func (o LookupJobQueueResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.State })
}

func (o LookupJobQueueResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.Status })
}

func (o LookupJobQueueResultOutput) StatusReason() pulumix.Output[string] {
	return pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) string { return v.StatusReason })
}

func (o LookupJobQueueResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupJobQueueResult](o, func(v *LookupJobQueueResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
