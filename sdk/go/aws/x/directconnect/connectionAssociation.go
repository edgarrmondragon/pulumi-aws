// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates a Direct Connect Connection with a LAG.
type ConnectionAssociation struct {
	pulumi.CustomResourceState

	// The ID of the connection.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
	// The ID of the LAG with which to associate the connection.
	LagId pulumix.Output[string] `pulumi:"lagId"`
}

// NewConnectionAssociation registers a new resource with the given unique name, arguments, and options.
func NewConnectionAssociation(ctx *pulumi.Context,
	name string, args *ConnectionAssociationArgs, opts ...pulumi.ResourceOption) (*ConnectionAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.LagId == nil {
		return nil, errors.New("invalid value for required argument 'LagId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionAssociation
	err := ctx.RegisterResource("aws:directconnect/connectionAssociation:ConnectionAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionAssociation gets an existing ConnectionAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionAssociationState, opts ...pulumi.ResourceOption) (*ConnectionAssociation, error) {
	var resource ConnectionAssociation
	err := ctx.ReadResource("aws:directconnect/connectionAssociation:ConnectionAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionAssociation resources.
type connectionAssociationState struct {
	// The ID of the connection.
	ConnectionId *string `pulumi:"connectionId"`
	// The ID of the LAG with which to associate the connection.
	LagId *string `pulumi:"lagId"`
}

type ConnectionAssociationState struct {
	// The ID of the connection.
	ConnectionId pulumix.Input[*string]
	// The ID of the LAG with which to associate the connection.
	LagId pulumix.Input[*string]
}

func (ConnectionAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAssociationState)(nil)).Elem()
}

type connectionAssociationArgs struct {
	// The ID of the connection.
	ConnectionId string `pulumi:"connectionId"`
	// The ID of the LAG with which to associate the connection.
	LagId string `pulumi:"lagId"`
}

// The set of arguments for constructing a ConnectionAssociation resource.
type ConnectionAssociationArgs struct {
	// The ID of the connection.
	ConnectionId pulumix.Input[string]
	// The ID of the LAG with which to associate the connection.
	LagId pulumix.Input[string]
}

func (ConnectionAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAssociationArgs)(nil)).Elem()
}

type ConnectionAssociationOutput struct{ *pulumi.OutputState }

func (ConnectionAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAssociation)(nil)).Elem()
}

func (o ConnectionAssociationOutput) ToConnectionAssociationOutput() ConnectionAssociationOutput {
	return o
}

func (o ConnectionAssociationOutput) ToConnectionAssociationOutputWithContext(ctx context.Context) ConnectionAssociationOutput {
	return o
}

func (o ConnectionAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionAssociation] {
	return pulumix.Output[ConnectionAssociation]{
		OutputState: o.OutputState,
	}
}

// The ID of the connection.
func (o ConnectionAssociationOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectionAssociation](o, func(v ConnectionAssociation) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the LAG with which to associate the connection.
func (o ConnectionAssociationOutput) LagId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectionAssociation](o, func(v ConnectionAssociation) pulumix.Output[string] { return v.LagId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConnectionAssociationOutput{})
}
