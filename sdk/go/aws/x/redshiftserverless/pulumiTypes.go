// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type EndpointAccessVpcEndpoint struct {
	// The network interfaces of the endpoint.. See `Network Interface` below.
	NetworkInterfaces []EndpointAccessVpcEndpointNetworkInterface `pulumi:"networkInterfaces"`
	// The DNS address of the VPC endpoint.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The port that Amazon Redshift Serverless listens on.
	VpcId *string `pulumi:"vpcId"`
}

type EndpointAccessVpcEndpointArgs struct {
	// The network interfaces of the endpoint.. See `Network Interface` below.
	NetworkInterfaces pulumix.Input[[]*EndpointAccessVpcEndpointNetworkInterfaceArgs] `pulumi:"networkInterfaces"`
	// The DNS address of the VPC endpoint.
	VpcEndpointId pulumix.Input[*string] `pulumi:"vpcEndpointId"`
	// The port that Amazon Redshift Serverless listens on.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (EndpointAccessVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpoint)(nil)).Elem()
}

func (i EndpointAccessVpcEndpointArgs) ToEndpointAccessVpcEndpointOutput() EndpointAccessVpcEndpointOutput {
	return i.ToEndpointAccessVpcEndpointOutputWithContext(context.Background())
}

func (i EndpointAccessVpcEndpointArgs) ToEndpointAccessVpcEndpointOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessVpcEndpointOutput)
}

func (i *EndpointAccessVpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointAccessVpcEndpointArgs] {
	return pulumix.Val(i)
}

type EndpointAccessVpcEndpointOutput struct{ *pulumi.OutputState }

func (EndpointAccessVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpoint)(nil)).Elem()
}

func (o EndpointAccessVpcEndpointOutput) ToEndpointAccessVpcEndpointOutput() EndpointAccessVpcEndpointOutput {
	return o
}

func (o EndpointAccessVpcEndpointOutput) ToEndpointAccessVpcEndpointOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointOutput {
	return o
}

func (o EndpointAccessVpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAccessVpcEndpoint] {
	return pulumix.Output[EndpointAccessVpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The network interfaces of the endpoint.. See `Network Interface` below.
func (o EndpointAccessVpcEndpointOutput) NetworkInterfaces() pulumix.GArrayOutput[EndpointAccessVpcEndpointNetworkInterface, EndpointAccessVpcEndpointNetworkInterfaceOutput] {
	value := pulumix.Apply[EndpointAccessVpcEndpoint](o, func(v EndpointAccessVpcEndpoint) []EndpointAccessVpcEndpointNetworkInterface {
		return v.NetworkInterfaces
	})
	return pulumix.GArrayOutput[EndpointAccessVpcEndpointNetworkInterface, EndpointAccessVpcEndpointNetworkInterfaceOutput]{OutputState: value.OutputState}
}

// The DNS address of the VPC endpoint.
func (o EndpointAccessVpcEndpointOutput) VpcEndpointId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpoint](o, func(v EndpointAccessVpcEndpoint) *string { return v.VpcEndpointId })
}

// The port that Amazon Redshift Serverless listens on.
func (o EndpointAccessVpcEndpointOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpoint](o, func(v EndpointAccessVpcEndpoint) *string { return v.VpcId })
}

type EndpointAccessVpcEndpointNetworkInterface struct {
	// The availability Zone.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type EndpointAccessVpcEndpointNetworkInterfaceArgs struct {
	// The availability Zone.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId pulumix.Input[*string] `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress pulumix.Input[*string] `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
}

func (EndpointAccessVpcEndpointNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpointNetworkInterface)(nil)).Elem()
}

func (i EndpointAccessVpcEndpointNetworkInterfaceArgs) ToEndpointAccessVpcEndpointNetworkInterfaceOutput() EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return i.ToEndpointAccessVpcEndpointNetworkInterfaceOutputWithContext(context.Background())
}

func (i EndpointAccessVpcEndpointNetworkInterfaceArgs) ToEndpointAccessVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessVpcEndpointNetworkInterfaceOutput)
}

func (i *EndpointAccessVpcEndpointNetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointAccessVpcEndpointNetworkInterfaceArgs] {
	return pulumix.Val(i)
}

type EndpointAccessVpcEndpointNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (EndpointAccessVpcEndpointNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpointNetworkInterface)(nil)).Elem()
}

func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) ToEndpointAccessVpcEndpointNetworkInterfaceOutput() EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) ToEndpointAccessVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAccessVpcEndpointNetworkInterface] {
	return pulumix.Output[EndpointAccessVpcEndpointNetworkInterface]{
		OutputState: o.OutputState,
	}
}

// The availability Zone.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) AvailabilityZone() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.AvailabilityZone })
}

// The unique identifier of the network interface.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) NetworkInterfaceId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.NetworkInterfaceId })
}

// The IPv4 address of the network interface within the subnet.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) PrivateIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.PrivateIpAddress })
}

// The unique identifier of the subnet.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) SubnetId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.SubnetId })
}

type WorkgroupConfigParameter struct {
	// The key of the parameter. The options are `autoMv`, `datestyle`, `enableCaseSensitiveIdentifier`, `enableUserActivityLogging`, `queryGroup`, `searchPath` and [query monitoring metrics](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) that let you define performance boundaries: `maxQueryCpuTime`, `maxQueryBlocksRead`, `maxScanRowCount`, `maxQueryExecutionTime`, `maxQueryQueueTime`, `maxQueryCpuUsagePercent`, `maxQueryTempBlocksToDisk`, `maxJoinRowCount` and `maxNestedLoopJoinRowCount`.
	ParameterKey string `pulumi:"parameterKey"`
	// The value of the parameter to set.
	ParameterValue string `pulumi:"parameterValue"`
}

type WorkgroupConfigParameterArgs struct {
	// The key of the parameter. The options are `autoMv`, `datestyle`, `enableCaseSensitiveIdentifier`, `enableUserActivityLogging`, `queryGroup`, `searchPath` and [query monitoring metrics](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) that let you define performance boundaries: `maxQueryCpuTime`, `maxQueryBlocksRead`, `maxScanRowCount`, `maxQueryExecutionTime`, `maxQueryQueueTime`, `maxQueryCpuUsagePercent`, `maxQueryTempBlocksToDisk`, `maxJoinRowCount` and `maxNestedLoopJoinRowCount`.
	ParameterKey pulumix.Input[string] `pulumi:"parameterKey"`
	// The value of the parameter to set.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (WorkgroupConfigParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigParameter)(nil)).Elem()
}

func (i WorkgroupConfigParameterArgs) ToWorkgroupConfigParameterOutput() WorkgroupConfigParameterOutput {
	return i.ToWorkgroupConfigParameterOutputWithContext(context.Background())
}

func (i WorkgroupConfigParameterArgs) ToWorkgroupConfigParameterOutputWithContext(ctx context.Context) WorkgroupConfigParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigParameterOutput)
}

func (i *WorkgroupConfigParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupConfigParameterArgs] {
	return pulumix.Val(i)
}

type WorkgroupConfigParameterOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigParameter)(nil)).Elem()
}

func (o WorkgroupConfigParameterOutput) ToWorkgroupConfigParameterOutput() WorkgroupConfigParameterOutput {
	return o
}

func (o WorkgroupConfigParameterOutput) ToWorkgroupConfigParameterOutputWithContext(ctx context.Context) WorkgroupConfigParameterOutput {
	return o
}

func (o WorkgroupConfigParameterOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupConfigParameter] {
	return pulumix.Output[WorkgroupConfigParameter]{
		OutputState: o.OutputState,
	}
}

// The key of the parameter. The options are `autoMv`, `datestyle`, `enableCaseSensitiveIdentifier`, `enableUserActivityLogging`, `queryGroup`, `searchPath` and [query monitoring metrics](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) that let you define performance boundaries: `maxQueryCpuTime`, `maxQueryBlocksRead`, `maxScanRowCount`, `maxQueryExecutionTime`, `maxQueryQueueTime`, `maxQueryCpuUsagePercent`, `maxQueryTempBlocksToDisk`, `maxJoinRowCount` and `maxNestedLoopJoinRowCount`.
func (o WorkgroupConfigParameterOutput) ParameterKey() pulumix.Output[string] {
	return pulumix.Apply[WorkgroupConfigParameter](o, func(v WorkgroupConfigParameter) string { return v.ParameterKey })
}

// The value of the parameter to set.
func (o WorkgroupConfigParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[WorkgroupConfigParameter](o, func(v WorkgroupConfigParameter) string { return v.ParameterValue })
}

type WorkgroupEndpoint struct {
	// The DNS address of the VPC endpoint.
	Address *string `pulumi:"address"`
	// The port that Amazon Redshift Serverless listens on.
	Port *int `pulumi:"port"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints []WorkgroupEndpointVpcEndpoint `pulumi:"vpcEndpoints"`
}

type WorkgroupEndpointArgs struct {
	// The DNS address of the VPC endpoint.
	Address pulumix.Input[*string] `pulumi:"address"`
	// The port that Amazon Redshift Serverless listens on.
	Port pulumix.Input[*int] `pulumi:"port"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints pulumix.Input[[]*WorkgroupEndpointVpcEndpointArgs] `pulumi:"vpcEndpoints"`
}

func (WorkgroupEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpoint)(nil)).Elem()
}

func (i WorkgroupEndpointArgs) ToWorkgroupEndpointOutput() WorkgroupEndpointOutput {
	return i.ToWorkgroupEndpointOutputWithContext(context.Background())
}

func (i WorkgroupEndpointArgs) ToWorkgroupEndpointOutputWithContext(ctx context.Context) WorkgroupEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupEndpointOutput)
}

func (i *WorkgroupEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupEndpointArgs] {
	return pulumix.Val(i)
}

type WorkgroupEndpointOutput struct{ *pulumi.OutputState }

func (WorkgroupEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpoint)(nil)).Elem()
}

func (o WorkgroupEndpointOutput) ToWorkgroupEndpointOutput() WorkgroupEndpointOutput {
	return o
}

func (o WorkgroupEndpointOutput) ToWorkgroupEndpointOutputWithContext(ctx context.Context) WorkgroupEndpointOutput {
	return o
}

func (o WorkgroupEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupEndpoint] {
	return pulumix.Output[WorkgroupEndpoint]{
		OutputState: o.OutputState,
	}
}

// The DNS address of the VPC endpoint.
func (o WorkgroupEndpointOutput) Address() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpoint](o, func(v WorkgroupEndpoint) *string { return v.Address })
}

// The port that Amazon Redshift Serverless listens on.
func (o WorkgroupEndpointOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[WorkgroupEndpoint](o, func(v WorkgroupEndpoint) *int { return v.Port })
}

// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
func (o WorkgroupEndpointOutput) VpcEndpoints() pulumix.GArrayOutput[WorkgroupEndpointVpcEndpoint, WorkgroupEndpointVpcEndpointOutput] {
	value := pulumix.Apply[WorkgroupEndpoint](o, func(v WorkgroupEndpoint) []WorkgroupEndpointVpcEndpoint { return v.VpcEndpoints })
	return pulumix.GArrayOutput[WorkgroupEndpointVpcEndpoint, WorkgroupEndpointVpcEndpointOutput]{OutputState: value.OutputState}
}

type WorkgroupEndpointVpcEndpoint struct {
	// The network interfaces of the endpoint.. See `Network Interface` below.
	NetworkInterfaces []WorkgroupEndpointVpcEndpointNetworkInterface `pulumi:"networkInterfaces"`
	// The DNS address of the VPC endpoint.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The port that Amazon Redshift Serverless listens on.
	VpcId *string `pulumi:"vpcId"`
}

type WorkgroupEndpointVpcEndpointArgs struct {
	// The network interfaces of the endpoint.. See `Network Interface` below.
	NetworkInterfaces pulumix.Input[[]*WorkgroupEndpointVpcEndpointNetworkInterfaceArgs] `pulumi:"networkInterfaces"`
	// The DNS address of the VPC endpoint.
	VpcEndpointId pulumix.Input[*string] `pulumi:"vpcEndpointId"`
	// The port that Amazon Redshift Serverless listens on.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (WorkgroupEndpointVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpointVpcEndpoint)(nil)).Elem()
}

func (i WorkgroupEndpointVpcEndpointArgs) ToWorkgroupEndpointVpcEndpointOutput() WorkgroupEndpointVpcEndpointOutput {
	return i.ToWorkgroupEndpointVpcEndpointOutputWithContext(context.Background())
}

func (i WorkgroupEndpointVpcEndpointArgs) ToWorkgroupEndpointVpcEndpointOutputWithContext(ctx context.Context) WorkgroupEndpointVpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupEndpointVpcEndpointOutput)
}

func (i *WorkgroupEndpointVpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupEndpointVpcEndpointArgs] {
	return pulumix.Val(i)
}

type WorkgroupEndpointVpcEndpointOutput struct{ *pulumi.OutputState }

func (WorkgroupEndpointVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpointVpcEndpoint)(nil)).Elem()
}

func (o WorkgroupEndpointVpcEndpointOutput) ToWorkgroupEndpointVpcEndpointOutput() WorkgroupEndpointVpcEndpointOutput {
	return o
}

func (o WorkgroupEndpointVpcEndpointOutput) ToWorkgroupEndpointVpcEndpointOutputWithContext(ctx context.Context) WorkgroupEndpointVpcEndpointOutput {
	return o
}

func (o WorkgroupEndpointVpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupEndpointVpcEndpoint] {
	return pulumix.Output[WorkgroupEndpointVpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The network interfaces of the endpoint.. See `Network Interface` below.
func (o WorkgroupEndpointVpcEndpointOutput) NetworkInterfaces() pulumix.GArrayOutput[WorkgroupEndpointVpcEndpointNetworkInterface, WorkgroupEndpointVpcEndpointNetworkInterfaceOutput] {
	value := pulumix.Apply[WorkgroupEndpointVpcEndpoint](o, func(v WorkgroupEndpointVpcEndpoint) []WorkgroupEndpointVpcEndpointNetworkInterface {
		return v.NetworkInterfaces
	})
	return pulumix.GArrayOutput[WorkgroupEndpointVpcEndpointNetworkInterface, WorkgroupEndpointVpcEndpointNetworkInterfaceOutput]{OutputState: value.OutputState}
}

// The DNS address of the VPC endpoint.
func (o WorkgroupEndpointVpcEndpointOutput) VpcEndpointId() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpointVpcEndpoint](o, func(v WorkgroupEndpointVpcEndpoint) *string { return v.VpcEndpointId })
}

// The port that Amazon Redshift Serverless listens on.
func (o WorkgroupEndpointVpcEndpointOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpointVpcEndpoint](o, func(v WorkgroupEndpointVpcEndpoint) *string { return v.VpcId })
}

type WorkgroupEndpointVpcEndpointNetworkInterface struct {
	// The availability Zone.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type WorkgroupEndpointVpcEndpointNetworkInterfaceArgs struct {
	// The availability Zone.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId pulumix.Input[*string] `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress pulumix.Input[*string] `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
}

func (WorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpointVpcEndpointNetworkInterface)(nil)).Elem()
}

func (i WorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ToWorkgroupEndpointVpcEndpointNetworkInterfaceOutput() WorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return i.ToWorkgroupEndpointVpcEndpointNetworkInterfaceOutputWithContext(context.Background())
}

func (i WorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ToWorkgroupEndpointVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) WorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupEndpointVpcEndpointNetworkInterfaceOutput)
}

func (i *WorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkgroupEndpointVpcEndpointNetworkInterfaceArgs] {
	return pulumix.Val(i)
}

type WorkgroupEndpointVpcEndpointNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpointVpcEndpointNetworkInterface)(nil)).Elem()
}

func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ToWorkgroupEndpointVpcEndpointNetworkInterfaceOutput() WorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ToWorkgroupEndpointVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) WorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[WorkgroupEndpointVpcEndpointNetworkInterface] {
	return pulumix.Output[WorkgroupEndpointVpcEndpointNetworkInterface]{
		OutputState: o.OutputState,
	}
}

// The availability Zone.
func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) AvailabilityZone() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpointVpcEndpointNetworkInterface](o, func(v WorkgroupEndpointVpcEndpointNetworkInterface) *string { return v.AvailabilityZone })
}

// The unique identifier of the network interface.
func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) NetworkInterfaceId() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpointVpcEndpointNetworkInterface](o, func(v WorkgroupEndpointVpcEndpointNetworkInterface) *string { return v.NetworkInterfaceId })
}

// The IPv4 address of the network interface within the subnet.
func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) PrivateIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpointVpcEndpointNetworkInterface](o, func(v WorkgroupEndpointVpcEndpointNetworkInterface) *string { return v.PrivateIpAddress })
}

// The unique identifier of the subnet.
func (o WorkgroupEndpointVpcEndpointNetworkInterfaceOutput) SubnetId() pulumix.Output[*string] {
	return pulumix.Apply[WorkgroupEndpointVpcEndpointNetworkInterface](o, func(v WorkgroupEndpointVpcEndpointNetworkInterface) *string { return v.SubnetId })
}

type GetWorkgroupEndpoint struct {
	// The DNS address of the VPC endpoint.
	Address string `pulumi:"address"`
	// The port that Amazon Redshift Serverless listens on.
	Port int `pulumi:"port"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints []GetWorkgroupEndpointVpcEndpoint `pulumi:"vpcEndpoints"`
}

type GetWorkgroupEndpointArgs struct {
	// The DNS address of the VPC endpoint.
	Address pulumix.Input[string] `pulumi:"address"`
	// The port that Amazon Redshift Serverless listens on.
	Port pulumix.Input[int] `pulumi:"port"`
	// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
	VpcEndpoints pulumix.Input[[]*GetWorkgroupEndpointVpcEndpointArgs] `pulumi:"vpcEndpoints"`
}

func (GetWorkgroupEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkgroupEndpoint)(nil)).Elem()
}

func (i GetWorkgroupEndpointArgs) ToGetWorkgroupEndpointOutput() GetWorkgroupEndpointOutput {
	return i.ToGetWorkgroupEndpointOutputWithContext(context.Background())
}

func (i GetWorkgroupEndpointArgs) ToGetWorkgroupEndpointOutputWithContext(ctx context.Context) GetWorkgroupEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkgroupEndpointOutput)
}

func (i *GetWorkgroupEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*GetWorkgroupEndpointArgs] {
	return pulumix.Val(i)
}

type GetWorkgroupEndpointOutput struct{ *pulumi.OutputState }

func (GetWorkgroupEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkgroupEndpoint)(nil)).Elem()
}

func (o GetWorkgroupEndpointOutput) ToGetWorkgroupEndpointOutput() GetWorkgroupEndpointOutput {
	return o
}

func (o GetWorkgroupEndpointOutput) ToGetWorkgroupEndpointOutputWithContext(ctx context.Context) GetWorkgroupEndpointOutput {
	return o
}

func (o GetWorkgroupEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[GetWorkgroupEndpoint] {
	return pulumix.Output[GetWorkgroupEndpoint]{
		OutputState: o.OutputState,
	}
}

// The DNS address of the VPC endpoint.
func (o GetWorkgroupEndpointOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpoint](o, func(v GetWorkgroupEndpoint) string { return v.Address })
}

// The port that Amazon Redshift Serverless listens on.
func (o GetWorkgroupEndpointOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetWorkgroupEndpoint](o, func(v GetWorkgroupEndpoint) int { return v.Port })
}

// The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.
func (o GetWorkgroupEndpointOutput) VpcEndpoints() pulumix.GArrayOutput[GetWorkgroupEndpointVpcEndpoint, GetWorkgroupEndpointVpcEndpointOutput] {
	value := pulumix.Apply[GetWorkgroupEndpoint](o, func(v GetWorkgroupEndpoint) []GetWorkgroupEndpointVpcEndpoint { return v.VpcEndpoints })
	return pulumix.GArrayOutput[GetWorkgroupEndpointVpcEndpoint, GetWorkgroupEndpointVpcEndpointOutput]{OutputState: value.OutputState}
}

type GetWorkgroupEndpointVpcEndpoint struct {
	// The network interfaces of the endpoint.. See `Network Interface` below.
	NetworkInterfaces []GetWorkgroupEndpointVpcEndpointNetworkInterface `pulumi:"networkInterfaces"`
	// The DNS address of the VPC endpoint.
	VpcEndpointId string `pulumi:"vpcEndpointId"`
	// The port that Amazon Redshift Serverless listens on.
	VpcId string `pulumi:"vpcId"`
}

type GetWorkgroupEndpointVpcEndpointArgs struct {
	// The network interfaces of the endpoint.. See `Network Interface` below.
	NetworkInterfaces pulumix.Input[[]*GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs] `pulumi:"networkInterfaces"`
	// The DNS address of the VPC endpoint.
	VpcEndpointId pulumix.Input[string] `pulumi:"vpcEndpointId"`
	// The port that Amazon Redshift Serverless listens on.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (GetWorkgroupEndpointVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkgroupEndpointVpcEndpoint)(nil)).Elem()
}

func (i GetWorkgroupEndpointVpcEndpointArgs) ToGetWorkgroupEndpointVpcEndpointOutput() GetWorkgroupEndpointVpcEndpointOutput {
	return i.ToGetWorkgroupEndpointVpcEndpointOutputWithContext(context.Background())
}

func (i GetWorkgroupEndpointVpcEndpointArgs) ToGetWorkgroupEndpointVpcEndpointOutputWithContext(ctx context.Context) GetWorkgroupEndpointVpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkgroupEndpointVpcEndpointOutput)
}

func (i *GetWorkgroupEndpointVpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*GetWorkgroupEndpointVpcEndpointArgs] {
	return pulumix.Val(i)
}

type GetWorkgroupEndpointVpcEndpointOutput struct{ *pulumi.OutputState }

func (GetWorkgroupEndpointVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkgroupEndpointVpcEndpoint)(nil)).Elem()
}

func (o GetWorkgroupEndpointVpcEndpointOutput) ToGetWorkgroupEndpointVpcEndpointOutput() GetWorkgroupEndpointVpcEndpointOutput {
	return o
}

func (o GetWorkgroupEndpointVpcEndpointOutput) ToGetWorkgroupEndpointVpcEndpointOutputWithContext(ctx context.Context) GetWorkgroupEndpointVpcEndpointOutput {
	return o
}

func (o GetWorkgroupEndpointVpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[GetWorkgroupEndpointVpcEndpoint] {
	return pulumix.Output[GetWorkgroupEndpointVpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The network interfaces of the endpoint.. See `Network Interface` below.
func (o GetWorkgroupEndpointVpcEndpointOutput) NetworkInterfaces() pulumix.GArrayOutput[GetWorkgroupEndpointVpcEndpointNetworkInterface, GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput] {
	value := pulumix.Apply[GetWorkgroupEndpointVpcEndpoint](o, func(v GetWorkgroupEndpointVpcEndpoint) []GetWorkgroupEndpointVpcEndpointNetworkInterface {
		return v.NetworkInterfaces
	})
	return pulumix.GArrayOutput[GetWorkgroupEndpointVpcEndpointNetworkInterface, GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput]{OutputState: value.OutputState}
}

// The DNS address of the VPC endpoint.
func (o GetWorkgroupEndpointVpcEndpointOutput) VpcEndpointId() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpointVpcEndpoint](o, func(v GetWorkgroupEndpointVpcEndpoint) string { return v.VpcEndpointId })
}

// The port that Amazon Redshift Serverless listens on.
func (o GetWorkgroupEndpointVpcEndpointOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpointVpcEndpoint](o, func(v GetWorkgroupEndpointVpcEndpoint) string { return v.VpcId })
}

type GetWorkgroupEndpointVpcEndpointNetworkInterface struct {
	// The availability Zone.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId string `pulumi:"subnetId"`
}

type GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs struct {
	// The availability Zone.
	AvailabilityZone pulumix.Input[string] `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId pulumix.Input[string] `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress pulumix.Input[string] `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId pulumix.Input[string] `pulumi:"subnetId"`
}

func (GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkgroupEndpointVpcEndpointNetworkInterface)(nil)).Elem()
}

func (i GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ToGetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput() GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return i.ToGetWorkgroupEndpointVpcEndpointNetworkInterfaceOutputWithContext(context.Background())
}

func (i GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ToGetWorkgroupEndpointVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput)
}

func (i *GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetWorkgroupEndpointVpcEndpointNetworkInterfaceArgs] {
	return pulumix.Val(i)
}

type GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkgroupEndpointVpcEndpointNetworkInterface)(nil)).Elem()
}

func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ToGetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput() GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ToGetWorkgroupEndpointVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[GetWorkgroupEndpointVpcEndpointNetworkInterface] {
	return pulumix.Output[GetWorkgroupEndpointVpcEndpointNetworkInterface]{
		OutputState: o.OutputState,
	}
}

// The availability Zone.
func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpointVpcEndpointNetworkInterface](o, func(v GetWorkgroupEndpointVpcEndpointNetworkInterface) string { return v.AvailabilityZone })
}

// The unique identifier of the network interface.
func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) NetworkInterfaceId() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpointVpcEndpointNetworkInterface](o, func(v GetWorkgroupEndpointVpcEndpointNetworkInterface) string { return v.NetworkInterfaceId })
}

// The IPv4 address of the network interface within the subnet.
func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) PrivateIpAddress() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpointVpcEndpointNetworkInterface](o, func(v GetWorkgroupEndpointVpcEndpointNetworkInterface) string { return v.PrivateIpAddress })
}

// The unique identifier of the subnet.
func (o GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[GetWorkgroupEndpointVpcEndpointNetworkInterface](o, func(v GetWorkgroupEndpointVpcEndpointNetworkInterface) string { return v.SubnetId })
}

func init() {
	pulumi.RegisterOutputType(EndpointAccessVpcEndpointOutput{})
	pulumi.RegisterOutputType(EndpointAccessVpcEndpointNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigParameterOutput{})
	pulumi.RegisterOutputType(WorkgroupEndpointOutput{})
	pulumi.RegisterOutputType(WorkgroupEndpointVpcEndpointOutput{})
	pulumi.RegisterOutputType(WorkgroupEndpointVpcEndpointNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(GetWorkgroupEndpointOutput{})
	pulumi.RegisterOutputType(GetWorkgroupEndpointVpcEndpointOutput{})
	pulumi.RegisterOutputType(GetWorkgroupEndpointVpcEndpointNetworkInterfaceOutput{})
}
