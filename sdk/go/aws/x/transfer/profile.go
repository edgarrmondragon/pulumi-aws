// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Transfer AS2 Profile resource.
type Profile struct {
	pulumi.CustomResourceState

	// The ARN of the profile.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
	As2Id pulumix.Output[string] `pulumi:"as2Id"`
	// The list of certificate Ids from the imported certificate operation.
	CertificateIds pulumix.ArrayOutput[string] `pulumi:"certificateIds"`
	// The unique identifier for the AS2 profile.
	ProfileId pulumix.Output[string] `pulumi:"profileId"`
	// The profile type should be LOCAL or PARTNER.
	ProfileType pulumix.Output[string] `pulumi:"profileType"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.As2Id == nil {
		return nil, errors.New("invalid value for required argument 'As2Id'")
	}
	if args.ProfileType == nil {
		return nil, errors.New("invalid value for required argument 'ProfileType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("aws:transfer/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("aws:transfer/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// The ARN of the profile.
	Arn *string `pulumi:"arn"`
	// The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
	As2Id *string `pulumi:"as2Id"`
	// The list of certificate Ids from the imported certificate operation.
	CertificateIds []string `pulumi:"certificateIds"`
	// The unique identifier for the AS2 profile.
	ProfileId *string `pulumi:"profileId"`
	// The profile type should be LOCAL or PARTNER.
	ProfileType *string `pulumi:"profileType"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ProfileState struct {
	// The ARN of the profile.
	Arn pulumix.Input[*string]
	// The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
	As2Id pulumix.Input[*string]
	// The list of certificate Ids from the imported certificate operation.
	CertificateIds pulumix.Input[[]string]
	// The unique identifier for the AS2 profile.
	ProfileId pulumix.Input[*string]
	// The profile type should be LOCAL or PARTNER.
	ProfileType pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
	As2Id string `pulumi:"as2Id"`
	// The list of certificate Ids from the imported certificate operation.
	CertificateIds []string `pulumi:"certificateIds"`
	// The profile type should be LOCAL or PARTNER.
	ProfileType string `pulumi:"profileType"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
	As2Id pulumix.Input[string]
	// The list of certificate Ids from the imported certificate operation.
	CertificateIds pulumix.Input[[]string]
	// The profile type should be LOCAL or PARTNER.
	ProfileType pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

func (o ProfileOutput) ToOutput(ctx context.Context) pulumix.Output[Profile] {
	return pulumix.Output[Profile]{
		OutputState: o.OutputState,
	}
}

// The ARN of the profile.
func (o ProfileOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The As2Id is the AS2 name as defined in the RFC 4130. For inbound ttransfers this is the AS2 From Header for the AS2 messages sent from the partner. For Outbound messages this is the AS2 To Header for the AS2 messages sent to the partner. his ID cannot include spaces.
func (o ProfileOutput) As2Id() pulumix.Output[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[string] { return v.As2Id })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of certificate Ids from the imported certificate operation.
func (o ProfileOutput) CertificateIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.ArrayOutput[string] { return v.CertificateIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The unique identifier for the AS2 profile.
func (o ProfileOutput) ProfileId() pulumix.Output[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[string] { return v.ProfileId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The profile type should be LOCAL or PARTNER.
func (o ProfileOutput) ProfileType() pulumix.Output[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.Output[string] { return v.ProfileType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ProfileOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ProfileOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Profile](o, func(v Profile) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ProfileOutput{})
}
