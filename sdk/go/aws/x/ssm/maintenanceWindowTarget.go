// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SSM Maintenance Window Target resource
type MaintenanceWindowTarget struct {
	pulumi.CustomResourceState

	// The description of the maintenance window target.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The name of the maintenance window target.
	Name pulumix.Output[string] `pulumi:"name"`
	// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
	OwnerInformation pulumix.Output[*string] `pulumi:"ownerInformation"`
	// The type of target being registered with the Maintenance Window. Possible values are `INSTANCE` and `RESOURCE_GROUP`.
	ResourceType pulumix.Output[string] `pulumi:"resourceType"`
	// The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs. You can specify targets using instance IDs, resource group names, or tags that have been applied to instances. For more information about these examples formats see
	// (https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html)
	Targets pulumix.GArrayOutput[MaintenanceWindowTargetTarget, MaintenanceWindowTargetTargetOutput] `pulumi:"targets"`
	// The Id of the maintenance window to register the target with.
	WindowId pulumix.Output[string] `pulumi:"windowId"`
}

// NewMaintenanceWindowTarget registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindowTarget(ctx *pulumi.Context,
	name string, args *MaintenanceWindowTargetArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindowTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	if args.WindowId == nil {
		return nil, errors.New("invalid value for required argument 'WindowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MaintenanceWindowTarget
	err := ctx.RegisterResource("aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindowTarget gets an existing MaintenanceWindowTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindowTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowTargetState, opts ...pulumi.ResourceOption) (*MaintenanceWindowTarget, error) {
	var resource MaintenanceWindowTarget
	err := ctx.ReadResource("aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindowTarget resources.
type maintenanceWindowTargetState struct {
	// The description of the maintenance window target.
	Description *string `pulumi:"description"`
	// The name of the maintenance window target.
	Name *string `pulumi:"name"`
	// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
	OwnerInformation *string `pulumi:"ownerInformation"`
	// The type of target being registered with the Maintenance Window. Possible values are `INSTANCE` and `RESOURCE_GROUP`.
	ResourceType *string `pulumi:"resourceType"`
	// The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs. You can specify targets using instance IDs, resource group names, or tags that have been applied to instances. For more information about these examples formats see
	// (https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html)
	Targets []MaintenanceWindowTargetTarget `pulumi:"targets"`
	// The Id of the maintenance window to register the target with.
	WindowId *string `pulumi:"windowId"`
}

type MaintenanceWindowTargetState struct {
	// The description of the maintenance window target.
	Description pulumix.Input[*string]
	// The name of the maintenance window target.
	Name pulumix.Input[*string]
	// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
	OwnerInformation pulumix.Input[*string]
	// The type of target being registered with the Maintenance Window. Possible values are `INSTANCE` and `RESOURCE_GROUP`.
	ResourceType pulumix.Input[*string]
	// The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs. You can specify targets using instance IDs, resource group names, or tags that have been applied to instances. For more information about these examples formats see
	// (https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html)
	Targets pulumix.Input[[]*MaintenanceWindowTargetTargetArgs]
	// The Id of the maintenance window to register the target with.
	WindowId pulumix.Input[*string]
}

func (MaintenanceWindowTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTargetState)(nil)).Elem()
}

type maintenanceWindowTargetArgs struct {
	// The description of the maintenance window target.
	Description *string `pulumi:"description"`
	// The name of the maintenance window target.
	Name *string `pulumi:"name"`
	// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
	OwnerInformation *string `pulumi:"ownerInformation"`
	// The type of target being registered with the Maintenance Window. Possible values are `INSTANCE` and `RESOURCE_GROUP`.
	ResourceType string `pulumi:"resourceType"`
	// The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs. You can specify targets using instance IDs, resource group names, or tags that have been applied to instances. For more information about these examples formats see
	// (https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html)
	Targets []MaintenanceWindowTargetTarget `pulumi:"targets"`
	// The Id of the maintenance window to register the target with.
	WindowId string `pulumi:"windowId"`
}

// The set of arguments for constructing a MaintenanceWindowTarget resource.
type MaintenanceWindowTargetArgs struct {
	// The description of the maintenance window target.
	Description pulumix.Input[*string]
	// The name of the maintenance window target.
	Name pulumix.Input[*string]
	// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
	OwnerInformation pulumix.Input[*string]
	// The type of target being registered with the Maintenance Window. Possible values are `INSTANCE` and `RESOURCE_GROUP`.
	ResourceType pulumix.Input[string]
	// The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs. You can specify targets using instance IDs, resource group names, or tags that have been applied to instances. For more information about these examples formats see
	// (https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html)
	Targets pulumix.Input[[]*MaintenanceWindowTargetTargetArgs]
	// The Id of the maintenance window to register the target with.
	WindowId pulumix.Input[string]
}

func (MaintenanceWindowTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTargetArgs)(nil)).Elem()
}

type MaintenanceWindowTargetOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTarget)(nil)).Elem()
}

func (o MaintenanceWindowTargetOutput) ToMaintenanceWindowTargetOutput() MaintenanceWindowTargetOutput {
	return o
}

func (o MaintenanceWindowTargetOutput) ToMaintenanceWindowTargetOutputWithContext(ctx context.Context) MaintenanceWindowTargetOutput {
	return o
}

func (o MaintenanceWindowTargetOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTarget] {
	return pulumix.Output[MaintenanceWindowTarget]{
		OutputState: o.OutputState,
	}
}

// The description of the maintenance window target.
func (o MaintenanceWindowTargetOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindowTarget](o, func(v MaintenanceWindowTarget) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the maintenance window target.
func (o MaintenanceWindowTargetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTarget](o, func(v MaintenanceWindowTarget) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this Maintenance Window.
func (o MaintenanceWindowTargetOutput) OwnerInformation() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindowTarget](o, func(v MaintenanceWindowTarget) pulumix.Output[*string] { return v.OwnerInformation })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The type of target being registered with the Maintenance Window. Possible values are `INSTANCE` and `RESOURCE_GROUP`.
func (o MaintenanceWindowTargetOutput) ResourceType() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTarget](o, func(v MaintenanceWindowTarget) pulumix.Output[string] { return v.ResourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs. You can specify targets using instance IDs, resource group names, or tags that have been applied to instances. For more information about these examples formats see
// (https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html)
func (o MaintenanceWindowTargetOutput) Targets() pulumix.GArrayOutput[MaintenanceWindowTargetTarget, MaintenanceWindowTargetTargetOutput] {
	value := pulumix.Apply[MaintenanceWindowTarget](o, func(v MaintenanceWindowTarget) pulumix.GArrayOutput[MaintenanceWindowTargetTarget, MaintenanceWindowTargetTargetOutput] {
		return v.Targets
	})
	unwrapped := pulumix.Flatten[[]MaintenanceWindowTargetTarget, pulumix.GArrayOutput[MaintenanceWindowTargetTarget, MaintenanceWindowTargetTargetOutput]](value)
	return pulumix.GArrayOutput[MaintenanceWindowTargetTarget, MaintenanceWindowTargetTargetOutput]{OutputState: unwrapped.OutputState}
}

// The Id of the maintenance window to register the target with.
func (o MaintenanceWindowTargetOutput) WindowId() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTarget](o, func(v MaintenanceWindowTarget) pulumix.Output[string] { return v.WindowId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MaintenanceWindowTargetOutput{})
}
