// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Lex Bot.
func LookupBot(ctx *pulumi.Context, args *LookupBotArgs, opts ...pulumi.InvokeOption) (*LookupBotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBotResult
	err := ctx.Invoke("aws:lex/getBot:getBot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBot.
type LookupBotArgs struct {
	// Name of the bot. The name is case sensitive.
	Name string `pulumi:"name"`
	// Version or alias of the bot.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getBot.
type LookupBotResult struct {
	// ARN of the bot.
	Arn string `pulumi:"arn"`
	// Checksum of the bot used to identify a specific revision of the bot's `$LATEST` version.
	Checksum string `pulumi:"checksum"`
	// If this Amazon Lex Bot is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.
	ChildDirected bool `pulumi:"childDirected"`
	// Date that the bot was created.
	CreatedDate string `pulumi:"createdDate"`
	// Description of the bot.
	Description string `pulumi:"description"`
	// When set to true user utterances are sent to Amazon Comprehend for sentiment analysis.
	DetectSentiment bool `pulumi:"detectSentiment"`
	// Set to true if natural language understanding improvements are enabled.
	EnableModelImprovements bool `pulumi:"enableModelImprovements"`
	// If the `status` is `FAILED`, the reason why the bot failed to build.
	FailureReason string `pulumi:"failureReason"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.
	IdleSessionTtlInSeconds int `pulumi:"idleSessionTtlInSeconds"`
	// Date that the bot was updated.
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	// Target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot.
	Locale string `pulumi:"locale"`
	// Name of the bot, case sensitive.
	Name string `pulumi:"name"`
	// The threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a PostContent or PostText response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.
	NluIntentConfidenceThreshold float64 `pulumi:"nluIntentConfidenceThreshold"`
	// Status of the bot.
	Status string `pulumi:"status"`
	// Version of the bot. For a new bot, the version is always `$LATEST`.
	Version *string `pulumi:"version"`
	// Amazon Polly voice ID that the Amazon Lex Bot uses for voice interactions with the user.
	VoiceId string `pulumi:"voiceId"`
}

func LookupBotOutput(ctx *pulumi.Context, args LookupBotOutputArgs, opts ...pulumi.InvokeOption) LookupBotResultOutput {
	outputResult := pulumix.ApplyErr[*LookupBotArgs](args.ToOutput(), func(plainArgs *LookupBotArgs) (*LookupBotResult, error) {
		return LookupBot(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupBotResultOutput, *LookupBotResult](outputResult)
}

// A collection of arguments for invoking getBot.
type LookupBotOutputArgs struct {
	// Name of the bot. The name is case sensitive.
	Name pulumix.Input[string] `pulumi:"name"`
	// Version or alias of the bot.
	Version pulumix.Input[*string] `pulumi:"version"`
}

func (args LookupBotOutputArgs) ToOutput() pulumix.Output[*LookupBotArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Version.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupBotArgs {
		return &LookupBotArgs{
			Name:    resolvedArgs[0].(string),
			Version: resolvedArgs[1].(*string),
		}
	})
}

type LookupBotResultOutput struct{ *pulumi.OutputState }

func (LookupBotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotResult)(nil)).Elem()
}

func (o LookupBotResultOutput) ToOutput(context.Context) pulumix.Output[*LookupBotResult] {
	return pulumix.Output[*LookupBotResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupBotResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Arn })
}

func (o LookupBotResultOutput) Checksum() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Checksum })
}

func (o LookupBotResultOutput) ChildDirected() pulumix.Output[bool] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) bool { return v.ChildDirected })
}

func (o LookupBotResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.CreatedDate })
}

func (o LookupBotResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Description })
}

func (o LookupBotResultOutput) DetectSentiment() pulumix.Output[bool] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) bool { return v.DetectSentiment })
}

func (o LookupBotResultOutput) EnableModelImprovements() pulumix.Output[bool] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) bool { return v.EnableModelImprovements })
}

func (o LookupBotResultOutput) FailureReason() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.FailureReason })
}

func (o LookupBotResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Id })
}

func (o LookupBotResultOutput) IdleSessionTtlInSeconds() pulumix.Output[int] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) int { return v.IdleSessionTtlInSeconds })
}

func (o LookupBotResultOutput) LastUpdatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.LastUpdatedDate })
}

func (o LookupBotResultOutput) Locale() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Locale })
}

func (o LookupBotResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Name })
}

func (o LookupBotResultOutput) NluIntentConfidenceThreshold() pulumix.Output[float64] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) float64 { return v.NluIntentConfidenceThreshold })
}

func (o LookupBotResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.Status })
}

func (o LookupBotResultOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) *string { return v.Version })
}

func (o LookupBotResultOutput) VoiceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotResult](o, func(v *LookupBotResult) string { return v.VoiceId })
}
