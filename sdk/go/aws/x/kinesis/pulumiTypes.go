// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AnalyticsApplicationCloudwatchLoggingOptions struct {
	// The ARN of the Kinesis Analytics Application.
	Id *string `pulumi:"id"`
	// The ARN of the CloudWatch Log Stream.
	LogStreamArn string `pulumi:"logStreamArn"`
	// The ARN of the IAM Role used to send application messages.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationCloudwatchLoggingOptionsArgs struct {
	// The ARN of the Kinesis Analytics Application.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The ARN of the CloudWatch Log Stream.
	LogStreamArn pulumix.Input[string] `pulumi:"logStreamArn"`
	// The ARN of the IAM Role used to send application messages.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i AnalyticsApplicationCloudwatchLoggingOptionsArgs) ToAnalyticsApplicationCloudwatchLoggingOptionsOutput() AnalyticsApplicationCloudwatchLoggingOptionsOutput {
	return i.ToAnalyticsApplicationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i AnalyticsApplicationCloudwatchLoggingOptionsArgs) ToAnalyticsApplicationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) AnalyticsApplicationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationCloudwatchLoggingOptionsOutput)
}

func (i *AnalyticsApplicationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o AnalyticsApplicationCloudwatchLoggingOptionsOutput) ToAnalyticsApplicationCloudwatchLoggingOptionsOutput() AnalyticsApplicationCloudwatchLoggingOptionsOutput {
	return o
}

func (o AnalyticsApplicationCloudwatchLoggingOptionsOutput) ToAnalyticsApplicationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) AnalyticsApplicationCloudwatchLoggingOptionsOutput {
	return o
}

func (o AnalyticsApplicationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationCloudwatchLoggingOptions] {
	return pulumix.Output[AnalyticsApplicationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Analytics Application.
func (o AnalyticsApplicationCloudwatchLoggingOptionsOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationCloudwatchLoggingOptions](o, func(v AnalyticsApplicationCloudwatchLoggingOptions) *string { return v.Id })
}

// The ARN of the CloudWatch Log Stream.
func (o AnalyticsApplicationCloudwatchLoggingOptionsOutput) LogStreamArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationCloudwatchLoggingOptions](o, func(v AnalyticsApplicationCloudwatchLoggingOptions) string { return v.LogStreamArn })
}

// The ARN of the IAM Role used to send application messages.
func (o AnalyticsApplicationCloudwatchLoggingOptionsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationCloudwatchLoggingOptions](o, func(v AnalyticsApplicationCloudwatchLoggingOptions) string { return v.RoleArn })
}

type AnalyticsApplicationInputs struct {
	// The ARN of the Kinesis Analytics Application.
	Id *string `pulumi:"id"`
	// The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesisStream`.
	// See Kinesis Firehose below for more details.
	KinesisFirehose *AnalyticsApplicationInputsKinesisFirehose `pulumi:"kinesisFirehose"`
	// The Kinesis Stream configuration for the streaming source. Conflicts with `kinesisFirehose`.
	// See Kinesis Stream below for more details.
	KinesisStream *AnalyticsApplicationInputsKinesisStream `pulumi:"kinesisStream"`
	// The Name Prefix to use when creating an in-application stream.
	NamePrefix string `pulumi:"namePrefix"`
	// The number of Parallel in-application streams to create.
	// See Parallelism below for more details.
	Parallelism *AnalyticsApplicationInputsParallelism `pulumi:"parallelism"`
	// The Processing Configuration to transform records as they are received from the stream.
	// See Processing Configuration below for more details.
	ProcessingConfiguration *AnalyticsApplicationInputsProcessingConfiguration `pulumi:"processingConfiguration"`
	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	Schema AnalyticsApplicationInputsSchema `pulumi:"schema"`
	// The point at which the application starts processing records from the streaming source.
	// See Starting Position Configuration below for more details.
	StartingPositionConfigurations []AnalyticsApplicationInputsStartingPositionConfiguration `pulumi:"startingPositionConfigurations"`
	StreamNames                    []string                                                  `pulumi:"streamNames"`
}

type AnalyticsApplicationInputsArgs struct {
	// The ARN of the Kinesis Analytics Application.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesisStream`.
	// See Kinesis Firehose below for more details.
	KinesisFirehose pulumix.Input[*AnalyticsApplicationInputsKinesisFirehoseArgs] `pulumi:"kinesisFirehose"`
	// The Kinesis Stream configuration for the streaming source. Conflicts with `kinesisFirehose`.
	// See Kinesis Stream below for more details.
	KinesisStream pulumix.Input[*AnalyticsApplicationInputsKinesisStreamArgs] `pulumi:"kinesisStream"`
	// The Name Prefix to use when creating an in-application stream.
	NamePrefix pulumix.Input[string] `pulumi:"namePrefix"`
	// The number of Parallel in-application streams to create.
	// See Parallelism below for more details.
	Parallelism pulumix.Input[*AnalyticsApplicationInputsParallelismArgs] `pulumi:"parallelism"`
	// The Processing Configuration to transform records as they are received from the stream.
	// See Processing Configuration below for more details.
	ProcessingConfiguration pulumix.Input[*AnalyticsApplicationInputsProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	Schema pulumix.Input[*AnalyticsApplicationInputsSchemaArgs] `pulumi:"schema"`
	// The point at which the application starts processing records from the streaming source.
	// See Starting Position Configuration below for more details.
	StartingPositionConfigurations pulumix.Input[[]*AnalyticsApplicationInputsStartingPositionConfigurationArgs] `pulumi:"startingPositionConfigurations"`
	StreamNames                    pulumix.Input[[]string]                                                       `pulumi:"streamNames"`
}

func (AnalyticsApplicationInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputs)(nil)).Elem()
}

func (i AnalyticsApplicationInputsArgs) ToAnalyticsApplicationInputsOutput() AnalyticsApplicationInputsOutput {
	return i.ToAnalyticsApplicationInputsOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsArgs) ToAnalyticsApplicationInputsOutputWithContext(ctx context.Context) AnalyticsApplicationInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsOutput)
}

func (i *AnalyticsApplicationInputsArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputs)(nil)).Elem()
}

func (o AnalyticsApplicationInputsOutput) ToAnalyticsApplicationInputsOutput() AnalyticsApplicationInputsOutput {
	return o
}

func (o AnalyticsApplicationInputsOutput) ToAnalyticsApplicationInputsOutputWithContext(ctx context.Context) AnalyticsApplicationInputsOutput {
	return o
}

func (o AnalyticsApplicationInputsOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputs] {
	return pulumix.Output[AnalyticsApplicationInputs]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Analytics Application.
func (o AnalyticsApplicationInputsOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) *string { return v.Id })
}

// The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesisStream`.
// See Kinesis Firehose below for more details.
func (o AnalyticsApplicationInputsOutput) KinesisFirehose() pulumix.GPtrOutput[AnalyticsApplicationInputsKinesisFirehose, AnalyticsApplicationInputsKinesisFirehoseOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) *AnalyticsApplicationInputsKinesisFirehose {
		return v.KinesisFirehose
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsKinesisFirehose, AnalyticsApplicationInputsKinesisFirehoseOutput]{OutputState: value.OutputState}
}

// The Kinesis Stream configuration for the streaming source. Conflicts with `kinesisFirehose`.
// See Kinesis Stream below for more details.
func (o AnalyticsApplicationInputsOutput) KinesisStream() pulumix.GPtrOutput[AnalyticsApplicationInputsKinesisStream, AnalyticsApplicationInputsKinesisStreamOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) *AnalyticsApplicationInputsKinesisStream { return v.KinesisStream })
	return pulumix.GPtrOutput[AnalyticsApplicationInputsKinesisStream, AnalyticsApplicationInputsKinesisStreamOutput]{OutputState: value.OutputState}
}

// The Name Prefix to use when creating an in-application stream.
func (o AnalyticsApplicationInputsOutput) NamePrefix() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) string { return v.NamePrefix })
}

// The number of Parallel in-application streams to create.
// See Parallelism below for more details.
func (o AnalyticsApplicationInputsOutput) Parallelism() pulumix.GPtrOutput[AnalyticsApplicationInputsParallelism, AnalyticsApplicationInputsParallelismOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) *AnalyticsApplicationInputsParallelism { return v.Parallelism })
	return pulumix.GPtrOutput[AnalyticsApplicationInputsParallelism, AnalyticsApplicationInputsParallelismOutput]{OutputState: value.OutputState}
}

// The Processing Configuration to transform records as they are received from the stream.
// See Processing Configuration below for more details.
func (o AnalyticsApplicationInputsOutput) ProcessingConfiguration() pulumix.GPtrOutput[AnalyticsApplicationInputsProcessingConfiguration, AnalyticsApplicationInputsProcessingConfigurationOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) *AnalyticsApplicationInputsProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsProcessingConfiguration, AnalyticsApplicationInputsProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// The Schema format of the data in the streaming source. See Source Schema below for more details.
func (o AnalyticsApplicationInputsOutput) Schema() pulumix.GPtrOutput[AnalyticsApplicationInputsSchema, AnalyticsApplicationInputsSchemaOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) AnalyticsApplicationInputsSchema { return v.Schema })
	return pulumix.GPtrOutput[AnalyticsApplicationInputsSchema, AnalyticsApplicationInputsSchemaOutput]{OutputState: value.OutputState}
}

// The point at which the application starts processing records from the streaming source.
// See Starting Position Configuration below for more details.
func (o AnalyticsApplicationInputsOutput) StartingPositionConfigurations() pulumix.GArrayOutput[AnalyticsApplicationInputsStartingPositionConfiguration, AnalyticsApplicationInputsStartingPositionConfigurationOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) []AnalyticsApplicationInputsStartingPositionConfiguration {
		return v.StartingPositionConfigurations
	})
	return pulumix.GArrayOutput[AnalyticsApplicationInputsStartingPositionConfiguration, AnalyticsApplicationInputsStartingPositionConfigurationOutput]{OutputState: value.OutputState}
}

func (o AnalyticsApplicationInputsOutput) StreamNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnalyticsApplicationInputs](o, func(v AnalyticsApplicationInputs) []string { return v.StreamNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type AnalyticsApplicationInputsKinesisFirehose struct {
	// The ARN of the Kinesis Firehose delivery stream.
	ResourceArn string `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationInputsKinesisFirehoseArgs struct {
	// The ARN of the Kinesis Firehose delivery stream.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationInputsKinesisFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsKinesisFirehose)(nil)).Elem()
}

func (i AnalyticsApplicationInputsKinesisFirehoseArgs) ToAnalyticsApplicationInputsKinesisFirehoseOutput() AnalyticsApplicationInputsKinesisFirehoseOutput {
	return i.ToAnalyticsApplicationInputsKinesisFirehoseOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsKinesisFirehoseArgs) ToAnalyticsApplicationInputsKinesisFirehoseOutputWithContext(ctx context.Context) AnalyticsApplicationInputsKinesisFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsKinesisFirehoseOutput)
}

func (i *AnalyticsApplicationInputsKinesisFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsKinesisFirehoseArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsKinesisFirehoseOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsKinesisFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsKinesisFirehose)(nil)).Elem()
}

func (o AnalyticsApplicationInputsKinesisFirehoseOutput) ToAnalyticsApplicationInputsKinesisFirehoseOutput() AnalyticsApplicationInputsKinesisFirehoseOutput {
	return o
}

func (o AnalyticsApplicationInputsKinesisFirehoseOutput) ToAnalyticsApplicationInputsKinesisFirehoseOutputWithContext(ctx context.Context) AnalyticsApplicationInputsKinesisFirehoseOutput {
	return o
}

func (o AnalyticsApplicationInputsKinesisFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsKinesisFirehose] {
	return pulumix.Output[AnalyticsApplicationInputsKinesisFirehose]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Firehose delivery stream.
func (o AnalyticsApplicationInputsKinesisFirehoseOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsKinesisFirehose](o, func(v AnalyticsApplicationInputsKinesisFirehose) string { return v.ResourceArn })
}

// The ARN of the IAM Role used to access the stream.
func (o AnalyticsApplicationInputsKinesisFirehoseOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsKinesisFirehose](o, func(v AnalyticsApplicationInputsKinesisFirehose) string { return v.RoleArn })
}

type AnalyticsApplicationInputsKinesisStream struct {
	// The ARN of the Kinesis Stream.
	ResourceArn string `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationInputsKinesisStreamArgs struct {
	// The ARN of the Kinesis Stream.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationInputsKinesisStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsKinesisStream)(nil)).Elem()
}

func (i AnalyticsApplicationInputsKinesisStreamArgs) ToAnalyticsApplicationInputsKinesisStreamOutput() AnalyticsApplicationInputsKinesisStreamOutput {
	return i.ToAnalyticsApplicationInputsKinesisStreamOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsKinesisStreamArgs) ToAnalyticsApplicationInputsKinesisStreamOutputWithContext(ctx context.Context) AnalyticsApplicationInputsKinesisStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsKinesisStreamOutput)
}

func (i *AnalyticsApplicationInputsKinesisStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsKinesisStreamArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsKinesisStreamOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsKinesisStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsKinesisStream)(nil)).Elem()
}

func (o AnalyticsApplicationInputsKinesisStreamOutput) ToAnalyticsApplicationInputsKinesisStreamOutput() AnalyticsApplicationInputsKinesisStreamOutput {
	return o
}

func (o AnalyticsApplicationInputsKinesisStreamOutput) ToAnalyticsApplicationInputsKinesisStreamOutputWithContext(ctx context.Context) AnalyticsApplicationInputsKinesisStreamOutput {
	return o
}

func (o AnalyticsApplicationInputsKinesisStreamOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsKinesisStream] {
	return pulumix.Output[AnalyticsApplicationInputsKinesisStream]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Stream.
func (o AnalyticsApplicationInputsKinesisStreamOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsKinesisStream](o, func(v AnalyticsApplicationInputsKinesisStream) string { return v.ResourceArn })
}

// The ARN of the IAM Role used to access the stream.
func (o AnalyticsApplicationInputsKinesisStreamOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsKinesisStream](o, func(v AnalyticsApplicationInputsKinesisStream) string { return v.RoleArn })
}

type AnalyticsApplicationInputsParallelism struct {
	// The Count of streams.
	Count *int `pulumi:"count"`
}

type AnalyticsApplicationInputsParallelismArgs struct {
	// The Count of streams.
	Count pulumix.Input[*int] `pulumi:"count"`
}

func (AnalyticsApplicationInputsParallelismArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsParallelism)(nil)).Elem()
}

func (i AnalyticsApplicationInputsParallelismArgs) ToAnalyticsApplicationInputsParallelismOutput() AnalyticsApplicationInputsParallelismOutput {
	return i.ToAnalyticsApplicationInputsParallelismOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsParallelismArgs) ToAnalyticsApplicationInputsParallelismOutputWithContext(ctx context.Context) AnalyticsApplicationInputsParallelismOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsParallelismOutput)
}

func (i *AnalyticsApplicationInputsParallelismArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsParallelismArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsParallelismOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsParallelismOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsParallelism)(nil)).Elem()
}

func (o AnalyticsApplicationInputsParallelismOutput) ToAnalyticsApplicationInputsParallelismOutput() AnalyticsApplicationInputsParallelismOutput {
	return o
}

func (o AnalyticsApplicationInputsParallelismOutput) ToAnalyticsApplicationInputsParallelismOutputWithContext(ctx context.Context) AnalyticsApplicationInputsParallelismOutput {
	return o
}

func (o AnalyticsApplicationInputsParallelismOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsParallelism] {
	return pulumix.Output[AnalyticsApplicationInputsParallelism]{
		OutputState: o.OutputState,
	}
}

// The Count of streams.
func (o AnalyticsApplicationInputsParallelismOutput) Count() pulumix.Output[*int] {
	return pulumix.Apply[AnalyticsApplicationInputsParallelism](o, func(v AnalyticsApplicationInputsParallelism) *int { return v.Count })
}

type AnalyticsApplicationInputsProcessingConfiguration struct {
	// The Lambda function configuration. See Lambda below for more details.
	Lambda AnalyticsApplicationInputsProcessingConfigurationLambda `pulumi:"lambda"`
}

type AnalyticsApplicationInputsProcessingConfigurationArgs struct {
	// The Lambda function configuration. See Lambda below for more details.
	Lambda pulumix.Input[*AnalyticsApplicationInputsProcessingConfigurationLambdaArgs] `pulumi:"lambda"`
}

func (AnalyticsApplicationInputsProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsProcessingConfiguration)(nil)).Elem()
}

func (i AnalyticsApplicationInputsProcessingConfigurationArgs) ToAnalyticsApplicationInputsProcessingConfigurationOutput() AnalyticsApplicationInputsProcessingConfigurationOutput {
	return i.ToAnalyticsApplicationInputsProcessingConfigurationOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsProcessingConfigurationArgs) ToAnalyticsApplicationInputsProcessingConfigurationOutputWithContext(ctx context.Context) AnalyticsApplicationInputsProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsProcessingConfigurationOutput)
}

func (i *AnalyticsApplicationInputsProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsProcessingConfiguration)(nil)).Elem()
}

func (o AnalyticsApplicationInputsProcessingConfigurationOutput) ToAnalyticsApplicationInputsProcessingConfigurationOutput() AnalyticsApplicationInputsProcessingConfigurationOutput {
	return o
}

func (o AnalyticsApplicationInputsProcessingConfigurationOutput) ToAnalyticsApplicationInputsProcessingConfigurationOutputWithContext(ctx context.Context) AnalyticsApplicationInputsProcessingConfigurationOutput {
	return o
}

func (o AnalyticsApplicationInputsProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsProcessingConfiguration] {
	return pulumix.Output[AnalyticsApplicationInputsProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Lambda function configuration. See Lambda below for more details.
func (o AnalyticsApplicationInputsProcessingConfigurationOutput) Lambda() pulumix.GPtrOutput[AnalyticsApplicationInputsProcessingConfigurationLambda, AnalyticsApplicationInputsProcessingConfigurationLambdaOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputsProcessingConfiguration](o, func(v AnalyticsApplicationInputsProcessingConfiguration) AnalyticsApplicationInputsProcessingConfigurationLambda {
		return v.Lambda
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsProcessingConfigurationLambda, AnalyticsApplicationInputsProcessingConfigurationLambdaOutput]{OutputState: value.OutputState}
}

type AnalyticsApplicationInputsProcessingConfigurationLambda struct {
	// The ARN of the Lambda function.
	ResourceArn string `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the Lambda function.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationInputsProcessingConfigurationLambdaArgs struct {
	// The ARN of the Lambda function.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the Lambda function.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationInputsProcessingConfigurationLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsProcessingConfigurationLambda)(nil)).Elem()
}

func (i AnalyticsApplicationInputsProcessingConfigurationLambdaArgs) ToAnalyticsApplicationInputsProcessingConfigurationLambdaOutput() AnalyticsApplicationInputsProcessingConfigurationLambdaOutput {
	return i.ToAnalyticsApplicationInputsProcessingConfigurationLambdaOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsProcessingConfigurationLambdaArgs) ToAnalyticsApplicationInputsProcessingConfigurationLambdaOutputWithContext(ctx context.Context) AnalyticsApplicationInputsProcessingConfigurationLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsProcessingConfigurationLambdaOutput)
}

func (i *AnalyticsApplicationInputsProcessingConfigurationLambdaArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsProcessingConfigurationLambdaArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsProcessingConfigurationLambdaOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsProcessingConfigurationLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsProcessingConfigurationLambda)(nil)).Elem()
}

func (o AnalyticsApplicationInputsProcessingConfigurationLambdaOutput) ToAnalyticsApplicationInputsProcessingConfigurationLambdaOutput() AnalyticsApplicationInputsProcessingConfigurationLambdaOutput {
	return o
}

func (o AnalyticsApplicationInputsProcessingConfigurationLambdaOutput) ToAnalyticsApplicationInputsProcessingConfigurationLambdaOutputWithContext(ctx context.Context) AnalyticsApplicationInputsProcessingConfigurationLambdaOutput {
	return o
}

func (o AnalyticsApplicationInputsProcessingConfigurationLambdaOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsProcessingConfigurationLambda] {
	return pulumix.Output[AnalyticsApplicationInputsProcessingConfigurationLambda]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lambda function.
func (o AnalyticsApplicationInputsProcessingConfigurationLambdaOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsProcessingConfigurationLambda](o, func(v AnalyticsApplicationInputsProcessingConfigurationLambda) string { return v.ResourceArn })
}

// The ARN of the IAM Role used to access the Lambda function.
func (o AnalyticsApplicationInputsProcessingConfigurationLambdaOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsProcessingConfigurationLambda](o, func(v AnalyticsApplicationInputsProcessingConfigurationLambda) string { return v.RoleArn })
}

type AnalyticsApplicationInputsSchema struct {
	// The Record Column mapping for the streaming source data element.
	// See Record Columns below for more details.
	RecordColumns []AnalyticsApplicationInputsSchemaRecordColumn `pulumi:"recordColumns"`
	// The Encoding of the record in the streaming source.
	RecordEncoding *string `pulumi:"recordEncoding"`
	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	RecordFormat AnalyticsApplicationInputsSchemaRecordFormat `pulumi:"recordFormat"`
}

type AnalyticsApplicationInputsSchemaArgs struct {
	// The Record Column mapping for the streaming source data element.
	// See Record Columns below for more details.
	RecordColumns pulumix.Input[[]*AnalyticsApplicationInputsSchemaRecordColumnArgs] `pulumi:"recordColumns"`
	// The Encoding of the record in the streaming source.
	RecordEncoding pulumix.Input[*string] `pulumi:"recordEncoding"`
	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	RecordFormat pulumix.Input[*AnalyticsApplicationInputsSchemaRecordFormatArgs] `pulumi:"recordFormat"`
}

func (AnalyticsApplicationInputsSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchema)(nil)).Elem()
}

func (i AnalyticsApplicationInputsSchemaArgs) ToAnalyticsApplicationInputsSchemaOutput() AnalyticsApplicationInputsSchemaOutput {
	return i.ToAnalyticsApplicationInputsSchemaOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsSchemaArgs) ToAnalyticsApplicationInputsSchemaOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsSchemaOutput)
}

func (i *AnalyticsApplicationInputsSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsSchemaArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsSchemaOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchema)(nil)).Elem()
}

func (o AnalyticsApplicationInputsSchemaOutput) ToAnalyticsApplicationInputsSchemaOutput() AnalyticsApplicationInputsSchemaOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaOutput) ToAnalyticsApplicationInputsSchemaOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsSchema] {
	return pulumix.Output[AnalyticsApplicationInputsSchema]{
		OutputState: o.OutputState,
	}
}

// The Record Column mapping for the streaming source data element.
// See Record Columns below for more details.
func (o AnalyticsApplicationInputsSchemaOutput) RecordColumns() pulumix.GArrayOutput[AnalyticsApplicationInputsSchemaRecordColumn, AnalyticsApplicationInputsSchemaRecordColumnOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputsSchema](o, func(v AnalyticsApplicationInputsSchema) []AnalyticsApplicationInputsSchemaRecordColumn {
		return v.RecordColumns
	})
	return pulumix.GArrayOutput[AnalyticsApplicationInputsSchemaRecordColumn, AnalyticsApplicationInputsSchemaRecordColumnOutput]{OutputState: value.OutputState}
}

// The Encoding of the record in the streaming source.
func (o AnalyticsApplicationInputsSchemaOutput) RecordEncoding() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchema](o, func(v AnalyticsApplicationInputsSchema) *string { return v.RecordEncoding })
}

// The Record Format and mapping information to schematize a record.
// See Record Format below for more details.
func (o AnalyticsApplicationInputsSchemaOutput) RecordFormat() pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormat, AnalyticsApplicationInputsSchemaRecordFormatOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputsSchema](o, func(v AnalyticsApplicationInputsSchema) AnalyticsApplicationInputsSchemaRecordFormat {
		return v.RecordFormat
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormat, AnalyticsApplicationInputsSchemaRecordFormatOutput]{OutputState: value.OutputState}
}

type AnalyticsApplicationInputsSchemaRecordColumn struct {
	// The Mapping reference to the data element.
	Mapping *string `pulumi:"mapping"`
	// Name of the column.
	Name string `pulumi:"name"`
	// The SQL Type of the column.
	SqlType string `pulumi:"sqlType"`
}

type AnalyticsApplicationInputsSchemaRecordColumnArgs struct {
	// The Mapping reference to the data element.
	Mapping pulumix.Input[*string] `pulumi:"mapping"`
	// Name of the column.
	Name pulumix.Input[string] `pulumi:"name"`
	// The SQL Type of the column.
	SqlType pulumix.Input[string] `pulumi:"sqlType"`
}

func (AnalyticsApplicationInputsSchemaRecordColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordColumn)(nil)).Elem()
}

func (i AnalyticsApplicationInputsSchemaRecordColumnArgs) ToAnalyticsApplicationInputsSchemaRecordColumnOutput() AnalyticsApplicationInputsSchemaRecordColumnOutput {
	return i.ToAnalyticsApplicationInputsSchemaRecordColumnOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsSchemaRecordColumnArgs) ToAnalyticsApplicationInputsSchemaRecordColumnOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsSchemaRecordColumnOutput)
}

func (i *AnalyticsApplicationInputsSchemaRecordColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsSchemaRecordColumnArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsSchemaRecordColumnOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsSchemaRecordColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordColumn)(nil)).Elem()
}

func (o AnalyticsApplicationInputsSchemaRecordColumnOutput) ToAnalyticsApplicationInputsSchemaRecordColumnOutput() AnalyticsApplicationInputsSchemaRecordColumnOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordColumnOutput) ToAnalyticsApplicationInputsSchemaRecordColumnOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordColumnOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordColumnOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsSchemaRecordColumn] {
	return pulumix.Output[AnalyticsApplicationInputsSchemaRecordColumn]{
		OutputState: o.OutputState,
	}
}

// The Mapping reference to the data element.
func (o AnalyticsApplicationInputsSchemaRecordColumnOutput) Mapping() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordColumn](o, func(v AnalyticsApplicationInputsSchemaRecordColumn) *string { return v.Mapping })
}

// Name of the column.
func (o AnalyticsApplicationInputsSchemaRecordColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordColumn](o, func(v AnalyticsApplicationInputsSchemaRecordColumn) string { return v.Name })
}

// The SQL Type of the column.
func (o AnalyticsApplicationInputsSchemaRecordColumnOutput) SqlType() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordColumn](o, func(v AnalyticsApplicationInputsSchemaRecordColumn) string { return v.SqlType })
}

type AnalyticsApplicationInputsSchemaRecordFormat struct {
	// The Mapping Information for the record format.
	// See Mapping Parameters below for more details.
	MappingParameters *AnalyticsApplicationInputsSchemaRecordFormatMappingParameters `pulumi:"mappingParameters"`
	// The type of Record Format. Can be `CSV` or `JSON`.
	RecordFormatType *string `pulumi:"recordFormatType"`
}

type AnalyticsApplicationInputsSchemaRecordFormatArgs struct {
	// The Mapping Information for the record format.
	// See Mapping Parameters below for more details.
	MappingParameters pulumix.Input[*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs] `pulumi:"mappingParameters"`
	// The type of Record Format. Can be `CSV` or `JSON`.
	RecordFormatType pulumix.Input[*string] `pulumi:"recordFormatType"`
}

func (AnalyticsApplicationInputsSchemaRecordFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormat)(nil)).Elem()
}

func (i AnalyticsApplicationInputsSchemaRecordFormatArgs) ToAnalyticsApplicationInputsSchemaRecordFormatOutput() AnalyticsApplicationInputsSchemaRecordFormatOutput {
	return i.ToAnalyticsApplicationInputsSchemaRecordFormatOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsSchemaRecordFormatArgs) ToAnalyticsApplicationInputsSchemaRecordFormatOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsSchemaRecordFormatOutput)
}

func (i *AnalyticsApplicationInputsSchemaRecordFormatArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsSchemaRecordFormatArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsSchemaRecordFormatOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsSchemaRecordFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormat)(nil)).Elem()
}

func (o AnalyticsApplicationInputsSchemaRecordFormatOutput) ToAnalyticsApplicationInputsSchemaRecordFormatOutput() AnalyticsApplicationInputsSchemaRecordFormatOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatOutput) ToAnalyticsApplicationInputsSchemaRecordFormatOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormat] {
	return pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormat]{
		OutputState: o.OutputState,
	}
}

// The Mapping Information for the record format.
// See Mapping Parameters below for more details.
func (o AnalyticsApplicationInputsSchemaRecordFormatOutput) MappingParameters() pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormatMappingParameters, AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormat](o, func(v AnalyticsApplicationInputsSchemaRecordFormat) *AnalyticsApplicationInputsSchemaRecordFormatMappingParameters {
		return v.MappingParameters
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormatMappingParameters, AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput]{OutputState: value.OutputState}
}

// The type of Record Format. Can be `CSV` or `JSON`.
func (o AnalyticsApplicationInputsSchemaRecordFormatOutput) RecordFormatType() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormat](o, func(v AnalyticsApplicationInputsSchemaRecordFormat) *string { return v.RecordFormatType })
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParameters struct {
	// Mapping information when the record format uses delimiters.
	// See CSV Mapping Parameters below for more details.
	Csv *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv `pulumi:"csv"`
	// Mapping information when JSON is the record format on the streaming source.
	// See JSON Mapping Parameters below for more details.
	Json *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson `pulumi:"json"`
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs struct {
	// Mapping information when the record format uses delimiters.
	// See CSV Mapping Parameters below for more details.
	Csv pulumix.Input[*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs] `pulumi:"csv"`
	// Mapping information when JSON is the record format on the streaming source.
	// See JSON Mapping Parameters below for more details.
	Json pulumix.Input[*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs] `pulumi:"json"`
}

func (AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormatMappingParameters)(nil)).Elem()
}

func (i AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput() AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput {
	return i.ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput)
}

func (i *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormatMappingParameters)(nil)).Elem()
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput() AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormatMappingParameters] {
	return pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormatMappingParameters]{
		OutputState: o.OutputState,
	}
}

// Mapping information when the record format uses delimiters.
// See CSV Mapping Parameters below for more details.
func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput) Csv() pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv, AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormatMappingParameters](o, func(v AnalyticsApplicationInputsSchemaRecordFormatMappingParameters) *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv {
		return v.Csv
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv, AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput]{OutputState: value.OutputState}
}

// Mapping information when JSON is the record format on the streaming source.
// See JSON Mapping Parameters below for more details.
func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput) Json() pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson, AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput] {
	value := pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormatMappingParameters](o, func(v AnalyticsApplicationInputsSchemaRecordFormatMappingParameters) *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson {
		return v.Json
	})
	return pulumix.GPtrOutput[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson, AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput]{OutputState: value.OutputState}
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv struct {
	// The Column Delimiter.
	RecordColumnDelimiter string `pulumi:"recordColumnDelimiter"`
	// The Row Delimiter.
	RecordRowDelimiter string `pulumi:"recordRowDelimiter"`
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs struct {
	// The Column Delimiter.
	RecordColumnDelimiter pulumix.Input[string] `pulumi:"recordColumnDelimiter"`
	// The Row Delimiter.
	RecordRowDelimiter pulumix.Input[string] `pulumi:"recordRowDelimiter"`
}

func (AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv)(nil)).Elem()
}

func (i AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput() AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput {
	return i.ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput)
}

func (i *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv)(nil)).Elem()
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput() AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv] {
	return pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv]{
		OutputState: o.OutputState,
	}
}

// The Column Delimiter.
func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput) RecordColumnDelimiter() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv](o, func(v AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv) string {
		return v.RecordColumnDelimiter
	})
}

// The Row Delimiter.
func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput) RecordRowDelimiter() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv](o, func(v AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv) string {
		return v.RecordRowDelimiter
	})
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson struct {
	// Path to the top-level parent that contains the records.
	RecordRowPath string `pulumi:"recordRowPath"`
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs struct {
	// Path to the top-level parent that contains the records.
	RecordRowPath pulumix.Input[string] `pulumi:"recordRowPath"`
}

func (AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson)(nil)).Elem()
}

func (i AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput() AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput {
	return i.ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput)
}

func (i *AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson)(nil)).Elem()
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput() AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput) ToAnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutputWithContext(ctx context.Context) AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput {
	return o
}

func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson] {
	return pulumix.Output[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson]{
		OutputState: o.OutputState,
	}
}

// Path to the top-level parent that contains the records.
func (o AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput) RecordRowPath() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson](o, func(v AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson) string {
		return v.RecordRowPath
	})
}

type AnalyticsApplicationInputsStartingPositionConfiguration struct {
	// The starting position on the stream. Valid values: `LAST_STOPPED_POINT`, `NOW`, `TRIM_HORIZON`.
	StartingPosition *string `pulumi:"startingPosition"`
}

type AnalyticsApplicationInputsStartingPositionConfigurationArgs struct {
	// The starting position on the stream. Valid values: `LAST_STOPPED_POINT`, `NOW`, `TRIM_HORIZON`.
	StartingPosition pulumix.Input[*string] `pulumi:"startingPosition"`
}

func (AnalyticsApplicationInputsStartingPositionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsStartingPositionConfiguration)(nil)).Elem()
}

func (i AnalyticsApplicationInputsStartingPositionConfigurationArgs) ToAnalyticsApplicationInputsStartingPositionConfigurationOutput() AnalyticsApplicationInputsStartingPositionConfigurationOutput {
	return i.ToAnalyticsApplicationInputsStartingPositionConfigurationOutputWithContext(context.Background())
}

func (i AnalyticsApplicationInputsStartingPositionConfigurationArgs) ToAnalyticsApplicationInputsStartingPositionConfigurationOutputWithContext(ctx context.Context) AnalyticsApplicationInputsStartingPositionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationInputsStartingPositionConfigurationOutput)
}

func (i *AnalyticsApplicationInputsStartingPositionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationInputsStartingPositionConfigurationArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationInputsStartingPositionConfigurationOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationInputsStartingPositionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationInputsStartingPositionConfiguration)(nil)).Elem()
}

func (o AnalyticsApplicationInputsStartingPositionConfigurationOutput) ToAnalyticsApplicationInputsStartingPositionConfigurationOutput() AnalyticsApplicationInputsStartingPositionConfigurationOutput {
	return o
}

func (o AnalyticsApplicationInputsStartingPositionConfigurationOutput) ToAnalyticsApplicationInputsStartingPositionConfigurationOutputWithContext(ctx context.Context) AnalyticsApplicationInputsStartingPositionConfigurationOutput {
	return o
}

func (o AnalyticsApplicationInputsStartingPositionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationInputsStartingPositionConfiguration] {
	return pulumix.Output[AnalyticsApplicationInputsStartingPositionConfiguration]{
		OutputState: o.OutputState,
	}
}

// The starting position on the stream. Valid values: `LAST_STOPPED_POINT`, `NOW`, `TRIM_HORIZON`.
func (o AnalyticsApplicationInputsStartingPositionConfigurationOutput) StartingPosition() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationInputsStartingPositionConfiguration](o, func(v AnalyticsApplicationInputsStartingPositionConfiguration) *string { return v.StartingPosition })
}

type AnalyticsApplicationOutputType struct {
	// The ARN of the Kinesis Analytics Application.
	Id *string `pulumi:"id"`
	// The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesisStream`.
	// See Kinesis Firehose below for more details.
	KinesisFirehose *AnalyticsApplicationOutputKinesisFirehose `pulumi:"kinesisFirehose"`
	// The Kinesis Stream configuration for the destination stream. Conflicts with `kinesisFirehose`.
	// See Kinesis Stream below for more details.
	KinesisStream *AnalyticsApplicationOutputKinesisStream `pulumi:"kinesisStream"`
	// The Lambda function destination. See Lambda below for more details.
	Lambda *AnalyticsApplicationOutputLambda `pulumi:"lambda"`
	// The Name of the in-application stream.
	Name string `pulumi:"name"`
	// The Schema format of the data written to the destination. See Destination Schema below for more details.
	Schema AnalyticsApplicationOutputSchema `pulumi:"schema"`
}

type AnalyticsApplicationOutputTypeArgs struct {
	// The ARN of the Kinesis Analytics Application.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesisStream`.
	// See Kinesis Firehose below for more details.
	KinesisFirehose pulumix.Input[*AnalyticsApplicationOutputKinesisFirehoseArgs] `pulumi:"kinesisFirehose"`
	// The Kinesis Stream configuration for the destination stream. Conflicts with `kinesisFirehose`.
	// See Kinesis Stream below for more details.
	KinesisStream pulumix.Input[*AnalyticsApplicationOutputKinesisStreamArgs] `pulumi:"kinesisStream"`
	// The Lambda function destination. See Lambda below for more details.
	Lambda pulumix.Input[*AnalyticsApplicationOutputLambdaArgs] `pulumi:"lambda"`
	// The Name of the in-application stream.
	Name pulumix.Input[string] `pulumi:"name"`
	// The Schema format of the data written to the destination. See Destination Schema below for more details.
	Schema pulumix.Input[*AnalyticsApplicationOutputSchemaArgs] `pulumi:"schema"`
}

func (AnalyticsApplicationOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputType)(nil)).Elem()
}

func (i AnalyticsApplicationOutputTypeArgs) ToAnalyticsApplicationOutputTypeOutput() AnalyticsApplicationOutputTypeOutput {
	return i.ToAnalyticsApplicationOutputTypeOutputWithContext(context.Background())
}

func (i AnalyticsApplicationOutputTypeArgs) ToAnalyticsApplicationOutputTypeOutputWithContext(ctx context.Context) AnalyticsApplicationOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationOutputTypeOutput)
}

func (i *AnalyticsApplicationOutputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationOutputTypeArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationOutputTypeOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputType)(nil)).Elem()
}

func (o AnalyticsApplicationOutputTypeOutput) ToAnalyticsApplicationOutputTypeOutput() AnalyticsApplicationOutputTypeOutput {
	return o
}

func (o AnalyticsApplicationOutputTypeOutput) ToAnalyticsApplicationOutputTypeOutputWithContext(ctx context.Context) AnalyticsApplicationOutputTypeOutput {
	return o
}

func (o AnalyticsApplicationOutputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationOutputType] {
	return pulumix.Output[AnalyticsApplicationOutputType]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Analytics Application.
func (o AnalyticsApplicationOutputTypeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationOutputType](o, func(v AnalyticsApplicationOutputType) *string { return v.Id })
}

// The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesisStream`.
// See Kinesis Firehose below for more details.
func (o AnalyticsApplicationOutputTypeOutput) KinesisFirehose() pulumix.GPtrOutput[AnalyticsApplicationOutputKinesisFirehose, AnalyticsApplicationOutputKinesisFirehoseOutput] {
	value := pulumix.Apply[AnalyticsApplicationOutputType](o, func(v AnalyticsApplicationOutputType) *AnalyticsApplicationOutputKinesisFirehose {
		return v.KinesisFirehose
	})
	return pulumix.GPtrOutput[AnalyticsApplicationOutputKinesisFirehose, AnalyticsApplicationOutputKinesisFirehoseOutput]{OutputState: value.OutputState}
}

// The Kinesis Stream configuration for the destination stream. Conflicts with `kinesisFirehose`.
// See Kinesis Stream below for more details.
func (o AnalyticsApplicationOutputTypeOutput) KinesisStream() pulumix.GPtrOutput[AnalyticsApplicationOutputKinesisStream, AnalyticsApplicationOutputKinesisStreamOutput] {
	value := pulumix.Apply[AnalyticsApplicationOutputType](o, func(v AnalyticsApplicationOutputType) *AnalyticsApplicationOutputKinesisStream {
		return v.KinesisStream
	})
	return pulumix.GPtrOutput[AnalyticsApplicationOutputKinesisStream, AnalyticsApplicationOutputKinesisStreamOutput]{OutputState: value.OutputState}
}

// The Lambda function destination. See Lambda below for more details.
func (o AnalyticsApplicationOutputTypeOutput) Lambda() pulumix.GPtrOutput[AnalyticsApplicationOutputLambda, AnalyticsApplicationOutputLambdaOutput] {
	value := pulumix.Apply[AnalyticsApplicationOutputType](o, func(v AnalyticsApplicationOutputType) *AnalyticsApplicationOutputLambda { return v.Lambda })
	return pulumix.GPtrOutput[AnalyticsApplicationOutputLambda, AnalyticsApplicationOutputLambdaOutput]{OutputState: value.OutputState}
}

// The Name of the in-application stream.
func (o AnalyticsApplicationOutputTypeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputType](o, func(v AnalyticsApplicationOutputType) string { return v.Name })
}

// The Schema format of the data written to the destination. See Destination Schema below for more details.
func (o AnalyticsApplicationOutputTypeOutput) Schema() pulumix.GPtrOutput[AnalyticsApplicationOutputSchema, AnalyticsApplicationOutputSchemaOutput] {
	value := pulumix.Apply[AnalyticsApplicationOutputType](o, func(v AnalyticsApplicationOutputType) AnalyticsApplicationOutputSchema { return v.Schema })
	return pulumix.GPtrOutput[AnalyticsApplicationOutputSchema, AnalyticsApplicationOutputSchemaOutput]{OutputState: value.OutputState}
}

type AnalyticsApplicationOutputKinesisFirehose struct {
	// The ARN of the Kinesis Firehose delivery stream.
	ResourceArn string `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationOutputKinesisFirehoseArgs struct {
	// The ARN of the Kinesis Firehose delivery stream.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationOutputKinesisFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputKinesisFirehose)(nil)).Elem()
}

func (i AnalyticsApplicationOutputKinesisFirehoseArgs) ToAnalyticsApplicationOutputKinesisFirehoseOutput() AnalyticsApplicationOutputKinesisFirehoseOutput {
	return i.ToAnalyticsApplicationOutputKinesisFirehoseOutputWithContext(context.Background())
}

func (i AnalyticsApplicationOutputKinesisFirehoseArgs) ToAnalyticsApplicationOutputKinesisFirehoseOutputWithContext(ctx context.Context) AnalyticsApplicationOutputKinesisFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationOutputKinesisFirehoseOutput)
}

func (i *AnalyticsApplicationOutputKinesisFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationOutputKinesisFirehoseArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationOutputKinesisFirehoseOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutputKinesisFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputKinesisFirehose)(nil)).Elem()
}

func (o AnalyticsApplicationOutputKinesisFirehoseOutput) ToAnalyticsApplicationOutputKinesisFirehoseOutput() AnalyticsApplicationOutputKinesisFirehoseOutput {
	return o
}

func (o AnalyticsApplicationOutputKinesisFirehoseOutput) ToAnalyticsApplicationOutputKinesisFirehoseOutputWithContext(ctx context.Context) AnalyticsApplicationOutputKinesisFirehoseOutput {
	return o
}

func (o AnalyticsApplicationOutputKinesisFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationOutputKinesisFirehose] {
	return pulumix.Output[AnalyticsApplicationOutputKinesisFirehose]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Firehose delivery stream.
func (o AnalyticsApplicationOutputKinesisFirehoseOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputKinesisFirehose](o, func(v AnalyticsApplicationOutputKinesisFirehose) string { return v.ResourceArn })
}

// The ARN of the IAM Role used to access the stream.
func (o AnalyticsApplicationOutputKinesisFirehoseOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputKinesisFirehose](o, func(v AnalyticsApplicationOutputKinesisFirehose) string { return v.RoleArn })
}

type AnalyticsApplicationOutputKinesisStream struct {
	// The ARN of the Kinesis Stream.
	ResourceArn string `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationOutputKinesisStreamArgs struct {
	// The ARN of the Kinesis Stream.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationOutputKinesisStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputKinesisStream)(nil)).Elem()
}

func (i AnalyticsApplicationOutputKinesisStreamArgs) ToAnalyticsApplicationOutputKinesisStreamOutput() AnalyticsApplicationOutputKinesisStreamOutput {
	return i.ToAnalyticsApplicationOutputKinesisStreamOutputWithContext(context.Background())
}

func (i AnalyticsApplicationOutputKinesisStreamArgs) ToAnalyticsApplicationOutputKinesisStreamOutputWithContext(ctx context.Context) AnalyticsApplicationOutputKinesisStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationOutputKinesisStreamOutput)
}

func (i *AnalyticsApplicationOutputKinesisStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationOutputKinesisStreamArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationOutputKinesisStreamOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutputKinesisStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputKinesisStream)(nil)).Elem()
}

func (o AnalyticsApplicationOutputKinesisStreamOutput) ToAnalyticsApplicationOutputKinesisStreamOutput() AnalyticsApplicationOutputKinesisStreamOutput {
	return o
}

func (o AnalyticsApplicationOutputKinesisStreamOutput) ToAnalyticsApplicationOutputKinesisStreamOutputWithContext(ctx context.Context) AnalyticsApplicationOutputKinesisStreamOutput {
	return o
}

func (o AnalyticsApplicationOutputKinesisStreamOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationOutputKinesisStream] {
	return pulumix.Output[AnalyticsApplicationOutputKinesisStream]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Stream.
func (o AnalyticsApplicationOutputKinesisStreamOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputKinesisStream](o, func(v AnalyticsApplicationOutputKinesisStream) string { return v.ResourceArn })
}

// The ARN of the IAM Role used to access the stream.
func (o AnalyticsApplicationOutputKinesisStreamOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputKinesisStream](o, func(v AnalyticsApplicationOutputKinesisStream) string { return v.RoleArn })
}

type AnalyticsApplicationOutputLambda struct {
	// The ARN of the Lambda function.
	ResourceArn string `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the Lambda function.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationOutputLambdaArgs struct {
	// The ARN of the Lambda function.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
	// The ARN of the IAM Role used to access the Lambda function.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationOutputLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputLambda)(nil)).Elem()
}

func (i AnalyticsApplicationOutputLambdaArgs) ToAnalyticsApplicationOutputLambdaOutput() AnalyticsApplicationOutputLambdaOutput {
	return i.ToAnalyticsApplicationOutputLambdaOutputWithContext(context.Background())
}

func (i AnalyticsApplicationOutputLambdaArgs) ToAnalyticsApplicationOutputLambdaOutputWithContext(ctx context.Context) AnalyticsApplicationOutputLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationOutputLambdaOutput)
}

func (i *AnalyticsApplicationOutputLambdaArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationOutputLambdaArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationOutputLambdaOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutputLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputLambda)(nil)).Elem()
}

func (o AnalyticsApplicationOutputLambdaOutput) ToAnalyticsApplicationOutputLambdaOutput() AnalyticsApplicationOutputLambdaOutput {
	return o
}

func (o AnalyticsApplicationOutputLambdaOutput) ToAnalyticsApplicationOutputLambdaOutputWithContext(ctx context.Context) AnalyticsApplicationOutputLambdaOutput {
	return o
}

func (o AnalyticsApplicationOutputLambdaOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationOutputLambda] {
	return pulumix.Output[AnalyticsApplicationOutputLambda]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lambda function.
func (o AnalyticsApplicationOutputLambdaOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputLambda](o, func(v AnalyticsApplicationOutputLambda) string { return v.ResourceArn })
}

// The ARN of the IAM Role used to access the Lambda function.
func (o AnalyticsApplicationOutputLambdaOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputLambda](o, func(v AnalyticsApplicationOutputLambda) string { return v.RoleArn })
}

type AnalyticsApplicationOutputSchema struct {
	// The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
	RecordFormatType string `pulumi:"recordFormatType"`
}

type AnalyticsApplicationOutputSchemaArgs struct {
	// The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
	RecordFormatType pulumix.Input[string] `pulumi:"recordFormatType"`
}

func (AnalyticsApplicationOutputSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputSchema)(nil)).Elem()
}

func (i AnalyticsApplicationOutputSchemaArgs) ToAnalyticsApplicationOutputSchemaOutput() AnalyticsApplicationOutputSchemaOutput {
	return i.ToAnalyticsApplicationOutputSchemaOutputWithContext(context.Background())
}

func (i AnalyticsApplicationOutputSchemaArgs) ToAnalyticsApplicationOutputSchemaOutputWithContext(ctx context.Context) AnalyticsApplicationOutputSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationOutputSchemaOutput)
}

func (i *AnalyticsApplicationOutputSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationOutputSchemaArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationOutputSchemaOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutputSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationOutputSchema)(nil)).Elem()
}

func (o AnalyticsApplicationOutputSchemaOutput) ToAnalyticsApplicationOutputSchemaOutput() AnalyticsApplicationOutputSchemaOutput {
	return o
}

func (o AnalyticsApplicationOutputSchemaOutput) ToAnalyticsApplicationOutputSchemaOutputWithContext(ctx context.Context) AnalyticsApplicationOutputSchemaOutput {
	return o
}

func (o AnalyticsApplicationOutputSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationOutputSchema] {
	return pulumix.Output[AnalyticsApplicationOutputSchema]{
		OutputState: o.OutputState,
	}
}

// The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
func (o AnalyticsApplicationOutputSchemaOutput) RecordFormatType() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationOutputSchema](o, func(v AnalyticsApplicationOutputSchema) string { return v.RecordFormatType })
}

type AnalyticsApplicationReferenceDataSources struct {
	// The ARN of the Kinesis Analytics Application.
	Id *string `pulumi:"id"`
	// The S3 configuration for the reference data source. See S3 Reference below for more details.
	S3 AnalyticsApplicationReferenceDataSourcesS3 `pulumi:"s3"`
	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	Schema AnalyticsApplicationReferenceDataSourcesSchema `pulumi:"schema"`
	// The in-application Table Name.
	TableName string `pulumi:"tableName"`
}

type AnalyticsApplicationReferenceDataSourcesArgs struct {
	// The ARN of the Kinesis Analytics Application.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The S3 configuration for the reference data source. See S3 Reference below for more details.
	S3 pulumix.Input[*AnalyticsApplicationReferenceDataSourcesS3Args] `pulumi:"s3"`
	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	Schema pulumix.Input[*AnalyticsApplicationReferenceDataSourcesSchemaArgs] `pulumi:"schema"`
	// The in-application Table Name.
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (AnalyticsApplicationReferenceDataSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSources)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesArgs) ToAnalyticsApplicationReferenceDataSourcesOutput() AnalyticsApplicationReferenceDataSourcesOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesArgs) ToAnalyticsApplicationReferenceDataSourcesOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSources)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesOutput) ToAnalyticsApplicationReferenceDataSourcesOutput() AnalyticsApplicationReferenceDataSourcesOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesOutput) ToAnalyticsApplicationReferenceDataSourcesOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSources] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSources]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Analytics Application.
func (o AnalyticsApplicationReferenceDataSourcesOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSources](o, func(v AnalyticsApplicationReferenceDataSources) *string { return v.Id })
}

// The S3 configuration for the reference data source. See S3 Reference below for more details.
func (o AnalyticsApplicationReferenceDataSourcesOutput) S3() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesS3, AnalyticsApplicationReferenceDataSourcesS3Output] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSources](o, func(v AnalyticsApplicationReferenceDataSources) AnalyticsApplicationReferenceDataSourcesS3 {
		return v.S3
	})
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesS3, AnalyticsApplicationReferenceDataSourcesS3Output]{OutputState: value.OutputState}
}

// The Schema format of the data in the streaming source. See Source Schema below for more details.
func (o AnalyticsApplicationReferenceDataSourcesOutput) Schema() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchema, AnalyticsApplicationReferenceDataSourcesSchemaOutput] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSources](o, func(v AnalyticsApplicationReferenceDataSources) AnalyticsApplicationReferenceDataSourcesSchema {
		return v.Schema
	})
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchema, AnalyticsApplicationReferenceDataSourcesSchemaOutput]{OutputState: value.OutputState}
}

// The in-application Table Name.
func (o AnalyticsApplicationReferenceDataSourcesOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSources](o, func(v AnalyticsApplicationReferenceDataSources) string { return v.TableName })
}

type AnalyticsApplicationReferenceDataSourcesS3 struct {
	// The S3 Bucket ARN.
	BucketArn string `pulumi:"bucketArn"`
	// The File Key name containing reference data.
	FileKey string `pulumi:"fileKey"`
	// The ARN of the IAM Role used to send application messages.
	RoleArn string `pulumi:"roleArn"`
}

type AnalyticsApplicationReferenceDataSourcesS3Args struct {
	// The S3 Bucket ARN.
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// The File Key name containing reference data.
	FileKey pulumix.Input[string] `pulumi:"fileKey"`
	// The ARN of the IAM Role used to send application messages.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (AnalyticsApplicationReferenceDataSourcesS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesS3)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesS3Args) ToAnalyticsApplicationReferenceDataSourcesS3Output() AnalyticsApplicationReferenceDataSourcesS3Output {
	return i.ToAnalyticsApplicationReferenceDataSourcesS3OutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesS3Args) ToAnalyticsApplicationReferenceDataSourcesS3OutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesS3Output)
}

func (i *AnalyticsApplicationReferenceDataSourcesS3Args) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesS3Args] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesS3Output struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesS3)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesS3Output) ToAnalyticsApplicationReferenceDataSourcesS3Output() AnalyticsApplicationReferenceDataSourcesS3Output {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesS3Output) ToAnalyticsApplicationReferenceDataSourcesS3OutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesS3Output {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesS3Output) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesS3] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesS3]{
		OutputState: o.OutputState,
	}
}

// The S3 Bucket ARN.
func (o AnalyticsApplicationReferenceDataSourcesS3Output) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesS3](o, func(v AnalyticsApplicationReferenceDataSourcesS3) string { return v.BucketArn })
}

// The File Key name containing reference data.
func (o AnalyticsApplicationReferenceDataSourcesS3Output) FileKey() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesS3](o, func(v AnalyticsApplicationReferenceDataSourcesS3) string { return v.FileKey })
}

// The ARN of the IAM Role used to send application messages.
func (o AnalyticsApplicationReferenceDataSourcesS3Output) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesS3](o, func(v AnalyticsApplicationReferenceDataSourcesS3) string { return v.RoleArn })
}

type AnalyticsApplicationReferenceDataSourcesSchema struct {
	// The Record Column mapping for the streaming source data element.
	// See Record Columns below for more details.
	RecordColumns []AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn `pulumi:"recordColumns"`
	// The Encoding of the record in the streaming source.
	RecordEncoding *string `pulumi:"recordEncoding"`
	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	RecordFormat AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat `pulumi:"recordFormat"`
}

type AnalyticsApplicationReferenceDataSourcesSchemaArgs struct {
	// The Record Column mapping for the streaming source data element.
	// See Record Columns below for more details.
	RecordColumns pulumix.Input[[]*AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs] `pulumi:"recordColumns"`
	// The Encoding of the record in the streaming source.
	RecordEncoding pulumix.Input[*string] `pulumi:"recordEncoding"`
	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	RecordFormat pulumix.Input[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs] `pulumi:"recordFormat"`
}

func (AnalyticsApplicationReferenceDataSourcesSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchema)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaOutput() AnalyticsApplicationReferenceDataSourcesSchemaOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesSchemaOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesSchemaOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesSchemaArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesSchemaOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchema)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaOutput() AnalyticsApplicationReferenceDataSourcesSchemaOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchema] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchema]{
		OutputState: o.OutputState,
	}
}

// The Record Column mapping for the streaming source data element.
// See Record Columns below for more details.
func (o AnalyticsApplicationReferenceDataSourcesSchemaOutput) RecordColumns() pulumix.GArrayOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn, AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchema](o, func(v AnalyticsApplicationReferenceDataSourcesSchema) []AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn {
		return v.RecordColumns
	})
	return pulumix.GArrayOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn, AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput]{OutputState: value.OutputState}
}

// The Encoding of the record in the streaming source.
func (o AnalyticsApplicationReferenceDataSourcesSchemaOutput) RecordEncoding() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchema](o, func(v AnalyticsApplicationReferenceDataSourcesSchema) *string { return v.RecordEncoding })
}

// The Record Format and mapping information to schematize a record.
// See Record Format below for more details.
func (o AnalyticsApplicationReferenceDataSourcesSchemaOutput) RecordFormat() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchema](o, func(v AnalyticsApplicationReferenceDataSourcesSchema) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat {
		return v.RecordFormat
	})
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput]{OutputState: value.OutputState}
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn struct {
	// The Mapping reference to the data element.
	Mapping *string `pulumi:"mapping"`
	// Name of the column.
	Name string `pulumi:"name"`
	// The SQL Type of the column.
	SqlType string `pulumi:"sqlType"`
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs struct {
	// The Mapping reference to the data element.
	Mapping pulumix.Input[*string] `pulumi:"mapping"`
	// Name of the column.
	Name pulumix.Input[string] `pulumi:"name"`
	// The SQL Type of the column.
	SqlType pulumix.Input[string] `pulumi:"sqlType"`
}

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn]{
		OutputState: o.OutputState,
	}
}

// The Mapping reference to the data element.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) Mapping() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn) *string { return v.Mapping })
}

// Name of the column.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn) string { return v.Name })
}

// The SQL Type of the column.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput) SqlType() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn) string { return v.SqlType })
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat struct {
	// The Mapping Information for the record format.
	// See Mapping Parameters below for more details.
	MappingParameters *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters `pulumi:"mappingParameters"`
	// The type of Record Format. Can be `CSV` or `JSON`.
	RecordFormatType *string `pulumi:"recordFormatType"`
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs struct {
	// The Mapping Information for the record format.
	// See Mapping Parameters below for more details.
	MappingParameters pulumix.Input[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs] `pulumi:"mappingParameters"`
	// The type of Record Format. Can be `CSV` or `JSON`.
	RecordFormatType pulumix.Input[*string] `pulumi:"recordFormatType"`
}

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat]{
		OutputState: o.OutputState,
	}
}

// The Mapping Information for the record format.
// See Mapping Parameters below for more details.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput) MappingParameters() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat) *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters {
		return v.MappingParameters
	})
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput]{OutputState: value.OutputState}
}

// The type of Record Format. Can be `CSV` or `JSON`.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput) RecordFormatType() pulumix.Output[*string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat) *string { return v.RecordFormatType })
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters struct {
	// Mapping information when the record format uses delimiters.
	// See CSV Mapping Parameters below for more details.
	Csv *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv `pulumi:"csv"`
	// Mapping information when JSON is the record format on the streaming source.
	// See JSON Mapping Parameters below for more details.
	Json *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson `pulumi:"json"`
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs struct {
	// Mapping information when the record format uses delimiters.
	// See CSV Mapping Parameters below for more details.
	Csv pulumix.Input[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs] `pulumi:"csv"`
	// Mapping information when JSON is the record format on the streaming source.
	// See JSON Mapping Parameters below for more details.
	Json pulumix.Input[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs] `pulumi:"json"`
}

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters]{
		OutputState: o.OutputState,
	}
}

// Mapping information when the record format uses delimiters.
// See CSV Mapping Parameters below for more details.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput) Csv() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters) *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv {
		return v.Csv
	})
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput]{OutputState: value.OutputState}
}

// Mapping information when JSON is the record format on the streaming source.
// See JSON Mapping Parameters below for more details.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput) Json() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput] {
	value := pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters) *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson {
		return v.Json
	})
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson, AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput]{OutputState: value.OutputState}
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv struct {
	// The Column Delimiter.
	RecordColumnDelimiter string `pulumi:"recordColumnDelimiter"`
	// The Row Delimiter.
	RecordRowDelimiter string `pulumi:"recordRowDelimiter"`
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs struct {
	// The Column Delimiter.
	RecordColumnDelimiter pulumix.Input[string] `pulumi:"recordColumnDelimiter"`
	// The Row Delimiter.
	RecordRowDelimiter pulumix.Input[string] `pulumi:"recordRowDelimiter"`
}

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv]{
		OutputState: o.OutputState,
	}
}

// The Column Delimiter.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput) RecordColumnDelimiter() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv) string {
		return v.RecordColumnDelimiter
	})
}

// The Row Delimiter.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput) RecordRowDelimiter() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv) string {
		return v.RecordRowDelimiter
	})
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson struct {
	// Path to the top-level parent that contains the records.
	RecordRowPath string `pulumi:"recordRowPath"`
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs struct {
	// Path to the top-level parent that contains the records.
	RecordRowPath pulumix.Input[string] `pulumi:"recordRowPath"`
}

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson)(nil)).Elem()
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput {
	return i.ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutputWithContext(context.Background())
}

func (i AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput)
}

func (i *AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs) ToOutput(ctx context.Context) pulumix.Output[*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonArgs] {
	return pulumix.Val(i)
}

type AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson)(nil)).Elem()
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput() AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput) ToAnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutputWithContext(ctx context.Context) AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput {
	return o
}

func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson] {
	return pulumix.Output[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson]{
		OutputState: o.OutputState,
	}
}

// Path to the top-level parent that contains the records.
func (o AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput) RecordRowPath() pulumix.Output[string] {
	return pulumix.Apply[AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson](o, func(v AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson) string {
		return v.RecordRowPath
	})
}

type FirehoseDeliveryStreamElasticsearchConfiguration struct {
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
	ClusterEndpoint *string `pulumi:"clusterEndpoint"`
	// The ARN of the Amazon ES domain.  The pattern needs to be `arn:.*`.  Conflicts with `clusterEndpoint`.
	DomainArn *string `pulumi:"domainArn"`
	// The Elasticsearch index name.
	IndexName string `pulumi:"indexName"`
	// The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
	IndexRotationPeriod *string `pulumi:"indexRotationPeriod"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration *int `pulumi:"retryDuration"`
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig`.  The pattern needs to be `arn:.*`.
	RoleArn string `pulumi:"roleArn"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration `pulumi:"s3Configuration"`
	// The Elasticsearch type name with maximum length of 100 characters.
	TypeName *string `pulumi:"typeName"`
	// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. More details are given below
	VpcConfig *FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig `pulumi:"vpcConfig"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationArgs struct {
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
	ClusterEndpoint pulumix.Input[*string] `pulumi:"clusterEndpoint"`
	// The ARN of the Amazon ES domain.  The pattern needs to be `arn:.*`.  Conflicts with `clusterEndpoint`.
	DomainArn pulumix.Input[*string] `pulumi:"domainArn"`
	// The Elasticsearch index name.
	IndexName pulumix.Input[string] `pulumi:"indexName"`
	// The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
	IndexRotationPeriod pulumix.Input[*string] `pulumi:"indexRotationPeriod"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration pulumix.Input[*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration pulumix.Input[*int] `pulumi:"retryDuration"`
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig`.  The pattern needs to be `arn:.*`.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
	S3BackupMode pulumix.Input[*string] `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration pulumix.Input[*FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs] `pulumi:"s3Configuration"`
	// The Elasticsearch type name with maximum length of 100 characters.
	TypeName pulumix.Input[*string] `pulumi:"typeName"`
	// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. More details are given below
	VpcConfig pulumix.Input[*FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs] `pulumi:"vpcConfig"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationOutput() FirehoseDeliveryStreamElasticsearchConfigurationOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationOutput() FirehoseDeliveryStreamElasticsearchConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfiguration]{
		OutputState: o.OutputState,
	}
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) ClusterEndpoint() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *string { return v.ClusterEndpoint })
}

// The ARN of the Amazon ES domain.  The pattern needs to be `arn:.*`.  Conflicts with `clusterEndpoint`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) DomainArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *string { return v.DomainArn })
}

// The Elasticsearch index name.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) IndexName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) string { return v.IndexName })
}

// The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) IndexRotationPeriod() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *string { return v.IndexRotationPeriod })
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) ProcessingConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration, FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration, FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) RetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *int { return v.RetryDuration })
}

// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig`.  The pattern needs to be `arn:.*`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) string { return v.RoleArn })
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) S3BackupMode() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *string { return v.S3BackupMode })
}

// The S3 Configuration. See s3Configuration for more details.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) S3Configuration() pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration, FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration, FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput]{OutputState: value.OutputState}
}

// The Elasticsearch type name with maximum length of 100 characters.
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) TypeName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *string { return v.TypeName })
}

// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. More details are given below
func (o FirehoseDeliveryStreamElasticsearchConfigurationOutput) VpcConfig() pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig, FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfiguration) *FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig {
		return v.VpcConfig
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig, FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration struct {
	// Enables or disables data processing.
	Enabled *bool `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors []FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor `pulumi:"processors"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs struct {
	// Enables or disables data processing.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors pulumix.Input[[]*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs] `pulumi:"processors"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables data processing.
func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration) *bool {
		return v.Enabled
	})
}

// Array of data processors. More details are given below
func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput) Processors() pulumix.GArrayOutput[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration) []FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor {
		return v.Processors
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor struct {
	// Array of processor parameters. More details are given below
	Parameters []FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type string `pulumi:"type"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs struct {
	// Array of processor parameters. More details are given below
	Parameters pulumix.Input[[]*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs] `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor]{
		OutputState: o.OutputState,
	}
}

// Array of processor parameters. More details are given below
func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput) Parameters() pulumix.GArrayOutput[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor) []FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput]{OutputState: value.OutputState}
}

// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor) string {
		return v.Type
	})
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue string `pulumi:"parameterValue"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterName
	})
}

// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
//
// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
func (o FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterValue
	})
}

type FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *int {
		return v.BufferingInterval
	})
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *string {
		return v.CompressionFormat
	})
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *string {
		return v.ErrorOutputPrefix
	})
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3Configuration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig struct {
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
	RoleArn string `pulumi:"roleArn"`
	// A list of security group IDs to associate with Kinesis Firehose.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs to associate with Kinesis Firehose.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     *string  `pulumi:"vpcId"`
}

type FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs struct {
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// A list of security group IDs to associate with Kinesis Firehose.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// A list of subnet IDs to associate with Kinesis Firehose.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	VpcId     pulumix.Input[*string]  `pulumi:"vpcId"`
}

func (FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig)(nil)).Elem()
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput() FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput {
	return i.ToFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs) ToFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput)
}

func (i *FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig)(nil)).Elem()
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput() FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) ToFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputWithContext(ctx context.Context) FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput {
	return o
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig] {
	return pulumix.Output[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig) string { return v.RoleArn })
}

// A list of security group IDs to associate with Kinesis Firehose.
func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of subnet IDs to associate with Kinesis Firehose.
func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig) *string { return v.VpcId })
}

type FirehoseDeliveryStreamExtendedS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
	DataFormatConversionConfiguration *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration `pulumi:"dataFormatConversionConfiguration"`
	// The configuration for dynamic partitioning. See Dynamic Partitioning Configuration below for more details. Required when using dynamic partitioning.
	DynamicPartitioningConfiguration *FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration `pulumi:"dynamicPartitioningConfiguration"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
	// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
	S3BackupConfiguration *FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration `pulumi:"s3BackupConfiguration"`
	// The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
	DataFormatConversionConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs] `pulumi:"dataFormatConversionConfiguration"`
	// The configuration for dynamic partitioning. See Dynamic Partitioning Configuration below for more details. Required when using dynamic partitioning.
	DynamicPartitioningConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs] `pulumi:"dynamicPartitioningConfiguration"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
	S3BackupConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs] `pulumi:"s3BackupConfiguration"`
	// The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
	S3BackupMode pulumix.Input[*string] `pulumi:"s3BackupMode"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3Configuration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *string { return v.CompressionFormat })
}

// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) DataFormatConversionConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration {
		return v.DataFormatConversionConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput]{OutputState: value.OutputState}
}

// The configuration for dynamic partitioning. See Dynamic Partitioning Configuration below for more details. Required when using dynamic partitioning.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) DynamicPartitioningConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration {
		return v.DynamicPartitioningConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput]{OutputState: value.OutputState}
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *string { return v.ErrorOutputPrefix })
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *string { return v.Prefix })
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) ProcessingConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) string { return v.RoleArn })
}

// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) S3BackupConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration {
		return v.S3BackupConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput]{OutputState: value.OutputState}
}

// The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationOutput) S3BackupMode() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3Configuration](o, func(v FirehoseDeliveryStreamExtendedS3Configuration) *string { return v.S3BackupMode })
}

type FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions) *bool { return v.Enabled })
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration struct {
	// Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
	Enabled *bool `pulumi:"enabled"`
	// Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
	InputFormatConfiguration FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration `pulumi:"inputFormatConfiguration"`
	// Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
	OutputFormatConfiguration FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration `pulumi:"outputFormatConfiguration"`
	// Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
	SchemaConfiguration FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration `pulumi:"schemaConfiguration"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs struct {
	// Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
	InputFormatConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs] `pulumi:"inputFormatConfiguration"`
	// Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
	OutputFormatConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs] `pulumi:"outputFormatConfiguration"`
	// Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
	SchemaConfiguration pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs] `pulumi:"schemaConfiguration"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration) *bool {
		return v.Enabled
	})
}

// Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) InputFormatConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration {
		return v.InputFormatConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput]{OutputState: value.OutputState}
}

// Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) OutputFormatConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration {
		return v.OutputFormatConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput]{OutputState: value.OutputState}
}

// Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput) SchemaConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration {
		return v.SchemaConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration struct {
	// Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
	Deserializer FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer `pulumi:"deserializer"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs struct {
	// Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
	Deserializer pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs] `pulumi:"deserializer"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration]{
		OutputState: o.OutputState,
	}
}

// Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput) Deserializer() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer {
		return v.Deserializer
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer struct {
	// Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
	HiveJsonSerDe *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe `pulumi:"hiveJsonSerDe"`
	// Nested argument that specifies the OpenX SerDe. More details below.
	OpenXJsonSerDe *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe `pulumi:"openXJsonSerDe"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs struct {
	// Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
	HiveJsonSerDe pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs] `pulumi:"hiveJsonSerDe"`
	// Nested argument that specifies the OpenX SerDe. More details below.
	OpenXJsonSerDe pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs] `pulumi:"openXJsonSerDe"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer]{
		OutputState: o.OutputState,
	}
}

// Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput) HiveJsonSerDe() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer) *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe {
		return v.HiveJsonSerDe
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput]{OutputState: value.OutputState}
}

// Nested argument that specifies the OpenX SerDe. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput) OpenXJsonSerDe() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer) *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe {
		return v.OpenXJsonSerDe
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe struct {
	// A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
	TimestampFormats []string `pulumi:"timestampFormats"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs struct {
	// A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
	TimestampFormats pulumix.Input[[]string] `pulumi:"timestampFormats"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe]{
		OutputState: o.OutputState,
	}
}

// A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput) TimestampFormats() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe) []string {
		return v.TimestampFormats
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe struct {
	// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
	CaseInsensitive *bool `pulumi:"caseInsensitive"`
	// A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
	ColumnToJsonKeyMappings map[string]string `pulumi:"columnToJsonKeyMappings"`
	// When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "aB" when using this option. Defaults to `false`.
	ConvertDotsInJsonKeysToUnderscores *bool `pulumi:"convertDotsInJsonKeysToUnderscores"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs struct {
	// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
	CaseInsensitive pulumix.Input[*bool] `pulumi:"caseInsensitive"`
	// A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
	ColumnToJsonKeyMappings pulumix.Input[map[string]string] `pulumi:"columnToJsonKeyMappings"`
	// When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "aB" when using this option. Defaults to `false`.
	ConvertDotsInJsonKeysToUnderscores pulumix.Input[*bool] `pulumi:"convertDotsInJsonKeysToUnderscores"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe]{
		OutputState: o.OutputState,
	}
}

// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) CaseInsensitive() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe) *bool {
		return v.CaseInsensitive
	})
}

// A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) ColumnToJsonKeyMappings() pulumix.MapOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe) map[string]string {
		return v.ColumnToJsonKeyMappings
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "aB" when using this option. Defaults to `false`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput) ConvertDotsInJsonKeysToUnderscores() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe) *bool {
		return v.ConvertDotsInJsonKeysToUnderscores
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration struct {
	// Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
	Serializer FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer `pulumi:"serializer"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs struct {
	// Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
	Serializer pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs] `pulumi:"serializer"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration]{
		OutputState: o.OutputState,
	}
}

// Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput) Serializer() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer {
		return v.Serializer
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer struct {
	// Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
	OrcSerDe *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe `pulumi:"orcSerDe"`
	// Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
	ParquetSerDe *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe `pulumi:"parquetSerDe"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs struct {
	// Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
	OrcSerDe pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs] `pulumi:"orcSerDe"`
	// Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
	ParquetSerDe pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs] `pulumi:"parquetSerDe"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer]{
		OutputState: o.OutputState,
	}
}

// Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput) OrcSerDe() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer) *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe {
		return v.OrcSerDe
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput]{OutputState: value.OutputState}
}

// Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput) ParquetSerDe() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer) *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe {
		return v.ParquetSerDe
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe, FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe struct {
	// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
	BlockSizeBytes *int `pulumi:"blockSizeBytes"`
	// A list of column names for which you want Kinesis Data Firehose to create bloom filters.
	BloomFilterColumns []string `pulumi:"bloomFilterColumns"`
	// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
	BloomFilterFalsePositiveProbability *float64 `pulumi:"bloomFilterFalsePositiveProbability"`
	// The compression code to use over data blocks. The default is `SNAPPY`.
	Compression *string `pulumi:"compression"`
	// A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
	DictionaryKeyThreshold *float64 `pulumi:"dictionaryKeyThreshold"`
	// Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
	EnablePadding *bool `pulumi:"enablePadding"`
	// The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
	FormatVersion *string `pulumi:"formatVersion"`
	// A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enablePadding` is `false`.
	PaddingTolerance *float64 `pulumi:"paddingTolerance"`
	// The number of rows between index entries. The default is `10000` and the minimum is `1000`.
	RowIndexStride *int `pulumi:"rowIndexStride"`
	// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
	StripeSizeBytes *int `pulumi:"stripeSizeBytes"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs struct {
	// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
	BlockSizeBytes pulumix.Input[*int] `pulumi:"blockSizeBytes"`
	// A list of column names for which you want Kinesis Data Firehose to create bloom filters.
	BloomFilterColumns pulumix.Input[[]string] `pulumi:"bloomFilterColumns"`
	// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
	BloomFilterFalsePositiveProbability pulumix.Input[*float64] `pulumi:"bloomFilterFalsePositiveProbability"`
	// The compression code to use over data blocks. The default is `SNAPPY`.
	Compression pulumix.Input[*string] `pulumi:"compression"`
	// A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
	DictionaryKeyThreshold pulumix.Input[*float64] `pulumi:"dictionaryKeyThreshold"`
	// Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
	EnablePadding pulumix.Input[*bool] `pulumi:"enablePadding"`
	// The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
	FormatVersion pulumix.Input[*string] `pulumi:"formatVersion"`
	// A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enablePadding` is `false`.
	PaddingTolerance pulumix.Input[*float64] `pulumi:"paddingTolerance"`
	// The number of rows between index entries. The default is `10000` and the minimum is `1000`.
	RowIndexStride pulumix.Input[*int] `pulumi:"rowIndexStride"`
	// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
	StripeSizeBytes pulumix.Input[*int] `pulumi:"stripeSizeBytes"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe]{
		OutputState: o.OutputState,
	}
}

// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) BlockSizeBytes() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *int {
		return v.BlockSizeBytes
	})
}

// A list of column names for which you want Kinesis Data Firehose to create bloom filters.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) BloomFilterColumns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) []string {
		return v.BloomFilterColumns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) BloomFilterFalsePositiveProbability() pulumix.Output[*float64] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *float64 {
		return v.BloomFilterFalsePositiveProbability
	})
}

// The compression code to use over data blocks. The default is `SNAPPY`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) Compression() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *string {
		return v.Compression
	})
}

// A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) DictionaryKeyThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *float64 {
		return v.DictionaryKeyThreshold
	})
}

// Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) EnablePadding() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *bool {
		return v.EnablePadding
	})
}

// The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) FormatVersion() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *string {
		return v.FormatVersion
	})
}

// A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enablePadding` is `false`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) PaddingTolerance() pulumix.Output[*float64] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *float64 {
		return v.PaddingTolerance
	})
}

// The number of rows between index entries. The default is `10000` and the minimum is `1000`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) RowIndexStride() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *int {
		return v.RowIndexStride
	})
}

// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput) StripeSizeBytes() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe) *int {
		return v.StripeSizeBytes
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe struct {
	// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
	BlockSizeBytes *int `pulumi:"blockSizeBytes"`
	// The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
	Compression *string `pulumi:"compression"`
	// Indicates whether to enable dictionary compression.
	EnableDictionaryCompression *bool `pulumi:"enableDictionaryCompression"`
	// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
	MaxPaddingBytes *int `pulumi:"maxPaddingBytes"`
	// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
	PageSizeBytes *int `pulumi:"pageSizeBytes"`
	// Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
	WriterVersion *string `pulumi:"writerVersion"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs struct {
	// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
	BlockSizeBytes pulumix.Input[*int] `pulumi:"blockSizeBytes"`
	// The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
	Compression pulumix.Input[*string] `pulumi:"compression"`
	// Indicates whether to enable dictionary compression.
	EnableDictionaryCompression pulumix.Input[*bool] `pulumi:"enableDictionaryCompression"`
	// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
	MaxPaddingBytes pulumix.Input[*int] `pulumi:"maxPaddingBytes"`
	// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
	PageSizeBytes pulumix.Input[*int] `pulumi:"pageSizeBytes"`
	// Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
	WriterVersion pulumix.Input[*string] `pulumi:"writerVersion"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe]{
		OutputState: o.OutputState,
	}
}

// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) BlockSizeBytes() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe) *int {
		return v.BlockSizeBytes
	})
}

// The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) Compression() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe) *string {
		return v.Compression
	})
}

// Indicates whether to enable dictionary compression.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) EnableDictionaryCompression() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe) *bool {
		return v.EnableDictionaryCompression
	})
}

// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) MaxPaddingBytes() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe) *int {
		return v.MaxPaddingBytes
	})
}

// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) PageSizeBytes() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe) *int {
		return v.PageSizeBytes
	})
}

// Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput) WriterVersion() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe) *string {
		return v.WriterVersion
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration struct {
	// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
	CatalogId *string `pulumi:"catalogId"`
	// Specifies the name of the AWS Glue database that contains the schema for the output data.
	DatabaseName string `pulumi:"databaseName"`
	// If you don't specify an AWS Region, the default is the current region.
	Region *string `pulumi:"region"`
	// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
	RoleArn string `pulumi:"roleArn"`
	// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
	TableName string `pulumi:"tableName"`
	// Specifies the table version for the output data schema. Defaults to `LATEST`.
	VersionId *string `pulumi:"versionId"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs struct {
	// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Specifies the name of the AWS Glue database that contains the schema for the output data.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// If you don't specify an AWS Region, the default is the current region.
	Region pulumix.Input[*string] `pulumi:"region"`
	// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
	TableName pulumix.Input[string] `pulumi:"tableName"`
	// Specifies the table version for the output data schema. Defaults to `LATEST`.
	VersionId pulumix.Input[*string] `pulumi:"versionId"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration) *string {
		return v.CatalogId
	})
}

// Specifies the name of the AWS Glue database that contains the schema for the output data.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration) string {
		return v.DatabaseName
	})
}

// If you don't specify an AWS Region, the default is the current region.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration) *string {
		return v.Region
	})
}

// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration) string {
		return v.RoleArn
	})
}

// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration) string {
		return v.TableName
	})
}

// Specifies the table version for the output data schema. Defaults to `LATEST`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput) VersionId() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration) *string {
		return v.VersionId
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration struct {
	// Enables or disables dynamic partitioning. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// Total amount of seconds Firehose spends on retries. Valid values between 0 and 7200. Default is 300.
	//
	// > **NOTE:** You can enable dynamic partitioning only when you create a new delivery stream. Once you enable dynamic partitioning on a delivery stream, it cannot be disabled on this delivery stream. Therefore, the provider will recreate the resource whenever dynamic partitioning is enabled or disabled.
	RetryDuration *int `pulumi:"retryDuration"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs struct {
	// Enables or disables dynamic partitioning. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Total amount of seconds Firehose spends on retries. Valid values between 0 and 7200. Default is 300.
	//
	// > **NOTE:** You can enable dynamic partitioning only when you create a new delivery stream. Once you enable dynamic partitioning on a delivery stream, it cannot be disabled on this delivery stream. Therefore, the provider will recreate the resource whenever dynamic partitioning is enabled or disabled.
	RetryDuration pulumix.Input[*int] `pulumi:"retryDuration"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables dynamic partitioning. Defaults to `false`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration) *bool {
		return v.Enabled
	})
}

// Total amount of seconds Firehose spends on retries. Valid values between 0 and 7200. Default is 300.
//
// > **NOTE:** You can enable dynamic partitioning only when you create a new delivery stream. Once you enable dynamic partitioning on a delivery stream, it cannot be disabled on this delivery stream. Therefore, the provider will recreate the resource whenever dynamic partitioning is enabled or disabled.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput) RetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfiguration) *int {
		return v.RetryDuration
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration struct {
	// Enables or disables data processing.
	Enabled *bool `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors []FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor `pulumi:"processors"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs struct {
	// Enables or disables data processing.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors pulumix.Input[[]*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs] `pulumi:"processors"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables data processing.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration) *bool { return v.Enabled })
}

// Array of data processors. More details are given below
func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput) Processors() pulumix.GArrayOutput[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration) []FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor {
		return v.Processors
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor struct {
	// Array of processor parameters. More details are given below
	Parameters []FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type string `pulumi:"type"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs struct {
	// Array of processor parameters. More details are given below
	Parameters pulumix.Input[[]*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs] `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor]{
		OutputState: o.OutputState,
	}
}

// Array of processor parameters. More details are given below
func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput) Parameters() pulumix.GArrayOutput[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor) []FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput]{OutputState: value.OutputState}
}

// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor) string {
		return v.Type
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue string `pulumi:"parameterValue"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterName
	})
}

// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
//
// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterValue
	})
}

type FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput() FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *int {
		return v.BufferingInterval
	})
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *int {
		return v.BufferingSize
	})
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *string {
		return v.CompressionFormat
	})
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *string {
		return v.ErrorOutputPrefix
	})
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamHttpEndpointConfiguration struct {
	// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
	AccessKey *string `pulumi:"accessKey"`
	// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions *FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The HTTP endpoint name.
	Name *string `pulumi:"name"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// The request configuration.  More details are given below.
	RequestConfiguration *FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration `pulumi:"requestConfiguration"`
	// Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between `0` and `7200`. Default is `300`.
	RetryDuration *int `pulumi:"retryDuration"`
	// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be `arn:.*`.
	RoleArn *string `pulumi:"roleArn"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDataOnly` and `AllData`.  Default value is `FailedDataOnly`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration `pulumi:"s3Configuration"`
	// The HTTP endpoint URL to which Kinesis Firehose sends your data.
	Url string `pulumi:"url"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationArgs struct {
	// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
	AccessKey pulumix.Input[*string] `pulumi:"accessKey"`
	// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The HTTP endpoint name.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration pulumix.Input[*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// The request configuration.  More details are given below.
	RequestConfiguration pulumix.Input[*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs] `pulumi:"requestConfiguration"`
	// Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between `0` and `7200`. Default is `300`.
	RetryDuration pulumix.Input[*int] `pulumi:"retryDuration"`
	// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be `arn:.*`.
	RoleArn pulumix.Input[*string] `pulumi:"roleArn"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDataOnly` and `AllData`.  Default value is `FailedDataOnly`.
	S3BackupMode pulumix.Input[*string] `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration pulumix.Input[*FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs] `pulumi:"s3Configuration"`
	// The HTTP endpoint URL to which Kinesis Firehose sends your data.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) AccessKey() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *string { return v.AccessKey })
}

// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The HTTP endpoint name.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *string { return v.Name })
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) ProcessingConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration, FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration, FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// The request configuration.  More details are given below.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) RequestConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration, FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration {
		return v.RequestConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration, FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput]{OutputState: value.OutputState}
}

// Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between `0` and `7200`. Default is `300`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) RetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *int { return v.RetryDuration })
}

// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be `arn:.*`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) RoleArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *string { return v.RoleArn })
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDataOnly` and `AllData`.  Default value is `FailedDataOnly`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) S3BackupMode() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) *string { return v.S3BackupMode })
}

// The S3 Configuration. See s3Configuration for more details.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) S3Configuration() pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration, FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration, FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput]{OutputState: value.OutputState}
}

// The HTTP endpoint URL to which Kinesis Firehose sends your data.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfiguration) string { return v.Url })
}

type FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration struct {
	// Enables or disables data processing.
	Enabled *bool `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors []FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor `pulumi:"processors"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs struct {
	// Enables or disables data processing.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors pulumix.Input[[]*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs] `pulumi:"processors"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables data processing.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration) *bool { return v.Enabled })
}

// Array of data processors. More details are given below
func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput) Processors() pulumix.GArrayOutput[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration) []FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor {
		return v.Processors
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor struct {
	// Array of processor parameters. More details are given below
	Parameters []FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type string `pulumi:"type"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs struct {
	// Array of processor parameters. More details are given below
	Parameters pulumix.Input[[]*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs] `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor]{
		OutputState: o.OutputState,
	}
}

// Array of processor parameters. More details are given below
func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput) Parameters() pulumix.GArrayOutput[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor) []FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput]{OutputState: value.OutputState}
}

// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor) string {
		return v.Type
	})
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue string `pulumi:"parameterValue"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterName
	})
}

// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
//
// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterValue
	})
}

type FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration struct {
	// Describes the metadata sent to the HTTP endpoint destination. More details are given below
	CommonAttributes []FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute `pulumi:"commonAttributes"`
	// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are `NONE` and `GZIP`.  Default value is `NONE`.
	ContentEncoding *string `pulumi:"contentEncoding"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs struct {
	// Describes the metadata sent to the HTTP endpoint destination. More details are given below
	CommonAttributes pulumix.Input[[]*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs] `pulumi:"commonAttributes"`
	// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are `NONE` and `GZIP`.  Default value is `NONE`.
	ContentEncoding pulumix.Input[*string] `pulumi:"contentEncoding"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes the metadata sent to the HTTP endpoint destination. More details are given below
func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput) CommonAttributes() pulumix.GArrayOutput[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute, FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration) []FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute {
		return v.CommonAttributes
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute, FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput]{OutputState: value.OutputState}
}

// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are `NONE` and `GZIP`.  Default value is `NONE`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput) ContentEncoding() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration) *string {
		return v.ContentEncoding
	})
}

type FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute struct {
	// The name of the HTTP endpoint common attribute.
	Name string `pulumi:"name"`
	// The value of the HTTP endpoint common attribute.
	Value string `pulumi:"value"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs struct {
	// The name of the HTTP endpoint common attribute.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the HTTP endpoint common attribute.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput() FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput() FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute]{
		OutputState: o.OutputState,
	}
}

// The name of the HTTP endpoint common attribute.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute) string {
		return v.Name
	})
}

// The value of the HTTP endpoint common attribute.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute) string {
		return v.Value
	})
}

type FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *int {
		return v.BufferingInterval
	})
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *string {
		return v.CompressionFormat
	})
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *string {
		return v.ErrorOutputPrefix
	})
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3Configuration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamKinesisSourceConfiguration struct {
	// The kinesis stream used as the source of the firehose delivery stream.
	KinesisStreamArn string `pulumi:"kinesisStreamArn"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamKinesisSourceConfigurationArgs struct {
	// The kinesis stream used as the source of the firehose delivery stream.
	KinesisStreamArn pulumix.Input[string] `pulumi:"kinesisStreamArn"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamKinesisSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamKinesisSourceConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamKinesisSourceConfigurationArgs) ToFirehoseDeliveryStreamKinesisSourceConfigurationOutput() FirehoseDeliveryStreamKinesisSourceConfigurationOutput {
	return i.ToFirehoseDeliveryStreamKinesisSourceConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamKinesisSourceConfigurationArgs) ToFirehoseDeliveryStreamKinesisSourceConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamKinesisSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamKinesisSourceConfigurationOutput)
}

func (i *FirehoseDeliveryStreamKinesisSourceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamKinesisSourceConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamKinesisSourceConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamKinesisSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamKinesisSourceConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamKinesisSourceConfigurationOutput) ToFirehoseDeliveryStreamKinesisSourceConfigurationOutput() FirehoseDeliveryStreamKinesisSourceConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamKinesisSourceConfigurationOutput) ToFirehoseDeliveryStreamKinesisSourceConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamKinesisSourceConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamKinesisSourceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamKinesisSourceConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamKinesisSourceConfiguration]{
		OutputState: o.OutputState,
	}
}

// The kinesis stream used as the source of the firehose delivery stream.
func (o FirehoseDeliveryStreamKinesisSourceConfigurationOutput) KinesisStreamArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamKinesisSourceConfiguration](o, func(v FirehoseDeliveryStreamKinesisSourceConfiguration) string { return v.KinesisStreamArn })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamKinesisSourceConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamKinesisSourceConfiguration](o, func(v FirehoseDeliveryStreamKinesisSourceConfiguration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamOpensearchConfiguration struct {
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
	ClusterEndpoint *string `pulumi:"clusterEndpoint"`
	// The ARN of the Amazon ES domain.  The pattern needs to be `arn:.*`.  Conflicts with `clusterEndpoint`.
	DomainArn *string `pulumi:"domainArn"`
	// The Opensearch index name.
	IndexName string `pulumi:"indexName"`
	// The Opensearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
	IndexRotationPeriod *string `pulumi:"indexRotationPeriod"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon OpenSearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration *int `pulumi:"retryDuration"`
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for `DescribeDomain`, `DescribeDomains`, and `DescribeDomainConfig`.  The pattern needs to be `arn:.*`.
	RoleArn string `pulumi:"roleArn"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration FirehoseDeliveryStreamOpensearchConfigurationS3Configuration `pulumi:"s3Configuration"`
	// The Elasticsearch type name with maximum length of 100 characters. Types are deprecated in OpenSearch_1.1. TypeName must be empty.
	TypeName *string `pulumi:"typeName"`
	// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. More details are given below
	VpcConfig *FirehoseDeliveryStreamOpensearchConfigurationVpcConfig `pulumi:"vpcConfig"`
}

type FirehoseDeliveryStreamOpensearchConfigurationArgs struct {
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
	ClusterEndpoint pulumix.Input[*string] `pulumi:"clusterEndpoint"`
	// The ARN of the Amazon ES domain.  The pattern needs to be `arn:.*`.  Conflicts with `clusterEndpoint`.
	DomainArn pulumix.Input[*string] `pulumi:"domainArn"`
	// The Opensearch index name.
	IndexName pulumix.Input[string] `pulumi:"indexName"`
	// The Opensearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
	IndexRotationPeriod pulumix.Input[*string] `pulumi:"indexRotationPeriod"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration pulumix.Input[*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Amazon OpenSearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration pulumix.Input[*int] `pulumi:"retryDuration"`
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for `DescribeDomain`, `DescribeDomains`, and `DescribeDomainConfig`.  The pattern needs to be `arn:.*`.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
	S3BackupMode pulumix.Input[*string] `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration pulumix.Input[*FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs] `pulumi:"s3Configuration"`
	// The Elasticsearch type name with maximum length of 100 characters. Types are deprecated in OpenSearch_1.1. TypeName must be empty.
	TypeName pulumix.Input[*string] `pulumi:"typeName"`
	// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. More details are given below
	VpcConfig pulumix.Input[*FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs] `pulumi:"vpcConfig"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationArgs) ToFirehoseDeliveryStreamOpensearchConfigurationOutput() FirehoseDeliveryStreamOpensearchConfigurationOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationArgs) ToFirehoseDeliveryStreamOpensearchConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) ToFirehoseDeliveryStreamOpensearchConfigurationOutput() FirehoseDeliveryStreamOpensearchConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) ToFirehoseDeliveryStreamOpensearchConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfiguration]{
		OutputState: o.OutputState,
	}
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) ClusterEndpoint() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *string { return v.ClusterEndpoint })
}

// The ARN of the Amazon ES domain.  The pattern needs to be `arn:.*`.  Conflicts with `clusterEndpoint`.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) DomainArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *string { return v.DomainArn })
}

// The Opensearch index name.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) IndexName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) string { return v.IndexName })
}

// The Opensearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) IndexRotationPeriod() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *string { return v.IndexRotationPeriod })
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) ProcessingConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration, FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration, FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// After an initial failure to deliver to Amazon OpenSearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) RetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *int { return v.RetryDuration })
}

// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for `DescribeDomain`, `DescribeDomains`, and `DescribeDomainConfig`.  The pattern needs to be `arn:.*`.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) string { return v.RoleArn })
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) S3BackupMode() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *string { return v.S3BackupMode })
}

// The S3 Configuration. See s3Configuration for more details.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) S3Configuration() pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration, FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) FirehoseDeliveryStreamOpensearchConfigurationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration, FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput]{OutputState: value.OutputState}
}

// The Elasticsearch type name with maximum length of 100 characters. Types are deprecated in OpenSearch_1.1. TypeName must be empty.
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) TypeName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *string { return v.TypeName })
}

// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. More details are given below
func (o FirehoseDeliveryStreamOpensearchConfigurationOutput) VpcConfig() pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig, FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfiguration) *FirehoseDeliveryStreamOpensearchConfigurationVpcConfig {
		return v.VpcConfig
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig, FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions) *bool { return v.Enabled })
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration struct {
	// Enables or disables data processing.
	Enabled *bool `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors []FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor `pulumi:"processors"`
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs struct {
	// Enables or disables data processing.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors pulumix.Input[[]*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs] `pulumi:"processors"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables data processing.
func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration) *bool { return v.Enabled })
}

// Array of data processors. More details are given below
func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput) Processors() pulumix.GArrayOutput[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationProcessingConfiguration) []FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor {
		return v.Processors
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor struct {
	// Array of processor parameters. More details are given below
	Parameters []FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type string `pulumi:"type"`
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs struct {
	// Array of processor parameters. More details are given below
	Parameters pulumix.Input[[]*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs] `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor]{
		OutputState: o.OutputState,
	}
}

// Array of processor parameters. More details are given below
func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput) Parameters() pulumix.GArrayOutput[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor) []FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput]{OutputState: value.OutputState}
}

// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessor) string {
		return v.Type
	})
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue string `pulumi:"parameterValue"`
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterName
	})
}

// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
//
// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
func (o FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterValue
	})
}

type FirehoseDeliveryStreamOpensearchConfigurationS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *string {
		return v.CompressionFormat
	})
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *string {
		return v.ErrorOutputPrefix
	})
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3Configuration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamOpensearchConfigurationVpcConfig struct {
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
	RoleArn string `pulumi:"roleArn"`
	// A list of security group IDs to associate with Kinesis Firehose.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs to associate with Kinesis Firehose.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     *string  `pulumi:"vpcId"`
}

type FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs struct {
	// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// A list of security group IDs to associate with Kinesis Firehose.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// A list of subnet IDs to associate with Kinesis Firehose.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	VpcId     pulumix.Input[*string]  `pulumi:"vpcId"`
}

func (FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationVpcConfig)(nil)).Elem()
}

func (i FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs) ToFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput() FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput {
	return i.ToFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs) ToFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput)
}

func (i *FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamOpensearchConfigurationVpcConfigArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamOpensearchConfigurationVpcConfig)(nil)).Elem()
}

func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) ToFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput() FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) ToFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputWithContext(ctx context.Context) FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput {
	return o
}

func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig] {
	return pulumix.Output[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamOpensearchConfigurationVpcConfig) string { return v.RoleArn })
}

// A list of security group IDs to associate with Kinesis Firehose.
func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamOpensearchConfigurationVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of subnet IDs to associate with Kinesis Firehose.
func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamOpensearchConfigurationVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamOpensearchConfigurationVpcConfig](o, func(v FirehoseDeliveryStreamOpensearchConfigurationVpcConfig) *string { return v.VpcId })
}

type FirehoseDeliveryStreamRedshiftConfiguration struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The jdbcurl of the redshift cluster.
	ClusterJdbcurl string `pulumi:"clusterJdbcurl"`
	// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
	CopyOptions *string `pulumi:"copyOptions"`
	// The data table columns that will be targeted by the copy command.
	DataTableColumns *string `pulumi:"dataTableColumns"`
	// The name of the table in the redshift cluster that the s3 bucket will copy to.
	DataTableName string `pulumi:"dataTableName"`
	// The password for the username above.
	Password string `pulumi:"password"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
	RetryDuration *int `pulumi:"retryDuration"`
	// The arn of the role the stream assumes.
	RoleArn string `pulumi:"roleArn"`
	// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
	S3BackupConfiguration *FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration `pulumi:"s3BackupConfiguration"`
	// The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration FirehoseDeliveryStreamRedshiftConfigurationS3Configuration `pulumi:"s3Configuration"`
	// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
	Username string `pulumi:"username"`
}

type FirehoseDeliveryStreamRedshiftConfigurationArgs struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The jdbcurl of the redshift cluster.
	ClusterJdbcurl pulumix.Input[string] `pulumi:"clusterJdbcurl"`
	// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
	CopyOptions pulumix.Input[*string] `pulumi:"copyOptions"`
	// The data table columns that will be targeted by the copy command.
	DataTableColumns pulumix.Input[*string] `pulumi:"dataTableColumns"`
	// The name of the table in the redshift cluster that the s3 bucket will copy to.
	DataTableName pulumix.Input[string] `pulumi:"dataTableName"`
	// The password for the username above.
	Password pulumix.Input[string] `pulumi:"password"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration pulumix.Input[*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
	RetryDuration pulumix.Input[*int] `pulumi:"retryDuration"`
	// The arn of the role the stream assumes.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
	S3BackupConfiguration pulumix.Input[*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs] `pulumi:"s3BackupConfiguration"`
	// The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
	S3BackupMode pulumix.Input[*string] `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration pulumix.Input[*FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs] `pulumi:"s3Configuration"`
	// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfiguration]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The jdbcurl of the redshift cluster.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ClusterJdbcurl() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.ClusterJdbcurl })
}

// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) CopyOptions() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.CopyOptions })
}

// The data table columns that will be targeted by the copy command.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) DataTableColumns() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.DataTableColumns })
}

// The name of the table in the redshift cluster that the s3 bucket will copy to.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) DataTableName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.DataTableName })
}

// The password for the username above.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.Password })
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) ProcessingConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration, FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration, FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) RetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *int { return v.RetryDuration })
}

// The arn of the role the stream assumes.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.RoleArn })
}

// The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) S3BackupConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration, FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration {
		return v.S3BackupConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration, FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput]{OutputState: value.OutputState}
}

// The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) S3BackupMode() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) *string { return v.S3BackupMode })
}

// The S3 Configuration. See s3Configuration for more details.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) S3Configuration() pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration, FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) FirehoseDeliveryStreamRedshiftConfigurationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration, FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput]{OutputState: value.OutputState}
}

// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
func (o FirehoseDeliveryStreamRedshiftConfigurationOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfiguration) string { return v.Username })
}

type FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions) *bool { return v.Enabled })
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration struct {
	// Enables or disables data processing.
	Enabled *bool `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors []FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor `pulumi:"processors"`
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs struct {
	// Enables or disables data processing.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors pulumix.Input[[]*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs] `pulumi:"processors"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables data processing.
func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration) *bool { return v.Enabled })
}

// Array of data processors. More details are given below
func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput) Processors() pulumix.GArrayOutput[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration) []FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor {
		return v.Processors
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor struct {
	// Array of processor parameters. More details are given below
	Parameters []FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type string `pulumi:"type"`
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs struct {
	// Array of processor parameters. More details are given below
	Parameters pulumix.Input[[]*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs] `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor]{
		OutputState: o.OutputState,
	}
}

// Array of processor parameters. More details are given below
func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput) Parameters() pulumix.GArrayOutput[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor) []FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput]{OutputState: value.OutputState}
}

// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor) string {
		return v.Type
	})
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue string `pulumi:"parameterValue"`
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterName
	})
}

// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
//
// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
func (o FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterValue
	})
}

type FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *int {
		return v.BufferingInterval
	})
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *string {
		return v.CompressionFormat
	})
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *string {
		return v.ErrorOutputPrefix
	})
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamRedshiftConfigurationS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *string { return v.CompressionFormat })
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *string { return v.ErrorOutputPrefix })
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3Configuration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamServerSideEncryption struct {
	// Whether to enable encryption at rest. Default is `false`.
	Enabled *bool `pulumi:"enabled"`
	// Amazon Resource Name (ARN) of the encryption key. Required when `keyType` is `CUSTOMER_MANAGED_CMK`.
	//
	// The `extendedS3Configuration` object supports the same fields from s3Configuration as well as the following:
	KeyArn *string `pulumi:"keyArn"`
	// Type of encryption key. Default is `AWS_OWNED_CMK`. Valid values are `AWS_OWNED_CMK` and `CUSTOMER_MANAGED_CMK`
	KeyType *string `pulumi:"keyType"`
}

type FirehoseDeliveryStreamServerSideEncryptionArgs struct {
	// Whether to enable encryption at rest. Default is `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Amazon Resource Name (ARN) of the encryption key. Required when `keyType` is `CUSTOMER_MANAGED_CMK`.
	//
	// The `extendedS3Configuration` object supports the same fields from s3Configuration as well as the following:
	KeyArn pulumix.Input[*string] `pulumi:"keyArn"`
	// Type of encryption key. Default is `AWS_OWNED_CMK`. Valid values are `AWS_OWNED_CMK` and `CUSTOMER_MANAGED_CMK`
	KeyType pulumix.Input[*string] `pulumi:"keyType"`
}

func (FirehoseDeliveryStreamServerSideEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamServerSideEncryption)(nil)).Elem()
}

func (i FirehoseDeliveryStreamServerSideEncryptionArgs) ToFirehoseDeliveryStreamServerSideEncryptionOutput() FirehoseDeliveryStreamServerSideEncryptionOutput {
	return i.ToFirehoseDeliveryStreamServerSideEncryptionOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamServerSideEncryptionArgs) ToFirehoseDeliveryStreamServerSideEncryptionOutputWithContext(ctx context.Context) FirehoseDeliveryStreamServerSideEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamServerSideEncryptionOutput)
}

func (i *FirehoseDeliveryStreamServerSideEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamServerSideEncryptionArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamServerSideEncryptionOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamServerSideEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamServerSideEncryption)(nil)).Elem()
}

func (o FirehoseDeliveryStreamServerSideEncryptionOutput) ToFirehoseDeliveryStreamServerSideEncryptionOutput() FirehoseDeliveryStreamServerSideEncryptionOutput {
	return o
}

func (o FirehoseDeliveryStreamServerSideEncryptionOutput) ToFirehoseDeliveryStreamServerSideEncryptionOutputWithContext(ctx context.Context) FirehoseDeliveryStreamServerSideEncryptionOutput {
	return o
}

func (o FirehoseDeliveryStreamServerSideEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamServerSideEncryption] {
	return pulumix.Output[FirehoseDeliveryStreamServerSideEncryption]{
		OutputState: o.OutputState,
	}
}

// Whether to enable encryption at rest. Default is `false`.
func (o FirehoseDeliveryStreamServerSideEncryptionOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamServerSideEncryption](o, func(v FirehoseDeliveryStreamServerSideEncryption) *bool { return v.Enabled })
}

// Amazon Resource Name (ARN) of the encryption key. Required when `keyType` is `CUSTOMER_MANAGED_CMK`.
//
// The `extendedS3Configuration` object supports the same fields from s3Configuration as well as the following:
func (o FirehoseDeliveryStreamServerSideEncryptionOutput) KeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamServerSideEncryption](o, func(v FirehoseDeliveryStreamServerSideEncryption) *string { return v.KeyArn })
}

// Type of encryption key. Default is `AWS_OWNED_CMK`. Valid values are `AWS_OWNED_CMK` and `CUSTOMER_MANAGED_CMK`
func (o FirehoseDeliveryStreamServerSideEncryptionOutput) KeyType() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamServerSideEncryption](o, func(v FirehoseDeliveryStreamServerSideEncryption) *string { return v.KeyType })
}

type FirehoseDeliveryStreamSplunkConfiguration struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
	HecAcknowledgmentTimeout *int `pulumi:"hecAcknowledgmentTimeout"`
	// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
	HecEndpoint string `pulumi:"hecEndpoint"`
	// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
	HecEndpointType *string `pulumi:"hecEndpointType"`
	// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
	HecToken string `pulumi:"hecToken"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration *FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration *int `pulumi:"retryDuration"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
	S3BackupMode *string `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration FirehoseDeliveryStreamSplunkConfigurationS3Configuration `pulumi:"s3Configuration"`
}

type FirehoseDeliveryStreamSplunkConfigurationArgs struct {
	// The CloudWatch Logging Options for the delivery stream. More details are given below.
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
	HecAcknowledgmentTimeout pulumix.Input[*int] `pulumi:"hecAcknowledgmentTimeout"`
	// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
	HecEndpoint pulumix.Input[string] `pulumi:"hecEndpoint"`
	// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
	HecEndpointType pulumix.Input[*string] `pulumi:"hecEndpointType"`
	// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
	HecToken pulumix.Input[string] `pulumi:"hecToken"`
	// The data processing configuration.  More details are given below.
	ProcessingConfiguration pulumix.Input[*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs] `pulumi:"processingConfiguration"`
	// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
	RetryDuration pulumix.Input[*int] `pulumi:"retryDuration"`
	// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
	S3BackupMode pulumix.Input[*string] `pulumi:"s3BackupMode"`
	// The S3 Configuration. See s3Configuration for more details.
	S3Configuration pulumix.Input[*FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs] `pulumi:"s3Configuration"`
}

func (FirehoseDeliveryStreamSplunkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfiguration]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch Logging Options for the delivery stream. More details are given below.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) *FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecAcknowledgmentTimeout() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) *int { return v.HecAcknowledgmentTimeout })
}

// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecEndpoint() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) string { return v.HecEndpoint })
}

// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecEndpointType() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) *string { return v.HecEndpointType })
}

// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) HecToken() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) string { return v.HecToken })
}

// The data processing configuration.  More details are given below.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) ProcessingConfiguration() pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration, FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) *FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration {
		return v.ProcessingConfiguration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration, FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput]{OutputState: value.OutputState}
}

// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) RetryDuration() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) *int { return v.RetryDuration })
}

// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) S3BackupMode() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) *string { return v.S3BackupMode })
}

// The S3 Configuration. See s3Configuration for more details.
func (o FirehoseDeliveryStreamSplunkConfigurationOutput) S3Configuration() pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationS3Configuration, FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamSplunkConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfiguration) FirehoseDeliveryStreamSplunkConfigurationS3Configuration {
		return v.S3Configuration
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationS3Configuration, FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions) *bool { return v.Enabled })
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration struct {
	// Enables or disables data processing.
	Enabled *bool `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors []FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor `pulumi:"processors"`
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs struct {
	// Enables or disables data processing.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Array of data processors. More details are given below
	Processors pulumix.Input[[]*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs] `pulumi:"processors"`
}

func (FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enables or disables data processing.
func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration) *bool { return v.Enabled })
}

// Array of data processors. More details are given below
func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput) Processors() pulumix.GArrayOutput[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration](o, func(v FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration) []FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor {
		return v.Processors
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor, FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput]{OutputState: value.OutputState}
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor struct {
	// Array of processor parameters. More details are given below
	Parameters []FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type string `pulumi:"type"`
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs struct {
	// Array of processor parameters. More details are given below
	Parameters pulumix.Input[[]*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs] `pulumi:"parameters"`
	// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput() FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor]{
		OutputState: o.OutputState,
	}
}

// Array of processor parameters. More details are given below
func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput) Parameters() pulumix.GArrayOutput[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor) []FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter, FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput]{OutputState: value.OutputState}
}

// The type of processor. Valid Values: `RecordDeAggregation`, `Lambda`, `MetadataExtraction`, `AppendDelimiterToRecord`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor](o, func(v FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor) string {
		return v.Type
	})
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue string `pulumi:"parameterValue"`
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs struct {
	// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
	ParameterName pulumix.Input[string] `pulumi:"parameterName"`
	// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
	//
	// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
	ParameterValue pulumix.Input[string] `pulumi:"parameterValue"`
}

func (FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput() FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput) ToFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter]{
		OutputState: o.OutputState,
	}
}

// Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `MetadataExtractionQuery`, `JsonParsingEngine`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`, `SubRecordType`, `Delimiter`. Validation is done against [AWS SDK constants](https://docs.aws.amazon.com/sdk-for-go/api/service/firehose/#pkg-constants); so that values not explicitly listed may also work.
func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput) ParameterName() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterName
	})
}

// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
//
// > **NOTE:** Parameters with default values, including `NumberOfRetries`(default: 3), `RoleArn`(default: firehose role ARN), `BufferSizeInMBs`(default: 3), and `BufferIntervalInSeconds`(default: 60), are not stored in state. To prevent perpetual differences, it is therefore recommended to only include parameters with non-default values.
func (o FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput) ParameterValue() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter](o, func(v FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter) string {
		return v.ParameterValue
	})
}

type FirehoseDeliveryStreamSplunkConfigurationS3Configuration struct {
	// The ARN of the S3 bucket
	BucketArn string `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval *int `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize *int `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix *string `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix *string `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
}

type FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs struct {
	// The ARN of the S3 bucket
	BucketArn pulumix.Input[string] `pulumi:"bucketArn"`
	// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
	BufferingInterval pulumix.Input[*int] `pulumi:"bufferingInterval"`
	// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
	// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
	BufferingSize pulumix.Input[*int] `pulumi:"bufferingSize"`
	// The CloudWatch Logging Options for the delivery stream. More details are given below
	CloudwatchLoggingOptions pulumix.Input[*FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] `pulumi:"cloudwatchLoggingOptions"`
	// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
	CompressionFormat pulumix.Input[*string] `pulumi:"compressionFormat"`
	// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
	ErrorOutputPrefix pulumix.Input[*string] `pulumi:"errorOutputPrefix"`
	// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
	// be used.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// The ARN of the role that provides access to the source Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationS3Configuration)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationS3Configuration)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput() FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationS3Configuration] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationS3Configuration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the S3 bucket
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) BucketArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) string { return v.BucketArn })
}

// Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) BufferingInterval() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *int { return v.BufferingInterval })
}

// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
// We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) BufferingSize() pulumix.Output[*int] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *int { return v.BufferingSize })
}

// The CloudWatch Logging Options for the delivery stream. More details are given below
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions {
		return v.CloudwatchLoggingOptions
	})
	return pulumix.GPtrOutput[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions, FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput]{OutputState: value.OutputState}
}

// The compression format. If no value is specified, the default is `UNCOMPRESSED`. Other supported values are `GZIP`, `ZIP`, `Snappy`, & `HADOOP_SNAPPY`.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) CompressionFormat() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *string { return v.CompressionFormat })
}

// Prefix added to failed records before writing them to S3. Not currently supported for `redshift` destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html).
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) ErrorOutputPrefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *string { return v.ErrorOutputPrefix })
}

// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
// be used.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *string { return v.KmsKeyArn })
}

// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) *string { return v.Prefix })
}

// The ARN of the role that provides access to the source Kinesis stream.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3Configuration](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3Configuration) string { return v.RoleArn })
}

type FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName *string `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName *string `pulumi:"logStreamName"`
}

type FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs struct {
	// Enables or disables the logging. Defaults to `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The CloudWatch group name for logging. This value is required if `enabled` is true.
	LogGroupName pulumix.Input[*string] `pulumi:"logGroupName"`
	// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
	LogStreamName pulumix.Input[*string] `pulumi:"logStreamName"`
}

func (FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (i FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return i.ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(context.Background())
}

func (i FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput)
}

func (i *FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsArgs] {
	return pulumix.Val(i)
}

type FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput struct{ *pulumi.OutputState }

func (FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions)(nil)).Elem()
}

func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput() FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputWithContext(ctx context.Context) FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput {
	return o
}

func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions] {
	return pulumix.Output[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the logging. Defaults to `false`.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions) *bool {
		return v.Enabled
	})
}

// The CloudWatch group name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogGroupName
	})
}

// The CloudWatch log stream name for logging. This value is required if `enabled` is true.
func (o FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput) LogStreamName() pulumix.Output[*string] {
	return pulumix.Apply[FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions](o, func(v FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions) *string {
		return v.LogStreamName
	})
}

type StreamStreamModeDetails struct {
	// Specifies the capacity mode of the stream. Must be either `PROVISIONED` or `ON_DEMAND`.
	StreamMode string `pulumi:"streamMode"`
}

type StreamStreamModeDetailsArgs struct {
	// Specifies the capacity mode of the stream. Must be either `PROVISIONED` or `ON_DEMAND`.
	StreamMode pulumix.Input[string] `pulumi:"streamMode"`
}

func (StreamStreamModeDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamStreamModeDetails)(nil)).Elem()
}

func (i StreamStreamModeDetailsArgs) ToStreamStreamModeDetailsOutput() StreamStreamModeDetailsOutput {
	return i.ToStreamStreamModeDetailsOutputWithContext(context.Background())
}

func (i StreamStreamModeDetailsArgs) ToStreamStreamModeDetailsOutputWithContext(ctx context.Context) StreamStreamModeDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamStreamModeDetailsOutput)
}

func (i *StreamStreamModeDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*StreamStreamModeDetailsArgs] {
	return pulumix.Val(i)
}

type StreamStreamModeDetailsOutput struct{ *pulumi.OutputState }

func (StreamStreamModeDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamStreamModeDetails)(nil)).Elem()
}

func (o StreamStreamModeDetailsOutput) ToStreamStreamModeDetailsOutput() StreamStreamModeDetailsOutput {
	return o
}

func (o StreamStreamModeDetailsOutput) ToStreamStreamModeDetailsOutputWithContext(ctx context.Context) StreamStreamModeDetailsOutput {
	return o
}

func (o StreamStreamModeDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[StreamStreamModeDetails] {
	return pulumix.Output[StreamStreamModeDetails]{
		OutputState: o.OutputState,
	}
}

// Specifies the capacity mode of the stream. Must be either `PROVISIONED` or `ON_DEMAND`.
func (o StreamStreamModeDetailsOutput) StreamMode() pulumix.Output[string] {
	return pulumix.Apply[StreamStreamModeDetails](o, func(v StreamStreamModeDetails) string { return v.StreamMode })
}

type GetStreamStreamModeDetail struct {
	// Capacity mode of the stream. Either `ON_DEMAND` or `PROVISIONED`.
	StreamMode string `pulumi:"streamMode"`
}

type GetStreamStreamModeDetailArgs struct {
	// Capacity mode of the stream. Either `ON_DEMAND` or `PROVISIONED`.
	StreamMode pulumix.Input[string] `pulumi:"streamMode"`
}

func (GetStreamStreamModeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamStreamModeDetail)(nil)).Elem()
}

func (i GetStreamStreamModeDetailArgs) ToGetStreamStreamModeDetailOutput() GetStreamStreamModeDetailOutput {
	return i.ToGetStreamStreamModeDetailOutputWithContext(context.Background())
}

func (i GetStreamStreamModeDetailArgs) ToGetStreamStreamModeDetailOutputWithContext(ctx context.Context) GetStreamStreamModeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStreamStreamModeDetailOutput)
}

func (i *GetStreamStreamModeDetailArgs) ToOutput(ctx context.Context) pulumix.Output[*GetStreamStreamModeDetailArgs] {
	return pulumix.Val(i)
}

type GetStreamStreamModeDetailOutput struct{ *pulumi.OutputState }

func (GetStreamStreamModeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamStreamModeDetail)(nil)).Elem()
}

func (o GetStreamStreamModeDetailOutput) ToGetStreamStreamModeDetailOutput() GetStreamStreamModeDetailOutput {
	return o
}

func (o GetStreamStreamModeDetailOutput) ToGetStreamStreamModeDetailOutputWithContext(ctx context.Context) GetStreamStreamModeDetailOutput {
	return o
}

func (o GetStreamStreamModeDetailOutput) ToOutput(ctx context.Context) pulumix.Output[GetStreamStreamModeDetail] {
	return pulumix.Output[GetStreamStreamModeDetail]{
		OutputState: o.OutputState,
	}
}

// Capacity mode of the stream. Either `ON_DEMAND` or `PROVISIONED`.
func (o GetStreamStreamModeDetailOutput) StreamMode() pulumix.Output[string] {
	return pulumix.Apply[GetStreamStreamModeDetail](o, func(v GetStreamStreamModeDetail) string { return v.StreamMode })
}

func init() {
	pulumi.RegisterOutputType(AnalyticsApplicationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsKinesisFirehoseOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsKinesisStreamOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsParallelismOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsProcessingConfigurationLambdaOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsSchemaOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsSchemaRecordColumnOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsSchemaRecordFormatOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsSchemaRecordFormatMappingParametersOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsvOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJsonOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationInputsStartingPositionConfigurationOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationOutputTypeOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationOutputKinesisFirehoseOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationOutputKinesisStreamOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationOutputLambdaOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationOutputSchemaOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesS3Output{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesSchemaOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesSchemaRecordColumnOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsvOutput{})
	pulumi.RegisterOutputType(AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJsonOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameterOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameterOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameterOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributeOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamKinesisSourceConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorParameterOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameterOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamServerSideEncryptionOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameterOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutput{})
	pulumi.RegisterOutputType(FirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutput{})
	pulumi.RegisterOutputType(StreamStreamModeDetailsOutput{})
	pulumi.RegisterOutputType(GetStreamStreamModeDetailOutput{})
}
