// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Quick Connect.
func LookupQuickConnect(ctx *pulumi.Context, args *LookupQuickConnectArgs, opts ...pulumi.InvokeOption) (*LookupQuickConnectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQuickConnectResult
	err := ctx.Invoke("aws:connect/getQuickConnect:getQuickConnect", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuickConnect.
type LookupQuickConnectArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Quick Connect by name
	Name *string `pulumi:"name"`
	// Returns information on a specific Quick Connect by Quick Connect id
	QuickConnectId *string `pulumi:"quickConnectId"`
	// Map of tags to assign to the Quick Connect.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getQuickConnect.
type LookupQuickConnectResult struct {
	// ARN of the Quick Connect.
	Arn string `pulumi:"arn"`
	// Description of the Quick Connect.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	// A block that defines the configuration information for the Quick Connect: `quickConnectType` and one of `phoneConfig`, `queueConfig`, `userConfig` . The Quick Connect Config block is documented below.
	QuickConnectConfigs []GetQuickConnectQuickConnectConfig `pulumi:"quickConnectConfigs"`
	// Identifier for the Quick Connect.
	QuickConnectId string `pulumi:"quickConnectId"`
	// Map of tags to assign to the Quick Connect.
	Tags map[string]string `pulumi:"tags"`
}

func LookupQuickConnectOutput(ctx *pulumi.Context, args LookupQuickConnectOutputArgs, opts ...pulumi.InvokeOption) LookupQuickConnectResultOutput {
	outputResult := pulumix.ApplyErr[*LookupQuickConnectArgs](args.ToOutput(), func(plainArgs *LookupQuickConnectArgs) (*LookupQuickConnectResult, error) {
		return LookupQuickConnect(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupQuickConnectResultOutput, *LookupQuickConnectResult](outputResult)
}

// A collection of arguments for invoking getQuickConnect.
type LookupQuickConnectOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Quick Connect by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Returns information on a specific Quick Connect by Quick Connect id
	QuickConnectId pulumix.Input[*string] `pulumi:"quickConnectId"`
	// Map of tags to assign to the Quick Connect.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupQuickConnectOutputArgs) ToOutput() pulumix.Output[*LookupQuickConnectArgs] {
	allArgs := pulumix.All(
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.QuickConnectId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupQuickConnectArgs {
		return &LookupQuickConnectArgs{
			InstanceId:     resolvedArgs[0].(string),
			Name:           resolvedArgs[1].(*string),
			QuickConnectId: resolvedArgs[2].(*string),
			Tags:           resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupQuickConnectResultOutput struct{ *pulumi.OutputState }

func (LookupQuickConnectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQuickConnectResult)(nil)).Elem()
}

func (o LookupQuickConnectResultOutput) ToOutput(context.Context) pulumix.Output[*LookupQuickConnectResult] {
	return pulumix.Output[*LookupQuickConnectResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupQuickConnectResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) string { return v.Arn })
}

func (o LookupQuickConnectResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) string { return v.Description })
}

func (o LookupQuickConnectResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) string { return v.Id })
}

func (o LookupQuickConnectResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) string { return v.InstanceId })
}

func (o LookupQuickConnectResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) string { return v.Name })
}

func (o LookupQuickConnectResultOutput) QuickConnectConfigs() pulumix.GArrayOutput[GetQuickConnectQuickConnectConfig, GetQuickConnectQuickConnectConfigOutput] {
	value := pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) []GetQuickConnectQuickConnectConfig { return v.QuickConnectConfigs })
	return pulumix.GArrayOutput[GetQuickConnectQuickConnectConfig, GetQuickConnectQuickConnectConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupQuickConnectResultOutput) QuickConnectId() pulumix.Output[string] {
	return pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) string { return v.QuickConnectId })
}

func (o LookupQuickConnectResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupQuickConnectResult](o, func(v *LookupQuickConnectResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
