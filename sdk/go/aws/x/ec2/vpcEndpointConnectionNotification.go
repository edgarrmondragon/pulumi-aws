// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a VPC Endpoint connection notification resource.
// Connection notifications notify subscribers of VPC Endpoint events.
type VpcEndpointConnectionNotification struct {
	pulumi.CustomResourceState

	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	//
	// > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
	ConnectionEvents pulumix.ArrayOutput[string] `pulumi:"connectionEvents"`
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn pulumix.Output[string] `pulumi:"connectionNotificationArn"`
	// The type of notification.
	NotificationType pulumix.Output[string] `pulumi:"notificationType"`
	// The state of the notification.
	State pulumix.Output[string] `pulumi:"state"`
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId pulumix.Output[*string] `pulumi:"vpcEndpointId"`
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId pulumix.Output[*string] `pulumi:"vpcEndpointServiceId"`
}

// NewVpcEndpointConnectionNotification registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointConnectionNotification(ctx *pulumi.Context,
	name string, args *VpcEndpointConnectionNotificationArgs, opts ...pulumi.ResourceOption) (*VpcEndpointConnectionNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionEvents == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionEvents'")
	}
	if args.ConnectionNotificationArn == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionNotificationArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpointConnectionNotification
	err := ctx.RegisterResource("aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointConnectionNotification gets an existing VpcEndpointConnectionNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointConnectionNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointConnectionNotificationState, opts ...pulumi.ResourceOption) (*VpcEndpointConnectionNotification, error) {
	var resource VpcEndpointConnectionNotification
	err := ctx.ReadResource("aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointConnectionNotification resources.
type vpcEndpointConnectionNotificationState struct {
	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	//
	// > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
	ConnectionEvents []string `pulumi:"connectionEvents"`
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn *string `pulumi:"connectionNotificationArn"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The state of the notification.
	State *string `pulumi:"state"`
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId *string `pulumi:"vpcEndpointServiceId"`
}

type VpcEndpointConnectionNotificationState struct {
	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	//
	// > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
	ConnectionEvents pulumix.Input[[]string]
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn pulumix.Input[*string]
	// The type of notification.
	NotificationType pulumix.Input[*string]
	// The state of the notification.
	State pulumix.Input[*string]
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId pulumix.Input[*string]
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId pulumix.Input[*string]
}

func (VpcEndpointConnectionNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointConnectionNotificationState)(nil)).Elem()
}

type vpcEndpointConnectionNotificationArgs struct {
	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	//
	// > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
	ConnectionEvents []string `pulumi:"connectionEvents"`
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn string `pulumi:"connectionNotificationArn"`
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId *string `pulumi:"vpcEndpointServiceId"`
}

// The set of arguments for constructing a VpcEndpointConnectionNotification resource.
type VpcEndpointConnectionNotificationArgs struct {
	// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
	//
	// > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
	ConnectionEvents pulumix.Input[[]string]
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn pulumix.Input[string]
	// The ID of the VPC Endpoint to receive notifications for.
	VpcEndpointId pulumix.Input[*string]
	// The ID of the VPC Endpoint Service to receive notifications for.
	VpcEndpointServiceId pulumix.Input[*string]
}

func (VpcEndpointConnectionNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointConnectionNotificationArgs)(nil)).Elem()
}

type VpcEndpointConnectionNotificationOutput struct{ *pulumi.OutputState }

func (VpcEndpointConnectionNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointConnectionNotification)(nil)).Elem()
}

func (o VpcEndpointConnectionNotificationOutput) ToVpcEndpointConnectionNotificationOutput() VpcEndpointConnectionNotificationOutput {
	return o
}

func (o VpcEndpointConnectionNotificationOutput) ToVpcEndpointConnectionNotificationOutputWithContext(ctx context.Context) VpcEndpointConnectionNotificationOutput {
	return o
}

func (o VpcEndpointConnectionNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[VpcEndpointConnectionNotification] {
	return pulumix.Output[VpcEndpointConnectionNotification]{
		OutputState: o.OutputState,
	}
}

// One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.
//
// > **NOTE:** One of `vpcEndpointServiceId` or `vpcEndpointId` must be specified.
func (o VpcEndpointConnectionNotificationOutput) ConnectionEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointConnectionNotification](o, func(v VpcEndpointConnectionNotification) pulumix.ArrayOutput[string] { return v.ConnectionEvents })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of the SNS topic for the notifications.
func (o VpcEndpointConnectionNotificationOutput) ConnectionNotificationArn() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointConnectionNotification](o, func(v VpcEndpointConnectionNotification) pulumix.Output[string] { return v.ConnectionNotificationArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of notification.
func (o VpcEndpointConnectionNotificationOutput) NotificationType() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointConnectionNotification](o, func(v VpcEndpointConnectionNotification) pulumix.Output[string] { return v.NotificationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the notification.
func (o VpcEndpointConnectionNotificationOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointConnectionNotification](o, func(v VpcEndpointConnectionNotification) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the VPC Endpoint to receive notifications for.
func (o VpcEndpointConnectionNotificationOutput) VpcEndpointId() pulumix.Output[*string] {
	value := pulumix.Apply[VpcEndpointConnectionNotification](o, func(v VpcEndpointConnectionNotification) pulumix.Output[*string] { return v.VpcEndpointId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the VPC Endpoint Service to receive notifications for.
func (o VpcEndpointConnectionNotificationOutput) VpcEndpointServiceId() pulumix.Output[*string] {
	value := pulumix.Apply[VpcEndpointConnectionNotification](o, func(v VpcEndpointConnectionNotification) pulumix.Output[*string] { return v.VpcEndpointServiceId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointConnectionNotificationOutput{})
}
