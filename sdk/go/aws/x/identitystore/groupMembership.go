// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitystore

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IdentityStore Group Membership.
type GroupMembership struct {
	pulumi.CustomResourceState

	// The identifier for a group in the Identity Store.
	GroupId pulumix.Output[string] `pulumi:"groupId"`
	// Identity Store ID associated with the Single Sign-On Instance.
	IdentityStoreId pulumix.Output[string] `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	MemberId pulumix.Output[string] `pulumi:"memberId"`
	// The identifier of the newly created group membership in the Identity Store.
	MembershipId pulumix.Output[string] `pulumi:"membershipId"`
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.IdentityStoreId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityStoreId'")
	}
	if args.MemberId == nil {
		return nil, errors.New("invalid value for required argument 'MemberId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupMembership
	err := ctx.RegisterResource("aws:identitystore/groupMembership:GroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipState, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	var resource GroupMembership
	err := ctx.ReadResource("aws:identitystore/groupMembership:GroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMembership resources.
type groupMembershipState struct {
	// The identifier for a group in the Identity Store.
	GroupId *string `pulumi:"groupId"`
	// Identity Store ID associated with the Single Sign-On Instance.
	IdentityStoreId *string `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	MemberId *string `pulumi:"memberId"`
	// The identifier of the newly created group membership in the Identity Store.
	MembershipId *string `pulumi:"membershipId"`
}

type GroupMembershipState struct {
	// The identifier for a group in the Identity Store.
	GroupId pulumix.Input[*string]
	// Identity Store ID associated with the Single Sign-On Instance.
	IdentityStoreId pulumix.Input[*string]
	// The identifier for a user in the Identity Store.
	MemberId pulumix.Input[*string]
	// The identifier of the newly created group membership in the Identity Store.
	MembershipId pulumix.Input[*string]
}

func (GroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipState)(nil)).Elem()
}

type groupMembershipArgs struct {
	// The identifier for a group in the Identity Store.
	GroupId string `pulumi:"groupId"`
	// Identity Store ID associated with the Single Sign-On Instance.
	IdentityStoreId string `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	MemberId string `pulumi:"memberId"`
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// The identifier for a group in the Identity Store.
	GroupId pulumix.Input[string]
	// Identity Store ID associated with the Single Sign-On Instance.
	IdentityStoreId pulumix.Input[string]
	// The identifier for a user in the Identity Store.
	MemberId pulumix.Input[string]
}

func (GroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipArgs)(nil)).Elem()
}

type GroupMembershipOutput struct{ *pulumi.OutputState }

func (GroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembership)(nil)).Elem()
}

func (o GroupMembershipOutput) ToGroupMembershipOutput() GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[GroupMembership] {
	return pulumix.Output[GroupMembership]{
		OutputState: o.OutputState,
	}
}

// The identifier for a group in the Identity Store.
func (o GroupMembershipOutput) GroupId() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.GroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identity Store ID associated with the Single Sign-On Instance.
func (o GroupMembershipOutput) IdentityStoreId() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.IdentityStoreId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier for a user in the Identity Store.
func (o GroupMembershipOutput) MemberId() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.MemberId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier of the newly created group membership in the Identity Store.
func (o GroupMembershipOutput) MembershipId() pulumix.Output[string] {
	value := pulumix.Apply[GroupMembership](o, func(v GroupMembership) pulumix.Output[string] { return v.MembershipId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupMembershipOutput{})
}
