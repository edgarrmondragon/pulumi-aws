// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SSM Maintenance Window Task resource
type MaintenanceWindowTask struct {
	pulumi.CustomResourceState

	// The ARN of the maintenance window task.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
	CutoffBehavior pulumix.Output[*string] `pulumi:"cutoffBehavior"`
	// The description of the maintenance window task.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency pulumix.Output[string] `pulumi:"maxConcurrency"`
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors pulumix.Output[string] `pulumi:"maxErrors"`
	// The name of the maintenance window task.
	Name pulumix.Output[string] `pulumi:"name"`
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority pulumix.Output[*int] `pulumi:"priority"`
	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	ServiceRoleArn pulumix.Output[string] `pulumi:"serviceRoleArn"`
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets pulumix.GArrayOutput[MaintenanceWindowTaskTarget, MaintenanceWindowTaskTargetOutput] `pulumi:"targets"`
	// The ARN of the task to execute.
	TaskArn pulumix.Output[string] `pulumi:"taskArn"`
	// Configuration block with parameters for task execution.
	TaskInvocationParameters pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParameters, MaintenanceWindowTaskTaskInvocationParametersOutput] `pulumi:"taskInvocationParameters"`
	// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
	TaskType pulumix.Output[string] `pulumi:"taskType"`
	// The Id of the maintenance window to register the task with.
	WindowId pulumix.Output[string] `pulumi:"windowId"`
	// The ID of the maintenance window task.
	WindowTaskId pulumix.Output[string] `pulumi:"windowTaskId"`
}

// NewMaintenanceWindowTask registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindowTask(ctx *pulumi.Context,
	name string, args *MaintenanceWindowTaskArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindowTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskArn == nil {
		return nil, errors.New("invalid value for required argument 'TaskArn'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	if args.WindowId == nil {
		return nil, errors.New("invalid value for required argument 'WindowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MaintenanceWindowTask
	err := ctx.RegisterResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindowTask gets an existing MaintenanceWindowTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindowTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowTaskState, opts ...pulumi.ResourceOption) (*MaintenanceWindowTask, error) {
	var resource MaintenanceWindowTask
	err := ctx.ReadResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindowTask resources.
type maintenanceWindowTaskState struct {
	// The ARN of the maintenance window task.
	Arn *string `pulumi:"arn"`
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
	CutoffBehavior *string `pulumi:"cutoffBehavior"`
	// The description of the maintenance window task.
	Description *string `pulumi:"description"`
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors *string `pulumi:"maxErrors"`
	// The name of the maintenance window task.
	Name *string `pulumi:"name"`
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority *int `pulumi:"priority"`
	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets []MaintenanceWindowTaskTarget `pulumi:"targets"`
	// The ARN of the task to execute.
	TaskArn *string `pulumi:"taskArn"`
	// Configuration block with parameters for task execution.
	TaskInvocationParameters *MaintenanceWindowTaskTaskInvocationParameters `pulumi:"taskInvocationParameters"`
	// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
	TaskType *string `pulumi:"taskType"`
	// The Id of the maintenance window to register the task with.
	WindowId *string `pulumi:"windowId"`
	// The ID of the maintenance window task.
	WindowTaskId *string `pulumi:"windowTaskId"`
}

type MaintenanceWindowTaskState struct {
	// The ARN of the maintenance window task.
	Arn pulumix.Input[*string]
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
	CutoffBehavior pulumix.Input[*string]
	// The description of the maintenance window task.
	Description pulumix.Input[*string]
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency pulumix.Input[*string]
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors pulumix.Input[*string]
	// The name of the maintenance window task.
	Name pulumix.Input[*string]
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority pulumix.Input[*int]
	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	ServiceRoleArn pulumix.Input[*string]
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets pulumix.Input[[]*MaintenanceWindowTaskTargetArgs]
	// The ARN of the task to execute.
	TaskArn pulumix.Input[*string]
	// Configuration block with parameters for task execution.
	TaskInvocationParameters pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersArgs]
	// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
	TaskType pulumix.Input[*string]
	// The Id of the maintenance window to register the task with.
	WindowId pulumix.Input[*string]
	// The ID of the maintenance window task.
	WindowTaskId pulumix.Input[*string]
}

func (MaintenanceWindowTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTaskState)(nil)).Elem()
}

type maintenanceWindowTaskArgs struct {
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
	CutoffBehavior *string `pulumi:"cutoffBehavior"`
	// The description of the maintenance window task.
	Description *string `pulumi:"description"`
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors *string `pulumi:"maxErrors"`
	// The name of the maintenance window task.
	Name *string `pulumi:"name"`
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority *int `pulumi:"priority"`
	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets []MaintenanceWindowTaskTarget `pulumi:"targets"`
	// The ARN of the task to execute.
	TaskArn string `pulumi:"taskArn"`
	// Configuration block with parameters for task execution.
	TaskInvocationParameters *MaintenanceWindowTaskTaskInvocationParameters `pulumi:"taskInvocationParameters"`
	// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
	TaskType string `pulumi:"taskType"`
	// The Id of the maintenance window to register the task with.
	WindowId string `pulumi:"windowId"`
}

// The set of arguments for constructing a MaintenanceWindowTask resource.
type MaintenanceWindowTaskArgs struct {
	// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
	CutoffBehavior pulumix.Input[*string]
	// The description of the maintenance window task.
	Description pulumix.Input[*string]
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency pulumix.Input[*string]
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors pulumix.Input[*string]
	// The name of the maintenance window task.
	Name pulumix.Input[*string]
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority pulumix.Input[*int]
	// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
	ServiceRoleArn pulumix.Input[*string]
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets pulumix.Input[[]*MaintenanceWindowTaskTargetArgs]
	// The ARN of the task to execute.
	TaskArn pulumix.Input[string]
	// Configuration block with parameters for task execution.
	TaskInvocationParameters pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersArgs]
	// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
	TaskType pulumix.Input[string]
	// The Id of the maintenance window to register the task with.
	WindowId pulumix.Input[string]
}

func (MaintenanceWindowTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowTaskArgs)(nil)).Elem()
}

type MaintenanceWindowTaskOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTask)(nil)).Elem()
}

func (o MaintenanceWindowTaskOutput) ToMaintenanceWindowTaskOutput() MaintenanceWindowTaskOutput {
	return o
}

func (o MaintenanceWindowTaskOutput) ToMaintenanceWindowTaskOutputWithContext(ctx context.Context) MaintenanceWindowTaskOutput {
	return o
}

func (o MaintenanceWindowTaskOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTask] {
	return pulumix.Output[MaintenanceWindowTask]{
		OutputState: o.OutputState,
	}
}

// The ARN of the maintenance window task.
func (o MaintenanceWindowTaskOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are `CONTINUE_TASK` and `CANCEL_TASK`.
func (o MaintenanceWindowTaskOutput) CutoffBehavior() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[*string] { return v.CutoffBehavior })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The description of the maintenance window task.
func (o MaintenanceWindowTaskOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The maximum number of targets this task can be run for in parallel.
func (o MaintenanceWindowTaskOutput) MaxConcurrency() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.MaxConcurrency })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum number of errors allowed before this task stops being scheduled.
func (o MaintenanceWindowTaskOutput) MaxErrors() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.MaxErrors })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the maintenance window task.
func (o MaintenanceWindowTaskOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
func (o MaintenanceWindowTaskOutput) Priority() pulumix.Output[*int] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[*int] { return v.Priority })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
func (o MaintenanceWindowTaskOutput) ServiceRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.ServiceRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
func (o MaintenanceWindowTaskOutput) Targets() pulumix.GArrayOutput[MaintenanceWindowTaskTarget, MaintenanceWindowTaskTargetOutput] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.GArrayOutput[MaintenanceWindowTaskTarget, MaintenanceWindowTaskTargetOutput] {
		return v.Targets
	})
	unwrapped := pulumix.Flatten[[]MaintenanceWindowTaskTarget, pulumix.GArrayOutput[MaintenanceWindowTaskTarget, MaintenanceWindowTaskTargetOutput]](value)
	return pulumix.GArrayOutput[MaintenanceWindowTaskTarget, MaintenanceWindowTaskTargetOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the task to execute.
func (o MaintenanceWindowTaskOutput) TaskArn() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.TaskArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block with parameters for task execution.
func (o MaintenanceWindowTaskOutput) TaskInvocationParameters() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParameters, MaintenanceWindowTaskTaskInvocationParametersOutput] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParameters, MaintenanceWindowTaskTaskInvocationParametersOutput] {
		return v.TaskInvocationParameters
	})
	unwrapped := pulumix.Flatten[*MaintenanceWindowTaskTaskInvocationParameters, pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParameters, MaintenanceWindowTaskTaskInvocationParametersOutput]](value)
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParameters, MaintenanceWindowTaskTaskInvocationParametersOutput]{OutputState: unwrapped.OutputState}
}

// The type of task being registered. Valid values: `AUTOMATION`, `LAMBDA`, `RUN_COMMAND` or `STEP_FUNCTIONS`.
func (o MaintenanceWindowTaskOutput) TaskType() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.TaskType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Id of the maintenance window to register the task with.
func (o MaintenanceWindowTaskOutput) WindowId() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.WindowId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the maintenance window task.
func (o MaintenanceWindowTaskOutput) WindowTaskId() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindowTask](o, func(v MaintenanceWindowTask) pulumix.Output[string] { return v.WindowTaskId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MaintenanceWindowTaskOutput{})
}
