// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConfigurationSetDeliveryOptions struct {
	// Whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is `Require`, messages are only delivered if a TLS connection can be established. If the value is `Optional`, messages can be delivered in plain text if a TLS connection can't be established. Valid values: `Require` or `Optional`. Defaults to `Optional`.
	TlsPolicy *string `pulumi:"tlsPolicy"`
}

type ConfigurationSetDeliveryOptionsArgs struct {
	// Whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is `Require`, messages are only delivered if a TLS connection can be established. If the value is `Optional`, messages can be delivered in plain text if a TLS connection can't be established. Valid values: `Require` or `Optional`. Defaults to `Optional`.
	TlsPolicy pulumix.Input[*string] `pulumi:"tlsPolicy"`
}

func (ConfigurationSetDeliveryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetDeliveryOptions)(nil)).Elem()
}

func (i ConfigurationSetDeliveryOptionsArgs) ToConfigurationSetDeliveryOptionsOutput() ConfigurationSetDeliveryOptionsOutput {
	return i.ToConfigurationSetDeliveryOptionsOutputWithContext(context.Background())
}

func (i ConfigurationSetDeliveryOptionsArgs) ToConfigurationSetDeliveryOptionsOutputWithContext(ctx context.Context) ConfigurationSetDeliveryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSetDeliveryOptionsOutput)
}

func (i *ConfigurationSetDeliveryOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationSetDeliveryOptionsArgs] {
	return pulumix.Val(i)
}

type ConfigurationSetDeliveryOptionsOutput struct{ *pulumi.OutputState }

func (ConfigurationSetDeliveryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetDeliveryOptions)(nil)).Elem()
}

func (o ConfigurationSetDeliveryOptionsOutput) ToConfigurationSetDeliveryOptionsOutput() ConfigurationSetDeliveryOptionsOutput {
	return o
}

func (o ConfigurationSetDeliveryOptionsOutput) ToConfigurationSetDeliveryOptionsOutputWithContext(ctx context.Context) ConfigurationSetDeliveryOptionsOutput {
	return o
}

func (o ConfigurationSetDeliveryOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationSetDeliveryOptions] {
	return pulumix.Output[ConfigurationSetDeliveryOptions]{
		OutputState: o.OutputState,
	}
}

// Whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is `Require`, messages are only delivered if a TLS connection can be established. If the value is `Optional`, messages can be delivered in plain text if a TLS connection can't be established. Valid values: `Require` or `Optional`. Defaults to `Optional`.
func (o ConfigurationSetDeliveryOptionsOutput) TlsPolicy() pulumix.Output[*string] {
	return pulumix.Apply[ConfigurationSetDeliveryOptions](o, func(v ConfigurationSetDeliveryOptions) *string { return v.TlsPolicy })
}

type ConfigurationSetTrackingOptions struct {
	// Custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain.
	CustomRedirectDomain *string `pulumi:"customRedirectDomain"`
}

type ConfigurationSetTrackingOptionsArgs struct {
	// Custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain.
	CustomRedirectDomain pulumix.Input[*string] `pulumi:"customRedirectDomain"`
}

func (ConfigurationSetTrackingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetTrackingOptions)(nil)).Elem()
}

func (i ConfigurationSetTrackingOptionsArgs) ToConfigurationSetTrackingOptionsOutput() ConfigurationSetTrackingOptionsOutput {
	return i.ToConfigurationSetTrackingOptionsOutputWithContext(context.Background())
}

func (i ConfigurationSetTrackingOptionsArgs) ToConfigurationSetTrackingOptionsOutputWithContext(ctx context.Context) ConfigurationSetTrackingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSetTrackingOptionsOutput)
}

func (i *ConfigurationSetTrackingOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationSetTrackingOptionsArgs] {
	return pulumix.Val(i)
}

type ConfigurationSetTrackingOptionsOutput struct{ *pulumi.OutputState }

func (ConfigurationSetTrackingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetTrackingOptions)(nil)).Elem()
}

func (o ConfigurationSetTrackingOptionsOutput) ToConfigurationSetTrackingOptionsOutput() ConfigurationSetTrackingOptionsOutput {
	return o
}

func (o ConfigurationSetTrackingOptionsOutput) ToConfigurationSetTrackingOptionsOutputWithContext(ctx context.Context) ConfigurationSetTrackingOptionsOutput {
	return o
}

func (o ConfigurationSetTrackingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationSetTrackingOptions] {
	return pulumix.Output[ConfigurationSetTrackingOptions]{
		OutputState: o.OutputState,
	}
}

// Custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain.
func (o ConfigurationSetTrackingOptionsOutput) CustomRedirectDomain() pulumix.Output[*string] {
	return pulumix.Apply[ConfigurationSetTrackingOptions](o, func(v ConfigurationSetTrackingOptions) *string { return v.CustomRedirectDomain })
}

type EventDestinationCloudwatchDestination struct {
	// The default value for the event
	DefaultValue string `pulumi:"defaultValue"`
	// The name for the dimension
	DimensionName string `pulumi:"dimensionName"`
	// The source for the value. May be any of `"messageTag"`, `"emailHeader"` or `"linkTag"`.
	ValueSource string `pulumi:"valueSource"`
}

type EventDestinationCloudwatchDestinationArgs struct {
	// The default value for the event
	DefaultValue pulumix.Input[string] `pulumi:"defaultValue"`
	// The name for the dimension
	DimensionName pulumix.Input[string] `pulumi:"dimensionName"`
	// The source for the value. May be any of `"messageTag"`, `"emailHeader"` or `"linkTag"`.
	ValueSource pulumix.Input[string] `pulumi:"valueSource"`
}

func (EventDestinationCloudwatchDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationCloudwatchDestination)(nil)).Elem()
}

func (i EventDestinationCloudwatchDestinationArgs) ToEventDestinationCloudwatchDestinationOutput() EventDestinationCloudwatchDestinationOutput {
	return i.ToEventDestinationCloudwatchDestinationOutputWithContext(context.Background())
}

func (i EventDestinationCloudwatchDestinationArgs) ToEventDestinationCloudwatchDestinationOutputWithContext(ctx context.Context) EventDestinationCloudwatchDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationCloudwatchDestinationOutput)
}

func (i *EventDestinationCloudwatchDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*EventDestinationCloudwatchDestinationArgs] {
	return pulumix.Val(i)
}

type EventDestinationCloudwatchDestinationOutput struct{ *pulumi.OutputState }

func (EventDestinationCloudwatchDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationCloudwatchDestination)(nil)).Elem()
}

func (o EventDestinationCloudwatchDestinationOutput) ToEventDestinationCloudwatchDestinationOutput() EventDestinationCloudwatchDestinationOutput {
	return o
}

func (o EventDestinationCloudwatchDestinationOutput) ToEventDestinationCloudwatchDestinationOutputWithContext(ctx context.Context) EventDestinationCloudwatchDestinationOutput {
	return o
}

func (o EventDestinationCloudwatchDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationCloudwatchDestination] {
	return pulumix.Output[EventDestinationCloudwatchDestination]{
		OutputState: o.OutputState,
	}
}

// The default value for the event
func (o EventDestinationCloudwatchDestinationOutput) DefaultValue() pulumix.Output[string] {
	return pulumix.Apply[EventDestinationCloudwatchDestination](o, func(v EventDestinationCloudwatchDestination) string { return v.DefaultValue })
}

// The name for the dimension
func (o EventDestinationCloudwatchDestinationOutput) DimensionName() pulumix.Output[string] {
	return pulumix.Apply[EventDestinationCloudwatchDestination](o, func(v EventDestinationCloudwatchDestination) string { return v.DimensionName })
}

// The source for the value. May be any of `"messageTag"`, `"emailHeader"` or `"linkTag"`.
func (o EventDestinationCloudwatchDestinationOutput) ValueSource() pulumix.Output[string] {
	return pulumix.Apply[EventDestinationCloudwatchDestination](o, func(v EventDestinationCloudwatchDestination) string { return v.ValueSource })
}

type EventDestinationKinesisDestination struct {
	// The ARN of the role that has permissions to access the Kinesis Stream
	RoleArn string `pulumi:"roleArn"`
	// The ARN of the Kinesis Stream
	StreamArn string `pulumi:"streamArn"`
}

type EventDestinationKinesisDestinationArgs struct {
	// The ARN of the role that has permissions to access the Kinesis Stream
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The ARN of the Kinesis Stream
	StreamArn pulumix.Input[string] `pulumi:"streamArn"`
}

func (EventDestinationKinesisDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationKinesisDestination)(nil)).Elem()
}

func (i EventDestinationKinesisDestinationArgs) ToEventDestinationKinesisDestinationOutput() EventDestinationKinesisDestinationOutput {
	return i.ToEventDestinationKinesisDestinationOutputWithContext(context.Background())
}

func (i EventDestinationKinesisDestinationArgs) ToEventDestinationKinesisDestinationOutputWithContext(ctx context.Context) EventDestinationKinesisDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationKinesisDestinationOutput)
}

func (i *EventDestinationKinesisDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*EventDestinationKinesisDestinationArgs] {
	return pulumix.Val(i)
}

type EventDestinationKinesisDestinationOutput struct{ *pulumi.OutputState }

func (EventDestinationKinesisDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationKinesisDestination)(nil)).Elem()
}

func (o EventDestinationKinesisDestinationOutput) ToEventDestinationKinesisDestinationOutput() EventDestinationKinesisDestinationOutput {
	return o
}

func (o EventDestinationKinesisDestinationOutput) ToEventDestinationKinesisDestinationOutputWithContext(ctx context.Context) EventDestinationKinesisDestinationOutput {
	return o
}

func (o EventDestinationKinesisDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationKinesisDestination] {
	return pulumix.Output[EventDestinationKinesisDestination]{
		OutputState: o.OutputState,
	}
}

// The ARN of the role that has permissions to access the Kinesis Stream
func (o EventDestinationKinesisDestinationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[EventDestinationKinesisDestination](o, func(v EventDestinationKinesisDestination) string { return v.RoleArn })
}

// The ARN of the Kinesis Stream
func (o EventDestinationKinesisDestinationOutput) StreamArn() pulumix.Output[string] {
	return pulumix.Apply[EventDestinationKinesisDestination](o, func(v EventDestinationKinesisDestination) string { return v.StreamArn })
}

type EventDestinationSnsDestination struct {
	// The ARN of the SNS topic
	TopicArn string `pulumi:"topicArn"`
}

type EventDestinationSnsDestinationArgs struct {
	// The ARN of the SNS topic
	TopicArn pulumix.Input[string] `pulumi:"topicArn"`
}

func (EventDestinationSnsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationSnsDestination)(nil)).Elem()
}

func (i EventDestinationSnsDestinationArgs) ToEventDestinationSnsDestinationOutput() EventDestinationSnsDestinationOutput {
	return i.ToEventDestinationSnsDestinationOutputWithContext(context.Background())
}

func (i EventDestinationSnsDestinationArgs) ToEventDestinationSnsDestinationOutputWithContext(ctx context.Context) EventDestinationSnsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDestinationSnsDestinationOutput)
}

func (i *EventDestinationSnsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*EventDestinationSnsDestinationArgs] {
	return pulumix.Val(i)
}

type EventDestinationSnsDestinationOutput struct{ *pulumi.OutputState }

func (EventDestinationSnsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestinationSnsDestination)(nil)).Elem()
}

func (o EventDestinationSnsDestinationOutput) ToEventDestinationSnsDestinationOutput() EventDestinationSnsDestinationOutput {
	return o
}

func (o EventDestinationSnsDestinationOutput) ToEventDestinationSnsDestinationOutputWithContext(ctx context.Context) EventDestinationSnsDestinationOutput {
	return o
}

func (o EventDestinationSnsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestinationSnsDestination] {
	return pulumix.Output[EventDestinationSnsDestination]{
		OutputState: o.OutputState,
	}
}

// The ARN of the SNS topic
func (o EventDestinationSnsDestinationOutput) TopicArn() pulumix.Output[string] {
	return pulumix.Apply[EventDestinationSnsDestination](o, func(v EventDestinationSnsDestination) string { return v.TopicArn })
}

type ReceiptRuleAddHeaderAction struct {
	// The name of the header to add
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add
	HeaderValue string `pulumi:"headerValue"`
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
}

type ReceiptRuleAddHeaderActionArgs struct {
	// The name of the header to add
	HeaderName pulumix.Input[string] `pulumi:"headerName"`
	// The value of the header to add
	HeaderValue pulumix.Input[string] `pulumi:"headerValue"`
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
}

func (ReceiptRuleAddHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleAddHeaderAction)(nil)).Elem()
}

func (i ReceiptRuleAddHeaderActionArgs) ToReceiptRuleAddHeaderActionOutput() ReceiptRuleAddHeaderActionOutput {
	return i.ToReceiptRuleAddHeaderActionOutputWithContext(context.Background())
}

func (i ReceiptRuleAddHeaderActionArgs) ToReceiptRuleAddHeaderActionOutputWithContext(ctx context.Context) ReceiptRuleAddHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleAddHeaderActionOutput)
}

func (i *ReceiptRuleAddHeaderActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleAddHeaderActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleAddHeaderActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleAddHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleAddHeaderAction)(nil)).Elem()
}

func (o ReceiptRuleAddHeaderActionOutput) ToReceiptRuleAddHeaderActionOutput() ReceiptRuleAddHeaderActionOutput {
	return o
}

func (o ReceiptRuleAddHeaderActionOutput) ToReceiptRuleAddHeaderActionOutputWithContext(ctx context.Context) ReceiptRuleAddHeaderActionOutput {
	return o
}

func (o ReceiptRuleAddHeaderActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleAddHeaderAction] {
	return pulumix.Output[ReceiptRuleAddHeaderAction]{
		OutputState: o.OutputState,
	}
}

// The name of the header to add
func (o ReceiptRuleAddHeaderActionOutput) HeaderName() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleAddHeaderAction](o, func(v ReceiptRuleAddHeaderAction) string { return v.HeaderName })
}

// The value of the header to add
func (o ReceiptRuleAddHeaderActionOutput) HeaderValue() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleAddHeaderAction](o, func(v ReceiptRuleAddHeaderAction) string { return v.HeaderValue })
}

// The position of the action in the receipt rule
func (o ReceiptRuleAddHeaderActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleAddHeaderAction](o, func(v ReceiptRuleAddHeaderAction) int { return v.Position })
}

type ReceiptRuleBounceAction struct {
	// The message to send
	Message string `pulumi:"message"`
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
	// The email address of the sender
	Sender string `pulumi:"sender"`
	// The RFC 5321 SMTP reply code
	SmtpReplyCode string `pulumi:"smtpReplyCode"`
	// The RFC 3463 SMTP enhanced status code
	StatusCode *string `pulumi:"statusCode"`
	// The ARN of an SNS topic to notify
	TopicArn *string `pulumi:"topicArn"`
}

type ReceiptRuleBounceActionArgs struct {
	// The message to send
	Message pulumix.Input[string] `pulumi:"message"`
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
	// The email address of the sender
	Sender pulumix.Input[string] `pulumi:"sender"`
	// The RFC 5321 SMTP reply code
	SmtpReplyCode pulumix.Input[string] `pulumi:"smtpReplyCode"`
	// The RFC 3463 SMTP enhanced status code
	StatusCode pulumix.Input[*string] `pulumi:"statusCode"`
	// The ARN of an SNS topic to notify
	TopicArn pulumix.Input[*string] `pulumi:"topicArn"`
}

func (ReceiptRuleBounceActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleBounceAction)(nil)).Elem()
}

func (i ReceiptRuleBounceActionArgs) ToReceiptRuleBounceActionOutput() ReceiptRuleBounceActionOutput {
	return i.ToReceiptRuleBounceActionOutputWithContext(context.Background())
}

func (i ReceiptRuleBounceActionArgs) ToReceiptRuleBounceActionOutputWithContext(ctx context.Context) ReceiptRuleBounceActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleBounceActionOutput)
}

func (i *ReceiptRuleBounceActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleBounceActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleBounceActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleBounceActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleBounceAction)(nil)).Elem()
}

func (o ReceiptRuleBounceActionOutput) ToReceiptRuleBounceActionOutput() ReceiptRuleBounceActionOutput {
	return o
}

func (o ReceiptRuleBounceActionOutput) ToReceiptRuleBounceActionOutputWithContext(ctx context.Context) ReceiptRuleBounceActionOutput {
	return o
}

func (o ReceiptRuleBounceActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleBounceAction] {
	return pulumix.Output[ReceiptRuleBounceAction]{
		OutputState: o.OutputState,
	}
}

// The message to send
func (o ReceiptRuleBounceActionOutput) Message() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleBounceAction](o, func(v ReceiptRuleBounceAction) string { return v.Message })
}

// The position of the action in the receipt rule
func (o ReceiptRuleBounceActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleBounceAction](o, func(v ReceiptRuleBounceAction) int { return v.Position })
}

// The email address of the sender
func (o ReceiptRuleBounceActionOutput) Sender() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleBounceAction](o, func(v ReceiptRuleBounceAction) string { return v.Sender })
}

// The RFC 5321 SMTP reply code
func (o ReceiptRuleBounceActionOutput) SmtpReplyCode() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleBounceAction](o, func(v ReceiptRuleBounceAction) string { return v.SmtpReplyCode })
}

// The RFC 3463 SMTP enhanced status code
func (o ReceiptRuleBounceActionOutput) StatusCode() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleBounceAction](o, func(v ReceiptRuleBounceAction) *string { return v.StatusCode })
}

// The ARN of an SNS topic to notify
func (o ReceiptRuleBounceActionOutput) TopicArn() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleBounceAction](o, func(v ReceiptRuleBounceAction) *string { return v.TopicArn })
}

type ReceiptRuleLambdaAction struct {
	// The ARN of the Lambda function to invoke
	FunctionArn string `pulumi:"functionArn"`
	// `Event` or `RequestResponse`
	InvocationType *string `pulumi:"invocationType"`
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn *string `pulumi:"topicArn"`
}

type ReceiptRuleLambdaActionArgs struct {
	// The ARN of the Lambda function to invoke
	FunctionArn pulumix.Input[string] `pulumi:"functionArn"`
	// `Event` or `RequestResponse`
	InvocationType pulumix.Input[*string] `pulumi:"invocationType"`
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn pulumix.Input[*string] `pulumi:"topicArn"`
}

func (ReceiptRuleLambdaActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleLambdaAction)(nil)).Elem()
}

func (i ReceiptRuleLambdaActionArgs) ToReceiptRuleLambdaActionOutput() ReceiptRuleLambdaActionOutput {
	return i.ToReceiptRuleLambdaActionOutputWithContext(context.Background())
}

func (i ReceiptRuleLambdaActionArgs) ToReceiptRuleLambdaActionOutputWithContext(ctx context.Context) ReceiptRuleLambdaActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleLambdaActionOutput)
}

func (i *ReceiptRuleLambdaActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleLambdaActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleLambdaActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleLambdaActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleLambdaAction)(nil)).Elem()
}

func (o ReceiptRuleLambdaActionOutput) ToReceiptRuleLambdaActionOutput() ReceiptRuleLambdaActionOutput {
	return o
}

func (o ReceiptRuleLambdaActionOutput) ToReceiptRuleLambdaActionOutputWithContext(ctx context.Context) ReceiptRuleLambdaActionOutput {
	return o
}

func (o ReceiptRuleLambdaActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleLambdaAction] {
	return pulumix.Output[ReceiptRuleLambdaAction]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lambda function to invoke
func (o ReceiptRuleLambdaActionOutput) FunctionArn() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleLambdaAction](o, func(v ReceiptRuleLambdaAction) string { return v.FunctionArn })
}

// `Event` or `RequestResponse`
func (o ReceiptRuleLambdaActionOutput) InvocationType() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleLambdaAction](o, func(v ReceiptRuleLambdaAction) *string { return v.InvocationType })
}

// The position of the action in the receipt rule
func (o ReceiptRuleLambdaActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleLambdaAction](o, func(v ReceiptRuleLambdaAction) int { return v.Position })
}

// The ARN of an SNS topic to notify
func (o ReceiptRuleLambdaActionOutput) TopicArn() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleLambdaAction](o, func(v ReceiptRuleLambdaAction) *string { return v.TopicArn })
}

type ReceiptRuleS3Action struct {
	// The name of the S3 bucket
	BucketName string `pulumi:"bucketName"`
	// The ARN of the KMS key
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The key prefix of the S3 bucket
	ObjectKeyPrefix *string `pulumi:"objectKeyPrefix"`
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn *string `pulumi:"topicArn"`
}

type ReceiptRuleS3ActionArgs struct {
	// The name of the S3 bucket
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The ARN of the KMS key
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The key prefix of the S3 bucket
	ObjectKeyPrefix pulumix.Input[*string] `pulumi:"objectKeyPrefix"`
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn pulumix.Input[*string] `pulumi:"topicArn"`
}

func (ReceiptRuleS3ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleS3Action)(nil)).Elem()
}

func (i ReceiptRuleS3ActionArgs) ToReceiptRuleS3ActionOutput() ReceiptRuleS3ActionOutput {
	return i.ToReceiptRuleS3ActionOutputWithContext(context.Background())
}

func (i ReceiptRuleS3ActionArgs) ToReceiptRuleS3ActionOutputWithContext(ctx context.Context) ReceiptRuleS3ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleS3ActionOutput)
}

func (i *ReceiptRuleS3ActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleS3ActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleS3ActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleS3ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleS3Action)(nil)).Elem()
}

func (o ReceiptRuleS3ActionOutput) ToReceiptRuleS3ActionOutput() ReceiptRuleS3ActionOutput {
	return o
}

func (o ReceiptRuleS3ActionOutput) ToReceiptRuleS3ActionOutputWithContext(ctx context.Context) ReceiptRuleS3ActionOutput {
	return o
}

func (o ReceiptRuleS3ActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleS3Action] {
	return pulumix.Output[ReceiptRuleS3Action]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket
func (o ReceiptRuleS3ActionOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleS3Action](o, func(v ReceiptRuleS3Action) string { return v.BucketName })
}

// The ARN of the KMS key
func (o ReceiptRuleS3ActionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleS3Action](o, func(v ReceiptRuleS3Action) *string { return v.KmsKeyArn })
}

// The key prefix of the S3 bucket
func (o ReceiptRuleS3ActionOutput) ObjectKeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleS3Action](o, func(v ReceiptRuleS3Action) *string { return v.ObjectKeyPrefix })
}

// The position of the action in the receipt rule
func (o ReceiptRuleS3ActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleS3Action](o, func(v ReceiptRuleS3Action) int { return v.Position })
}

// The ARN of an SNS topic to notify
func (o ReceiptRuleS3ActionOutput) TopicArn() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleS3Action](o, func(v ReceiptRuleS3Action) *string { return v.TopicArn })
}

type ReceiptRuleSnsAction struct {
	// The encoding to use for the email within the Amazon SNS notification. Default value is `UTF-8`.
	Encoding *string `pulumi:"encoding"`
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn string `pulumi:"topicArn"`
}

type ReceiptRuleSnsActionArgs struct {
	// The encoding to use for the email within the Amazon SNS notification. Default value is `UTF-8`.
	Encoding pulumix.Input[*string] `pulumi:"encoding"`
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn pulumix.Input[string] `pulumi:"topicArn"`
}

func (ReceiptRuleSnsActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleSnsAction)(nil)).Elem()
}

func (i ReceiptRuleSnsActionArgs) ToReceiptRuleSnsActionOutput() ReceiptRuleSnsActionOutput {
	return i.ToReceiptRuleSnsActionOutputWithContext(context.Background())
}

func (i ReceiptRuleSnsActionArgs) ToReceiptRuleSnsActionOutputWithContext(ctx context.Context) ReceiptRuleSnsActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleSnsActionOutput)
}

func (i *ReceiptRuleSnsActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleSnsActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleSnsActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleSnsActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleSnsAction)(nil)).Elem()
}

func (o ReceiptRuleSnsActionOutput) ToReceiptRuleSnsActionOutput() ReceiptRuleSnsActionOutput {
	return o
}

func (o ReceiptRuleSnsActionOutput) ToReceiptRuleSnsActionOutputWithContext(ctx context.Context) ReceiptRuleSnsActionOutput {
	return o
}

func (o ReceiptRuleSnsActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleSnsAction] {
	return pulumix.Output[ReceiptRuleSnsAction]{
		OutputState: o.OutputState,
	}
}

// The encoding to use for the email within the Amazon SNS notification. Default value is `UTF-8`.
func (o ReceiptRuleSnsActionOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleSnsAction](o, func(v ReceiptRuleSnsAction) *string { return v.Encoding })
}

// The position of the action in the receipt rule
func (o ReceiptRuleSnsActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleSnsAction](o, func(v ReceiptRuleSnsAction) int { return v.Position })
}

// The ARN of an SNS topic to notify
func (o ReceiptRuleSnsActionOutput) TopicArn() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleSnsAction](o, func(v ReceiptRuleSnsAction) string { return v.TopicArn })
}

type ReceiptRuleStopAction struct {
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
	// The scope to apply. The only acceptable value is `RuleSet`.
	Scope string `pulumi:"scope"`
	// The ARN of an SNS topic to notify
	TopicArn *string `pulumi:"topicArn"`
}

type ReceiptRuleStopActionArgs struct {
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
	// The scope to apply. The only acceptable value is `RuleSet`.
	Scope pulumix.Input[string] `pulumi:"scope"`
	// The ARN of an SNS topic to notify
	TopicArn pulumix.Input[*string] `pulumi:"topicArn"`
}

func (ReceiptRuleStopActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleStopAction)(nil)).Elem()
}

func (i ReceiptRuleStopActionArgs) ToReceiptRuleStopActionOutput() ReceiptRuleStopActionOutput {
	return i.ToReceiptRuleStopActionOutputWithContext(context.Background())
}

func (i ReceiptRuleStopActionArgs) ToReceiptRuleStopActionOutputWithContext(ctx context.Context) ReceiptRuleStopActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleStopActionOutput)
}

func (i *ReceiptRuleStopActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleStopActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleStopActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleStopActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleStopAction)(nil)).Elem()
}

func (o ReceiptRuleStopActionOutput) ToReceiptRuleStopActionOutput() ReceiptRuleStopActionOutput {
	return o
}

func (o ReceiptRuleStopActionOutput) ToReceiptRuleStopActionOutputWithContext(ctx context.Context) ReceiptRuleStopActionOutput {
	return o
}

func (o ReceiptRuleStopActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleStopAction] {
	return pulumix.Output[ReceiptRuleStopAction]{
		OutputState: o.OutputState,
	}
}

// The position of the action in the receipt rule
func (o ReceiptRuleStopActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleStopAction](o, func(v ReceiptRuleStopAction) int { return v.Position })
}

// The scope to apply. The only acceptable value is `RuleSet`.
func (o ReceiptRuleStopActionOutput) Scope() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleStopAction](o, func(v ReceiptRuleStopAction) string { return v.Scope })
}

// The ARN of an SNS topic to notify
func (o ReceiptRuleStopActionOutput) TopicArn() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleStopAction](o, func(v ReceiptRuleStopAction) *string { return v.TopicArn })
}

type ReceiptRuleWorkmailAction struct {
	// The ARN of the WorkMail organization
	OrganizationArn string `pulumi:"organizationArn"`
	// The position of the action in the receipt rule
	Position int `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn *string `pulumi:"topicArn"`
}

type ReceiptRuleWorkmailActionArgs struct {
	// The ARN of the WorkMail organization
	OrganizationArn pulumix.Input[string] `pulumi:"organizationArn"`
	// The position of the action in the receipt rule
	Position pulumix.Input[int] `pulumi:"position"`
	// The ARN of an SNS topic to notify
	TopicArn pulumix.Input[*string] `pulumi:"topicArn"`
}

func (ReceiptRuleWorkmailActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleWorkmailAction)(nil)).Elem()
}

func (i ReceiptRuleWorkmailActionArgs) ToReceiptRuleWorkmailActionOutput() ReceiptRuleWorkmailActionOutput {
	return i.ToReceiptRuleWorkmailActionOutputWithContext(context.Background())
}

func (i ReceiptRuleWorkmailActionArgs) ToReceiptRuleWorkmailActionOutputWithContext(ctx context.Context) ReceiptRuleWorkmailActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiptRuleWorkmailActionOutput)
}

func (i *ReceiptRuleWorkmailActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReceiptRuleWorkmailActionArgs] {
	return pulumix.Val(i)
}

type ReceiptRuleWorkmailActionOutput struct{ *pulumi.OutputState }

func (ReceiptRuleWorkmailActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiptRuleWorkmailAction)(nil)).Elem()
}

func (o ReceiptRuleWorkmailActionOutput) ToReceiptRuleWorkmailActionOutput() ReceiptRuleWorkmailActionOutput {
	return o
}

func (o ReceiptRuleWorkmailActionOutput) ToReceiptRuleWorkmailActionOutputWithContext(ctx context.Context) ReceiptRuleWorkmailActionOutput {
	return o
}

func (o ReceiptRuleWorkmailActionOutput) ToOutput(ctx context.Context) pulumix.Output[ReceiptRuleWorkmailAction] {
	return pulumix.Output[ReceiptRuleWorkmailAction]{
		OutputState: o.OutputState,
	}
}

// The ARN of the WorkMail organization
func (o ReceiptRuleWorkmailActionOutput) OrganizationArn() pulumix.Output[string] {
	return pulumix.Apply[ReceiptRuleWorkmailAction](o, func(v ReceiptRuleWorkmailAction) string { return v.OrganizationArn })
}

// The position of the action in the receipt rule
func (o ReceiptRuleWorkmailActionOutput) Position() pulumix.Output[int] {
	return pulumix.Apply[ReceiptRuleWorkmailAction](o, func(v ReceiptRuleWorkmailAction) int { return v.Position })
}

// The ARN of an SNS topic to notify
func (o ReceiptRuleWorkmailActionOutput) TopicArn() pulumix.Output[*string] {
	return pulumix.Apply[ReceiptRuleWorkmailAction](o, func(v ReceiptRuleWorkmailAction) *string { return v.TopicArn })
}

func init() {
	pulumi.RegisterOutputType(ConfigurationSetDeliveryOptionsOutput{})
	pulumi.RegisterOutputType(ConfigurationSetTrackingOptionsOutput{})
	pulumi.RegisterOutputType(EventDestinationCloudwatchDestinationOutput{})
	pulumi.RegisterOutputType(EventDestinationKinesisDestinationOutput{})
	pulumi.RegisterOutputType(EventDestinationSnsDestinationOutput{})
	pulumi.RegisterOutputType(ReceiptRuleAddHeaderActionOutput{})
	pulumi.RegisterOutputType(ReceiptRuleBounceActionOutput{})
	pulumi.RegisterOutputType(ReceiptRuleLambdaActionOutput{})
	pulumi.RegisterOutputType(ReceiptRuleS3ActionOutput{})
	pulumi.RegisterOutputType(ReceiptRuleSnsActionOutput{})
	pulumi.RegisterOutputType(ReceiptRuleStopActionOutput{})
	pulumi.RegisterOutputType(ReceiptRuleWorkmailActionOutput{})
}
