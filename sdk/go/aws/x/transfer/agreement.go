// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Transfer AS2 Agreement resource.
type Agreement struct {
	pulumi.CustomResourceState

	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole pulumix.Output[string] `pulumi:"accessRole"`
	// The unique identifier for the AS2 agreement.
	AgreementId pulumix.Output[string] `pulumi:"agreementId"`
	// The ARN of the agreement.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The landing directory for the files transferred by using the AS2 protocol.
	BaseDirectory pulumix.Output[string] `pulumi:"baseDirectory"`
	// The Optional description of the transdfer.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The unique identifier for the AS2 local profile.
	LocalProfileId pulumix.Output[string] `pulumi:"localProfileId"`
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId pulumix.Output[string] `pulumi:"partnerProfileId"`
	// The unique server identifier for the server instance. This is the specific server the agreement uses.
	ServerId pulumix.Output[string] `pulumi:"serverId"`
	Status   pulumix.Output[string] `pulumi:"status"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAgreement registers a new resource with the given unique name, arguments, and options.
func NewAgreement(ctx *pulumi.Context,
	name string, args *AgreementArgs, opts ...pulumi.ResourceOption) (*Agreement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessRole == nil {
		return nil, errors.New("invalid value for required argument 'AccessRole'")
	}
	if args.BaseDirectory == nil {
		return nil, errors.New("invalid value for required argument 'BaseDirectory'")
	}
	if args.LocalProfileId == nil {
		return nil, errors.New("invalid value for required argument 'LocalProfileId'")
	}
	if args.PartnerProfileId == nil {
		return nil, errors.New("invalid value for required argument 'PartnerProfileId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Agreement
	err := ctx.RegisterResource("aws:transfer/agreement:Agreement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgreement gets an existing Agreement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgreement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgreementState, opts ...pulumi.ResourceOption) (*Agreement, error) {
	var resource Agreement
	err := ctx.ReadResource("aws:transfer/agreement:Agreement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Agreement resources.
type agreementState struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole *string `pulumi:"accessRole"`
	// The unique identifier for the AS2 agreement.
	AgreementId *string `pulumi:"agreementId"`
	// The ARN of the agreement.
	Arn *string `pulumi:"arn"`
	// The landing directory for the files transferred by using the AS2 protocol.
	BaseDirectory *string `pulumi:"baseDirectory"`
	// The Optional description of the transdfer.
	Description *string `pulumi:"description"`
	// The unique identifier for the AS2 local profile.
	LocalProfileId *string `pulumi:"localProfileId"`
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId *string `pulumi:"partnerProfileId"`
	// The unique server identifier for the server instance. This is the specific server the agreement uses.
	ServerId *string `pulumi:"serverId"`
	Status   *string `pulumi:"status"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AgreementState struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole pulumix.Input[*string]
	// The unique identifier for the AS2 agreement.
	AgreementId pulumix.Input[*string]
	// The ARN of the agreement.
	Arn pulumix.Input[*string]
	// The landing directory for the files transferred by using the AS2 protocol.
	BaseDirectory pulumix.Input[*string]
	// The Optional description of the transdfer.
	Description pulumix.Input[*string]
	// The unique identifier for the AS2 local profile.
	LocalProfileId pulumix.Input[*string]
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId pulumix.Input[*string]
	// The unique server identifier for the server instance. This is the specific server the agreement uses.
	ServerId pulumix.Input[*string]
	Status   pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (AgreementState) ElementType() reflect.Type {
	return reflect.TypeOf((*agreementState)(nil)).Elem()
}

type agreementArgs struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole string `pulumi:"accessRole"`
	// The landing directory for the files transferred by using the AS2 protocol.
	BaseDirectory string `pulumi:"baseDirectory"`
	// The Optional description of the transdfer.
	Description *string `pulumi:"description"`
	// The unique identifier for the AS2 local profile.
	LocalProfileId string `pulumi:"localProfileId"`
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId string `pulumi:"partnerProfileId"`
	// The unique server identifier for the server instance. This is the specific server the agreement uses.
	ServerId string `pulumi:"serverId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Agreement resource.
type AgreementArgs struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole pulumix.Input[string]
	// The landing directory for the files transferred by using the AS2 protocol.
	BaseDirectory pulumix.Input[string]
	// The Optional description of the transdfer.
	Description pulumix.Input[*string]
	// The unique identifier for the AS2 local profile.
	LocalProfileId pulumix.Input[string]
	// The unique identifier for the AS2 partner profile.
	PartnerProfileId pulumix.Input[string]
	// The unique server identifier for the server instance. This is the specific server the agreement uses.
	ServerId pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (AgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agreementArgs)(nil)).Elem()
}

type AgreementOutput struct{ *pulumi.OutputState }

func (AgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Agreement)(nil)).Elem()
}

func (o AgreementOutput) ToAgreementOutput() AgreementOutput {
	return o
}

func (o AgreementOutput) ToAgreementOutputWithContext(ctx context.Context) AgreementOutput {
	return o
}

func (o AgreementOutput) ToOutput(ctx context.Context) pulumix.Output[Agreement] {
	return pulumix.Output[Agreement]{
		OutputState: o.OutputState,
	}
}

// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
func (o AgreementOutput) AccessRole() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.AccessRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier for the AS2 agreement.
func (o AgreementOutput) AgreementId() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.AgreementId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the agreement.
func (o AgreementOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The landing directory for the files transferred by using the AS2 protocol.
func (o AgreementOutput) BaseDirectory() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.BaseDirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Optional description of the transdfer.
func (o AgreementOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The unique identifier for the AS2 local profile.
func (o AgreementOutput) LocalProfileId() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.LocalProfileId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier for the AS2 partner profile.
func (o AgreementOutput) PartnerProfileId() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.PartnerProfileId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique server identifier for the server instance. This is the specific server the agreement uses.
func (o AgreementOutput) ServerId() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.ServerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o AgreementOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AgreementOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o AgreementOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Agreement](o, func(v Agreement) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AgreementOutput{})
}
