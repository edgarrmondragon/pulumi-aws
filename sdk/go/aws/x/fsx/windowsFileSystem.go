// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a FSx Windows File System. See the [FSx Windows Guide](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) for more information.
//
// > **NOTE:** Either the `activeDirectoryId` argument or `selfManagedActiveDirectory` configuration block must be specified.
type WindowsFileSystem struct {
	pulumi.CustomResourceState

	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId pulumix.Output[*string] `pulumi:"activeDirectoryId"`
	// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
	Aliases pulumix.ArrayOutput[string] `pulumi:"aliases"`
	// Amazon Resource Name of the file system.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
	AuditLogConfiguration pulumix.GPtrOutput[WindowsFileSystemAuditLogConfiguration, WindowsFileSystemAuditLogConfigurationOutput] `pulumi:"auditLogConfiguration"`
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays pulumix.Output[*int] `pulumi:"automaticBackupRetentionDays"`
	// The ID of the source backup to create the filesystem from.
	BackupId pulumix.Output[*string] `pulumi:"backupId"`
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups pulumix.Output[*bool] `pulumi:"copyTagsToBackups"`
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime pulumix.Output[string] `pulumi:"dailyAutomaticBackupStartTime"`
	// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
	DeploymentType pulumix.Output[*string] `pulumi:"deploymentType"`
	// DNS name for the file system, e.g., `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// Set of Elastic Network Interface identifiers from which the file system is accessible.
	NetworkInterfaceIds pulumix.ArrayOutput[string] `pulumi:"networkInterfaceIds"`
	// AWS account identifier that created the file system.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The IP address of the primary, or preferred, file server.
	PreferredFileServerIp pulumix.Output[string] `pulumi:"preferredFileServerIp"`
	// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
	PreferredSubnetId pulumix.Output[string] `pulumi:"preferredSubnetId"`
	// For `MULTI_AZ_1` deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For `SINGLE_AZ_1` deployment types, this is the DNS name of the file system.
	RemoteAdministrationEndpoint pulumix.Output[string] `pulumi:"remoteAdministrationEndpoint"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory pulumix.GPtrOutput[WindowsFileSystemSelfManagedActiveDirectory, WindowsFileSystemSelfManagedActiveDirectoryOutput] `pulumi:"selfManagedActiveDirectory"`
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup pulumix.Output[*bool] `pulumi:"skipFinalBackup"`
	// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
	StorageCapacity pulumix.Output[int] `pulumi:"storageCapacity"`
	// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
	StorageType pulumix.Output[*string] `pulumi:"storageType"`
	// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deploymentType` to `MULTI_AZ_1`.
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	//
	// The following arguments are optional:
	ThroughputCapacity pulumix.Output[int] `pulumi:"throughputCapacity"`
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumix.Output[string] `pulumi:"weeklyMaintenanceStartTime"`
}

// NewWindowsFileSystem registers a new resource with the given unique name, arguments, and options.
func NewWindowsFileSystem(ctx *pulumi.Context,
	name string, args *WindowsFileSystemArgs, opts ...pulumi.ResourceOption) (*WindowsFileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.ThroughputCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ThroughputCapacity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WindowsFileSystem
	err := ctx.RegisterResource("aws:fsx/windowsFileSystem:WindowsFileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsFileSystem gets an existing WindowsFileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WindowsFileSystemState, opts ...pulumi.ResourceOption) (*WindowsFileSystem, error) {
	var resource WindowsFileSystem
	err := ctx.ReadResource("aws:fsx/windowsFileSystem:WindowsFileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WindowsFileSystem resources.
type windowsFileSystemState struct {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
	Aliases []string `pulumi:"aliases"`
	// Amazon Resource Name of the file system.
	Arn *string `pulumi:"arn"`
	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
	AuditLogConfiguration *WindowsFileSystemAuditLogConfiguration `pulumi:"auditLogConfiguration"`
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays *int `pulumi:"automaticBackupRetentionDays"`
	// The ID of the source backup to create the filesystem from.
	BackupId *string `pulumi:"backupId"`
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups *bool `pulumi:"copyTagsToBackups"`
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime *string `pulumi:"dailyAutomaticBackupStartTime"`
	// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
	DeploymentType *string `pulumi:"deploymentType"`
	// DNS name for the file system, e.g., `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
	DnsName *string `pulumi:"dnsName"`
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Set of Elastic Network Interface identifiers from which the file system is accessible.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// AWS account identifier that created the file system.
	OwnerId *string `pulumi:"ownerId"`
	// The IP address of the primary, or preferred, file server.
	PreferredFileServerIp *string `pulumi:"preferredFileServerIp"`
	// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
	PreferredSubnetId *string `pulumi:"preferredSubnetId"`
	// For `MULTI_AZ_1` deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For `SINGLE_AZ_1` deployment types, this is the DNS name of the file system.
	RemoteAdministrationEndpoint *string `pulumi:"remoteAdministrationEndpoint"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory *WindowsFileSystemSelfManagedActiveDirectory `pulumi:"selfManagedActiveDirectory"`
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup *bool `pulumi:"skipFinalBackup"`
	// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
	StorageCapacity *int `pulumi:"storageCapacity"`
	// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
	StorageType *string `pulumi:"storageType"`
	// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deploymentType` to `MULTI_AZ_1`.
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	//
	// The following arguments are optional:
	ThroughputCapacity *int `pulumi:"throughputCapacity"`
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId *string `pulumi:"vpcId"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime *string `pulumi:"weeklyMaintenanceStartTime"`
}

type WindowsFileSystemState struct {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId pulumix.Input[*string]
	// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
	Aliases pulumix.Input[[]string]
	// Amazon Resource Name of the file system.
	Arn pulumix.Input[*string]
	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
	AuditLogConfiguration pulumix.Input[*WindowsFileSystemAuditLogConfigurationArgs]
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays pulumix.Input[*int]
	// The ID of the source backup to create the filesystem from.
	BackupId pulumix.Input[*string]
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups pulumix.Input[*bool]
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime pulumix.Input[*string]
	// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
	DeploymentType pulumix.Input[*string]
	// DNS name for the file system, e.g., `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
	DnsName pulumix.Input[*string]
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId pulumix.Input[*string]
	// Set of Elastic Network Interface identifiers from which the file system is accessible.
	NetworkInterfaceIds pulumix.Input[[]string]
	// AWS account identifier that created the file system.
	OwnerId pulumix.Input[*string]
	// The IP address of the primary, or preferred, file server.
	PreferredFileServerIp pulumix.Input[*string]
	// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
	PreferredSubnetId pulumix.Input[*string]
	// For `MULTI_AZ_1` deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For `SINGLE_AZ_1` deployment types, this is the DNS name of the file system.
	RemoteAdministrationEndpoint pulumix.Input[*string]
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumix.Input[[]string]
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory pulumix.Input[*WindowsFileSystemSelfManagedActiveDirectoryArgs]
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup pulumix.Input[*bool]
	// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
	StorageCapacity pulumix.Input[*int]
	// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
	StorageType pulumix.Input[*string]
	// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deploymentType` to `MULTI_AZ_1`.
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	//
	// The following arguments are optional:
	ThroughputCapacity pulumix.Input[*int]
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId pulumix.Input[*string]
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumix.Input[*string]
}

func (WindowsFileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsFileSystemState)(nil)).Elem()
}

type windowsFileSystemArgs struct {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
	Aliases []string `pulumi:"aliases"`
	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
	AuditLogConfiguration *WindowsFileSystemAuditLogConfiguration `pulumi:"auditLogConfiguration"`
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays *int `pulumi:"automaticBackupRetentionDays"`
	// The ID of the source backup to create the filesystem from.
	BackupId *string `pulumi:"backupId"`
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups *bool `pulumi:"copyTagsToBackups"`
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime *string `pulumi:"dailyAutomaticBackupStartTime"`
	// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
	DeploymentType *string `pulumi:"deploymentType"`
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
	PreferredSubnetId *string `pulumi:"preferredSubnetId"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory *WindowsFileSystemSelfManagedActiveDirectory `pulumi:"selfManagedActiveDirectory"`
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup *bool `pulumi:"skipFinalBackup"`
	// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
	StorageCapacity *int `pulumi:"storageCapacity"`
	// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
	StorageType *string `pulumi:"storageType"`
	// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deploymentType` to `MULTI_AZ_1`.
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	//
	// The following arguments are optional:
	ThroughputCapacity int `pulumi:"throughputCapacity"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime *string `pulumi:"weeklyMaintenanceStartTime"`
}

// The set of arguments for constructing a WindowsFileSystem resource.
type WindowsFileSystemArgs struct {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId pulumix.Input[*string]
	// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
	Aliases pulumix.Input[[]string]
	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
	AuditLogConfiguration pulumix.Input[*WindowsFileSystemAuditLogConfigurationArgs]
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays pulumix.Input[*int]
	// The ID of the source backup to create the filesystem from.
	BackupId pulumix.Input[*string]
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups pulumix.Input[*bool]
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime pulumix.Input[*string]
	// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
	DeploymentType pulumix.Input[*string]
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId pulumix.Input[*string]
	// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
	PreferredSubnetId pulumix.Input[*string]
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumix.Input[[]string]
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory pulumix.Input[*WindowsFileSystemSelfManagedActiveDirectoryArgs]
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup pulumix.Input[*bool]
	// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
	StorageCapacity pulumix.Input[*int]
	// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
	StorageType pulumix.Input[*string]
	// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deploymentType` to `MULTI_AZ_1`.
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	//
	// The following arguments are optional:
	ThroughputCapacity pulumix.Input[int]
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumix.Input[*string]
}

func (WindowsFileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsFileSystemArgs)(nil)).Elem()
}

type WindowsFileSystemOutput struct{ *pulumi.OutputState }

func (WindowsFileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFileSystem)(nil)).Elem()
}

func (o WindowsFileSystemOutput) ToWindowsFileSystemOutput() WindowsFileSystemOutput {
	return o
}

func (o WindowsFileSystemOutput) ToWindowsFileSystemOutputWithContext(ctx context.Context) WindowsFileSystemOutput {
	return o
}

func (o WindowsFileSystemOutput) ToOutput(ctx context.Context) pulumix.Output[WindowsFileSystem] {
	return pulumix.Output[WindowsFileSystem]{
		OutputState: o.OutputState,
	}
}

// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
func (o WindowsFileSystemOutput) ActiveDirectoryId() pulumix.Output[*string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*string] { return v.ActiveDirectoryId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see [Working with DNS Aliases](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html)
func (o WindowsFileSystemOutput) Aliases() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.ArrayOutput[string] { return v.Aliases })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Amazon Resource Name of the file system.
func (o WindowsFileSystemOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
func (o WindowsFileSystemOutput) AuditLogConfiguration() pulumix.GPtrOutput[WindowsFileSystemAuditLogConfiguration, WindowsFileSystemAuditLogConfigurationOutput] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.GPtrOutput[WindowsFileSystemAuditLogConfiguration, WindowsFileSystemAuditLogConfigurationOutput] {
		return v.AuditLogConfiguration
	})
	unwrapped := pulumix.Flatten[*WindowsFileSystemAuditLogConfiguration, pulumix.GPtrOutput[WindowsFileSystemAuditLogConfiguration, WindowsFileSystemAuditLogConfigurationOutput]](value)
	return pulumix.GPtrOutput[WindowsFileSystemAuditLogConfiguration, WindowsFileSystemAuditLogConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The number of days to retain automatic backups. Minimum of `0` and maximum of `90`. Defaults to `7`. Set to `0` to disable.
func (o WindowsFileSystemOutput) AutomaticBackupRetentionDays() pulumix.Output[*int] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*int] { return v.AutomaticBackupRetentionDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the source backup to create the filesystem from.
func (o WindowsFileSystemOutput) BackupId() pulumix.Output[*string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*string] { return v.BackupId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
func (o WindowsFileSystemOutput) CopyTagsToBackups() pulumix.Output[*bool] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*bool] { return v.CopyTagsToBackups })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
func (o WindowsFileSystemOutput) DailyAutomaticBackupStartTime() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.DailyAutomaticBackupStartTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the file system deployment type, valid values are `MULTI_AZ_1`, `SINGLE_AZ_1` and `SINGLE_AZ_2`. Default value is `SINGLE_AZ_1`.
func (o WindowsFileSystemOutput) DeploymentType() pulumix.Output[*string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*string] { return v.DeploymentType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// DNS name for the file system, e.g., `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
func (o WindowsFileSystemOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
func (o WindowsFileSystemOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of Elastic Network Interface identifiers from which the file system is accessible.
func (o WindowsFileSystemOutput) NetworkInterfaceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.ArrayOutput[string] { return v.NetworkInterfaceIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// AWS account identifier that created the file system.
func (o WindowsFileSystemOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP address of the primary, or preferred, file server.
func (o WindowsFileSystemOutput) PreferredFileServerIp() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.PreferredFileServerIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is `MULTI_AZ_1`.
func (o WindowsFileSystemOutput) PreferredSubnetId() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.PreferredSubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// For `MULTI_AZ_1` deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For `SINGLE_AZ_1` deployment types, this is the DNS name of the file system.
func (o WindowsFileSystemOutput) RemoteAdministrationEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.RemoteAdministrationEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
func (o WindowsFileSystemOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
func (o WindowsFileSystemOutput) SelfManagedActiveDirectory() pulumix.GPtrOutput[WindowsFileSystemSelfManagedActiveDirectory, WindowsFileSystemSelfManagedActiveDirectoryOutput] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.GPtrOutput[WindowsFileSystemSelfManagedActiveDirectory, WindowsFileSystemSelfManagedActiveDirectoryOutput] {
		return v.SelfManagedActiveDirectory
	})
	unwrapped := pulumix.Flatten[*WindowsFileSystemSelfManagedActiveDirectory, pulumix.GPtrOutput[WindowsFileSystemSelfManagedActiveDirectory, WindowsFileSystemSelfManagedActiveDirectoryOutput]](value)
	return pulumix.GPtrOutput[WindowsFileSystemSelfManagedActiveDirectory, WindowsFileSystemSelfManagedActiveDirectoryOutput]{OutputState: unwrapped.OutputState}
}

// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
func (o WindowsFileSystemOutput) SkipFinalBackup() pulumix.Output[*bool] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*bool] { return v.SkipFinalBackup })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to `HDD` the minimum value is 2000. Required when not creating filesystem for a backup.
func (o WindowsFileSystemOutput) StorageCapacity() pulumix.Output[int] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[int] { return v.StorageCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Specifies the storage type, Valid values are `SSD` and `HDD`. `HDD` is supported on `SINGLE_AZ_2` and `MULTI_AZ_1` Windows file system deployment types. Default value is `SSD`.
func (o WindowsFileSystemOutput) StorageType() pulumix.Output[*string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[*string] { return v.StorageType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set `deploymentType` to `MULTI_AZ_1`.
func (o WindowsFileSystemOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WindowsFileSystemOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o WindowsFileSystemOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
//
// The following arguments are optional:
func (o WindowsFileSystemOutput) ThroughputCapacity() pulumix.Output[int] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[int] { return v.ThroughputCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Identifier of the Virtual Private Cloud for the file system.
func (o WindowsFileSystemOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
func (o WindowsFileSystemOutput) WeeklyMaintenanceStartTime() pulumix.Output[string] {
	value := pulumix.Apply[WindowsFileSystem](o, func(v WindowsFileSystem) pulumix.Output[string] { return v.WeeklyMaintenanceStartTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WindowsFileSystemOutput{})
}
