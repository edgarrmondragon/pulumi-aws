// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EC2 placement group. Read more about placement groups
// in [AWS Docs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html).
type PlacementGroup struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the placement group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the placement group.
	Name pulumix.Output[string] `pulumi:"name"`
	// The number of partitions to create in the
	// placement group.  Can only be specified when the `strategy` is set to
	// `partition`.  Valid values are 1 - 7 (default is `2`).
	PartitionCount pulumix.Output[int] `pulumi:"partitionCount"`
	// The ID of the placement group.
	PlacementGroupId pulumix.Output[string] `pulumi:"placementGroupId"`
	// Determines how placement groups spread instances. Can only be used
	// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
	SpreadLevel pulumix.Output[string] `pulumi:"spreadLevel"`
	// The placement strategy. Can be `cluster`, `partition` or `spread`.
	Strategy pulumix.Output[string] `pulumi:"strategy"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewPlacementGroup registers a new resource with the given unique name, arguments, and options.
func NewPlacementGroup(ctx *pulumi.Context,
	name string, args *PlacementGroupArgs, opts ...pulumi.ResourceOption) (*PlacementGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlacementGroup
	err := ctx.RegisterResource("aws:ec2/placementGroup:PlacementGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlacementGroup gets an existing PlacementGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlacementGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlacementGroupState, opts ...pulumi.ResourceOption) (*PlacementGroup, error) {
	var resource PlacementGroup
	err := ctx.ReadResource("aws:ec2/placementGroup:PlacementGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlacementGroup resources.
type placementGroupState struct {
	// Amazon Resource Name (ARN) of the placement group.
	Arn *string `pulumi:"arn"`
	// The name of the placement group.
	Name *string `pulumi:"name"`
	// The number of partitions to create in the
	// placement group.  Can only be specified when the `strategy` is set to
	// `partition`.  Valid values are 1 - 7 (default is `2`).
	PartitionCount *int `pulumi:"partitionCount"`
	// The ID of the placement group.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// Determines how placement groups spread instances. Can only be used
	// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
	SpreadLevel *string `pulumi:"spreadLevel"`
	// The placement strategy. Can be `cluster`, `partition` or `spread`.
	Strategy *string `pulumi:"strategy"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type PlacementGroupState struct {
	// Amazon Resource Name (ARN) of the placement group.
	Arn pulumix.Input[*string]
	// The name of the placement group.
	Name pulumix.Input[*string]
	// The number of partitions to create in the
	// placement group.  Can only be specified when the `strategy` is set to
	// `partition`.  Valid values are 1 - 7 (default is `2`).
	PartitionCount pulumix.Input[*int]
	// The ID of the placement group.
	PlacementGroupId pulumix.Input[*string]
	// Determines how placement groups spread instances. Can only be used
	// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
	SpreadLevel pulumix.Input[*string]
	// The placement strategy. Can be `cluster`, `partition` or `spread`.
	Strategy pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (PlacementGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*placementGroupState)(nil)).Elem()
}

type placementGroupArgs struct {
	// The name of the placement group.
	Name *string `pulumi:"name"`
	// The number of partitions to create in the
	// placement group.  Can only be specified when the `strategy` is set to
	// `partition`.  Valid values are 1 - 7 (default is `2`).
	PartitionCount *int `pulumi:"partitionCount"`
	// Determines how placement groups spread instances. Can only be used
	// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
	SpreadLevel *string `pulumi:"spreadLevel"`
	// The placement strategy. Can be `cluster`, `partition` or `spread`.
	Strategy string `pulumi:"strategy"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PlacementGroup resource.
type PlacementGroupArgs struct {
	// The name of the placement group.
	Name pulumix.Input[*string]
	// The number of partitions to create in the
	// placement group.  Can only be specified when the `strategy` is set to
	// `partition`.  Valid values are 1 - 7 (default is `2`).
	PartitionCount pulumix.Input[*int]
	// Determines how placement groups spread instances. Can only be used
	// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
	SpreadLevel pulumix.Input[*string]
	// The placement strategy. Can be `cluster`, `partition` or `spread`.
	Strategy pulumix.Input[string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PlacementGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*placementGroupArgs)(nil)).Elem()
}

type PlacementGroupOutput struct{ *pulumi.OutputState }

func (PlacementGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementGroup)(nil)).Elem()
}

func (o PlacementGroupOutput) ToPlacementGroupOutput() PlacementGroupOutput {
	return o
}

func (o PlacementGroupOutput) ToPlacementGroupOutputWithContext(ctx context.Context) PlacementGroupOutput {
	return o
}

func (o PlacementGroupOutput) ToOutput(ctx context.Context) pulumix.Output[PlacementGroup] {
	return pulumix.Output[PlacementGroup]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the placement group.
func (o PlacementGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the placement group.
func (o PlacementGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of partitions to create in the
// placement group.  Can only be specified when the `strategy` is set to
// `partition`.  Valid values are 1 - 7 (default is `2`).
func (o PlacementGroupOutput) PartitionCount() pulumix.Output[int] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.Output[int] { return v.PartitionCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ID of the placement group.
func (o PlacementGroupOutput) PlacementGroupId() pulumix.Output[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.Output[string] { return v.PlacementGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Determines how placement groups spread instances. Can only be used
// when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
func (o PlacementGroupOutput) SpreadLevel() pulumix.Output[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.Output[string] { return v.SpreadLevel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The placement strategy. Can be `cluster`, `partition` or `spread`.
func (o PlacementGroupOutput) Strategy() pulumix.Output[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.Output[string] { return v.Strategy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PlacementGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PlacementGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlacementGroup](o, func(v PlacementGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PlacementGroupOutput{})
}
