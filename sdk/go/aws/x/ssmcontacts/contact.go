// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS SSM Contact.
type Contact struct {
	pulumi.CustomResourceState

	// A unique and identifiable alias for the contact or escalation plan. Must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), and hyphens (`-`).
	Alias pulumix.Output[string] `pulumi:"alias"`
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Full friendly name of the contact or escalation plan. If set, must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), hyphens (`-`), periods (`.`), and spaces.
	DisplayName pulumix.Output[*string] `pulumi:"displayName"`
	// Map of tags to assign to the resource.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of contact engaged. A single contact is type PERSONAL and an escalation
	// plan is type ESCALATION.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewContact registers a new resource with the given unique name, arguments, and options.
func NewContact(ctx *pulumi.Context,
	name string, args *ContactArgs, opts ...pulumi.ResourceOption) (*Contact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Contact
	err := ctx.RegisterResource("aws:ssmcontacts/contact:Contact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContact gets an existing Contact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactState, opts ...pulumi.ResourceOption) (*Contact, error) {
	var resource Contact
	err := ctx.ReadResource("aws:ssmcontacts/contact:Contact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Contact resources.
type contactState struct {
	// A unique and identifiable alias for the contact or escalation plan. Must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), and hyphens (`-`).
	Alias *string `pulumi:"alias"`
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	Arn *string `pulumi:"arn"`
	// Full friendly name of the contact or escalation plan. If set, must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), hyphens (`-`), periods (`.`), and spaces.
	DisplayName *string `pulumi:"displayName"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of contact engaged. A single contact is type PERSONAL and an escalation
	// plan is type ESCALATION.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ContactState struct {
	// A unique and identifiable alias for the contact or escalation plan. Must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), and hyphens (`-`).
	Alias pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	Arn pulumix.Input[*string]
	// Full friendly name of the contact or escalation plan. If set, must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), hyphens (`-`), periods (`.`), and spaces.
	DisplayName pulumix.Input[*string]
	// Map of tags to assign to the resource.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of contact engaged. A single contact is type PERSONAL and an escalation
	// plan is type ESCALATION.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
}

func (ContactState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactState)(nil)).Elem()
}

type contactArgs struct {
	// A unique and identifiable alias for the contact or escalation plan. Must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), and hyphens (`-`).
	Alias string `pulumi:"alias"`
	// Full friendly name of the contact or escalation plan. If set, must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), hyphens (`-`), periods (`.`), and spaces.
	DisplayName *string `pulumi:"displayName"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of contact engaged. A single contact is type PERSONAL and an escalation
	// plan is type ESCALATION.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Contact resource.
type ContactArgs struct {
	// A unique and identifiable alias for the contact or escalation plan. Must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), and hyphens (`-`).
	Alias pulumix.Input[string]
	// Full friendly name of the contact or escalation plan. If set, must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), hyphens (`-`), periods (`.`), and spaces.
	DisplayName pulumix.Input[*string]
	// Map of tags to assign to the resource.
	Tags pulumix.Input[map[string]string]
	// The type of contact engaged. A single contact is type PERSONAL and an escalation
	// plan is type ESCALATION.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
}

func (ContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactArgs)(nil)).Elem()
}

type ContactOutput struct{ *pulumi.OutputState }

func (ContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Contact)(nil)).Elem()
}

func (o ContactOutput) ToContactOutput() ContactOutput {
	return o
}

func (o ContactOutput) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return o
}

func (o ContactOutput) ToOutput(ctx context.Context) pulumix.Output[Contact] {
	return pulumix.Output[Contact]{
		OutputState: o.OutputState,
	}
}

// A unique and identifiable alias for the contact or escalation plan. Must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), and hyphens (`-`).
func (o ContactOutput) Alias() pulumix.Output[string] {
	value := pulumix.Apply[Contact](o, func(v Contact) pulumix.Output[string] { return v.Alias })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the contact or escalation plan.
func (o ContactOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Contact](o, func(v Contact) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Full friendly name of the contact or escalation plan. If set, must be between 1 and 255 characters, and may contain alphanumerics, underscores (`_`), hyphens (`-`), periods (`.`), and spaces.
func (o ContactOutput) DisplayName() pulumix.Output[*string] {
	value := pulumix.Apply[Contact](o, func(v Contact) pulumix.Output[*string] { return v.DisplayName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of tags to assign to the resource.
func (o ContactOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Contact](o, func(v Contact) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ContactOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Contact](o, func(v Contact) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of contact engaged. A single contact is type PERSONAL and an escalation
// plan is type ESCALATION.
//
// The following arguments are optional:
func (o ContactOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Contact](o, func(v Contact) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ContactOutput{})
}
