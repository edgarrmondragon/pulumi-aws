// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a conditional forwarder for managed Microsoft AD in AWS Directory Service.
type ConditionalForwader struct {
	pulumi.CustomResourceState

	// ID of directory.
	DirectoryId pulumix.Output[string] `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps pulumix.ArrayOutput[string] `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumix.Output[string] `pulumi:"remoteDomainName"`
}

// NewConditionalForwader registers a new resource with the given unique name, arguments, and options.
func NewConditionalForwader(ctx *pulumi.Context,
	name string, args *ConditionalForwaderArgs, opts ...pulumi.ResourceOption) (*ConditionalForwader, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.DnsIps == nil {
		return nil, errors.New("invalid value for required argument 'DnsIps'")
	}
	if args.RemoteDomainName == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConditionalForwader
	err := ctx.RegisterResource("aws:directoryservice/conditionalForwader:ConditionalForwader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConditionalForwader gets an existing ConditionalForwader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConditionalForwader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConditionalForwaderState, opts ...pulumi.ResourceOption) (*ConditionalForwader, error) {
	var resource ConditionalForwader
	err := ctx.ReadResource("aws:directoryservice/conditionalForwader:ConditionalForwader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConditionalForwader resources.
type conditionalForwaderState struct {
	// ID of directory.
	DirectoryId *string `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps []string `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName *string `pulumi:"remoteDomainName"`
}

type ConditionalForwaderState struct {
	// ID of directory.
	DirectoryId pulumix.Input[*string]
	// A list of forwarder IP addresses.
	DnsIps pulumix.Input[[]string]
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumix.Input[*string]
}

func (ConditionalForwaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionalForwaderState)(nil)).Elem()
}

type conditionalForwaderArgs struct {
	// ID of directory.
	DirectoryId string `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps []string `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName string `pulumi:"remoteDomainName"`
}

// The set of arguments for constructing a ConditionalForwader resource.
type ConditionalForwaderArgs struct {
	// ID of directory.
	DirectoryId pulumix.Input[string]
	// A list of forwarder IP addresses.
	DnsIps pulumix.Input[[]string]
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumix.Input[string]
}

func (ConditionalForwaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionalForwaderArgs)(nil)).Elem()
}

type ConditionalForwaderOutput struct{ *pulumi.OutputState }

func (ConditionalForwaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionalForwader)(nil)).Elem()
}

func (o ConditionalForwaderOutput) ToConditionalForwaderOutput() ConditionalForwaderOutput {
	return o
}

func (o ConditionalForwaderOutput) ToConditionalForwaderOutputWithContext(ctx context.Context) ConditionalForwaderOutput {
	return o
}

func (o ConditionalForwaderOutput) ToOutput(ctx context.Context) pulumix.Output[ConditionalForwader] {
	return pulumix.Output[ConditionalForwader]{
		OutputState: o.OutputState,
	}
}

// ID of directory.
func (o ConditionalForwaderOutput) DirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[ConditionalForwader](o, func(v ConditionalForwader) pulumix.Output[string] { return v.DirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of forwarder IP addresses.
func (o ConditionalForwaderOutput) DnsIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConditionalForwader](o, func(v ConditionalForwader) pulumix.ArrayOutput[string] { return v.DnsIps })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The fully qualified domain name of the remote domain for which forwarders will be used.
func (o ConditionalForwaderOutput) RemoteDomainName() pulumix.Output[string] {
	value := pulumix.Apply[ConditionalForwader](o, func(v ConditionalForwader) pulumix.Output[string] { return v.RemoteDomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConditionalForwaderOutput{})
}
