// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing backup selection.
func LookupSelection(ctx *pulumi.Context, args *LookupSelectionArgs, opts ...pulumi.InvokeOption) (*LookupSelectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSelectionResult
	err := ctx.Invoke("aws:backup/getSelection:getSelection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSelection.
type LookupSelectionArgs struct {
	// Backup plan ID associated with the selection of resources.
	PlanId string `pulumi:"planId"`
	// Backup selection ID.
	SelectionId string `pulumi:"selectionId"`
}

// A collection of values returned by getSelection.
type LookupSelectionResult struct {
	// ARN of the IAM role that AWS Backup uses to authenticate when restoring and backing up the target resource. See the [AWS Backup Developer Guide](https://docs.aws.amazon.com/aws-backup/latest/devguide/access-control.html#managed-policies) for additional information about using AWS managed policies or creating custom policies attached to the IAM role.
	IamRoleArn string `pulumi:"iamRoleArn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Display name of a resource selection document.
	Name   string `pulumi:"name"`
	PlanId string `pulumi:"planId"`
	// An array of strings that either contain Amazon Resource Names (ARNs) or match patterns of resources to assign to a backup plan..
	Resources   []string `pulumi:"resources"`
	SelectionId string   `pulumi:"selectionId"`
}

func LookupSelectionOutput(ctx *pulumi.Context, args LookupSelectionOutputArgs, opts ...pulumi.InvokeOption) LookupSelectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSelectionArgs](args.ToOutput(), func(plainArgs *LookupSelectionArgs) (*LookupSelectionResult, error) {
		return LookupSelection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSelectionResultOutput, *LookupSelectionResult](outputResult)
}

// A collection of arguments for invoking getSelection.
type LookupSelectionOutputArgs struct {
	// Backup plan ID associated with the selection of resources.
	PlanId pulumix.Input[string] `pulumi:"planId"`
	// Backup selection ID.
	SelectionId pulumix.Input[string] `pulumi:"selectionId"`
}

func (args LookupSelectionOutputArgs) ToOutput() pulumix.Output[*LookupSelectionArgs] {
	allArgs := pulumix.All(
		args.PlanId.ToOutput(context.Background()).AsAny(),
		args.SelectionId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSelectionArgs {
		return &LookupSelectionArgs{
			PlanId:      resolvedArgs[0].(string),
			SelectionId: resolvedArgs[1].(string),
		}
	})
}

type LookupSelectionResultOutput struct{ *pulumi.OutputState }

func (LookupSelectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSelectionResult)(nil)).Elem()
}

func (o LookupSelectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSelectionResult] {
	return pulumix.Output[*LookupSelectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSelectionResultOutput) IamRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSelectionResult](o, func(v *LookupSelectionResult) string { return v.IamRoleArn })
}

func (o LookupSelectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSelectionResult](o, func(v *LookupSelectionResult) string { return v.Id })
}

func (o LookupSelectionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSelectionResult](o, func(v *LookupSelectionResult) string { return v.Name })
}

func (o LookupSelectionResultOutput) PlanId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSelectionResult](o, func(v *LookupSelectionResult) string { return v.PlanId })
}

func (o LookupSelectionResultOutput) Resources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSelectionResult](o, func(v *LookupSelectionResult) []string { return v.Resources })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSelectionResultOutput) SelectionId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSelectionResult](o, func(v *LookupSelectionResult) string { return v.SelectionId })
}
