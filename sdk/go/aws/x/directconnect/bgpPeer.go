// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Direct Connect BGP peer resource.
type BgpPeer struct {
	pulumi.CustomResourceState

	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Output[string] `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress pulumix.Output[string] `pulumi:"amazonAddress"`
	// The Direct Connect endpoint on which the BGP peer terminates.
	AwsDevice pulumix.Output[string] `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Output[int] `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Output[string] `pulumi:"bgpAuthKey"`
	// The ID of the BGP peer.
	BgpPeerId pulumix.Output[string] `pulumi:"bgpPeerId"`
	// The Up/Down state of the BGP peer.
	BgpStatus pulumix.Output[string] `pulumi:"bgpStatus"`
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress pulumix.Output[string] `pulumi:"customerAddress"`
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId pulumix.Output[string] `pulumi:"virtualInterfaceId"`
}

// NewBgpPeer registers a new resource with the given unique name, arguments, and options.
func NewBgpPeer(ctx *pulumi.Context,
	name string, args *BgpPeerArgs, opts ...pulumi.ResourceOption) (*BgpPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.BgpAsn == nil {
		return nil, errors.New("invalid value for required argument 'BgpAsn'")
	}
	if args.VirtualInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualInterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BgpPeer
	err := ctx.RegisterResource("aws:directconnect/bgpPeer:BgpPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpPeer gets an existing BgpPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpPeerState, opts ...pulumi.ResourceOption) (*BgpPeer, error) {
	var resource BgpPeer
	err := ctx.ReadResource("aws:directconnect/bgpPeer:BgpPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpPeer resources.
type bgpPeerState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily *string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress *string `pulumi:"amazonAddress"`
	// The Direct Connect endpoint on which the BGP peer terminates.
	AwsDevice *string `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn *int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The ID of the BGP peer.
	BgpPeerId *string `pulumi:"bgpPeerId"`
	// The Up/Down state of the BGP peer.
	BgpStatus *string `pulumi:"bgpStatus"`
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId *string `pulumi:"virtualInterfaceId"`
}

type BgpPeerState struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[*string]
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress pulumix.Input[*string]
	// The Direct Connect endpoint on which the BGP peer terminates.
	AwsDevice pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[*int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The ID of the BGP peer.
	BgpPeerId pulumix.Input[*string]
	// The Up/Down state of the BGP peer.
	BgpStatus pulumix.Input[*string]
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress pulumix.Input[*string]
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId pulumix.Input[*string]
}

func (BgpPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpPeerState)(nil)).Elem()
}

type bgpPeerArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily string `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress *string `pulumi:"amazonAddress"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn int `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress *string `pulumi:"customerAddress"`
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId string `pulumi:"virtualInterfaceId"`
}

// The set of arguments for constructing a BgpPeer resource.
type BgpPeerArgs struct {
	// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
	AddressFamily pulumix.Input[string]
	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	AmazonAddress pulumix.Input[*string]
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumix.Input[int]
	// The authentication key for BGP configuration.
	BgpAuthKey pulumix.Input[*string]
	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	CustomerAddress pulumix.Input[*string]
	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	VirtualInterfaceId pulumix.Input[string]
}

func (BgpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpPeerArgs)(nil)).Elem()
}

type BgpPeerOutput struct{ *pulumi.OutputState }

func (BgpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpPeer)(nil)).Elem()
}

func (o BgpPeerOutput) ToBgpPeerOutput() BgpPeerOutput {
	return o
}

func (o BgpPeerOutput) ToBgpPeerOutputWithContext(ctx context.Context) BgpPeerOutput {
	return o
}

func (o BgpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[BgpPeer] {
	return pulumix.Output[BgpPeer]{
		OutputState: o.OutputState,
	}
}

// The address family for the BGP peer. ` ipv4  ` or `ipv6`.
func (o BgpPeerOutput) AddressFamily() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.AddressFamily })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR address to use to send traffic to Amazon.
// Required for IPv4 BGP peers on public virtual interfaces.
func (o BgpPeerOutput) AmazonAddress() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.AmazonAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Direct Connect endpoint on which the BGP peer terminates.
func (o BgpPeerOutput) AwsDevice() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.AwsDevice })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
func (o BgpPeerOutput) BgpAsn() pulumix.Output[int] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[int] { return v.BgpAsn })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The authentication key for BGP configuration.
func (o BgpPeerOutput) BgpAuthKey() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.BgpAuthKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the BGP peer.
func (o BgpPeerOutput) BgpPeerId() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.BgpPeerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Up/Down state of the BGP peer.
func (o BgpPeerOutput) BgpStatus() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.BgpStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR destination address to which Amazon should send traffic.
// Required for IPv4 BGP peers on public virtual interfaces.
func (o BgpPeerOutput) CustomerAddress() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.CustomerAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Direct Connect virtual interface on which to create the BGP peer.
func (o BgpPeerOutput) VirtualInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[BgpPeer](o, func(v BgpPeer) pulumix.Output[string] { return v.VirtualInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BgpPeerOutput{})
}
