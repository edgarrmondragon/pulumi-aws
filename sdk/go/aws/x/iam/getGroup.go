// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// IAM group. By using this data source, you can reference IAM group
// properties without having to hard code ARNs as input.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("aws:iam/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// Friendly IAM group name to match.
	GroupName string `pulumi:"groupName"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	// User ARN.
	Arn string `pulumi:"arn"`
	// Stable and unique string identifying the group.
	GroupId   string `pulumi:"groupId"`
	GroupName string `pulumi:"groupName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Path to the IAM user.
	Path string `pulumi:"path"`
	// List of objects containing group member information. See below.
	Users []GetGroupUser `pulumi:"users"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupGroupArgs](args.ToOutput(), func(plainArgs *LookupGroupArgs) (*LookupGroupResult, error) {
		return LookupGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupGroupResultOutput, *LookupGroupResult](outputResult)
}

// A collection of arguments for invoking getGroup.
type LookupGroupOutputArgs struct {
	// Friendly IAM group name to match.
	GroupName pulumix.Input[string] `pulumi:"groupName"`
}

func (args LookupGroupOutputArgs) ToOutput() pulumix.Output[*LookupGroupArgs] {
	allArgs := pulumix.All(
		args.GroupName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupGroupArgs {
		return &LookupGroupArgs{
			GroupName: resolvedArgs[0].(string),
		}
	})
}

type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupGroupResult] {
	return pulumix.Output[*LookupGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Arn })
}

func (o LookupGroupResultOutput) GroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.GroupId })
}

func (o LookupGroupResultOutput) GroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.GroupName })
}

func (o LookupGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Id })
}

func (o LookupGroupResultOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Path })
}

func (o LookupGroupResultOutput) Users() pulumix.GArrayOutput[GetGroupUser, GetGroupUserOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupUser { return v.Users })
	return pulumix.GArrayOutput[GetGroupUser, GetGroupUserOutput]{
		OutputState: value.OutputState,
	}
}
