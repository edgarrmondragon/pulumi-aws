// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Lambda Layer Version resource. Lambda Layers allow you to reuse shared bits of code across multiple lambda functions.
//
// For information about Lambda Layers and how to use them, see [AWS Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
//
// > **NOTE:** Setting `skipDestroy` to `true` means that the AWS Provider will _not_ destroy any layer version, even when running destroy. Layer versions are thus intentional dangling resources that are _not_ managed by the provider and may incur extra expense in your AWS account.
type LayerVersion struct {
	pulumi.CustomResourceState

	// ARN of the Lambda Layer with version.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumix.Output[*pulumi.Archive] `pulumi:"code"`
	// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x8664` and `arm64` can be specified.
	CompatibleArchitectures pulumix.ArrayOutput[string] `pulumi:"compatibleArchitectures"`
	// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes pulumix.ArrayOutput[string] `pulumi:"compatibleRuntimes"`
	// Date this resource was created.
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// Description of what your Lambda Layer does.
	Description pulumix.Output[*string] `pulumi:"description"`
	// ARN of the Lambda Layer without version.
	LayerArn pulumix.Output[string] `pulumi:"layerArn"`
	// Unique name for your Lambda Layer
	//
	// The following arguments are optional:
	LayerName pulumix.Output[string] `pulumi:"layerName"`
	// License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
	LicenseInfo pulumix.Output[*string] `pulumi:"licenseInfo"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumix.Output[*string] `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumix.Output[*string] `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumix.Output[*string] `pulumi:"s3ObjectVersion"`
	// ARN of a signing job.
	SigningJobArn pulumix.Output[string] `pulumi:"signingJobArn"`
	// ARN for a signing profile version.
	SigningProfileVersionArn pulumix.Output[string] `pulumi:"signingProfileVersionArn"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumix.Output[*bool] `pulumi:"skipDestroy"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`.
	SourceCodeHash pulumix.Output[string] `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize pulumix.Output[int] `pulumi:"sourceCodeSize"`
	// Lambda Layer version.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewLayerVersion registers a new resource with the given unique name, arguments, and options.
func NewLayerVersion(ctx *pulumi.Context,
	name string, args *LayerVersionArgs, opts ...pulumi.ResourceOption) (*LayerVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LayerVersion
	err := ctx.RegisterResource("aws:lambda/layerVersion:LayerVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersion gets an existing LayerVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionState, opts ...pulumi.ResourceOption) (*LayerVersion, error) {
	var resource LayerVersion
	err := ctx.ReadResource("aws:lambda/layerVersion:LayerVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersion resources.
type layerVersionState struct {
	// ARN of the Lambda Layer with version.
	Arn *string `pulumi:"arn"`
	// Path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.Archive `pulumi:"code"`
	// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x8664` and `arm64` can be specified.
	CompatibleArchitectures []string `pulumi:"compatibleArchitectures"`
	// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// Date this resource was created.
	CreatedDate *string `pulumi:"createdDate"`
	// Description of what your Lambda Layer does.
	Description *string `pulumi:"description"`
	// ARN of the Lambda Layer without version.
	LayerArn *string `pulumi:"layerArn"`
	// Unique name for your Lambda Layer
	//
	// The following arguments are optional:
	LayerName *string `pulumi:"layerName"`
	// License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
	LicenseInfo *string `pulumi:"licenseInfo"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket *string `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key *string `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// ARN of a signing job.
	SigningJobArn *string `pulumi:"signingJobArn"`
	// ARN for a signing profile version.
	SigningProfileVersionArn *string `pulumi:"signingProfileVersionArn"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
	// Size in bytes of the function .zip file.
	SourceCodeSize *int `pulumi:"sourceCodeSize"`
	// Lambda Layer version.
	Version *string `pulumi:"version"`
}

type LayerVersionState struct {
	// ARN of the Lambda Layer with version.
	Arn pulumix.Input[*string]
	// Path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumix.Input[*pulumi.Archive]
	// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x8664` and `arm64` can be specified.
	CompatibleArchitectures pulumix.Input[[]string]
	// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes pulumix.Input[[]string]
	// Date this resource was created.
	CreatedDate pulumix.Input[*string]
	// Description of what your Lambda Layer does.
	Description pulumix.Input[*string]
	// ARN of the Lambda Layer without version.
	LayerArn pulumix.Input[*string]
	// Unique name for your Lambda Layer
	//
	// The following arguments are optional:
	LayerName pulumix.Input[*string]
	// License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
	LicenseInfo pulumix.Input[*string]
	// S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumix.Input[*string]
	// S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumix.Input[*string]
	// Object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumix.Input[*string]
	// ARN of a signing job.
	SigningJobArn pulumix.Input[*string]
	// ARN for a signing profile version.
	SigningProfileVersionArn pulumix.Input[*string]
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumix.Input[*bool]
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`.
	SourceCodeHash pulumix.Input[*string]
	// Size in bytes of the function .zip file.
	SourceCodeSize pulumix.Input[*int]
	// Lambda Layer version.
	Version pulumix.Input[*string]
}

func (LayerVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionState)(nil)).Elem()
}

type layerVersionArgs struct {
	// Path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.Archive `pulumi:"code"`
	// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x8664` and `arm64` can be specified.
	CompatibleArchitectures []string `pulumi:"compatibleArchitectures"`
	// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// Description of what your Lambda Layer does.
	Description *string `pulumi:"description"`
	// Unique name for your Lambda Layer
	//
	// The following arguments are optional:
	LayerName string `pulumi:"layerName"`
	// License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
	LicenseInfo *string `pulumi:"licenseInfo"`
	// S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket *string `pulumi:"s3Bucket"`
	// S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key *string `pulumi:"s3Key"`
	// Object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
}

// The set of arguments for constructing a LayerVersion resource.
type LayerVersionArgs struct {
	// Path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumix.Input[*pulumi.Archive]
	// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x8664` and `arm64` can be specified.
	CompatibleArchitectures pulumix.Input[[]string]
	// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes pulumix.Input[[]string]
	// Description of what your Lambda Layer does.
	Description pulumix.Input[*string]
	// Unique name for your Lambda Layer
	//
	// The following arguments are optional:
	LayerName pulumix.Input[string]
	// License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
	LicenseInfo pulumix.Input[*string]
	// S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumix.Input[*string]
	// S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumix.Input[*string]
	// Object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumix.Input[*string]
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumix.Input[*bool]
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`.
	SourceCodeHash pulumix.Input[*string]
}

func (LayerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionArgs)(nil)).Elem()
}

type LayerVersionOutput struct{ *pulumi.OutputState }

func (LayerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerVersion)(nil)).Elem()
}

func (o LayerVersionOutput) ToLayerVersionOutput() LayerVersionOutput {
	return o
}

func (o LayerVersionOutput) ToLayerVersionOutputWithContext(ctx context.Context) LayerVersionOutput {
	return o
}

func (o LayerVersionOutput) ToOutput(ctx context.Context) pulumix.Output[LayerVersion] {
	return pulumix.Output[LayerVersion]{
		OutputState: o.OutputState,
	}
}

// ARN of the Lambda Layer with version.
func (o LayerVersionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
func (o LayerVersionOutput) Code() pulumix.Output[*pulumi.Archive] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*pulumi.Archive] { return v.Code })
	return pulumix.Flatten[*pulumi.Archive, pulumix.Output[*pulumi.Archive]](value)
}

// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleArchitectures) this layer is compatible with. Currently `x8664` and `arm64` can be specified.
func (o LayerVersionOutput) CompatibleArchitectures() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.ArrayOutput[string] { return v.CompatibleArchitectures })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-CompatibleRuntimes) this layer is compatible with. Up to 5 runtimes can be specified.
func (o LayerVersionOutput) CompatibleRuntimes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.ArrayOutput[string] { return v.CompatibleRuntimes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Date this resource was created.
func (o LayerVersionOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of what your Lambda Layer does.
func (o LayerVersionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the Lambda Layer without version.
func (o LayerVersionOutput) LayerArn() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.LayerArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for your Lambda Layer
//
// The following arguments are optional:
func (o LayerVersionOutput) LayerName() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.LayerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// License info for your Lambda Layer. See [License Info](https://docs.aws.amazon.com/lambda/latest/dg/API_PublishLayerVersion.html#SSS-PublishLayerVersion-request-LicenseInfo).
func (o LayerVersionOutput) LicenseInfo() pulumix.Output[*string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*string] { return v.LicenseInfo })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
func (o LayerVersionOutput) S3Bucket() pulumix.Output[*string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*string] { return v.S3Bucket })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// S3 key of an object containing the function's deployment package. Conflicts with `filename`.
func (o LayerVersionOutput) S3Key() pulumix.Output[*string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*string] { return v.S3Key })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Object version containing the function's deployment package. Conflicts with `filename`.
func (o LayerVersionOutput) S3ObjectVersion() pulumix.Output[*string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*string] { return v.S3ObjectVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of a signing job.
func (o LayerVersionOutput) SigningJobArn() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.SigningJobArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for a signing profile version.
func (o LayerVersionOutput) SigningProfileVersionArn() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.SigningProfileVersionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
func (o LayerVersionOutput) SkipDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[*bool] { return v.SkipDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`.
func (o LayerVersionOutput) SourceCodeHash() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.SourceCodeHash })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Size in bytes of the function .zip file.
func (o LayerVersionOutput) SourceCodeSize() pulumix.Output[int] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[int] { return v.SourceCodeSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Lambda Layer version.
func (o LayerVersionOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersion](o, func(v LayerVersion) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LayerVersionOutput{})
}
