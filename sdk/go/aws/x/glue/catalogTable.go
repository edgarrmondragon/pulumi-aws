// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Glue Catalog Table Resource. You can refer to the [Glue Developer Guide](http://docs.aws.amazon.com/glue/latest/dg/populate-data-catalog.html) for a full explanation of the Glue Data Catalog functionality.
type CatalogTable struct {
	pulumi.CustomResourceState

	// The ARN of the Glue Table.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	CatalogId pulumix.Output[string] `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	//
	// The follow arguments are optional:
	DatabaseName pulumix.Output[string] `pulumi:"databaseName"`
	// Description of the table.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	Name pulumix.Output[string] `pulumi:"name"`
	// Owner of the table.
	Owner pulumix.Output[*string] `pulumi:"owner"`
	// Properties associated with this table, as a list of key-value pairs.
	Parameters pulumix.MapOutput[string] `pulumi:"parameters"`
	// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
	PartitionIndices pulumix.GArrayOutput[CatalogTablePartitionIndex, CatalogTablePartitionIndexOutput] `pulumi:"partitionIndices"`
	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
	PartitionKeys pulumix.GArrayOutput[CatalogTablePartitionKey, CatalogTablePartitionKeyOutput] `pulumi:"partitionKeys"`
	// Retention time for this table.
	Retention pulumix.Output[*int] `pulumi:"retention"`
	// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
	StorageDescriptor pulumix.GPtrOutput[CatalogTableStorageDescriptor, CatalogTableStorageDescriptorOutput] `pulumi:"storageDescriptor"`
	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
	TableType pulumix.Output[*string] `pulumi:"tableType"`
	// Configuration block of a target table for resource linking. See `targetTable` below.
	TargetTable pulumix.GPtrOutput[CatalogTableTargetTable, CatalogTableTargetTableOutput] `pulumi:"targetTable"`
	// If the table is a view, the expanded text of the view; otherwise null.
	ViewExpandedText pulumix.Output[*string] `pulumi:"viewExpandedText"`
	// If the table is a view, the original text of the view; otherwise null.
	ViewOriginalText pulumix.Output[*string] `pulumi:"viewOriginalText"`
}

// NewCatalogTable registers a new resource with the given unique name, arguments, and options.
func NewCatalogTable(ctx *pulumi.Context,
	name string, args *CatalogTableArgs, opts ...pulumi.ResourceOption) (*CatalogTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogTable
	err := ctx.RegisterResource("aws:glue/catalogTable:CatalogTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogTable gets an existing CatalogTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogTableState, opts ...pulumi.ResourceOption) (*CatalogTable, error) {
	var resource CatalogTable
	err := ctx.ReadResource("aws:glue/catalogTable:CatalogTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogTable resources.
type catalogTableState struct {
	// The ARN of the Glue Table.
	Arn *string `pulumi:"arn"`
	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	//
	// The follow arguments are optional:
	DatabaseName *string `pulumi:"databaseName"`
	// Description of the table.
	Description *string `pulumi:"description"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	Name *string `pulumi:"name"`
	// Owner of the table.
	Owner *string `pulumi:"owner"`
	// Properties associated with this table, as a list of key-value pairs.
	Parameters map[string]string `pulumi:"parameters"`
	// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
	PartitionIndices []CatalogTablePartitionIndex `pulumi:"partitionIndices"`
	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
	PartitionKeys []CatalogTablePartitionKey `pulumi:"partitionKeys"`
	// Retention time for this table.
	Retention *int `pulumi:"retention"`
	// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
	StorageDescriptor *CatalogTableStorageDescriptor `pulumi:"storageDescriptor"`
	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
	TableType *string `pulumi:"tableType"`
	// Configuration block of a target table for resource linking. See `targetTable` below.
	TargetTable *CatalogTableTargetTable `pulumi:"targetTable"`
	// If the table is a view, the expanded text of the view; otherwise null.
	ViewExpandedText *string `pulumi:"viewExpandedText"`
	// If the table is a view, the original text of the view; otherwise null.
	ViewOriginalText *string `pulumi:"viewOriginalText"`
}

type CatalogTableState struct {
	// The ARN of the Glue Table.
	Arn pulumix.Input[*string]
	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	CatalogId pulumix.Input[*string]
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	//
	// The follow arguments are optional:
	DatabaseName pulumix.Input[*string]
	// Description of the table.
	Description pulumix.Input[*string]
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	Name pulumix.Input[*string]
	// Owner of the table.
	Owner pulumix.Input[*string]
	// Properties associated with this table, as a list of key-value pairs.
	Parameters pulumix.Input[map[string]string]
	// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
	PartitionIndices pulumix.Input[[]*CatalogTablePartitionIndexArgs]
	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
	PartitionKeys pulumix.Input[[]*CatalogTablePartitionKeyArgs]
	// Retention time for this table.
	Retention pulumix.Input[*int]
	// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
	StorageDescriptor pulumix.Input[*CatalogTableStorageDescriptorArgs]
	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
	TableType pulumix.Input[*string]
	// Configuration block of a target table for resource linking. See `targetTable` below.
	TargetTable pulumix.Input[*CatalogTableTargetTableArgs]
	// If the table is a view, the expanded text of the view; otherwise null.
	ViewExpandedText pulumix.Input[*string]
	// If the table is a view, the original text of the view; otherwise null.
	ViewOriginalText pulumix.Input[*string]
}

func (CatalogTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogTableState)(nil)).Elem()
}

type catalogTableArgs struct {
	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	//
	// The follow arguments are optional:
	DatabaseName string `pulumi:"databaseName"`
	// Description of the table.
	Description *string `pulumi:"description"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	Name *string `pulumi:"name"`
	// Owner of the table.
	Owner *string `pulumi:"owner"`
	// Properties associated with this table, as a list of key-value pairs.
	Parameters map[string]string `pulumi:"parameters"`
	// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
	PartitionIndices []CatalogTablePartitionIndex `pulumi:"partitionIndices"`
	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
	PartitionKeys []CatalogTablePartitionKey `pulumi:"partitionKeys"`
	// Retention time for this table.
	Retention *int `pulumi:"retention"`
	// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
	StorageDescriptor *CatalogTableStorageDescriptor `pulumi:"storageDescriptor"`
	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
	TableType *string `pulumi:"tableType"`
	// Configuration block of a target table for resource linking. See `targetTable` below.
	TargetTable *CatalogTableTargetTable `pulumi:"targetTable"`
	// If the table is a view, the expanded text of the view; otherwise null.
	ViewExpandedText *string `pulumi:"viewExpandedText"`
	// If the table is a view, the original text of the view; otherwise null.
	ViewOriginalText *string `pulumi:"viewOriginalText"`
}

// The set of arguments for constructing a CatalogTable resource.
type CatalogTableArgs struct {
	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	CatalogId pulumix.Input[*string]
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	//
	// The follow arguments are optional:
	DatabaseName pulumix.Input[string]
	// Description of the table.
	Description pulumix.Input[*string]
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	Name pulumix.Input[*string]
	// Owner of the table.
	Owner pulumix.Input[*string]
	// Properties associated with this table, as a list of key-value pairs.
	Parameters pulumix.Input[map[string]string]
	// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
	PartitionIndices pulumix.Input[[]*CatalogTablePartitionIndexArgs]
	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
	PartitionKeys pulumix.Input[[]*CatalogTablePartitionKeyArgs]
	// Retention time for this table.
	Retention pulumix.Input[*int]
	// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
	StorageDescriptor pulumix.Input[*CatalogTableStorageDescriptorArgs]
	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
	TableType pulumix.Input[*string]
	// Configuration block of a target table for resource linking. See `targetTable` below.
	TargetTable pulumix.Input[*CatalogTableTargetTableArgs]
	// If the table is a view, the expanded text of the view; otherwise null.
	ViewExpandedText pulumix.Input[*string]
	// If the table is a view, the original text of the view; otherwise null.
	ViewOriginalText pulumix.Input[*string]
}

func (CatalogTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogTableArgs)(nil)).Elem()
}

type CatalogTableOutput struct{ *pulumi.OutputState }

func (CatalogTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTable)(nil)).Elem()
}

func (o CatalogTableOutput) ToCatalogTableOutput() CatalogTableOutput {
	return o
}

func (o CatalogTableOutput) ToCatalogTableOutputWithContext(ctx context.Context) CatalogTableOutput {
	return o
}

func (o CatalogTableOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTable] {
	return pulumix.Output[CatalogTable]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Glue Table.
func (o CatalogTableOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
func (o CatalogTableOutput) CatalogId() pulumix.Output[string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[string] { return v.CatalogId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
//
// The follow arguments are optional:
func (o CatalogTableOutput) DatabaseName() pulumix.Output[string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[string] { return v.DatabaseName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the table.
func (o CatalogTableOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the table. For Hive compatibility, this must be entirely lowercase.
func (o CatalogTableOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Owner of the table.
func (o CatalogTableOutput) Owner() pulumix.Output[*string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[*string] { return v.Owner })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Properties associated with this table, as a list of key-value pairs.
func (o CatalogTableOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.MapOutput[string] { return v.Parameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
func (o CatalogTableOutput) PartitionIndices() pulumix.GArrayOutput[CatalogTablePartitionIndex, CatalogTablePartitionIndexOutput] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.GArrayOutput[CatalogTablePartitionIndex, CatalogTablePartitionIndexOutput] {
		return v.PartitionIndices
	})
	unwrapped := pulumix.Flatten[[]CatalogTablePartitionIndex, pulumix.GArrayOutput[CatalogTablePartitionIndex, CatalogTablePartitionIndexOutput]](value)
	return pulumix.GArrayOutput[CatalogTablePartitionIndex, CatalogTablePartitionIndexOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
func (o CatalogTableOutput) PartitionKeys() pulumix.GArrayOutput[CatalogTablePartitionKey, CatalogTablePartitionKeyOutput] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.GArrayOutput[CatalogTablePartitionKey, CatalogTablePartitionKeyOutput] {
		return v.PartitionKeys
	})
	unwrapped := pulumix.Flatten[[]CatalogTablePartitionKey, pulumix.GArrayOutput[CatalogTablePartitionKey, CatalogTablePartitionKeyOutput]](value)
	return pulumix.GArrayOutput[CatalogTablePartitionKey, CatalogTablePartitionKeyOutput]{OutputState: unwrapped.OutputState}
}

// Retention time for this table.
func (o CatalogTableOutput) Retention() pulumix.Output[*int] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[*int] { return v.Retention })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
func (o CatalogTableOutput) StorageDescriptor() pulumix.GPtrOutput[CatalogTableStorageDescriptor, CatalogTableStorageDescriptorOutput] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.GPtrOutput[CatalogTableStorageDescriptor, CatalogTableStorageDescriptorOutput] {
		return v.StorageDescriptor
	})
	unwrapped := pulumix.Flatten[*CatalogTableStorageDescriptor, pulumix.GPtrOutput[CatalogTableStorageDescriptor, CatalogTableStorageDescriptorOutput]](value)
	return pulumix.GPtrOutput[CatalogTableStorageDescriptor, CatalogTableStorageDescriptorOutput]{OutputState: unwrapped.OutputState}
}

// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
func (o CatalogTableOutput) TableType() pulumix.Output[*string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[*string] { return v.TableType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block of a target table for resource linking. See `targetTable` below.
func (o CatalogTableOutput) TargetTable() pulumix.GPtrOutput[CatalogTableTargetTable, CatalogTableTargetTableOutput] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.GPtrOutput[CatalogTableTargetTable, CatalogTableTargetTableOutput] {
		return v.TargetTable
	})
	unwrapped := pulumix.Flatten[*CatalogTableTargetTable, pulumix.GPtrOutput[CatalogTableTargetTable, CatalogTableTargetTableOutput]](value)
	return pulumix.GPtrOutput[CatalogTableTargetTable, CatalogTableTargetTableOutput]{OutputState: unwrapped.OutputState}
}

// If the table is a view, the expanded text of the view; otherwise null.
func (o CatalogTableOutput) ViewExpandedText() pulumix.Output[*string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[*string] { return v.ViewExpandedText })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// If the table is a view, the original text of the view; otherwise null.
func (o CatalogTableOutput) ViewOriginalText() pulumix.Output[*string] {
	value := pulumix.Apply[CatalogTable](o, func(v CatalogTable) pulumix.Output[*string] { return v.ViewOriginalText })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(CatalogTableOutput{})
}
