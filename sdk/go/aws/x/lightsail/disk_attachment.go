// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches a Lightsail disk to a Lightsail Instance
type Disk_attachment struct {
	pulumi.CustomResourceState

	// The name of the Lightsail Disk.
	DiskName pulumix.Output[string] `pulumi:"diskName"`
	// The disk path to expose to the instance.
	DiskPath pulumix.Output[string] `pulumi:"diskPath"`
	// The name of the Lightsail Instance to attach to.
	InstanceName pulumix.Output[string] `pulumi:"instanceName"`
}

// NewDisk_attachment registers a new resource with the given unique name, arguments, and options.
func NewDisk_attachment(ctx *pulumi.Context,
	name string, args *Disk_attachmentArgs, opts ...pulumi.ResourceOption) (*Disk_attachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskName == nil {
		return nil, errors.New("invalid value for required argument 'DiskName'")
	}
	if args.DiskPath == nil {
		return nil, errors.New("invalid value for required argument 'DiskPath'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Disk_attachment
	err := ctx.RegisterResource("aws:lightsail/disk_attachment:Disk_attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDisk_attachment gets an existing Disk_attachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk_attachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Disk_attachmentState, opts ...pulumi.ResourceOption) (*Disk_attachment, error) {
	var resource Disk_attachment
	err := ctx.ReadResource("aws:lightsail/disk_attachment:Disk_attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Disk_attachment resources.
type disk_attachmentState struct {
	// The name of the Lightsail Disk.
	DiskName *string `pulumi:"diskName"`
	// The disk path to expose to the instance.
	DiskPath *string `pulumi:"diskPath"`
	// The name of the Lightsail Instance to attach to.
	InstanceName *string `pulumi:"instanceName"`
}

type Disk_attachmentState struct {
	// The name of the Lightsail Disk.
	DiskName pulumix.Input[*string]
	// The disk path to expose to the instance.
	DiskPath pulumix.Input[*string]
	// The name of the Lightsail Instance to attach to.
	InstanceName pulumix.Input[*string]
}

func (Disk_attachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*disk_attachmentState)(nil)).Elem()
}

type disk_attachmentArgs struct {
	// The name of the Lightsail Disk.
	DiskName string `pulumi:"diskName"`
	// The disk path to expose to the instance.
	DiskPath string `pulumi:"diskPath"`
	// The name of the Lightsail Instance to attach to.
	InstanceName string `pulumi:"instanceName"`
}

// The set of arguments for constructing a Disk_attachment resource.
type Disk_attachmentArgs struct {
	// The name of the Lightsail Disk.
	DiskName pulumix.Input[string]
	// The disk path to expose to the instance.
	DiskPath pulumix.Input[string]
	// The name of the Lightsail Instance to attach to.
	InstanceName pulumix.Input[string]
}

func (Disk_attachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*disk_attachmentArgs)(nil)).Elem()
}

type Disk_attachmentOutput struct{ *pulumi.OutputState }

func (Disk_attachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk_attachment)(nil)).Elem()
}

func (o Disk_attachmentOutput) ToDisk_attachmentOutput() Disk_attachmentOutput {
	return o
}

func (o Disk_attachmentOutput) ToDisk_attachmentOutputWithContext(ctx context.Context) Disk_attachmentOutput {
	return o
}

func (o Disk_attachmentOutput) ToOutput(ctx context.Context) pulumix.Output[Disk_attachment] {
	return pulumix.Output[Disk_attachment]{
		OutputState: o.OutputState,
	}
}

// The name of the Lightsail Disk.
func (o Disk_attachmentOutput) DiskName() pulumix.Output[string] {
	value := pulumix.Apply[Disk_attachment](o, func(v Disk_attachment) pulumix.Output[string] { return v.DiskName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The disk path to expose to the instance.
func (o Disk_attachmentOutput) DiskPath() pulumix.Output[string] {
	value := pulumix.Apply[Disk_attachment](o, func(v Disk_attachment) pulumix.Output[string] { return v.DiskPath })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Lightsail Instance to attach to.
func (o Disk_attachmentOutput) InstanceName() pulumix.Output[string] {
	value := pulumix.Apply[Disk_attachment](o, func(v Disk_attachment) pulumix.Output[string] { return v.InstanceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(Disk_attachmentOutput{})
}
