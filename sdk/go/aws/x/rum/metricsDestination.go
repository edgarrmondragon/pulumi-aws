// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch RUM Metrics Destination resource.
type MetricsDestination struct {
	pulumi.CustomResourceState

	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName pulumix.Output[string] `pulumi:"appMonitorName"`
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination pulumix.Output[string] `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumix.Output[*string] `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn pulumix.Output[*string] `pulumi:"iamRoleArn"`
}

// NewMetricsDestination registers a new resource with the given unique name, arguments, and options.
func NewMetricsDestination(ctx *pulumi.Context,
	name string, args *MetricsDestinationArgs, opts ...pulumi.ResourceOption) (*MetricsDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppMonitorName == nil {
		return nil, errors.New("invalid value for required argument 'AppMonitorName'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricsDestination
	err := ctx.RegisterResource("aws:rum/metricsDestination:MetricsDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsDestination gets an existing MetricsDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsDestinationState, opts ...pulumi.ResourceOption) (*MetricsDestination, error) {
	var resource MetricsDestination
	err := ctx.ReadResource("aws:rum/metricsDestination:MetricsDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsDestination resources.
type metricsDestinationState struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName *string `pulumi:"appMonitorName"`
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination *string `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn *string `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn *string `pulumi:"iamRoleArn"`
}

type MetricsDestinationState struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName pulumix.Input[*string]
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination pulumix.Input[*string]
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumix.Input[*string]
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn pulumix.Input[*string]
}

func (MetricsDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsDestinationState)(nil)).Elem()
}

type metricsDestinationArgs struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName string `pulumi:"appMonitorName"`
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination string `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn *string `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn *string `pulumi:"iamRoleArn"`
}

// The set of arguments for constructing a MetricsDestination resource.
type MetricsDestinationArgs struct {
	// The name of the CloudWatch RUM app monitor that will send the metrics.
	AppMonitorName pulumix.Input[string]
	// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination pulumix.Input[string]
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumix.Input[*string]
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	IamRoleArn pulumix.Input[*string]
}

func (MetricsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsDestinationArgs)(nil)).Elem()
}

type MetricsDestinationOutput struct{ *pulumi.OutputState }

func (MetricsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricsDestination)(nil)).Elem()
}

func (o MetricsDestinationOutput) ToMetricsDestinationOutput() MetricsDestinationOutput {
	return o
}

func (o MetricsDestinationOutput) ToMetricsDestinationOutputWithContext(ctx context.Context) MetricsDestinationOutput {
	return o
}

func (o MetricsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[MetricsDestination] {
	return pulumix.Output[MetricsDestination]{
		OutputState: o.OutputState,
	}
}

// The name of the CloudWatch RUM app monitor that will send the metrics.
func (o MetricsDestinationOutput) AppMonitorName() pulumix.Output[string] {
	value := pulumix.Apply[MetricsDestination](o, func(v MetricsDestination) pulumix.Output[string] { return v.AppMonitorName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Defines the destination to send the metrics to. Valid values are `CloudWatch` and `Evidently`. If you specify `Evidently`, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
func (o MetricsDestinationOutput) Destination() pulumix.Output[string] {
	value := pulumix.Apply[MetricsDestination](o, func(v MetricsDestination) pulumix.Output[string] { return v.Destination })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
func (o MetricsDestinationOutput) DestinationArn() pulumix.Output[*string] {
	value := pulumix.Apply[MetricsDestination](o, func(v MetricsDestination) pulumix.Output[*string] { return v.DestinationArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
func (o MetricsDestinationOutput) IamRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[MetricsDestination](o, func(v MetricsDestination) pulumix.Output[*string] { return v.IamRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(MetricsDestinationOutput{})
}
