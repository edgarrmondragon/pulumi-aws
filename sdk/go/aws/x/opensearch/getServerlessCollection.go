// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS OpenSearch Serverless Collection.
func LookupServerlessCollection(ctx *pulumi.Context, args *LookupServerlessCollectionArgs, opts ...pulumi.InvokeOption) (*LookupServerlessCollectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerlessCollectionResult
	err := ctx.Invoke("aws:opensearch/getServerlessCollection:getServerlessCollection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessCollection.
type LookupServerlessCollectionArgs struct {
	// ID of the collection. Either `id` or `name` must be provided.
	Id *string `pulumi:"id"`
	// Name of the collection. Either `name` or `id` must be provided.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getServerlessCollection.
type LookupServerlessCollectionResult struct {
	// Amazon Resource Name (ARN) of the collection.
	Arn string `pulumi:"arn"`
	// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
	CollectionEndpoint string `pulumi:"collectionEndpoint"`
	// Date the Collection was created.
	CreatedDate string `pulumi:"createdDate"`
	// Collection-specific endpoint used to access OpenSearch Dashboards.
	DashboardEndpoint string `pulumi:"dashboardEndpoint"`
	// Description of the collection.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
	KmsKeyArn string `pulumi:"kmsKeyArn"`
	// Date the Collection was last modified.
	LastModifiedDate string `pulumi:"lastModifiedDate"`
	Name             string `pulumi:"name"`
	// A map of tags to assign to the collection.
	Tags map[string]string `pulumi:"tags"`
	// Type of collection.
	Type string `pulumi:"type"`
}

func LookupServerlessCollectionOutput(ctx *pulumi.Context, args LookupServerlessCollectionOutputArgs, opts ...pulumi.InvokeOption) LookupServerlessCollectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServerlessCollectionArgs](args.ToOutput(), func(plainArgs *LookupServerlessCollectionArgs) (*LookupServerlessCollectionResult, error) {
		return LookupServerlessCollection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServerlessCollectionResultOutput, *LookupServerlessCollectionResult](outputResult)
}

// A collection of arguments for invoking getServerlessCollection.
type LookupServerlessCollectionOutputArgs struct {
	// ID of the collection. Either `id` or `name` must be provided.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Name of the collection. Either `name` or `id` must be provided.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (args LookupServerlessCollectionOutputArgs) ToOutput() pulumix.Output[*LookupServerlessCollectionArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServerlessCollectionArgs {
		return &LookupServerlessCollectionArgs{
			Id:   resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
		}
	})
}

type LookupServerlessCollectionResultOutput struct{ *pulumi.OutputState }

func (LookupServerlessCollectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessCollectionResult)(nil)).Elem()
}

func (o LookupServerlessCollectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServerlessCollectionResult] {
	return pulumix.Output[*LookupServerlessCollectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServerlessCollectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.Arn })
}

func (o LookupServerlessCollectionResultOutput) CollectionEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.CollectionEndpoint })
}

func (o LookupServerlessCollectionResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.CreatedDate })
}

func (o LookupServerlessCollectionResultOutput) DashboardEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.DashboardEndpoint })
}

func (o LookupServerlessCollectionResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.Description })
}

func (o LookupServerlessCollectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.Id })
}

func (o LookupServerlessCollectionResultOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.KmsKeyArn })
}

func (o LookupServerlessCollectionResultOutput) LastModifiedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.LastModifiedDate })
}

func (o LookupServerlessCollectionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.Name })
}

func (o LookupServerlessCollectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServerlessCollectionResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerlessCollectionResult](o, func(v *LookupServerlessCollectionResult) string { return v.Type })
}
