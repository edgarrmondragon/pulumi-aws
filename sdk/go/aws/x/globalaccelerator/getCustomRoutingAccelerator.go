// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Global Accelerator custom routing accelerator.
func LookupCustomRoutingAccelerator(ctx *pulumi.Context, args *LookupCustomRoutingAcceleratorArgs, opts ...pulumi.InvokeOption) (*LookupCustomRoutingAcceleratorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomRoutingAcceleratorResult
	err := ctx.Invoke("aws:globalaccelerator/getCustomRoutingAccelerator:getCustomRoutingAccelerator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomRoutingAccelerator.
type LookupCustomRoutingAcceleratorArgs struct {
	// Full ARN of the custom routing accelerator.
	Arn *string `pulumi:"arn"`
	// Unique name of the custom routing accelerator.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence.
	Name *string           `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCustomRoutingAccelerator.
type LookupCustomRoutingAcceleratorResult struct {
	Arn          string                                 `pulumi:"arn"`
	Attributes   []GetCustomRoutingAcceleratorAttribute `pulumi:"attributes"`
	DnsName      string                                 `pulumi:"dnsName"`
	Enabled      bool                                   `pulumi:"enabled"`
	HostedZoneId string                                 `pulumi:"hostedZoneId"`
	// The provider-assigned unique ID for this managed resource.
	Id            string                             `pulumi:"id"`
	IpAddressType string                             `pulumi:"ipAddressType"`
	IpSets        []GetCustomRoutingAcceleratorIpSet `pulumi:"ipSets"`
	Name          string                             `pulumi:"name"`
	Tags          map[string]string                  `pulumi:"tags"`
}

func LookupCustomRoutingAcceleratorOutput(ctx *pulumi.Context, args LookupCustomRoutingAcceleratorOutputArgs, opts ...pulumi.InvokeOption) LookupCustomRoutingAcceleratorResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCustomRoutingAcceleratorArgs](args.ToOutput(), func(plainArgs *LookupCustomRoutingAcceleratorArgs) (*LookupCustomRoutingAcceleratorResult, error) {
		return LookupCustomRoutingAccelerator(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCustomRoutingAcceleratorResultOutput, *LookupCustomRoutingAcceleratorResult](outputResult)
}

// A collection of arguments for invoking getCustomRoutingAccelerator.
type LookupCustomRoutingAcceleratorOutputArgs struct {
	// Full ARN of the custom routing accelerator.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Unique name of the custom routing accelerator.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence.
	Name pulumix.Input[*string]           `pulumi:"name"`
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupCustomRoutingAcceleratorOutputArgs) ToOutput() pulumix.Output[*LookupCustomRoutingAcceleratorArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCustomRoutingAcceleratorArgs {
		return &LookupCustomRoutingAcceleratorArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
			Tags: resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupCustomRoutingAcceleratorResultOutput struct{ *pulumi.OutputState }

func (LookupCustomRoutingAcceleratorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomRoutingAcceleratorResult)(nil)).Elem()
}

func (o LookupCustomRoutingAcceleratorResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCustomRoutingAcceleratorResult] {
	return pulumix.Output[*LookupCustomRoutingAcceleratorResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCustomRoutingAcceleratorResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) string { return v.Arn })
}

func (o LookupCustomRoutingAcceleratorResultOutput) Attributes() pulumix.GArrayOutput[GetCustomRoutingAcceleratorAttribute, GetCustomRoutingAcceleratorAttributeOutput] {
	value := pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) []GetCustomRoutingAcceleratorAttribute {
		return v.Attributes
	})
	return pulumix.GArrayOutput[GetCustomRoutingAcceleratorAttribute, GetCustomRoutingAcceleratorAttributeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCustomRoutingAcceleratorResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) string { return v.DnsName })
}

func (o LookupCustomRoutingAcceleratorResultOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) bool { return v.Enabled })
}

func (o LookupCustomRoutingAcceleratorResultOutput) HostedZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) string { return v.HostedZoneId })
}

func (o LookupCustomRoutingAcceleratorResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) string { return v.Id })
}

func (o LookupCustomRoutingAcceleratorResultOutput) IpAddressType() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) string { return v.IpAddressType })
}

func (o LookupCustomRoutingAcceleratorResultOutput) IpSets() pulumix.GArrayOutput[GetCustomRoutingAcceleratorIpSet, GetCustomRoutingAcceleratorIpSetOutput] {
	value := pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) []GetCustomRoutingAcceleratorIpSet { return v.IpSets })
	return pulumix.GArrayOutput[GetCustomRoutingAcceleratorIpSet, GetCustomRoutingAcceleratorIpSetOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCustomRoutingAcceleratorResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) string { return v.Name })
}

func (o LookupCustomRoutingAcceleratorResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupCustomRoutingAcceleratorResult](o, func(v *LookupCustomRoutingAcceleratorResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
