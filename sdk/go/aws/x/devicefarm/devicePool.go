// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage AWS Device Farm Device Pools.
type DevicePool struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of this Device Pool
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The device pool's description.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The number of devices that Device Farm can add to your device pool.
	MaxDevices pulumix.Output[*int] `pulumi:"maxDevices"`
	// The name of the Device Pool
	Name pulumix.Output[string] `pulumi:"name"`
	// The ARN of the project for the device pool.
	ProjectArn pulumix.Output[string] `pulumi:"projectArn"`
	// The device pool's rules. See Rule.
	Rules pulumix.GArrayOutput[DevicePoolRule, DevicePoolRuleOutput] `pulumi:"rules"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	Type    pulumix.Output[string]    `pulumi:"type"`
}

// NewDevicePool registers a new resource with the given unique name, arguments, and options.
func NewDevicePool(ctx *pulumi.Context,
	name string, args *DevicePoolArgs, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectArn == nil {
		return nil, errors.New("invalid value for required argument 'ProjectArn'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePool
	err := ctx.RegisterResource("aws:devicefarm/devicePool:DevicePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePool gets an existing DevicePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePoolState, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	var resource DevicePool
	err := ctx.ReadResource("aws:devicefarm/devicePool:DevicePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePool resources.
type devicePoolState struct {
	// The Amazon Resource Name of this Device Pool
	Arn *string `pulumi:"arn"`
	// The device pool's description.
	Description *string `pulumi:"description"`
	// The number of devices that Device Farm can add to your device pool.
	MaxDevices *int `pulumi:"maxDevices"`
	// The name of the Device Pool
	Name *string `pulumi:"name"`
	// The ARN of the project for the device pool.
	ProjectArn *string `pulumi:"projectArn"`
	// The device pool's rules. See Rule.
	Rules []DevicePoolRule `pulumi:"rules"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	Type    *string           `pulumi:"type"`
}

type DevicePoolState struct {
	// The Amazon Resource Name of this Device Pool
	Arn pulumix.Input[*string]
	// The device pool's description.
	Description pulumix.Input[*string]
	// The number of devices that Device Farm can add to your device pool.
	MaxDevices pulumix.Input[*int]
	// The name of the Device Pool
	Name pulumix.Input[*string]
	// The ARN of the project for the device pool.
	ProjectArn pulumix.Input[*string]
	// The device pool's rules. See Rule.
	Rules pulumix.Input[[]*DevicePoolRuleArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	Type    pulumix.Input[*string]
}

func (DevicePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolState)(nil)).Elem()
}

type devicePoolArgs struct {
	// The device pool's description.
	Description *string `pulumi:"description"`
	// The number of devices that Device Farm can add to your device pool.
	MaxDevices *int `pulumi:"maxDevices"`
	// The name of the Device Pool
	Name *string `pulumi:"name"`
	// The ARN of the project for the device pool.
	ProjectArn string `pulumi:"projectArn"`
	// The device pool's rules. See Rule.
	Rules []DevicePoolRule `pulumi:"rules"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DevicePool resource.
type DevicePoolArgs struct {
	// The device pool's description.
	Description pulumix.Input[*string]
	// The number of devices that Device Farm can add to your device pool.
	MaxDevices pulumix.Input[*int]
	// The name of the Device Pool
	Name pulumix.Input[*string]
	// The ARN of the project for the device pool.
	ProjectArn pulumix.Input[string]
	// The device pool's rules. See Rule.
	Rules pulumix.Input[[]*DevicePoolRuleArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (DevicePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolArgs)(nil)).Elem()
}

type DevicePoolOutput struct{ *pulumi.OutputState }

func (DevicePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePool)(nil)).Elem()
}

func (o DevicePoolOutput) ToDevicePoolOutput() DevicePoolOutput {
	return o
}

func (o DevicePoolOutput) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return o
}

func (o DevicePoolOutput) ToOutput(ctx context.Context) pulumix.Output[DevicePool] {
	return pulumix.Output[DevicePool]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name of this Device Pool
func (o DevicePoolOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The device pool's description.
func (o DevicePoolOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of devices that Device Farm can add to your device pool.
func (o DevicePoolOutput) MaxDevices() pulumix.Output[*int] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.Output[*int] { return v.MaxDevices })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name of the Device Pool
func (o DevicePoolOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the project for the device pool.
func (o DevicePoolOutput) ProjectArn() pulumix.Output[string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.Output[string] { return v.ProjectArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The device pool's rules. See Rule.
func (o DevicePoolOutput) Rules() pulumix.GArrayOutput[DevicePoolRule, DevicePoolRuleOutput] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.GArrayOutput[DevicePoolRule, DevicePoolRuleOutput] { return v.Rules })
	unwrapped := pulumix.Flatten[[]DevicePoolRule, pulumix.GArrayOutput[DevicePoolRule, DevicePoolRuleOutput]](value)
	return pulumix.GArrayOutput[DevicePoolRule, DevicePoolRuleOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DevicePoolOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DevicePoolOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o DevicePoolOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[DevicePool](o, func(v DevicePool) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DevicePoolOutput{})
}
