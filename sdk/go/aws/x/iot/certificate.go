// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages an AWS IoT certificate.
type Certificate struct {
	pulumi.CustomResourceState

	// Boolean flag to indicate if the certificate should be active
	Active pulumix.Output[bool] `pulumi:"active"`
	// The ARN of the created certificate.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
	CaPem pulumix.Output[*string] `pulumi:"caPem"`
	// The certificate to be registered. If `caPem` is unspecified, review
	// [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
	// If `caPem` is specified, review
	// [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
	// for more information on registering a certificate.
	CertificatePem pulumix.Output[string] `pulumi:"certificatePem"`
	// The certificate signing request. Review
	// [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
	// for more information on generating a certificate from a certificate signing request (CSR).
	// If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
	// for more information on generating keys and a certificate.
	Csr pulumix.Output[*string] `pulumi:"csr"`
	// When neither CSR nor certificate is provided, the private key.
	PrivateKey pulumix.Output[string] `pulumi:"privateKey"`
	// When neither CSR nor certificate is provided, the public key.
	PublicKey pulumix.Output[string] `pulumi:"publicKey"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.CaPem != nil {
		untypedSecretValue := pulumi.ToSecret(args.CaPem.ToOutput(ctx.Context()).Untyped())
		args.CaPem = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.CertificatePem != nil {
		untypedSecretValue := pulumi.ToSecret(args.CertificatePem.ToOutput(ctx.Context()).Untyped())
		args.CertificatePem = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caPem",
		"certificatePem",
		"privateKey",
		"publicKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("aws:iot/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:iot/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Boolean flag to indicate if the certificate should be active
	Active *bool `pulumi:"active"`
	// The ARN of the created certificate.
	Arn *string `pulumi:"arn"`
	// The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
	CaPem *string `pulumi:"caPem"`
	// The certificate to be registered. If `caPem` is unspecified, review
	// [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
	// If `caPem` is specified, review
	// [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
	// for more information on registering a certificate.
	CertificatePem *string `pulumi:"certificatePem"`
	// The certificate signing request. Review
	// [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
	// for more information on generating a certificate from a certificate signing request (CSR).
	// If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
	// for more information on generating keys and a certificate.
	Csr *string `pulumi:"csr"`
	// When neither CSR nor certificate is provided, the private key.
	PrivateKey *string `pulumi:"privateKey"`
	// When neither CSR nor certificate is provided, the public key.
	PublicKey *string `pulumi:"publicKey"`
}

type CertificateState struct {
	// Boolean flag to indicate if the certificate should be active
	Active pulumix.Input[*bool]
	// The ARN of the created certificate.
	Arn pulumix.Input[*string]
	// The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
	CaPem pulumix.Input[*string]
	// The certificate to be registered. If `caPem` is unspecified, review
	// [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
	// If `caPem` is specified, review
	// [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
	// for more information on registering a certificate.
	CertificatePem pulumix.Input[*string]
	// The certificate signing request. Review
	// [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
	// for more information on generating a certificate from a certificate signing request (CSR).
	// If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
	// for more information on generating keys and a certificate.
	Csr pulumix.Input[*string]
	// When neither CSR nor certificate is provided, the private key.
	PrivateKey pulumix.Input[*string]
	// When neither CSR nor certificate is provided, the public key.
	PublicKey pulumix.Input[*string]
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Boolean flag to indicate if the certificate should be active
	Active bool `pulumi:"active"`
	// The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
	CaPem *string `pulumi:"caPem"`
	// The certificate to be registered. If `caPem` is unspecified, review
	// [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
	// If `caPem` is specified, review
	// [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
	// for more information on registering a certificate.
	CertificatePem *string `pulumi:"certificatePem"`
	// The certificate signing request. Review
	// [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
	// for more information on generating a certificate from a certificate signing request (CSR).
	// If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
	// for more information on generating keys and a certificate.
	Csr *string `pulumi:"csr"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Boolean flag to indicate if the certificate should be active
	Active pulumix.Input[bool]
	// The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
	CaPem pulumix.Input[*string]
	// The certificate to be registered. If `caPem` is unspecified, review
	// [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
	// If `caPem` is specified, review
	// [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
	// for more information on registering a certificate.
	CertificatePem pulumix.Input[*string]
	// The certificate signing request. Review
	// [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
	// for more information on generating a certificate from a certificate signing request (CSR).
	// If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
	// for more information on generating keys and a certificate.
	Csr pulumix.Input[*string]
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToOutput(ctx context.Context) pulumix.Output[Certificate] {
	return pulumix.Output[Certificate]{
		OutputState: o.OutputState,
	}
}

// Boolean flag to indicate if the certificate should be active
func (o CertificateOutput) Active() pulumix.Output[bool] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[bool] { return v.Active })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The ARN of the created certificate.
func (o CertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The CA certificate for the certificate to be registered. If this is set, the CA needs to be registered with AWS IoT beforehand.
func (o CertificateOutput) CaPem() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CaPem })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The certificate to be registered. If `caPem` is unspecified, review
// [RegisterCertificateWithoutCA](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificateWithoutCA.html).
// If `caPem` is specified, review
// [RegisterCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_RegisterCertificate.html)
// for more information on registering a certificate.
func (o CertificateOutput) CertificatePem() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificatePem })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The certificate signing request. Review
// [CreateCertificateFromCsr](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateCertificateFromCsr.html)
// for more information on generating a certificate from a certificate signing request (CSR).
// If none is specified both the certificate and keys will be generated, review [CreateKeysAndCertificate](https://docs.aws.amazon.com/iot/latest/apireference/API_CreateKeysAndCertificate.html)
// for more information on generating keys and a certificate.
func (o CertificateOutput) Csr() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.Csr })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// When neither CSR nor certificate is provided, the private key.
func (o CertificateOutput) PrivateKey() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.PrivateKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When neither CSR nor certificate is provided, the public key.
func (o CertificateOutput) PublicKey() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.PublicKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
