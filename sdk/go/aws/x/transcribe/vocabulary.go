// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcribe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Transcribe Vocabulary.
type Vocabulary struct {
	pulumi.CustomResourceState

	// ARN of the Vocabulary.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Generated download URI.
	DownloadUri pulumix.Output[string] `pulumi:"downloadUri"`
	// The language code you selected for your vocabulary.
	LanguageCode pulumix.Output[string] `pulumi:"languageCode"`
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
	Phrases pulumix.ArrayOutput[string] `pulumi:"phrases"`
	// A map of tags to assign to the Vocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
	VocabularyFileUri pulumix.Output[string] `pulumi:"vocabularyFileUri"`
	// The name of the Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName pulumix.Output[string] `pulumi:"vocabularyName"`
}

// NewVocabulary registers a new resource with the given unique name, arguments, and options.
func NewVocabulary(ctx *pulumi.Context,
	name string, args *VocabularyArgs, opts ...pulumi.ResourceOption) (*Vocabulary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	if args.VocabularyName == nil {
		return nil, errors.New("invalid value for required argument 'VocabularyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vocabulary
	err := ctx.RegisterResource("aws:transcribe/vocabulary:Vocabulary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVocabulary gets an existing Vocabulary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVocabulary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VocabularyState, opts ...pulumi.ResourceOption) (*Vocabulary, error) {
	var resource Vocabulary
	err := ctx.ReadResource("aws:transcribe/vocabulary:Vocabulary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vocabulary resources.
type vocabularyState struct {
	// ARN of the Vocabulary.
	Arn *string `pulumi:"arn"`
	// Generated download URI.
	DownloadUri *string `pulumi:"downloadUri"`
	// The language code you selected for your vocabulary.
	LanguageCode *string `pulumi:"languageCode"`
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
	Phrases []string `pulumi:"phrases"`
	// A map of tags to assign to the Vocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
	VocabularyFileUri *string `pulumi:"vocabularyFileUri"`
	// The name of the Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName *string `pulumi:"vocabularyName"`
}

type VocabularyState struct {
	// ARN of the Vocabulary.
	Arn pulumix.Input[*string]
	// Generated download URI.
	DownloadUri pulumix.Input[*string]
	// The language code you selected for your vocabulary.
	LanguageCode pulumix.Input[*string]
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
	Phrases pulumix.Input[[]string]
	// A map of tags to assign to the Vocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
	VocabularyFileUri pulumix.Input[*string]
	// The name of the Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName pulumix.Input[*string]
}

func (VocabularyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vocabularyState)(nil)).Elem()
}

type vocabularyArgs struct {
	// The language code you selected for your vocabulary.
	LanguageCode string `pulumi:"languageCode"`
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
	Phrases []string `pulumi:"phrases"`
	// A map of tags to assign to the Vocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
	VocabularyFileUri *string `pulumi:"vocabularyFileUri"`
	// The name of the Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName string `pulumi:"vocabularyName"`
}

// The set of arguments for constructing a Vocabulary resource.
type VocabularyArgs struct {
	// The language code you selected for your vocabulary.
	LanguageCode pulumix.Input[string]
	// A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
	Phrases pulumix.Input[[]string]
	// A map of tags to assign to the Vocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
	VocabularyFileUri pulumix.Input[*string]
	// The name of the Vocabulary.
	//
	// The following arguments are optional:
	VocabularyName pulumix.Input[string]
}

func (VocabularyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vocabularyArgs)(nil)).Elem()
}

type VocabularyOutput struct{ *pulumi.OutputState }

func (VocabularyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vocabulary)(nil)).Elem()
}

func (o VocabularyOutput) ToVocabularyOutput() VocabularyOutput {
	return o
}

func (o VocabularyOutput) ToVocabularyOutputWithContext(ctx context.Context) VocabularyOutput {
	return o
}

func (o VocabularyOutput) ToOutput(ctx context.Context) pulumix.Output[Vocabulary] {
	return pulumix.Output[Vocabulary]{
		OutputState: o.OutputState,
	}
}

// ARN of the Vocabulary.
func (o VocabularyOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Generated download URI.
func (o VocabularyOutput) DownloadUri() pulumix.Output[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.Output[string] { return v.DownloadUri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The language code you selected for your vocabulary.
func (o VocabularyOutput) LanguageCode() pulumix.Output[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.Output[string] { return v.LanguageCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
func (o VocabularyOutput) Phrases() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.ArrayOutput[string] { return v.Phrases })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the Vocabulary. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VocabularyOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o VocabularyOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
func (o VocabularyOutput) VocabularyFileUri() pulumix.Output[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.Output[string] { return v.VocabularyFileUri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Vocabulary.
//
// The following arguments are optional:
func (o VocabularyOutput) VocabularyName() pulumix.Output[string] {
	value := pulumix.Apply[Vocabulary](o, func(v Vocabulary) pulumix.Output[string] { return v.VocabularyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VocabularyOutput{})
}
