// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Traffic mirror session.\
// Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring
type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	// The ARN of the traffic mirror session.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description of the traffic mirror session.
	Description pulumix.Output[*string] `pulumi:"description"`
	// ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// The AWS account ID of the session owner.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
	PacketLength pulumix.Output[*int] `pulumi:"packetLength"`
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber pulumix.Output[int] `pulumi:"sessionNumber"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// ID of the traffic mirror filter to be used
	TrafficMirrorFilterId pulumix.Output[string] `pulumi:"trafficMirrorFilterId"`
	// ID of the traffic mirror target to be used
	TrafficMirrorTargetId pulumix.Output[string] `pulumi:"trafficMirrorTargetId"`
	// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
	VirtualNetworkId pulumix.Output[int] `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.SessionNumber == nil {
		return nil, errors.New("invalid value for required argument 'SessionNumber'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	if args.TrafficMirrorTargetId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("aws:ec2/trafficMirrorSession:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("aws:ec2/trafficMirrorSession:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
	// The ARN of the traffic mirror session.
	Arn *string `pulumi:"arn"`
	// A description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The AWS account ID of the session owner.
	OwnerId *string `pulumi:"ownerId"`
	// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
	PacketLength *int `pulumi:"packetLength"`
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber *int `pulumi:"sessionNumber"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ID of the traffic mirror filter to be used
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// ID of the traffic mirror target to be used
	TrafficMirrorTargetId *string `pulumi:"trafficMirrorTargetId"`
	// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

type TrafficMirrorSessionState struct {
	// The ARN of the traffic mirror session.
	Arn pulumix.Input[*string]
	// A description of the traffic mirror session.
	Description pulumix.Input[*string]
	// ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
	NetworkInterfaceId pulumix.Input[*string]
	// The AWS account ID of the session owner.
	OwnerId pulumix.Input[*string]
	// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
	PacketLength pulumix.Input[*int]
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber pulumix.Input[*int]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// ID of the traffic mirror filter to be used
	TrafficMirrorFilterId pulumix.Input[*string]
	// ID of the traffic mirror target to be used
	TrafficMirrorTargetId pulumix.Input[*string]
	// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
	VirtualNetworkId pulumix.Input[*int]
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	// A description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
	PacketLength *int `pulumi:"packetLength"`
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber int `pulumi:"sessionNumber"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// ID of the traffic mirror filter to be used
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
	// ID of the traffic mirror target to be used
	TrafficMirrorTargetId string `pulumi:"trafficMirrorTargetId"`
	// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	// A description of the traffic mirror session.
	Description pulumix.Input[*string]
	// ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
	NetworkInterfaceId pulumix.Input[string]
	// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
	PacketLength pulumix.Input[*int]
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber pulumix.Input[int]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// ID of the traffic mirror filter to be used
	TrafficMirrorFilterId pulumix.Input[string]
	// ID of the traffic mirror target to be used
	TrafficMirrorTargetId pulumix.Input[string]
	// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
	VirtualNetworkId pulumix.Input[*int]
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}

type TrafficMirrorSessionOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToOutput(ctx context.Context) pulumix.Output[TrafficMirrorSession] {
	return pulumix.Output[TrafficMirrorSession]{
		OutputState: o.OutputState,
	}
}

// The ARN of the traffic mirror session.
func (o TrafficMirrorSessionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the traffic mirror session.
func (o TrafficMirrorSessionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of the source network interface. Not all network interfaces are eligible as mirror sources. On EC2 instances only nitro based instances support mirroring.
func (o TrafficMirrorSessionOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the session owner.
func (o TrafficMirrorSessionOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror.
func (o TrafficMirrorSessionOutput) PacketLength() pulumix.Output[*int] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[*int] { return v.PacketLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
func (o TrafficMirrorSessionOutput) SessionNumber() pulumix.Output[int] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[int] { return v.SessionNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrafficMirrorSessionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TrafficMirrorSessionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// ID of the traffic mirror filter to be used
func (o TrafficMirrorSessionOutput) TrafficMirrorFilterId() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[string] { return v.TrafficMirrorFilterId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the traffic mirror target to be used
func (o TrafficMirrorSessionOutput) TrafficMirrorTargetId() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[string] { return v.TrafficMirrorTargetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
func (o TrafficMirrorSessionOutput) VirtualNetworkId() pulumix.Output[int] {
	value := pulumix.Apply[TrafficMirrorSession](o, func(v TrafficMirrorSession) pulumix.Output[int] { return v.VirtualNetworkId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(TrafficMirrorSessionOutput{})
}
