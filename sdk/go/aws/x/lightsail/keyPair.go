// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Lightsail Key Pair, for use with Lightsail Instances. These key pairs
// are separate from EC2 Key Pairs, and must be created or imported for use with
// Lightsail.
//
// > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
type KeyPair struct {
	pulumi.CustomResourceState

	// The ARN of the Lightsail key pair.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The MD5 public key fingerprint for the encrypted private key.
	EncryptedFingerprint pulumix.Output[string] `pulumi:"encryptedFingerprint"`
	// the private key material, base 64 encoded and encrypted with the given `pgpKey`. This is only populated when creating a new key and `pgpKey` is supplied.
	EncryptedPrivateKey pulumix.Output[string] `pulumi:"encryptedPrivateKey"`
	// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
	Fingerprint pulumix.Output[string] `pulumi:"fingerprint"`
	// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
	Name       pulumix.Output[string]  `pulumi:"name"`
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
	// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
	PgpKey pulumix.Output[*string] `pulumi:"pgpKey"`
	// the private key, base64 encoded. This is only populated when creating a new key, and when no `pgpKey` is provided.
	PrivateKey pulumix.Output[string] `pulumi:"privateKey"`
	// The public key material. This public key will be imported into Lightsail
	PublicKey pulumix.Output[string] `pulumi:"publicKey"`
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgpKey` is ignored if `publicKey` is supplied.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewKeyPair registers a new resource with the given unique name, arguments, and options.
func NewKeyPair(ctx *pulumi.Context,
	name string, args *KeyPairArgs, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	if args == nil {
		args = &KeyPairArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyPair
	err := ctx.RegisterResource("aws:lightsail/keyPair:KeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPair gets an existing KeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairState, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	var resource KeyPair
	err := ctx.ReadResource("aws:lightsail/keyPair:KeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPair resources.
type keyPairState struct {
	// The ARN of the Lightsail key pair.
	Arn *string `pulumi:"arn"`
	// The MD5 public key fingerprint for the encrypted private key.
	EncryptedFingerprint *string `pulumi:"encryptedFingerprint"`
	// the private key material, base 64 encoded and encrypted with the given `pgpKey`. This is only populated when creating a new key and `pgpKey` is supplied.
	EncryptedPrivateKey *string `pulumi:"encryptedPrivateKey"`
	// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
	PgpKey *string `pulumi:"pgpKey"`
	// the private key, base64 encoded. This is only populated when creating a new key, and when no `pgpKey` is provided.
	PrivateKey *string `pulumi:"privateKey"`
	// The public key material. This public key will be imported into Lightsail
	PublicKey *string `pulumi:"publicKey"`
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgpKey` is ignored if `publicKey` is supplied.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type KeyPairState struct {
	// The ARN of the Lightsail key pair.
	Arn pulumix.Input[*string]
	// The MD5 public key fingerprint for the encrypted private key.
	EncryptedFingerprint pulumix.Input[*string]
	// the private key material, base 64 encoded and encrypted with the given `pgpKey`. This is only populated when creating a new key and `pgpKey` is supplied.
	EncryptedPrivateKey pulumix.Input[*string]
	// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
	Fingerprint pulumix.Input[*string]
	// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
	Name       pulumix.Input[*string]
	NamePrefix pulumix.Input[*string]
	// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
	PgpKey pulumix.Input[*string]
	// the private key, base64 encoded. This is only populated when creating a new key, and when no `pgpKey` is provided.
	PrivateKey pulumix.Input[*string]
	// The public key material. This public key will be imported into Lightsail
	PublicKey pulumix.Input[*string]
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgpKey` is ignored if `publicKey` is supplied.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (KeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairState)(nil)).Elem()
}

type keyPairArgs struct {
	// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
	PgpKey *string `pulumi:"pgpKey"`
	// The public key material. This public key will be imported into Lightsail
	PublicKey *string `pulumi:"publicKey"`
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgpKey` is ignored if `publicKey` is supplied.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a KeyPair resource.
type KeyPairArgs struct {
	// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
	Name       pulumix.Input[*string]
	NamePrefix pulumix.Input[*string]
	// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
	PgpKey pulumix.Input[*string]
	// The public key material. This public key will be imported into Lightsail
	PublicKey pulumix.Input[*string]
	// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// > **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgpKey` is ignored if `publicKey` is supplied.
	Tags pulumix.Input[map[string]string]
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairArgs)(nil)).Elem()
}

type KeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPair)(nil)).Elem()
}

func (o KeyPairOutput) ToKeyPairOutput() KeyPairOutput {
	return o
}

func (o KeyPairOutput) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return o
}

func (o KeyPairOutput) ToOutput(ctx context.Context) pulumix.Output[KeyPair] {
	return pulumix.Output[KeyPair]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lightsail key pair.
func (o KeyPairOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The MD5 public key fingerprint for the encrypted private key.
func (o KeyPairOutput) EncryptedFingerprint() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.EncryptedFingerprint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// the private key material, base 64 encoded and encrypted with the given `pgpKey`. This is only populated when creating a new key and `pgpKey` is supplied.
func (o KeyPairOutput) EncryptedPrivateKey() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.EncryptedPrivateKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
func (o KeyPairOutput) Fingerprint() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.Fingerprint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Lightsail Key Pair. If omitted, a unique name will be generated by this provider
func (o KeyPairOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o KeyPairOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// An optional PGP key to encrypt the resulting private key material. Only used when creating a new key pair
func (o KeyPairOutput) PgpKey() pulumix.Output[*string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[*string] { return v.PgpKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// the private key, base64 encoded. This is only populated when creating a new key, and when no `pgpKey` is provided.
func (o KeyPairOutput) PrivateKey() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.PrivateKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public key material. This public key will be imported into Lightsail
func (o KeyPairOutput) PublicKey() pulumix.Output[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.Output[string] { return v.PublicKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the collection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// > **NOTE:** a PGP key is not required, however it is strongly encouraged. Without a PGP key, the private key material will be stored in state unencrypted.`pgpKey` is ignored if `publicKey` is supplied.
func (o KeyPairOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o KeyPairOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[KeyPair](o, func(v KeyPair) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(KeyPairOutput{})
}
