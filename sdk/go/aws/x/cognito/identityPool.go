// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Cognito Identity Pool.
type IdentityPool struct {
	pulumi.CustomResourceState

	// Enables or disables the classic / basic authentication flow. Default is `false`.
	AllowClassicFlow pulumix.Output[*bool] `pulumi:"allowClassicFlow"`
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumix.Output[*bool] `pulumi:"allowUnauthenticatedIdentities"`
	// The ARN of the identity pool.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders pulumix.GArrayOutput[IdentityPoolCognitoIdentityProvider, IdentityPoolCognitoIdentityProviderOutput] `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumix.Output[*string] `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName pulumix.Output[string] `pulumi:"identityPoolName"`
	// Set of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumix.ArrayOutput[string] `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumix.ArrayOutput[string] `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumix.MapOutput[string] `pulumi:"supportedLoginProviders"`
	// A map of tags to assign to the Identity Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIdentityPool(ctx *pulumi.Context,
	name string, args *IdentityPoolArgs, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityPoolName == nil {
		return nil, errors.New("invalid value for required argument 'IdentityPoolName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityPool
	err := ctx.RegisterResource("aws:cognito/identityPool:IdentityPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPool gets an existing IdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPoolState, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	var resource IdentityPool
	err := ctx.ReadResource("aws:cognito/identityPool:IdentityPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPool resources.
type identityPoolState struct {
	// Enables or disables the classic / basic authentication flow. Default is `false`.
	AllowClassicFlow *bool `pulumi:"allowClassicFlow"`
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities *bool `pulumi:"allowUnauthenticatedIdentities"`
	// The ARN of the identity pool.
	Arn *string `pulumi:"arn"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName *string `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName *string `pulumi:"identityPoolName"`
	// Set of OpendID Connect provider ARNs.
	OpenidConnectProviderArns []string `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns []string `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders map[string]string `pulumi:"supportedLoginProviders"`
	// A map of tags to assign to the Identity Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type IdentityPoolState struct {
	// Enables or disables the classic / basic authentication flow. Default is `false`.
	AllowClassicFlow pulumix.Input[*bool]
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumix.Input[*bool]
	// The ARN of the identity pool.
	Arn pulumix.Input[*string]
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders pulumix.Input[[]*IdentityPoolCognitoIdentityProviderArgs]
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumix.Input[*string]
	// The Cognito Identity Pool name.
	IdentityPoolName pulumix.Input[*string]
	// Set of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumix.Input[[]string]
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumix.Input[[]string]
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumix.Input[map[string]string]
	// A map of tags to assign to the Identity Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (IdentityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolState)(nil)).Elem()
}

type identityPoolArgs struct {
	// Enables or disables the classic / basic authentication flow. Default is `false`.
	AllowClassicFlow *bool `pulumi:"allowClassicFlow"`
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities *bool `pulumi:"allowUnauthenticatedIdentities"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName *string `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName string `pulumi:"identityPoolName"`
	// Set of OpendID Connect provider ARNs.
	OpenidConnectProviderArns []string `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns []string `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders map[string]string `pulumi:"supportedLoginProviders"`
	// A map of tags to assign to the Identity Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IdentityPool resource.
type IdentityPoolArgs struct {
	// Enables or disables the classic / basic authentication flow. Default is `false`.
	AllowClassicFlow pulumix.Input[*bool]
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumix.Input[*bool]
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders pulumix.Input[[]*IdentityPoolCognitoIdentityProviderArgs]
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumix.Input[*string]
	// The Cognito Identity Pool name.
	IdentityPoolName pulumix.Input[string]
	// Set of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumix.Input[[]string]
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumix.Input[[]string]
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumix.Input[map[string]string]
	// A map of tags to assign to the Identity Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (IdentityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolArgs)(nil)).Elem()
}

type IdentityPoolOutput struct{ *pulumi.OutputState }

func (IdentityPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPool)(nil)).Elem()
}

func (o IdentityPoolOutput) ToIdentityPoolOutput() IdentityPoolOutput {
	return o
}

func (o IdentityPoolOutput) ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput {
	return o
}

func (o IdentityPoolOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPool] {
	return pulumix.Output[IdentityPool]{
		OutputState: o.OutputState,
	}
}

// Enables or disables the classic / basic authentication flow. Default is `false`.
func (o IdentityPoolOutput) AllowClassicFlow() pulumix.Output[*bool] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.Output[*bool] { return v.AllowClassicFlow })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether the identity pool supports unauthenticated logins or not.
func (o IdentityPoolOutput) AllowUnauthenticatedIdentities() pulumix.Output[*bool] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.Output[*bool] { return v.AllowUnauthenticatedIdentities })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ARN of the identity pool.
func (o IdentityPoolOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An array of Amazon Cognito Identity user pools and their client IDs.
func (o IdentityPoolOutput) CognitoIdentityProviders() pulumix.GArrayOutput[IdentityPoolCognitoIdentityProvider, IdentityPoolCognitoIdentityProviderOutput] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.GArrayOutput[IdentityPoolCognitoIdentityProvider, IdentityPoolCognitoIdentityProviderOutput] {
		return v.CognitoIdentityProviders
	})
	unwrapped := pulumix.Flatten[[]IdentityPoolCognitoIdentityProvider, pulumix.GArrayOutput[IdentityPoolCognitoIdentityProvider, IdentityPoolCognitoIdentityProviderOutput]](value)
	return pulumix.GArrayOutput[IdentityPoolCognitoIdentityProvider, IdentityPoolCognitoIdentityProviderOutput]{OutputState: unwrapped.OutputState}
}

// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
// backend and the Cognito service to communicate about the developer provider.
func (o IdentityPoolOutput) DeveloperProviderName() pulumix.Output[*string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.Output[*string] { return v.DeveloperProviderName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Cognito Identity Pool name.
func (o IdentityPoolOutput) IdentityPoolName() pulumix.Output[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.Output[string] { return v.IdentityPoolName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of OpendID Connect provider ARNs.
func (o IdentityPoolOutput) OpenidConnectProviderArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.ArrayOutput[string] { return v.OpenidConnectProviderArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
func (o IdentityPoolOutput) SamlProviderArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.ArrayOutput[string] { return v.SamlProviderArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key-Value pairs mapping provider names to provider app IDs.
func (o IdentityPoolOutput) SupportedLoginProviders() pulumix.MapOutput[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.MapOutput[string] { return v.SupportedLoginProviders })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the Identity Pool. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o IdentityPoolOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o IdentityPoolOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[IdentityPool](o, func(v IdentityPool) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(IdentityPoolOutput{})
}
