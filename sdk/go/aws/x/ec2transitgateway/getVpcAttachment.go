// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway VPC Attachment.
func LookupVpcAttachment(ctx *pulumi.Context, args *LookupVpcAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupVpcAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcAttachmentResult
	err := ctx.Invoke("aws:ec2transitgateway/getVpcAttachment:getVpcAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcAttachment.
type LookupVpcAttachmentArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetVpcAttachmentFilter `pulumi:"filters"`
	// Identifier of the EC2 Transit Gateway VPC Attachment.
	Id *string `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcAttachment.
type LookupVpcAttachmentResult struct {
	// Whether Appliance Mode support is enabled.
	ApplianceModeSupport string `pulumi:"applianceModeSupport"`
	// Whether DNS support is enabled.
	DnsSupport string                   `pulumi:"dnsSupport"`
	Filters    []GetVpcAttachmentFilter `pulumi:"filters"`
	// EC2 Transit Gateway VPC Attachment identifier
	Id string `pulumi:"id"`
	// Whether IPv6 support is enabled.
	Ipv6Support string `pulumi:"ipv6Support"`
	// Identifiers of EC2 Subnets.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment
	Tags map[string]string `pulumi:"tags"`
	// EC2 Transit Gateway identifier
	TransitGatewayId string `pulumi:"transitGatewayId"`
	// Identifier of EC2 VPC.
	VpcId string `pulumi:"vpcId"`
	// Identifier of the AWS account that owns the EC2 VPC.
	VpcOwnerId string `pulumi:"vpcOwnerId"`
}

func LookupVpcAttachmentOutput(ctx *pulumi.Context, args LookupVpcAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupVpcAttachmentResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcAttachmentArgs](args.ToOutput(), func(plainArgs *LookupVpcAttachmentArgs) (*LookupVpcAttachmentResult, error) {
		return LookupVpcAttachment(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcAttachmentResultOutput, *LookupVpcAttachmentResult](outputResult)
}

// A collection of arguments for invoking getVpcAttachment.
type LookupVpcAttachmentOutputArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetVpcAttachmentFilterArgs] `pulumi:"filters"`
	// Identifier of the EC2 Transit Gateway VPC Attachment.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway VPC Attachment
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVpcAttachmentOutputArgs) ToOutput() pulumix.Output[*LookupVpcAttachmentArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcAttachmentArgs {
		return &LookupVpcAttachmentArgs{
			Filters: resolvedArgs[0].([]GetVpcAttachmentFilter),
			Id:      resolvedArgs[1].(*string),
			Tags:    resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupVpcAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupVpcAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcAttachmentResult)(nil)).Elem()
}

func (o LookupVpcAttachmentResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcAttachmentResult] {
	return pulumix.Output[*LookupVpcAttachmentResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcAttachmentResultOutput) ApplianceModeSupport() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.ApplianceModeSupport })
}

func (o LookupVpcAttachmentResultOutput) DnsSupport() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.DnsSupport })
}

func (o LookupVpcAttachmentResultOutput) Filters() pulumix.GArrayOutput[GetVpcAttachmentFilter, GetVpcAttachmentFilterOutput] {
	value := pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) []GetVpcAttachmentFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcAttachmentFilter, GetVpcAttachmentFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcAttachmentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.Id })
}

func (o LookupVpcAttachmentResultOutput) Ipv6Support() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.Ipv6Support })
}

func (o LookupVpcAttachmentResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcAttachmentResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcAttachmentResultOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.TransitGatewayId })
}

func (o LookupVpcAttachmentResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.VpcId })
}

func (o LookupVpcAttachmentResultOutput) VpcOwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcAttachmentResult](o, func(v *LookupVpcAttachmentResult) string { return v.VpcOwnerId })
}
