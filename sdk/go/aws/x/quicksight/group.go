// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing QuickSight Group
type Group struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of group
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// A description for the group.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A name for the group.
	GroupName pulumix.Output[string] `pulumi:"groupName"`
	// The namespace. Currently, you should set this to `default`.
	Namespace pulumix.Output[*string] `pulumi:"namespace"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("aws:quicksight/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("aws:quicksight/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// Amazon Resource Name (ARN) of group
	Arn *string `pulumi:"arn"`
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A description for the group.
	Description *string `pulumi:"description"`
	// A name for the group.
	GroupName *string `pulumi:"groupName"`
	// The namespace. Currently, you should set this to `default`.
	Namespace *string `pulumi:"namespace"`
}

type GroupState struct {
	// Amazon Resource Name (ARN) of group
	Arn pulumix.Input[*string]
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Input[*string]
	// A description for the group.
	Description pulumix.Input[*string]
	// A name for the group.
	GroupName pulumix.Input[*string]
	// The namespace. Currently, you should set this to `default`.
	Namespace pulumix.Input[*string]
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A description for the group.
	Description *string `pulumi:"description"`
	// A name for the group.
	GroupName string `pulumi:"groupName"`
	// The namespace. Currently, you should set this to `default`.
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	AwsAccountId pulumix.Input[*string]
	// A description for the group.
	Description pulumix.Input[*string]
	// A name for the group.
	GroupName pulumix.Input[string]
	// The namespace. Currently, you should set this to `default`.
	Namespace pulumix.Input[*string]
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) ToOutput(ctx context.Context) pulumix.Output[Group] {
	return pulumix.Output[Group]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of group
func (o GroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
func (o GroupOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description for the group.
func (o GroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A name for the group.
func (o GroupOutput) GroupName() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.GroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The namespace. Currently, you should set this to `default`.
func (o GroupOutput) Namespace() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.Namespace })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupOutput{})
}
