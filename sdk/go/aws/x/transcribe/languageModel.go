// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transcribe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Transcribe LanguageModel.
//
// > This resource can take a significant amount of time to provision. See Language Model [FAQ](https://aws.amazon.com/transcribe/faqs/) for more details.
type LanguageModel struct {
	pulumi.CustomResourceState

	// ARN of the LanguageModel.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of reference base model.
	BaseModelName pulumix.Output[string] `pulumi:"baseModelName"`
	// The input data config for the LanguageModel. See Input Data Config for more details.
	InputDataConfig pulumix.GPtrOutput[LanguageModelInputDataConfig, LanguageModelInputDataConfigOutput] `pulumi:"inputDataConfig"`
	// The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode pulumix.Output[string] `pulumi:"languageCode"`
	// The model name.
	ModelName pulumix.Output[string] `pulumi:"modelName"`
	// A map of tags to assign to the LanguageModel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewLanguageModel registers a new resource with the given unique name, arguments, and options.
func NewLanguageModel(ctx *pulumi.Context,
	name string, args *LanguageModelArgs, opts ...pulumi.ResourceOption) (*LanguageModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseModelName == nil {
		return nil, errors.New("invalid value for required argument 'BaseModelName'")
	}
	if args.InputDataConfig == nil {
		return nil, errors.New("invalid value for required argument 'InputDataConfig'")
	}
	if args.LanguageCode == nil {
		return nil, errors.New("invalid value for required argument 'LanguageCode'")
	}
	if args.ModelName == nil {
		return nil, errors.New("invalid value for required argument 'ModelName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LanguageModel
	err := ctx.RegisterResource("aws:transcribe/languageModel:LanguageModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLanguageModel gets an existing LanguageModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLanguageModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LanguageModelState, opts ...pulumi.ResourceOption) (*LanguageModel, error) {
	var resource LanguageModel
	err := ctx.ReadResource("aws:transcribe/languageModel:LanguageModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LanguageModel resources.
type languageModelState struct {
	// ARN of the LanguageModel.
	Arn *string `pulumi:"arn"`
	// Name of reference base model.
	BaseModelName *string `pulumi:"baseModelName"`
	// The input data config for the LanguageModel. See Input Data Config for more details.
	InputDataConfig *LanguageModelInputDataConfig `pulumi:"inputDataConfig"`
	// The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode *string `pulumi:"languageCode"`
	// The model name.
	ModelName *string `pulumi:"modelName"`
	// A map of tags to assign to the LanguageModel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LanguageModelState struct {
	// ARN of the LanguageModel.
	Arn pulumix.Input[*string]
	// Name of reference base model.
	BaseModelName pulumix.Input[*string]
	// The input data config for the LanguageModel. See Input Data Config for more details.
	InputDataConfig pulumix.Input[*LanguageModelInputDataConfigArgs]
	// The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode pulumix.Input[*string]
	// The model name.
	ModelName pulumix.Input[*string]
	// A map of tags to assign to the LanguageModel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (LanguageModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*languageModelState)(nil)).Elem()
}

type languageModelArgs struct {
	// Name of reference base model.
	BaseModelName string `pulumi:"baseModelName"`
	// The input data config for the LanguageModel. See Input Data Config for more details.
	InputDataConfig LanguageModelInputDataConfig `pulumi:"inputDataConfig"`
	// The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode string `pulumi:"languageCode"`
	// The model name.
	ModelName string `pulumi:"modelName"`
	// A map of tags to assign to the LanguageModel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LanguageModel resource.
type LanguageModelArgs struct {
	// Name of reference base model.
	BaseModelName pulumix.Input[string]
	// The input data config for the LanguageModel. See Input Data Config for more details.
	InputDataConfig pulumix.Input[*LanguageModelInputDataConfigArgs]
	// The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
	LanguageCode pulumix.Input[string]
	// The model name.
	ModelName pulumix.Input[string]
	// A map of tags to assign to the LanguageModel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LanguageModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*languageModelArgs)(nil)).Elem()
}

type LanguageModelOutput struct{ *pulumi.OutputState }

func (LanguageModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageModel)(nil)).Elem()
}

func (o LanguageModelOutput) ToLanguageModelOutput() LanguageModelOutput {
	return o
}

func (o LanguageModelOutput) ToLanguageModelOutputWithContext(ctx context.Context) LanguageModelOutput {
	return o
}

func (o LanguageModelOutput) ToOutput(ctx context.Context) pulumix.Output[LanguageModel] {
	return pulumix.Output[LanguageModel]{
		OutputState: o.OutputState,
	}
}

// ARN of the LanguageModel.
func (o LanguageModelOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of reference base model.
func (o LanguageModelOutput) BaseModelName() pulumix.Output[string] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.Output[string] { return v.BaseModelName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The input data config for the LanguageModel. See Input Data Config for more details.
func (o LanguageModelOutput) InputDataConfig() pulumix.GPtrOutput[LanguageModelInputDataConfig, LanguageModelInputDataConfigOutput] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.GPtrOutput[LanguageModelInputDataConfig, LanguageModelInputDataConfigOutput] {
		return v.InputDataConfig
	})
	unwrapped := pulumix.Flatten[*LanguageModelInputDataConfig, pulumix.GPtrOutput[LanguageModelInputDataConfig, LanguageModelInputDataConfigOutput]](value)
	return pulumix.GPtrOutput[LanguageModelInputDataConfig, LanguageModelInputDataConfigOutput]{OutputState: unwrapped.OutputState}
}

// The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
func (o LanguageModelOutput) LanguageCode() pulumix.Output[string] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.Output[string] { return v.LanguageCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The model name.
func (o LanguageModelOutput) ModelName() pulumix.Output[string] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.Output[string] { return v.ModelName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the LanguageModel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LanguageModelOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o LanguageModelOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LanguageModel](o, func(v LanguageModel) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(LanguageModelOutput{})
}
