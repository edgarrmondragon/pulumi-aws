// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can be useful for getting back a list of NAT gateway ids to be referenced elsewhere.
func GetNatGateways(ctx *pulumi.Context, args *GetNatGatewaysArgs, opts ...pulumi.InvokeOption) (*GetNatGatewaysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNatGatewaysResult
	err := ctx.Invoke("aws:ec2/getNatGateways:getNatGateways", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatGateways.
type GetNatGatewaysArgs struct {
	// Custom filter block as described below.
	Filters []GetNatGatewaysFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired NAT Gateways.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
	// VPC ID that you want to filter from.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getNatGateways.
type GetNatGatewaysResult struct {
	Filters []GetNatGatewaysFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all the NAT gateway ids found.
	Ids   []string          `pulumi:"ids"`
	Tags  map[string]string `pulumi:"tags"`
	VpcId *string           `pulumi:"vpcId"`
}

func GetNatGatewaysOutput(ctx *pulumi.Context, args GetNatGatewaysOutputArgs, opts ...pulumi.InvokeOption) GetNatGatewaysResultOutput {
	outputResult := pulumix.ApplyErr[*GetNatGatewaysArgs](args.ToOutput(), func(plainArgs *GetNatGatewaysArgs) (*GetNatGatewaysResult, error) {
		return GetNatGateways(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetNatGatewaysResultOutput, *GetNatGatewaysResult](outputResult)
}

// A collection of arguments for invoking getNatGateways.
type GetNatGatewaysOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetNatGatewaysFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired NAT Gateways.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// VPC ID that you want to filter from.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args GetNatGatewaysOutputArgs) ToOutput() pulumix.Output[*GetNatGatewaysArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetNatGatewaysArgs {
		return &GetNatGatewaysArgs{
			Filters: resolvedArgs[0].([]GetNatGatewaysFilter),
			Tags:    resolvedArgs[1].(map[string]string),
			VpcId:   resolvedArgs[2].(*string),
		}
	})
}

type GetNatGatewaysResultOutput struct{ *pulumi.OutputState }

func (GetNatGatewaysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNatGatewaysResult)(nil)).Elem()
}

func (o GetNatGatewaysResultOutput) ToOutput(context.Context) pulumix.Output[*GetNatGatewaysResult] {
	return pulumix.Output[*GetNatGatewaysResult]{
		OutputState: o.OutputState,
	}
}

func (o GetNatGatewaysResultOutput) Filters() pulumix.GArrayOutput[GetNatGatewaysFilter, GetNatGatewaysFilterOutput] {
	value := pulumix.Apply[*GetNatGatewaysResult](o, func(v *GetNatGatewaysResult) []GetNatGatewaysFilter { return v.Filters })
	return pulumix.GArrayOutput[GetNatGatewaysFilter, GetNatGatewaysFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetNatGatewaysResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetNatGatewaysResult](o, func(v *GetNatGatewaysResult) string { return v.Id })
}

func (o GetNatGatewaysResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetNatGatewaysResult](o, func(v *GetNatGatewaysResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetNatGatewaysResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetNatGatewaysResult](o, func(v *GetNatGatewaysResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetNatGatewaysResultOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[*GetNatGatewaysResult](o, func(v *GetNatGatewaysResult) *string { return v.VpcId })
}
