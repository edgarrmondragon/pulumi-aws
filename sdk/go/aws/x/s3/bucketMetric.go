// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a S3 bucket [metrics configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html) resource.
type BucketMetric struct {
	pulumi.CustomResourceState

	// Name of the bucket to put metric configuration.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumix.GPtrOutput[BucketMetricFilter, BucketMetricFilterOutput] `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket. Must be less than or equal to 64 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewBucketMetric registers a new resource with the given unique name, arguments, and options.
func NewBucketMetric(ctx *pulumi.Context,
	name string, args *BucketMetricArgs, opts ...pulumi.ResourceOption) (*BucketMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketMetric
	err := ctx.RegisterResource("aws:s3/bucketMetric:BucketMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketMetric gets an existing BucketMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketMetricState, opts ...pulumi.ResourceOption) (*BucketMetric, error) {
	var resource BucketMetric
	err := ctx.ReadResource("aws:s3/bucketMetric:BucketMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketMetric resources.
type bucketMetricState struct {
	// Name of the bucket to put metric configuration.
	Bucket *string `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter *BucketMetricFilter `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket. Must be less than or equal to 64 characters in length.
	Name *string `pulumi:"name"`
}

type BucketMetricState struct {
	// Name of the bucket to put metric configuration.
	Bucket pulumix.Input[*string]
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumix.Input[*BucketMetricFilterArgs]
	// Unique identifier of the metrics configuration for the bucket. Must be less than or equal to 64 characters in length.
	Name pulumix.Input[*string]
}

func (BucketMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketMetricState)(nil)).Elem()
}

type bucketMetricArgs struct {
	// Name of the bucket to put metric configuration.
	Bucket string `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter *BucketMetricFilter `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket. Must be less than or equal to 64 characters in length.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a BucketMetric resource.
type BucketMetricArgs struct {
	// Name of the bucket to put metric configuration.
	Bucket pulumix.Input[string]
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumix.Input[*BucketMetricFilterArgs]
	// Unique identifier of the metrics configuration for the bucket. Must be less than or equal to 64 characters in length.
	Name pulumix.Input[*string]
}

func (BucketMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketMetricArgs)(nil)).Elem()
}

type BucketMetricOutput struct{ *pulumi.OutputState }

func (BucketMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketMetric)(nil)).Elem()
}

func (o BucketMetricOutput) ToBucketMetricOutput() BucketMetricOutput {
	return o
}

func (o BucketMetricOutput) ToBucketMetricOutputWithContext(ctx context.Context) BucketMetricOutput {
	return o
}

func (o BucketMetricOutput) ToOutput(ctx context.Context) pulumix.Output[BucketMetric] {
	return pulumix.Output[BucketMetric]{
		OutputState: o.OutputState,
	}
}

// Name of the bucket to put metric configuration.
func (o BucketMetricOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketMetric](o, func(v BucketMetric) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
func (o BucketMetricOutput) Filter() pulumix.GPtrOutput[BucketMetricFilter, BucketMetricFilterOutput] {
	value := pulumix.Apply[BucketMetric](o, func(v BucketMetric) pulumix.GPtrOutput[BucketMetricFilter, BucketMetricFilterOutput] { return v.Filter })
	unwrapped := pulumix.Flatten[*BucketMetricFilter, pulumix.GPtrOutput[BucketMetricFilter, BucketMetricFilterOutput]](value)
	return pulumix.GPtrOutput[BucketMetricFilter, BucketMetricFilterOutput]{OutputState: unwrapped.OutputState}
}

// Unique identifier of the metrics configuration for the bucket. Must be less than or equal to 64 characters in length.
func (o BucketMetricOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[BucketMetric](o, func(v BucketMetric) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BucketMetricOutput{})
}
