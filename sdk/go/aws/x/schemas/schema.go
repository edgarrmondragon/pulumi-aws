// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package schemas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EventBridge Schema resource.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
type Schema struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the discoverer.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The schema specification. Must be a valid Open API 3.0 spec.
	Content pulumix.Output[string] `pulumi:"content"`
	// The description of the schema. Maximum of 256 characters.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The last modified date of the schema.
	LastModified pulumix.Output[string] `pulumi:"lastModified"`
	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name of the registry in which this schema belongs.
	RegistryName pulumix.Output[string] `pulumi:"registryName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of the schema. Valid values: `OpenApi3`.
	Type pulumix.Output[string] `pulumi:"type"`
	// The version of the schema.
	Version pulumix.Output[string] `pulumi:"version"`
	// The created date of the version of the schema.
	VersionCreatedDate pulumix.Output[string] `pulumi:"versionCreatedDate"`
}

// NewSchema registers a new resource with the given unique name, arguments, and options.
func NewSchema(ctx *pulumi.Context,
	name string, args *SchemaArgs, opts ...pulumi.ResourceOption) (*Schema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schema
	err := ctx.RegisterResource("aws:schemas/schema:Schema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchema gets an existing Schema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaState, opts ...pulumi.ResourceOption) (*Schema, error) {
	var resource Schema
	err := ctx.ReadResource("aws:schemas/schema:Schema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schema resources.
type schemaState struct {
	// The Amazon Resource Name (ARN) of the discoverer.
	Arn *string `pulumi:"arn"`
	// The schema specification. Must be a valid Open API 3.0 spec.
	Content *string `pulumi:"content"`
	// The description of the schema. Maximum of 256 characters.
	Description *string `pulumi:"description"`
	// The last modified date of the schema.
	LastModified *string `pulumi:"lastModified"`
	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	Name *string `pulumi:"name"`
	// The name of the registry in which this schema belongs.
	RegistryName *string `pulumi:"registryName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of the schema. Valid values: `OpenApi3`.
	Type *string `pulumi:"type"`
	// The version of the schema.
	Version *string `pulumi:"version"`
	// The created date of the version of the schema.
	VersionCreatedDate *string `pulumi:"versionCreatedDate"`
}

type SchemaState struct {
	// The Amazon Resource Name (ARN) of the discoverer.
	Arn pulumix.Input[*string]
	// The schema specification. Must be a valid Open API 3.0 spec.
	Content pulumix.Input[*string]
	// The description of the schema. Maximum of 256 characters.
	Description pulumix.Input[*string]
	// The last modified date of the schema.
	LastModified pulumix.Input[*string]
	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	Name pulumix.Input[*string]
	// The name of the registry in which this schema belongs.
	RegistryName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of the schema. Valid values: `OpenApi3`.
	Type pulumix.Input[*string]
	// The version of the schema.
	Version pulumix.Input[*string]
	// The created date of the version of the schema.
	VersionCreatedDate pulumix.Input[*string]
}

func (SchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaState)(nil)).Elem()
}

type schemaArgs struct {
	// The schema specification. Must be a valid Open API 3.0 spec.
	Content string `pulumi:"content"`
	// The description of the schema. Maximum of 256 characters.
	Description *string `pulumi:"description"`
	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	Name *string `pulumi:"name"`
	// The name of the registry in which this schema belongs.
	RegistryName string `pulumi:"registryName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of the schema. Valid values: `OpenApi3`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Schema resource.
type SchemaArgs struct {
	// The schema specification. Must be a valid Open API 3.0 spec.
	Content pulumix.Input[string]
	// The description of the schema. Maximum of 256 characters.
	Description pulumix.Input[*string]
	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	Name pulumix.Input[*string]
	// The name of the registry in which this schema belongs.
	RegistryName pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of the schema. Valid values: `OpenApi3`.
	Type pulumix.Input[string]
}

func (SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaArgs)(nil)).Elem()
}

type SchemaOutput struct{ *pulumi.OutputState }

func (SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schema)(nil)).Elem()
}

func (o SchemaOutput) ToSchemaOutput() SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return o
}

func (o SchemaOutput) ToOutput(ctx context.Context) pulumix.Output[Schema] {
	return pulumix.Output[Schema]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the discoverer.
func (o SchemaOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The schema specification. Must be a valid Open API 3.0 spec.
func (o SchemaOutput) Content() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Content })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the schema. Maximum of 256 characters.
func (o SchemaOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The last modified date of the schema.
func (o SchemaOutput) LastModified() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.LastModified })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
func (o SchemaOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the registry in which this schema belongs.
func (o SchemaOutput) RegistryName() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.RegistryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SchemaOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SchemaOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of the schema. Valid values: `OpenApi3`.
func (o SchemaOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version of the schema.
func (o SchemaOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The created date of the version of the schema.
func (o SchemaOutput) VersionCreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[Schema](o, func(v Schema) pulumix.Output[string] { return v.VersionCreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SchemaOutput{})
}
