// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a peering connection between an AWS Cloud WAN core network and an AWS Transit Gateway.
type TransitGatewayPeering struct {
	pulumi.CustomResourceState

	// Peering Amazon Resource Name (ARN).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ARN of the core network.
	CoreNetworkArn pulumix.Output[string] `pulumi:"coreNetworkArn"`
	// The ID of a core network.
	CoreNetworkId pulumix.Output[string] `pulumi:"coreNetworkId"`
	// The edge location for the peer.
	EdgeLocation pulumix.Output[string] `pulumi:"edgeLocation"`
	// The ID of the account owner.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// The type of peering. This will be `TRANSIT_GATEWAY`.
	PeeringType pulumix.Output[string] `pulumi:"peeringType"`
	// The resource ARN of the peer.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// Key-value tags for the peering. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ARN of the transit gateway for the peering request.
	TransitGatewayArn pulumix.Output[string] `pulumi:"transitGatewayArn"`
	// The ID of the transit gateway peering attachment.
	TransitGatewayPeeringAttachmentId pulumix.Output[string] `pulumi:"transitGatewayPeeringAttachmentId"`
}

// NewTransitGatewayPeering registers a new resource with the given unique name, arguments, and options.
func NewTransitGatewayPeering(ctx *pulumi.Context,
	name string, args *TransitGatewayPeeringArgs, opts ...pulumi.ResourceOption) (*TransitGatewayPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoreNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'CoreNetworkId'")
	}
	if args.TransitGatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitGatewayPeering
	err := ctx.RegisterResource("aws:networkmanager/transitGatewayPeering:TransitGatewayPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitGatewayPeering gets an existing TransitGatewayPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitGatewayPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitGatewayPeeringState, opts ...pulumi.ResourceOption) (*TransitGatewayPeering, error) {
	var resource TransitGatewayPeering
	err := ctx.ReadResource("aws:networkmanager/transitGatewayPeering:TransitGatewayPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitGatewayPeering resources.
type transitGatewayPeeringState struct {
	// Peering Amazon Resource Name (ARN).
	Arn *string `pulumi:"arn"`
	// The ARN of the core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// The ID of a core network.
	CoreNetworkId *string `pulumi:"coreNetworkId"`
	// The edge location for the peer.
	EdgeLocation *string `pulumi:"edgeLocation"`
	// The ID of the account owner.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The type of peering. This will be `TRANSIT_GATEWAY`.
	PeeringType *string `pulumi:"peeringType"`
	// The resource ARN of the peer.
	ResourceArn *string `pulumi:"resourceArn"`
	// Key-value tags for the peering. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ARN of the transit gateway for the peering request.
	TransitGatewayArn *string `pulumi:"transitGatewayArn"`
	// The ID of the transit gateway peering attachment.
	TransitGatewayPeeringAttachmentId *string `pulumi:"transitGatewayPeeringAttachmentId"`
}

type TransitGatewayPeeringState struct {
	// Peering Amazon Resource Name (ARN).
	Arn pulumix.Input[*string]
	// The ARN of the core network.
	CoreNetworkArn pulumix.Input[*string]
	// The ID of a core network.
	CoreNetworkId pulumix.Input[*string]
	// The edge location for the peer.
	EdgeLocation pulumix.Input[*string]
	// The ID of the account owner.
	OwnerAccountId pulumix.Input[*string]
	// The type of peering. This will be `TRANSIT_GATEWAY`.
	PeeringType pulumix.Input[*string]
	// The resource ARN of the peer.
	ResourceArn pulumix.Input[*string]
	// Key-value tags for the peering. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ARN of the transit gateway for the peering request.
	TransitGatewayArn pulumix.Input[*string]
	// The ID of the transit gateway peering attachment.
	TransitGatewayPeeringAttachmentId pulumix.Input[*string]
}

func (TransitGatewayPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayPeeringState)(nil)).Elem()
}

type transitGatewayPeeringArgs struct {
	// The ID of a core network.
	CoreNetworkId string `pulumi:"coreNetworkId"`
	// Key-value tags for the peering. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ARN of the transit gateway for the peering request.
	TransitGatewayArn string `pulumi:"transitGatewayArn"`
}

// The set of arguments for constructing a TransitGatewayPeering resource.
type TransitGatewayPeeringArgs struct {
	// The ID of a core network.
	CoreNetworkId pulumix.Input[string]
	// Key-value tags for the peering. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ARN of the transit gateway for the peering request.
	TransitGatewayArn pulumix.Input[string]
}

func (TransitGatewayPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayPeeringArgs)(nil)).Elem()
}

type TransitGatewayPeeringOutput struct{ *pulumi.OutputState }

func (TransitGatewayPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayPeering)(nil)).Elem()
}

func (o TransitGatewayPeeringOutput) ToTransitGatewayPeeringOutput() TransitGatewayPeeringOutput {
	return o
}

func (o TransitGatewayPeeringOutput) ToTransitGatewayPeeringOutputWithContext(ctx context.Context) TransitGatewayPeeringOutput {
	return o
}

func (o TransitGatewayPeeringOutput) ToOutput(ctx context.Context) pulumix.Output[TransitGatewayPeering] {
	return pulumix.Output[TransitGatewayPeering]{
		OutputState: o.OutputState,
	}
}

// Peering Amazon Resource Name (ARN).
func (o TransitGatewayPeeringOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the core network.
func (o TransitGatewayPeeringOutput) CoreNetworkArn() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.CoreNetworkArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of a core network.
func (o TransitGatewayPeeringOutput) CoreNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.CoreNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The edge location for the peer.
func (o TransitGatewayPeeringOutput) EdgeLocation() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.EdgeLocation })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the account owner.
func (o TransitGatewayPeeringOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of peering. This will be `TRANSIT_GATEWAY`.
func (o TransitGatewayPeeringOutput) PeeringType() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.PeeringType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The resource ARN of the peer.
func (o TransitGatewayPeeringOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value tags for the peering. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TransitGatewayPeeringOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TransitGatewayPeeringOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of the transit gateway for the peering request.
func (o TransitGatewayPeeringOutput) TransitGatewayArn() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.TransitGatewayArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the transit gateway peering attachment.
func (o TransitGatewayPeeringOutput) TransitGatewayPeeringAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[TransitGatewayPeering](o, func(v TransitGatewayPeering) pulumix.Output[string] { return v.TransitGatewayPeeringAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TransitGatewayPeeringOutput{})
}
