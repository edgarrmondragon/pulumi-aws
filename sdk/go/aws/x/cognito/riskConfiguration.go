// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito Risk Configuration resource.
type RiskConfiguration struct {
	pulumi.CustomResourceState

	// The account takeover risk configuration. See details below.
	AccountTakeoverRiskConfiguration pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationOutput] `pulumi:"accountTakeoverRiskConfiguration"`
	// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
	ClientId pulumix.Output[*string] `pulumi:"clientId"`
	// The compromised credentials risk configuration. See details below.
	CompromisedCredentialsRiskConfiguration pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfiguration, RiskConfigurationCompromisedCredentialsRiskConfigurationOutput] `pulumi:"compromisedCredentialsRiskConfiguration"`
	// The configuration to override the risk decision. See details below.
	RiskExceptionConfiguration pulumix.GPtrOutput[RiskConfigurationRiskExceptionConfiguration, RiskConfigurationRiskExceptionConfigurationOutput] `pulumi:"riskExceptionConfiguration"`
	// The user pool ID.
	UserPoolId pulumix.Output[string] `pulumi:"userPoolId"`
}

// NewRiskConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRiskConfiguration(ctx *pulumi.Context,
	name string, args *RiskConfigurationArgs, opts ...pulumi.ResourceOption) (*RiskConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RiskConfiguration
	err := ctx.RegisterResource("aws:cognito/riskConfiguration:RiskConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRiskConfiguration gets an existing RiskConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRiskConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RiskConfigurationState, opts ...pulumi.ResourceOption) (*RiskConfiguration, error) {
	var resource RiskConfiguration
	err := ctx.ReadResource("aws:cognito/riskConfiguration:RiskConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RiskConfiguration resources.
type riskConfigurationState struct {
	// The account takeover risk configuration. See details below.
	AccountTakeoverRiskConfiguration *RiskConfigurationAccountTakeoverRiskConfiguration `pulumi:"accountTakeoverRiskConfiguration"`
	// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
	ClientId *string `pulumi:"clientId"`
	// The compromised credentials risk configuration. See details below.
	CompromisedCredentialsRiskConfiguration *RiskConfigurationCompromisedCredentialsRiskConfiguration `pulumi:"compromisedCredentialsRiskConfiguration"`
	// The configuration to override the risk decision. See details below.
	RiskExceptionConfiguration *RiskConfigurationRiskExceptionConfiguration `pulumi:"riskExceptionConfiguration"`
	// The user pool ID.
	UserPoolId *string `pulumi:"userPoolId"`
}

type RiskConfigurationState struct {
	// The account takeover risk configuration. See details below.
	AccountTakeoverRiskConfiguration pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationArgs]
	// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
	ClientId pulumix.Input[*string]
	// The compromised credentials risk configuration. See details below.
	CompromisedCredentialsRiskConfiguration pulumix.Input[*RiskConfigurationCompromisedCredentialsRiskConfigurationArgs]
	// The configuration to override the risk decision. See details below.
	RiskExceptionConfiguration pulumix.Input[*RiskConfigurationRiskExceptionConfigurationArgs]
	// The user pool ID.
	UserPoolId pulumix.Input[*string]
}

func (RiskConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*riskConfigurationState)(nil)).Elem()
}

type riskConfigurationArgs struct {
	// The account takeover risk configuration. See details below.
	AccountTakeoverRiskConfiguration *RiskConfigurationAccountTakeoverRiskConfiguration `pulumi:"accountTakeoverRiskConfiguration"`
	// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
	ClientId *string `pulumi:"clientId"`
	// The compromised credentials risk configuration. See details below.
	CompromisedCredentialsRiskConfiguration *RiskConfigurationCompromisedCredentialsRiskConfiguration `pulumi:"compromisedCredentialsRiskConfiguration"`
	// The configuration to override the risk decision. See details below.
	RiskExceptionConfiguration *RiskConfigurationRiskExceptionConfiguration `pulumi:"riskExceptionConfiguration"`
	// The user pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a RiskConfiguration resource.
type RiskConfigurationArgs struct {
	// The account takeover risk configuration. See details below.
	AccountTakeoverRiskConfiguration pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationArgs]
	// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
	ClientId pulumix.Input[*string]
	// The compromised credentials risk configuration. See details below.
	CompromisedCredentialsRiskConfiguration pulumix.Input[*RiskConfigurationCompromisedCredentialsRiskConfigurationArgs]
	// The configuration to override the risk decision. See details below.
	RiskExceptionConfiguration pulumix.Input[*RiskConfigurationRiskExceptionConfigurationArgs]
	// The user pool ID.
	UserPoolId pulumix.Input[string]
}

func (RiskConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*riskConfigurationArgs)(nil)).Elem()
}

type RiskConfigurationOutput struct{ *pulumi.OutputState }

func (RiskConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfiguration)(nil)).Elem()
}

func (o RiskConfigurationOutput) ToRiskConfigurationOutput() RiskConfigurationOutput {
	return o
}

func (o RiskConfigurationOutput) ToRiskConfigurationOutputWithContext(ctx context.Context) RiskConfigurationOutput {
	return o
}

func (o RiskConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfiguration] {
	return pulumix.Output[RiskConfiguration]{
		OutputState: o.OutputState,
	}
}

// The account takeover risk configuration. See details below.
func (o RiskConfigurationOutput) AccountTakeoverRiskConfiguration() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationOutput] {
	value := pulumix.Apply[RiskConfiguration](o, func(v RiskConfiguration) pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationOutput] {
		return v.AccountTakeoverRiskConfiguration
	})
	unwrapped := pulumix.Flatten[*RiskConfigurationAccountTakeoverRiskConfiguration, pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationOutput]](value)
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
func (o RiskConfigurationOutput) ClientId() pulumix.Output[*string] {
	value := pulumix.Apply[RiskConfiguration](o, func(v RiskConfiguration) pulumix.Output[*string] { return v.ClientId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The compromised credentials risk configuration. See details below.
func (o RiskConfigurationOutput) CompromisedCredentialsRiskConfiguration() pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfiguration, RiskConfigurationCompromisedCredentialsRiskConfigurationOutput] {
	value := pulumix.Apply[RiskConfiguration](o, func(v RiskConfiguration) pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfiguration, RiskConfigurationCompromisedCredentialsRiskConfigurationOutput] {
		return v.CompromisedCredentialsRiskConfiguration
	})
	unwrapped := pulumix.Flatten[*RiskConfigurationCompromisedCredentialsRiskConfiguration, pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfiguration, RiskConfigurationCompromisedCredentialsRiskConfigurationOutput]](value)
	return pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfiguration, RiskConfigurationCompromisedCredentialsRiskConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The configuration to override the risk decision. See details below.
func (o RiskConfigurationOutput) RiskExceptionConfiguration() pulumix.GPtrOutput[RiskConfigurationRiskExceptionConfiguration, RiskConfigurationRiskExceptionConfigurationOutput] {
	value := pulumix.Apply[RiskConfiguration](o, func(v RiskConfiguration) pulumix.GPtrOutput[RiskConfigurationRiskExceptionConfiguration, RiskConfigurationRiskExceptionConfigurationOutput] {
		return v.RiskExceptionConfiguration
	})
	unwrapped := pulumix.Flatten[*RiskConfigurationRiskExceptionConfiguration, pulumix.GPtrOutput[RiskConfigurationRiskExceptionConfiguration, RiskConfigurationRiskExceptionConfigurationOutput]](value)
	return pulumix.GPtrOutput[RiskConfigurationRiskExceptionConfiguration, RiskConfigurationRiskExceptionConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The user pool ID.
func (o RiskConfigurationOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[RiskConfiguration](o, func(v RiskConfiguration) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RiskConfigurationOutput{})
}
