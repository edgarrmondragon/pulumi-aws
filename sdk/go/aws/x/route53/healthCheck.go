// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route53 health check.
type HealthCheck struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Health Check.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
	ChildHealthThreshold pulumix.Output[*int] `pulumi:"childHealthThreshold"`
	// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
	ChildHealthchecks pulumix.ArrayOutput[string] `pulumi:"childHealthchecks"`
	// The name of the CloudWatch alarm.
	CloudwatchAlarmName pulumix.Output[*string] `pulumi:"cloudwatchAlarmName"`
	// The CloudWatchRegion that the CloudWatch alarm was created in.
	CloudwatchAlarmRegion pulumix.Output[*string] `pulumi:"cloudwatchAlarmRegion"`
	// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
	// * For health checks that check the health of endpoints, Route5 53 stops submitting requests to your application, server, or other resource.
	// * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
	// * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
	//
	// > **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invertHealthcheck`.
	Disabled pulumix.Output[*bool] `pulumi:"disabled"`
	// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enableSni` defaults to `true`, when `type` is anything else `enableSni` defaults to `false`.
	EnableSni pulumix.Output[bool] `pulumi:"enableSni"`
	// The number of consecutive health checks that an endpoint must pass or fail.
	FailureThreshold pulumix.Output[int] `pulumi:"failureThreshold"`
	// The fully qualified domain name of the endpoint to be checked. If a value is set for `ipAddress`, the value set for `fqdn` will be passed in the `Host` header.
	Fqdn pulumix.Output[*string] `pulumi:"fqdn"`
	// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
	InsufficientDataHealthStatus pulumix.Output[*string] `pulumi:"insufficientDataHealthStatus"`
	// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
	InvertHealthcheck pulumix.Output[*bool] `pulumi:"invertHealthcheck"`
	// The IP address of the endpoint to be checked.
	IpAddress pulumix.Output[*string] `pulumi:"ipAddress"`
	// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
	MeasureLatency pulumix.Output[*bool] `pulumi:"measureLatency"`
	// The port of the endpoint to be checked.
	Port pulumix.Output[*int] `pulumi:"port"`
	// This is a reference name used in Caller Reference
	// (helpful for identifying single healthCheck set amongst others)
	ReferenceName pulumix.Output[*string] `pulumi:"referenceName"`
	// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
	Regions pulumix.ArrayOutput[string] `pulumi:"regions"`
	// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
	RequestInterval pulumix.Output[*int] `pulumi:"requestInterval"`
	// The path that you want Amazon Route 53 to request when performing health checks.
	ResourcePath pulumix.Output[*string] `pulumi:"resourcePath"`
	// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
	RoutingControlArn pulumix.Output[*string] `pulumi:"routingControlArn"`
	// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
	SearchString pulumix.Output[*string] `pulumi:"searchString"`
	// A map of tags to assign to the health check. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewHealthCheck registers a new resource with the given unique name, arguments, and options.
func NewHealthCheck(ctx *pulumi.Context,
	name string, args *HealthCheckArgs, opts ...pulumi.ResourceOption) (*HealthCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HealthCheck
	err := ctx.RegisterResource("aws:route53/healthCheck:HealthCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthCheck gets an existing HealthCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthCheckState, opts ...pulumi.ResourceOption) (*HealthCheck, error) {
	var resource HealthCheck
	err := ctx.ReadResource("aws:route53/healthCheck:HealthCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthCheck resources.
type healthCheckState struct {
	// The Amazon Resource Name (ARN) of the Health Check.
	Arn *string `pulumi:"arn"`
	// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
	ChildHealthThreshold *int `pulumi:"childHealthThreshold"`
	// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
	ChildHealthchecks []string `pulumi:"childHealthchecks"`
	// The name of the CloudWatch alarm.
	CloudwatchAlarmName *string `pulumi:"cloudwatchAlarmName"`
	// The CloudWatchRegion that the CloudWatch alarm was created in.
	CloudwatchAlarmRegion *string `pulumi:"cloudwatchAlarmRegion"`
	// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
	// * For health checks that check the health of endpoints, Route5 53 stops submitting requests to your application, server, or other resource.
	// * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
	// * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
	//
	// > **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invertHealthcheck`.
	Disabled *bool `pulumi:"disabled"`
	// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enableSni` defaults to `true`, when `type` is anything else `enableSni` defaults to `false`.
	EnableSni *bool `pulumi:"enableSni"`
	// The number of consecutive health checks that an endpoint must pass or fail.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The fully qualified domain name of the endpoint to be checked. If a value is set for `ipAddress`, the value set for `fqdn` will be passed in the `Host` header.
	Fqdn *string `pulumi:"fqdn"`
	// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
	InsufficientDataHealthStatus *string `pulumi:"insufficientDataHealthStatus"`
	// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
	InvertHealthcheck *bool `pulumi:"invertHealthcheck"`
	// The IP address of the endpoint to be checked.
	IpAddress *string `pulumi:"ipAddress"`
	// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
	MeasureLatency *bool `pulumi:"measureLatency"`
	// The port of the endpoint to be checked.
	Port *int `pulumi:"port"`
	// This is a reference name used in Caller Reference
	// (helpful for identifying single healthCheck set amongst others)
	ReferenceName *string `pulumi:"referenceName"`
	// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
	Regions []string `pulumi:"regions"`
	// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
	RequestInterval *int `pulumi:"requestInterval"`
	// The path that you want Amazon Route 53 to request when performing health checks.
	ResourcePath *string `pulumi:"resourcePath"`
	// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
	RoutingControlArn *string `pulumi:"routingControlArn"`
	// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
	SearchString *string `pulumi:"searchString"`
	// A map of tags to assign to the health check. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
	Type *string `pulumi:"type"`
}

type HealthCheckState struct {
	// The Amazon Resource Name (ARN) of the Health Check.
	Arn pulumix.Input[*string]
	// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
	ChildHealthThreshold pulumix.Input[*int]
	// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
	ChildHealthchecks pulumix.Input[[]string]
	// The name of the CloudWatch alarm.
	CloudwatchAlarmName pulumix.Input[*string]
	// The CloudWatchRegion that the CloudWatch alarm was created in.
	CloudwatchAlarmRegion pulumix.Input[*string]
	// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
	// * For health checks that check the health of endpoints, Route5 53 stops submitting requests to your application, server, or other resource.
	// * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
	// * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
	//
	// > **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invertHealthcheck`.
	Disabled pulumix.Input[*bool]
	// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enableSni` defaults to `true`, when `type` is anything else `enableSni` defaults to `false`.
	EnableSni pulumix.Input[*bool]
	// The number of consecutive health checks that an endpoint must pass or fail.
	FailureThreshold pulumix.Input[*int]
	// The fully qualified domain name of the endpoint to be checked. If a value is set for `ipAddress`, the value set for `fqdn` will be passed in the `Host` header.
	Fqdn pulumix.Input[*string]
	// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
	InsufficientDataHealthStatus pulumix.Input[*string]
	// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
	InvertHealthcheck pulumix.Input[*bool]
	// The IP address of the endpoint to be checked.
	IpAddress pulumix.Input[*string]
	// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
	MeasureLatency pulumix.Input[*bool]
	// The port of the endpoint to be checked.
	Port pulumix.Input[*int]
	// This is a reference name used in Caller Reference
	// (helpful for identifying single healthCheck set amongst others)
	ReferenceName pulumix.Input[*string]
	// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
	Regions pulumix.Input[[]string]
	// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
	RequestInterval pulumix.Input[*int]
	// The path that you want Amazon Route 53 to request when performing health checks.
	ResourcePath pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
	RoutingControlArn pulumix.Input[*string]
	// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
	SearchString pulumix.Input[*string]
	// A map of tags to assign to the health check. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
	Type pulumix.Input[*string]
}

func (HealthCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckState)(nil)).Elem()
}

type healthCheckArgs struct {
	// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
	ChildHealthThreshold *int `pulumi:"childHealthThreshold"`
	// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
	ChildHealthchecks []string `pulumi:"childHealthchecks"`
	// The name of the CloudWatch alarm.
	CloudwatchAlarmName *string `pulumi:"cloudwatchAlarmName"`
	// The CloudWatchRegion that the CloudWatch alarm was created in.
	CloudwatchAlarmRegion *string `pulumi:"cloudwatchAlarmRegion"`
	// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
	// * For health checks that check the health of endpoints, Route5 53 stops submitting requests to your application, server, or other resource.
	// * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
	// * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
	//
	// > **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invertHealthcheck`.
	Disabled *bool `pulumi:"disabled"`
	// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enableSni` defaults to `true`, when `type` is anything else `enableSni` defaults to `false`.
	EnableSni *bool `pulumi:"enableSni"`
	// The number of consecutive health checks that an endpoint must pass or fail.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The fully qualified domain name of the endpoint to be checked. If a value is set for `ipAddress`, the value set for `fqdn` will be passed in the `Host` header.
	Fqdn *string `pulumi:"fqdn"`
	// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
	InsufficientDataHealthStatus *string `pulumi:"insufficientDataHealthStatus"`
	// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
	InvertHealthcheck *bool `pulumi:"invertHealthcheck"`
	// The IP address of the endpoint to be checked.
	IpAddress *string `pulumi:"ipAddress"`
	// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
	MeasureLatency *bool `pulumi:"measureLatency"`
	// The port of the endpoint to be checked.
	Port *int `pulumi:"port"`
	// This is a reference name used in Caller Reference
	// (helpful for identifying single healthCheck set amongst others)
	ReferenceName *string `pulumi:"referenceName"`
	// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
	Regions []string `pulumi:"regions"`
	// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
	RequestInterval *int `pulumi:"requestInterval"`
	// The path that you want Amazon Route 53 to request when performing health checks.
	ResourcePath *string `pulumi:"resourcePath"`
	// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
	RoutingControlArn *string `pulumi:"routingControlArn"`
	// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
	SearchString *string `pulumi:"searchString"`
	// A map of tags to assign to the health check. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a HealthCheck resource.
type HealthCheckArgs struct {
	// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
	ChildHealthThreshold pulumix.Input[*int]
	// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
	ChildHealthchecks pulumix.Input[[]string]
	// The name of the CloudWatch alarm.
	CloudwatchAlarmName pulumix.Input[*string]
	// The CloudWatchRegion that the CloudWatch alarm was created in.
	CloudwatchAlarmRegion pulumix.Input[*string]
	// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
	// * For health checks that check the health of endpoints, Route5 53 stops submitting requests to your application, server, or other resource.
	// * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
	// * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
	//
	// > **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invertHealthcheck`.
	Disabled pulumix.Input[*bool]
	// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enableSni` defaults to `true`, when `type` is anything else `enableSni` defaults to `false`.
	EnableSni pulumix.Input[*bool]
	// The number of consecutive health checks that an endpoint must pass or fail.
	FailureThreshold pulumix.Input[*int]
	// The fully qualified domain name of the endpoint to be checked. If a value is set for `ipAddress`, the value set for `fqdn` will be passed in the `Host` header.
	Fqdn pulumix.Input[*string]
	// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
	InsufficientDataHealthStatus pulumix.Input[*string]
	// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
	InvertHealthcheck pulumix.Input[*bool]
	// The IP address of the endpoint to be checked.
	IpAddress pulumix.Input[*string]
	// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
	MeasureLatency pulumix.Input[*bool]
	// The port of the endpoint to be checked.
	Port pulumix.Input[*int]
	// This is a reference name used in Caller Reference
	// (helpful for identifying single healthCheck set amongst others)
	ReferenceName pulumix.Input[*string]
	// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
	Regions pulumix.Input[[]string]
	// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
	RequestInterval pulumix.Input[*int]
	// The path that you want Amazon Route 53 to request when performing health checks.
	ResourcePath pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
	RoutingControlArn pulumix.Input[*string]
	// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
	SearchString pulumix.Input[*string]
	// A map of tags to assign to the health check. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
	Type pulumix.Input[string]
}

func (HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckArgs)(nil)).Elem()
}

type HealthCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheck)(nil)).Elem()
}

func (o HealthCheckOutput) ToHealthCheckOutput() HealthCheckOutput {
	return o
}

func (o HealthCheckOutput) ToHealthCheckOutputWithContext(ctx context.Context) HealthCheckOutput {
	return o
}

func (o HealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[HealthCheck] {
	return pulumix.Output[HealthCheck]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Health Check.
func (o HealthCheckOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
func (o HealthCheckOutput) ChildHealthThreshold() pulumix.Output[*int] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*int] { return v.ChildHealthThreshold })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
func (o HealthCheckOutput) ChildHealthchecks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.ArrayOutput[string] { return v.ChildHealthchecks })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the CloudWatch alarm.
func (o HealthCheckOutput) CloudwatchAlarmName() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.CloudwatchAlarmName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The CloudWatchRegion that the CloudWatch alarm was created in.
func (o HealthCheckOutput) CloudwatchAlarmRegion() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.CloudwatchAlarmRegion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
// * For health checks that check the health of endpoints, Route5 53 stops submitting requests to your application, server, or other resource.
// * For calculated health checks, Route 53 stops aggregating the status of the referenced health checks.
// * For health checks that monitor CloudWatch alarms, Route 53 stops monitoring the corresponding CloudWatch metrics.
//
// > **Note:** After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover, Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of `invertHealthcheck`.
func (o HealthCheckOutput) Disabled() pulumix.Output[*bool] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*bool] { return v.Disabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enableSni` defaults to `true`, when `type` is anything else `enableSni` defaults to `false`.
func (o HealthCheckOutput) EnableSni() pulumix.Output[bool] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[bool] { return v.EnableSni })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The number of consecutive health checks that an endpoint must pass or fail.
func (o HealthCheckOutput) FailureThreshold() pulumix.Output[int] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[int] { return v.FailureThreshold })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The fully qualified domain name of the endpoint to be checked. If a value is set for `ipAddress`, the value set for `fqdn` will be passed in the `Host` header.
func (o HealthCheckOutput) Fqdn() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.Fqdn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
func (o HealthCheckOutput) InsufficientDataHealthStatus() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.InsufficientDataHealthStatus })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
func (o HealthCheckOutput) InvertHealthcheck() pulumix.Output[*bool] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*bool] { return v.InvertHealthcheck })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The IP address of the endpoint to be checked.
func (o HealthCheckOutput) IpAddress() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.IpAddress })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
func (o HealthCheckOutput) MeasureLatency() pulumix.Output[*bool] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*bool] { return v.MeasureLatency })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The port of the endpoint to be checked.
func (o HealthCheckOutput) Port() pulumix.Output[*int] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*int] { return v.Port })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// This is a reference name used in Caller Reference
// (helpful for identifying single healthCheck set amongst others)
func (o HealthCheckOutput) ReferenceName() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.ReferenceName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
func (o HealthCheckOutput) Regions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.ArrayOutput[string] { return v.Regions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
func (o HealthCheckOutput) RequestInterval() pulumix.Output[*int] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*int] { return v.RequestInterval })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The path that you want Amazon Route 53 to request when performing health checks.
func (o HealthCheckOutput) ResourcePath() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.ResourcePath })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is `RECOVERY_CONTROL`
func (o HealthCheckOutput) RoutingControlArn() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.RoutingControlArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
func (o HealthCheckOutput) SearchString() pulumix.Output[*string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[*string] { return v.SearchString })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the health check. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HealthCheckOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HealthCheckOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED`, `CLOUDWATCH_METRIC` and `RECOVERY_CONTROL`.
func (o HealthCheckOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[HealthCheck](o, func(v HealthCheck) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(HealthCheckOutput{})
}
