// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup vault lock configuration resource.
type VaultLockConfiguration struct {
	pulumi.CustomResourceState

	// The ARN of the vault.
	BackupVaultArn pulumix.Output[string] `pulumi:"backupVaultArn"`
	// Name of the backup vault to add a lock configuration for.
	BackupVaultName pulumix.Output[string] `pulumi:"backupVaultName"`
	// The number of days before the lock date. If omitted creates a vault lock in `governance` mode, otherwise it will create a vault lock in `compliance` mode.
	ChangeableForDays pulumix.Output[*int] `pulumi:"changeableForDays"`
	// The maximum retention period that the vault retains its recovery points.
	MaxRetentionDays pulumix.Output[*int] `pulumi:"maxRetentionDays"`
	// The minimum retention period that the vault retains its recovery points.
	MinRetentionDays pulumix.Output[*int] `pulumi:"minRetentionDays"`
}

// NewVaultLockConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVaultLockConfiguration(ctx *pulumi.Context,
	name string, args *VaultLockConfigurationArgs, opts ...pulumi.ResourceOption) (*VaultLockConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupVaultName == nil {
		return nil, errors.New("invalid value for required argument 'BackupVaultName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VaultLockConfiguration
	err := ctx.RegisterResource("aws:backup/vaultLockConfiguration:VaultLockConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVaultLockConfiguration gets an existing VaultLockConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVaultLockConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultLockConfigurationState, opts ...pulumi.ResourceOption) (*VaultLockConfiguration, error) {
	var resource VaultLockConfiguration
	err := ctx.ReadResource("aws:backup/vaultLockConfiguration:VaultLockConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VaultLockConfiguration resources.
type vaultLockConfigurationState struct {
	// The ARN of the vault.
	BackupVaultArn *string `pulumi:"backupVaultArn"`
	// Name of the backup vault to add a lock configuration for.
	BackupVaultName *string `pulumi:"backupVaultName"`
	// The number of days before the lock date. If omitted creates a vault lock in `governance` mode, otherwise it will create a vault lock in `compliance` mode.
	ChangeableForDays *int `pulumi:"changeableForDays"`
	// The maximum retention period that the vault retains its recovery points.
	MaxRetentionDays *int `pulumi:"maxRetentionDays"`
	// The minimum retention period that the vault retains its recovery points.
	MinRetentionDays *int `pulumi:"minRetentionDays"`
}

type VaultLockConfigurationState struct {
	// The ARN of the vault.
	BackupVaultArn pulumix.Input[*string]
	// Name of the backup vault to add a lock configuration for.
	BackupVaultName pulumix.Input[*string]
	// The number of days before the lock date. If omitted creates a vault lock in `governance` mode, otherwise it will create a vault lock in `compliance` mode.
	ChangeableForDays pulumix.Input[*int]
	// The maximum retention period that the vault retains its recovery points.
	MaxRetentionDays pulumix.Input[*int]
	// The minimum retention period that the vault retains its recovery points.
	MinRetentionDays pulumix.Input[*int]
}

func (VaultLockConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultLockConfigurationState)(nil)).Elem()
}

type vaultLockConfigurationArgs struct {
	// Name of the backup vault to add a lock configuration for.
	BackupVaultName string `pulumi:"backupVaultName"`
	// The number of days before the lock date. If omitted creates a vault lock in `governance` mode, otherwise it will create a vault lock in `compliance` mode.
	ChangeableForDays *int `pulumi:"changeableForDays"`
	// The maximum retention period that the vault retains its recovery points.
	MaxRetentionDays *int `pulumi:"maxRetentionDays"`
	// The minimum retention period that the vault retains its recovery points.
	MinRetentionDays *int `pulumi:"minRetentionDays"`
}

// The set of arguments for constructing a VaultLockConfiguration resource.
type VaultLockConfigurationArgs struct {
	// Name of the backup vault to add a lock configuration for.
	BackupVaultName pulumix.Input[string]
	// The number of days before the lock date. If omitted creates a vault lock in `governance` mode, otherwise it will create a vault lock in `compliance` mode.
	ChangeableForDays pulumix.Input[*int]
	// The maximum retention period that the vault retains its recovery points.
	MaxRetentionDays pulumix.Input[*int]
	// The minimum retention period that the vault retains its recovery points.
	MinRetentionDays pulumix.Input[*int]
}

func (VaultLockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultLockConfigurationArgs)(nil)).Elem()
}

type VaultLockConfigurationOutput struct{ *pulumi.OutputState }

func (VaultLockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultLockConfiguration)(nil)).Elem()
}

func (o VaultLockConfigurationOutput) ToVaultLockConfigurationOutput() VaultLockConfigurationOutput {
	return o
}

func (o VaultLockConfigurationOutput) ToVaultLockConfigurationOutputWithContext(ctx context.Context) VaultLockConfigurationOutput {
	return o
}

func (o VaultLockConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[VaultLockConfiguration] {
	return pulumix.Output[VaultLockConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ARN of the vault.
func (o VaultLockConfigurationOutput) BackupVaultArn() pulumix.Output[string] {
	value := pulumix.Apply[VaultLockConfiguration](o, func(v VaultLockConfiguration) pulumix.Output[string] { return v.BackupVaultArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the backup vault to add a lock configuration for.
func (o VaultLockConfigurationOutput) BackupVaultName() pulumix.Output[string] {
	value := pulumix.Apply[VaultLockConfiguration](o, func(v VaultLockConfiguration) pulumix.Output[string] { return v.BackupVaultName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of days before the lock date. If omitted creates a vault lock in `governance` mode, otherwise it will create a vault lock in `compliance` mode.
func (o VaultLockConfigurationOutput) ChangeableForDays() pulumix.Output[*int] {
	value := pulumix.Apply[VaultLockConfiguration](o, func(v VaultLockConfiguration) pulumix.Output[*int] { return v.ChangeableForDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The maximum retention period that the vault retains its recovery points.
func (o VaultLockConfigurationOutput) MaxRetentionDays() pulumix.Output[*int] {
	value := pulumix.Apply[VaultLockConfiguration](o, func(v VaultLockConfiguration) pulumix.Output[*int] { return v.MaxRetentionDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The minimum retention period that the vault retains its recovery points.
func (o VaultLockConfigurationOutput) MinRetentionDays() pulumix.Output[*int] {
	value := pulumix.Apply[VaultLockConfiguration](o, func(v VaultLockConfiguration) pulumix.Output[*int] { return v.MinRetentionDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(VaultLockConfigurationOutput{})
}
