// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CloudWatch Observability Access Manager Sink Policy.
type SinkPolicy struct {
	pulumi.CustomResourceState

	// ARN of the Sink.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// ID string that AWS generated as part of the sink ARN.
	SinkId pulumix.Output[string] `pulumi:"sinkId"`
	// ARN of the sink to attach this policy to.
	SinkIdentifier pulumix.Output[string] `pulumi:"sinkIdentifier"`
}

// NewSinkPolicy registers a new resource with the given unique name, arguments, and options.
func NewSinkPolicy(ctx *pulumi.Context,
	name string, args *SinkPolicyArgs, opts ...pulumi.ResourceOption) (*SinkPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.SinkIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'SinkIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SinkPolicy
	err := ctx.RegisterResource("aws:oam/sinkPolicy:SinkPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSinkPolicy gets an existing SinkPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSinkPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SinkPolicyState, opts ...pulumi.ResourceOption) (*SinkPolicy, error) {
	var resource SinkPolicy
	err := ctx.ReadResource("aws:oam/sinkPolicy:SinkPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SinkPolicy resources.
type sinkPolicyState struct {
	// ARN of the Sink.
	Arn *string `pulumi:"arn"`
	// JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
	Policy *string `pulumi:"policy"`
	// ID string that AWS generated as part of the sink ARN.
	SinkId *string `pulumi:"sinkId"`
	// ARN of the sink to attach this policy to.
	SinkIdentifier *string `pulumi:"sinkIdentifier"`
}

type SinkPolicyState struct {
	// ARN of the Sink.
	Arn pulumix.Input[*string]
	// JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
	Policy pulumix.Input[*string]
	// ID string that AWS generated as part of the sink ARN.
	SinkId pulumix.Input[*string]
	// ARN of the sink to attach this policy to.
	SinkIdentifier pulumix.Input[*string]
}

func (SinkPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sinkPolicyState)(nil)).Elem()
}

type sinkPolicyArgs struct {
	// JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
	Policy string `pulumi:"policy"`
	// ARN of the sink to attach this policy to.
	SinkIdentifier string `pulumi:"sinkIdentifier"`
}

// The set of arguments for constructing a SinkPolicy resource.
type SinkPolicyArgs struct {
	// JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
	Policy pulumix.Input[string]
	// ARN of the sink to attach this policy to.
	SinkIdentifier pulumix.Input[string]
}

func (SinkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sinkPolicyArgs)(nil)).Elem()
}

type SinkPolicyOutput struct{ *pulumi.OutputState }

func (SinkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SinkPolicy)(nil)).Elem()
}

func (o SinkPolicyOutput) ToSinkPolicyOutput() SinkPolicyOutput {
	return o
}

func (o SinkPolicyOutput) ToSinkPolicyOutputWithContext(ctx context.Context) SinkPolicyOutput {
	return o
}

func (o SinkPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SinkPolicy] {
	return pulumix.Output[SinkPolicy]{
		OutputState: o.OutputState,
	}
}

// ARN of the Sink.
func (o SinkPolicyOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SinkPolicy](o, func(v SinkPolicy) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.
func (o SinkPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[SinkPolicy](o, func(v SinkPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID string that AWS generated as part of the sink ARN.
func (o SinkPolicyOutput) SinkId() pulumix.Output[string] {
	value := pulumix.Apply[SinkPolicy](o, func(v SinkPolicy) pulumix.Output[string] { return v.SinkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the sink to attach this policy to.
func (o SinkPolicyOutput) SinkIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[SinkPolicy](o, func(v SinkPolicy) pulumix.Output[string] { return v.SinkIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SinkPolicyOutput{})
}
