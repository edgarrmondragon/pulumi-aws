// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a specific EC2 Key Pair.
func LookupKeyPair(ctx *pulumi.Context, args *LookupKeyPairArgs, opts ...pulumi.InvokeOption) (*LookupKeyPairResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyPairResult
	err := ctx.Invoke("aws:ec2/getKeyPair:getKeyPair", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyPair.
type LookupKeyPairArgs struct {
	// Custom filter block as described below.
	Filters []GetKeyPairFilter `pulumi:"filters"`
	// Whether to include the public key material in the response.
	IncludePublicKey *bool `pulumi:"includePublicKey"`
	// Key Pair name.
	KeyName *string `pulumi:"keyName"`
	// Key Pair ID.
	KeyPairId *string `pulumi:"keyPairId"`
	// Any tags assigned to the Key Pair.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getKeyPair.
type LookupKeyPairResult struct {
	// ARN of the Key Pair.
	Arn string `pulumi:"arn"`
	// Timestamp for when the key pair was created in ISO 8601 format.
	CreateTime string             `pulumi:"createTime"`
	Filters    []GetKeyPairFilter `pulumi:"filters"`
	// SHA-1 digest of the DER encoded private key.
	Fingerprint string `pulumi:"fingerprint"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	IncludePublicKey *bool   `pulumi:"includePublicKey"`
	KeyName          *string `pulumi:"keyName"`
	KeyPairId        *string `pulumi:"keyPairId"`
	// Type of key pair.
	KeyType string `pulumi:"keyType"`
	// Public key material.
	PublicKey string `pulumi:"publicKey"`
	// Any tags assigned to the Key Pair.
	Tags map[string]string `pulumi:"tags"`
}

func LookupKeyPairOutput(ctx *pulumi.Context, args LookupKeyPairOutputArgs, opts ...pulumi.InvokeOption) LookupKeyPairResultOutput {
	outputResult := pulumix.ApplyErr[*LookupKeyPairArgs](args.ToOutput(), func(plainArgs *LookupKeyPairArgs) (*LookupKeyPairResult, error) {
		return LookupKeyPair(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupKeyPairResultOutput, *LookupKeyPairResult](outputResult)
}

// A collection of arguments for invoking getKeyPair.
type LookupKeyPairOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetKeyPairFilterArgs] `pulumi:"filters"`
	// Whether to include the public key material in the response.
	IncludePublicKey pulumix.Input[*bool] `pulumi:"includePublicKey"`
	// Key Pair name.
	KeyName pulumix.Input[*string] `pulumi:"keyName"`
	// Key Pair ID.
	KeyPairId pulumix.Input[*string] `pulumi:"keyPairId"`
	// Any tags assigned to the Key Pair.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupKeyPairOutputArgs) ToOutput() pulumix.Output[*LookupKeyPairArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.IncludePublicKey.ToOutput(context.Background()).AsAny(),
		args.KeyName.ToOutput(context.Background()).AsAny(),
		args.KeyPairId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupKeyPairArgs {
		return &LookupKeyPairArgs{
			Filters:          resolvedArgs[0].([]GetKeyPairFilter),
			IncludePublicKey: resolvedArgs[1].(*bool),
			KeyName:          resolvedArgs[2].(*string),
			KeyPairId:        resolvedArgs[3].(*string),
			Tags:             resolvedArgs[4].(map[string]string),
		}
	})
}

type LookupKeyPairResultOutput struct{ *pulumi.OutputState }

func (LookupKeyPairResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPairResult)(nil)).Elem()
}

func (o LookupKeyPairResultOutput) ToOutput(context.Context) pulumix.Output[*LookupKeyPairResult] {
	return pulumix.Output[*LookupKeyPairResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupKeyPairResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) string { return v.Arn })
}

func (o LookupKeyPairResultOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) string { return v.CreateTime })
}

func (o LookupKeyPairResultOutput) Filters() pulumix.GArrayOutput[GetKeyPairFilter, GetKeyPairFilterOutput] {
	value := pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) []GetKeyPairFilter { return v.Filters })
	return pulumix.GArrayOutput[GetKeyPairFilter, GetKeyPairFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupKeyPairResultOutput) Fingerprint() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) string { return v.Fingerprint })
}

func (o LookupKeyPairResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) string { return v.Id })
}

func (o LookupKeyPairResultOutput) IncludePublicKey() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) *bool { return v.IncludePublicKey })
}

func (o LookupKeyPairResultOutput) KeyName() pulumix.Output[*string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) *string { return v.KeyName })
}

func (o LookupKeyPairResultOutput) KeyPairId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) *string { return v.KeyPairId })
}

func (o LookupKeyPairResultOutput) KeyType() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) string { return v.KeyType })
}

func (o LookupKeyPairResultOutput) PublicKey() pulumix.Output[string] {
	return pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) string { return v.PublicKey })
}

func (o LookupKeyPairResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupKeyPairResult](o, func(v *LookupKeyPairResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
