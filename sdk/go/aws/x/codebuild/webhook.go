// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a CodeBuild webhook, which is an endpoint accepted by the CodeBuild service to trigger builds from source code repositories. Depending on the source type of the CodeBuild project, the CodeBuild service may also automatically create and delete the actual repository webhook as well.
type Webhook struct {
	pulumi.CustomResourceState

	// A regular expression used to determine which branches get built. Default is all branches are built. We recommend using `filterGroup` over `branchFilter`.
	BranchFilter pulumix.Output[*string] `pulumi:"branchFilter"`
	// The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
	BuildType pulumix.Output[*string] `pulumi:"buildType"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups pulumix.GArrayOutput[WebhookFilterGroup, WebhookFilterGroupOutput] `pulumi:"filterGroups"`
	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl pulumix.Output[string] `pulumi:"payloadUrl"`
	// The name of the build project.
	ProjectName pulumix.Output[string] `pulumi:"projectName"`
	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret pulumix.Output[string] `pulumi:"secret"`
	// The URL to the webhook.
	Url pulumix.Output[string] `pulumi:"url"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("aws:codebuild/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("aws:codebuild/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. We recommend using `filterGroup` over `branchFilter`.
	BranchFilter *string `pulumi:"branchFilter"`
	// The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
	BuildType *string `pulumi:"buildType"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups []WebhookFilterGroup `pulumi:"filterGroups"`
	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl *string `pulumi:"payloadUrl"`
	// The name of the build project.
	ProjectName *string `pulumi:"projectName"`
	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret *string `pulumi:"secret"`
	// The URL to the webhook.
	Url *string `pulumi:"url"`
}

type WebhookState struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. We recommend using `filterGroup` over `branchFilter`.
	BranchFilter pulumix.Input[*string]
	// The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
	BuildType pulumix.Input[*string]
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups pulumix.Input[[]*WebhookFilterGroupArgs]
	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl pulumix.Input[*string]
	// The name of the build project.
	ProjectName pulumix.Input[*string]
	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret pulumix.Input[*string]
	// The URL to the webhook.
	Url pulumix.Input[*string]
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. We recommend using `filterGroup` over `branchFilter`.
	BranchFilter *string `pulumi:"branchFilter"`
	// The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
	BuildType *string `pulumi:"buildType"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups []WebhookFilterGroup `pulumi:"filterGroups"`
	// The name of the build project.
	ProjectName string `pulumi:"projectName"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. We recommend using `filterGroup` over `branchFilter`.
	BranchFilter pulumix.Input[*string]
	// The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
	BuildType pulumix.Input[*string]
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups pulumix.Input[[]*WebhookFilterGroupArgs]
	// The name of the build project.
	ProjectName pulumix.Input[string]
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

func (o WebhookOutput) ToOutput(ctx context.Context) pulumix.Output[Webhook] {
	return pulumix.Output[Webhook]{
		OutputState: o.OutputState,
	}
}

// A regular expression used to determine which branches get built. Default is all branches are built. We recommend using `filterGroup` over `branchFilter`.
func (o WebhookOutput) BranchFilter() pulumix.Output[*string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[*string] { return v.BranchFilter })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The type of build this webhook will trigger. Valid values for this parameter are: `BUILD`, `BUILD_BATCH`.
func (o WebhookOutput) BuildType() pulumix.Output[*string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[*string] { return v.BuildType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Information about the webhook's trigger. Filter group blocks are documented below.
func (o WebhookOutput) FilterGroups() pulumix.GArrayOutput[WebhookFilterGroup, WebhookFilterGroupOutput] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.GArrayOutput[WebhookFilterGroup, WebhookFilterGroupOutput] {
		return v.FilterGroups
	})
	unwrapped := pulumix.Flatten[[]WebhookFilterGroup, pulumix.GArrayOutput[WebhookFilterGroup, WebhookFilterGroupOutput]](value)
	return pulumix.GArrayOutput[WebhookFilterGroup, WebhookFilterGroupOutput]{OutputState: unwrapped.OutputState}
}

// The CodeBuild endpoint where webhook events are sent.
func (o WebhookOutput) PayloadUrl() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.PayloadUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the build project.
func (o WebhookOutput) ProjectName() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.ProjectName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
func (o WebhookOutput) Secret() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.Secret })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The URL to the webhook.
func (o WebhookOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Webhook](o, func(v Webhook) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WebhookOutput{})
}
