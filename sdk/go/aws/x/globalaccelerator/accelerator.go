// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Global Accelerator accelerator.
type Accelerator struct {
	pulumi.CustomResourceState

	// The attributes of the accelerator. Fields documented below.
	Attributes pulumix.GPtrOutput[AcceleratorAttributes, AcceleratorAttributesOutput] `pulumi:"attributes"`
	// The DNS name of the accelerator. For example, `a5d53ff5ee6bca4ce.awsglobalaccelerator.com`.
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// The Domain Name System (DNS) name that Global Accelerator creates that points to a dual-stack accelerator's four static IP addresses: two IPv4 addresses and two IPv6 addresses. For example, `a1234567890abcdef.dualstack.awsglobalaccelerator.com`.
	DualStackDnsName pulumix.Output[string] `pulumi:"dualStackDnsName"`
	// Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// -  The Global Accelerator Route 53 zone ID that can be used to
	//    route an [Alias Resource Record Set](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html) to the Global Accelerator. This attribute
	//    is simply an alias for the zone ID `Z2BJ6XQ5FK7U4H`.
	HostedZoneId pulumix.Output[string] `pulumi:"hostedZoneId"`
	// The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`.
	IpAddressType pulumix.Output[*string] `pulumi:"ipAddressType"`
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses pulumix.ArrayOutput[string] `pulumi:"ipAddresses"`
	// IP address set associated with the accelerator.
	IpSets pulumix.GArrayOutput[AcceleratorIpSet, AcceleratorIpSetOutput] `pulumi:"ipSets"`
	// The name of the accelerator.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAccelerator registers a new resource with the given unique name, arguments, and options.
func NewAccelerator(ctx *pulumi.Context,
	name string, args *AcceleratorArgs, opts ...pulumi.ResourceOption) (*Accelerator, error) {
	if args == nil {
		args = &AcceleratorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Accelerator
	err := ctx.RegisterResource("aws:globalaccelerator/accelerator:Accelerator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccelerator gets an existing Accelerator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccelerator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AcceleratorState, opts ...pulumi.ResourceOption) (*Accelerator, error) {
	var resource Accelerator
	err := ctx.ReadResource("aws:globalaccelerator/accelerator:Accelerator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Accelerator resources.
type acceleratorState struct {
	// The attributes of the accelerator. Fields documented below.
	Attributes *AcceleratorAttributes `pulumi:"attributes"`
	// The DNS name of the accelerator. For example, `a5d53ff5ee6bca4ce.awsglobalaccelerator.com`.
	DnsName *string `pulumi:"dnsName"`
	// The Domain Name System (DNS) name that Global Accelerator creates that points to a dual-stack accelerator's four static IP addresses: two IPv4 addresses and two IPv6 addresses. For example, `a1234567890abcdef.dualstack.awsglobalaccelerator.com`.
	DualStackDnsName *string `pulumi:"dualStackDnsName"`
	// Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
	Enabled *bool `pulumi:"enabled"`
	// -  The Global Accelerator Route 53 zone ID that can be used to
	//    route an [Alias Resource Record Set](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html) to the Global Accelerator. This attribute
	//    is simply an alias for the zone ID `Z2BJ6XQ5FK7U4H`.
	HostedZoneId *string `pulumi:"hostedZoneId"`
	// The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// IP address set associated with the accelerator.
	IpSets []AcceleratorIpSet `pulumi:"ipSets"`
	// The name of the accelerator.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AcceleratorState struct {
	// The attributes of the accelerator. Fields documented below.
	Attributes pulumix.Input[*AcceleratorAttributesArgs]
	// The DNS name of the accelerator. For example, `a5d53ff5ee6bca4ce.awsglobalaccelerator.com`.
	DnsName pulumix.Input[*string]
	// The Domain Name System (DNS) name that Global Accelerator creates that points to a dual-stack accelerator's four static IP addresses: two IPv4 addresses and two IPv6 addresses. For example, `a1234567890abcdef.dualstack.awsglobalaccelerator.com`.
	DualStackDnsName pulumix.Input[*string]
	// Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
	Enabled pulumix.Input[*bool]
	// -  The Global Accelerator Route 53 zone ID that can be used to
	//    route an [Alias Resource Record Set](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html) to the Global Accelerator. This attribute
	//    is simply an alias for the zone ID `Z2BJ6XQ5FK7U4H`.
	HostedZoneId pulumix.Input[*string]
	// The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`.
	IpAddressType pulumix.Input[*string]
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses pulumix.Input[[]string]
	// IP address set associated with the accelerator.
	IpSets pulumix.Input[[]*AcceleratorIpSetArgs]
	// The name of the accelerator.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (AcceleratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*acceleratorState)(nil)).Elem()
}

type acceleratorArgs struct {
	// The attributes of the accelerator. Fields documented below.
	Attributes *AcceleratorAttributes `pulumi:"attributes"`
	// Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
	Enabled *bool `pulumi:"enabled"`
	// The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The name of the accelerator.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Accelerator resource.
type AcceleratorArgs struct {
	// The attributes of the accelerator. Fields documented below.
	Attributes pulumix.Input[*AcceleratorAttributesArgs]
	// Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
	Enabled pulumix.Input[*bool]
	// The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`.
	IpAddressType pulumix.Input[*string]
	// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
	IpAddresses pulumix.Input[[]string]
	// The name of the accelerator.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (AcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acceleratorArgs)(nil)).Elem()
}

type AcceleratorOutput struct{ *pulumi.OutputState }

func (AcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Accelerator)(nil)).Elem()
}

func (o AcceleratorOutput) ToAcceleratorOutput() AcceleratorOutput {
	return o
}

func (o AcceleratorOutput) ToAcceleratorOutputWithContext(ctx context.Context) AcceleratorOutput {
	return o
}

func (o AcceleratorOutput) ToOutput(ctx context.Context) pulumix.Output[Accelerator] {
	return pulumix.Output[Accelerator]{
		OutputState: o.OutputState,
	}
}

// The attributes of the accelerator. Fields documented below.
func (o AcceleratorOutput) Attributes() pulumix.GPtrOutput[AcceleratorAttributes, AcceleratorAttributesOutput] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.GPtrOutput[AcceleratorAttributes, AcceleratorAttributesOutput] {
		return v.Attributes
	})
	unwrapped := pulumix.Flatten[*AcceleratorAttributes, pulumix.GPtrOutput[AcceleratorAttributes, AcceleratorAttributesOutput]](value)
	return pulumix.GPtrOutput[AcceleratorAttributes, AcceleratorAttributesOutput]{OutputState: unwrapped.OutputState}
}

// The DNS name of the accelerator. For example, `a5d53ff5ee6bca4ce.awsglobalaccelerator.com`.
func (o AcceleratorOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Domain Name System (DNS) name that Global Accelerator creates that points to a dual-stack accelerator's four static IP addresses: two IPv4 addresses and two IPv6 addresses. For example, `a1234567890abcdef.dualstack.awsglobalaccelerator.com`.
func (o AcceleratorOutput) DualStackDnsName() pulumix.Output[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.Output[string] { return v.DualStackDnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`.
func (o AcceleratorOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

//   - The Global Accelerator Route 53 zone ID that can be used to
//     route an [Alias Resource Record Set](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html) to the Global Accelerator. This attribute
//     is simply an alias for the zone ID `Z2BJ6XQ5FK7U4H`.
func (o AcceleratorOutput) HostedZoneId() pulumix.Output[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.Output[string] { return v.HostedZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`.
func (o AcceleratorOutput) IpAddressType() pulumix.Output[*string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.Output[*string] { return v.IpAddressType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses.
func (o AcceleratorOutput) IpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.ArrayOutput[string] { return v.IpAddresses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// IP address set associated with the accelerator.
func (o AcceleratorOutput) IpSets() pulumix.GArrayOutput[AcceleratorIpSet, AcceleratorIpSetOutput] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.GArrayOutput[AcceleratorIpSet, AcceleratorIpSetOutput] { return v.IpSets })
	unwrapped := pulumix.Flatten[[]AcceleratorIpSet, pulumix.GArrayOutput[AcceleratorIpSet, AcceleratorIpSetOutput]](value)
	return pulumix.GArrayOutput[AcceleratorIpSet, AcceleratorIpSetOutput]{OutputState: unwrapped.OutputState}
}

// The name of the accelerator.
func (o AcceleratorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AcceleratorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AcceleratorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Accelerator](o, func(v Accelerator) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AcceleratorOutput{})
}
