// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Glue Workflow resource.
// The workflow graph (DAG) can be build using the `glue.Trigger` resource.
// See the example below for creating a graph with four nodes (two triggers and two jobs).
type Workflow struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of Glue Workflow
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties pulumix.MapOutput[string] `pulumi:"defaultRunProperties"`
	// Description of the workflow.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
	MaxConcurrentRuns pulumix.Output[*int] `pulumi:"maxConcurrentRuns"`
	// The name you assign to this workflow.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		args = &WorkflowArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("aws:glue/workflow:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("aws:glue/workflow:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
	// Amazon Resource Name (ARN) of Glue Workflow
	Arn *string `pulumi:"arn"`
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties map[string]string `pulumi:"defaultRunProperties"`
	// Description of the workflow.
	Description *string `pulumi:"description"`
	// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
	MaxConcurrentRuns *int `pulumi:"maxConcurrentRuns"`
	// The name you assign to this workflow.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type WorkflowState struct {
	// Amazon Resource Name (ARN) of Glue Workflow
	Arn pulumix.Input[*string]
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties pulumix.Input[map[string]string]
	// Description of the workflow.
	Description pulumix.Input[*string]
	// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
	MaxConcurrentRuns pulumix.Input[*int]
	// The name you assign to this workflow.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties map[string]string `pulumi:"defaultRunProperties"`
	// Description of the workflow.
	Description *string `pulumi:"description"`
	// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
	MaxConcurrentRuns *int `pulumi:"maxConcurrentRuns"`
	// The name you assign to this workflow.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
	DefaultRunProperties pulumix.Input[map[string]string]
	// Description of the workflow.
	Description pulumix.Input[*string]
	// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
	MaxConcurrentRuns pulumix.Input[*int]
	// The name you assign to this workflow.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToOutput(ctx context.Context) pulumix.Output[Workflow] {
	return pulumix.Output[Workflow]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of Glue Workflow
func (o WorkflowOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
func (o WorkflowOutput) DefaultRunProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.MapOutput[string] { return v.DefaultRunProperties })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Description of the workflow.
func (o WorkflowOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
func (o WorkflowOutput) MaxConcurrentRuns() pulumix.Output[*int] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.Output[*int] { return v.MaxConcurrentRuns })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name you assign to this workflow.
func (o WorkflowOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WorkflowOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o WorkflowOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workflow](o, func(v Workflow) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(WorkflowOutput{})
}
