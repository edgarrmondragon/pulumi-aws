// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Batch Scheduling Policy data source allows access to details of a specific Scheduling Policy within AWS Batch.
func LookupSchedulingPolicy(ctx *pulumi.Context, args *LookupSchedulingPolicyArgs, opts ...pulumi.InvokeOption) (*LookupSchedulingPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchedulingPolicyResult
	err := ctx.Invoke("aws:batch/getSchedulingPolicy:getSchedulingPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchedulingPolicy.
type LookupSchedulingPolicyArgs struct {
	// ARN of the scheduling policy.
	Arn string `pulumi:"arn"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSchedulingPolicy.
type LookupSchedulingPolicyResult struct {
	Arn               string                               `pulumi:"arn"`
	FairSharePolicies []GetSchedulingPolicyFairSharePolicy `pulumi:"fairSharePolicies"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the scheduling policy.
	Name string `pulumi:"name"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

func LookupSchedulingPolicyOutput(ctx *pulumi.Context, args LookupSchedulingPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupSchedulingPolicyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSchedulingPolicyArgs](args.ToOutput(), func(plainArgs *LookupSchedulingPolicyArgs) (*LookupSchedulingPolicyResult, error) {
		return LookupSchedulingPolicy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSchedulingPolicyResultOutput, *LookupSchedulingPolicyResult](outputResult)
}

// A collection of arguments for invoking getSchedulingPolicy.
type LookupSchedulingPolicyOutputArgs struct {
	// ARN of the scheduling policy.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Key-value map of resource tags
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSchedulingPolicyOutputArgs) ToOutput() pulumix.Output[*LookupSchedulingPolicyArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSchedulingPolicyArgs {
		return &LookupSchedulingPolicyArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupSchedulingPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupSchedulingPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchedulingPolicyResult)(nil)).Elem()
}

func (o LookupSchedulingPolicyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSchedulingPolicyResult] {
	return pulumix.Output[*LookupSchedulingPolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSchedulingPolicyResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSchedulingPolicyResult](o, func(v *LookupSchedulingPolicyResult) string { return v.Arn })
}

func (o LookupSchedulingPolicyResultOutput) FairSharePolicies() pulumix.GArrayOutput[GetSchedulingPolicyFairSharePolicy, GetSchedulingPolicyFairSharePolicyOutput] {
	value := pulumix.Apply[*LookupSchedulingPolicyResult](o, func(v *LookupSchedulingPolicyResult) []GetSchedulingPolicyFairSharePolicy { return v.FairSharePolicies })
	return pulumix.GArrayOutput[GetSchedulingPolicyFairSharePolicy, GetSchedulingPolicyFairSharePolicyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSchedulingPolicyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSchedulingPolicyResult](o, func(v *LookupSchedulingPolicyResult) string { return v.Id })
}

func (o LookupSchedulingPolicyResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSchedulingPolicyResult](o, func(v *LookupSchedulingPolicyResult) string { return v.Name })
}

func (o LookupSchedulingPolicyResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSchedulingPolicyResult](o, func(v *LookupSchedulingPolicyResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
