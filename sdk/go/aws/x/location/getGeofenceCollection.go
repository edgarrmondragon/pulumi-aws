// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Location Service Geofence Collection.
func LookupGeofenceCollection(ctx *pulumi.Context, args *LookupGeofenceCollectionArgs, opts ...pulumi.InvokeOption) (*LookupGeofenceCollectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGeofenceCollectionResult
	err := ctx.Invoke("aws:location/getGeofenceCollection:getGeofenceCollection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGeofenceCollection.
type LookupGeofenceCollectionArgs struct {
	// Name of the geofence collection.
	CollectionName string `pulumi:"collectionName"`
	// Key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Key-value map of resource tags for the geofence collection.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getGeofenceCollection.
type LookupGeofenceCollectionResult struct {
	// ARN for the geofence collection resource. Used when you need to specify a resource across all AWS.
	CollectionArn  string `pulumi:"collectionArn"`
	CollectionName string `pulumi:"collectionName"`
	// Timestamp for when the geofence collection resource was created in ISO 8601 format.
	CreateTime string `pulumi:"createTime"`
	// Optional description of the geofence collection resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Key-value map of resource tags for the geofence collection.
	Tags map[string]string `pulumi:"tags"`
	// Timestamp for when the geofence collection resource was last updated in ISO 8601 format.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupGeofenceCollectionOutput(ctx *pulumi.Context, args LookupGeofenceCollectionOutputArgs, opts ...pulumi.InvokeOption) LookupGeofenceCollectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupGeofenceCollectionArgs](args.ToOutput(), func(plainArgs *LookupGeofenceCollectionArgs) (*LookupGeofenceCollectionResult, error) {
		return LookupGeofenceCollection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupGeofenceCollectionResultOutput, *LookupGeofenceCollectionResult](outputResult)
}

// A collection of arguments for invoking getGeofenceCollection.
type LookupGeofenceCollectionOutputArgs struct {
	// Name of the geofence collection.
	CollectionName pulumix.Input[string] `pulumi:"collectionName"`
	// Key identifier for an AWS KMS customer managed key assigned to the Amazon Location resource.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Key-value map of resource tags for the geofence collection.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupGeofenceCollectionOutputArgs) ToOutput() pulumix.Output[*LookupGeofenceCollectionArgs] {
	allArgs := pulumix.All(
		args.CollectionName.ToOutput(context.Background()).AsAny(),
		args.KmsKeyId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupGeofenceCollectionArgs {
		return &LookupGeofenceCollectionArgs{
			CollectionName: resolvedArgs[0].(string),
			KmsKeyId:       resolvedArgs[1].(*string),
			Tags:           resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupGeofenceCollectionResultOutput struct{ *pulumi.OutputState }

func (LookupGeofenceCollectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGeofenceCollectionResult)(nil)).Elem()
}

func (o LookupGeofenceCollectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupGeofenceCollectionResult] {
	return pulumix.Output[*LookupGeofenceCollectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupGeofenceCollectionResultOutput) CollectionArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.CollectionArn })
}

func (o LookupGeofenceCollectionResultOutput) CollectionName() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.CollectionName })
}

func (o LookupGeofenceCollectionResultOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.CreateTime })
}

func (o LookupGeofenceCollectionResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.Description })
}

func (o LookupGeofenceCollectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.Id })
}

func (o LookupGeofenceCollectionResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.KmsKeyId })
}

func (o LookupGeofenceCollectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGeofenceCollectionResultOutput) UpdateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupGeofenceCollectionResult](o, func(v *LookupGeofenceCollectionResult) string { return v.UpdateTime })
}
