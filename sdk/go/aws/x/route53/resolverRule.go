// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route53 Resolver rule.
type ResolverRule struct {
	pulumi.CustomResourceState

	// The ARN (Amazon Resource Name) for the resolver rule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name pulumix.Output[string] `pulumi:"name"`
	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId pulumix.Output[*string] `pulumi:"resolverEndpointId"`
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType pulumix.Output[string] `pulumi:"ruleType"`
	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus pulumix.Output[string] `pulumi:"shareStatus"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps pulumix.GArrayOutput[ResolverRuleTargetIp, ResolverRuleTargetIpOutput] `pulumi:"targetIps"`
}

// NewResolverRule registers a new resource with the given unique name, arguments, and options.
func NewResolverRule(ctx *pulumi.Context,
	name string, args *ResolverRuleArgs, opts ...pulumi.ResourceOption) (*ResolverRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverRule
	err := ctx.RegisterResource("aws:route53/resolverRule:ResolverRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverRule gets an existing ResolverRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverRuleState, opts ...pulumi.ResourceOption) (*ResolverRule, error) {
	var resource ResolverRule
	err := ctx.ReadResource("aws:route53/resolverRule:ResolverRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverRule resources.
type resolverRuleState struct {
	// The ARN (Amazon Resource Name) for the resolver rule.
	Arn *string `pulumi:"arn"`
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName *string `pulumi:"domainName"`
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name *string `pulumi:"name"`
	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	OwnerId *string `pulumi:"ownerId"`
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType *string `pulumi:"ruleType"`
	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus *string `pulumi:"shareStatus"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps []ResolverRuleTargetIp `pulumi:"targetIps"`
}

type ResolverRuleState struct {
	// The ARN (Amazon Resource Name) for the resolver rule.
	Arn pulumix.Input[*string]
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName pulumix.Input[*string]
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name pulumix.Input[*string]
	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	OwnerId pulumix.Input[*string]
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId pulumix.Input[*string]
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType pulumix.Input[*string]
	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
	ShareStatus pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps pulumix.Input[[]*ResolverRuleTargetIpArgs]
}

func (ResolverRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverRuleState)(nil)).Elem()
}

type resolverRuleArgs struct {
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName string `pulumi:"domainName"`
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name *string `pulumi:"name"`
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType string `pulumi:"ruleType"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps []ResolverRuleTargetIp `pulumi:"targetIps"`
}

// The set of arguments for constructing a ResolverRule resource.
type ResolverRuleArgs struct {
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
	DomainName pulumix.Input[string]
	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	Name pulumix.Input[*string]
	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
	// This argument should only be specified for `FORWARD` type rules.
	ResolverEndpointId pulumix.Input[*string]
	// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
	RuleType pulumix.Input[string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for `FORWARD` type rules.
	TargetIps pulumix.Input[[]*ResolverRuleTargetIpArgs]
}

func (ResolverRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverRuleArgs)(nil)).Elem()
}

type ResolverRuleOutput struct{ *pulumi.OutputState }

func (ResolverRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRule)(nil)).Elem()
}

func (o ResolverRuleOutput) ToResolverRuleOutput() ResolverRuleOutput {
	return o
}

func (o ResolverRuleOutput) ToResolverRuleOutputWithContext(ctx context.Context) ResolverRuleOutput {
	return o
}

func (o ResolverRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverRule] {
	return pulumix.Output[ResolverRule]{
		OutputState: o.OutputState,
	}
}

// The ARN (Amazon Resource Name) for the resolver rule.
func (o ResolverRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// DNS queries for this domain name are forwarded to the IP addresses that are specified using `targetIp`.
func (o ResolverRuleOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
func (o ResolverRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
func (o ResolverRuleOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using `targetIp`.
// This argument should only be specified for `FORWARD` type rules.
func (o ResolverRuleOutput) ResolverEndpointId() pulumix.Output[*string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[*string] { return v.ResolverEndpointId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The rule type. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`.
func (o ResolverRuleOutput) RuleType() pulumix.Output[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[string] { return v.RuleType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
func (o ResolverRuleOutput) ShareStatus() pulumix.Output[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.Output[string] { return v.ShareStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ResolverRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ResolverRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
// This argument should only be specified for `FORWARD` type rules.
func (o ResolverRuleOutput) TargetIps() pulumix.GArrayOutput[ResolverRuleTargetIp, ResolverRuleTargetIpOutput] {
	value := pulumix.Apply[ResolverRule](o, func(v ResolverRule) pulumix.GArrayOutput[ResolverRuleTargetIp, ResolverRuleTargetIpOutput] {
		return v.TargetIps
	})
	unwrapped := pulumix.Flatten[[]ResolverRuleTargetIp, pulumix.GArrayOutput[ResolverRuleTargetIp, ResolverRuleTargetIpOutput]](value)
	return pulumix.GArrayOutput[ResolverRuleTargetIp, ResolverRuleTargetIpOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ResolverRuleOutput{})
}
