// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an Elastic Beanstalk Application.
func LookupApplication(ctx *pulumi.Context, args *LookupApplicationArgs, opts ...pulumi.InvokeOption) (*LookupApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApplicationResult
	err := ctx.Invoke("aws:elasticbeanstalk/getApplication:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApplication.
type LookupApplicationArgs struct {
	// Name of the application
	Name string `pulumi:"name"`
}

// A collection of values returned by getApplication.
type LookupApplicationResult struct {
	AppversionLifecycle GetApplicationAppversionLifecycle `pulumi:"appversionLifecycle"`
	// ARN of the application.
	Arn string `pulumi:"arn"`
	// Short description of the application
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupApplicationOutput(ctx *pulumi.Context, args LookupApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupApplicationArgs](args.ToOutput(), func(plainArgs *LookupApplicationArgs) (*LookupApplicationResult, error) {
		return LookupApplication(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupApplicationResultOutput, *LookupApplicationResult](outputResult)
}

// A collection of arguments for invoking getApplication.
type LookupApplicationOutputArgs struct {
	// Name of the application
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupApplicationOutputArgs) ToOutput() pulumix.Output[*LookupApplicationArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupApplicationArgs {
		return &LookupApplicationArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationResult)(nil)).Elem()
}

func (o LookupApplicationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupApplicationResult] {
	return pulumix.Output[*LookupApplicationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupApplicationResultOutput) AppversionLifecycle() pulumix.GPtrOutput[GetApplicationAppversionLifecycle, GetApplicationAppversionLifecycleOutput] {
	value := pulumix.Apply[*LookupApplicationResult](o, func(v *LookupApplicationResult) GetApplicationAppversionLifecycle { return v.AppversionLifecycle })
	return pulumix.GPtrOutput[GetApplicationAppversionLifecycle, GetApplicationAppversionLifecycleOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupApplicationResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupApplicationResult](o, func(v *LookupApplicationResult) string { return v.Arn })
}

func (o LookupApplicationResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupApplicationResult](o, func(v *LookupApplicationResult) string { return v.Description })
}

func (o LookupApplicationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupApplicationResult](o, func(v *LookupApplicationResult) string { return v.Id })
}

func (o LookupApplicationResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupApplicationResult](o, func(v *LookupApplicationResult) string { return v.Name })
}
