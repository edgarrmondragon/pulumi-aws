// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmincidents

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ReplicationSetRegion struct {
	// The Amazon Resource name (ARN) of the customer managed key. If omitted, AWS manages the AWS KMS keys for you, using an AWS owned key, as indicated by a default value of `DefaultKey`.
	//
	// The following arguments are optional:
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The name of the Region, such as `ap-southeast-2`.
	Name string `pulumi:"name"`
	// The current status of the Region.
	// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
	Status *string `pulumi:"status"`
	// More information about the status of a Region.
	StatusMessage *string `pulumi:"statusMessage"`
}

type ReplicationSetRegionArgs struct {
	// The Amazon Resource name (ARN) of the customer managed key. If omitted, AWS manages the AWS KMS keys for you, using an AWS owned key, as indicated by a default value of `DefaultKey`.
	//
	// The following arguments are optional:
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// The name of the Region, such as `ap-southeast-2`.
	Name pulumix.Input[string] `pulumi:"name"`
	// The current status of the Region.
	// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
	Status pulumix.Input[*string] `pulumi:"status"`
	// More information about the status of a Region.
	StatusMessage pulumix.Input[*string] `pulumi:"statusMessage"`
}

func (ReplicationSetRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationSetRegion)(nil)).Elem()
}

func (i ReplicationSetRegionArgs) ToReplicationSetRegionOutput() ReplicationSetRegionOutput {
	return i.ToReplicationSetRegionOutputWithContext(context.Background())
}

func (i ReplicationSetRegionArgs) ToReplicationSetRegionOutputWithContext(ctx context.Context) ReplicationSetRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationSetRegionOutput)
}

func (i *ReplicationSetRegionArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationSetRegionArgs] {
	return pulumix.Val(i)
}

type ReplicationSetRegionOutput struct{ *pulumi.OutputState }

func (ReplicationSetRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationSetRegion)(nil)).Elem()
}

func (o ReplicationSetRegionOutput) ToReplicationSetRegionOutput() ReplicationSetRegionOutput {
	return o
}

func (o ReplicationSetRegionOutput) ToReplicationSetRegionOutputWithContext(ctx context.Context) ReplicationSetRegionOutput {
	return o
}

func (o ReplicationSetRegionOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationSetRegion] {
	return pulumix.Output[ReplicationSetRegion]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource name (ARN) of the customer managed key. If omitted, AWS manages the AWS KMS keys for you, using an AWS owned key, as indicated by a default value of `DefaultKey`.
//
// The following arguments are optional:
func (o ReplicationSetRegionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationSetRegion](o, func(v ReplicationSetRegion) *string { return v.KmsKeyArn })
}

// The name of the Region, such as `ap-southeast-2`.
func (o ReplicationSetRegionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ReplicationSetRegion](o, func(v ReplicationSetRegion) string { return v.Name })
}

// The current status of the Region.
// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
func (o ReplicationSetRegionOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationSetRegion](o, func(v ReplicationSetRegion) *string { return v.Status })
}

// More information about the status of a Region.
func (o ReplicationSetRegionOutput) StatusMessage() pulumix.Output[*string] {
	return pulumix.Apply[ReplicationSetRegion](o, func(v ReplicationSetRegion) *string { return v.StatusMessage })
}

type ResponsePlanAction struct {
	// The Systems Manager automation document to start as the runbook at the beginning of the incident. The following values are supported:
	SsmAutomations []ResponsePlanActionSsmAutomation `pulumi:"ssmAutomations"`
}

type ResponsePlanActionArgs struct {
	// The Systems Manager automation document to start as the runbook at the beginning of the incident. The following values are supported:
	SsmAutomations pulumix.Input[[]*ResponsePlanActionSsmAutomationArgs] `pulumi:"ssmAutomations"`
}

func (ResponsePlanActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanAction)(nil)).Elem()
}

func (i ResponsePlanActionArgs) ToResponsePlanActionOutput() ResponsePlanActionOutput {
	return i.ToResponsePlanActionOutputWithContext(context.Background())
}

func (i ResponsePlanActionArgs) ToResponsePlanActionOutputWithContext(ctx context.Context) ResponsePlanActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanActionOutput)
}

func (i *ResponsePlanActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanActionArgs] {
	return pulumix.Val(i)
}

type ResponsePlanActionOutput struct{ *pulumi.OutputState }

func (ResponsePlanActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanAction)(nil)).Elem()
}

func (o ResponsePlanActionOutput) ToResponsePlanActionOutput() ResponsePlanActionOutput {
	return o
}

func (o ResponsePlanActionOutput) ToResponsePlanActionOutputWithContext(ctx context.Context) ResponsePlanActionOutput {
	return o
}

func (o ResponsePlanActionOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanAction] {
	return pulumix.Output[ResponsePlanAction]{
		OutputState: o.OutputState,
	}
}

// The Systems Manager automation document to start as the runbook at the beginning of the incident. The following values are supported:
func (o ResponsePlanActionOutput) SsmAutomations() pulumix.GArrayOutput[ResponsePlanActionSsmAutomation, ResponsePlanActionSsmAutomationOutput] {
	value := pulumix.Apply[ResponsePlanAction](o, func(v ResponsePlanAction) []ResponsePlanActionSsmAutomation { return v.SsmAutomations })
	return pulumix.GArrayOutput[ResponsePlanActionSsmAutomation, ResponsePlanActionSsmAutomationOutput]{OutputState: value.OutputState}
}

type ResponsePlanActionSsmAutomation struct {
	// The automation document's name.
	DocumentName string `pulumi:"documentName"`
	// The version of the automation document to use at runtime.
	DocumentVersion *string `pulumi:"documentVersion"`
	// The key-value pair to resolve dynamic parameter values when processing a Systems Manager Automation runbook.
	DynamicParameters map[string]string `pulumi:"dynamicParameters"`
	// The key-value pair parameters to use when the automation document runs. The following values are supported:
	Parameters []ResponsePlanActionSsmAutomationParameter `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the role that the automation document assumes when it runs commands.
	RoleArn string `pulumi:"roleArn"`
	// The account that the automation document runs in. This can be in either the management account or an application account.
	TargetAccount *string `pulumi:"targetAccount"`
}

type ResponsePlanActionSsmAutomationArgs struct {
	// The automation document's name.
	DocumentName pulumix.Input[string] `pulumi:"documentName"`
	// The version of the automation document to use at runtime.
	DocumentVersion pulumix.Input[*string] `pulumi:"documentVersion"`
	// The key-value pair to resolve dynamic parameter values when processing a Systems Manager Automation runbook.
	DynamicParameters pulumix.Input[map[string]string] `pulumi:"dynamicParameters"`
	// The key-value pair parameters to use when the automation document runs. The following values are supported:
	Parameters pulumix.Input[[]*ResponsePlanActionSsmAutomationParameterArgs] `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the role that the automation document assumes when it runs commands.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The account that the automation document runs in. This can be in either the management account or an application account.
	TargetAccount pulumix.Input[*string] `pulumi:"targetAccount"`
}

func (ResponsePlanActionSsmAutomationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanActionSsmAutomation)(nil)).Elem()
}

func (i ResponsePlanActionSsmAutomationArgs) ToResponsePlanActionSsmAutomationOutput() ResponsePlanActionSsmAutomationOutput {
	return i.ToResponsePlanActionSsmAutomationOutputWithContext(context.Background())
}

func (i ResponsePlanActionSsmAutomationArgs) ToResponsePlanActionSsmAutomationOutputWithContext(ctx context.Context) ResponsePlanActionSsmAutomationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanActionSsmAutomationOutput)
}

func (i *ResponsePlanActionSsmAutomationArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanActionSsmAutomationArgs] {
	return pulumix.Val(i)
}

type ResponsePlanActionSsmAutomationOutput struct{ *pulumi.OutputState }

func (ResponsePlanActionSsmAutomationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanActionSsmAutomation)(nil)).Elem()
}

func (o ResponsePlanActionSsmAutomationOutput) ToResponsePlanActionSsmAutomationOutput() ResponsePlanActionSsmAutomationOutput {
	return o
}

func (o ResponsePlanActionSsmAutomationOutput) ToResponsePlanActionSsmAutomationOutputWithContext(ctx context.Context) ResponsePlanActionSsmAutomationOutput {
	return o
}

func (o ResponsePlanActionSsmAutomationOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanActionSsmAutomation] {
	return pulumix.Output[ResponsePlanActionSsmAutomation]{
		OutputState: o.OutputState,
	}
}

// The automation document's name.
func (o ResponsePlanActionSsmAutomationOutput) DocumentName() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanActionSsmAutomation](o, func(v ResponsePlanActionSsmAutomation) string { return v.DocumentName })
}

// The version of the automation document to use at runtime.
func (o ResponsePlanActionSsmAutomationOutput) DocumentVersion() pulumix.Output[*string] {
	return pulumix.Apply[ResponsePlanActionSsmAutomation](o, func(v ResponsePlanActionSsmAutomation) *string { return v.DocumentVersion })
}

// The key-value pair to resolve dynamic parameter values when processing a Systems Manager Automation runbook.
func (o ResponsePlanActionSsmAutomationOutput) DynamicParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResponsePlanActionSsmAutomation](o, func(v ResponsePlanActionSsmAutomation) map[string]string { return v.DynamicParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The key-value pair parameters to use when the automation document runs. The following values are supported:
func (o ResponsePlanActionSsmAutomationOutput) Parameters() pulumix.GArrayOutput[ResponsePlanActionSsmAutomationParameter, ResponsePlanActionSsmAutomationParameterOutput] {
	value := pulumix.Apply[ResponsePlanActionSsmAutomation](o, func(v ResponsePlanActionSsmAutomation) []ResponsePlanActionSsmAutomationParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[ResponsePlanActionSsmAutomationParameter, ResponsePlanActionSsmAutomationParameterOutput]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the role that the automation document assumes when it runs commands.
func (o ResponsePlanActionSsmAutomationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanActionSsmAutomation](o, func(v ResponsePlanActionSsmAutomation) string { return v.RoleArn })
}

// The account that the automation document runs in. This can be in either the management account or an application account.
func (o ResponsePlanActionSsmAutomationOutput) TargetAccount() pulumix.Output[*string] {
	return pulumix.Apply[ResponsePlanActionSsmAutomation](o, func(v ResponsePlanActionSsmAutomation) *string { return v.TargetAccount })
}

type ResponsePlanActionSsmAutomationParameter struct {
	// The name of the response plan.
	Name string `pulumi:"name"`
	// The values for the associated parameter name.
	Values []string `pulumi:"values"`
}

type ResponsePlanActionSsmAutomationParameterArgs struct {
	// The name of the response plan.
	Name pulumix.Input[string] `pulumi:"name"`
	// The values for the associated parameter name.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ResponsePlanActionSsmAutomationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanActionSsmAutomationParameter)(nil)).Elem()
}

func (i ResponsePlanActionSsmAutomationParameterArgs) ToResponsePlanActionSsmAutomationParameterOutput() ResponsePlanActionSsmAutomationParameterOutput {
	return i.ToResponsePlanActionSsmAutomationParameterOutputWithContext(context.Background())
}

func (i ResponsePlanActionSsmAutomationParameterArgs) ToResponsePlanActionSsmAutomationParameterOutputWithContext(ctx context.Context) ResponsePlanActionSsmAutomationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanActionSsmAutomationParameterOutput)
}

func (i *ResponsePlanActionSsmAutomationParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanActionSsmAutomationParameterArgs] {
	return pulumix.Val(i)
}

type ResponsePlanActionSsmAutomationParameterOutput struct{ *pulumi.OutputState }

func (ResponsePlanActionSsmAutomationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanActionSsmAutomationParameter)(nil)).Elem()
}

func (o ResponsePlanActionSsmAutomationParameterOutput) ToResponsePlanActionSsmAutomationParameterOutput() ResponsePlanActionSsmAutomationParameterOutput {
	return o
}

func (o ResponsePlanActionSsmAutomationParameterOutput) ToResponsePlanActionSsmAutomationParameterOutputWithContext(ctx context.Context) ResponsePlanActionSsmAutomationParameterOutput {
	return o
}

func (o ResponsePlanActionSsmAutomationParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanActionSsmAutomationParameter] {
	return pulumix.Output[ResponsePlanActionSsmAutomationParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the response plan.
func (o ResponsePlanActionSsmAutomationParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanActionSsmAutomationParameter](o, func(v ResponsePlanActionSsmAutomationParameter) string { return v.Name })
}

// The values for the associated parameter name.
func (o ResponsePlanActionSsmAutomationParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResponsePlanActionSsmAutomationParameter](o, func(v ResponsePlanActionSsmAutomationParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ResponsePlanIncidentTemplate struct {
	// A string used to stop Incident Manager from creating multiple incident records for the same incident.
	DedupeString *string `pulumi:"dedupeString"`
	// The impact value of a generated incident. The following values are supported:
	Impact int `pulumi:"impact"`
	// The tags assigned to an incident template. When an incident starts, Incident Manager assigns the tags specified in the template to the incident.
	IncidentTags map[string]string `pulumi:"incidentTags"`
	// The Amazon Simple Notification Service (Amazon SNS) targets that this incident notifies when it is updated. The `notificationTarget` configuration block supports the following argument:
	NotificationTargets []ResponsePlanIncidentTemplateNotificationTarget `pulumi:"notificationTargets"`
	// The summary of an incident.
	Summary *string `pulumi:"summary"`
	// The title of a generated incident.
	Title string `pulumi:"title"`
}

type ResponsePlanIncidentTemplateArgs struct {
	// A string used to stop Incident Manager from creating multiple incident records for the same incident.
	DedupeString pulumix.Input[*string] `pulumi:"dedupeString"`
	// The impact value of a generated incident. The following values are supported:
	Impact pulumix.Input[int] `pulumi:"impact"`
	// The tags assigned to an incident template. When an incident starts, Incident Manager assigns the tags specified in the template to the incident.
	IncidentTags pulumix.Input[map[string]string] `pulumi:"incidentTags"`
	// The Amazon Simple Notification Service (Amazon SNS) targets that this incident notifies when it is updated. The `notificationTarget` configuration block supports the following argument:
	NotificationTargets pulumix.Input[[]*ResponsePlanIncidentTemplateNotificationTargetArgs] `pulumi:"notificationTargets"`
	// The summary of an incident.
	Summary pulumix.Input[*string] `pulumi:"summary"`
	// The title of a generated incident.
	Title pulumix.Input[string] `pulumi:"title"`
}

func (ResponsePlanIncidentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIncidentTemplate)(nil)).Elem()
}

func (i ResponsePlanIncidentTemplateArgs) ToResponsePlanIncidentTemplateOutput() ResponsePlanIncidentTemplateOutput {
	return i.ToResponsePlanIncidentTemplateOutputWithContext(context.Background())
}

func (i ResponsePlanIncidentTemplateArgs) ToResponsePlanIncidentTemplateOutputWithContext(ctx context.Context) ResponsePlanIncidentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanIncidentTemplateOutput)
}

func (i *ResponsePlanIncidentTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanIncidentTemplateArgs] {
	return pulumix.Val(i)
}

type ResponsePlanIncidentTemplateOutput struct{ *pulumi.OutputState }

func (ResponsePlanIncidentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIncidentTemplate)(nil)).Elem()
}

func (o ResponsePlanIncidentTemplateOutput) ToResponsePlanIncidentTemplateOutput() ResponsePlanIncidentTemplateOutput {
	return o
}

func (o ResponsePlanIncidentTemplateOutput) ToResponsePlanIncidentTemplateOutputWithContext(ctx context.Context) ResponsePlanIncidentTemplateOutput {
	return o
}

func (o ResponsePlanIncidentTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanIncidentTemplate] {
	return pulumix.Output[ResponsePlanIncidentTemplate]{
		OutputState: o.OutputState,
	}
}

// A string used to stop Incident Manager from creating multiple incident records for the same incident.
func (o ResponsePlanIncidentTemplateOutput) DedupeString() pulumix.Output[*string] {
	return pulumix.Apply[ResponsePlanIncidentTemplate](o, func(v ResponsePlanIncidentTemplate) *string { return v.DedupeString })
}

// The impact value of a generated incident. The following values are supported:
func (o ResponsePlanIncidentTemplateOutput) Impact() pulumix.Output[int] {
	return pulumix.Apply[ResponsePlanIncidentTemplate](o, func(v ResponsePlanIncidentTemplate) int { return v.Impact })
}

// The tags assigned to an incident template. When an incident starts, Incident Manager assigns the tags specified in the template to the incident.
func (o ResponsePlanIncidentTemplateOutput) IncidentTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResponsePlanIncidentTemplate](o, func(v ResponsePlanIncidentTemplate) map[string]string { return v.IncidentTags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The Amazon Simple Notification Service (Amazon SNS) targets that this incident notifies when it is updated. The `notificationTarget` configuration block supports the following argument:
func (o ResponsePlanIncidentTemplateOutput) NotificationTargets() pulumix.GArrayOutput[ResponsePlanIncidentTemplateNotificationTarget, ResponsePlanIncidentTemplateNotificationTargetOutput] {
	value := pulumix.Apply[ResponsePlanIncidentTemplate](o, func(v ResponsePlanIncidentTemplate) []ResponsePlanIncidentTemplateNotificationTarget {
		return v.NotificationTargets
	})
	return pulumix.GArrayOutput[ResponsePlanIncidentTemplateNotificationTarget, ResponsePlanIncidentTemplateNotificationTargetOutput]{OutputState: value.OutputState}
}

// The summary of an incident.
func (o ResponsePlanIncidentTemplateOutput) Summary() pulumix.Output[*string] {
	return pulumix.Apply[ResponsePlanIncidentTemplate](o, func(v ResponsePlanIncidentTemplate) *string { return v.Summary })
}

// The title of a generated incident.
func (o ResponsePlanIncidentTemplateOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanIncidentTemplate](o, func(v ResponsePlanIncidentTemplate) string { return v.Title })
}

type ResponsePlanIncidentTemplateNotificationTarget struct {
	// The ARN of the Amazon SNS topic.
	//
	// The following arguments are optional:
	SnsTopicArn string `pulumi:"snsTopicArn"`
}

type ResponsePlanIncidentTemplateNotificationTargetArgs struct {
	// The ARN of the Amazon SNS topic.
	//
	// The following arguments are optional:
	SnsTopicArn pulumix.Input[string] `pulumi:"snsTopicArn"`
}

func (ResponsePlanIncidentTemplateNotificationTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIncidentTemplateNotificationTarget)(nil)).Elem()
}

func (i ResponsePlanIncidentTemplateNotificationTargetArgs) ToResponsePlanIncidentTemplateNotificationTargetOutput() ResponsePlanIncidentTemplateNotificationTargetOutput {
	return i.ToResponsePlanIncidentTemplateNotificationTargetOutputWithContext(context.Background())
}

func (i ResponsePlanIncidentTemplateNotificationTargetArgs) ToResponsePlanIncidentTemplateNotificationTargetOutputWithContext(ctx context.Context) ResponsePlanIncidentTemplateNotificationTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanIncidentTemplateNotificationTargetOutput)
}

func (i *ResponsePlanIncidentTemplateNotificationTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanIncidentTemplateNotificationTargetArgs] {
	return pulumix.Val(i)
}

type ResponsePlanIncidentTemplateNotificationTargetOutput struct{ *pulumi.OutputState }

func (ResponsePlanIncidentTemplateNotificationTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIncidentTemplateNotificationTarget)(nil)).Elem()
}

func (o ResponsePlanIncidentTemplateNotificationTargetOutput) ToResponsePlanIncidentTemplateNotificationTargetOutput() ResponsePlanIncidentTemplateNotificationTargetOutput {
	return o
}

func (o ResponsePlanIncidentTemplateNotificationTargetOutput) ToResponsePlanIncidentTemplateNotificationTargetOutputWithContext(ctx context.Context) ResponsePlanIncidentTemplateNotificationTargetOutput {
	return o
}

func (o ResponsePlanIncidentTemplateNotificationTargetOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanIncidentTemplateNotificationTarget] {
	return pulumix.Output[ResponsePlanIncidentTemplateNotificationTarget]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SNS topic.
//
// The following arguments are optional:
func (o ResponsePlanIncidentTemplateNotificationTargetOutput) SnsTopicArn() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanIncidentTemplateNotificationTarget](o, func(v ResponsePlanIncidentTemplateNotificationTarget) string { return v.SnsTopicArn })
}

type ResponsePlanIntegration struct {
	// Details about the PagerDuty configuration for a response plan. The following values are supported:
	Pagerduties []ResponsePlanIntegrationPagerduty `pulumi:"pagerduties"`
}

type ResponsePlanIntegrationArgs struct {
	// Details about the PagerDuty configuration for a response plan. The following values are supported:
	Pagerduties pulumix.Input[[]*ResponsePlanIntegrationPagerdutyArgs] `pulumi:"pagerduties"`
}

func (ResponsePlanIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIntegration)(nil)).Elem()
}

func (i ResponsePlanIntegrationArgs) ToResponsePlanIntegrationOutput() ResponsePlanIntegrationOutput {
	return i.ToResponsePlanIntegrationOutputWithContext(context.Background())
}

func (i ResponsePlanIntegrationArgs) ToResponsePlanIntegrationOutputWithContext(ctx context.Context) ResponsePlanIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanIntegrationOutput)
}

func (i *ResponsePlanIntegrationArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanIntegrationArgs] {
	return pulumix.Val(i)
}

type ResponsePlanIntegrationOutput struct{ *pulumi.OutputState }

func (ResponsePlanIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIntegration)(nil)).Elem()
}

func (o ResponsePlanIntegrationOutput) ToResponsePlanIntegrationOutput() ResponsePlanIntegrationOutput {
	return o
}

func (o ResponsePlanIntegrationOutput) ToResponsePlanIntegrationOutputWithContext(ctx context.Context) ResponsePlanIntegrationOutput {
	return o
}

func (o ResponsePlanIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanIntegration] {
	return pulumix.Output[ResponsePlanIntegration]{
		OutputState: o.OutputState,
	}
}

// Details about the PagerDuty configuration for a response plan. The following values are supported:
func (o ResponsePlanIntegrationOutput) Pagerduties() pulumix.GArrayOutput[ResponsePlanIntegrationPagerduty, ResponsePlanIntegrationPagerdutyOutput] {
	value := pulumix.Apply[ResponsePlanIntegration](o, func(v ResponsePlanIntegration) []ResponsePlanIntegrationPagerduty { return v.Pagerduties })
	return pulumix.GArrayOutput[ResponsePlanIntegrationPagerduty, ResponsePlanIntegrationPagerdutyOutput]{OutputState: value.OutputState}
}

type ResponsePlanIntegrationPagerduty struct {
	// The name of the response plan.
	Name string `pulumi:"name"`
	// The ID of the AWS Secrets Manager secret that stores your PagerDuty key &mdash; either a General Access REST API Key or User Token REST API Key &mdash; and other user credentials.
	//
	// For more information about the constraints for each field, see [CreateResponsePlan](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_CreateResponsePlan.html) in the *AWS Systems Manager Incident Manager API Reference*.
	SecretId string `pulumi:"secretId"`
	// The ID of the PagerDuty service that the response plan associated with the incident at launch.
	ServiceId string `pulumi:"serviceId"`
}

type ResponsePlanIntegrationPagerdutyArgs struct {
	// The name of the response plan.
	Name pulumix.Input[string] `pulumi:"name"`
	// The ID of the AWS Secrets Manager secret that stores your PagerDuty key &mdash; either a General Access REST API Key or User Token REST API Key &mdash; and other user credentials.
	//
	// For more information about the constraints for each field, see [CreateResponsePlan](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_CreateResponsePlan.html) in the *AWS Systems Manager Incident Manager API Reference*.
	SecretId pulumix.Input[string] `pulumi:"secretId"`
	// The ID of the PagerDuty service that the response plan associated with the incident at launch.
	ServiceId pulumix.Input[string] `pulumi:"serviceId"`
}

func (ResponsePlanIntegrationPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIntegrationPagerduty)(nil)).Elem()
}

func (i ResponsePlanIntegrationPagerdutyArgs) ToResponsePlanIntegrationPagerdutyOutput() ResponsePlanIntegrationPagerdutyOutput {
	return i.ToResponsePlanIntegrationPagerdutyOutputWithContext(context.Background())
}

func (i ResponsePlanIntegrationPagerdutyArgs) ToResponsePlanIntegrationPagerdutyOutputWithContext(ctx context.Context) ResponsePlanIntegrationPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePlanIntegrationPagerdutyOutput)
}

func (i *ResponsePlanIntegrationPagerdutyArgs) ToOutput(ctx context.Context) pulumix.Output[*ResponsePlanIntegrationPagerdutyArgs] {
	return pulumix.Val(i)
}

type ResponsePlanIntegrationPagerdutyOutput struct{ *pulumi.OutputState }

func (ResponsePlanIntegrationPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsePlanIntegrationPagerduty)(nil)).Elem()
}

func (o ResponsePlanIntegrationPagerdutyOutput) ToResponsePlanIntegrationPagerdutyOutput() ResponsePlanIntegrationPagerdutyOutput {
	return o
}

func (o ResponsePlanIntegrationPagerdutyOutput) ToResponsePlanIntegrationPagerdutyOutputWithContext(ctx context.Context) ResponsePlanIntegrationPagerdutyOutput {
	return o
}

func (o ResponsePlanIntegrationPagerdutyOutput) ToOutput(ctx context.Context) pulumix.Output[ResponsePlanIntegrationPagerduty] {
	return pulumix.Output[ResponsePlanIntegrationPagerduty]{
		OutputState: o.OutputState,
	}
}

// The name of the response plan.
func (o ResponsePlanIntegrationPagerdutyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanIntegrationPagerduty](o, func(v ResponsePlanIntegrationPagerduty) string { return v.Name })
}

// The ID of the AWS Secrets Manager secret that stores your PagerDuty key &mdash; either a General Access REST API Key or User Token REST API Key &mdash; and other user credentials.
//
// For more information about the constraints for each field, see [CreateResponsePlan](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_CreateResponsePlan.html) in the *AWS Systems Manager Incident Manager API Reference*.
func (o ResponsePlanIntegrationPagerdutyOutput) SecretId() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanIntegrationPagerduty](o, func(v ResponsePlanIntegrationPagerduty) string { return v.SecretId })
}

// The ID of the PagerDuty service that the response plan associated with the incident at launch.
func (o ResponsePlanIntegrationPagerdutyOutput) ServiceId() pulumix.Output[string] {
	return pulumix.Apply[ResponsePlanIntegrationPagerduty](o, func(v ResponsePlanIntegrationPagerduty) string { return v.ServiceId })
}

type GetReplicationSetRegion struct {
	// The ARN of the AWS Key Management Service (AWS KMS) encryption key.
	KmsKeyArn string `pulumi:"kmsKeyArn"`
	// The name of the Region.
	Name string `pulumi:"name"`
	// The current status of the Region.
	// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
	Status string `pulumi:"status"`
	// More information about the status of a Region.
	StatusMessage string `pulumi:"statusMessage"`
}

type GetReplicationSetRegionArgs struct {
	// The ARN of the AWS Key Management Service (AWS KMS) encryption key.
	KmsKeyArn pulumix.Input[string] `pulumi:"kmsKeyArn"`
	// The name of the Region.
	Name pulumix.Input[string] `pulumi:"name"`
	// The current status of the Region.
	// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
	Status pulumix.Input[string] `pulumi:"status"`
	// More information about the status of a Region.
	StatusMessage pulumix.Input[string] `pulumi:"statusMessage"`
}

func (GetReplicationSetRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReplicationSetRegion)(nil)).Elem()
}

func (i GetReplicationSetRegionArgs) ToGetReplicationSetRegionOutput() GetReplicationSetRegionOutput {
	return i.ToGetReplicationSetRegionOutputWithContext(context.Background())
}

func (i GetReplicationSetRegionArgs) ToGetReplicationSetRegionOutputWithContext(ctx context.Context) GetReplicationSetRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReplicationSetRegionOutput)
}

func (i *GetReplicationSetRegionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReplicationSetRegionArgs] {
	return pulumix.Val(i)
}

type GetReplicationSetRegionOutput struct{ *pulumi.OutputState }

func (GetReplicationSetRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReplicationSetRegion)(nil)).Elem()
}

func (o GetReplicationSetRegionOutput) ToGetReplicationSetRegionOutput() GetReplicationSetRegionOutput {
	return o
}

func (o GetReplicationSetRegionOutput) ToGetReplicationSetRegionOutputWithContext(ctx context.Context) GetReplicationSetRegionOutput {
	return o
}

func (o GetReplicationSetRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetReplicationSetRegion] {
	return pulumix.Output[GetReplicationSetRegion]{
		OutputState: o.OutputState,
	}
}

// The ARN of the AWS Key Management Service (AWS KMS) encryption key.
func (o GetReplicationSetRegionOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationSetRegion](o, func(v GetReplicationSetRegion) string { return v.KmsKeyArn })
}

// The name of the Region.
func (o GetReplicationSetRegionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationSetRegion](o, func(v GetReplicationSetRegion) string { return v.Name })
}

// The current status of the Region.
// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
func (o GetReplicationSetRegionOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationSetRegion](o, func(v GetReplicationSetRegion) string { return v.Status })
}

// More information about the status of a Region.
func (o GetReplicationSetRegionOutput) StatusMessage() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationSetRegion](o, func(v GetReplicationSetRegion) string { return v.StatusMessage })
}

type GetResponsePlanAction struct {
	// The Systems Manager automation document to start as the runbook at the beginning of the incident. The following values are supported:
	SsmAutomations []GetResponsePlanActionSsmAutomation `pulumi:"ssmAutomations"`
}

type GetResponsePlanActionArgs struct {
	// The Systems Manager automation document to start as the runbook at the beginning of the incident. The following values are supported:
	SsmAutomations pulumix.Input[[]*GetResponsePlanActionSsmAutomationArgs] `pulumi:"ssmAutomations"`
}

func (GetResponsePlanActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanAction)(nil)).Elem()
}

func (i GetResponsePlanActionArgs) ToGetResponsePlanActionOutput() GetResponsePlanActionOutput {
	return i.ToGetResponsePlanActionOutputWithContext(context.Background())
}

func (i GetResponsePlanActionArgs) ToGetResponsePlanActionOutputWithContext(ctx context.Context) GetResponsePlanActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanActionOutput)
}

func (i *GetResponsePlanActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanActionArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanActionOutput struct{ *pulumi.OutputState }

func (GetResponsePlanActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanAction)(nil)).Elem()
}

func (o GetResponsePlanActionOutput) ToGetResponsePlanActionOutput() GetResponsePlanActionOutput {
	return o
}

func (o GetResponsePlanActionOutput) ToGetResponsePlanActionOutputWithContext(ctx context.Context) GetResponsePlanActionOutput {
	return o
}

func (o GetResponsePlanActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanAction] {
	return pulumix.Output[GetResponsePlanAction]{
		OutputState: o.OutputState,
	}
}

// The Systems Manager automation document to start as the runbook at the beginning of the incident. The following values are supported:
func (o GetResponsePlanActionOutput) SsmAutomations() pulumix.GArrayOutput[GetResponsePlanActionSsmAutomation, GetResponsePlanActionSsmAutomationOutput] {
	value := pulumix.Apply[GetResponsePlanAction](o, func(v GetResponsePlanAction) []GetResponsePlanActionSsmAutomation { return v.SsmAutomations })
	return pulumix.GArrayOutput[GetResponsePlanActionSsmAutomation, GetResponsePlanActionSsmAutomationOutput]{OutputState: value.OutputState}
}

type GetResponsePlanActionSsmAutomation struct {
	// The automation document's name.
	DocumentName string `pulumi:"documentName"`
	// The version of the automation document to use at runtime.
	DocumentVersion string `pulumi:"documentVersion"`
	// The key-value pair used to resolve dynamic parameter values when processing a Systems Manager Automation runbook.
	DynamicParameters map[string]string `pulumi:"dynamicParameters"`
	// The key-value pair parameters used when the automation document runs. The following values are supported:
	Parameters []GetResponsePlanActionSsmAutomationParameter `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the role that the automation document assumes when it runs commands.
	RoleArn string `pulumi:"roleArn"`
	// The account that runs the automation document. This can be in either the management account or an application account.
	TargetAccount string `pulumi:"targetAccount"`
}

type GetResponsePlanActionSsmAutomationArgs struct {
	// The automation document's name.
	DocumentName pulumix.Input[string] `pulumi:"documentName"`
	// The version of the automation document to use at runtime.
	DocumentVersion pulumix.Input[string] `pulumi:"documentVersion"`
	// The key-value pair used to resolve dynamic parameter values when processing a Systems Manager Automation runbook.
	DynamicParameters pulumix.Input[map[string]string] `pulumi:"dynamicParameters"`
	// The key-value pair parameters used when the automation document runs. The following values are supported:
	Parameters pulumix.Input[[]*GetResponsePlanActionSsmAutomationParameterArgs] `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the role that the automation document assumes when it runs commands.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The account that runs the automation document. This can be in either the management account or an application account.
	TargetAccount pulumix.Input[string] `pulumi:"targetAccount"`
}

func (GetResponsePlanActionSsmAutomationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanActionSsmAutomation)(nil)).Elem()
}

func (i GetResponsePlanActionSsmAutomationArgs) ToGetResponsePlanActionSsmAutomationOutput() GetResponsePlanActionSsmAutomationOutput {
	return i.ToGetResponsePlanActionSsmAutomationOutputWithContext(context.Background())
}

func (i GetResponsePlanActionSsmAutomationArgs) ToGetResponsePlanActionSsmAutomationOutputWithContext(ctx context.Context) GetResponsePlanActionSsmAutomationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanActionSsmAutomationOutput)
}

func (i *GetResponsePlanActionSsmAutomationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanActionSsmAutomationArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanActionSsmAutomationOutput struct{ *pulumi.OutputState }

func (GetResponsePlanActionSsmAutomationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanActionSsmAutomation)(nil)).Elem()
}

func (o GetResponsePlanActionSsmAutomationOutput) ToGetResponsePlanActionSsmAutomationOutput() GetResponsePlanActionSsmAutomationOutput {
	return o
}

func (o GetResponsePlanActionSsmAutomationOutput) ToGetResponsePlanActionSsmAutomationOutputWithContext(ctx context.Context) GetResponsePlanActionSsmAutomationOutput {
	return o
}

func (o GetResponsePlanActionSsmAutomationOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanActionSsmAutomation] {
	return pulumix.Output[GetResponsePlanActionSsmAutomation]{
		OutputState: o.OutputState,
	}
}

// The automation document's name.
func (o GetResponsePlanActionSsmAutomationOutput) DocumentName() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanActionSsmAutomation](o, func(v GetResponsePlanActionSsmAutomation) string { return v.DocumentName })
}

// The version of the automation document to use at runtime.
func (o GetResponsePlanActionSsmAutomationOutput) DocumentVersion() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanActionSsmAutomation](o, func(v GetResponsePlanActionSsmAutomation) string { return v.DocumentVersion })
}

// The key-value pair used to resolve dynamic parameter values when processing a Systems Manager Automation runbook.
func (o GetResponsePlanActionSsmAutomationOutput) DynamicParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetResponsePlanActionSsmAutomation](o, func(v GetResponsePlanActionSsmAutomation) map[string]string { return v.DynamicParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The key-value pair parameters used when the automation document runs. The following values are supported:
func (o GetResponsePlanActionSsmAutomationOutput) Parameters() pulumix.GArrayOutput[GetResponsePlanActionSsmAutomationParameter, GetResponsePlanActionSsmAutomationParameterOutput] {
	value := pulumix.Apply[GetResponsePlanActionSsmAutomation](o, func(v GetResponsePlanActionSsmAutomation) []GetResponsePlanActionSsmAutomationParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[GetResponsePlanActionSsmAutomationParameter, GetResponsePlanActionSsmAutomationParameterOutput]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the role that the automation document assumes when it runs commands.
func (o GetResponsePlanActionSsmAutomationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanActionSsmAutomation](o, func(v GetResponsePlanActionSsmAutomation) string { return v.RoleArn })
}

// The account that runs the automation document. This can be in either the management account or an application account.
func (o GetResponsePlanActionSsmAutomationOutput) TargetAccount() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanActionSsmAutomation](o, func(v GetResponsePlanActionSsmAutomation) string { return v.TargetAccount })
}

type GetResponsePlanActionSsmAutomationParameter struct {
	// The name of the PagerDuty configuration.
	Name string `pulumi:"name"`
	// The values for the associated parameter name.
	Values []string `pulumi:"values"`
}

type GetResponsePlanActionSsmAutomationParameterArgs struct {
	// The name of the PagerDuty configuration.
	Name pulumix.Input[string] `pulumi:"name"`
	// The values for the associated parameter name.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetResponsePlanActionSsmAutomationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanActionSsmAutomationParameter)(nil)).Elem()
}

func (i GetResponsePlanActionSsmAutomationParameterArgs) ToGetResponsePlanActionSsmAutomationParameterOutput() GetResponsePlanActionSsmAutomationParameterOutput {
	return i.ToGetResponsePlanActionSsmAutomationParameterOutputWithContext(context.Background())
}

func (i GetResponsePlanActionSsmAutomationParameterArgs) ToGetResponsePlanActionSsmAutomationParameterOutputWithContext(ctx context.Context) GetResponsePlanActionSsmAutomationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanActionSsmAutomationParameterOutput)
}

func (i *GetResponsePlanActionSsmAutomationParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanActionSsmAutomationParameterArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanActionSsmAutomationParameterOutput struct{ *pulumi.OutputState }

func (GetResponsePlanActionSsmAutomationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanActionSsmAutomationParameter)(nil)).Elem()
}

func (o GetResponsePlanActionSsmAutomationParameterOutput) ToGetResponsePlanActionSsmAutomationParameterOutput() GetResponsePlanActionSsmAutomationParameterOutput {
	return o
}

func (o GetResponsePlanActionSsmAutomationParameterOutput) ToGetResponsePlanActionSsmAutomationParameterOutputWithContext(ctx context.Context) GetResponsePlanActionSsmAutomationParameterOutput {
	return o
}

func (o GetResponsePlanActionSsmAutomationParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanActionSsmAutomationParameter] {
	return pulumix.Output[GetResponsePlanActionSsmAutomationParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the PagerDuty configuration.
func (o GetResponsePlanActionSsmAutomationParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanActionSsmAutomationParameter](o, func(v GetResponsePlanActionSsmAutomationParameter) string { return v.Name })
}

// The values for the associated parameter name.
func (o GetResponsePlanActionSsmAutomationParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetResponsePlanActionSsmAutomationParameter](o, func(v GetResponsePlanActionSsmAutomationParameter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetResponsePlanIncidentTemplate struct {
	// A string used to stop Incident Manager from creating multiple incident records for the same incident.
	DedupeString string `pulumi:"dedupeString"`
	// The impact value of a generated incident. The following values are supported:
	Impact int `pulumi:"impact"`
	// The tags assigned to an incident template. When an incident starts, Incident Manager assigns the tags specified in the template to the incident.
	IncidentTags map[string]string `pulumi:"incidentTags"`
	// The Amazon Simple Notification Service (Amazon SNS) targets that this incident notifies when it is updated. The `notificationTarget` configuration block supports the following argument:
	NotificationTargets []GetResponsePlanIncidentTemplateNotificationTarget `pulumi:"notificationTargets"`
	// The summary of an incident.
	Summary string `pulumi:"summary"`
	// The title of a generated incident.
	Title string `pulumi:"title"`
}

type GetResponsePlanIncidentTemplateArgs struct {
	// A string used to stop Incident Manager from creating multiple incident records for the same incident.
	DedupeString pulumix.Input[string] `pulumi:"dedupeString"`
	// The impact value of a generated incident. The following values are supported:
	Impact pulumix.Input[int] `pulumi:"impact"`
	// The tags assigned to an incident template. When an incident starts, Incident Manager assigns the tags specified in the template to the incident.
	IncidentTags pulumix.Input[map[string]string] `pulumi:"incidentTags"`
	// The Amazon Simple Notification Service (Amazon SNS) targets that this incident notifies when it is updated. The `notificationTarget` configuration block supports the following argument:
	NotificationTargets pulumix.Input[[]*GetResponsePlanIncidentTemplateNotificationTargetArgs] `pulumi:"notificationTargets"`
	// The summary of an incident.
	Summary pulumix.Input[string] `pulumi:"summary"`
	// The title of a generated incident.
	Title pulumix.Input[string] `pulumi:"title"`
}

func (GetResponsePlanIncidentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIncidentTemplate)(nil)).Elem()
}

func (i GetResponsePlanIncidentTemplateArgs) ToGetResponsePlanIncidentTemplateOutput() GetResponsePlanIncidentTemplateOutput {
	return i.ToGetResponsePlanIncidentTemplateOutputWithContext(context.Background())
}

func (i GetResponsePlanIncidentTemplateArgs) ToGetResponsePlanIncidentTemplateOutputWithContext(ctx context.Context) GetResponsePlanIncidentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanIncidentTemplateOutput)
}

func (i *GetResponsePlanIncidentTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanIncidentTemplateArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanIncidentTemplateOutput struct{ *pulumi.OutputState }

func (GetResponsePlanIncidentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIncidentTemplate)(nil)).Elem()
}

func (o GetResponsePlanIncidentTemplateOutput) ToGetResponsePlanIncidentTemplateOutput() GetResponsePlanIncidentTemplateOutput {
	return o
}

func (o GetResponsePlanIncidentTemplateOutput) ToGetResponsePlanIncidentTemplateOutputWithContext(ctx context.Context) GetResponsePlanIncidentTemplateOutput {
	return o
}

func (o GetResponsePlanIncidentTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanIncidentTemplate] {
	return pulumix.Output[GetResponsePlanIncidentTemplate]{
		OutputState: o.OutputState,
	}
}

// A string used to stop Incident Manager from creating multiple incident records for the same incident.
func (o GetResponsePlanIncidentTemplateOutput) DedupeString() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIncidentTemplate](o, func(v GetResponsePlanIncidentTemplate) string { return v.DedupeString })
}

// The impact value of a generated incident. The following values are supported:
func (o GetResponsePlanIncidentTemplateOutput) Impact() pulumix.Output[int] {
	return pulumix.Apply[GetResponsePlanIncidentTemplate](o, func(v GetResponsePlanIncidentTemplate) int { return v.Impact })
}

// The tags assigned to an incident template. When an incident starts, Incident Manager assigns the tags specified in the template to the incident.
func (o GetResponsePlanIncidentTemplateOutput) IncidentTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetResponsePlanIncidentTemplate](o, func(v GetResponsePlanIncidentTemplate) map[string]string { return v.IncidentTags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The Amazon Simple Notification Service (Amazon SNS) targets that this incident notifies when it is updated. The `notificationTarget` configuration block supports the following argument:
func (o GetResponsePlanIncidentTemplateOutput) NotificationTargets() pulumix.GArrayOutput[GetResponsePlanIncidentTemplateNotificationTarget, GetResponsePlanIncidentTemplateNotificationTargetOutput] {
	value := pulumix.Apply[GetResponsePlanIncidentTemplate](o, func(v GetResponsePlanIncidentTemplate) []GetResponsePlanIncidentTemplateNotificationTarget {
		return v.NotificationTargets
	})
	return pulumix.GArrayOutput[GetResponsePlanIncidentTemplateNotificationTarget, GetResponsePlanIncidentTemplateNotificationTargetOutput]{OutputState: value.OutputState}
}

// The summary of an incident.
func (o GetResponsePlanIncidentTemplateOutput) Summary() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIncidentTemplate](o, func(v GetResponsePlanIncidentTemplate) string { return v.Summary })
}

// The title of a generated incident.
func (o GetResponsePlanIncidentTemplateOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIncidentTemplate](o, func(v GetResponsePlanIncidentTemplate) string { return v.Title })
}

type GetResponsePlanIncidentTemplateNotificationTarget struct {
	// The ARN of the Amazon SNS topic.
	SnsTopicArn string `pulumi:"snsTopicArn"`
}

type GetResponsePlanIncidentTemplateNotificationTargetArgs struct {
	// The ARN of the Amazon SNS topic.
	SnsTopicArn pulumix.Input[string] `pulumi:"snsTopicArn"`
}

func (GetResponsePlanIncidentTemplateNotificationTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIncidentTemplateNotificationTarget)(nil)).Elem()
}

func (i GetResponsePlanIncidentTemplateNotificationTargetArgs) ToGetResponsePlanIncidentTemplateNotificationTargetOutput() GetResponsePlanIncidentTemplateNotificationTargetOutput {
	return i.ToGetResponsePlanIncidentTemplateNotificationTargetOutputWithContext(context.Background())
}

func (i GetResponsePlanIncidentTemplateNotificationTargetArgs) ToGetResponsePlanIncidentTemplateNotificationTargetOutputWithContext(ctx context.Context) GetResponsePlanIncidentTemplateNotificationTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanIncidentTemplateNotificationTargetOutput)
}

func (i *GetResponsePlanIncidentTemplateNotificationTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanIncidentTemplateNotificationTargetArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanIncidentTemplateNotificationTargetOutput struct{ *pulumi.OutputState }

func (GetResponsePlanIncidentTemplateNotificationTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIncidentTemplateNotificationTarget)(nil)).Elem()
}

func (o GetResponsePlanIncidentTemplateNotificationTargetOutput) ToGetResponsePlanIncidentTemplateNotificationTargetOutput() GetResponsePlanIncidentTemplateNotificationTargetOutput {
	return o
}

func (o GetResponsePlanIncidentTemplateNotificationTargetOutput) ToGetResponsePlanIncidentTemplateNotificationTargetOutputWithContext(ctx context.Context) GetResponsePlanIncidentTemplateNotificationTargetOutput {
	return o
}

func (o GetResponsePlanIncidentTemplateNotificationTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanIncidentTemplateNotificationTarget] {
	return pulumix.Output[GetResponsePlanIncidentTemplateNotificationTarget]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon SNS topic.
func (o GetResponsePlanIncidentTemplateNotificationTargetOutput) SnsTopicArn() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIncidentTemplateNotificationTarget](o, func(v GetResponsePlanIncidentTemplateNotificationTarget) string { return v.SnsTopicArn })
}

type GetResponsePlanIntegration struct {
	// Details about the PagerDuty configuration for a response plan. The following values are supported:
	Pagerduties []GetResponsePlanIntegrationPagerduty `pulumi:"pagerduties"`
}

type GetResponsePlanIntegrationArgs struct {
	// Details about the PagerDuty configuration for a response plan. The following values are supported:
	Pagerduties pulumix.Input[[]*GetResponsePlanIntegrationPagerdutyArgs] `pulumi:"pagerduties"`
}

func (GetResponsePlanIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIntegration)(nil)).Elem()
}

func (i GetResponsePlanIntegrationArgs) ToGetResponsePlanIntegrationOutput() GetResponsePlanIntegrationOutput {
	return i.ToGetResponsePlanIntegrationOutputWithContext(context.Background())
}

func (i GetResponsePlanIntegrationArgs) ToGetResponsePlanIntegrationOutputWithContext(ctx context.Context) GetResponsePlanIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanIntegrationOutput)
}

func (i *GetResponsePlanIntegrationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanIntegrationArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanIntegrationOutput struct{ *pulumi.OutputState }

func (GetResponsePlanIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIntegration)(nil)).Elem()
}

func (o GetResponsePlanIntegrationOutput) ToGetResponsePlanIntegrationOutput() GetResponsePlanIntegrationOutput {
	return o
}

func (o GetResponsePlanIntegrationOutput) ToGetResponsePlanIntegrationOutputWithContext(ctx context.Context) GetResponsePlanIntegrationOutput {
	return o
}

func (o GetResponsePlanIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanIntegration] {
	return pulumix.Output[GetResponsePlanIntegration]{
		OutputState: o.OutputState,
	}
}

// Details about the PagerDuty configuration for a response plan. The following values are supported:
func (o GetResponsePlanIntegrationOutput) Pagerduties() pulumix.GArrayOutput[GetResponsePlanIntegrationPagerduty, GetResponsePlanIntegrationPagerdutyOutput] {
	value := pulumix.Apply[GetResponsePlanIntegration](o, func(v GetResponsePlanIntegration) []GetResponsePlanIntegrationPagerduty { return v.Pagerduties })
	return pulumix.GArrayOutput[GetResponsePlanIntegrationPagerduty, GetResponsePlanIntegrationPagerdutyOutput]{OutputState: value.OutputState}
}

type GetResponsePlanIntegrationPagerduty struct {
	// The name of the PagerDuty configuration.
	Name string `pulumi:"name"`
	// The ID of the AWS Secrets Manager secret that stores your PagerDuty key &mdash; either a General Access REST API Key or User Token REST API Key &mdash; and other user credentials.
	SecretId string `pulumi:"secretId"`
	// The ID of the PagerDuty service that the response plan associates with an incident when it launches.
	ServiceId string `pulumi:"serviceId"`
}

type GetResponsePlanIntegrationPagerdutyArgs struct {
	// The name of the PagerDuty configuration.
	Name pulumix.Input[string] `pulumi:"name"`
	// The ID of the AWS Secrets Manager secret that stores your PagerDuty key &mdash; either a General Access REST API Key or User Token REST API Key &mdash; and other user credentials.
	SecretId pulumix.Input[string] `pulumi:"secretId"`
	// The ID of the PagerDuty service that the response plan associates with an incident when it launches.
	ServiceId pulumix.Input[string] `pulumi:"serviceId"`
}

func (GetResponsePlanIntegrationPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIntegrationPagerduty)(nil)).Elem()
}

func (i GetResponsePlanIntegrationPagerdutyArgs) ToGetResponsePlanIntegrationPagerdutyOutput() GetResponsePlanIntegrationPagerdutyOutput {
	return i.ToGetResponsePlanIntegrationPagerdutyOutputWithContext(context.Background())
}

func (i GetResponsePlanIntegrationPagerdutyArgs) ToGetResponsePlanIntegrationPagerdutyOutputWithContext(ctx context.Context) GetResponsePlanIntegrationPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResponsePlanIntegrationPagerdutyOutput)
}

func (i *GetResponsePlanIntegrationPagerdutyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResponsePlanIntegrationPagerdutyArgs] {
	return pulumix.Val(i)
}

type GetResponsePlanIntegrationPagerdutyOutput struct{ *pulumi.OutputState }

func (GetResponsePlanIntegrationPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResponsePlanIntegrationPagerduty)(nil)).Elem()
}

func (o GetResponsePlanIntegrationPagerdutyOutput) ToGetResponsePlanIntegrationPagerdutyOutput() GetResponsePlanIntegrationPagerdutyOutput {
	return o
}

func (o GetResponsePlanIntegrationPagerdutyOutput) ToGetResponsePlanIntegrationPagerdutyOutputWithContext(ctx context.Context) GetResponsePlanIntegrationPagerdutyOutput {
	return o
}

func (o GetResponsePlanIntegrationPagerdutyOutput) ToOutput(ctx context.Context) pulumix.Output[GetResponsePlanIntegrationPagerduty] {
	return pulumix.Output[GetResponsePlanIntegrationPagerduty]{
		OutputState: o.OutputState,
	}
}

// The name of the PagerDuty configuration.
func (o GetResponsePlanIntegrationPagerdutyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIntegrationPagerduty](o, func(v GetResponsePlanIntegrationPagerduty) string { return v.Name })
}

// The ID of the AWS Secrets Manager secret that stores your PagerDuty key &mdash; either a General Access REST API Key or User Token REST API Key &mdash; and other user credentials.
func (o GetResponsePlanIntegrationPagerdutyOutput) SecretId() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIntegrationPagerduty](o, func(v GetResponsePlanIntegrationPagerduty) string { return v.SecretId })
}

// The ID of the PagerDuty service that the response plan associates with an incident when it launches.
func (o GetResponsePlanIntegrationPagerdutyOutput) ServiceId() pulumix.Output[string] {
	return pulumix.Apply[GetResponsePlanIntegrationPagerduty](o, func(v GetResponsePlanIntegrationPagerduty) string { return v.ServiceId })
}

func init() {
	pulumi.RegisterOutputType(ReplicationSetRegionOutput{})
	pulumi.RegisterOutputType(ResponsePlanActionOutput{})
	pulumi.RegisterOutputType(ResponsePlanActionSsmAutomationOutput{})
	pulumi.RegisterOutputType(ResponsePlanActionSsmAutomationParameterOutput{})
	pulumi.RegisterOutputType(ResponsePlanIncidentTemplateOutput{})
	pulumi.RegisterOutputType(ResponsePlanIncidentTemplateNotificationTargetOutput{})
	pulumi.RegisterOutputType(ResponsePlanIntegrationOutput{})
	pulumi.RegisterOutputType(ResponsePlanIntegrationPagerdutyOutput{})
	pulumi.RegisterOutputType(GetReplicationSetRegionOutput{})
	pulumi.RegisterOutputType(GetResponsePlanActionOutput{})
	pulumi.RegisterOutputType(GetResponsePlanActionSsmAutomationOutput{})
	pulumi.RegisterOutputType(GetResponsePlanActionSsmAutomationParameterOutput{})
	pulumi.RegisterOutputType(GetResponsePlanIncidentTemplateOutput{})
	pulumi.RegisterOutputType(GetResponsePlanIncidentTemplateNotificationTargetOutput{})
	pulumi.RegisterOutputType(GetResponsePlanIntegrationOutput{})
	pulumi.RegisterOutputType(GetResponsePlanIntegrationPagerdutyOutput{})
}
