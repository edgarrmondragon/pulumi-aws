// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AutoScaling Group with Notification support, via SNS Topics. Each of
// the `notifications` map to a [Notification Configuration](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_DescribeNotificationConfigurations.html) inside Amazon Web
// Services, and are applied to each AutoScaling Group you supply.
type Notification struct {
	pulumi.CustomResourceState

	// List of AutoScaling Group Names
	GroupNames pulumix.ArrayOutput[string] `pulumi:"groupNames"`
	// List of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html)
	Notifications pulumix.ArrayOutput[string] `pulumi:"notifications"`
	// Topic ARN for notifications to be sent through
	TopicArn pulumix.Output[string] `pulumi:"topicArn"`
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOption) (*Notification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupNames == nil {
		return nil, errors.New("invalid value for required argument 'GroupNames'")
	}
	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.TopicArn == nil {
		return nil, errors.New("invalid value for required argument 'TopicArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Notification
	err := ctx.RegisterResource("aws:autoscaling/notification:Notification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationState, opts ...pulumi.ResourceOption) (*Notification, error) {
	var resource Notification
	err := ctx.ReadResource("aws:autoscaling/notification:Notification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notification resources.
type notificationState struct {
	// List of AutoScaling Group Names
	GroupNames []string `pulumi:"groupNames"`
	// List of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html)
	Notifications []string `pulumi:"notifications"`
	// Topic ARN for notifications to be sent through
	TopicArn *string `pulumi:"topicArn"`
}

type NotificationState struct {
	// List of AutoScaling Group Names
	GroupNames pulumix.Input[[]string]
	// List of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html)
	Notifications pulumix.Input[[]string]
	// Topic ARN for notifications to be sent through
	TopicArn pulumix.Input[*string]
}

func (NotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationState)(nil)).Elem()
}

type notificationArgs struct {
	// List of AutoScaling Group Names
	GroupNames []string `pulumi:"groupNames"`
	// List of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html)
	Notifications []string `pulumi:"notifications"`
	// Topic ARN for notifications to be sent through
	TopicArn string `pulumi:"topicArn"`
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	// List of AutoScaling Group Names
	GroupNames pulumix.Input[[]string]
	// List of Notification Types that trigger
	// notifications. Acceptable values are documented [in the AWS documentation here](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html)
	Notifications pulumix.Input[[]string]
	// Topic ARN for notifications to be sent through
	TopicArn pulumix.Input[string]
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationArgs)(nil)).Elem()
}

type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

func (o NotificationOutput) ToOutput(ctx context.Context) pulumix.Output[Notification] {
	return pulumix.Output[Notification]{
		OutputState: o.OutputState,
	}
}

// List of AutoScaling Group Names
func (o NotificationOutput) GroupNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Notification](o, func(v Notification) pulumix.ArrayOutput[string] { return v.GroupNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of Notification Types that trigger
// notifications. Acceptable values are documented [in the AWS documentation here](https://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_NotificationConfiguration.html)
func (o NotificationOutput) Notifications() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Notification](o, func(v Notification) pulumix.ArrayOutput[string] { return v.Notifications })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Topic ARN for notifications to be sent through
func (o NotificationOutput) TopicArn() pulumix.Output[string] {
	value := pulumix.Apply[Notification](o, func(v Notification) pulumix.Output[string] { return v.TopicArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NotificationOutput{})
}
