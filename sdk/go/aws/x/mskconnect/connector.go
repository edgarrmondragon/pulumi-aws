// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mskconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon MSK Connect Connector resource.
type Connector struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the custom plugin.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Information about the capacity allocated to the connector. See below.
	Capacity pulumix.GPtrOutput[ConnectorCapacity, ConnectorCapacityOutput] `pulumi:"capacity"`
	// A map of keys to values that represent the configuration for the connector.
	ConnectorConfiguration pulumix.MapOutput[string] `pulumi:"connectorConfiguration"`
	// A summary description of the connector.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Specifies which Apache Kafka cluster to connect to. See below.
	KafkaCluster pulumix.GPtrOutput[ConnectorKafkaCluster, ConnectorKafkaClusterOutput] `pulumi:"kafkaCluster"`
	// Details of the client authentication used by the Apache Kafka cluster. See below.
	KafkaClusterClientAuthentication pulumix.GPtrOutput[ConnectorKafkaClusterClientAuthentication, ConnectorKafkaClusterClientAuthenticationOutput] `pulumi:"kafkaClusterClientAuthentication"`
	// Details of encryption in transit to the Apache Kafka cluster. See below.
	KafkaClusterEncryptionInTransit pulumix.GPtrOutput[ConnectorKafkaClusterEncryptionInTransit, ConnectorKafkaClusterEncryptionInTransitOutput] `pulumi:"kafkaClusterEncryptionInTransit"`
	// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
	KafkaconnectVersion pulumix.Output[string] `pulumi:"kafkaconnectVersion"`
	// Details about log delivery. See below.
	LogDelivery pulumix.GPtrOutput[ConnectorLogDelivery, ConnectorLogDeliveryOutput] `pulumi:"logDelivery"`
	// The name of the connector.
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies which plugins to use for the connector. See below.
	Plugins pulumix.GArrayOutput[ConnectorPlugin, ConnectorPluginOutput] `pulumi:"plugins"`
	// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
	ServiceExecutionRoleArn pulumix.Output[string] `pulumi:"serviceExecutionRoleArn"`
	// The current version of the connector.
	Version pulumix.Output[string] `pulumi:"version"`
	// Specifies which worker configuration to use with the connector. See below.
	WorkerConfiguration pulumix.GPtrOutput[ConnectorWorkerConfiguration, ConnectorWorkerConfigurationOutput] `pulumi:"workerConfiguration"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.ConnectorConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorConfiguration'")
	}
	if args.KafkaCluster == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCluster'")
	}
	if args.KafkaClusterClientAuthentication == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusterClientAuthentication'")
	}
	if args.KafkaClusterEncryptionInTransit == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusterEncryptionInTransit'")
	}
	if args.KafkaconnectVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaconnectVersion'")
	}
	if args.Plugins == nil {
		return nil, errors.New("invalid value for required argument 'Plugins'")
	}
	if args.ServiceExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ServiceExecutionRoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("aws:mskconnect/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("aws:mskconnect/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	// The Amazon Resource Name (ARN) of the custom plugin.
	Arn *string `pulumi:"arn"`
	// Information about the capacity allocated to the connector. See below.
	Capacity *ConnectorCapacity `pulumi:"capacity"`
	// A map of keys to values that represent the configuration for the connector.
	ConnectorConfiguration map[string]string `pulumi:"connectorConfiguration"`
	// A summary description of the connector.
	Description *string `pulumi:"description"`
	// Specifies which Apache Kafka cluster to connect to. See below.
	KafkaCluster *ConnectorKafkaCluster `pulumi:"kafkaCluster"`
	// Details of the client authentication used by the Apache Kafka cluster. See below.
	KafkaClusterClientAuthentication *ConnectorKafkaClusterClientAuthentication `pulumi:"kafkaClusterClientAuthentication"`
	// Details of encryption in transit to the Apache Kafka cluster. See below.
	KafkaClusterEncryptionInTransit *ConnectorKafkaClusterEncryptionInTransit `pulumi:"kafkaClusterEncryptionInTransit"`
	// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
	KafkaconnectVersion *string `pulumi:"kafkaconnectVersion"`
	// Details about log delivery. See below.
	LogDelivery *ConnectorLogDelivery `pulumi:"logDelivery"`
	// The name of the connector.
	Name *string `pulumi:"name"`
	// Specifies which plugins to use for the connector. See below.
	Plugins []ConnectorPlugin `pulumi:"plugins"`
	// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
	ServiceExecutionRoleArn *string `pulumi:"serviceExecutionRoleArn"`
	// The current version of the connector.
	Version *string `pulumi:"version"`
	// Specifies which worker configuration to use with the connector. See below.
	WorkerConfiguration *ConnectorWorkerConfiguration `pulumi:"workerConfiguration"`
}

type ConnectorState struct {
	// The Amazon Resource Name (ARN) of the custom plugin.
	Arn pulumix.Input[*string]
	// Information about the capacity allocated to the connector. See below.
	Capacity pulumix.Input[*ConnectorCapacityArgs]
	// A map of keys to values that represent the configuration for the connector.
	ConnectorConfiguration pulumix.Input[map[string]string]
	// A summary description of the connector.
	Description pulumix.Input[*string]
	// Specifies which Apache Kafka cluster to connect to. See below.
	KafkaCluster pulumix.Input[*ConnectorKafkaClusterArgs]
	// Details of the client authentication used by the Apache Kafka cluster. See below.
	KafkaClusterClientAuthentication pulumix.Input[*ConnectorKafkaClusterClientAuthenticationArgs]
	// Details of encryption in transit to the Apache Kafka cluster. See below.
	KafkaClusterEncryptionInTransit pulumix.Input[*ConnectorKafkaClusterEncryptionInTransitArgs]
	// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
	KafkaconnectVersion pulumix.Input[*string]
	// Details about log delivery. See below.
	LogDelivery pulumix.Input[*ConnectorLogDeliveryArgs]
	// The name of the connector.
	Name pulumix.Input[*string]
	// Specifies which plugins to use for the connector. See below.
	Plugins pulumix.Input[[]*ConnectorPluginArgs]
	// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
	ServiceExecutionRoleArn pulumix.Input[*string]
	// The current version of the connector.
	Version pulumix.Input[*string]
	// Specifies which worker configuration to use with the connector. See below.
	WorkerConfiguration pulumix.Input[*ConnectorWorkerConfigurationArgs]
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// Information about the capacity allocated to the connector. See below.
	Capacity ConnectorCapacity `pulumi:"capacity"`
	// A map of keys to values that represent the configuration for the connector.
	ConnectorConfiguration map[string]string `pulumi:"connectorConfiguration"`
	// A summary description of the connector.
	Description *string `pulumi:"description"`
	// Specifies which Apache Kafka cluster to connect to. See below.
	KafkaCluster ConnectorKafkaCluster `pulumi:"kafkaCluster"`
	// Details of the client authentication used by the Apache Kafka cluster. See below.
	KafkaClusterClientAuthentication ConnectorKafkaClusterClientAuthentication `pulumi:"kafkaClusterClientAuthentication"`
	// Details of encryption in transit to the Apache Kafka cluster. See below.
	KafkaClusterEncryptionInTransit ConnectorKafkaClusterEncryptionInTransit `pulumi:"kafkaClusterEncryptionInTransit"`
	// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
	KafkaconnectVersion string `pulumi:"kafkaconnectVersion"`
	// Details about log delivery. See below.
	LogDelivery *ConnectorLogDelivery `pulumi:"logDelivery"`
	// The name of the connector.
	Name *string `pulumi:"name"`
	// Specifies which plugins to use for the connector. See below.
	Plugins []ConnectorPlugin `pulumi:"plugins"`
	// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
	ServiceExecutionRoleArn string `pulumi:"serviceExecutionRoleArn"`
	// Specifies which worker configuration to use with the connector. See below.
	WorkerConfiguration *ConnectorWorkerConfiguration `pulumi:"workerConfiguration"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// Information about the capacity allocated to the connector. See below.
	Capacity pulumix.Input[*ConnectorCapacityArgs]
	// A map of keys to values that represent the configuration for the connector.
	ConnectorConfiguration pulumix.Input[map[string]string]
	// A summary description of the connector.
	Description pulumix.Input[*string]
	// Specifies which Apache Kafka cluster to connect to. See below.
	KafkaCluster pulumix.Input[*ConnectorKafkaClusterArgs]
	// Details of the client authentication used by the Apache Kafka cluster. See below.
	KafkaClusterClientAuthentication pulumix.Input[*ConnectorKafkaClusterClientAuthenticationArgs]
	// Details of encryption in transit to the Apache Kafka cluster. See below.
	KafkaClusterEncryptionInTransit pulumix.Input[*ConnectorKafkaClusterEncryptionInTransitArgs]
	// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
	KafkaconnectVersion pulumix.Input[string]
	// Details about log delivery. See below.
	LogDelivery pulumix.Input[*ConnectorLogDeliveryArgs]
	// The name of the connector.
	Name pulumix.Input[*string]
	// Specifies which plugins to use for the connector. See below.
	Plugins pulumix.Input[[]*ConnectorPluginArgs]
	// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
	ServiceExecutionRoleArn pulumix.Input[string]
	// Specifies which worker configuration to use with the connector. See below.
	WorkerConfiguration pulumix.Input[*ConnectorWorkerConfigurationArgs]
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[Connector] {
	return pulumix.Output[Connector]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the custom plugin.
func (o ConnectorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the capacity allocated to the connector. See below.
func (o ConnectorOutput) Capacity() pulumix.GPtrOutput[ConnectorCapacity, ConnectorCapacityOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorCapacity, ConnectorCapacityOutput] { return v.Capacity })
	unwrapped := pulumix.Flatten[*ConnectorCapacity, pulumix.GPtrOutput[ConnectorCapacity, ConnectorCapacityOutput]](value)
	return pulumix.GPtrOutput[ConnectorCapacity, ConnectorCapacityOutput]{OutputState: unwrapped.OutputState}
}

// A map of keys to values that represent the configuration for the connector.
func (o ConnectorOutput) ConnectorConfiguration() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.MapOutput[string] { return v.ConnectorConfiguration })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A summary description of the connector.
func (o ConnectorOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies which Apache Kafka cluster to connect to. See below.
func (o ConnectorOutput) KafkaCluster() pulumix.GPtrOutput[ConnectorKafkaCluster, ConnectorKafkaClusterOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorKafkaCluster, ConnectorKafkaClusterOutput] {
		return v.KafkaCluster
	})
	unwrapped := pulumix.Flatten[*ConnectorKafkaCluster, pulumix.GPtrOutput[ConnectorKafkaCluster, ConnectorKafkaClusterOutput]](value)
	return pulumix.GPtrOutput[ConnectorKafkaCluster, ConnectorKafkaClusterOutput]{OutputState: unwrapped.OutputState}
}

// Details of the client authentication used by the Apache Kafka cluster. See below.
func (o ConnectorOutput) KafkaClusterClientAuthentication() pulumix.GPtrOutput[ConnectorKafkaClusterClientAuthentication, ConnectorKafkaClusterClientAuthenticationOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorKafkaClusterClientAuthentication, ConnectorKafkaClusterClientAuthenticationOutput] {
		return v.KafkaClusterClientAuthentication
	})
	unwrapped := pulumix.Flatten[*ConnectorKafkaClusterClientAuthentication, pulumix.GPtrOutput[ConnectorKafkaClusterClientAuthentication, ConnectorKafkaClusterClientAuthenticationOutput]](value)
	return pulumix.GPtrOutput[ConnectorKafkaClusterClientAuthentication, ConnectorKafkaClusterClientAuthenticationOutput]{OutputState: unwrapped.OutputState}
}

// Details of encryption in transit to the Apache Kafka cluster. See below.
func (o ConnectorOutput) KafkaClusterEncryptionInTransit() pulumix.GPtrOutput[ConnectorKafkaClusterEncryptionInTransit, ConnectorKafkaClusterEncryptionInTransitOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorKafkaClusterEncryptionInTransit, ConnectorKafkaClusterEncryptionInTransitOutput] {
		return v.KafkaClusterEncryptionInTransit
	})
	unwrapped := pulumix.Flatten[*ConnectorKafkaClusterEncryptionInTransit, pulumix.GPtrOutput[ConnectorKafkaClusterEncryptionInTransit, ConnectorKafkaClusterEncryptionInTransitOutput]](value)
	return pulumix.GPtrOutput[ConnectorKafkaClusterEncryptionInTransit, ConnectorKafkaClusterEncryptionInTransitOutput]{OutputState: unwrapped.OutputState}
}

// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
func (o ConnectorOutput) KafkaconnectVersion() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.KafkaconnectVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Details about log delivery. See below.
func (o ConnectorOutput) LogDelivery() pulumix.GPtrOutput[ConnectorLogDelivery, ConnectorLogDeliveryOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorLogDelivery, ConnectorLogDeliveryOutput] {
		return v.LogDelivery
	})
	unwrapped := pulumix.Flatten[*ConnectorLogDelivery, pulumix.GPtrOutput[ConnectorLogDelivery, ConnectorLogDeliveryOutput]](value)
	return pulumix.GPtrOutput[ConnectorLogDelivery, ConnectorLogDeliveryOutput]{OutputState: unwrapped.OutputState}
}

// The name of the connector.
func (o ConnectorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies which plugins to use for the connector. See below.
func (o ConnectorOutput) Plugins() pulumix.GArrayOutput[ConnectorPlugin, ConnectorPluginOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GArrayOutput[ConnectorPlugin, ConnectorPluginOutput] { return v.Plugins })
	unwrapped := pulumix.Flatten[[]ConnectorPlugin, pulumix.GArrayOutput[ConnectorPlugin, ConnectorPluginOutput]](value)
	return pulumix.GArrayOutput[ConnectorPlugin, ConnectorPluginOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
func (o ConnectorOutput) ServiceExecutionRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.ServiceExecutionRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current version of the connector.
func (o ConnectorOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies which worker configuration to use with the connector. See below.
func (o ConnectorOutput) WorkerConfiguration() pulumix.GPtrOutput[ConnectorWorkerConfiguration, ConnectorWorkerConfigurationOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorWorkerConfiguration, ConnectorWorkerConfigurationOutput] {
		return v.WorkerConfiguration
	})
	unwrapped := pulumix.Flatten[*ConnectorWorkerConfiguration, pulumix.GPtrOutput[ConnectorWorkerConfiguration, ConnectorWorkerConfigurationOutput]](value)
	return pulumix.GPtrOutput[ConnectorWorkerConfiguration, ConnectorWorkerConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ConnectorOutput{})
}
