// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourcegroups

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Resource Groups Resource.
type Resource struct {
	pulumi.CustomResourceState

	// The name or the ARN of the resource group to add resources to.
	//
	// The following arguments are optional:
	GroupArn pulumix.Output[string] `pulumi:"groupArn"`
	// The ARN of the resource to be added to the group.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// The resource type of a resource, such as `AWS::EC2::Instance`.
	ResourceType pulumix.Output[string] `pulumi:"resourceType"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupArn == nil {
		return nil, errors.New("invalid value for required argument 'GroupArn'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("aws:resourcegroups/resource:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("aws:resourcegroups/resource:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
	// The name or the ARN of the resource group to add resources to.
	//
	// The following arguments are optional:
	GroupArn *string `pulumi:"groupArn"`
	// The ARN of the resource to be added to the group.
	ResourceArn *string `pulumi:"resourceArn"`
	// The resource type of a resource, such as `AWS::EC2::Instance`.
	ResourceType *string `pulumi:"resourceType"`
}

type ResourceState struct {
	// The name or the ARN of the resource group to add resources to.
	//
	// The following arguments are optional:
	GroupArn pulumix.Input[*string]
	// The ARN of the resource to be added to the group.
	ResourceArn pulumix.Input[*string]
	// The resource type of a resource, such as `AWS::EC2::Instance`.
	ResourceType pulumix.Input[*string]
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// The name or the ARN of the resource group to add resources to.
	//
	// The following arguments are optional:
	GroupArn string `pulumi:"groupArn"`
	// The ARN of the resource to be added to the group.
	ResourceArn string `pulumi:"resourceArn"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// The name or the ARN of the resource group to add resources to.
	//
	// The following arguments are optional:
	GroupArn pulumix.Input[string]
	// The ARN of the resource to be added to the group.
	ResourceArn pulumix.Input[string]
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) ToOutput(ctx context.Context) pulumix.Output[Resource] {
	return pulumix.Output[Resource]{
		OutputState: o.OutputState,
	}
}

// The name or the ARN of the resource group to add resources to.
//
// The following arguments are optional:
func (o ResourceOutput) GroupArn() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.GroupArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the resource to be added to the group.
func (o ResourceOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The resource type of a resource, such as `AWS::EC2::Instance`.
func (o ResourceOutput) ResourceType() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.ResourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResourceOutput{})
}
