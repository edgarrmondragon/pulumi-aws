// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type LifecyclePolicyPolicyDetails struct {
	// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
	Action *LifecyclePolicyPolicyDetailsAction `pulumi:"action"`
	// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `eventSource` configuration block.
	EventSource *LifecyclePolicyPolicyDetailsEventSource `pulumi:"eventSource"`
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the `parameters` configuration block.
	Parameters *LifecyclePolicyPolicyDetailsParameters `pulumi:"parameters"`
	// The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
	PolicyType *string `pulumi:"policyType"`
	// The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If you specify `OUTPOST`, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are `CLOUD` and `OUTPOST`.
	ResourceLocations *string `pulumi:"resourceLocations"`
	// A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// See the `schedule` configuration block.
	Schedules []LifecyclePolicyPolicyDetailsSchedule `pulumi:"schedules"`
	// A map of tag keys and their values. Any resources that match the `resourceTypes` and are tagged with _any_ of these tags will be targeted.
	//
	// > Note: You cannot have overlapping lifecycle policies that share the same `targetTags`. This provider is unable to detect this at plan time but it will fail during apply.
	TargetTags map[string]string `pulumi:"targetTags"`
}

type LifecyclePolicyPolicyDetailsArgs struct {
	// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
	Action pulumix.Input[*LifecyclePolicyPolicyDetailsActionArgs] `pulumi:"action"`
	// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `eventSource` configuration block.
	EventSource pulumix.Input[*LifecyclePolicyPolicyDetailsEventSourceArgs] `pulumi:"eventSource"`
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the `parameters` configuration block.
	Parameters pulumix.Input[*LifecyclePolicyPolicyDetailsParametersArgs] `pulumi:"parameters"`
	// The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
	PolicyType pulumix.Input[*string] `pulumi:"policyType"`
	// The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If you specify `OUTPOST`, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are `CLOUD` and `OUTPOST`.
	ResourceLocations pulumix.Input[*string] `pulumi:"resourceLocations"`
	// A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
	ResourceTypes pulumix.Input[[]string] `pulumi:"resourceTypes"`
	// See the `schedule` configuration block.
	Schedules pulumix.Input[[]*LifecyclePolicyPolicyDetailsScheduleArgs] `pulumi:"schedules"`
	// A map of tag keys and their values. Any resources that match the `resourceTypes` and are tagged with _any_ of these tags will be targeted.
	//
	// > Note: You cannot have overlapping lifecycle policies that share the same `targetTags`. This provider is unable to detect this at plan time but it will fail during apply.
	TargetTags pulumix.Input[map[string]string] `pulumi:"targetTags"`
}

func (LifecyclePolicyPolicyDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetails)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsArgs) ToLifecyclePolicyPolicyDetailsOutput() LifecyclePolicyPolicyDetailsOutput {
	return i.ToLifecyclePolicyPolicyDetailsOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsArgs) ToLifecyclePolicyPolicyDetailsOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsOutput)
}

func (i *LifecyclePolicyPolicyDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetails)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsOutput) ToLifecyclePolicyPolicyDetailsOutput() LifecyclePolicyPolicyDetailsOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsOutput) ToLifecyclePolicyPolicyDetailsOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetails] {
	return pulumix.Output[LifecyclePolicyPolicyDetails]{
		OutputState: o.OutputState,
	}
}

// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `action` configuration block.
func (o LifecyclePolicyPolicyDetailsOutput) Action() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsAction, LifecyclePolicyPolicyDetailsActionOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) *LifecyclePolicyPolicyDetailsAction { return v.Action })
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsAction, LifecyclePolicyPolicyDetailsActionOutput]{OutputState: value.OutputState}
}

// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the `eventSource` configuration block.
func (o LifecyclePolicyPolicyDetailsOutput) EventSource() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsEventSource, LifecyclePolicyPolicyDetailsEventSourceOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) *LifecyclePolicyPolicyDetailsEventSource { return v.EventSource })
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsEventSource, LifecyclePolicyPolicyDetailsEventSourceOutput]{OutputState: value.OutputState}
}

// A set of optional parameters for snapshot and AMI lifecycle policies. See the `parameters` configuration block.
func (o LifecyclePolicyPolicyDetailsOutput) Parameters() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsParameters, LifecyclePolicyPolicyDetailsParametersOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) *LifecyclePolicyPolicyDetailsParameters { return v.Parameters })
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsParameters, LifecyclePolicyPolicyDetailsParametersOutput]{OutputState: value.OutputState}
}

// The valid target resource types and actions a policy can manage. Specify `EBS_SNAPSHOT_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify `IMAGE_MANAGEMENT` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify `EVENT_BASED_POLICY` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is `EBS_SNAPSHOT_MANAGEMENT`.
func (o LifecyclePolicyPolicyDetailsOutput) PolicyType() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) *string { return v.PolicyType })
}

// The location of the resources to backup. If the source resources are located in an AWS Region, specify `CLOUD`. If the source resources are located on an Outpost in your account, specify `OUTPOST`. If you specify `OUTPOST`, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are `CLOUD` and `OUTPOST`.
func (o LifecyclePolicyPolicyDetailsOutput) ResourceLocations() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) *string { return v.ResourceLocations })
}

// A list of resource types that should be targeted by the lifecycle policy. Valid values are `VOLUME` and `INSTANCE`.
func (o LifecyclePolicyPolicyDetailsOutput) ResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) []string { return v.ResourceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// See the `schedule` configuration block.
func (o LifecyclePolicyPolicyDetailsOutput) Schedules() pulumix.GArrayOutput[LifecyclePolicyPolicyDetailsSchedule, LifecyclePolicyPolicyDetailsScheduleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) []LifecyclePolicyPolicyDetailsSchedule { return v.Schedules })
	return pulumix.GArrayOutput[LifecyclePolicyPolicyDetailsSchedule, LifecyclePolicyPolicyDetailsScheduleOutput]{OutputState: value.OutputState}
}

// A map of tag keys and their values. Any resources that match the `resourceTypes` and are tagged with _any_ of these tags will be targeted.
//
// > Note: You cannot have overlapping lifecycle policies that share the same `targetTags`. This provider is unable to detect this at plan time but it will fail during apply.
func (o LifecyclePolicyPolicyDetailsOutput) TargetTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetails](o, func(v LifecyclePolicyPolicyDetails) map[string]string { return v.TargetTags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type LifecyclePolicyPolicyDetailsAction struct {
	// The rule for copying shared snapshots across Regions. See the `crossRegionCopy` configuration block.
	CrossRegionCopies []LifecyclePolicyPolicyDetailsActionCrossRegionCopy `pulumi:"crossRegionCopies"`
	// A descriptive name for the action.
	Name string `pulumi:"name"`
}

type LifecyclePolicyPolicyDetailsActionArgs struct {
	// The rule for copying shared snapshots across Regions. See the `crossRegionCopy` configuration block.
	CrossRegionCopies pulumix.Input[[]*LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs] `pulumi:"crossRegionCopies"`
	// A descriptive name for the action.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (LifecyclePolicyPolicyDetailsActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsAction)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsActionArgs) ToLifecyclePolicyPolicyDetailsActionOutput() LifecyclePolicyPolicyDetailsActionOutput {
	return i.ToLifecyclePolicyPolicyDetailsActionOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsActionArgs) ToLifecyclePolicyPolicyDetailsActionOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsActionOutput)
}

func (i *LifecyclePolicyPolicyDetailsActionArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsActionArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsActionOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsAction)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsActionOutput) ToLifecyclePolicyPolicyDetailsActionOutput() LifecyclePolicyPolicyDetailsActionOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionOutput) ToLifecyclePolicyPolicyDetailsActionOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsAction] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsAction]{
		OutputState: o.OutputState,
	}
}

// The rule for copying shared snapshots across Regions. See the `crossRegionCopy` configuration block.
func (o LifecyclePolicyPolicyDetailsActionOutput) CrossRegionCopies() pulumix.GArrayOutput[LifecyclePolicyPolicyDetailsActionCrossRegionCopy, LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsAction](o, func(v LifecyclePolicyPolicyDetailsAction) []LifecyclePolicyPolicyDetailsActionCrossRegionCopy {
		return v.CrossRegionCopies
	})
	return pulumix.GArrayOutput[LifecyclePolicyPolicyDetailsActionCrossRegionCopy, LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput]{OutputState: value.OutputState}
}

// A descriptive name for the action.
func (o LifecyclePolicyPolicyDetailsActionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsAction](o, func(v LifecyclePolicyPolicyDetailsAction) string { return v.Name })
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopy struct {
	// The encryption settings for the copied snapshot. See the `encryptionConfiguration` block. Max of 1 per action.
	EncryptionConfiguration LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
	RetainRule *LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule `pulumi:"retainRule"`
	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	Target string `pulumi:"target"`
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs struct {
	// The encryption settings for the copied snapshot. See the `encryptionConfiguration` block. Max of 1 per action.
	EncryptionConfiguration pulumix.Input[*LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs] `pulumi:"encryptionConfiguration"`
	// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
	RetainRule pulumix.Input[*LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs] `pulumi:"retainRule"`
	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	Target pulumix.Input[string] `pulumi:"target"`
}

func (LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsActionCrossRegionCopy)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput() LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput {
	return i.ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput)
}

func (i *LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsActionCrossRegionCopyArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsActionCrossRegionCopy)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput() LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsActionCrossRegionCopy] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsActionCrossRegionCopy]{
		OutputState: o.OutputState,
	}
}

// The encryption settings for the copied snapshot. See the `encryptionConfiguration` block. Max of 1 per action.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) EncryptionConfiguration() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration, LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopy](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopy) LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration {
		return v.EncryptionConfiguration
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration, LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput]{OutputState: value.OutputState}
}

// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) RetainRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule, LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopy](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopy) *LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule {
		return v.RetainRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule, LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput]{OutputState: value.OutputState}
}

// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopy](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopy) string { return v.Target })
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration struct {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	CmkArn *string `pulumi:"cmkArn"`
	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	Encrypted *bool `pulumi:"encrypted"`
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	CmkArn pulumix.Input[*string] `pulumi:"cmkArn"`
	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
}

func (LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput() LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput {
	return i.ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput)
}

func (i *LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput() LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput) CmkArn() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration) *string {
		return v.CmkArn
	})
}

// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfiguration) *bool {
		return v.Encrypted
	})
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule struct {
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit string `pulumi:"intervalUnit"`
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs struct {
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[string] `pulumi:"intervalUnit"`
}

func (LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput() LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput() LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput) ToLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule]{
		OutputState: o.OutputState,
	}
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule) int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput) IntervalUnit() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule](o, func(v LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRule) string { return v.IntervalUnit })
}

type LifecyclePolicyPolicyDetailsEventSource struct {
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the `parameters` configuration block.
	Parameters LifecyclePolicyPolicyDetailsEventSourceParameters `pulumi:"parameters"`
	// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are `MANAGED_CWE`.
	Type string `pulumi:"type"`
}

type LifecyclePolicyPolicyDetailsEventSourceArgs struct {
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the `parameters` configuration block.
	Parameters pulumix.Input[*LifecyclePolicyPolicyDetailsEventSourceParametersArgs] `pulumi:"parameters"`
	// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are `MANAGED_CWE`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (LifecyclePolicyPolicyDetailsEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsEventSource)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsEventSourceArgs) ToLifecyclePolicyPolicyDetailsEventSourceOutput() LifecyclePolicyPolicyDetailsEventSourceOutput {
	return i.ToLifecyclePolicyPolicyDetailsEventSourceOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsEventSourceArgs) ToLifecyclePolicyPolicyDetailsEventSourceOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsEventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsEventSourceOutput)
}

func (i *LifecyclePolicyPolicyDetailsEventSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsEventSourceArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsEventSourceOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsEventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsEventSource)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsEventSourceOutput) ToLifecyclePolicyPolicyDetailsEventSourceOutput() LifecyclePolicyPolicyDetailsEventSourceOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsEventSourceOutput) ToLifecyclePolicyPolicyDetailsEventSourceOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsEventSourceOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsEventSourceOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsEventSource] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsEventSource]{
		OutputState: o.OutputState,
	}
}

// A set of optional parameters for snapshot and AMI lifecycle policies. See the `parameters` configuration block.
func (o LifecyclePolicyPolicyDetailsEventSourceOutput) Parameters() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsEventSourceParameters, LifecyclePolicyPolicyDetailsEventSourceParametersOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsEventSource](o, func(v LifecyclePolicyPolicyDetailsEventSource) LifecyclePolicyPolicyDetailsEventSourceParameters {
		return v.Parameters
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsEventSourceParameters, LifecyclePolicyPolicyDetailsEventSourceParametersOutput]{OutputState: value.OutputState}
}

// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are `MANAGED_CWE`.
func (o LifecyclePolicyPolicyDetailsEventSourceOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsEventSource](o, func(v LifecyclePolicyPolicyDetailsEventSource) string { return v.Type })
}

type LifecyclePolicyPolicyDetailsEventSourceParameters struct {
	// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
	DescriptionRegex string `pulumi:"descriptionRegex"`
	// The type of event. Currently, only `shareSnapshot` events are supported.
	EventType string `pulumi:"eventType"`
	// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
	SnapshotOwners []string `pulumi:"snapshotOwners"`
}

type LifecyclePolicyPolicyDetailsEventSourceParametersArgs struct {
	// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
	DescriptionRegex pulumix.Input[string] `pulumi:"descriptionRegex"`
	// The type of event. Currently, only `shareSnapshot` events are supported.
	EventType pulumix.Input[string] `pulumi:"eventType"`
	// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
	SnapshotOwners pulumix.Input[[]string] `pulumi:"snapshotOwners"`
}

func (LifecyclePolicyPolicyDetailsEventSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsEventSourceParameters)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsEventSourceParametersArgs) ToLifecyclePolicyPolicyDetailsEventSourceParametersOutput() LifecyclePolicyPolicyDetailsEventSourceParametersOutput {
	return i.ToLifecyclePolicyPolicyDetailsEventSourceParametersOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsEventSourceParametersArgs) ToLifecyclePolicyPolicyDetailsEventSourceParametersOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsEventSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsEventSourceParametersOutput)
}

func (i *LifecyclePolicyPolicyDetailsEventSourceParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsEventSourceParametersArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsEventSourceParametersOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsEventSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsEventSourceParameters)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsEventSourceParametersOutput) ToLifecyclePolicyPolicyDetailsEventSourceParametersOutput() LifecyclePolicyPolicyDetailsEventSourceParametersOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsEventSourceParametersOutput) ToLifecyclePolicyPolicyDetailsEventSourceParametersOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsEventSourceParametersOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsEventSourceParametersOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsEventSourceParameters] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsEventSourceParameters]{
		OutputState: o.OutputState,
	}
}

// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
func (o LifecyclePolicyPolicyDetailsEventSourceParametersOutput) DescriptionRegex() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsEventSourceParameters](o, func(v LifecyclePolicyPolicyDetailsEventSourceParameters) string { return v.DescriptionRegex })
}

// The type of event. Currently, only `shareSnapshot` events are supported.
func (o LifecyclePolicyPolicyDetailsEventSourceParametersOutput) EventType() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsEventSourceParameters](o, func(v LifecyclePolicyPolicyDetailsEventSourceParameters) string { return v.EventType })
}

// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
func (o LifecyclePolicyPolicyDetailsEventSourceParametersOutput) SnapshotOwners() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsEventSourceParameters](o, func(v LifecyclePolicyPolicyDetailsEventSourceParameters) []string { return v.SnapshotOwners })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type LifecyclePolicyPolicyDetailsParameters struct {
	// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is `false`.
	ExcludeBootVolume *bool `pulumi:"excludeBootVolume"`
	// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. `true` indicates that targeted instances are not rebooted when the policy runs. `false` indicates that target instances are rebooted when the policy runs. The default is `true` (instances are not rebooted).
	NoReboot *bool `pulumi:"noReboot"`
}

type LifecyclePolicyPolicyDetailsParametersArgs struct {
	// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is `false`.
	ExcludeBootVolume pulumix.Input[*bool] `pulumi:"excludeBootVolume"`
	// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. `true` indicates that targeted instances are not rebooted when the policy runs. `false` indicates that target instances are rebooted when the policy runs. The default is `true` (instances are not rebooted).
	NoReboot pulumix.Input[*bool] `pulumi:"noReboot"`
}

func (LifecyclePolicyPolicyDetailsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsParameters)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsParametersArgs) ToLifecyclePolicyPolicyDetailsParametersOutput() LifecyclePolicyPolicyDetailsParametersOutput {
	return i.ToLifecyclePolicyPolicyDetailsParametersOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsParametersArgs) ToLifecyclePolicyPolicyDetailsParametersOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsParametersOutput)
}

func (i *LifecyclePolicyPolicyDetailsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsParametersArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsParametersOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsParameters)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsParametersOutput) ToLifecyclePolicyPolicyDetailsParametersOutput() LifecyclePolicyPolicyDetailsParametersOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsParametersOutput) ToLifecyclePolicyPolicyDetailsParametersOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsParametersOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsParameters] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsParameters]{
		OutputState: o.OutputState,
	}
}

// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is `false`.
func (o LifecyclePolicyPolicyDetailsParametersOutput) ExcludeBootVolume() pulumix.Output[*bool] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsParameters](o, func(v LifecyclePolicyPolicyDetailsParameters) *bool { return v.ExcludeBootVolume })
}

// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. `true` indicates that targeted instances are not rebooted when the policy runs. `false` indicates that target instances are rebooted when the policy runs. The default is `true` (instances are not rebooted).
func (o LifecyclePolicyPolicyDetailsParametersOutput) NoReboot() pulumix.Output[*bool] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsParameters](o, func(v LifecyclePolicyPolicyDetailsParameters) *bool { return v.NoReboot })
}

type LifecyclePolicyPolicyDetailsSchedule struct {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	CopyTags *bool `pulumi:"copyTags"`
	// See the `createRule` block. Max of 1 per schedule.
	CreateRule LifecyclePolicyPolicyDetailsScheduleCreateRule `pulumi:"createRule"`
	// See the `crossRegionCopyRule` block. Max of 3 per schedule.
	CrossRegionCopyRules []LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule `pulumi:"crossRegionCopyRules"`
	// See the `deprecateRule` block. Max of 1 per schedule.
	DeprecateRule *LifecyclePolicyPolicyDetailsScheduleDeprecateRule `pulumi:"deprecateRule"`
	// See the `fastRestoreRule` block. Max of 1 per schedule.
	FastRestoreRule *LifecyclePolicyPolicyDetailsScheduleFastRestoreRule `pulumi:"fastRestoreRule"`
	// A descriptive name for the action.
	Name string `pulumi:"name"`
	// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
	RetainRule LifecyclePolicyPolicyDetailsScheduleRetainRule `pulumi:"retainRule"`
	// See the `shareRule` block. Max of 1 per schedule.
	ShareRule *LifecyclePolicyPolicyDetailsScheduleShareRule `pulumi:"shareRule"`
	// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
	TagsToAdd map[string]string `pulumi:"tagsToAdd"`
	// A map of tag keys and variable values, where the values are determined when the policy is executed. Only `$(instance-id)` or `$(timestamp)` are valid values. Can only be used when `resourceTypes` is `INSTANCE`.
	VariableTags map[string]string `pulumi:"variableTags"`
}

type LifecyclePolicyPolicyDetailsScheduleArgs struct {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	CopyTags pulumix.Input[*bool] `pulumi:"copyTags"`
	// See the `createRule` block. Max of 1 per schedule.
	CreateRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs] `pulumi:"createRule"`
	// See the `crossRegionCopyRule` block. Max of 3 per schedule.
	CrossRegionCopyRules pulumix.Input[[]*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs] `pulumi:"crossRegionCopyRules"`
	// See the `deprecateRule` block. Max of 1 per schedule.
	DeprecateRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs] `pulumi:"deprecateRule"`
	// See the `fastRestoreRule` block. Max of 1 per schedule.
	FastRestoreRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs] `pulumi:"fastRestoreRule"`
	// A descriptive name for the action.
	Name pulumix.Input[string] `pulumi:"name"`
	// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
	RetainRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs] `pulumi:"retainRule"`
	// See the `shareRule` block. Max of 1 per schedule.
	ShareRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleShareRuleArgs] `pulumi:"shareRule"`
	// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
	TagsToAdd pulumix.Input[map[string]string] `pulumi:"tagsToAdd"`
	// A map of tag keys and variable values, where the values are determined when the policy is executed. Only `$(instance-id)` or `$(timestamp)` are valid values. Can only be used when `resourceTypes` is `INSTANCE`.
	VariableTags pulumix.Input[map[string]string] `pulumi:"variableTags"`
}

func (LifecyclePolicyPolicyDetailsScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsSchedule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleArgs) ToLifecyclePolicyPolicyDetailsScheduleOutput() LifecyclePolicyPolicyDetailsScheduleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleArgs) ToLifecyclePolicyPolicyDetailsScheduleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsSchedule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleOutput) ToLifecyclePolicyPolicyDetailsScheduleOutput() LifecyclePolicyPolicyDetailsScheduleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleOutput) ToLifecyclePolicyPolicyDetailsScheduleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsSchedule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsSchedule]{
		OutputState: o.OutputState,
	}
}

// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) CopyTags() pulumix.Output[*bool] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) *bool { return v.CopyTags })
}

// See the `createRule` block. Max of 1 per schedule.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) CreateRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleCreateRule, LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) LifecyclePolicyPolicyDetailsScheduleCreateRule {
		return v.CreateRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleCreateRule, LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput]{OutputState: value.OutputState}
}

// See the `crossRegionCopyRule` block. Max of 3 per schedule.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) CrossRegionCopyRules() pulumix.GArrayOutput[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule, LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) []LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule {
		return v.CrossRegionCopyRules
	})
	return pulumix.GArrayOutput[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule, LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput]{OutputState: value.OutputState}
}

// See the `deprecateRule` block. Max of 1 per schedule.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) DeprecateRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleDeprecateRule, LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) *LifecyclePolicyPolicyDetailsScheduleDeprecateRule {
		return v.DeprecateRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleDeprecateRule, LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput]{OutputState: value.OutputState}
}

// See the `fastRestoreRule` block. Max of 1 per schedule.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) FastRestoreRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule, LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) *LifecyclePolicyPolicyDetailsScheduleFastRestoreRule {
		return v.FastRestoreRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule, LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput]{OutputState: value.OutputState}
}

// A descriptive name for the action.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) string { return v.Name })
}

// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) RetainRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleRetainRule, LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) LifecyclePolicyPolicyDetailsScheduleRetainRule {
		return v.RetainRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleRetainRule, LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput]{OutputState: value.OutputState}
}

// See the `shareRule` block. Max of 1 per schedule.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) ShareRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleShareRule, LifecyclePolicyPolicyDetailsScheduleShareRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) *LifecyclePolicyPolicyDetailsScheduleShareRule {
		return v.ShareRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleShareRule, LifecyclePolicyPolicyDetailsScheduleShareRuleOutput]{OutputState: value.OutputState}
}

// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) TagsToAdd() pulumix.MapOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) map[string]string { return v.TagsToAdd })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// A map of tag keys and variable values, where the values are determined when the policy is executed. Only `$(instance-id)` or `$(timestamp)` are valid values. Can only be used when `resourceTypes` is `INSTANCE`.
func (o LifecyclePolicyPolicyDetailsScheduleOutput) VariableTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsSchedule](o, func(v LifecyclePolicyPolicyDetailsSchedule) map[string]string { return v.VariableTags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type LifecyclePolicyPolicyDetailsScheduleCreateRule struct {
	// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. Conflicts with `interval`, `intervalUnit`, and `times`.
	CronExpression *string `pulumi:"cronExpression"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval *int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit *string `pulumi:"intervalUnit"`
	// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify `CLOUD`. To create snapshots on the same Outpost as the source resource, specify `OUTPOST_LOCAL`. If you omit this parameter, `CLOUD` is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are `CLOUD` and `OUTPOST_LOCAL`.
	Location *string `pulumi:"location"`
	// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1. Conflicts with `cronExpression`. Must be set if `interval` is set.
	Times *string `pulumi:"times"`
}

type LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs struct {
	// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. Conflicts with `interval`, `intervalUnit`, and `times`.
	CronExpression pulumix.Input[*string] `pulumi:"cronExpression"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[*string] `pulumi:"intervalUnit"`
	// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify `CLOUD`. To create snapshots on the same Outpost as the source resource, specify `OUTPOST_LOCAL`. If you omit this parameter, `CLOUD` is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are `CLOUD` and `OUTPOST_LOCAL`.
	Location pulumix.Input[*string] `pulumi:"location"`
	// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1. Conflicts with `cronExpression`. Must be set if `interval` is set.
	Times pulumix.Input[*string] `pulumi:"times"`
}

func (LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCreateRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCreateRuleOutput() LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCreateRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCreateRuleOutput() LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCreateRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCreateRule]{
		OutputState: o.OutputState,
	}
}

// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. Conflicts with `interval`, `intervalUnit`, and `times`.
func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) CronExpression() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCreateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCreateRule) *string { return v.CronExpression })
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCreateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCreateRule) *int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) IntervalUnit() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCreateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCreateRule) *string { return v.IntervalUnit })
}

// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify `CLOUD`. To create snapshots on the same Outpost as the source resource, specify `OUTPOST_LOCAL`. If you omit this parameter, `CLOUD` is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are `CLOUD` and `OUTPOST_LOCAL`.
func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCreateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCreateRule) *string { return v.Location })
}

// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput) Times() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCreateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCreateRule) *string { return v.Times })
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule struct {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	CmkArn *string `pulumi:"cmkArn"`
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	CopyTags *bool `pulumi:"copyTags"`
	// See the `deprecateRule` block. Max of 1 per schedule.
	DeprecateRule *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule `pulumi:"deprecateRule"`
	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	Encrypted bool `pulumi:"encrypted"`
	// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
	RetainRule *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule `pulumi:"retainRule"`
	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	Target string `pulumi:"target"`
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs struct {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	CmkArn pulumix.Input[*string] `pulumi:"cmkArn"`
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	CopyTags pulumix.Input[*bool] `pulumi:"copyTags"`
	// See the `deprecateRule` block. Max of 1 per schedule.
	DeprecateRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs] `pulumi:"deprecateRule"`
	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	Encrypted pulumix.Input[bool] `pulumi:"encrypted"`
	// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
	RetainRule pulumix.Input[*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs] `pulumi:"retainRule"`
	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	Target pulumix.Input[string] `pulumi:"target"`
}

func (LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput() LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput() LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) CmkArn() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule) *string { return v.CmkArn })
}

// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) CopyTags() pulumix.Output[*bool] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule) *bool { return v.CopyTags })
}

// See the `deprecateRule` block. Max of 1 per schedule.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) DeprecateRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule, LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule) *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule {
		return v.DeprecateRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule, LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput]{OutputState: value.OutputState}
}

// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule) bool { return v.Encrypted })
}

// Specifies the retention rule for cross-Region snapshot copies. See the `retainRule` block. Max of 1 per action.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) RetainRule() pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule, LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule) *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule {
		return v.RetainRule
	})
	return pulumix.GPtrOutput[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule, LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput]{OutputState: value.OutputState}
}

// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRule) string { return v.Target })
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule struct {
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit string `pulumi:"intervalUnit"`
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs struct {
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[string] `pulumi:"intervalUnit"`
}

func (LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput() LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput() LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule]{
		OutputState: o.OutputState,
	}
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule) int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput) IntervalUnit() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule) string {
		return v.IntervalUnit
	})
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule struct {
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit string `pulumi:"intervalUnit"`
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs struct {
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[string] `pulumi:"intervalUnit"`
}

func (LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput() LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput() LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule]{
		OutputState: o.OutputState,
	}
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule) int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput) IntervalUnit() pulumix.Output[string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule](o, func(v LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRule) string {
		return v.IntervalUnit
	})
}

type LifecyclePolicyPolicyDetailsScheduleDeprecateRule struct {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
	Count *int `pulumi:"count"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval *int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit *string `pulumi:"intervalUnit"`
}

type LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs struct {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
	Count pulumix.Input[*int] `pulumi:"count"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[*string] `pulumi:"intervalUnit"`
}

func (LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleDeprecateRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput() LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleDeprecateRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput() LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleDeprecateRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleDeprecateRule]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
func (o LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) Count() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleDeprecateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleDeprecateRule) *int { return v.Count })
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleDeprecateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleDeprecateRule) *int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput) IntervalUnit() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleDeprecateRule](o, func(v LifecyclePolicyPolicyDetailsScheduleDeprecateRule) *string { return v.IntervalUnit })
}

type LifecyclePolicyPolicyDetailsScheduleFastRestoreRule struct {
	// The Availability Zones in which to enable fast snapshot restore.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
	Count *int `pulumi:"count"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval *int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit *string `pulumi:"intervalUnit"`
}

type LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs struct {
	// The Availability Zones in which to enable fast snapshot restore.
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
	Count pulumix.Input[*int] `pulumi:"count"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[*string] `pulumi:"intervalUnit"`
}

func (LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleFastRestoreRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput() LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleFastRestoreRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput() LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule]{
		OutputState: o.OutputState,
	}
}

// The Availability Zones in which to enable fast snapshot restore.
func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule](o, func(v LifecyclePolicyPolicyDetailsScheduleFastRestoreRule) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) Count() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule](o, func(v LifecyclePolicyPolicyDetailsScheduleFastRestoreRule) *int { return v.Count })
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule](o, func(v LifecyclePolicyPolicyDetailsScheduleFastRestoreRule) *int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput) IntervalUnit() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleFastRestoreRule](o, func(v LifecyclePolicyPolicyDetailsScheduleFastRestoreRule) *string { return v.IntervalUnit })
}

type LifecyclePolicyPolicyDetailsScheduleRetainRule struct {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
	Count *int `pulumi:"count"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval *int `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit *string `pulumi:"intervalUnit"`
}

type LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs struct {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
	Count pulumix.Input[*int] `pulumi:"count"`
	// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
	IntervalUnit pulumix.Input[*string] `pulumi:"intervalUnit"`
}

func (LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleRetainRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleRetainRuleOutput() LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleRetainRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleRetainRuleOutput() LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleRetainRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleRetainRule]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of oldest AMIs to deprecate. Must be an integer between `1` and `1000`. Conflicts with `interval` and `intervalUnit`.
func (o LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) Count() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleRetainRule](o, func(v LifecyclePolicyPolicyDetailsScheduleRetainRule) *int { return v.Count })
}

// How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values. Conflicts with `cronExpression`. If set, `intervalUnit` and `times` must also be set.
func (o LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleRetainRule](o, func(v LifecyclePolicyPolicyDetailsScheduleRetainRule) *int { return v.Interval })
}

// The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value. Conflicts with `cronExpression`. Must be set if `interval` is set.
func (o LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput) IntervalUnit() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleRetainRule](o, func(v LifecyclePolicyPolicyDetailsScheduleRetainRule) *string { return v.IntervalUnit })
}

type LifecyclePolicyPolicyDetailsScheduleShareRule struct {
	// The IDs of the AWS accounts with which to share the snapshots.
	TargetAccounts      []string `pulumi:"targetAccounts"`
	UnshareInterval     *int     `pulumi:"unshareInterval"`
	UnshareIntervalUnit *string  `pulumi:"unshareIntervalUnit"`
}

type LifecyclePolicyPolicyDetailsScheduleShareRuleArgs struct {
	// The IDs of the AWS accounts with which to share the snapshots.
	TargetAccounts      pulumix.Input[[]string] `pulumi:"targetAccounts"`
	UnshareInterval     pulumix.Input[*int]     `pulumi:"unshareInterval"`
	UnshareIntervalUnit pulumix.Input[*string]  `pulumi:"unshareIntervalUnit"`
}

func (LifecyclePolicyPolicyDetailsScheduleShareRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleShareRule)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailsScheduleShareRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleShareRuleOutput() LifecyclePolicyPolicyDetailsScheduleShareRuleOutput {
	return i.ToLifecyclePolicyPolicyDetailsScheduleShareRuleOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailsScheduleShareRuleArgs) ToLifecyclePolicyPolicyDetailsScheduleShareRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleShareRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailsScheduleShareRuleOutput)
}

func (i *LifecyclePolicyPolicyDetailsScheduleShareRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyPolicyDetailsScheduleShareRuleArgs] {
	return pulumix.Val(i)
}

type LifecyclePolicyPolicyDetailsScheduleShareRuleOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetailsScheduleShareRule)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleShareRuleOutput() LifecyclePolicyPolicyDetailsScheduleShareRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) ToLifecyclePolicyPolicyDetailsScheduleShareRuleOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailsScheduleShareRuleOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetailsScheduleShareRule] {
	return pulumix.Output[LifecyclePolicyPolicyDetailsScheduleShareRule]{
		OutputState: o.OutputState,
	}
}

// The IDs of the AWS accounts with which to share the snapshots.
func (o LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) TargetAccounts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleShareRule](o, func(v LifecyclePolicyPolicyDetailsScheduleShareRule) []string { return v.TargetAccounts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) UnshareInterval() pulumix.Output[*int] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleShareRule](o, func(v LifecyclePolicyPolicyDetailsScheduleShareRule) *int { return v.UnshareInterval })
}

func (o LifecyclePolicyPolicyDetailsScheduleShareRuleOutput) UnshareIntervalUnit() pulumix.Output[*string] {
	return pulumix.Apply[LifecyclePolicyPolicyDetailsScheduleShareRule](o, func(v LifecyclePolicyPolicyDetailsScheduleShareRule) *string { return v.UnshareIntervalUnit })
}

func init() {
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsActionOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsActionCrossRegionCopyOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsEventSourceOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsEventSourceParametersOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsParametersOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleCreateRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleRetainRuleOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailsScheduleShareRuleOutput{})
}
