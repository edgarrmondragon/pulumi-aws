// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create a SES template.
type Template struct {
	pulumi.CustomResourceState

	// The ARN of the SES template
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
	Html pulumix.Output[*string] `pulumi:"html"`
	// The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email.
	Name pulumix.Output[string] `pulumi:"name"`
	// The subject line of the email.
	Subject pulumix.Output[*string] `pulumi:"subject"`
	// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
	Text pulumix.Output[*string] `pulumi:"text"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		args = &TemplateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("aws:ses/template:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("aws:ses/template:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
	// The ARN of the SES template
	Arn *string `pulumi:"arn"`
	// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
	Html *string `pulumi:"html"`
	// The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email.
	Name *string `pulumi:"name"`
	// The subject line of the email.
	Subject *string `pulumi:"subject"`
	// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
	Text *string `pulumi:"text"`
}

type TemplateState struct {
	// The ARN of the SES template
	Arn pulumix.Input[*string]
	// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
	Html pulumix.Input[*string]
	// The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email.
	Name pulumix.Input[*string]
	// The subject line of the email.
	Subject pulumix.Input[*string]
	// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
	Text pulumix.Input[*string]
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
	Html *string `pulumi:"html"`
	// The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email.
	Name *string `pulumi:"name"`
	// The subject line of the email.
	Subject *string `pulumi:"subject"`
	// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
	Text *string `pulumi:"text"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
	Html pulumix.Input[*string]
	// The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email.
	Name pulumix.Input[*string]
	// The subject line of the email.
	Subject pulumix.Input[*string]
	// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
	Text pulumix.Input[*string]
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func (o TemplateOutput) ToOutput(ctx context.Context) pulumix.Output[Template] {
	return pulumix.Output[Template]{
		OutputState: o.OutputState,
	}
}

// The ARN of the SES template
func (o TemplateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Template](o, func(v Template) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
func (o TemplateOutput) Html() pulumix.Output[*string] {
	value := pulumix.Apply[Template](o, func(v Template) pulumix.Output[*string] { return v.Html })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the template. Cannot exceed 64 characters. You will refer to this name when you send email.
func (o TemplateOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Template](o, func(v Template) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The subject line of the email.
func (o TemplateOutput) Subject() pulumix.Output[*string] {
	value := pulumix.Apply[Template](o, func(v Template) pulumix.Output[*string] { return v.Subject })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
func (o TemplateOutput) Text() pulumix.Output[*string] {
	value := pulumix.Apply[Template](o, func(v Template) pulumix.Output[*string] { return v.Text })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(TemplateOutput{})
}
