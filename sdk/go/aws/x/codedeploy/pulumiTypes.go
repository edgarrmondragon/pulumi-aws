// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DeploymentConfigMinimumHealthyHosts struct {
	// The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
	Type *string `pulumi:"type"`
	// The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
	// a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
	// deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
	// When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
	Value *int `pulumi:"value"`
}

type DeploymentConfigMinimumHealthyHostsArgs struct {
	// The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
	// a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
	// deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
	// When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
	Value pulumix.Input[*int] `pulumi:"value"`
}

func (DeploymentConfigMinimumHealthyHostsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigMinimumHealthyHosts)(nil)).Elem()
}

func (i DeploymentConfigMinimumHealthyHostsArgs) ToDeploymentConfigMinimumHealthyHostsOutput() DeploymentConfigMinimumHealthyHostsOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsOutputWithContext(context.Background())
}

func (i DeploymentConfigMinimumHealthyHostsArgs) ToDeploymentConfigMinimumHealthyHostsOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsOutput)
}

func (i *DeploymentConfigMinimumHealthyHostsArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentConfigMinimumHealthyHostsArgs] {
	return pulumix.Val(i)
}

type DeploymentConfigMinimumHealthyHostsOutput struct{ *pulumi.OutputState }

func (DeploymentConfigMinimumHealthyHostsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigMinimumHealthyHosts)(nil)).Elem()
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToDeploymentConfigMinimumHealthyHostsOutput() DeploymentConfigMinimumHealthyHostsOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToDeploymentConfigMinimumHealthyHostsOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentConfigMinimumHealthyHosts] {
	return pulumix.Output[DeploymentConfigMinimumHealthyHosts]{
		OutputState: o.OutputState,
	}
}

// The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
func (o DeploymentConfigMinimumHealthyHostsOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentConfigMinimumHealthyHosts](o, func(v DeploymentConfigMinimumHealthyHosts) *string { return v.Type })
}

// The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
// a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
// deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
// When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
func (o DeploymentConfigMinimumHealthyHostsOutput) Value() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentConfigMinimumHealthyHosts](o, func(v DeploymentConfigMinimumHealthyHosts) *int { return v.Value })
}

type DeploymentConfigTrafficRoutingConfig struct {
	// The time based canary configuration information. If `type` is `TimeBasedLinear`, use `timeBasedLinear` instead.
	TimeBasedCanary *DeploymentConfigTrafficRoutingConfigTimeBasedCanary `pulumi:"timeBasedCanary"`
	// The time based linear configuration information. If `type` is `TimeBasedCanary`, use `timeBasedCanary` instead.
	TimeBasedLinear *DeploymentConfigTrafficRoutingConfigTimeBasedLinear `pulumi:"timeBasedLinear"`
	// Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
	Type *string `pulumi:"type"`
}

type DeploymentConfigTrafficRoutingConfigArgs struct {
	// The time based canary configuration information. If `type` is `TimeBasedLinear`, use `timeBasedLinear` instead.
	TimeBasedCanary pulumix.Input[*DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs] `pulumi:"timeBasedCanary"`
	// The time based linear configuration information. If `type` is `TimeBasedCanary`, use `timeBasedCanary` instead.
	TimeBasedLinear pulumix.Input[*DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs] `pulumi:"timeBasedLinear"`
	// Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (DeploymentConfigTrafficRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfig)(nil)).Elem()
}

func (i DeploymentConfigTrafficRoutingConfigArgs) ToDeploymentConfigTrafficRoutingConfigOutput() DeploymentConfigTrafficRoutingConfigOutput {
	return i.ToDeploymentConfigTrafficRoutingConfigOutputWithContext(context.Background())
}

func (i DeploymentConfigTrafficRoutingConfigArgs) ToDeploymentConfigTrafficRoutingConfigOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTrafficRoutingConfigOutput)
}

func (i *DeploymentConfigTrafficRoutingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentConfigTrafficRoutingConfigArgs] {
	return pulumix.Val(i)
}

type DeploymentConfigTrafficRoutingConfigOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTrafficRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfig)(nil)).Elem()
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToDeploymentConfigTrafficRoutingConfigOutput() DeploymentConfigTrafficRoutingConfigOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToDeploymentConfigTrafficRoutingConfigOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentConfigTrafficRoutingConfig] {
	return pulumix.Output[DeploymentConfigTrafficRoutingConfig]{
		OutputState: o.OutputState,
	}
}

// The time based canary configuration information. If `type` is `TimeBasedLinear`, use `timeBasedLinear` instead.
func (o DeploymentConfigTrafficRoutingConfigOutput) TimeBasedCanary() pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfigTimeBasedCanary, DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput] {
	value := pulumix.Apply[DeploymentConfigTrafficRoutingConfig](o, func(v DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTrafficRoutingConfigTimeBasedCanary {
		return v.TimeBasedCanary
	})
	return pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfigTimeBasedCanary, DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput]{OutputState: value.OutputState}
}

// The time based linear configuration information. If `type` is `TimeBasedCanary`, use `timeBasedCanary` instead.
func (o DeploymentConfigTrafficRoutingConfigOutput) TimeBasedLinear() pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfigTimeBasedLinear, DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput] {
	value := pulumix.Apply[DeploymentConfigTrafficRoutingConfig](o, func(v DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTrafficRoutingConfigTimeBasedLinear {
		return v.TimeBasedLinear
	})
	return pulumix.GPtrOutput[DeploymentConfigTrafficRoutingConfigTimeBasedLinear, DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput]{OutputState: value.OutputState}
}

// Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
func (o DeploymentConfigTrafficRoutingConfigOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentConfigTrafficRoutingConfig](o, func(v DeploymentConfigTrafficRoutingConfig) *string { return v.Type })
}

type DeploymentConfigTrafficRoutingConfigTimeBasedCanary struct {
	// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
	Interval *int `pulumi:"interval"`
	// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
	Percentage *int `pulumi:"percentage"`
}

type DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs struct {
	// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
	Percentage pulumix.Input[*int] `pulumi:"percentage"`
}

func (DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfigTimeBasedCanary)(nil)).Elem()
}

func (i DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs) ToDeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput() DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput {
	return i.ToDeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutputWithContext(context.Background())
}

func (i DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs) ToDeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput)
}

func (i *DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentConfigTrafficRoutingConfigTimeBasedCanaryArgs] {
	return pulumix.Val(i)
}

type DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfigTimeBasedCanary)(nil)).Elem()
}

func (o DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput) ToDeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput() DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput) ToDeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentConfigTrafficRoutingConfigTimeBasedCanary] {
	return pulumix.Output[DeploymentConfigTrafficRoutingConfigTimeBasedCanary]{
		OutputState: o.OutputState,
	}
}

// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
func (o DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentConfigTrafficRoutingConfigTimeBasedCanary](o, func(v DeploymentConfigTrafficRoutingConfigTimeBasedCanary) *int { return v.Interval })
}

// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
func (o DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput) Percentage() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentConfigTrafficRoutingConfigTimeBasedCanary](o, func(v DeploymentConfigTrafficRoutingConfigTimeBasedCanary) *int { return v.Percentage })
}

type DeploymentConfigTrafficRoutingConfigTimeBasedLinear struct {
	// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
	Interval *int `pulumi:"interval"`
	// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
	Percentage *int `pulumi:"percentage"`
}

type DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs struct {
	// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
	Percentage pulumix.Input[*int] `pulumi:"percentage"`
}

func (DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfigTimeBasedLinear)(nil)).Elem()
}

func (i DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs) ToDeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput() DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput {
	return i.ToDeploymentConfigTrafficRoutingConfigTimeBasedLinearOutputWithContext(context.Background())
}

func (i DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs) ToDeploymentConfigTrafficRoutingConfigTimeBasedLinearOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput)
}

func (i *DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentConfigTrafficRoutingConfigTimeBasedLinearArgs] {
	return pulumix.Val(i)
}

type DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfigTimeBasedLinear)(nil)).Elem()
}

func (o DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput) ToDeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput() DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput) ToDeploymentConfigTrafficRoutingConfigTimeBasedLinearOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentConfigTrafficRoutingConfigTimeBasedLinear] {
	return pulumix.Output[DeploymentConfigTrafficRoutingConfigTimeBasedLinear]{
		OutputState: o.OutputState,
	}
}

// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
func (o DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentConfigTrafficRoutingConfigTimeBasedLinear](o, func(v DeploymentConfigTrafficRoutingConfigTimeBasedLinear) *int { return v.Interval })
}

// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
func (o DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput) Percentage() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentConfigTrafficRoutingConfigTimeBasedLinear](o, func(v DeploymentConfigTrafficRoutingConfigTimeBasedLinear) *int { return v.Percentage })
}

type DeploymentGroupAlarmConfiguration struct {
	// A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
	Alarms []string `pulumi:"alarms"`
	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	Enabled *bool `pulumi:"enabled"`
	// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
	IgnorePollAlarmFailure *bool `pulumi:"ignorePollAlarmFailure"`
}

type DeploymentGroupAlarmConfigurationArgs struct {
	// A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
	Alarms pulumix.Input[[]string] `pulumi:"alarms"`
	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
	IgnorePollAlarmFailure pulumix.Input[*bool] `pulumi:"ignorePollAlarmFailure"`
}

func (DeploymentGroupAlarmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupAlarmConfiguration)(nil)).Elem()
}

func (i DeploymentGroupAlarmConfigurationArgs) ToDeploymentGroupAlarmConfigurationOutput() DeploymentGroupAlarmConfigurationOutput {
	return i.ToDeploymentGroupAlarmConfigurationOutputWithContext(context.Background())
}

func (i DeploymentGroupAlarmConfigurationArgs) ToDeploymentGroupAlarmConfigurationOutputWithContext(ctx context.Context) DeploymentGroupAlarmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupAlarmConfigurationOutput)
}

func (i *DeploymentGroupAlarmConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupAlarmConfigurationArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupAlarmConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentGroupAlarmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupAlarmConfiguration)(nil)).Elem()
}

func (o DeploymentGroupAlarmConfigurationOutput) ToDeploymentGroupAlarmConfigurationOutput() DeploymentGroupAlarmConfigurationOutput {
	return o
}

func (o DeploymentGroupAlarmConfigurationOutput) ToDeploymentGroupAlarmConfigurationOutputWithContext(ctx context.Context) DeploymentGroupAlarmConfigurationOutput {
	return o
}

func (o DeploymentGroupAlarmConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupAlarmConfiguration] {
	return pulumix.Output[DeploymentGroupAlarmConfiguration]{
		OutputState: o.OutputState,
	}
}

// A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
func (o DeploymentGroupAlarmConfigurationOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DeploymentGroupAlarmConfiguration](o, func(v DeploymentGroupAlarmConfiguration) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
func (o DeploymentGroupAlarmConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[DeploymentGroupAlarmConfiguration](o, func(v DeploymentGroupAlarmConfiguration) *bool { return v.Enabled })
}

// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
func (o DeploymentGroupAlarmConfigurationOutput) IgnorePollAlarmFailure() pulumix.Output[*bool] {
	return pulumix.Apply[DeploymentGroupAlarmConfiguration](o, func(v DeploymentGroupAlarmConfiguration) *bool { return v.IgnorePollAlarmFailure })
}

type DeploymentGroupAutoRollbackConfiguration struct {
	// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
	Enabled *bool `pulumi:"enabled"`
	// The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
	//
	// _Only one `autoRollbackConfiguration` is allowed_.
	Events []string `pulumi:"events"`
}

type DeploymentGroupAutoRollbackConfigurationArgs struct {
	// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
	//
	// _Only one `autoRollbackConfiguration` is allowed_.
	Events pulumix.Input[[]string] `pulumi:"events"`
}

func (DeploymentGroupAutoRollbackConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupAutoRollbackConfiguration)(nil)).Elem()
}

func (i DeploymentGroupAutoRollbackConfigurationArgs) ToDeploymentGroupAutoRollbackConfigurationOutput() DeploymentGroupAutoRollbackConfigurationOutput {
	return i.ToDeploymentGroupAutoRollbackConfigurationOutputWithContext(context.Background())
}

func (i DeploymentGroupAutoRollbackConfigurationArgs) ToDeploymentGroupAutoRollbackConfigurationOutputWithContext(ctx context.Context) DeploymentGroupAutoRollbackConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupAutoRollbackConfigurationOutput)
}

func (i *DeploymentGroupAutoRollbackConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupAutoRollbackConfigurationArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupAutoRollbackConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentGroupAutoRollbackConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupAutoRollbackConfiguration)(nil)).Elem()
}

func (o DeploymentGroupAutoRollbackConfigurationOutput) ToDeploymentGroupAutoRollbackConfigurationOutput() DeploymentGroupAutoRollbackConfigurationOutput {
	return o
}

func (o DeploymentGroupAutoRollbackConfigurationOutput) ToDeploymentGroupAutoRollbackConfigurationOutputWithContext(ctx context.Context) DeploymentGroupAutoRollbackConfigurationOutput {
	return o
}

func (o DeploymentGroupAutoRollbackConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupAutoRollbackConfiguration] {
	return pulumix.Output[DeploymentGroupAutoRollbackConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
func (o DeploymentGroupAutoRollbackConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[DeploymentGroupAutoRollbackConfiguration](o, func(v DeploymentGroupAutoRollbackConfiguration) *bool { return v.Enabled })
}

// The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
//
// _Only one `autoRollbackConfiguration` is allowed_.
func (o DeploymentGroupAutoRollbackConfigurationOutput) Events() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DeploymentGroupAutoRollbackConfiguration](o, func(v DeploymentGroupAutoRollbackConfiguration) []string { return v.Events })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DeploymentGroupBlueGreenDeploymentConfig struct {
	// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
	DeploymentReadyOption *DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption `pulumi:"deploymentReadyOption"`
	// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
	GreenFleetProvisioningOption *DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption `pulumi:"greenFleetProvisioningOption"`
	// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
	//
	// _Only one `blueGreenDeploymentConfig` is allowed_.
	TerminateBlueInstancesOnDeploymentSuccess *DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess `pulumi:"terminateBlueInstancesOnDeploymentSuccess"`
}

type DeploymentGroupBlueGreenDeploymentConfigArgs struct {
	// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
	DeploymentReadyOption pulumix.Input[*DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs] `pulumi:"deploymentReadyOption"`
	// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
	GreenFleetProvisioningOption pulumix.Input[*DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs] `pulumi:"greenFleetProvisioningOption"`
	// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
	//
	// _Only one `blueGreenDeploymentConfig` is allowed_.
	TerminateBlueInstancesOnDeploymentSuccess pulumix.Input[*DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs] `pulumi:"terminateBlueInstancesOnDeploymentSuccess"`
}

func (DeploymentGroupBlueGreenDeploymentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfig)(nil)).Elem()
}

func (i DeploymentGroupBlueGreenDeploymentConfigArgs) ToDeploymentGroupBlueGreenDeploymentConfigOutput() DeploymentGroupBlueGreenDeploymentConfigOutput {
	return i.ToDeploymentGroupBlueGreenDeploymentConfigOutputWithContext(context.Background())
}

func (i DeploymentGroupBlueGreenDeploymentConfigArgs) ToDeploymentGroupBlueGreenDeploymentConfigOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupBlueGreenDeploymentConfigOutput)
}

func (i *DeploymentGroupBlueGreenDeploymentConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupBlueGreenDeploymentConfigArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupBlueGreenDeploymentConfigOutput struct{ *pulumi.OutputState }

func (DeploymentGroupBlueGreenDeploymentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfig)(nil)).Elem()
}

func (o DeploymentGroupBlueGreenDeploymentConfigOutput) ToDeploymentGroupBlueGreenDeploymentConfigOutput() DeploymentGroupBlueGreenDeploymentConfigOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigOutput) ToDeploymentGroupBlueGreenDeploymentConfigOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupBlueGreenDeploymentConfig] {
	return pulumix.Output[DeploymentGroupBlueGreenDeploymentConfig]{
		OutputState: o.OutputState,
	}
}

// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
func (o DeploymentGroupBlueGreenDeploymentConfigOutput) DeploymentReadyOption() pulumix.GPtrOutput[DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption, DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput] {
	value := pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfig](o, func(v DeploymentGroupBlueGreenDeploymentConfig) *DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption {
		return v.DeploymentReadyOption
	})
	return pulumix.GPtrOutput[DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption, DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput]{OutputState: value.OutputState}
}

// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
func (o DeploymentGroupBlueGreenDeploymentConfigOutput) GreenFleetProvisioningOption() pulumix.GPtrOutput[DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption, DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput] {
	value := pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfig](o, func(v DeploymentGroupBlueGreenDeploymentConfig) *DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption {
		return v.GreenFleetProvisioningOption
	})
	return pulumix.GPtrOutput[DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption, DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput]{OutputState: value.OutputState}
}

// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
//
// _Only one `blueGreenDeploymentConfig` is allowed_.
func (o DeploymentGroupBlueGreenDeploymentConfigOutput) TerminateBlueInstancesOnDeploymentSuccess() pulumix.GPtrOutput[DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess, DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput] {
	value := pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfig](o, func(v DeploymentGroupBlueGreenDeploymentConfig) *DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess {
		return v.TerminateBlueInstancesOnDeploymentSuccess
	})
	return pulumix.GPtrOutput[DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess, DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput]{OutputState: value.OutputState}
}

type DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption struct {
	// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
	ActionOnTimeout *string `pulumi:"actionOnTimeout"`
	// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `actionOnTimeout`.
	WaitTimeInMinutes *int `pulumi:"waitTimeInMinutes"`
}

type DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs struct {
	// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
	ActionOnTimeout pulumix.Input[*string] `pulumi:"actionOnTimeout"`
	// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `actionOnTimeout`.
	WaitTimeInMinutes pulumix.Input[*int] `pulumi:"waitTimeInMinutes"`
}

func (DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption)(nil)).Elem()
}

func (i DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs) ToDeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput() DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput {
	return i.ToDeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutputWithContext(context.Background())
}

func (i DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs) ToDeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput)
}

func (i *DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput struct{ *pulumi.OutputState }

func (DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption)(nil)).Elem()
}

func (o DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput) ToDeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput() DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput) ToDeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption] {
	return pulumix.Output[DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption]{
		OutputState: o.OutputState,
	}
}

// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
func (o DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput) ActionOnTimeout() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption](o, func(v DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption) *string {
		return v.ActionOnTimeout
	})
}

// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `actionOnTimeout`.
func (o DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput) WaitTimeInMinutes() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption](o, func(v DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption) *int { return v.WaitTimeInMinutes })
}

type DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption struct {
	// The method used to add instances to a replacement environment.
	Action *string `pulumi:"action"`
}

type DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs struct {
	// The method used to add instances to a replacement environment.
	Action pulumix.Input[*string] `pulumi:"action"`
}

func (DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption)(nil)).Elem()
}

func (i DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs) ToDeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput() DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput {
	return i.ToDeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutputWithContext(context.Background())
}

func (i DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs) ToDeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput)
}

func (i *DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput struct{ *pulumi.OutputState }

func (DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption)(nil)).Elem()
}

func (o DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput) ToDeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput() DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput) ToDeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption] {
	return pulumix.Output[DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption]{
		OutputState: o.OutputState,
	}
}

// The method used to add instances to a replacement environment.
func (o DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput) Action() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption](o, func(v DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption) *string { return v.Action })
}

type DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess struct {
	// The action to take on instances in the original environment after a successful blue/green deployment.
	Action *string `pulumi:"action"`
	// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
	TerminationWaitTimeInMinutes *int `pulumi:"terminationWaitTimeInMinutes"`
}

type DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs struct {
	// The action to take on instances in the original environment after a successful blue/green deployment.
	Action pulumix.Input[*string] `pulumi:"action"`
	// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
	TerminationWaitTimeInMinutes pulumix.Input[*int] `pulumi:"terminationWaitTimeInMinutes"`
}

func (DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess)(nil)).Elem()
}

func (i DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs) ToDeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput() DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput {
	return i.ToDeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutputWithContext(context.Background())
}

func (i DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs) ToDeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput)
}

func (i *DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput struct{ *pulumi.OutputState }

func (DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess)(nil)).Elem()
}

func (o DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput) ToDeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput() DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput) ToDeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutputWithContext(ctx context.Context) DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput {
	return o
}

func (o DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess] {
	return pulumix.Output[DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess]{
		OutputState: o.OutputState,
	}
}

// The action to take on instances in the original environment after a successful blue/green deployment.
func (o DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput) Action() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess](o, func(v DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess) *string {
		return v.Action
	})
}

// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
func (o DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput) TerminationWaitTimeInMinutes() pulumix.Output[*int] {
	return pulumix.Apply[DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess](o, func(v DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess) *int {
		return v.TerminationWaitTimeInMinutes
	})
}

type DeploymentGroupDeploymentStyle struct {
	// Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
	DeploymentOption *string `pulumi:"deploymentOption"`
	// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
	//
	// _Only one `deploymentStyle` is allowed_.
	DeploymentType *string `pulumi:"deploymentType"`
}

type DeploymentGroupDeploymentStyleArgs struct {
	// Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
	DeploymentOption pulumix.Input[*string] `pulumi:"deploymentOption"`
	// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
	//
	// _Only one `deploymentStyle` is allowed_.
	DeploymentType pulumix.Input[*string] `pulumi:"deploymentType"`
}

func (DeploymentGroupDeploymentStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupDeploymentStyle)(nil)).Elem()
}

func (i DeploymentGroupDeploymentStyleArgs) ToDeploymentGroupDeploymentStyleOutput() DeploymentGroupDeploymentStyleOutput {
	return i.ToDeploymentGroupDeploymentStyleOutputWithContext(context.Background())
}

func (i DeploymentGroupDeploymentStyleArgs) ToDeploymentGroupDeploymentStyleOutputWithContext(ctx context.Context) DeploymentGroupDeploymentStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupDeploymentStyleOutput)
}

func (i *DeploymentGroupDeploymentStyleArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupDeploymentStyleArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupDeploymentStyleOutput struct{ *pulumi.OutputState }

func (DeploymentGroupDeploymentStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupDeploymentStyle)(nil)).Elem()
}

func (o DeploymentGroupDeploymentStyleOutput) ToDeploymentGroupDeploymentStyleOutput() DeploymentGroupDeploymentStyleOutput {
	return o
}

func (o DeploymentGroupDeploymentStyleOutput) ToDeploymentGroupDeploymentStyleOutputWithContext(ctx context.Context) DeploymentGroupDeploymentStyleOutput {
	return o
}

func (o DeploymentGroupDeploymentStyleOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupDeploymentStyle] {
	return pulumix.Output[DeploymentGroupDeploymentStyle]{
		OutputState: o.OutputState,
	}
}

// Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
func (o DeploymentGroupDeploymentStyleOutput) DeploymentOption() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupDeploymentStyle](o, func(v DeploymentGroupDeploymentStyle) *string { return v.DeploymentOption })
}

// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
//
// _Only one `deploymentStyle` is allowed_.
func (o DeploymentGroupDeploymentStyleOutput) DeploymentType() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupDeploymentStyle](o, func(v DeploymentGroupDeploymentStyle) *string { return v.DeploymentType })
}

type DeploymentGroupEc2TagFilter struct {
	// The key of the tag filter.
	Key *string `pulumi:"key"`
	// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
	Type *string `pulumi:"type"`
	// The value of the tag filter.
	//
	// Multiple occurrences of `ec2TagFilter` are allowed, where any instance that matches to at least one of the tag filters is selected.
	Value *string `pulumi:"value"`
}

type DeploymentGroupEc2TagFilterArgs struct {
	// The key of the tag filter.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// The value of the tag filter.
	//
	// Multiple occurrences of `ec2TagFilter` are allowed, where any instance that matches to at least one of the tag filters is selected.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (DeploymentGroupEc2TagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEc2TagFilter)(nil)).Elem()
}

func (i DeploymentGroupEc2TagFilterArgs) ToDeploymentGroupEc2TagFilterOutput() DeploymentGroupEc2TagFilterOutput {
	return i.ToDeploymentGroupEc2TagFilterOutputWithContext(context.Background())
}

func (i DeploymentGroupEc2TagFilterArgs) ToDeploymentGroupEc2TagFilterOutputWithContext(ctx context.Context) DeploymentGroupEc2TagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupEc2TagFilterOutput)
}

func (i *DeploymentGroupEc2TagFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupEc2TagFilterArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupEc2TagFilterOutput struct{ *pulumi.OutputState }

func (DeploymentGroupEc2TagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEc2TagFilter)(nil)).Elem()
}

func (o DeploymentGroupEc2TagFilterOutput) ToDeploymentGroupEc2TagFilterOutput() DeploymentGroupEc2TagFilterOutput {
	return o
}

func (o DeploymentGroupEc2TagFilterOutput) ToDeploymentGroupEc2TagFilterOutputWithContext(ctx context.Context) DeploymentGroupEc2TagFilterOutput {
	return o
}

func (o DeploymentGroupEc2TagFilterOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupEc2TagFilter] {
	return pulumix.Output[DeploymentGroupEc2TagFilter]{
		OutputState: o.OutputState,
	}
}

// The key of the tag filter.
func (o DeploymentGroupEc2TagFilterOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupEc2TagFilter](o, func(v DeploymentGroupEc2TagFilter) *string { return v.Key })
}

// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
func (o DeploymentGroupEc2TagFilterOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupEc2TagFilter](o, func(v DeploymentGroupEc2TagFilter) *string { return v.Type })
}

// The value of the tag filter.
//
// Multiple occurrences of `ec2TagFilter` are allowed, where any instance that matches to at least one of the tag filters is selected.
func (o DeploymentGroupEc2TagFilterOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupEc2TagFilter](o, func(v DeploymentGroupEc2TagFilter) *string { return v.Value })
}

type DeploymentGroupEc2TagSet struct {
	// Tag filters associated with the deployment group. See the AWS docs for details.
	Ec2TagFilters []DeploymentGroupEc2TagSetEc2TagFilter `pulumi:"ec2TagFilters"`
}

type DeploymentGroupEc2TagSetArgs struct {
	// Tag filters associated with the deployment group. See the AWS docs for details.
	Ec2TagFilters pulumix.Input[[]*DeploymentGroupEc2TagSetEc2TagFilterArgs] `pulumi:"ec2TagFilters"`
}

func (DeploymentGroupEc2TagSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEc2TagSet)(nil)).Elem()
}

func (i DeploymentGroupEc2TagSetArgs) ToDeploymentGroupEc2TagSetOutput() DeploymentGroupEc2TagSetOutput {
	return i.ToDeploymentGroupEc2TagSetOutputWithContext(context.Background())
}

func (i DeploymentGroupEc2TagSetArgs) ToDeploymentGroupEc2TagSetOutputWithContext(ctx context.Context) DeploymentGroupEc2TagSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupEc2TagSetOutput)
}

func (i *DeploymentGroupEc2TagSetArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupEc2TagSetArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupEc2TagSetOutput struct{ *pulumi.OutputState }

func (DeploymentGroupEc2TagSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEc2TagSet)(nil)).Elem()
}

func (o DeploymentGroupEc2TagSetOutput) ToDeploymentGroupEc2TagSetOutput() DeploymentGroupEc2TagSetOutput {
	return o
}

func (o DeploymentGroupEc2TagSetOutput) ToDeploymentGroupEc2TagSetOutputWithContext(ctx context.Context) DeploymentGroupEc2TagSetOutput {
	return o
}

func (o DeploymentGroupEc2TagSetOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupEc2TagSet] {
	return pulumix.Output[DeploymentGroupEc2TagSet]{
		OutputState: o.OutputState,
	}
}

// Tag filters associated with the deployment group. See the AWS docs for details.
func (o DeploymentGroupEc2TagSetOutput) Ec2TagFilters() pulumix.GArrayOutput[DeploymentGroupEc2TagSetEc2TagFilter, DeploymentGroupEc2TagSetEc2TagFilterOutput] {
	value := pulumix.Apply[DeploymentGroupEc2TagSet](o, func(v DeploymentGroupEc2TagSet) []DeploymentGroupEc2TagSetEc2TagFilter { return v.Ec2TagFilters })
	return pulumix.GArrayOutput[DeploymentGroupEc2TagSetEc2TagFilter, DeploymentGroupEc2TagSetEc2TagFilterOutput]{OutputState: value.OutputState}
}

type DeploymentGroupEc2TagSetEc2TagFilter struct {
	// The key of the tag filter.
	Key *string `pulumi:"key"`
	// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
	Type *string `pulumi:"type"`
	// The value of the tag filter.
	//
	// Multiple occurrences of `ec2TagFilter` are allowed, where any instance that matches to at least one of the tag filters is selected.
	Value *string `pulumi:"value"`
}

type DeploymentGroupEc2TagSetEc2TagFilterArgs struct {
	// The key of the tag filter.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// The value of the tag filter.
	//
	// Multiple occurrences of `ec2TagFilter` are allowed, where any instance that matches to at least one of the tag filters is selected.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (DeploymentGroupEc2TagSetEc2TagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEc2TagSetEc2TagFilter)(nil)).Elem()
}

func (i DeploymentGroupEc2TagSetEc2TagFilterArgs) ToDeploymentGroupEc2TagSetEc2TagFilterOutput() DeploymentGroupEc2TagSetEc2TagFilterOutput {
	return i.ToDeploymentGroupEc2TagSetEc2TagFilterOutputWithContext(context.Background())
}

func (i DeploymentGroupEc2TagSetEc2TagFilterArgs) ToDeploymentGroupEc2TagSetEc2TagFilterOutputWithContext(ctx context.Context) DeploymentGroupEc2TagSetEc2TagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupEc2TagSetEc2TagFilterOutput)
}

func (i *DeploymentGroupEc2TagSetEc2TagFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupEc2TagSetEc2TagFilterArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupEc2TagSetEc2TagFilterOutput struct{ *pulumi.OutputState }

func (DeploymentGroupEc2TagSetEc2TagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEc2TagSetEc2TagFilter)(nil)).Elem()
}

func (o DeploymentGroupEc2TagSetEc2TagFilterOutput) ToDeploymentGroupEc2TagSetEc2TagFilterOutput() DeploymentGroupEc2TagSetEc2TagFilterOutput {
	return o
}

func (o DeploymentGroupEc2TagSetEc2TagFilterOutput) ToDeploymentGroupEc2TagSetEc2TagFilterOutputWithContext(ctx context.Context) DeploymentGroupEc2TagSetEc2TagFilterOutput {
	return o
}

func (o DeploymentGroupEc2TagSetEc2TagFilterOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupEc2TagSetEc2TagFilter] {
	return pulumix.Output[DeploymentGroupEc2TagSetEc2TagFilter]{
		OutputState: o.OutputState,
	}
}

// The key of the tag filter.
func (o DeploymentGroupEc2TagSetEc2TagFilterOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupEc2TagSetEc2TagFilter](o, func(v DeploymentGroupEc2TagSetEc2TagFilter) *string { return v.Key })
}

// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
func (o DeploymentGroupEc2TagSetEc2TagFilterOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupEc2TagSetEc2TagFilter](o, func(v DeploymentGroupEc2TagSetEc2TagFilter) *string { return v.Type })
}

// The value of the tag filter.
//
// Multiple occurrences of `ec2TagFilter` are allowed, where any instance that matches to at least one of the tag filters is selected.
func (o DeploymentGroupEc2TagSetEc2TagFilterOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupEc2TagSetEc2TagFilter](o, func(v DeploymentGroupEc2TagSetEc2TagFilter) *string { return v.Value })
}

type DeploymentGroupEcsService struct {
	// The name of the ECS cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the ECS service.
	ServiceName string `pulumi:"serviceName"`
}

type DeploymentGroupEcsServiceArgs struct {
	// The name of the ECS cluster.
	ClusterName pulumix.Input[string] `pulumi:"clusterName"`
	// The name of the ECS service.
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
}

func (DeploymentGroupEcsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEcsService)(nil)).Elem()
}

func (i DeploymentGroupEcsServiceArgs) ToDeploymentGroupEcsServiceOutput() DeploymentGroupEcsServiceOutput {
	return i.ToDeploymentGroupEcsServiceOutputWithContext(context.Background())
}

func (i DeploymentGroupEcsServiceArgs) ToDeploymentGroupEcsServiceOutputWithContext(ctx context.Context) DeploymentGroupEcsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupEcsServiceOutput)
}

func (i *DeploymentGroupEcsServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupEcsServiceArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupEcsServiceOutput struct{ *pulumi.OutputState }

func (DeploymentGroupEcsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupEcsService)(nil)).Elem()
}

func (o DeploymentGroupEcsServiceOutput) ToDeploymentGroupEcsServiceOutput() DeploymentGroupEcsServiceOutput {
	return o
}

func (o DeploymentGroupEcsServiceOutput) ToDeploymentGroupEcsServiceOutputWithContext(ctx context.Context) DeploymentGroupEcsServiceOutput {
	return o
}

func (o DeploymentGroupEcsServiceOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupEcsService] {
	return pulumix.Output[DeploymentGroupEcsService]{
		OutputState: o.OutputState,
	}
}

// The name of the ECS cluster.
func (o DeploymentGroupEcsServiceOutput) ClusterName() pulumix.Output[string] {
	return pulumix.Apply[DeploymentGroupEcsService](o, func(v DeploymentGroupEcsService) string { return v.ClusterName })
}

// The name of the ECS service.
func (o DeploymentGroupEcsServiceOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[DeploymentGroupEcsService](o, func(v DeploymentGroupEcsService) string { return v.ServiceName })
}

type DeploymentGroupLoadBalancerInfo struct {
	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
	ElbInfos []DeploymentGroupLoadBalancerInfoElbInfo `pulumi:"elbInfos"`
	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
	TargetGroupInfos []DeploymentGroupLoadBalancerInfoTargetGroupInfo `pulumi:"targetGroupInfos"`
	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
	TargetGroupPairInfo *DeploymentGroupLoadBalancerInfoTargetGroupPairInfo `pulumi:"targetGroupPairInfo"`
}

type DeploymentGroupLoadBalancerInfoArgs struct {
	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
	ElbInfos pulumix.Input[[]*DeploymentGroupLoadBalancerInfoElbInfoArgs] `pulumi:"elbInfos"`
	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
	TargetGroupInfos pulumix.Input[[]*DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs] `pulumi:"targetGroupInfos"`
	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
	TargetGroupPairInfo pulumix.Input[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs] `pulumi:"targetGroupPairInfo"`
}

func (DeploymentGroupLoadBalancerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfo)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoArgs) ToDeploymentGroupLoadBalancerInfoOutput() DeploymentGroupLoadBalancerInfoOutput {
	return i.ToDeploymentGroupLoadBalancerInfoOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoArgs) ToDeploymentGroupLoadBalancerInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoOutput)
}

func (i *DeploymentGroupLoadBalancerInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfo)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToDeploymentGroupLoadBalancerInfoOutput() DeploymentGroupLoadBalancerInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToDeploymentGroupLoadBalancerInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfo] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfo]{
		OutputState: o.OutputState,
	}
}

// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
func (o DeploymentGroupLoadBalancerInfoOutput) ElbInfos() pulumix.GArrayOutput[DeploymentGroupLoadBalancerInfoElbInfo, DeploymentGroupLoadBalancerInfoElbInfoOutput] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfo](o, func(v DeploymentGroupLoadBalancerInfo) []DeploymentGroupLoadBalancerInfoElbInfo { return v.ElbInfos })
	return pulumix.GArrayOutput[DeploymentGroupLoadBalancerInfoElbInfo, DeploymentGroupLoadBalancerInfoElbInfoOutput]{OutputState: value.OutputState}
}

// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
func (o DeploymentGroupLoadBalancerInfoOutput) TargetGroupInfos() pulumix.GArrayOutput[DeploymentGroupLoadBalancerInfoTargetGroupInfo, DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfo](o, func(v DeploymentGroupLoadBalancerInfo) []DeploymentGroupLoadBalancerInfoTargetGroupInfo {
		return v.TargetGroupInfos
	})
	return pulumix.GArrayOutput[DeploymentGroupLoadBalancerInfoTargetGroupInfo, DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput]{OutputState: value.OutputState}
}

// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
func (o DeploymentGroupLoadBalancerInfoOutput) TargetGroupPairInfo() pulumix.GPtrOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfo](o, func(v DeploymentGroupLoadBalancerInfo) *DeploymentGroupLoadBalancerInfoTargetGroupPairInfo {
		return v.TargetGroupPairInfo
	})
	return pulumix.GPtrOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput]{OutputState: value.OutputState}
}

type DeploymentGroupLoadBalancerInfoElbInfo struct {
	// The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name *string `pulumi:"name"`
}

type DeploymentGroupLoadBalancerInfoElbInfoArgs struct {
	// The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (DeploymentGroupLoadBalancerInfoElbInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoElbInfo)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoElbInfoArgs) ToDeploymentGroupLoadBalancerInfoElbInfoOutput() DeploymentGroupLoadBalancerInfoElbInfoOutput {
	return i.ToDeploymentGroupLoadBalancerInfoElbInfoOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoElbInfoArgs) ToDeploymentGroupLoadBalancerInfoElbInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoElbInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoElbInfoOutput)
}

func (i *DeploymentGroupLoadBalancerInfoElbInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoElbInfoArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoElbInfoOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoElbInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoElbInfo)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoElbInfoOutput) ToDeploymentGroupLoadBalancerInfoElbInfoOutput() DeploymentGroupLoadBalancerInfoElbInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoElbInfoOutput) ToDeploymentGroupLoadBalancerInfoElbInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoElbInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoElbInfoOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfoElbInfo] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfoElbInfo]{
		OutputState: o.OutputState,
	}
}

// The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
func (o DeploymentGroupLoadBalancerInfoElbInfoOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupLoadBalancerInfoElbInfo](o, func(v DeploymentGroupLoadBalancerInfoElbInfo) *string { return v.Name })
}

type DeploymentGroupLoadBalancerInfoTargetGroupInfo struct {
	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name *string `pulumi:"name"`
}

type DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs struct {
	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupInfo)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupInfoOutput() DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput {
	return i.ToDeploymentGroupLoadBalancerInfoTargetGroupInfoOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput)
}

func (i *DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoTargetGroupInfoArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupInfo)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupInfoOutput() DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupInfo] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupInfo]{
		OutputState: o.OutputState,
	}
}

// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
func (o DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupInfo](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupInfo) *string { return v.Name })
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfo struct {
	// Configuration block for the production traffic route (documented below).
	ProdTrafficRoute DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute `pulumi:"prodTrafficRoute"`
	// Configuration blocks for a target group within a target group pair (documented below).
	TargetGroups []DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup `pulumi:"targetGroups"`
	// Configuration block for the test traffic route (documented below).
	TestTrafficRoute *DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute `pulumi:"testTrafficRoute"`
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs struct {
	// Configuration block for the production traffic route (documented below).
	ProdTrafficRoute pulumix.Input[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs] `pulumi:"prodTrafficRoute"`
	// Configuration blocks for a target group within a target group pair (documented below).
	TargetGroups pulumix.Input[[]*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs] `pulumi:"targetGroups"`
	// Configuration block for the test traffic route (documented below).
	TestTrafficRoute pulumix.Input[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs] `pulumi:"testTrafficRoute"`
}

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfo)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput {
	return i.ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput)
}

func (i *DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfo)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the production traffic route (documented below).
func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) ProdTrafficRoute() pulumix.GPtrOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupPairInfo) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute {
		return v.ProdTrafficRoute
	})
	return pulumix.GPtrOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput]{OutputState: value.OutputState}
}

// Configuration blocks for a target group within a target group pair (documented below).
func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) TargetGroups() pulumix.GArrayOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupPairInfo) []DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup {
		return v.TargetGroups
	})
	return pulumix.GArrayOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput]{OutputState: value.OutputState}
}

// Configuration block for the test traffic route (documented below).
func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput) TestTrafficRoute() pulumix.GPtrOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupPairInfo](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupPairInfo) *DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute {
		return v.TestTrafficRoute
	})
	return pulumix.GPtrOutput[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute, DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput]{OutputState: value.OutputState}
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute struct {
	// List of Amazon Resource Names (ARNs) of the load balancer listeners. Must contain exactly one listener ARN.
	ListenerArns []string `pulumi:"listenerArns"`
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs struct {
	// List of Amazon Resource Names (ARNs) of the load balancer listeners. Must contain exactly one listener ARN.
	ListenerArns pulumix.Input[[]string] `pulumi:"listenerArns"`
}

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput {
	return i.ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput)
}

func (i *DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute]{
		OutputState: o.OutputState,
	}
}

// List of Amazon Resource Names (ARNs) of the load balancer listeners. Must contain exactly one listener ARN.
func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput) ListenerArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute) []string {
		return v.ListenerArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup struct {
	// Name of the target group.
	Name string `pulumi:"name"`
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs struct {
	// Name of the target group.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput {
	return i.ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput)
}

func (i *DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup]{
		OutputState: o.OutputState,
	}
}

// Name of the target group.
func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup) string { return v.Name })
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute struct {
	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	ListenerArns []string `pulumi:"listenerArns"`
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs struct {
	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	ListenerArns pulumix.Input[[]string] `pulumi:"listenerArns"`
}

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute)(nil)).Elem()
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput {
	return i.ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutputWithContext(context.Background())
}

func (i DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput)
}

func (i *DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput struct{ *pulumi.OutputState }

func (DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute)(nil)).Elem()
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput() DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput) ToDeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutputWithContext(ctx context.Context) DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput {
	return o
}

func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute] {
	return pulumix.Output[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute]{
		OutputState: o.OutputState,
	}
}

// List of Amazon Resource Names (ARNs) of the load balancer listeners.
func (o DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput) ListenerArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute](o, func(v DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute) []string {
		return v.ListenerArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DeploymentGroupOnPremisesInstanceTagFilter struct {
	// The key of the tag filter.
	Key *string `pulumi:"key"`
	// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
	Type *string `pulumi:"type"`
	// The value of the tag filter.
	Value *string `pulumi:"value"`
}

type DeploymentGroupOnPremisesInstanceTagFilterArgs struct {
	// The key of the tag filter.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// The value of the tag filter.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (DeploymentGroupOnPremisesInstanceTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupOnPremisesInstanceTagFilter)(nil)).Elem()
}

func (i DeploymentGroupOnPremisesInstanceTagFilterArgs) ToDeploymentGroupOnPremisesInstanceTagFilterOutput() DeploymentGroupOnPremisesInstanceTagFilterOutput {
	return i.ToDeploymentGroupOnPremisesInstanceTagFilterOutputWithContext(context.Background())
}

func (i DeploymentGroupOnPremisesInstanceTagFilterArgs) ToDeploymentGroupOnPremisesInstanceTagFilterOutputWithContext(ctx context.Context) DeploymentGroupOnPremisesInstanceTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupOnPremisesInstanceTagFilterOutput)
}

func (i *DeploymentGroupOnPremisesInstanceTagFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupOnPremisesInstanceTagFilterArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupOnPremisesInstanceTagFilterOutput struct{ *pulumi.OutputState }

func (DeploymentGroupOnPremisesInstanceTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupOnPremisesInstanceTagFilter)(nil)).Elem()
}

func (o DeploymentGroupOnPremisesInstanceTagFilterOutput) ToDeploymentGroupOnPremisesInstanceTagFilterOutput() DeploymentGroupOnPremisesInstanceTagFilterOutput {
	return o
}

func (o DeploymentGroupOnPremisesInstanceTagFilterOutput) ToDeploymentGroupOnPremisesInstanceTagFilterOutputWithContext(ctx context.Context) DeploymentGroupOnPremisesInstanceTagFilterOutput {
	return o
}

func (o DeploymentGroupOnPremisesInstanceTagFilterOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupOnPremisesInstanceTagFilter] {
	return pulumix.Output[DeploymentGroupOnPremisesInstanceTagFilter]{
		OutputState: o.OutputState,
	}
}

// The key of the tag filter.
func (o DeploymentGroupOnPremisesInstanceTagFilterOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupOnPremisesInstanceTagFilter](o, func(v DeploymentGroupOnPremisesInstanceTagFilter) *string { return v.Key })
}

// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
func (o DeploymentGroupOnPremisesInstanceTagFilterOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupOnPremisesInstanceTagFilter](o, func(v DeploymentGroupOnPremisesInstanceTagFilter) *string { return v.Type })
}

// The value of the tag filter.
func (o DeploymentGroupOnPremisesInstanceTagFilterOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[DeploymentGroupOnPremisesInstanceTagFilter](o, func(v DeploymentGroupOnPremisesInstanceTagFilter) *string { return v.Value })
}

type DeploymentGroupTriggerConfiguration struct {
	// The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
	TriggerEvents []string `pulumi:"triggerEvents"`
	// The name of the notification trigger.
	TriggerName string `pulumi:"triggerName"`
	// The ARN of the SNS topic through which notifications are sent.
	TriggerTargetArn string `pulumi:"triggerTargetArn"`
}

type DeploymentGroupTriggerConfigurationArgs struct {
	// The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
	TriggerEvents pulumix.Input[[]string] `pulumi:"triggerEvents"`
	// The name of the notification trigger.
	TriggerName pulumix.Input[string] `pulumi:"triggerName"`
	// The ARN of the SNS topic through which notifications are sent.
	TriggerTargetArn pulumix.Input[string] `pulumi:"triggerTargetArn"`
}

func (DeploymentGroupTriggerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupTriggerConfiguration)(nil)).Elem()
}

func (i DeploymentGroupTriggerConfigurationArgs) ToDeploymentGroupTriggerConfigurationOutput() DeploymentGroupTriggerConfigurationOutput {
	return i.ToDeploymentGroupTriggerConfigurationOutputWithContext(context.Background())
}

func (i DeploymentGroupTriggerConfigurationArgs) ToDeploymentGroupTriggerConfigurationOutputWithContext(ctx context.Context) DeploymentGroupTriggerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentGroupTriggerConfigurationOutput)
}

func (i *DeploymentGroupTriggerConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DeploymentGroupTriggerConfigurationArgs] {
	return pulumix.Val(i)
}

type DeploymentGroupTriggerConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentGroupTriggerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentGroupTriggerConfiguration)(nil)).Elem()
}

func (o DeploymentGroupTriggerConfigurationOutput) ToDeploymentGroupTriggerConfigurationOutput() DeploymentGroupTriggerConfigurationOutput {
	return o
}

func (o DeploymentGroupTriggerConfigurationOutput) ToDeploymentGroupTriggerConfigurationOutputWithContext(ctx context.Context) DeploymentGroupTriggerConfigurationOutput {
	return o
}

func (o DeploymentGroupTriggerConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentGroupTriggerConfiguration] {
	return pulumix.Output[DeploymentGroupTriggerConfiguration]{
		OutputState: o.OutputState,
	}
}

// The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
func (o DeploymentGroupTriggerConfigurationOutput) TriggerEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DeploymentGroupTriggerConfiguration](o, func(v DeploymentGroupTriggerConfiguration) []string { return v.TriggerEvents })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name of the notification trigger.
func (o DeploymentGroupTriggerConfigurationOutput) TriggerName() pulumix.Output[string] {
	return pulumix.Apply[DeploymentGroupTriggerConfiguration](o, func(v DeploymentGroupTriggerConfiguration) string { return v.TriggerName })
}

// The ARN of the SNS topic through which notifications are sent.
func (o DeploymentGroupTriggerConfigurationOutput) TriggerTargetArn() pulumix.Output[string] {
	return pulumix.Apply[DeploymentGroupTriggerConfiguration](o, func(v DeploymentGroupTriggerConfiguration) string { return v.TriggerTargetArn })
}

func init() {
	pulumi.RegisterOutputType(DeploymentConfigMinimumHealthyHostsOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTrafficRoutingConfigOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTrafficRoutingConfigTimeBasedCanaryOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTrafficRoutingConfigTimeBasedLinearOutput{})
	pulumi.RegisterOutputType(DeploymentGroupAlarmConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentGroupAutoRollbackConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentGroupBlueGreenDeploymentConfigOutput{})
	pulumi.RegisterOutputType(DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionOutput{})
	pulumi.RegisterOutputType(DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionOutput{})
	pulumi.RegisterOutputType(DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessOutput{})
	pulumi.RegisterOutputType(DeploymentGroupDeploymentStyleOutput{})
	pulumi.RegisterOutputType(DeploymentGroupEc2TagFilterOutput{})
	pulumi.RegisterOutputType(DeploymentGroupEc2TagSetOutput{})
	pulumi.RegisterOutputType(DeploymentGroupEc2TagSetEc2TagFilterOutput{})
	pulumi.RegisterOutputType(DeploymentGroupEcsServiceOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoElbInfoOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoTargetGroupInfoOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupOutput{})
	pulumi.RegisterOutputType(DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteOutput{})
	pulumi.RegisterOutputType(DeploymentGroupOnPremisesInstanceTagFilterOutput{})
	pulumi.RegisterOutputType(DeploymentGroupTriggerConfigurationOutput{})
}
