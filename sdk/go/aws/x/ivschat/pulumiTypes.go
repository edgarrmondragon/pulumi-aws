// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type LoggingConfigurationDestinationConfiguration struct {
	// An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
	CloudwatchLogs *LoggingConfigurationDestinationConfigurationCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
	Firehose *LoggingConfigurationDestinationConfigurationFirehose `pulumi:"firehose"`
	// An Amazon S3 destination configuration where chat activity will be logged.
	S3 *LoggingConfigurationDestinationConfigurationS3 `pulumi:"s3"`
}

type LoggingConfigurationDestinationConfigurationArgs struct {
	// An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
	CloudwatchLogs pulumix.Input[*LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs] `pulumi:"cloudwatchLogs"`
	// An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
	Firehose pulumix.Input[*LoggingConfigurationDestinationConfigurationFirehoseArgs] `pulumi:"firehose"`
	// An Amazon S3 destination configuration where chat activity will be logged.
	S3 pulumix.Input[*LoggingConfigurationDestinationConfigurationS3Args] `pulumi:"s3"`
}

func (LoggingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i LoggingConfigurationDestinationConfigurationArgs) ToLoggingConfigurationDestinationConfigurationOutput() LoggingConfigurationDestinationConfigurationOutput {
	return i.ToLoggingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i LoggingConfigurationDestinationConfigurationArgs) ToLoggingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationDestinationConfigurationOutput)
}

func (i *LoggingConfigurationDestinationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*LoggingConfigurationDestinationConfigurationArgs] {
	return pulumix.Val(i)
}

type LoggingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o LoggingConfigurationDestinationConfigurationOutput) ToLoggingConfigurationDestinationConfigurationOutput() LoggingConfigurationDestinationConfigurationOutput {
	return o
}

func (o LoggingConfigurationDestinationConfigurationOutput) ToLoggingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationOutput {
	return o
}

func (o LoggingConfigurationDestinationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingConfigurationDestinationConfiguration] {
	return pulumix.Output[LoggingConfigurationDestinationConfiguration]{
		OutputState: o.OutputState,
	}
}

// An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
func (o LoggingConfigurationDestinationConfigurationOutput) CloudwatchLogs() pulumix.GPtrOutput[LoggingConfigurationDestinationConfigurationCloudwatchLogs, LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput] {
	value := pulumix.Apply[LoggingConfigurationDestinationConfiguration](o, func(v LoggingConfigurationDestinationConfiguration) *LoggingConfigurationDestinationConfigurationCloudwatchLogs {
		return v.CloudwatchLogs
	})
	return pulumix.GPtrOutput[LoggingConfigurationDestinationConfigurationCloudwatchLogs, LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput]{OutputState: value.OutputState}
}

// An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
func (o LoggingConfigurationDestinationConfigurationOutput) Firehose() pulumix.GPtrOutput[LoggingConfigurationDestinationConfigurationFirehose, LoggingConfigurationDestinationConfigurationFirehoseOutput] {
	value := pulumix.Apply[LoggingConfigurationDestinationConfiguration](o, func(v LoggingConfigurationDestinationConfiguration) *LoggingConfigurationDestinationConfigurationFirehose {
		return v.Firehose
	})
	return pulumix.GPtrOutput[LoggingConfigurationDestinationConfigurationFirehose, LoggingConfigurationDestinationConfigurationFirehoseOutput]{OutputState: value.OutputState}
}

// An Amazon S3 destination configuration where chat activity will be logged.
func (o LoggingConfigurationDestinationConfigurationOutput) S3() pulumix.GPtrOutput[LoggingConfigurationDestinationConfigurationS3, LoggingConfigurationDestinationConfigurationS3Output] {
	value := pulumix.Apply[LoggingConfigurationDestinationConfiguration](o, func(v LoggingConfigurationDestinationConfiguration) *LoggingConfigurationDestinationConfigurationS3 {
		return v.S3
	})
	return pulumix.GPtrOutput[LoggingConfigurationDestinationConfigurationS3, LoggingConfigurationDestinationConfigurationS3Output]{OutputState: value.OutputState}
}

type LoggingConfigurationDestinationConfigurationCloudwatchLogs struct {
	// Name of the Amazon Cloudwatch Logs destination where chat activity will be logged.
	LogGroupName string `pulumi:"logGroupName"`
}

type LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs struct {
	// Name of the Amazon Cloudwatch Logs destination where chat activity will be logged.
	LogGroupName pulumix.Input[string] `pulumi:"logGroupName"`
}

func (LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfigurationCloudwatchLogs)(nil)).Elem()
}

func (i LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs) ToLoggingConfigurationDestinationConfigurationCloudwatchLogsOutput() LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput {
	return i.ToLoggingConfigurationDestinationConfigurationCloudwatchLogsOutputWithContext(context.Background())
}

func (i LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs) ToLoggingConfigurationDestinationConfigurationCloudwatchLogsOutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput)
}

func (i *LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfigurationCloudwatchLogs)(nil)).Elem()
}

func (o LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput) ToLoggingConfigurationDestinationConfigurationCloudwatchLogsOutput() LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput {
	return o
}

func (o LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput) ToLoggingConfigurationDestinationConfigurationCloudwatchLogsOutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput {
	return o
}

func (o LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingConfigurationDestinationConfigurationCloudwatchLogs] {
	return pulumix.Output[LoggingConfigurationDestinationConfigurationCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon Cloudwatch Logs destination where chat activity will be logged.
func (o LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[LoggingConfigurationDestinationConfigurationCloudwatchLogs](o, func(v LoggingConfigurationDestinationConfigurationCloudwatchLogs) string { return v.LogGroupName })
}

type LoggingConfigurationDestinationConfigurationFirehose struct {
	// Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
	DeliveryStreamName string `pulumi:"deliveryStreamName"`
}

type LoggingConfigurationDestinationConfigurationFirehoseArgs struct {
	// Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
	DeliveryStreamName pulumix.Input[string] `pulumi:"deliveryStreamName"`
}

func (LoggingConfigurationDestinationConfigurationFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfigurationFirehose)(nil)).Elem()
}

func (i LoggingConfigurationDestinationConfigurationFirehoseArgs) ToLoggingConfigurationDestinationConfigurationFirehoseOutput() LoggingConfigurationDestinationConfigurationFirehoseOutput {
	return i.ToLoggingConfigurationDestinationConfigurationFirehoseOutputWithContext(context.Background())
}

func (i LoggingConfigurationDestinationConfigurationFirehoseArgs) ToLoggingConfigurationDestinationConfigurationFirehoseOutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationDestinationConfigurationFirehoseOutput)
}

func (i *LoggingConfigurationDestinationConfigurationFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*LoggingConfigurationDestinationConfigurationFirehoseArgs] {
	return pulumix.Val(i)
}

type LoggingConfigurationDestinationConfigurationFirehoseOutput struct{ *pulumi.OutputState }

func (LoggingConfigurationDestinationConfigurationFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfigurationFirehose)(nil)).Elem()
}

func (o LoggingConfigurationDestinationConfigurationFirehoseOutput) ToLoggingConfigurationDestinationConfigurationFirehoseOutput() LoggingConfigurationDestinationConfigurationFirehoseOutput {
	return o
}

func (o LoggingConfigurationDestinationConfigurationFirehoseOutput) ToLoggingConfigurationDestinationConfigurationFirehoseOutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationFirehoseOutput {
	return o
}

func (o LoggingConfigurationDestinationConfigurationFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingConfigurationDestinationConfigurationFirehose] {
	return pulumix.Output[LoggingConfigurationDestinationConfigurationFirehose]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
func (o LoggingConfigurationDestinationConfigurationFirehoseOutput) DeliveryStreamName() pulumix.Output[string] {
	return pulumix.Apply[LoggingConfigurationDestinationConfigurationFirehose](o, func(v LoggingConfigurationDestinationConfigurationFirehose) string { return v.DeliveryStreamName })
}

type LoggingConfigurationDestinationConfigurationS3 struct {
	// Name of the Amazon S3 bucket where chat activity will be logged.
	//
	// The following arguments are optional:
	BucketName string `pulumi:"bucketName"`
}

type LoggingConfigurationDestinationConfigurationS3Args struct {
	// Name of the Amazon S3 bucket where chat activity will be logged.
	//
	// The following arguments are optional:
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
}

func (LoggingConfigurationDestinationConfigurationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (i LoggingConfigurationDestinationConfigurationS3Args) ToLoggingConfigurationDestinationConfigurationS3Output() LoggingConfigurationDestinationConfigurationS3Output {
	return i.ToLoggingConfigurationDestinationConfigurationS3OutputWithContext(context.Background())
}

func (i LoggingConfigurationDestinationConfigurationS3Args) ToLoggingConfigurationDestinationConfigurationS3OutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigurationDestinationConfigurationS3Output)
}

func (i *LoggingConfigurationDestinationConfigurationS3Args) ToOutput(ctx context.Context) pulumix.Output[*LoggingConfigurationDestinationConfigurationS3Args] {
	return pulumix.Val(i)
}

type LoggingConfigurationDestinationConfigurationS3Output struct{ *pulumi.OutputState }

func (LoggingConfigurationDestinationConfigurationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (o LoggingConfigurationDestinationConfigurationS3Output) ToLoggingConfigurationDestinationConfigurationS3Output() LoggingConfigurationDestinationConfigurationS3Output {
	return o
}

func (o LoggingConfigurationDestinationConfigurationS3Output) ToLoggingConfigurationDestinationConfigurationS3OutputWithContext(ctx context.Context) LoggingConfigurationDestinationConfigurationS3Output {
	return o
}

func (o LoggingConfigurationDestinationConfigurationS3Output) ToOutput(ctx context.Context) pulumix.Output[LoggingConfigurationDestinationConfigurationS3] {
	return pulumix.Output[LoggingConfigurationDestinationConfigurationS3]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon S3 bucket where chat activity will be logged.
//
// The following arguments are optional:
func (o LoggingConfigurationDestinationConfigurationS3Output) BucketName() pulumix.Output[string] {
	return pulumix.Apply[LoggingConfigurationDestinationConfigurationS3](o, func(v LoggingConfigurationDestinationConfigurationS3) string { return v.BucketName })
}

type RoomMessageReviewHandler struct {
	// The fallback behavior (whether the message
	// is allowed or denied) if the handler does not return a valid response,
	// encounters an error, or times out. Valid values: `ALLOW`, `DENY`.
	FallbackResult *string `pulumi:"fallbackResult"`
	// ARN of the lambda message review handler function.
	Uri *string `pulumi:"uri"`
}

type RoomMessageReviewHandlerArgs struct {
	// The fallback behavior (whether the message
	// is allowed or denied) if the handler does not return a valid response,
	// encounters an error, or times out. Valid values: `ALLOW`, `DENY`.
	FallbackResult pulumix.Input[*string] `pulumi:"fallbackResult"`
	// ARN of the lambda message review handler function.
	Uri pulumix.Input[*string] `pulumi:"uri"`
}

func (RoomMessageReviewHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoomMessageReviewHandler)(nil)).Elem()
}

func (i RoomMessageReviewHandlerArgs) ToRoomMessageReviewHandlerOutput() RoomMessageReviewHandlerOutput {
	return i.ToRoomMessageReviewHandlerOutputWithContext(context.Background())
}

func (i RoomMessageReviewHandlerArgs) ToRoomMessageReviewHandlerOutputWithContext(ctx context.Context) RoomMessageReviewHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoomMessageReviewHandlerOutput)
}

func (i *RoomMessageReviewHandlerArgs) ToOutput(ctx context.Context) pulumix.Output[*RoomMessageReviewHandlerArgs] {
	return pulumix.Val(i)
}

type RoomMessageReviewHandlerOutput struct{ *pulumi.OutputState }

func (RoomMessageReviewHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoomMessageReviewHandler)(nil)).Elem()
}

func (o RoomMessageReviewHandlerOutput) ToRoomMessageReviewHandlerOutput() RoomMessageReviewHandlerOutput {
	return o
}

func (o RoomMessageReviewHandlerOutput) ToRoomMessageReviewHandlerOutputWithContext(ctx context.Context) RoomMessageReviewHandlerOutput {
	return o
}

func (o RoomMessageReviewHandlerOutput) ToOutput(ctx context.Context) pulumix.Output[RoomMessageReviewHandler] {
	return pulumix.Output[RoomMessageReviewHandler]{
		OutputState: o.OutputState,
	}
}

// The fallback behavior (whether the message
// is allowed or denied) if the handler does not return a valid response,
// encounters an error, or times out. Valid values: `ALLOW`, `DENY`.
func (o RoomMessageReviewHandlerOutput) FallbackResult() pulumix.Output[*string] {
	return pulumix.Apply[RoomMessageReviewHandler](o, func(v RoomMessageReviewHandler) *string { return v.FallbackResult })
}

// ARN of the lambda message review handler function.
func (o RoomMessageReviewHandlerOutput) Uri() pulumix.Output[*string] {
	return pulumix.Apply[RoomMessageReviewHandler](o, func(v RoomMessageReviewHandler) *string { return v.Uri })
}

func init() {
	pulumi.RegisterOutputType(LoggingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(LoggingConfigurationDestinationConfigurationCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(LoggingConfigurationDestinationConfigurationFirehoseOutput{})
	pulumi.RegisterOutputType(LoggingConfigurationDestinationConfigurationS3Output{})
	pulumi.RegisterOutputType(RoomMessageReviewHandlerOutput{})
}
