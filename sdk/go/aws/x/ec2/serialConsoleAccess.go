// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage whether serial console access is enabled for your AWS account in the current AWS region.
//
// > **NOTE:** Removing this resource disables serial console access.
type SerialConsoleAccess struct {
	pulumi.CustomResourceState

	// Whether or not serial console access is enabled. Valid values are `true` or `false`. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
}

// NewSerialConsoleAccess registers a new resource with the given unique name, arguments, and options.
func NewSerialConsoleAccess(ctx *pulumi.Context,
	name string, args *SerialConsoleAccessArgs, opts ...pulumi.ResourceOption) (*SerialConsoleAccess, error) {
	if args == nil {
		args = &SerialConsoleAccessArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SerialConsoleAccess
	err := ctx.RegisterResource("aws:ec2/serialConsoleAccess:SerialConsoleAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSerialConsoleAccess gets an existing SerialConsoleAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSerialConsoleAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SerialConsoleAccessState, opts ...pulumi.ResourceOption) (*SerialConsoleAccess, error) {
	var resource SerialConsoleAccess
	err := ctx.ReadResource("aws:ec2/serialConsoleAccess:SerialConsoleAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SerialConsoleAccess resources.
type serialConsoleAccessState struct {
	// Whether or not serial console access is enabled. Valid values are `true` or `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

type SerialConsoleAccessState struct {
	// Whether or not serial console access is enabled. Valid values are `true` or `false`. Defaults to `true`.
	Enabled pulumix.Input[*bool]
}

func (SerialConsoleAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*serialConsoleAccessState)(nil)).Elem()
}

type serialConsoleAccessArgs struct {
	// Whether or not serial console access is enabled. Valid values are `true` or `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// The set of arguments for constructing a SerialConsoleAccess resource.
type SerialConsoleAccessArgs struct {
	// Whether or not serial console access is enabled. Valid values are `true` or `false`. Defaults to `true`.
	Enabled pulumix.Input[*bool]
}

func (SerialConsoleAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serialConsoleAccessArgs)(nil)).Elem()
}

type SerialConsoleAccessOutput struct{ *pulumi.OutputState }

func (SerialConsoleAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialConsoleAccess)(nil)).Elem()
}

func (o SerialConsoleAccessOutput) ToSerialConsoleAccessOutput() SerialConsoleAccessOutput {
	return o
}

func (o SerialConsoleAccessOutput) ToSerialConsoleAccessOutputWithContext(ctx context.Context) SerialConsoleAccessOutput {
	return o
}

func (o SerialConsoleAccessOutput) ToOutput(ctx context.Context) pulumix.Output[SerialConsoleAccess] {
	return pulumix.Output[SerialConsoleAccess]{
		OutputState: o.OutputState,
	}
}

// Whether or not serial console access is enabled. Valid values are `true` or `false`. Defaults to `true`.
func (o SerialConsoleAccessOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[SerialConsoleAccess](o, func(v SerialConsoleAccess) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(SerialConsoleAccessOutput{})
}
