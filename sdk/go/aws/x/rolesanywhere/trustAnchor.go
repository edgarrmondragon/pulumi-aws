// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing a Roles Anywhere Trust Anchor.
type TrustAnchor struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Trust Anchor
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether or not the Trust Anchor should be enabled.
	Enabled pulumix.Output[bool] `pulumi:"enabled"`
	// The name of the Trust Anchor.
	Name pulumix.Output[string] `pulumi:"name"`
	// The source of trust, documented below
	Source pulumix.GPtrOutput[TrustAnchorSource, TrustAnchorSourceOutput] `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewTrustAnchor registers a new resource with the given unique name, arguments, and options.
func NewTrustAnchor(ctx *pulumi.Context,
	name string, args *TrustAnchorArgs, opts ...pulumi.ResourceOption) (*TrustAnchor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustAnchor
	err := ctx.RegisterResource("aws:rolesanywhere/trustAnchor:TrustAnchor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustAnchor gets an existing TrustAnchor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustAnchor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustAnchorState, opts ...pulumi.ResourceOption) (*TrustAnchor, error) {
	var resource TrustAnchor
	err := ctx.ReadResource("aws:rolesanywhere/trustAnchor:TrustAnchor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustAnchor resources.
type trustAnchorState struct {
	// Amazon Resource Name (ARN) of the Trust Anchor
	Arn *string `pulumi:"arn"`
	// Whether or not the Trust Anchor should be enabled.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Trust Anchor.
	Name *string `pulumi:"name"`
	// The source of trust, documented below
	Source *TrustAnchorSource `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type TrustAnchorState struct {
	// Amazon Resource Name (ARN) of the Trust Anchor
	Arn pulumix.Input[*string]
	// Whether or not the Trust Anchor should be enabled.
	Enabled pulumix.Input[*bool]
	// The name of the Trust Anchor.
	Name pulumix.Input[*string]
	// The source of trust, documented below
	Source pulumix.Input[*TrustAnchorSourceArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (TrustAnchorState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustAnchorState)(nil)).Elem()
}

type trustAnchorArgs struct {
	// Whether or not the Trust Anchor should be enabled.
	Enabled *bool `pulumi:"enabled"`
	// The name of the Trust Anchor.
	Name *string `pulumi:"name"`
	// The source of trust, documented below
	Source TrustAnchorSource `pulumi:"source"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a TrustAnchor resource.
type TrustAnchorArgs struct {
	// Whether or not the Trust Anchor should be enabled.
	Enabled pulumix.Input[*bool]
	// The name of the Trust Anchor.
	Name pulumix.Input[*string]
	// The source of trust, documented below
	Source pulumix.Input[*TrustAnchorSourceArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (TrustAnchorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustAnchorArgs)(nil)).Elem()
}

type TrustAnchorOutput struct{ *pulumi.OutputState }

func (TrustAnchorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchor)(nil)).Elem()
}

func (o TrustAnchorOutput) ToTrustAnchorOutput() TrustAnchorOutput {
	return o
}

func (o TrustAnchorOutput) ToTrustAnchorOutputWithContext(ctx context.Context) TrustAnchorOutput {
	return o
}

func (o TrustAnchorOutput) ToOutput(ctx context.Context) pulumix.Output[TrustAnchor] {
	return pulumix.Output[TrustAnchor]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Trust Anchor
func (o TrustAnchorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TrustAnchor](o, func(v TrustAnchor) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether or not the Trust Anchor should be enabled.
func (o TrustAnchorOutput) Enabled() pulumix.Output[bool] {
	value := pulumix.Apply[TrustAnchor](o, func(v TrustAnchor) pulumix.Output[bool] { return v.Enabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The name of the Trust Anchor.
func (o TrustAnchorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[TrustAnchor](o, func(v TrustAnchor) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The source of trust, documented below
func (o TrustAnchorOutput) Source() pulumix.GPtrOutput[TrustAnchorSource, TrustAnchorSourceOutput] {
	value := pulumix.Apply[TrustAnchor](o, func(v TrustAnchor) pulumix.GPtrOutput[TrustAnchorSource, TrustAnchorSourceOutput] { return v.Source })
	unwrapped := pulumix.Flatten[*TrustAnchorSource, pulumix.GPtrOutput[TrustAnchorSource, TrustAnchorSourceOutput]](value)
	return pulumix.GPtrOutput[TrustAnchorSource, TrustAnchorSourceOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrustAnchorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TrustAnchor](o, func(v TrustAnchor) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TrustAnchorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TrustAnchor](o, func(v TrustAnchor) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TrustAnchorOutput{})
}
