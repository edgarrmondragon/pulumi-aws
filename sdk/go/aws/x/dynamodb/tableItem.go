// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DynamoDB table item resource
//
// > **Note:** This resource is not meant to be used for managing large amounts of data in your table, it is not designed to scale.
//
//	You should perform **regular backups** of all data in the table, see [AWS docs for more](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/BackupRestore.html).
type TableItem struct {
	pulumi.CustomResourceState

	// Hash key to use for lookups and identification of the item
	HashKey pulumix.Output[string] `pulumi:"hashKey"`
	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	Item pulumix.Output[string] `pulumi:"item"`
	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	RangeKey pulumix.Output[*string] `pulumi:"rangeKey"`
	// Name of the table to contain the item.
	TableName pulumix.Output[string] `pulumi:"tableName"`
}

// NewTableItem registers a new resource with the given unique name, arguments, and options.
func NewTableItem(ctx *pulumi.Context,
	name string, args *TableItemArgs, opts ...pulumi.ResourceOption) (*TableItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HashKey == nil {
		return nil, errors.New("invalid value for required argument 'HashKey'")
	}
	if args.Item == nil {
		return nil, errors.New("invalid value for required argument 'Item'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TableItem
	err := ctx.RegisterResource("aws:dynamodb/tableItem:TableItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableItem gets an existing TableItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableItemState, opts ...pulumi.ResourceOption) (*TableItem, error) {
	var resource TableItem
	err := ctx.ReadResource("aws:dynamodb/tableItem:TableItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableItem resources.
type tableItemState struct {
	// Hash key to use for lookups and identification of the item
	HashKey *string `pulumi:"hashKey"`
	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	Item *string `pulumi:"item"`
	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	RangeKey *string `pulumi:"rangeKey"`
	// Name of the table to contain the item.
	TableName *string `pulumi:"tableName"`
}

type TableItemState struct {
	// Hash key to use for lookups and identification of the item
	HashKey pulumix.Input[*string]
	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	Item pulumix.Input[*string]
	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	RangeKey pulumix.Input[*string]
	// Name of the table to contain the item.
	TableName pulumix.Input[*string]
}

func (TableItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableItemState)(nil)).Elem()
}

type tableItemArgs struct {
	// Hash key to use for lookups and identification of the item
	HashKey string `pulumi:"hashKey"`
	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	Item string `pulumi:"item"`
	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	RangeKey *string `pulumi:"rangeKey"`
	// Name of the table to contain the item.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a TableItem resource.
type TableItemArgs struct {
	// Hash key to use for lookups and identification of the item
	HashKey pulumix.Input[string]
	// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
	Item pulumix.Input[string]
	// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
	RangeKey pulumix.Input[*string]
	// Name of the table to contain the item.
	TableName pulumix.Input[string]
}

func (TableItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableItemArgs)(nil)).Elem()
}

type TableItemOutput struct{ *pulumi.OutputState }

func (TableItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableItem)(nil)).Elem()
}

func (o TableItemOutput) ToTableItemOutput() TableItemOutput {
	return o
}

func (o TableItemOutput) ToTableItemOutputWithContext(ctx context.Context) TableItemOutput {
	return o
}

func (o TableItemOutput) ToOutput(ctx context.Context) pulumix.Output[TableItem] {
	return pulumix.Output[TableItem]{
		OutputState: o.OutputState,
	}
}

// Hash key to use for lookups and identification of the item
func (o TableItemOutput) HashKey() pulumix.Output[string] {
	value := pulumix.Apply[TableItem](o, func(v TableItem) pulumix.Output[string] { return v.HashKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON representation of a map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.
func (o TableItemOutput) Item() pulumix.Output[string] {
	value := pulumix.Apply[TableItem](o, func(v TableItem) pulumix.Output[string] { return v.Item })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Range key to use for lookups and identification of the item. Required if there is range key defined in the table.
func (o TableItemOutput) RangeKey() pulumix.Output[*string] {
	value := pulumix.Apply[TableItem](o, func(v TableItem) pulumix.Output[*string] { return v.RangeKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the table to contain the item.
func (o TableItemOutput) TableName() pulumix.Output[string] {
	value := pulumix.Apply[TableItem](o, func(v TableItem) pulumix.Output[string] { return v.TableName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TableItemOutput{})
}
