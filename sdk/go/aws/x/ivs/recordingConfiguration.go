// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IVS (Interactive Video) Recording Configuration.
type RecordingConfiguration struct {
	pulumi.CustomResourceState

	// ARN of the Recording Configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Object containing destination configuration for where recorded video will be stored.
	DestinationConfiguration pulumix.GPtrOutput[RecordingConfigurationDestinationConfiguration, RecordingConfigurationDestinationConfigurationOutput] `pulumi:"destinationConfiguration"`
	// Recording Configuration name.
	Name pulumix.Output[string] `pulumi:"name"`
	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	RecordingReconnectWindowSeconds pulumix.Output[int] `pulumi:"recordingReconnectWindowSeconds"`
	// The current state of the Recording Configuration.
	State pulumix.Output[string] `pulumi:"state"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration pulumix.GPtrOutput[RecordingConfigurationThumbnailConfiguration, RecordingConfigurationThumbnailConfigurationOutput] `pulumi:"thumbnailConfiguration"`
}

// NewRecordingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRecordingConfiguration(ctx *pulumi.Context,
	name string, args *RecordingConfigurationArgs, opts ...pulumi.ResourceOption) (*RecordingConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'DestinationConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecordingConfiguration
	err := ctx.RegisterResource("aws:ivs/recordingConfiguration:RecordingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordingConfiguration gets an existing RecordingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordingConfigurationState, opts ...pulumi.ResourceOption) (*RecordingConfiguration, error) {
	var resource RecordingConfiguration
	err := ctx.ReadResource("aws:ivs/recordingConfiguration:RecordingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordingConfiguration resources.
type recordingConfigurationState struct {
	// ARN of the Recording Configuration.
	Arn *string `pulumi:"arn"`
	// Object containing destination configuration for where recorded video will be stored.
	DestinationConfiguration *RecordingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	// Recording Configuration name.
	Name *string `pulumi:"name"`
	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	RecordingReconnectWindowSeconds *int `pulumi:"recordingReconnectWindowSeconds"`
	// The current state of the Recording Configuration.
	State *string `pulumi:"state"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration *RecordingConfigurationThumbnailConfiguration `pulumi:"thumbnailConfiguration"`
}

type RecordingConfigurationState struct {
	// ARN of the Recording Configuration.
	Arn pulumix.Input[*string]
	// Object containing destination configuration for where recorded video will be stored.
	DestinationConfiguration pulumix.Input[*RecordingConfigurationDestinationConfigurationArgs]
	// Recording Configuration name.
	Name pulumix.Input[*string]
	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	RecordingReconnectWindowSeconds pulumix.Input[*int]
	// The current state of the Recording Configuration.
	State pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration pulumix.Input[*RecordingConfigurationThumbnailConfigurationArgs]
}

func (RecordingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordingConfigurationState)(nil)).Elem()
}

type recordingConfigurationArgs struct {
	// Object containing destination configuration for where recorded video will be stored.
	DestinationConfiguration RecordingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	// Recording Configuration name.
	Name *string `pulumi:"name"`
	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	RecordingReconnectWindowSeconds *int `pulumi:"recordingReconnectWindowSeconds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration *RecordingConfigurationThumbnailConfiguration `pulumi:"thumbnailConfiguration"`
}

// The set of arguments for constructing a RecordingConfiguration resource.
type RecordingConfigurationArgs struct {
	// Object containing destination configuration for where recorded video will be stored.
	DestinationConfiguration pulumix.Input[*RecordingConfigurationDestinationConfigurationArgs]
	// Recording Configuration name.
	Name pulumix.Input[*string]
	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	RecordingReconnectWindowSeconds pulumix.Input[*int]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration pulumix.Input[*RecordingConfigurationThumbnailConfigurationArgs]
}

func (RecordingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordingConfigurationArgs)(nil)).Elem()
}

type RecordingConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationOutput) ToRecordingConfigurationOutput() RecordingConfigurationOutput {
	return o
}

func (o RecordingConfigurationOutput) ToRecordingConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationOutput {
	return o
}

func (o RecordingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfiguration] {
	return pulumix.Output[RecordingConfiguration]{
		OutputState: o.OutputState,
	}
}

// ARN of the Recording Configuration.
func (o RecordingConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Object containing destination configuration for where recorded video will be stored.
func (o RecordingConfigurationOutput) DestinationConfiguration() pulumix.GPtrOutput[RecordingConfigurationDestinationConfiguration, RecordingConfigurationDestinationConfigurationOutput] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.GPtrOutput[RecordingConfigurationDestinationConfiguration, RecordingConfigurationDestinationConfigurationOutput] {
		return v.DestinationConfiguration
	})
	unwrapped := pulumix.Flatten[*RecordingConfigurationDestinationConfiguration, pulumix.GPtrOutput[RecordingConfigurationDestinationConfiguration, RecordingConfigurationDestinationConfigurationOutput]](value)
	return pulumix.GPtrOutput[RecordingConfigurationDestinationConfiguration, RecordingConfigurationDestinationConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Recording Configuration name.
func (o RecordingConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
func (o RecordingConfigurationOutput) RecordingReconnectWindowSeconds() pulumix.Output[int] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.Output[int] { return v.RecordingReconnectWindowSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The current state of the Recording Configuration.
func (o RecordingConfigurationOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RecordingConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RecordingConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
func (o RecordingConfigurationOutput) ThumbnailConfiguration() pulumix.GPtrOutput[RecordingConfigurationThumbnailConfiguration, RecordingConfigurationThumbnailConfigurationOutput] {
	value := pulumix.Apply[RecordingConfiguration](o, func(v RecordingConfiguration) pulumix.GPtrOutput[RecordingConfigurationThumbnailConfiguration, RecordingConfigurationThumbnailConfigurationOutput] {
		return v.ThumbnailConfiguration
	})
	unwrapped := pulumix.Flatten[*RecordingConfigurationThumbnailConfiguration, pulumix.GPtrOutput[RecordingConfigurationThumbnailConfiguration, RecordingConfigurationThumbnailConfigurationOutput]](value)
	return pulumix.GPtrOutput[RecordingConfigurationThumbnailConfiguration, RecordingConfigurationThumbnailConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RecordingConfigurationOutput{})
}
