// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECR Authorization Token data source allows the authorization token, proxy endpoint, token expiration date, user name and password to be retrieved for an ECR repository.
func GetAuthorizationToken(ctx *pulumi.Context, args *GetAuthorizationTokenArgs, opts ...pulumi.InvokeOption) (*GetAuthorizationTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAuthorizationTokenResult
	err := ctx.Invoke("aws:ecr/getAuthorizationToken:getAuthorizationToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthorizationToken.
type GetAuthorizationTokenArgs struct {
	// AWS account ID of the ECR Repository. If not specified the default account is assumed.
	RegistryId *string `pulumi:"registryId"`
}

// A collection of values returned by getAuthorizationToken.
type GetAuthorizationTokenResult struct {
	// Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
	AuthorizationToken string `pulumi:"authorizationToken"`
	// Time in UTC RFC3339 format when the authorization token expires.
	ExpiresAt string `pulumi:"expiresAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Password decoded from the authorization token.
	Password string `pulumi:"password"`
	// Registry URL to use in the docker login command.
	ProxyEndpoint string  `pulumi:"proxyEndpoint"`
	RegistryId    *string `pulumi:"registryId"`
	// User name decoded from the authorization token.
	UserName string `pulumi:"userName"`
}

func GetAuthorizationTokenOutput(ctx *pulumi.Context, args GetAuthorizationTokenOutputArgs, opts ...pulumi.InvokeOption) GetAuthorizationTokenResultOutput {
	outputResult := pulumix.ApplyErr[*GetAuthorizationTokenArgs](args.ToOutput(), func(plainArgs *GetAuthorizationTokenArgs) (*GetAuthorizationTokenResult, error) {
		return GetAuthorizationToken(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetAuthorizationTokenResultOutput, *GetAuthorizationTokenResult](outputResult)
}

// A collection of arguments for invoking getAuthorizationToken.
type GetAuthorizationTokenOutputArgs struct {
	// AWS account ID of the ECR Repository. If not specified the default account is assumed.
	RegistryId pulumix.Input[*string] `pulumi:"registryId"`
}

func (args GetAuthorizationTokenOutputArgs) ToOutput() pulumix.Output[*GetAuthorizationTokenArgs] {
	allArgs := pulumix.All(
		args.RegistryId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetAuthorizationTokenArgs {
		return &GetAuthorizationTokenArgs{
			RegistryId: resolvedArgs[0].(*string),
		}
	})
}

type GetAuthorizationTokenResultOutput struct{ *pulumi.OutputState }

func (GetAuthorizationTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthorizationTokenResult)(nil)).Elem()
}

func (o GetAuthorizationTokenResultOutput) ToOutput(context.Context) pulumix.Output[*GetAuthorizationTokenResult] {
	return pulumix.Output[*GetAuthorizationTokenResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAuthorizationTokenResultOutput) AuthorizationToken() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.AuthorizationToken })
}

func (o GetAuthorizationTokenResultOutput) ExpiresAt() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.ExpiresAt })
}

func (o GetAuthorizationTokenResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.Id })
}

func (o GetAuthorizationTokenResultOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.Password })
}

func (o GetAuthorizationTokenResultOutput) ProxyEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.ProxyEndpoint })
}

func (o GetAuthorizationTokenResultOutput) RegistryId() pulumix.Output[*string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) *string { return v.RegistryId })
}

func (o GetAuthorizationTokenResultOutput) UserName() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.UserName })
}
