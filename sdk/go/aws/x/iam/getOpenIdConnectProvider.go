// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// IAM OpenID Connect provider. By using this data source, you can retrieve the
// the resource information by either its `arn` or `url`.
func LookupOpenIdConnectProvider(ctx *pulumi.Context, args *LookupOpenIdConnectProviderArgs, opts ...pulumi.InvokeOption) (*LookupOpenIdConnectProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOpenIdConnectProviderResult
	err := ctx.Invoke("aws:iam/getOpenIdConnectProvider:getOpenIdConnectProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpenIdConnectProvider.
type LookupOpenIdConnectProviderArgs struct {
	// ARN of the OpenID Connect provider.
	Arn *string `pulumi:"arn"`
	// Map of resource tags for the IAM OIDC provider.
	Tags map[string]string `pulumi:"tags"`
	// URL of the OpenID Connect provider.
	Url *string `pulumi:"url"`
}

// A collection of values returned by getOpenIdConnectProvider.
type LookupOpenIdConnectProviderResult struct {
	Arn string `pulumi:"arn"`
	// List of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the clientId parameter on OAuth requests.)
	ClientIdLists []string `pulumi:"clientIdLists"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Map of resource tags for the IAM OIDC provider.
	Tags map[string]string `pulumi:"tags"`
	// List of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s).
	ThumbprintLists []string `pulumi:"thumbprintLists"`
	Url             string   `pulumi:"url"`
}

func LookupOpenIdConnectProviderOutput(ctx *pulumi.Context, args LookupOpenIdConnectProviderOutputArgs, opts ...pulumi.InvokeOption) LookupOpenIdConnectProviderResultOutput {
	outputResult := pulumix.ApplyErr[*LookupOpenIdConnectProviderArgs](args.ToOutput(), func(plainArgs *LookupOpenIdConnectProviderArgs) (*LookupOpenIdConnectProviderResult, error) {
		return LookupOpenIdConnectProvider(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupOpenIdConnectProviderResultOutput, *LookupOpenIdConnectProviderResult](outputResult)
}

// A collection of arguments for invoking getOpenIdConnectProvider.
type LookupOpenIdConnectProviderOutputArgs struct {
	// ARN of the OpenID Connect provider.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Map of resource tags for the IAM OIDC provider.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// URL of the OpenID Connect provider.
	Url pulumix.Input[*string] `pulumi:"url"`
}

func (args LookupOpenIdConnectProviderOutputArgs) ToOutput() pulumix.Output[*LookupOpenIdConnectProviderArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.Url.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupOpenIdConnectProviderArgs {
		return &LookupOpenIdConnectProviderArgs{
			Arn:  resolvedArgs[0].(*string),
			Tags: resolvedArgs[1].(map[string]string),
			Url:  resolvedArgs[2].(*string),
		}
	})
}

type LookupOpenIdConnectProviderResultOutput struct{ *pulumi.OutputState }

func (LookupOpenIdConnectProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenIdConnectProviderResult)(nil)).Elem()
}

func (o LookupOpenIdConnectProviderResultOutput) ToOutput(context.Context) pulumix.Output[*LookupOpenIdConnectProviderResult] {
	return pulumix.Output[*LookupOpenIdConnectProviderResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupOpenIdConnectProviderResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenIdConnectProviderResult](o, func(v *LookupOpenIdConnectProviderResult) string { return v.Arn })
}

func (o LookupOpenIdConnectProviderResultOutput) ClientIdLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupOpenIdConnectProviderResult](o, func(v *LookupOpenIdConnectProviderResult) []string { return v.ClientIdLists })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOpenIdConnectProviderResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenIdConnectProviderResult](o, func(v *LookupOpenIdConnectProviderResult) string { return v.Id })
}

func (o LookupOpenIdConnectProviderResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupOpenIdConnectProviderResult](o, func(v *LookupOpenIdConnectProviderResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOpenIdConnectProviderResultOutput) ThumbprintLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupOpenIdConnectProviderResult](o, func(v *LookupOpenIdConnectProviderResult) []string { return v.ThumbprintLists })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOpenIdConnectProviderResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenIdConnectProviderResult](o, func(v *LookupOpenIdConnectProviderResult) string { return v.Url })
}
