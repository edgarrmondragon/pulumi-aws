// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an API Gateway REST Deployment. A deployment is a snapshot of the REST API configuration. The deployment can then be published to callable endpoints via the `apigateway.Stage` resource and optionally managed further with the `apigateway.BasePathMapping` resource, `apigateway.DomainName` resource, and `awsApiMethodSettings` resource. For more information, see the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html).
//
// To properly capture all REST API configuration in a deployment, this resource must have dependencies on all prior resources that manage resources/paths, methods, integrations, etc.
//
// * For REST APIs that are configured via OpenAPI specification (`apigateway.RestApi` resource `body` argument), no special dependency setup is needed beyond referencing the  `id` attribute of that resource unless additional resources have further customized the REST API.
// * When the REST API configuration involves other resources (`apigateway.Integration` resource), the dependency setup can be done with implicit resource references in the `triggers` argument or explicit resource references using the [resource `dependsOn` custom option](https://www.pulumi.com/docs/intro/concepts/resources/#dependson). The `triggers` argument should be preferred over `dependsOn`, since `dependsOn` can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.
//
// !> **WARNING:** It is recommended to use the `apigateway.Stage` resource instead of managing an API Gateway Stage via the `stageName` argument of this resource. When this resource is recreated (REST API redeployment) with the `stageName` configured, the stage is deleted and recreated. This will cause a temporary service interruption, increase provide plan differences, and can require a second apply to recreate any downstream stage configuration such as associated `awsApiMethodSettings` resources.
type Deployment struct {
	pulumi.CustomResourceState

	// Creation date of the deployment
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// Description of the deployment
	Description pulumix.Output[*string] `pulumi:"description"`
	// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn pulumix.Output[string] `pulumi:"executionArn"`
	// URL to invoke the API pointing to the stage,
	// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl pulumix.Output[string] `pulumi:"invokeUrl"`
	// REST API identifier.
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// Description to set on the stage managed by the `stageName` argument.
	StageDescription pulumix.Output[*string] `pulumi:"stageDescription"`
	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the `apigateway.Stage` resource instead to manage stages.
	StageName pulumix.Output[*string] `pulumi:"stageName"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers pulumix.MapOutput[string] `pulumi:"triggers"`
	// Map to set on the stage managed by the `stageName` argument.
	Variables pulumix.MapOutput[string] `pulumi:"variables"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("aws:apigateway/deployment:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("aws:apigateway/deployment:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
	// Creation date of the deployment
	CreatedDate *string `pulumi:"createdDate"`
	// Description of the deployment
	Description *string `pulumi:"description"`
	// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn *string `pulumi:"executionArn"`
	// URL to invoke the API pointing to the stage,
	// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl *string `pulumi:"invokeUrl"`
	// REST API identifier.
	RestApi interface{} `pulumi:"restApi"`
	// Description to set on the stage managed by the `stageName` argument.
	StageDescription *string `pulumi:"stageDescription"`
	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the `apigateway.Stage` resource instead to manage stages.
	StageName *string `pulumi:"stageName"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers map[string]string `pulumi:"triggers"`
	// Map to set on the stage managed by the `stageName` argument.
	Variables map[string]string `pulumi:"variables"`
}

type DeploymentState struct {
	// Creation date of the deployment
	CreatedDate pulumix.Input[*string]
	// Description of the deployment
	Description pulumix.Input[*string]
	// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn pulumix.Input[*string]
	// URL to invoke the API pointing to the stage,
	// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl pulumix.Input[*string]
	// REST API identifier.
	RestApi pulumix.Input[*any]
	// Description to set on the stage managed by the `stageName` argument.
	StageDescription pulumix.Input[*string]
	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the `apigateway.Stage` resource instead to manage stages.
	StageName pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers pulumix.Input[map[string]string]
	// Map to set on the stage managed by the `stageName` argument.
	Variables pulumix.Input[map[string]string]
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// Description of the deployment
	Description *string `pulumi:"description"`
	// REST API identifier.
	RestApi interface{} `pulumi:"restApi"`
	// Description to set on the stage managed by the `stageName` argument.
	StageDescription *string `pulumi:"stageDescription"`
	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the `apigateway.Stage` resource instead to manage stages.
	StageName *string `pulumi:"stageName"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers map[string]string `pulumi:"triggers"`
	// Map to set on the stage managed by the `stageName` argument.
	Variables map[string]string `pulumi:"variables"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// Description of the deployment
	Description pulumix.Input[*string]
	// REST API identifier.
	RestApi pulumix.Input[any]
	// Description to set on the stage managed by the `stageName` argument.
	StageDescription pulumix.Input[*string]
	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the `apigateway.Stage` resource instead to manage stages.
	StageName pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	Triggers pulumix.Input[map[string]string]
	// Map to set on the stage managed by the `stageName` argument.
	Variables pulumix.Input[map[string]string]
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[Deployment] {
	return pulumix.Output[Deployment]{
		OutputState: o.OutputState,
	}
}

// Creation date of the deployment
func (o DeploymentOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the deployment
func (o DeploymentOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
// when allowing API Gateway to invoke a Lambda function,
// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
func (o DeploymentOutput) ExecutionArn() pulumix.Output[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[string] { return v.ExecutionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// URL to invoke the API pointing to the stage,
// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
func (o DeploymentOutput) InvokeUrl() pulumix.Output[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[string] { return v.InvokeUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// REST API identifier.
func (o DeploymentOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description to set on the stage managed by the `stageName` argument.
func (o DeploymentOutput) StageDescription() pulumix.Output[*string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[*string] { return v.StageDescription })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the `apigateway.Stage` resource instead to manage stages.
func (o DeploymentOutput) StageName() pulumix.Output[*string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.Output[*string] { return v.StageName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
func (o DeploymentOutput) Triggers() pulumix.MapOutput[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.MapOutput[string] { return v.Triggers })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map to set on the stage managed by the `stageName` argument.
func (o DeploymentOutput) Variables() pulumix.MapOutput[string] {
	value := pulumix.Apply[Deployment](o, func(v Deployment) pulumix.MapOutput[string] { return v.Variables })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DeploymentOutput{})
}
