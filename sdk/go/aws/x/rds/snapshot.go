// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an RDS database instance snapshot. For managing RDS database cluster snapshots, see the `rds.ClusterSnapshot` resource.
type Snapshot struct {
	pulumi.CustomResourceState

	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumix.Output[int] `pulumi:"allocatedStorage"`
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier pulumix.Output[string] `pulumi:"dbInstanceIdentifier"`
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn pulumix.Output[string] `pulumi:"dbSnapshotArn"`
	// The Identifier for the snapshot.
	DbSnapshotIdentifier pulumix.Output[string] `pulumi:"dbSnapshotIdentifier"`
	// Specifies whether the DB snapshot is encrypted.
	Encrypted pulumix.Output[bool] `pulumi:"encrypted"`
	// Specifies the name of the database engine.
	Engine pulumix.Output[string] `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops pulumix.Output[int] `pulumi:"iops"`
	// The ARN for the KMS encryption key.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel pulumix.Output[string] `pulumi:"licenseModel"`
	// Provides the option group name for the DB snapshot.
	OptionGroupName pulumix.Output[string] `pulumi:"optionGroupName"`
	Port            pulumix.Output[int]    `pulumi:"port"`
	// List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
	SharedAccounts pulumix.ArrayOutput[string] `pulumi:"sharedAccounts"`
	SnapshotType   pulumix.Output[string]      `pulumi:"snapshotType"`
	// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier pulumix.Output[string] `pulumi:"sourceDbSnapshotIdentifier"`
	// The region that the DB snapshot was created in or copied from.
	SourceRegion pulumix.Output[string] `pulumi:"sourceRegion"`
	// Specifies the status of this DB snapshot.
	Status pulumix.Output[string] `pulumi:"status"`
	// Specifies the storage type associated with DB snapshot.
	StorageType pulumix.Output[string] `pulumi:"storageType"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Provides the VPC ID associated with the DB snapshot.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceIdentifier'")
	}
	if args.DbSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbSnapshotIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("aws:rds/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("aws:rds/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier *string `pulumi:"dbInstanceIdentifier"`
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn *string `pulumi:"dbSnapshotArn"`
	// The Identifier for the snapshot.
	DbSnapshotIdentifier *string `pulumi:"dbSnapshotIdentifier"`
	// Specifies whether the DB snapshot is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// Specifies the name of the database engine.
	Engine *string `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion *string `pulumi:"engineVersion"`
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops *int `pulumi:"iops"`
	// The ARN for the KMS encryption key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel *string `pulumi:"licenseModel"`
	// Provides the option group name for the DB snapshot.
	OptionGroupName *string `pulumi:"optionGroupName"`
	Port            *int    `pulumi:"port"`
	// List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
	SharedAccounts []string `pulumi:"sharedAccounts"`
	SnapshotType   *string  `pulumi:"snapshotType"`
	// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier *string `pulumi:"sourceDbSnapshotIdentifier"`
	// The region that the DB snapshot was created in or copied from.
	SourceRegion *string `pulumi:"sourceRegion"`
	// Specifies the status of this DB snapshot.
	Status *string `pulumi:"status"`
	// Specifies the storage type associated with DB snapshot.
	StorageType *string `pulumi:"storageType"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Provides the VPC ID associated with the DB snapshot.
	VpcId *string `pulumi:"vpcId"`
}

type SnapshotState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumix.Input[*int]
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone pulumix.Input[*string]
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn pulumix.Input[*string]
	// The Identifier for the snapshot.
	DbSnapshotIdentifier pulumix.Input[*string]
	// Specifies whether the DB snapshot is encrypted.
	Encrypted pulumix.Input[*bool]
	// Specifies the name of the database engine.
	Engine pulumix.Input[*string]
	// Specifies the version of the database engine.
	EngineVersion pulumix.Input[*string]
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops pulumix.Input[*int]
	// The ARN for the KMS encryption key.
	KmsKeyId pulumix.Input[*string]
	// License model information for the restored DB instance.
	LicenseModel pulumix.Input[*string]
	// Provides the option group name for the DB snapshot.
	OptionGroupName pulumix.Input[*string]
	Port            pulumix.Input[*int]
	// List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
	SharedAccounts pulumix.Input[[]string]
	SnapshotType   pulumix.Input[*string]
	// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier pulumix.Input[*string]
	// The region that the DB snapshot was created in or copied from.
	SourceRegion pulumix.Input[*string]
	// Specifies the status of this DB snapshot.
	Status pulumix.Input[*string]
	// Specifies the storage type associated with DB snapshot.
	StorageType pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Provides the VPC ID associated with the DB snapshot.
	VpcId pulumix.Input[*string]
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier string `pulumi:"dbInstanceIdentifier"`
	// The Identifier for the snapshot.
	DbSnapshotIdentifier string `pulumi:"dbSnapshotIdentifier"`
	// List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier pulumix.Input[string]
	// The Identifier for the snapshot.
	DbSnapshotIdentifier pulumix.Input[string]
	// List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
	SharedAccounts pulumix.Input[[]string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[Snapshot] {
	return pulumix.Output[Snapshot]{
		OutputState: o.OutputState,
	}
}

// Specifies the allocated storage size in gigabytes (GB).
func (o SnapshotOutput) AllocatedStorage() pulumix.Output[int] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[int] { return v.AllocatedStorage })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
func (o SnapshotOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DB Instance Identifier from which to take the snapshot.
func (o SnapshotOutput) DbInstanceIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.DbInstanceIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) for the DB snapshot.
func (o SnapshotOutput) DbSnapshotArn() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.DbSnapshotArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Identifier for the snapshot.
func (o SnapshotOutput) DbSnapshotIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.DbSnapshotIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether the DB snapshot is encrypted.
func (o SnapshotOutput) Encrypted() pulumix.Output[bool] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[bool] { return v.Encrypted })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Specifies the name of the database engine.
func (o SnapshotOutput) Engine() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.Engine })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the version of the database engine.
func (o SnapshotOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
func (o SnapshotOutput) Iops() pulumix.Output[int] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[int] { return v.Iops })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ARN for the KMS encryption key.
func (o SnapshotOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// License model information for the restored DB instance.
func (o SnapshotOutput) LicenseModel() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.LicenseModel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Provides the option group name for the DB snapshot.
func (o SnapshotOutput) OptionGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.OptionGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o SnapshotOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
func (o SnapshotOutput) SharedAccounts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.ArrayOutput[string] { return v.SharedAccounts })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o SnapshotOutput) SnapshotType() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.SnapshotType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
func (o SnapshotOutput) SourceDbSnapshotIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.SourceDbSnapshotIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The region that the DB snapshot was created in or copied from.
func (o SnapshotOutput) SourceRegion() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.SourceRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the status of this DB snapshot.
func (o SnapshotOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the storage type associated with DB snapshot.
func (o SnapshotOutput) StorageType() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.StorageType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SnapshotOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SnapshotOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Provides the VPC ID associated with the DB snapshot.
func (o SnapshotOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[Snapshot](o, func(v Snapshot) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SnapshotOutput{})
}
