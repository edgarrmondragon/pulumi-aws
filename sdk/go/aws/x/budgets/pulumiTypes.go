// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BudgetActionActionThreshold struct {
	// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
	ActionThresholdType string `pulumi:"actionThresholdType"`
	// The threshold of a notification.
	ActionThresholdValue float64 `pulumi:"actionThresholdValue"`
}

type BudgetActionActionThresholdArgs struct {
	// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
	ActionThresholdType pulumix.Input[string] `pulumi:"actionThresholdType"`
	// The threshold of a notification.
	ActionThresholdValue pulumix.Input[float64] `pulumi:"actionThresholdValue"`
}

func (BudgetActionActionThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionActionThreshold)(nil)).Elem()
}

func (i BudgetActionActionThresholdArgs) ToBudgetActionActionThresholdOutput() BudgetActionActionThresholdOutput {
	return i.ToBudgetActionActionThresholdOutputWithContext(context.Background())
}

func (i BudgetActionActionThresholdArgs) ToBudgetActionActionThresholdOutputWithContext(ctx context.Context) BudgetActionActionThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionActionThresholdOutput)
}

func (i *BudgetActionActionThresholdArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionActionThresholdArgs] {
	return pulumix.Val(i)
}

type BudgetActionActionThresholdOutput struct{ *pulumi.OutputState }

func (BudgetActionActionThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionActionThreshold)(nil)).Elem()
}

func (o BudgetActionActionThresholdOutput) ToBudgetActionActionThresholdOutput() BudgetActionActionThresholdOutput {
	return o
}

func (o BudgetActionActionThresholdOutput) ToBudgetActionActionThresholdOutputWithContext(ctx context.Context) BudgetActionActionThresholdOutput {
	return o
}

func (o BudgetActionActionThresholdOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionActionThreshold] {
	return pulumix.Output[BudgetActionActionThreshold]{
		OutputState: o.OutputState,
	}
}

// The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
func (o BudgetActionActionThresholdOutput) ActionThresholdType() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionActionThreshold](o, func(v BudgetActionActionThreshold) string { return v.ActionThresholdType })
}

// The threshold of a notification.
func (o BudgetActionActionThresholdOutput) ActionThresholdValue() pulumix.Output[float64] {
	return pulumix.Apply[BudgetActionActionThreshold](o, func(v BudgetActionActionThreshold) float64 { return v.ActionThresholdValue })
}

type BudgetActionDefinition struct {
	// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
	IamActionDefinition *BudgetActionDefinitionIamActionDefinition `pulumi:"iamActionDefinition"`
	// The service control policies (SCPs) action definition details. See SCP Action Definition.
	ScpActionDefinition *BudgetActionDefinitionScpActionDefinition `pulumi:"scpActionDefinition"`
	// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
	SsmActionDefinition *BudgetActionDefinitionSsmActionDefinition `pulumi:"ssmActionDefinition"`
}

type BudgetActionDefinitionArgs struct {
	// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
	IamActionDefinition pulumix.Input[*BudgetActionDefinitionIamActionDefinitionArgs] `pulumi:"iamActionDefinition"`
	// The service control policies (SCPs) action definition details. See SCP Action Definition.
	ScpActionDefinition pulumix.Input[*BudgetActionDefinitionScpActionDefinitionArgs] `pulumi:"scpActionDefinition"`
	// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
	SsmActionDefinition pulumix.Input[*BudgetActionDefinitionSsmActionDefinitionArgs] `pulumi:"ssmActionDefinition"`
}

func (BudgetActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionArgs) ToBudgetActionDefinitionOutput() BudgetActionDefinitionOutput {
	return i.ToBudgetActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionArgs) ToBudgetActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionOutput)
}

func (i *BudgetActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionArgs] {
	return pulumix.Val(i)
}

type BudgetActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionOutput) ToBudgetActionDefinitionOutput() BudgetActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionOutput) ToBudgetActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinition] {
	return pulumix.Output[BudgetActionDefinition]{
		OutputState: o.OutputState,
	}
}

// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
func (o BudgetActionDefinitionOutput) IamActionDefinition() pulumix.GPtrOutput[BudgetActionDefinitionIamActionDefinition, BudgetActionDefinitionIamActionDefinitionOutput] {
	value := pulumix.Apply[BudgetActionDefinition](o, func(v BudgetActionDefinition) *BudgetActionDefinitionIamActionDefinition {
		return v.IamActionDefinition
	})
	return pulumix.GPtrOutput[BudgetActionDefinitionIamActionDefinition, BudgetActionDefinitionIamActionDefinitionOutput]{OutputState: value.OutputState}
}

// The service control policies (SCPs) action definition details. See SCP Action Definition.
func (o BudgetActionDefinitionOutput) ScpActionDefinition() pulumix.GPtrOutput[BudgetActionDefinitionScpActionDefinition, BudgetActionDefinitionScpActionDefinitionOutput] {
	value := pulumix.Apply[BudgetActionDefinition](o, func(v BudgetActionDefinition) *BudgetActionDefinitionScpActionDefinition {
		return v.ScpActionDefinition
	})
	return pulumix.GPtrOutput[BudgetActionDefinitionScpActionDefinition, BudgetActionDefinitionScpActionDefinitionOutput]{OutputState: value.OutputState}
}

// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
func (o BudgetActionDefinitionOutput) SsmActionDefinition() pulumix.GPtrOutput[BudgetActionDefinitionSsmActionDefinition, BudgetActionDefinitionSsmActionDefinitionOutput] {
	value := pulumix.Apply[BudgetActionDefinition](o, func(v BudgetActionDefinition) *BudgetActionDefinitionSsmActionDefinition {
		return v.SsmActionDefinition
	})
	return pulumix.GPtrOutput[BudgetActionDefinitionSsmActionDefinition, BudgetActionDefinitionSsmActionDefinitionOutput]{OutputState: value.OutputState}
}

type BudgetActionDefinitionIamActionDefinition struct {
	// A list of groups to be attached. There must be at least one group.
	Groups []string `pulumi:"groups"`
	// The Amazon Resource Name (ARN) of the policy to be attached.
	PolicyArn string `pulumi:"policyArn"`
	// A list of roles to be attached. There must be at least one role.
	Roles []string `pulumi:"roles"`
	// A list of users to be attached. There must be at least one user.
	Users []string `pulumi:"users"`
}

type BudgetActionDefinitionIamActionDefinitionArgs struct {
	// A list of groups to be attached. There must be at least one group.
	Groups pulumix.Input[[]string] `pulumi:"groups"`
	// The Amazon Resource Name (ARN) of the policy to be attached.
	PolicyArn pulumix.Input[string] `pulumi:"policyArn"`
	// A list of roles to be attached. There must be at least one role.
	Roles pulumix.Input[[]string] `pulumi:"roles"`
	// A list of users to be attached. There must be at least one user.
	Users pulumix.Input[[]string] `pulumi:"users"`
}

func (BudgetActionDefinitionIamActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionIamActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToBudgetActionDefinitionIamActionDefinitionOutput() BudgetActionDefinitionIamActionDefinitionOutput {
	return i.ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionIamActionDefinitionArgs) ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionIamActionDefinitionOutput)
}

func (i *BudgetActionDefinitionIamActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionIamActionDefinitionArgs] {
	return pulumix.Val(i)
}

type BudgetActionDefinitionIamActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionIamActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionIamActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToBudgetActionDefinitionIamActionDefinitionOutput() BudgetActionDefinitionIamActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToBudgetActionDefinitionIamActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionIamActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionIamActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionIamActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionIamActionDefinition]{
		OutputState: o.OutputState,
	}
}

// A list of groups to be attached. There must be at least one group.
func (o BudgetActionDefinitionIamActionDefinitionOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetActionDefinitionIamActionDefinition](o, func(v BudgetActionDefinitionIamActionDefinition) []string { return v.Groups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the policy to be attached.
func (o BudgetActionDefinitionIamActionDefinitionOutput) PolicyArn() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionDefinitionIamActionDefinition](o, func(v BudgetActionDefinitionIamActionDefinition) string { return v.PolicyArn })
}

// A list of roles to be attached. There must be at least one role.
func (o BudgetActionDefinitionIamActionDefinitionOutput) Roles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetActionDefinitionIamActionDefinition](o, func(v BudgetActionDefinitionIamActionDefinition) []string { return v.Roles })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of users to be attached. There must be at least one user.
func (o BudgetActionDefinitionIamActionDefinitionOutput) Users() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetActionDefinitionIamActionDefinition](o, func(v BudgetActionDefinitionIamActionDefinition) []string { return v.Users })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type BudgetActionDefinitionScpActionDefinition struct {
	// The policy ID attached.
	PolicyId string `pulumi:"policyId"`
	// A list of target IDs.
	TargetIds []string `pulumi:"targetIds"`
}

type BudgetActionDefinitionScpActionDefinitionArgs struct {
	// The policy ID attached.
	PolicyId pulumix.Input[string] `pulumi:"policyId"`
	// A list of target IDs.
	TargetIds pulumix.Input[[]string] `pulumi:"targetIds"`
}

func (BudgetActionDefinitionScpActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionScpActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToBudgetActionDefinitionScpActionDefinitionOutput() BudgetActionDefinitionScpActionDefinitionOutput {
	return i.ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionScpActionDefinitionArgs) ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionScpActionDefinitionOutput)
}

func (i *BudgetActionDefinitionScpActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionScpActionDefinitionArgs] {
	return pulumix.Val(i)
}

type BudgetActionDefinitionScpActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionScpActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionScpActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToBudgetActionDefinitionScpActionDefinitionOutput() BudgetActionDefinitionScpActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToBudgetActionDefinitionScpActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionScpActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionScpActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionScpActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionScpActionDefinition]{
		OutputState: o.OutputState,
	}
}

// The policy ID attached.
func (o BudgetActionDefinitionScpActionDefinitionOutput) PolicyId() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionDefinitionScpActionDefinition](o, func(v BudgetActionDefinitionScpActionDefinition) string { return v.PolicyId })
}

// A list of target IDs.
func (o BudgetActionDefinitionScpActionDefinitionOutput) TargetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetActionDefinitionScpActionDefinition](o, func(v BudgetActionDefinitionScpActionDefinition) []string { return v.TargetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type BudgetActionDefinitionSsmActionDefinition struct {
	// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
	ActionSubType string `pulumi:"actionSubType"`
	// The EC2 and RDS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The Region to run the SSM document.
	Region string `pulumi:"region"`
}

type BudgetActionDefinitionSsmActionDefinitionArgs struct {
	// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
	ActionSubType pulumix.Input[string] `pulumi:"actionSubType"`
	// The EC2 and RDS instance IDs.
	InstanceIds pulumix.Input[[]string] `pulumi:"instanceIds"`
	// The Region to run the SSM document.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (BudgetActionDefinitionSsmActionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionSsmActionDefinition)(nil)).Elem()
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToBudgetActionDefinitionSsmActionDefinitionOutput() BudgetActionDefinitionSsmActionDefinitionOutput {
	return i.ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(context.Background())
}

func (i BudgetActionDefinitionSsmActionDefinitionArgs) ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionDefinitionSsmActionDefinitionOutput)
}

func (i *BudgetActionDefinitionSsmActionDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionDefinitionSsmActionDefinitionArgs] {
	return pulumix.Val(i)
}

type BudgetActionDefinitionSsmActionDefinitionOutput struct{ *pulumi.OutputState }

func (BudgetActionDefinitionSsmActionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionDefinitionSsmActionDefinition)(nil)).Elem()
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToBudgetActionDefinitionSsmActionDefinitionOutput() BudgetActionDefinitionSsmActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToBudgetActionDefinitionSsmActionDefinitionOutputWithContext(ctx context.Context) BudgetActionDefinitionSsmActionDefinitionOutput {
	return o
}

func (o BudgetActionDefinitionSsmActionDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionDefinitionSsmActionDefinition] {
	return pulumix.Output[BudgetActionDefinitionSsmActionDefinition]{
		OutputState: o.OutputState,
	}
}

// The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
func (o BudgetActionDefinitionSsmActionDefinitionOutput) ActionSubType() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionDefinitionSsmActionDefinition](o, func(v BudgetActionDefinitionSsmActionDefinition) string { return v.ActionSubType })
}

// The EC2 and RDS instance IDs.
func (o BudgetActionDefinitionSsmActionDefinitionOutput) InstanceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetActionDefinitionSsmActionDefinition](o, func(v BudgetActionDefinitionSsmActionDefinition) []string { return v.InstanceIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The Region to run the SSM document.
func (o BudgetActionDefinitionSsmActionDefinitionOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionDefinitionSsmActionDefinition](o, func(v BudgetActionDefinitionSsmActionDefinition) string { return v.Region })
}

type BudgetActionSubscriber struct {
	// The address that AWS sends budget notifications to, either an SNS topic or an email.
	Address string `pulumi:"address"`
	// The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
	SubscriptionType string `pulumi:"subscriptionType"`
}

type BudgetActionSubscriberArgs struct {
	// The address that AWS sends budget notifications to, either an SNS topic or an email.
	Address pulumix.Input[string] `pulumi:"address"`
	// The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
	SubscriptionType pulumix.Input[string] `pulumi:"subscriptionType"`
}

func (BudgetActionSubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionSubscriber)(nil)).Elem()
}

func (i BudgetActionSubscriberArgs) ToBudgetActionSubscriberOutput() BudgetActionSubscriberOutput {
	return i.ToBudgetActionSubscriberOutputWithContext(context.Background())
}

func (i BudgetActionSubscriberArgs) ToBudgetActionSubscriberOutputWithContext(ctx context.Context) BudgetActionSubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetActionSubscriberOutput)
}

func (i *BudgetActionSubscriberArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetActionSubscriberArgs] {
	return pulumix.Val(i)
}

type BudgetActionSubscriberOutput struct{ *pulumi.OutputState }

func (BudgetActionSubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetActionSubscriber)(nil)).Elem()
}

func (o BudgetActionSubscriberOutput) ToBudgetActionSubscriberOutput() BudgetActionSubscriberOutput {
	return o
}

func (o BudgetActionSubscriberOutput) ToBudgetActionSubscriberOutputWithContext(ctx context.Context) BudgetActionSubscriberOutput {
	return o
}

func (o BudgetActionSubscriberOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetActionSubscriber] {
	return pulumix.Output[BudgetActionSubscriber]{
		OutputState: o.OutputState,
	}
}

// The address that AWS sends budget notifications to, either an SNS topic or an email.
func (o BudgetActionSubscriberOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionSubscriber](o, func(v BudgetActionSubscriber) string { return v.Address })
}

// The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
func (o BudgetActionSubscriberOutput) SubscriptionType() pulumix.Output[string] {
	return pulumix.Apply[BudgetActionSubscriber](o, func(v BudgetActionSubscriber) string { return v.SubscriptionType })
}

type BudgetAutoAdjustData struct {
	AutoAdjustType     string                                 `pulumi:"autoAdjustType"`
	HistoricalOptions  *BudgetAutoAdjustDataHistoricalOptions `pulumi:"historicalOptions"`
	LastAutoAdjustTime *string                                `pulumi:"lastAutoAdjustTime"`
}

type BudgetAutoAdjustDataArgs struct {
	AutoAdjustType     pulumix.Input[string]                                     `pulumi:"autoAdjustType"`
	HistoricalOptions  pulumix.Input[*BudgetAutoAdjustDataHistoricalOptionsArgs] `pulumi:"historicalOptions"`
	LastAutoAdjustTime pulumix.Input[*string]                                    `pulumi:"lastAutoAdjustTime"`
}

func (BudgetAutoAdjustDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustData)(nil)).Elem()
}

func (i BudgetAutoAdjustDataArgs) ToBudgetAutoAdjustDataOutput() BudgetAutoAdjustDataOutput {
	return i.ToBudgetAutoAdjustDataOutputWithContext(context.Background())
}

func (i BudgetAutoAdjustDataArgs) ToBudgetAutoAdjustDataOutputWithContext(ctx context.Context) BudgetAutoAdjustDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataOutput)
}

func (i *BudgetAutoAdjustDataArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetAutoAdjustDataArgs] {
	return pulumix.Val(i)
}

type BudgetAutoAdjustDataOutput struct{ *pulumi.OutputState }

func (BudgetAutoAdjustDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustData)(nil)).Elem()
}

func (o BudgetAutoAdjustDataOutput) ToBudgetAutoAdjustDataOutput() BudgetAutoAdjustDataOutput {
	return o
}

func (o BudgetAutoAdjustDataOutput) ToBudgetAutoAdjustDataOutputWithContext(ctx context.Context) BudgetAutoAdjustDataOutput {
	return o
}

func (o BudgetAutoAdjustDataOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetAutoAdjustData] {
	return pulumix.Output[BudgetAutoAdjustData]{
		OutputState: o.OutputState,
	}
}

func (o BudgetAutoAdjustDataOutput) AutoAdjustType() pulumix.Output[string] {
	return pulumix.Apply[BudgetAutoAdjustData](o, func(v BudgetAutoAdjustData) string { return v.AutoAdjustType })
}

func (o BudgetAutoAdjustDataOutput) HistoricalOptions() pulumix.GPtrOutput[BudgetAutoAdjustDataHistoricalOptions, BudgetAutoAdjustDataHistoricalOptionsOutput] {
	value := pulumix.Apply[BudgetAutoAdjustData](o, func(v BudgetAutoAdjustData) *BudgetAutoAdjustDataHistoricalOptions { return v.HistoricalOptions })
	return pulumix.GPtrOutput[BudgetAutoAdjustDataHistoricalOptions, BudgetAutoAdjustDataHistoricalOptionsOutput]{OutputState: value.OutputState}
}

func (o BudgetAutoAdjustDataOutput) LastAutoAdjustTime() pulumix.Output[*string] {
	return pulumix.Apply[BudgetAutoAdjustData](o, func(v BudgetAutoAdjustData) *string { return v.LastAutoAdjustTime })
}

type BudgetAutoAdjustDataHistoricalOptions struct {
	BudgetAdjustmentPeriod   int  `pulumi:"budgetAdjustmentPeriod"`
	LookbackAvailablePeriods *int `pulumi:"lookbackAvailablePeriods"`
}

type BudgetAutoAdjustDataHistoricalOptionsArgs struct {
	BudgetAdjustmentPeriod   pulumix.Input[int]  `pulumi:"budgetAdjustmentPeriod"`
	LookbackAvailablePeriods pulumix.Input[*int] `pulumi:"lookbackAvailablePeriods"`
}

func (BudgetAutoAdjustDataHistoricalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustDataHistoricalOptions)(nil)).Elem()
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToBudgetAutoAdjustDataHistoricalOptionsOutput() BudgetAutoAdjustDataHistoricalOptionsOutput {
	return i.ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(context.Background())
}

func (i BudgetAutoAdjustDataHistoricalOptionsArgs) ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetAutoAdjustDataHistoricalOptionsOutput)
}

func (i *BudgetAutoAdjustDataHistoricalOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetAutoAdjustDataHistoricalOptionsArgs] {
	return pulumix.Val(i)
}

type BudgetAutoAdjustDataHistoricalOptionsOutput struct{ *pulumi.OutputState }

func (BudgetAutoAdjustDataHistoricalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetAutoAdjustDataHistoricalOptions)(nil)).Elem()
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToBudgetAutoAdjustDataHistoricalOptionsOutput() BudgetAutoAdjustDataHistoricalOptionsOutput {
	return o
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToBudgetAutoAdjustDataHistoricalOptionsOutputWithContext(ctx context.Context) BudgetAutoAdjustDataHistoricalOptionsOutput {
	return o
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetAutoAdjustDataHistoricalOptions] {
	return pulumix.Output[BudgetAutoAdjustDataHistoricalOptions]{
		OutputState: o.OutputState,
	}
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) BudgetAdjustmentPeriod() pulumix.Output[int] {
	return pulumix.Apply[BudgetAutoAdjustDataHistoricalOptions](o, func(v BudgetAutoAdjustDataHistoricalOptions) int { return v.BudgetAdjustmentPeriod })
}

func (o BudgetAutoAdjustDataHistoricalOptionsOutput) LookbackAvailablePeriods() pulumix.Output[*int] {
	return pulumix.Apply[BudgetAutoAdjustDataHistoricalOptions](o, func(v BudgetAutoAdjustDataHistoricalOptions) *int { return v.LookbackAvailablePeriods })
}

type BudgetCostFilter struct {
	// The name of a budget. Unique within accounts.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type BudgetCostFilterArgs struct {
	// The name of a budget. Unique within accounts.
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (BudgetCostFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostFilter)(nil)).Elem()
}

func (i BudgetCostFilterArgs) ToBudgetCostFilterOutput() BudgetCostFilterOutput {
	return i.ToBudgetCostFilterOutputWithContext(context.Background())
}

func (i BudgetCostFilterArgs) ToBudgetCostFilterOutputWithContext(ctx context.Context) BudgetCostFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostFilterOutput)
}

func (i *BudgetCostFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetCostFilterArgs] {
	return pulumix.Val(i)
}

type BudgetCostFilterOutput struct{ *pulumi.OutputState }

func (BudgetCostFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostFilter)(nil)).Elem()
}

func (o BudgetCostFilterOutput) ToBudgetCostFilterOutput() BudgetCostFilterOutput {
	return o
}

func (o BudgetCostFilterOutput) ToBudgetCostFilterOutputWithContext(ctx context.Context) BudgetCostFilterOutput {
	return o
}

func (o BudgetCostFilterOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetCostFilter] {
	return pulumix.Output[BudgetCostFilter]{
		OutputState: o.OutputState,
	}
}

// The name of a budget. Unique within accounts.
func (o BudgetCostFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[BudgetCostFilter](o, func(v BudgetCostFilter) string { return v.Name })
}

func (o BudgetCostFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetCostFilter](o, func(v BudgetCostFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type BudgetCostTypes struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit *bool `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`
	IncludeDiscount *bool `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription *bool `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring *bool `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund *bool `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription *bool `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport *bool `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax *bool `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront *bool `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized *bool `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended *bool `pulumi:"useBlended"`
}

type BudgetCostTypesArgs struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`
	IncludeCredit pulumix.Input[*bool] `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`
	IncludeDiscount pulumix.Input[*bool] `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
	IncludeOtherSubscription pulumix.Input[*bool] `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
	IncludeRecurring pulumix.Input[*bool] `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`
	IncludeRefund pulumix.Input[*bool] `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
	IncludeSubscription pulumix.Input[*bool] `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`
	IncludeSupport pulumix.Input[*bool] `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`
	IncludeTax pulumix.Input[*bool] `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
	IncludeUpfront pulumix.Input[*bool] `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`
	UseAmortized pulumix.Input[*bool] `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
	UseBlended pulumix.Input[*bool] `pulumi:"useBlended"`
}

func (BudgetCostTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return i.ToBudgetCostTypesOutputWithContext(context.Background())
}

func (i BudgetCostTypesArgs) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetCostTypesOutput)
}

func (i *BudgetCostTypesArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetCostTypesArgs] {
	return pulumix.Val(i)
}

type BudgetCostTypesOutput struct{ *pulumi.OutputState }

func (BudgetCostTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetCostTypes)(nil)).Elem()
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutput() BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToBudgetCostTypesOutputWithContext(ctx context.Context) BudgetCostTypesOutput {
	return o
}

func (o BudgetCostTypesOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetCostTypes] {
	return pulumix.Output[BudgetCostTypes]{
		OutputState: o.OutputState,
	}
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeCredit() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeCredit })
}

// Whether a budget includes discounts. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeDiscount() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeDiscount })
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeOtherSubscription() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeOtherSubscription })
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRecurring() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeRecurring })
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeRefund() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeRefund })
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSubscription() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeSubscription })
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeSupport() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeSupport })
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeTax() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeTax })
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
func (o BudgetCostTypesOutput) IncludeUpfront() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.IncludeUpfront })
}

// Whether a budget uses the amortized rate. Defaults to `false`
func (o BudgetCostTypesOutput) UseAmortized() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.UseAmortized })
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
func (o BudgetCostTypesOutput) UseBlended() pulumix.Output[*bool] {
	return pulumix.Apply[BudgetCostTypes](o, func(v BudgetCostTypes) *bool { return v.UseBlended })
}

type BudgetNotification struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType string `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns []string `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold float64 `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType string `pulumi:"thresholdType"`
}

type BudgetNotificationArgs struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator pulumix.Input[string] `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
	NotificationType pulumix.Input[string] `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses pulumix.Input[[]string] `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns pulumix.Input[[]string] `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold pulumix.Input[float64] `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType pulumix.Input[string] `pulumi:"thresholdType"`
}

func (BudgetNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return i.ToBudgetNotificationOutputWithContext(context.Background())
}

func (i BudgetNotificationArgs) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetNotificationOutput)
}

func (i *BudgetNotificationArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetNotificationArgs] {
	return pulumix.Val(i)
}

type BudgetNotificationOutput struct{ *pulumi.OutputState }

func (BudgetNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotification)(nil)).Elem()
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutput() BudgetNotificationOutput {
	return o
}

func (o BudgetNotificationOutput) ToBudgetNotificationOutputWithContext(ctx context.Context) BudgetNotificationOutput {
	return o
}

func (o BudgetNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetNotification] {
	return pulumix.Output[BudgetNotification]{
		OutputState: o.OutputState,
	}
}

// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
func (o BudgetNotificationOutput) ComparisonOperator() pulumix.Output[string] {
	return pulumix.Apply[BudgetNotification](o, func(v BudgetNotification) string { return v.ComparisonOperator })
}

// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
func (o BudgetNotificationOutput) NotificationType() pulumix.Output[string] {
	return pulumix.Apply[BudgetNotification](o, func(v BudgetNotification) string { return v.NotificationType })
}

// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
func (o BudgetNotificationOutput) SubscriberEmailAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetNotification](o, func(v BudgetNotification) []string { return v.SubscriberEmailAddresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
func (o BudgetNotificationOutput) SubscriberSnsTopicArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[BudgetNotification](o, func(v BudgetNotification) []string { return v.SubscriberSnsTopicArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// (Required) Threshold when the notification should be sent.
func (o BudgetNotificationOutput) Threshold() pulumix.Output[float64] {
	return pulumix.Apply[BudgetNotification](o, func(v BudgetNotification) float64 { return v.Threshold })
}

// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
func (o BudgetNotificationOutput) ThresholdType() pulumix.Output[string] {
	return pulumix.Apply[BudgetNotification](o, func(v BudgetNotification) string { return v.ThresholdType })
}

type BudgetPlannedLimit struct {
	// (Required) The amount of cost or usage being measured for a budget.
	Amount string `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime string `pulumi:"startTime"`
	// (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	Unit string `pulumi:"unit"`
}

type BudgetPlannedLimitArgs struct {
	// (Required) The amount of cost or usage being measured for a budget.
	Amount pulumix.Input[string] `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime pulumix.Input[string] `pulumi:"startTime"`
	// (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	Unit pulumix.Input[string] `pulumi:"unit"`
}

func (BudgetPlannedLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPlannedLimit)(nil)).Elem()
}

func (i BudgetPlannedLimitArgs) ToBudgetPlannedLimitOutput() BudgetPlannedLimitOutput {
	return i.ToBudgetPlannedLimitOutputWithContext(context.Background())
}

func (i BudgetPlannedLimitArgs) ToBudgetPlannedLimitOutputWithContext(ctx context.Context) BudgetPlannedLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPlannedLimitOutput)
}

func (i *BudgetPlannedLimitArgs) ToOutput(ctx context.Context) pulumix.Output[*BudgetPlannedLimitArgs] {
	return pulumix.Val(i)
}

type BudgetPlannedLimitOutput struct{ *pulumi.OutputState }

func (BudgetPlannedLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPlannedLimit)(nil)).Elem()
}

func (o BudgetPlannedLimitOutput) ToBudgetPlannedLimitOutput() BudgetPlannedLimitOutput {
	return o
}

func (o BudgetPlannedLimitOutput) ToBudgetPlannedLimitOutputWithContext(ctx context.Context) BudgetPlannedLimitOutput {
	return o
}

func (o BudgetPlannedLimitOutput) ToOutput(ctx context.Context) pulumix.Output[BudgetPlannedLimit] {
	return pulumix.Output[BudgetPlannedLimit]{
		OutputState: o.OutputState,
	}
}

// (Required) The amount of cost or usage being measured for a budget.
func (o BudgetPlannedLimitOutput) Amount() pulumix.Output[string] {
	return pulumix.Apply[BudgetPlannedLimit](o, func(v BudgetPlannedLimit) string { return v.Amount })
}

// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
func (o BudgetPlannedLimitOutput) StartTime() pulumix.Output[string] {
	return pulumix.Apply[BudgetPlannedLimit](o, func(v BudgetPlannedLimit) string { return v.StartTime })
}

// (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
func (o BudgetPlannedLimitOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[BudgetPlannedLimit](o, func(v BudgetPlannedLimit) string { return v.Unit })
}

type GetBudgetAutoAdjustData struct {
	// (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
	AutoAdjustType string `pulumi:"autoAdjustType"`
	// (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
	HistoricalOptions []GetBudgetAutoAdjustDataHistoricalOption `pulumi:"historicalOptions"`
	// (Optional) - The last time that your budget was auto-adjusted.
	LastAutoAdjustTime string `pulumi:"lastAutoAdjustTime"`
}

type GetBudgetAutoAdjustDataArgs struct {
	// (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
	AutoAdjustType pulumix.Input[string] `pulumi:"autoAdjustType"`
	// (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
	HistoricalOptions pulumix.Input[[]*GetBudgetAutoAdjustDataHistoricalOptionArgs] `pulumi:"historicalOptions"`
	// (Optional) - The last time that your budget was auto-adjusted.
	LastAutoAdjustTime pulumix.Input[string] `pulumi:"lastAutoAdjustTime"`
}

func (GetBudgetAutoAdjustDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustData)(nil)).Elem()
}

func (i GetBudgetAutoAdjustDataArgs) ToGetBudgetAutoAdjustDataOutput() GetBudgetAutoAdjustDataOutput {
	return i.ToGetBudgetAutoAdjustDataOutputWithContext(context.Background())
}

func (i GetBudgetAutoAdjustDataArgs) ToGetBudgetAutoAdjustDataOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetAutoAdjustDataOutput)
}

func (i *GetBudgetAutoAdjustDataArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetAutoAdjustDataArgs] {
	return pulumix.Val(i)
}

type GetBudgetAutoAdjustDataOutput struct{ *pulumi.OutputState }

func (GetBudgetAutoAdjustDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustData)(nil)).Elem()
}

func (o GetBudgetAutoAdjustDataOutput) ToGetBudgetAutoAdjustDataOutput() GetBudgetAutoAdjustDataOutput {
	return o
}

func (o GetBudgetAutoAdjustDataOutput) ToGetBudgetAutoAdjustDataOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataOutput {
	return o
}

func (o GetBudgetAutoAdjustDataOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetAutoAdjustData] {
	return pulumix.Output[GetBudgetAutoAdjustData]{
		OutputState: o.OutputState,
	}
}

// (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
func (o GetBudgetAutoAdjustDataOutput) AutoAdjustType() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetAutoAdjustData](o, func(v GetBudgetAutoAdjustData) string { return v.AutoAdjustType })
}

// (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
func (o GetBudgetAutoAdjustDataOutput) HistoricalOptions() pulumix.GArrayOutput[GetBudgetAutoAdjustDataHistoricalOption, GetBudgetAutoAdjustDataHistoricalOptionOutput] {
	value := pulumix.Apply[GetBudgetAutoAdjustData](o, func(v GetBudgetAutoAdjustData) []GetBudgetAutoAdjustDataHistoricalOption { return v.HistoricalOptions })
	return pulumix.GArrayOutput[GetBudgetAutoAdjustDataHistoricalOption, GetBudgetAutoAdjustDataHistoricalOptionOutput]{OutputState: value.OutputState}
}

// (Optional) - The last time that your budget was auto-adjusted.
func (o GetBudgetAutoAdjustDataOutput) LastAutoAdjustTime() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetAutoAdjustData](o, func(v GetBudgetAutoAdjustData) string { return v.LastAutoAdjustTime })
}

type GetBudgetAutoAdjustDataHistoricalOption struct {
	// (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
	BudgetAdjustmentPeriod int `pulumi:"budgetAdjustmentPeriod"`
	// (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
	LookbackAvailablePeriods int `pulumi:"lookbackAvailablePeriods"`
}

type GetBudgetAutoAdjustDataHistoricalOptionArgs struct {
	// (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
	BudgetAdjustmentPeriod pulumix.Input[int] `pulumi:"budgetAdjustmentPeriod"`
	// (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
	LookbackAvailablePeriods pulumix.Input[int] `pulumi:"lookbackAvailablePeriods"`
}

func (GetBudgetAutoAdjustDataHistoricalOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustDataHistoricalOption)(nil)).Elem()
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArgs) ToGetBudgetAutoAdjustDataHistoricalOptionOutput() GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return i.ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(context.Background())
}

func (i GetBudgetAutoAdjustDataHistoricalOptionArgs) ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetAutoAdjustDataHistoricalOptionOutput)
}

func (i *GetBudgetAutoAdjustDataHistoricalOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetAutoAdjustDataHistoricalOptionArgs] {
	return pulumix.Val(i)
}

type GetBudgetAutoAdjustDataHistoricalOptionOutput struct{ *pulumi.OutputState }

func (GetBudgetAutoAdjustDataHistoricalOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetAutoAdjustDataHistoricalOption)(nil)).Elem()
}

func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) ToGetBudgetAutoAdjustDataHistoricalOptionOutput() GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return o
}

func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) ToGetBudgetAutoAdjustDataHistoricalOptionOutputWithContext(ctx context.Context) GetBudgetAutoAdjustDataHistoricalOptionOutput {
	return o
}

func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetAutoAdjustDataHistoricalOption] {
	return pulumix.Output[GetBudgetAutoAdjustDataHistoricalOption]{
		OutputState: o.OutputState,
	}
}

// (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) BudgetAdjustmentPeriod() pulumix.Output[int] {
	return pulumix.Apply[GetBudgetAutoAdjustDataHistoricalOption](o, func(v GetBudgetAutoAdjustDataHistoricalOption) int { return v.BudgetAdjustmentPeriod })
}

// (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
func (o GetBudgetAutoAdjustDataHistoricalOptionOutput) LookbackAvailablePeriods() pulumix.Output[int] {
	return pulumix.Apply[GetBudgetAutoAdjustDataHistoricalOption](o, func(v GetBudgetAutoAdjustDataHistoricalOption) int { return v.LookbackAvailablePeriods })
}

type GetBudgetBudgetLimit struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount string `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit string `pulumi:"unit"`
}

type GetBudgetBudgetLimitArgs struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount pulumix.Input[string] `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit pulumix.Input[string] `pulumi:"unit"`
}

func (GetBudgetBudgetLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetBudgetLimit)(nil)).Elem()
}

func (i GetBudgetBudgetLimitArgs) ToGetBudgetBudgetLimitOutput() GetBudgetBudgetLimitOutput {
	return i.ToGetBudgetBudgetLimitOutputWithContext(context.Background())
}

func (i GetBudgetBudgetLimitArgs) ToGetBudgetBudgetLimitOutputWithContext(ctx context.Context) GetBudgetBudgetLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetBudgetLimitOutput)
}

func (i *GetBudgetBudgetLimitArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetBudgetLimitArgs] {
	return pulumix.Val(i)
}

type GetBudgetBudgetLimitOutput struct{ *pulumi.OutputState }

func (GetBudgetBudgetLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetBudgetLimit)(nil)).Elem()
}

func (o GetBudgetBudgetLimitOutput) ToGetBudgetBudgetLimitOutput() GetBudgetBudgetLimitOutput {
	return o
}

func (o GetBudgetBudgetLimitOutput) ToGetBudgetBudgetLimitOutputWithContext(ctx context.Context) GetBudgetBudgetLimitOutput {
	return o
}

func (o GetBudgetBudgetLimitOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetBudgetLimit] {
	return pulumix.Output[GetBudgetBudgetLimit]{
		OutputState: o.OutputState,
	}
}

// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetBudgetLimitOutput) Amount() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetBudgetLimit](o, func(v GetBudgetBudgetLimit) string { return v.Amount })
}

// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetBudgetLimitOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetBudgetLimit](o, func(v GetBudgetBudgetLimit) string { return v.Unit })
}

type GetBudgetCalculatedSpend struct {
	ActualSpends []GetBudgetCalculatedSpendActualSpend `pulumi:"actualSpends"`
}

type GetBudgetCalculatedSpendArgs struct {
	ActualSpends pulumix.Input[[]*GetBudgetCalculatedSpendActualSpendArgs] `pulumi:"actualSpends"`
}

func (GetBudgetCalculatedSpendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpend)(nil)).Elem()
}

func (i GetBudgetCalculatedSpendArgs) ToGetBudgetCalculatedSpendOutput() GetBudgetCalculatedSpendOutput {
	return i.ToGetBudgetCalculatedSpendOutputWithContext(context.Background())
}

func (i GetBudgetCalculatedSpendArgs) ToGetBudgetCalculatedSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCalculatedSpendOutput)
}

func (i *GetBudgetCalculatedSpendArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetCalculatedSpendArgs] {
	return pulumix.Val(i)
}

type GetBudgetCalculatedSpendOutput struct{ *pulumi.OutputState }

func (GetBudgetCalculatedSpendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpend)(nil)).Elem()
}

func (o GetBudgetCalculatedSpendOutput) ToGetBudgetCalculatedSpendOutput() GetBudgetCalculatedSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendOutput) ToGetBudgetCalculatedSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCalculatedSpend] {
	return pulumix.Output[GetBudgetCalculatedSpend]{
		OutputState: o.OutputState,
	}
}

func (o GetBudgetCalculatedSpendOutput) ActualSpends() pulumix.GArrayOutput[GetBudgetCalculatedSpendActualSpend, GetBudgetCalculatedSpendActualSpendOutput] {
	value := pulumix.Apply[GetBudgetCalculatedSpend](o, func(v GetBudgetCalculatedSpend) []GetBudgetCalculatedSpendActualSpend { return v.ActualSpends })
	return pulumix.GArrayOutput[GetBudgetCalculatedSpendActualSpend, GetBudgetCalculatedSpendActualSpendOutput]{OutputState: value.OutputState}
}

type GetBudgetCalculatedSpendActualSpend struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount string `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit string `pulumi:"unit"`
}

type GetBudgetCalculatedSpendActualSpendArgs struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount pulumix.Input[string] `pulumi:"amount"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit pulumix.Input[string] `pulumi:"unit"`
}

func (GetBudgetCalculatedSpendActualSpendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpendActualSpend)(nil)).Elem()
}

func (i GetBudgetCalculatedSpendActualSpendArgs) ToGetBudgetCalculatedSpendActualSpendOutput() GetBudgetCalculatedSpendActualSpendOutput {
	return i.ToGetBudgetCalculatedSpendActualSpendOutputWithContext(context.Background())
}

func (i GetBudgetCalculatedSpendActualSpendArgs) ToGetBudgetCalculatedSpendActualSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendActualSpendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCalculatedSpendActualSpendOutput)
}

func (i *GetBudgetCalculatedSpendActualSpendArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetCalculatedSpendActualSpendArgs] {
	return pulumix.Val(i)
}

type GetBudgetCalculatedSpendActualSpendOutput struct{ *pulumi.OutputState }

func (GetBudgetCalculatedSpendActualSpendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCalculatedSpendActualSpend)(nil)).Elem()
}

func (o GetBudgetCalculatedSpendActualSpendOutput) ToGetBudgetCalculatedSpendActualSpendOutput() GetBudgetCalculatedSpendActualSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendActualSpendOutput) ToGetBudgetCalculatedSpendActualSpendOutputWithContext(ctx context.Context) GetBudgetCalculatedSpendActualSpendOutput {
	return o
}

func (o GetBudgetCalculatedSpendActualSpendOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCalculatedSpendActualSpend] {
	return pulumix.Output[GetBudgetCalculatedSpendActualSpend]{
		OutputState: o.OutputState,
	}
}

// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetCalculatedSpendActualSpendOutput) Amount() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetCalculatedSpendActualSpend](o, func(v GetBudgetCalculatedSpendActualSpend) string { return v.Amount })
}

// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetCalculatedSpendActualSpendOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetCalculatedSpendActualSpend](o, func(v GetBudgetCalculatedSpendActualSpend) string { return v.Unit })
}

type GetBudgetCostFilter struct {
	// The name of a budget. Unique within accounts.
	//
	// The following arguments are optional:
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetBudgetCostFilterArgs struct {
	// The name of a budget. Unique within accounts.
	//
	// The following arguments are optional:
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetBudgetCostFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostFilter)(nil)).Elem()
}

func (i GetBudgetCostFilterArgs) ToGetBudgetCostFilterOutput() GetBudgetCostFilterOutput {
	return i.ToGetBudgetCostFilterOutputWithContext(context.Background())
}

func (i GetBudgetCostFilterArgs) ToGetBudgetCostFilterOutputWithContext(ctx context.Context) GetBudgetCostFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCostFilterOutput)
}

func (i *GetBudgetCostFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetCostFilterArgs] {
	return pulumix.Val(i)
}

type GetBudgetCostFilterOutput struct{ *pulumi.OutputState }

func (GetBudgetCostFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostFilter)(nil)).Elem()
}

func (o GetBudgetCostFilterOutput) ToGetBudgetCostFilterOutput() GetBudgetCostFilterOutput {
	return o
}

func (o GetBudgetCostFilterOutput) ToGetBudgetCostFilterOutputWithContext(ctx context.Context) GetBudgetCostFilterOutput {
	return o
}

func (o GetBudgetCostFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCostFilter] {
	return pulumix.Output[GetBudgetCostFilter]{
		OutputState: o.OutputState,
	}
}

// The name of a budget. Unique within accounts.
//
// The following arguments are optional:
func (o GetBudgetCostFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetCostFilter](o, func(v GetBudgetCostFilter) string { return v.Name })
}

func (o GetBudgetCostFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBudgetCostFilter](o, func(v GetBudgetCostFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetBudgetCostType struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`.
	IncludeCredit bool `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`.
	IncludeDiscount bool `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
	IncludeOtherSubscription bool `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
	IncludeRecurring bool `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`.
	IncludeRefund bool `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
	IncludeSubscription bool `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`.
	IncludeSupport bool `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`.
	IncludeTax bool `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
	IncludeUpfront bool `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`.
	UseAmortized bool `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
	UseBlended bool `pulumi:"useBlended"`
}

type GetBudgetCostTypeArgs struct {
	// A boolean value whether to include credits in the cost budget. Defaults to `true`.
	IncludeCredit pulumix.Input[bool] `pulumi:"includeCredit"`
	// Whether a budget includes discounts. Defaults to `true`.
	IncludeDiscount pulumix.Input[bool] `pulumi:"includeDiscount"`
	// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
	IncludeOtherSubscription pulumix.Input[bool] `pulumi:"includeOtherSubscription"`
	// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
	IncludeRecurring pulumix.Input[bool] `pulumi:"includeRecurring"`
	// A boolean value whether to include refunds in the cost budget. Defaults to `true`.
	IncludeRefund pulumix.Input[bool] `pulumi:"includeRefund"`
	// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
	IncludeSubscription pulumix.Input[bool] `pulumi:"includeSubscription"`
	// A boolean value whether to include support costs in the cost budget. Defaults to `true`.
	IncludeSupport pulumix.Input[bool] `pulumi:"includeSupport"`
	// A boolean value whether to include tax in the cost budget. Defaults to `true`.
	IncludeTax pulumix.Input[bool] `pulumi:"includeTax"`
	// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
	IncludeUpfront pulumix.Input[bool] `pulumi:"includeUpfront"`
	// Whether a budget uses the amortized rate. Defaults to `false`.
	UseAmortized pulumix.Input[bool] `pulumi:"useAmortized"`
	// A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
	UseBlended pulumix.Input[bool] `pulumi:"useBlended"`
}

func (GetBudgetCostTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostType)(nil)).Elem()
}

func (i GetBudgetCostTypeArgs) ToGetBudgetCostTypeOutput() GetBudgetCostTypeOutput {
	return i.ToGetBudgetCostTypeOutputWithContext(context.Background())
}

func (i GetBudgetCostTypeArgs) ToGetBudgetCostTypeOutputWithContext(ctx context.Context) GetBudgetCostTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetCostTypeOutput)
}

func (i *GetBudgetCostTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetCostTypeArgs] {
	return pulumix.Val(i)
}

type GetBudgetCostTypeOutput struct{ *pulumi.OutputState }

func (GetBudgetCostTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetCostType)(nil)).Elem()
}

func (o GetBudgetCostTypeOutput) ToGetBudgetCostTypeOutput() GetBudgetCostTypeOutput {
	return o
}

func (o GetBudgetCostTypeOutput) ToGetBudgetCostTypeOutputWithContext(ctx context.Context) GetBudgetCostTypeOutput {
	return o
}

func (o GetBudgetCostTypeOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetCostType] {
	return pulumix.Output[GetBudgetCostType]{
		OutputState: o.OutputState,
	}
}

// A boolean value whether to include credits in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeCredit() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeCredit })
}

// Whether a budget includes discounts. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeDiscount() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeDiscount })
}

// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeOtherSubscription() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeOtherSubscription })
}

// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeRecurring() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeRecurring })
}

// A boolean value whether to include refunds in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeRefund() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeRefund })
}

// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeSubscription() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeSubscription })
}

// A boolean value whether to include support costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeSupport() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeSupport })
}

// A boolean value whether to include tax in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeTax() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeTax })
}

// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
func (o GetBudgetCostTypeOutput) IncludeUpfront() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.IncludeUpfront })
}

// Whether a budget uses the amortized rate. Defaults to `false`.
func (o GetBudgetCostTypeOutput) UseAmortized() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.UseAmortized })
}

// A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
func (o GetBudgetCostTypeOutput) UseBlended() pulumix.Output[bool] {
	return pulumix.Apply[GetBudgetCostType](o, func(v GetBudgetCostType) bool { return v.UseBlended })
}

type GetBudgetNotification struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
	NotificationType string `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns []string `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold float64 `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType string `pulumi:"thresholdType"`
}

type GetBudgetNotificationArgs struct {
	// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
	ComparisonOperator pulumix.Input[string] `pulumi:"comparisonOperator"`
	// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
	NotificationType pulumix.Input[string] `pulumi:"notificationType"`
	// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
	SubscriberEmailAddresses pulumix.Input[[]string] `pulumi:"subscriberEmailAddresses"`
	// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
	SubscriberSnsTopicArns pulumix.Input[[]string] `pulumi:"subscriberSnsTopicArns"`
	// (Required) Threshold when the notification should be sent.
	Threshold pulumix.Input[float64] `pulumi:"threshold"`
	// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
	ThresholdType pulumix.Input[string] `pulumi:"thresholdType"`
}

func (GetBudgetNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetNotification)(nil)).Elem()
}

func (i GetBudgetNotificationArgs) ToGetBudgetNotificationOutput() GetBudgetNotificationOutput {
	return i.ToGetBudgetNotificationOutputWithContext(context.Background())
}

func (i GetBudgetNotificationArgs) ToGetBudgetNotificationOutputWithContext(ctx context.Context) GetBudgetNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetNotificationOutput)
}

func (i *GetBudgetNotificationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetNotificationArgs] {
	return pulumix.Val(i)
}

type GetBudgetNotificationOutput struct{ *pulumi.OutputState }

func (GetBudgetNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetNotification)(nil)).Elem()
}

func (o GetBudgetNotificationOutput) ToGetBudgetNotificationOutput() GetBudgetNotificationOutput {
	return o
}

func (o GetBudgetNotificationOutput) ToGetBudgetNotificationOutputWithContext(ctx context.Context) GetBudgetNotificationOutput {
	return o
}

func (o GetBudgetNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetNotification] {
	return pulumix.Output[GetBudgetNotification]{
		OutputState: o.OutputState,
	}
}

// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
func (o GetBudgetNotificationOutput) ComparisonOperator() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetNotification](o, func(v GetBudgetNotification) string { return v.ComparisonOperator })
}

// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
func (o GetBudgetNotificationOutput) NotificationType() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetNotification](o, func(v GetBudgetNotification) string { return v.NotificationType })
}

// (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
func (o GetBudgetNotificationOutput) SubscriberEmailAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBudgetNotification](o, func(v GetBudgetNotification) []string { return v.SubscriberEmailAddresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
func (o GetBudgetNotificationOutput) SubscriberSnsTopicArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetBudgetNotification](o, func(v GetBudgetNotification) []string { return v.SubscriberSnsTopicArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// (Required) Threshold when the notification should be sent.
func (o GetBudgetNotificationOutput) Threshold() pulumix.Output[float64] {
	return pulumix.Apply[GetBudgetNotification](o, func(v GetBudgetNotification) float64 { return v.Threshold })
}

// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
func (o GetBudgetNotificationOutput) ThresholdType() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetNotification](o, func(v GetBudgetNotification) string { return v.ThresholdType })
}

type GetBudgetPlannedLimit struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount string `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime string `pulumi:"startTime"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit string `pulumi:"unit"`
}

type GetBudgetPlannedLimitArgs struct {
	// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Amount pulumix.Input[string] `pulumi:"amount"`
	// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	StartTime pulumix.Input[string] `pulumi:"startTime"`
	// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
	Unit pulumix.Input[string] `pulumi:"unit"`
}

func (GetBudgetPlannedLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetPlannedLimit)(nil)).Elem()
}

func (i GetBudgetPlannedLimitArgs) ToGetBudgetPlannedLimitOutput() GetBudgetPlannedLimitOutput {
	return i.ToGetBudgetPlannedLimitOutputWithContext(context.Background())
}

func (i GetBudgetPlannedLimitArgs) ToGetBudgetPlannedLimitOutputWithContext(ctx context.Context) GetBudgetPlannedLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBudgetPlannedLimitOutput)
}

func (i *GetBudgetPlannedLimitArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBudgetPlannedLimitArgs] {
	return pulumix.Val(i)
}

type GetBudgetPlannedLimitOutput struct{ *pulumi.OutputState }

func (GetBudgetPlannedLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBudgetPlannedLimit)(nil)).Elem()
}

func (o GetBudgetPlannedLimitOutput) ToGetBudgetPlannedLimitOutput() GetBudgetPlannedLimitOutput {
	return o
}

func (o GetBudgetPlannedLimitOutput) ToGetBudgetPlannedLimitOutputWithContext(ctx context.Context) GetBudgetPlannedLimitOutput {
	return o
}

func (o GetBudgetPlannedLimitOutput) ToOutput(ctx context.Context) pulumix.Output[GetBudgetPlannedLimit] {
	return pulumix.Output[GetBudgetPlannedLimit]{
		OutputState: o.OutputState,
	}
}

// The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetPlannedLimitOutput) Amount() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetPlannedLimit](o, func(v GetBudgetPlannedLimit) string { return v.Amount })
}

// (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
func (o GetBudgetPlannedLimitOutput) StartTime() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetPlannedLimit](o, func(v GetBudgetPlannedLimit) string { return v.StartTime })
}

// The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
func (o GetBudgetPlannedLimitOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetBudgetPlannedLimit](o, func(v GetBudgetPlannedLimit) string { return v.Unit })
}

func init() {
	pulumi.RegisterOutputType(BudgetActionActionThresholdOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionIamActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionScpActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionDefinitionSsmActionDefinitionOutput{})
	pulumi.RegisterOutputType(BudgetActionSubscriberOutput{})
	pulumi.RegisterOutputType(BudgetAutoAdjustDataOutput{})
	pulumi.RegisterOutputType(BudgetAutoAdjustDataHistoricalOptionsOutput{})
	pulumi.RegisterOutputType(BudgetCostFilterOutput{})
	pulumi.RegisterOutputType(BudgetCostTypesOutput{})
	pulumi.RegisterOutputType(BudgetNotificationOutput{})
	pulumi.RegisterOutputType(BudgetPlannedLimitOutput{})
	pulumi.RegisterOutputType(GetBudgetAutoAdjustDataOutput{})
	pulumi.RegisterOutputType(GetBudgetAutoAdjustDataHistoricalOptionOutput{})
	pulumi.RegisterOutputType(GetBudgetBudgetLimitOutput{})
	pulumi.RegisterOutputType(GetBudgetCalculatedSpendOutput{})
	pulumi.RegisterOutputType(GetBudgetCalculatedSpendActualSpendOutput{})
	pulumi.RegisterOutputType(GetBudgetCostFilterOutput{})
	pulumi.RegisterOutputType(GetBudgetCostTypeOutput{})
	pulumi.RegisterOutputType(GetBudgetNotificationOutput{})
	pulumi.RegisterOutputType(GetBudgetPlannedLimitOutput{})
}
