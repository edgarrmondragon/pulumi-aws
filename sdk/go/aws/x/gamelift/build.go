// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an GameLift Build resource.
type Build struct {
	pulumi.CustomResourceState

	// GameLift Build ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of the build
	Name pulumix.Output[string] `pulumi:"name"`
	// Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
	OperatingSystem pulumix.Output[string] `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation pulumix.GPtrOutput[BuildStorageLocation, BuildStorageLocationOutput] `pulumi:"storageLocation"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Version that is associated with this build.
	Version pulumix.Output[*string] `pulumi:"version"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperatingSystem == nil {
		return nil, errors.New("invalid value for required argument 'OperatingSystem'")
	}
	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Build
	err := ctx.RegisterResource("aws:gamelift/build:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("aws:gamelift/build:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
	// GameLift Build ARN.
	Arn *string `pulumi:"arn"`
	// Name of the build
	Name *string `pulumi:"name"`
	// Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation *BuildStorageLocation `pulumi:"storageLocation"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Version that is associated with this build.
	Version *string `pulumi:"version"`
}

type BuildState struct {
	// GameLift Build ARN.
	Arn pulumix.Input[*string]
	// Name of the build
	Name pulumix.Input[*string]
	// Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
	OperatingSystem pulumix.Input[*string]
	// Information indicating where your game build files are stored. See below.
	StorageLocation pulumix.Input[*BuildStorageLocationArgs]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Version that is associated with this build.
	Version pulumix.Input[*string]
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	// Name of the build
	Name *string `pulumi:"name"`
	// Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
	OperatingSystem string `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation BuildStorageLocation `pulumi:"storageLocation"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Version that is associated with this build.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	// Name of the build
	Name pulumix.Input[*string]
	// Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
	OperatingSystem pulumix.Input[string]
	// Information indicating where your game build files are stored. See below.
	StorageLocation pulumix.Input[*BuildStorageLocationArgs]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Version that is associated with this build.
	Version pulumix.Input[*string]
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) ToOutput(ctx context.Context) pulumix.Output[Build] {
	return pulumix.Output[Build]{
		OutputState: o.OutputState,
	}
}

// GameLift Build ARN.
func (o BuildOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the build
func (o BuildOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Operating system that the game server binaries are built to run onE.g., `WINDOWS_2012`, `AMAZON_LINUX` or `AMAZON_LINUX_2`.
func (o BuildOutput) OperatingSystem() pulumix.Output[string] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.Output[string] { return v.OperatingSystem })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information indicating where your game build files are stored. See below.
func (o BuildOutput) StorageLocation() pulumix.GPtrOutput[BuildStorageLocation, BuildStorageLocationOutput] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.GPtrOutput[BuildStorageLocation, BuildStorageLocationOutput] {
		return v.StorageLocation
	})
	unwrapped := pulumix.Flatten[*BuildStorageLocation, pulumix.GPtrOutput[BuildStorageLocation, BuildStorageLocationOutput]](value)
	return pulumix.GPtrOutput[BuildStorageLocation, BuildStorageLocationOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o BuildOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o BuildOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Version that is associated with this build.
func (o BuildOutput) Version() pulumix.Output[*string] {
	value := pulumix.Apply[Build](o, func(v Build) pulumix.Output[*string] { return v.Version })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(BuildOutput{})
}
