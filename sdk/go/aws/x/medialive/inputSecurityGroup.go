// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS MediaLive InputSecurityGroup.
type InputSecurityGroup struct {
	pulumi.CustomResourceState

	// ARN of the InputSecurityGroup.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The list of inputs currently using this InputSecurityGroup.
	Inputs pulumix.ArrayOutput[string] `pulumi:"inputs"`
	// A map of tags to assign to the InputSecurityGroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Whitelist rules. See Whitelist Rules for more details.
	//
	// The following arguments are optional:
	WhitelistRules pulumix.GArrayOutput[InputSecurityGroupWhitelistRule, InputSecurityGroupWhitelistRuleOutput] `pulumi:"whitelistRules"`
}

// NewInputSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewInputSecurityGroup(ctx *pulumi.Context,
	name string, args *InputSecurityGroupArgs, opts ...pulumi.ResourceOption) (*InputSecurityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WhitelistRules == nil {
		return nil, errors.New("invalid value for required argument 'WhitelistRules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InputSecurityGroup
	err := ctx.RegisterResource("aws:medialive/inputSecurityGroup:InputSecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInputSecurityGroup gets an existing InputSecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInputSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputSecurityGroupState, opts ...pulumi.ResourceOption) (*InputSecurityGroup, error) {
	var resource InputSecurityGroup
	err := ctx.ReadResource("aws:medialive/inputSecurityGroup:InputSecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InputSecurityGroup resources.
type inputSecurityGroupState struct {
	// ARN of the InputSecurityGroup.
	Arn *string `pulumi:"arn"`
	// The list of inputs currently using this InputSecurityGroup.
	Inputs []string `pulumi:"inputs"`
	// A map of tags to assign to the InputSecurityGroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Whitelist rules. See Whitelist Rules for more details.
	//
	// The following arguments are optional:
	WhitelistRules []InputSecurityGroupWhitelistRule `pulumi:"whitelistRules"`
}

type InputSecurityGroupState struct {
	// ARN of the InputSecurityGroup.
	Arn pulumix.Input[*string]
	// The list of inputs currently using this InputSecurityGroup.
	Inputs pulumix.Input[[]string]
	// A map of tags to assign to the InputSecurityGroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Whitelist rules. See Whitelist Rules for more details.
	//
	// The following arguments are optional:
	WhitelistRules pulumix.Input[[]*InputSecurityGroupWhitelistRuleArgs]
}

func (InputSecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputSecurityGroupState)(nil)).Elem()
}

type inputSecurityGroupArgs struct {
	// A map of tags to assign to the InputSecurityGroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Whitelist rules. See Whitelist Rules for more details.
	//
	// The following arguments are optional:
	WhitelistRules []InputSecurityGroupWhitelistRule `pulumi:"whitelistRules"`
}

// The set of arguments for constructing a InputSecurityGroup resource.
type InputSecurityGroupArgs struct {
	// A map of tags to assign to the InputSecurityGroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Whitelist rules. See Whitelist Rules for more details.
	//
	// The following arguments are optional:
	WhitelistRules pulumix.Input[[]*InputSecurityGroupWhitelistRuleArgs]
}

func (InputSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputSecurityGroupArgs)(nil)).Elem()
}

type InputSecurityGroupOutput struct{ *pulumi.OutputState }

func (InputSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSecurityGroup)(nil)).Elem()
}

func (o InputSecurityGroupOutput) ToInputSecurityGroupOutput() InputSecurityGroupOutput {
	return o
}

func (o InputSecurityGroupOutput) ToInputSecurityGroupOutputWithContext(ctx context.Context) InputSecurityGroupOutput {
	return o
}

func (o InputSecurityGroupOutput) ToOutput(ctx context.Context) pulumix.Output[InputSecurityGroup] {
	return pulumix.Output[InputSecurityGroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the InputSecurityGroup.
func (o InputSecurityGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[InputSecurityGroup](o, func(v InputSecurityGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of inputs currently using this InputSecurityGroup.
func (o InputSecurityGroupOutput) Inputs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InputSecurityGroup](o, func(v InputSecurityGroup) pulumix.ArrayOutput[string] { return v.Inputs })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the InputSecurityGroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o InputSecurityGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[InputSecurityGroup](o, func(v InputSecurityGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o InputSecurityGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[InputSecurityGroup](o, func(v InputSecurityGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Whitelist rules. See Whitelist Rules for more details.
//
// The following arguments are optional:
func (o InputSecurityGroupOutput) WhitelistRules() pulumix.GArrayOutput[InputSecurityGroupWhitelistRule, InputSecurityGroupWhitelistRuleOutput] {
	value := pulumix.Apply[InputSecurityGroup](o, func(v InputSecurityGroup) pulumix.GArrayOutput[InputSecurityGroupWhitelistRule, InputSecurityGroupWhitelistRuleOutput] {
		return v.WhitelistRules
	})
	unwrapped := pulumix.Flatten[[]InputSecurityGroupWhitelistRule, pulumix.GArrayOutput[InputSecurityGroupWhitelistRule, InputSecurityGroupWhitelistRuleOutput]](value)
	return pulumix.GArrayOutput[InputSecurityGroupWhitelistRule, InputSecurityGroupWhitelistRuleOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(InputSecurityGroupOutput{})
}
