// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SSM Maintenance Window resource
type MaintenanceWindow struct {
	pulumi.CustomResourceState

	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets pulumix.Output[*bool] `pulumi:"allowUnassociatedTargets"`
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff pulumix.Output[int] `pulumi:"cutoff"`
	// A description for the maintenance window.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The duration of the Maintenance Window in hours.
	Duration pulumix.Output[int] `pulumi:"duration"`
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate pulumix.Output[*string] `pulumi:"endDate"`
	// The name of the maintenance window.
	Name pulumix.Output[string] `pulumi:"name"`
	// The schedule of the Maintenance Window in the form of a [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html).
	Schedule pulumix.Output[string] `pulumi:"schedule"`
	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	ScheduleOffset pulumix.Output[*int] `pulumi:"scheduleOffset"`
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone pulumix.Output[*string] `pulumi:"scheduleTimezone"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate pulumix.Output[*string] `pulumi:"startDate"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindow(ctx *pulumi.Context,
	name string, args *MaintenanceWindowArgs, opts ...pulumi.ResourceOption) (*MaintenanceWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cutoff == nil {
		return nil, errors.New("invalid value for required argument 'Cutoff'")
	}
	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MaintenanceWindow
	err := ctx.RegisterResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindow gets an existing MaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceWindowState, opts ...pulumi.ResourceOption) (*MaintenanceWindow, error) {
	var resource MaintenanceWindow
	err := ctx.ReadResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaintenanceWindow resources.
type maintenanceWindowState struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets *bool `pulumi:"allowUnassociatedTargets"`
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff *int `pulumi:"cutoff"`
	// A description for the maintenance window.
	Description *string `pulumi:"description"`
	// The duration of the Maintenance Window in hours.
	Duration *int `pulumi:"duration"`
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate *string `pulumi:"endDate"`
	// The name of the maintenance window.
	Name *string `pulumi:"name"`
	// The schedule of the Maintenance Window in the form of a [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html).
	Schedule *string `pulumi:"schedule"`
	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	ScheduleOffset *int `pulumi:"scheduleOffset"`
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone *string `pulumi:"scheduleTimezone"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate *string `pulumi:"startDate"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MaintenanceWindowState struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets pulumix.Input[*bool]
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff pulumix.Input[*int]
	// A description for the maintenance window.
	Description pulumix.Input[*string]
	// The duration of the Maintenance Window in hours.
	Duration pulumix.Input[*int]
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled pulumix.Input[*bool]
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate pulumix.Input[*string]
	// The name of the maintenance window.
	Name pulumix.Input[*string]
	// The schedule of the Maintenance Window in the form of a [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html).
	Schedule pulumix.Input[*string]
	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	ScheduleOffset pulumix.Input[*int]
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone pulumix.Input[*string]
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (MaintenanceWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowState)(nil)).Elem()
}

type maintenanceWindowArgs struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets *bool `pulumi:"allowUnassociatedTargets"`
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff int `pulumi:"cutoff"`
	// A description for the maintenance window.
	Description *string `pulumi:"description"`
	// The duration of the Maintenance Window in hours.
	Duration int `pulumi:"duration"`
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate *string `pulumi:"endDate"`
	// The name of the maintenance window.
	Name *string `pulumi:"name"`
	// The schedule of the Maintenance Window in the form of a [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html).
	Schedule string `pulumi:"schedule"`
	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	ScheduleOffset *int `pulumi:"scheduleOffset"`
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone *string `pulumi:"scheduleTimezone"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate *string `pulumi:"startDate"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MaintenanceWindow resource.
type MaintenanceWindowArgs struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets pulumix.Input[*bool]
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff pulumix.Input[int]
	// A description for the maintenance window.
	Description pulumix.Input[*string]
	// The duration of the Maintenance Window in hours.
	Duration pulumix.Input[int]
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled pulumix.Input[*bool]
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate pulumix.Input[*string]
	// The name of the maintenance window.
	Name pulumix.Input[*string]
	// The schedule of the Maintenance Window in the form of a [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html).
	Schedule pulumix.Input[string]
	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	ScheduleOffset pulumix.Input[*int]
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone pulumix.Input[*string]
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceWindowArgs)(nil)).Elem()
}

type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
func (o MaintenanceWindowOutput) AllowUnassociatedTargets() pulumix.Output[*bool] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*bool] { return v.AllowUnassociatedTargets })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
func (o MaintenanceWindowOutput) Cutoff() pulumix.Output[int] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[int] { return v.Cutoff })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A description for the maintenance window.
func (o MaintenanceWindowOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The duration of the Maintenance Window in hours.
func (o MaintenanceWindowOutput) Duration() pulumix.Output[int] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[int] { return v.Duration })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Whether the maintenance window is enabled. Default: `true`.
func (o MaintenanceWindowOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
func (o MaintenanceWindowOutput) EndDate() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*string] { return v.EndDate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the maintenance window.
func (o MaintenanceWindowOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The schedule of the Maintenance Window in the form of a [cron or rate expression](https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html).
func (o MaintenanceWindowOutput) Schedule() pulumix.Output[string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[string] { return v.Schedule })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
func (o MaintenanceWindowOutput) ScheduleOffset() pulumix.Output[*int] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*int] { return v.ScheduleOffset })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
func (o MaintenanceWindowOutput) ScheduleTimezone() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*string] { return v.ScheduleTimezone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
func (o MaintenanceWindowOutput) StartDate() pulumix.Output[*string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.Output[*string] { return v.StartDate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MaintenanceWindowOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o MaintenanceWindowOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[MaintenanceWindow](o, func(v MaintenanceWindow) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
}
