// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type GrantConstraint struct {
	// A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
	EncryptionContextEquals map[string]string `pulumi:"encryptionContextEquals"`
	// A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
	EncryptionContextSubset map[string]string `pulumi:"encryptionContextSubset"`
}

type GrantConstraintArgs struct {
	// A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
	EncryptionContextEquals pulumix.Input[map[string]string] `pulumi:"encryptionContextEquals"`
	// A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
	EncryptionContextSubset pulumix.Input[map[string]string] `pulumi:"encryptionContextSubset"`
}

func (GrantConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantConstraint)(nil)).Elem()
}

func (i GrantConstraintArgs) ToGrantConstraintOutput() GrantConstraintOutput {
	return i.ToGrantConstraintOutputWithContext(context.Background())
}

func (i GrantConstraintArgs) ToGrantConstraintOutputWithContext(ctx context.Context) GrantConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantConstraintOutput)
}

func (i *GrantConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*GrantConstraintArgs] {
	return pulumix.Val(i)
}

type GrantConstraintOutput struct{ *pulumi.OutputState }

func (GrantConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrantConstraint)(nil)).Elem()
}

func (o GrantConstraintOutput) ToGrantConstraintOutput() GrantConstraintOutput {
	return o
}

func (o GrantConstraintOutput) ToGrantConstraintOutputWithContext(ctx context.Context) GrantConstraintOutput {
	return o
}

func (o GrantConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[GrantConstraint] {
	return pulumix.Output[GrantConstraint]{
		OutputState: o.OutputState,
	}
}

// A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
func (o GrantConstraintOutput) EncryptionContextEquals() pulumix.MapOutput[string] {
	value := pulumix.Apply[GrantConstraint](o, func(v GrantConstraint) map[string]string { return v.EncryptionContextEquals })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
func (o GrantConstraintOutput) EncryptionContextSubset() pulumix.MapOutput[string] {
	value := pulumix.Apply[GrantConstraint](o, func(v GrantConstraint) map[string]string { return v.EncryptionContextSubset })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type GetKeyMultiRegionConfiguration struct {
	// Indicates whether the KMS key is a `PRIMARY` or `REPLICA` key.
	MultiRegionKeyType string `pulumi:"multiRegionKeyType"`
	// The key ARN and Region of the primary key. This is the current KMS key if it is the primary key.
	PrimaryKeys []GetKeyMultiRegionConfigurationPrimaryKey `pulumi:"primaryKeys"`
	// The key ARNs and Regions of all replica keys. Includes the current KMS key if it is a replica key.
	ReplicaKeys []GetKeyMultiRegionConfigurationReplicaKey `pulumi:"replicaKeys"`
}

type GetKeyMultiRegionConfigurationArgs struct {
	// Indicates whether the KMS key is a `PRIMARY` or `REPLICA` key.
	MultiRegionKeyType pulumix.Input[string] `pulumi:"multiRegionKeyType"`
	// The key ARN and Region of the primary key. This is the current KMS key if it is the primary key.
	PrimaryKeys pulumix.Input[[]*GetKeyMultiRegionConfigurationPrimaryKeyArgs] `pulumi:"primaryKeys"`
	// The key ARNs and Regions of all replica keys. Includes the current KMS key if it is a replica key.
	ReplicaKeys pulumix.Input[[]*GetKeyMultiRegionConfigurationReplicaKeyArgs] `pulumi:"replicaKeys"`
}

func (GetKeyMultiRegionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyMultiRegionConfiguration)(nil)).Elem()
}

func (i GetKeyMultiRegionConfigurationArgs) ToGetKeyMultiRegionConfigurationOutput() GetKeyMultiRegionConfigurationOutput {
	return i.ToGetKeyMultiRegionConfigurationOutputWithContext(context.Background())
}

func (i GetKeyMultiRegionConfigurationArgs) ToGetKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) GetKeyMultiRegionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyMultiRegionConfigurationOutput)
}

func (i *GetKeyMultiRegionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetKeyMultiRegionConfigurationArgs] {
	return pulumix.Val(i)
}

type GetKeyMultiRegionConfigurationOutput struct{ *pulumi.OutputState }

func (GetKeyMultiRegionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyMultiRegionConfiguration)(nil)).Elem()
}

func (o GetKeyMultiRegionConfigurationOutput) ToGetKeyMultiRegionConfigurationOutput() GetKeyMultiRegionConfigurationOutput {
	return o
}

func (o GetKeyMultiRegionConfigurationOutput) ToGetKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) GetKeyMultiRegionConfigurationOutput {
	return o
}

func (o GetKeyMultiRegionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetKeyMultiRegionConfiguration] {
	return pulumix.Output[GetKeyMultiRegionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the KMS key is a `PRIMARY` or `REPLICA` key.
func (o GetKeyMultiRegionConfigurationOutput) MultiRegionKeyType() pulumix.Output[string] {
	return pulumix.Apply[GetKeyMultiRegionConfiguration](o, func(v GetKeyMultiRegionConfiguration) string { return v.MultiRegionKeyType })
}

// The key ARN and Region of the primary key. This is the current KMS key if it is the primary key.
func (o GetKeyMultiRegionConfigurationOutput) PrimaryKeys() pulumix.GArrayOutput[GetKeyMultiRegionConfigurationPrimaryKey, GetKeyMultiRegionConfigurationPrimaryKeyOutput] {
	value := pulumix.Apply[GetKeyMultiRegionConfiguration](o, func(v GetKeyMultiRegionConfiguration) []GetKeyMultiRegionConfigurationPrimaryKey {
		return v.PrimaryKeys
	})
	return pulumix.GArrayOutput[GetKeyMultiRegionConfigurationPrimaryKey, GetKeyMultiRegionConfigurationPrimaryKeyOutput]{OutputState: value.OutputState}
}

// The key ARNs and Regions of all replica keys. Includes the current KMS key if it is a replica key.
func (o GetKeyMultiRegionConfigurationOutput) ReplicaKeys() pulumix.GArrayOutput[GetKeyMultiRegionConfigurationReplicaKey, GetKeyMultiRegionConfigurationReplicaKeyOutput] {
	value := pulumix.Apply[GetKeyMultiRegionConfiguration](o, func(v GetKeyMultiRegionConfiguration) []GetKeyMultiRegionConfigurationReplicaKey {
		return v.ReplicaKeys
	})
	return pulumix.GArrayOutput[GetKeyMultiRegionConfigurationReplicaKey, GetKeyMultiRegionConfigurationReplicaKeyOutput]{OutputState: value.OutputState}
}

type GetKeyMultiRegionConfigurationPrimaryKey struct {
	// The key ARN of a primary or replica key of a multi-Region key.
	Arn string `pulumi:"arn"`
	// The AWS Region of a primary or replica key in a multi-Region key.
	Region string `pulumi:"region"`
}

type GetKeyMultiRegionConfigurationPrimaryKeyArgs struct {
	// The key ARN of a primary or replica key of a multi-Region key.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The AWS Region of a primary or replica key in a multi-Region key.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (GetKeyMultiRegionConfigurationPrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (i GetKeyMultiRegionConfigurationPrimaryKeyArgs) ToGetKeyMultiRegionConfigurationPrimaryKeyOutput() GetKeyMultiRegionConfigurationPrimaryKeyOutput {
	return i.ToGetKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Background())
}

func (i GetKeyMultiRegionConfigurationPrimaryKeyArgs) ToGetKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) GetKeyMultiRegionConfigurationPrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyMultiRegionConfigurationPrimaryKeyOutput)
}

func (i *GetKeyMultiRegionConfigurationPrimaryKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetKeyMultiRegionConfigurationPrimaryKeyArgs] {
	return pulumix.Val(i)
}

type GetKeyMultiRegionConfigurationPrimaryKeyOutput struct{ *pulumi.OutputState }

func (GetKeyMultiRegionConfigurationPrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (o GetKeyMultiRegionConfigurationPrimaryKeyOutput) ToGetKeyMultiRegionConfigurationPrimaryKeyOutput() GetKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

func (o GetKeyMultiRegionConfigurationPrimaryKeyOutput) ToGetKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) GetKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

func (o GetKeyMultiRegionConfigurationPrimaryKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetKeyMultiRegionConfigurationPrimaryKey] {
	return pulumix.Output[GetKeyMultiRegionConfigurationPrimaryKey]{
		OutputState: o.OutputState,
	}
}

// The key ARN of a primary or replica key of a multi-Region key.
func (o GetKeyMultiRegionConfigurationPrimaryKeyOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetKeyMultiRegionConfigurationPrimaryKey](o, func(v GetKeyMultiRegionConfigurationPrimaryKey) string { return v.Arn })
}

// The AWS Region of a primary or replica key in a multi-Region key.
func (o GetKeyMultiRegionConfigurationPrimaryKeyOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[GetKeyMultiRegionConfigurationPrimaryKey](o, func(v GetKeyMultiRegionConfigurationPrimaryKey) string { return v.Region })
}

type GetKeyMultiRegionConfigurationReplicaKey struct {
	// The key ARN of a primary or replica key of a multi-Region key.
	Arn string `pulumi:"arn"`
	// The AWS Region of a primary or replica key in a multi-Region key.
	Region string `pulumi:"region"`
}

type GetKeyMultiRegionConfigurationReplicaKeyArgs struct {
	// The key ARN of a primary or replica key of a multi-Region key.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The AWS Region of a primary or replica key in a multi-Region key.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (GetKeyMultiRegionConfigurationReplicaKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i GetKeyMultiRegionConfigurationReplicaKeyArgs) ToGetKeyMultiRegionConfigurationReplicaKeyOutput() GetKeyMultiRegionConfigurationReplicaKeyOutput {
	return i.ToGetKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Background())
}

func (i GetKeyMultiRegionConfigurationReplicaKeyArgs) ToGetKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) GetKeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyMultiRegionConfigurationReplicaKeyOutput)
}

func (i *GetKeyMultiRegionConfigurationReplicaKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetKeyMultiRegionConfigurationReplicaKeyArgs] {
	return pulumix.Val(i)
}

type GetKeyMultiRegionConfigurationReplicaKeyOutput struct{ *pulumi.OutputState }

func (GetKeyMultiRegionConfigurationReplicaKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o GetKeyMultiRegionConfigurationReplicaKeyOutput) ToGetKeyMultiRegionConfigurationReplicaKeyOutput() GetKeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

func (o GetKeyMultiRegionConfigurationReplicaKeyOutput) ToGetKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) GetKeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

func (o GetKeyMultiRegionConfigurationReplicaKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetKeyMultiRegionConfigurationReplicaKey] {
	return pulumix.Output[GetKeyMultiRegionConfigurationReplicaKey]{
		OutputState: o.OutputState,
	}
}

// The key ARN of a primary or replica key of a multi-Region key.
func (o GetKeyMultiRegionConfigurationReplicaKeyOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetKeyMultiRegionConfigurationReplicaKey](o, func(v GetKeyMultiRegionConfigurationReplicaKey) string { return v.Arn })
}

// The AWS Region of a primary or replica key in a multi-Region key.
func (o GetKeyMultiRegionConfigurationReplicaKeyOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[GetKeyMultiRegionConfigurationReplicaKey](o, func(v GetKeyMultiRegionConfigurationReplicaKey) string { return v.Region })
}

type GetKeyXksKeyConfiguration struct {
	// The globally unique identifier for the key
	Id string `pulumi:"id"`
}

type GetKeyXksKeyConfigurationArgs struct {
	// The globally unique identifier for the key
	Id pulumix.Input[string] `pulumi:"id"`
}

func (GetKeyXksKeyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyXksKeyConfiguration)(nil)).Elem()
}

func (i GetKeyXksKeyConfigurationArgs) ToGetKeyXksKeyConfigurationOutput() GetKeyXksKeyConfigurationOutput {
	return i.ToGetKeyXksKeyConfigurationOutputWithContext(context.Background())
}

func (i GetKeyXksKeyConfigurationArgs) ToGetKeyXksKeyConfigurationOutputWithContext(ctx context.Context) GetKeyXksKeyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyXksKeyConfigurationOutput)
}

func (i *GetKeyXksKeyConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetKeyXksKeyConfigurationArgs] {
	return pulumix.Val(i)
}

type GetKeyXksKeyConfigurationOutput struct{ *pulumi.OutputState }

func (GetKeyXksKeyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyXksKeyConfiguration)(nil)).Elem()
}

func (o GetKeyXksKeyConfigurationOutput) ToGetKeyXksKeyConfigurationOutput() GetKeyXksKeyConfigurationOutput {
	return o
}

func (o GetKeyXksKeyConfigurationOutput) ToGetKeyXksKeyConfigurationOutputWithContext(ctx context.Context) GetKeyXksKeyConfigurationOutput {
	return o
}

func (o GetKeyXksKeyConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetKeyXksKeyConfiguration] {
	return pulumix.Output[GetKeyXksKeyConfiguration]{
		OutputState: o.OutputState,
	}
}

// The globally unique identifier for the key
func (o GetKeyXksKeyConfigurationOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetKeyXksKeyConfiguration](o, func(v GetKeyXksKeyConfiguration) string { return v.Id })
}

type GetSecretSecret struct {
	Context     map[string]string `pulumi:"context"`
	GrantTokens []string          `pulumi:"grantTokens"`
	Name        string            `pulumi:"name"`
	Payload     string            `pulumi:"payload"`
}

type GetSecretSecretArgs struct {
	Context     pulumix.Input[map[string]string] `pulumi:"context"`
	GrantTokens pulumix.Input[[]string]          `pulumi:"grantTokens"`
	Name        pulumix.Input[string]            `pulumi:"name"`
	Payload     pulumix.Input[string]            `pulumi:"payload"`
}

func (GetSecretSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretSecret)(nil)).Elem()
}

func (i GetSecretSecretArgs) ToGetSecretSecretOutput() GetSecretSecretOutput {
	return i.ToGetSecretSecretOutputWithContext(context.Background())
}

func (i GetSecretSecretArgs) ToGetSecretSecretOutputWithContext(ctx context.Context) GetSecretSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretSecretOutput)
}

func (i *GetSecretSecretArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSecretSecretArgs] {
	return pulumix.Val(i)
}

type GetSecretSecretOutput struct{ *pulumi.OutputState }

func (GetSecretSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretSecret)(nil)).Elem()
}

func (o GetSecretSecretOutput) ToGetSecretSecretOutput() GetSecretSecretOutput {
	return o
}

func (o GetSecretSecretOutput) ToGetSecretSecretOutputWithContext(ctx context.Context) GetSecretSecretOutput {
	return o
}

func (o GetSecretSecretOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecretSecret] {
	return pulumix.Output[GetSecretSecret]{
		OutputState: o.OutputState,
	}
}

func (o GetSecretSecretOutput) Context() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetSecretSecret](o, func(v GetSecretSecret) map[string]string { return v.Context })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

func (o GetSecretSecretOutput) GrantTokens() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetSecretSecret](o, func(v GetSecretSecret) []string { return v.GrantTokens })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetSecretSecretOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSecretSecret](o, func(v GetSecretSecret) string { return v.Name })
}

func (o GetSecretSecretOutput) Payload() pulumix.Output[string] {
	return pulumix.Apply[GetSecretSecret](o, func(v GetSecretSecret) string { return v.Payload })
}

type GetSecretsSecret struct {
	// An optional mapping that makes up the Encryption Context for the secret.
	Context map[string]string `pulumi:"context"`
	// The encryption algorithm that will be used to decrypt the ciphertext. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. Valid Values: SYMMETRIC_DEFAULT | RSAES_OAEP_SHA_1 | RSAES_OAEP_SHA_256 | SM2PKE
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// An optional list of Grant Tokens for the secret.
	GrantTokens []string `pulumi:"grantTokens"`
	// Specifies the KMS key that AWS KMS uses to decrypt the ciphertext. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.
	//
	// For more information on `context` and `grantTokens` see the [KMS
	// Concepts](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html)
	KeyId *string `pulumi:"keyId"`
	// Name to export this secret under in the attributes.
	Name string `pulumi:"name"`
	// Base64 encoded payload, as returned from a KMS encrypt operation.
	Payload string `pulumi:"payload"`
}

type GetSecretsSecretArgs struct {
	// An optional mapping that makes up the Encryption Context for the secret.
	Context pulumix.Input[map[string]string] `pulumi:"context"`
	// The encryption algorithm that will be used to decrypt the ciphertext. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. Valid Values: SYMMETRIC_DEFAULT | RSAES_OAEP_SHA_1 | RSAES_OAEP_SHA_256 | SM2PKE
	EncryptionAlgorithm pulumix.Input[*string] `pulumi:"encryptionAlgorithm"`
	// An optional list of Grant Tokens for the secret.
	GrantTokens pulumix.Input[[]string] `pulumi:"grantTokens"`
	// Specifies the KMS key that AWS KMS uses to decrypt the ciphertext. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.
	//
	// For more information on `context` and `grantTokens` see the [KMS
	// Concepts](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html)
	KeyId pulumix.Input[*string] `pulumi:"keyId"`
	// Name to export this secret under in the attributes.
	Name pulumix.Input[string] `pulumi:"name"`
	// Base64 encoded payload, as returned from a KMS encrypt operation.
	Payload pulumix.Input[string] `pulumi:"payload"`
}

func (GetSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return i.ToGetSecretsSecretOutputWithContext(context.Background())
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretOutput)
}

func (i *GetSecretsSecretArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSecretsSecretArgs] {
	return pulumix.Val(i)
}

type GetSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return o
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return o
}

func (o GetSecretsSecretOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecretsSecret] {
	return pulumix.Output[GetSecretsSecret]{
		OutputState: o.OutputState,
	}
}

// An optional mapping that makes up the Encryption Context for the secret.
func (o GetSecretsSecretOutput) Context() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetSecretsSecret](o, func(v GetSecretsSecret) map[string]string { return v.Context })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The encryption algorithm that will be used to decrypt the ciphertext. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. Valid Values: SYMMETRIC_DEFAULT | RSAES_OAEP_SHA_1 | RSAES_OAEP_SHA_256 | SM2PKE
func (o GetSecretsSecretOutput) EncryptionAlgorithm() pulumix.Output[*string] {
	return pulumix.Apply[GetSecretsSecret](o, func(v GetSecretsSecret) *string { return v.EncryptionAlgorithm })
}

// An optional list of Grant Tokens for the secret.
func (o GetSecretsSecretOutput) GrantTokens() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetSecretsSecret](o, func(v GetSecretsSecret) []string { return v.GrantTokens })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the KMS key that AWS KMS uses to decrypt the ciphertext. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.
//
// For more information on `context` and `grantTokens` see the [KMS
// Concepts](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html)
func (o GetSecretsSecretOutput) KeyId() pulumix.Output[*string] {
	return pulumix.Apply[GetSecretsSecret](o, func(v GetSecretsSecret) *string { return v.KeyId })
}

// Name to export this secret under in the attributes.
func (o GetSecretsSecretOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSecretsSecret](o, func(v GetSecretsSecret) string { return v.Name })
}

// Base64 encoded payload, as returned from a KMS encrypt operation.
func (o GetSecretsSecretOutput) Payload() pulumix.Output[string] {
	return pulumix.Apply[GetSecretsSecret](o, func(v GetSecretsSecret) string { return v.Payload })
}

func init() {
	pulumi.RegisterOutputType(GrantConstraintOutput{})
	pulumi.RegisterOutputType(GetKeyMultiRegionConfigurationOutput{})
	pulumi.RegisterOutputType(GetKeyMultiRegionConfigurationPrimaryKeyOutput{})
	pulumi.RegisterOutputType(GetKeyMultiRegionConfigurationReplicaKeyOutput{})
	pulumi.RegisterOutputType(GetKeyXksKeyConfigurationOutput{})
	pulumi.RegisterOutputType(GetSecretSecretOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretOutput{})
}
