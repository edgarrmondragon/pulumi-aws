// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecrpublic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Public Elastic Container Registry Repository.
//
// > **NOTE:** This resource can only be used in the `us-east-1` region.
type Repository struct {
	pulumi.CustomResourceState

	// Full ARN of the repository.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Catalog data configuration for the repository. See below for schema.
	CatalogData  pulumix.GPtrOutput[RepositoryCatalogData, RepositoryCatalogDataOutput] `pulumi:"catalogData"`
	ForceDestroy pulumix.Output[*bool]                                                  `pulumi:"forceDestroy"`
	// The registry ID where the repository was created.
	RegistryId pulumix.Output[string] `pulumi:"registryId"`
	// Name of the repository.
	RepositoryName pulumix.Output[string] `pulumi:"repositoryName"`
	// The URI of the repository.
	RepositoryUri pulumix.Output[string] `pulumi:"repositoryUri"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("aws:ecrpublic/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("aws:ecrpublic/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// Full ARN of the repository.
	Arn *string `pulumi:"arn"`
	// Catalog data configuration for the repository. See below for schema.
	CatalogData  *RepositoryCatalogData `pulumi:"catalogData"`
	ForceDestroy *bool                  `pulumi:"forceDestroy"`
	// The registry ID where the repository was created.
	RegistryId *string `pulumi:"registryId"`
	// Name of the repository.
	RepositoryName *string `pulumi:"repositoryName"`
	// The URI of the repository.
	RepositoryUri *string `pulumi:"repositoryUri"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RepositoryState struct {
	// Full ARN of the repository.
	Arn pulumix.Input[*string]
	// Catalog data configuration for the repository. See below for schema.
	CatalogData  pulumix.Input[*RepositoryCatalogDataArgs]
	ForceDestroy pulumix.Input[*bool]
	// The registry ID where the repository was created.
	RegistryId pulumix.Input[*string]
	// Name of the repository.
	RepositoryName pulumix.Input[*string]
	// The URI of the repository.
	RepositoryUri pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// Catalog data configuration for the repository. See below for schema.
	CatalogData  *RepositoryCatalogData `pulumi:"catalogData"`
	ForceDestroy *bool                  `pulumi:"forceDestroy"`
	// Name of the repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Catalog data configuration for the repository. See below for schema.
	CatalogData  pulumix.Input[*RepositoryCatalogDataArgs]
	ForceDestroy pulumix.Input[*bool]
	// Name of the repository.
	RepositoryName pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[Repository] {
	return pulumix.Output[Repository]{
		OutputState: o.OutputState,
	}
}

// Full ARN of the repository.
func (o RepositoryOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Catalog data configuration for the repository. See below for schema.
func (o RepositoryOutput) CatalogData() pulumix.GPtrOutput[RepositoryCatalogData, RepositoryCatalogDataOutput] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.GPtrOutput[RepositoryCatalogData, RepositoryCatalogDataOutput] {
		return v.CatalogData
	})
	unwrapped := pulumix.Flatten[*RepositoryCatalogData, pulumix.GPtrOutput[RepositoryCatalogData, RepositoryCatalogDataOutput]](value)
	return pulumix.GPtrOutput[RepositoryCatalogData, RepositoryCatalogDataOutput]{OutputState: unwrapped.OutputState}
}

func (o RepositoryOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The registry ID where the repository was created.
func (o RepositoryOutput) RegistryId() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.RegistryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the repository.
func (o RepositoryOutput) RepositoryName() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.RepositoryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The URI of the repository.
func (o RepositoryOutput) RepositoryUri() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.RepositoryUri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RepositoryOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RepositoryOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RepositoryOutput{})
}
