// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a budgets budget resource. Budgets use the cost visualisation provided by Cost Explorer to show you the status of your budgets, to provide forecasts of your estimated costs, and to track your AWS usage, including your free tier usage.
type Budget struct {
	pulumi.CustomResourceState

	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// The ARN of the budget.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	AutoAdjustData pulumix.GPtrOutput[BudgetAutoAdjustData, BudgetAutoAdjustDataOutput] `pulumi:"autoAdjustData"`
	// Whether this budget tracks monetary cost or usage.
	BudgetType pulumix.Output[string] `pulumi:"budgetType"`
	// A list of CostFilter name/values pair to apply to budget.
	CostFilters pulumix.GArrayOutput[BudgetCostFilter, BudgetCostFilterOutput] `pulumi:"costFilters"`
	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	CostTypes pulumix.GPtrOutput[BudgetCostTypes, BudgetCostTypesOutput] `pulumi:"costTypes"`
	// The amount of cost or usage being measured for a budget.
	LimitAmount pulumix.Output[string] `pulumi:"limitAmount"`
	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	LimitUnit pulumix.Output[string] `pulumi:"limitUnit"`
	// The name of a budget. Unique within accounts.
	Name pulumix.Output[string] `pulumi:"name"`
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	Notifications pulumix.GArrayOutput[BudgetNotification, BudgetNotificationOutput] `pulumi:"notifications"`
	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	PlannedLimits pulumix.GArrayOutput[BudgetPlannedLimit, BudgetPlannedLimitOutput] `pulumi:"plannedLimits"`
	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
	TimePeriodEnd pulumix.Output[*string] `pulumi:"timePeriodEnd"`
	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
	TimePeriodStart pulumix.Output[string] `pulumi:"timePeriodStart"`
	// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
	TimeUnit pulumix.Output[string] `pulumi:"timeUnit"`
}

// NewBudget registers a new resource with the given unique name, arguments, and options.
func NewBudget(ctx *pulumi.Context,
	name string, args *BudgetArgs, opts ...pulumi.ResourceOption) (*Budget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BudgetType == nil {
		return nil, errors.New("invalid value for required argument 'BudgetType'")
	}
	if args.TimeUnit == nil {
		return nil, errors.New("invalid value for required argument 'TimeUnit'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Budget
	err := ctx.RegisterResource("aws:budgets/budget:Budget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBudget gets an existing Budget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBudget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BudgetState, opts ...pulumi.ResourceOption) (*Budget, error) {
	var resource Budget
	err := ctx.ReadResource("aws:budgets/budget:Budget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Budget resources.
type budgetState struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// The ARN of the budget.
	Arn *string `pulumi:"arn"`
	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	AutoAdjustData *BudgetAutoAdjustData `pulumi:"autoAdjustData"`
	// Whether this budget tracks monetary cost or usage.
	BudgetType *string `pulumi:"budgetType"`
	// A list of CostFilter name/values pair to apply to budget.
	CostFilters []BudgetCostFilter `pulumi:"costFilters"`
	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	CostTypes *BudgetCostTypes `pulumi:"costTypes"`
	// The amount of cost or usage being measured for a budget.
	LimitAmount *string `pulumi:"limitAmount"`
	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	LimitUnit *string `pulumi:"limitUnit"`
	// The name of a budget. Unique within accounts.
	Name *string `pulumi:"name"`
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix *string `pulumi:"namePrefix"`
	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	Notifications []BudgetNotification `pulumi:"notifications"`
	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	PlannedLimits []BudgetPlannedLimit `pulumi:"plannedLimits"`
	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
	TimePeriodEnd *string `pulumi:"timePeriodEnd"`
	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
	TimePeriodStart *string `pulumi:"timePeriodStart"`
	// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
	TimeUnit *string `pulumi:"timeUnit"`
}

type BudgetState struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumix.Input[*string]
	// The ARN of the budget.
	Arn pulumix.Input[*string]
	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	AutoAdjustData pulumix.Input[*BudgetAutoAdjustDataArgs]
	// Whether this budget tracks monetary cost or usage.
	BudgetType pulumix.Input[*string]
	// A list of CostFilter name/values pair to apply to budget.
	CostFilters pulumix.Input[[]*BudgetCostFilterArgs]
	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	CostTypes pulumix.Input[*BudgetCostTypesArgs]
	// The amount of cost or usage being measured for a budget.
	LimitAmount pulumix.Input[*string]
	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	LimitUnit pulumix.Input[*string]
	// The name of a budget. Unique within accounts.
	Name pulumix.Input[*string]
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix pulumix.Input[*string]
	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	Notifications pulumix.Input[[]*BudgetNotificationArgs]
	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	PlannedLimits pulumix.Input[[]*BudgetPlannedLimitArgs]
	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
	TimePeriodEnd pulumix.Input[*string]
	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
	TimePeriodStart pulumix.Input[*string]
	// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
	TimeUnit pulumix.Input[*string]
}

func (BudgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetState)(nil)).Elem()
}

type budgetArgs struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	AutoAdjustData *BudgetAutoAdjustData `pulumi:"autoAdjustData"`
	// Whether this budget tracks monetary cost or usage.
	BudgetType string `pulumi:"budgetType"`
	// A list of CostFilter name/values pair to apply to budget.
	CostFilters []BudgetCostFilter `pulumi:"costFilters"`
	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	CostTypes *BudgetCostTypes `pulumi:"costTypes"`
	// The amount of cost or usage being measured for a budget.
	LimitAmount *string `pulumi:"limitAmount"`
	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	LimitUnit *string `pulumi:"limitUnit"`
	// The name of a budget. Unique within accounts.
	Name *string `pulumi:"name"`
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix *string `pulumi:"namePrefix"`
	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	Notifications []BudgetNotification `pulumi:"notifications"`
	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	PlannedLimits []BudgetPlannedLimit `pulumi:"plannedLimits"`
	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
	TimePeriodEnd *string `pulumi:"timePeriodEnd"`
	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
	TimePeriodStart *string `pulumi:"timePeriodStart"`
	// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
	TimeUnit string `pulumi:"timeUnit"`
}

// The set of arguments for constructing a Budget resource.
type BudgetArgs struct {
	// The ID of the target account for budget. Will use current user's accountId by default if omitted.
	AccountId pulumix.Input[*string]
	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	AutoAdjustData pulumix.Input[*BudgetAutoAdjustDataArgs]
	// Whether this budget tracks monetary cost or usage.
	BudgetType pulumix.Input[string]
	// A list of CostFilter name/values pair to apply to budget.
	CostFilters pulumix.Input[[]*BudgetCostFilterArgs]
	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	CostTypes pulumix.Input[*BudgetCostTypesArgs]
	// The amount of cost or usage being measured for a budget.
	LimitAmount pulumix.Input[*string]
	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
	LimitUnit pulumix.Input[*string]
	// The name of a budget. Unique within accounts.
	Name pulumix.Input[*string]
	// The prefix of the name of a budget. Unique within accounts.
	NamePrefix pulumix.Input[*string]
	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	Notifications pulumix.Input[[]*BudgetNotificationArgs]
	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
	PlannedLimits pulumix.Input[[]*BudgetPlannedLimitArgs]
	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
	TimePeriodEnd pulumix.Input[*string]
	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
	TimePeriodStart pulumix.Input[*string]
	// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
	TimeUnit pulumix.Input[string]
}

func (BudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetArgs)(nil)).Elem()
}

type BudgetOutput struct{ *pulumi.OutputState }

func (BudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Budget)(nil)).Elem()
}

func (o BudgetOutput) ToBudgetOutput() BudgetOutput {
	return o
}

func (o BudgetOutput) ToBudgetOutputWithContext(ctx context.Context) BudgetOutput {
	return o
}

func (o BudgetOutput) ToOutput(ctx context.Context) pulumix.Output[Budget] {
	return pulumix.Output[Budget]{
		OutputState: o.OutputState,
	}
}

// The ID of the target account for budget. Will use current user's accountId by default if omitted.
func (o BudgetOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the budget.
func (o BudgetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
func (o BudgetOutput) AutoAdjustData() pulumix.GPtrOutput[BudgetAutoAdjustData, BudgetAutoAdjustDataOutput] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.GPtrOutput[BudgetAutoAdjustData, BudgetAutoAdjustDataOutput] {
		return v.AutoAdjustData
	})
	unwrapped := pulumix.Flatten[*BudgetAutoAdjustData, pulumix.GPtrOutput[BudgetAutoAdjustData, BudgetAutoAdjustDataOutput]](value)
	return pulumix.GPtrOutput[BudgetAutoAdjustData, BudgetAutoAdjustDataOutput]{OutputState: unwrapped.OutputState}
}

// Whether this budget tracks monetary cost or usage.
func (o BudgetOutput) BudgetType() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.BudgetType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of CostFilter name/values pair to apply to budget.
func (o BudgetOutput) CostFilters() pulumix.GArrayOutput[BudgetCostFilter, BudgetCostFilterOutput] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.GArrayOutput[BudgetCostFilter, BudgetCostFilterOutput] { return v.CostFilters })
	unwrapped := pulumix.Flatten[[]BudgetCostFilter, pulumix.GArrayOutput[BudgetCostFilter, BudgetCostFilterOutput]](value)
	return pulumix.GArrayOutput[BudgetCostFilter, BudgetCostFilterOutput]{OutputState: unwrapped.OutputState}
}

// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
func (o BudgetOutput) CostTypes() pulumix.GPtrOutput[BudgetCostTypes, BudgetCostTypesOutput] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.GPtrOutput[BudgetCostTypes, BudgetCostTypesOutput] { return v.CostTypes })
	unwrapped := pulumix.Flatten[*BudgetCostTypes, pulumix.GPtrOutput[BudgetCostTypes, BudgetCostTypesOutput]](value)
	return pulumix.GPtrOutput[BudgetCostTypes, BudgetCostTypesOutput]{OutputState: unwrapped.OutputState}
}

// The amount of cost or usage being measured for a budget.
func (o BudgetOutput) LimitAmount() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.LimitAmount })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
func (o BudgetOutput) LimitUnit() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.LimitUnit })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of a budget. Unique within accounts.
func (o BudgetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The prefix of the name of a budget. Unique within accounts.
func (o BudgetOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
func (o BudgetOutput) Notifications() pulumix.GArrayOutput[BudgetNotification, BudgetNotificationOutput] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.GArrayOutput[BudgetNotification, BudgetNotificationOutput] {
		return v.Notifications
	})
	unwrapped := pulumix.Flatten[[]BudgetNotification, pulumix.GArrayOutput[BudgetNotification, BudgetNotificationOutput]](value)
	return pulumix.GArrayOutput[BudgetNotification, BudgetNotificationOutput]{OutputState: unwrapped.OutputState}
}

// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
func (o BudgetOutput) PlannedLimits() pulumix.GArrayOutput[BudgetPlannedLimit, BudgetPlannedLimitOutput] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.GArrayOutput[BudgetPlannedLimit, BudgetPlannedLimitOutput] {
		return v.PlannedLimits
	})
	unwrapped := pulumix.Flatten[[]BudgetPlannedLimit, pulumix.GArrayOutput[BudgetPlannedLimit, BudgetPlannedLimitOutput]](value)
	return pulumix.GArrayOutput[BudgetPlannedLimit, BudgetPlannedLimitOutput]{OutputState: unwrapped.OutputState}
}

// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
func (o BudgetOutput) TimePeriodEnd() pulumix.Output[*string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[*string] { return v.TimePeriodEnd })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
func (o BudgetOutput) TimePeriodStart() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.TimePeriodStart })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
func (o BudgetOutput) TimeUnit() pulumix.Output[string] {
	value := pulumix.Apply[Budget](o, func(v Budget) pulumix.Output[string] { return v.TimeUnit })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BudgetOutput{})
}
