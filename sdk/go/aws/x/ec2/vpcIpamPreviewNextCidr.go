// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Previews a CIDR from an IPAM address pool. Only works for private IPv4.
type VpcIpamPreviewNextCidr struct {
	pulumi.CustomResourceState

	// The previewed CIDR from the pool.
	Cidr pulumix.Output[string] `pulumi:"cidr"`
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs pulumix.ArrayOutput[string] `pulumi:"disallowedCidrs"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Output[string] `pulumi:"ipamPoolId"`
	// The netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength pulumix.Output[*int] `pulumi:"netmaskLength"`
}

// NewVpcIpamPreviewNextCidr registers a new resource with the given unique name, arguments, and options.
func NewVpcIpamPreviewNextCidr(ctx *pulumi.Context,
	name string, args *VpcIpamPreviewNextCidrArgs, opts ...pulumi.ResourceOption) (*VpcIpamPreviewNextCidr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcIpamPreviewNextCidr
	err := ctx.RegisterResource("aws:ec2/vpcIpamPreviewNextCidr:VpcIpamPreviewNextCidr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpamPreviewNextCidr gets an existing VpcIpamPreviewNextCidr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpamPreviewNextCidr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamPreviewNextCidrState, opts ...pulumi.ResourceOption) (*VpcIpamPreviewNextCidr, error) {
	var resource VpcIpamPreviewNextCidr
	err := ctx.ReadResource("aws:ec2/vpcIpamPreviewNextCidr:VpcIpamPreviewNextCidr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpamPreviewNextCidr resources.
type vpcIpamPreviewNextCidrState struct {
	// The previewed CIDR from the pool.
	Cidr *string `pulumi:"cidr"`
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs []string `pulumi:"disallowedCidrs"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId *string `pulumi:"ipamPoolId"`
	// The netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

type VpcIpamPreviewNextCidrState struct {
	// The previewed CIDR from the pool.
	Cidr pulumix.Input[*string]
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs pulumix.Input[[]string]
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[*string]
	// The netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength pulumix.Input[*int]
}

func (VpcIpamPreviewNextCidrState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPreviewNextCidrState)(nil)).Elem()
}

type vpcIpamPreviewNextCidrArgs struct {
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs []string `pulumi:"disallowedCidrs"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// The netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// The set of arguments for constructing a VpcIpamPreviewNextCidr resource.
type VpcIpamPreviewNextCidrArgs struct {
	// Exclude a particular CIDR range from being returned by the pool.
	DisallowedCidrs pulumix.Input[[]string]
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[string]
	// The netmask length of the CIDR you would like to preview from the IPAM pool.
	NetmaskLength pulumix.Input[*int]
}

func (VpcIpamPreviewNextCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPreviewNextCidrArgs)(nil)).Elem()
}

type VpcIpamPreviewNextCidrOutput struct{ *pulumi.OutputState }

func (VpcIpamPreviewNextCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpamPreviewNextCidr)(nil)).Elem()
}

func (o VpcIpamPreviewNextCidrOutput) ToVpcIpamPreviewNextCidrOutput() VpcIpamPreviewNextCidrOutput {
	return o
}

func (o VpcIpamPreviewNextCidrOutput) ToVpcIpamPreviewNextCidrOutputWithContext(ctx context.Context) VpcIpamPreviewNextCidrOutput {
	return o
}

func (o VpcIpamPreviewNextCidrOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIpamPreviewNextCidr] {
	return pulumix.Output[VpcIpamPreviewNextCidr]{
		OutputState: o.OutputState,
	}
}

// The previewed CIDR from the pool.
func (o VpcIpamPreviewNextCidrOutput) Cidr() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPreviewNextCidr](o, func(v VpcIpamPreviewNextCidr) pulumix.Output[string] { return v.Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Exclude a particular CIDR range from being returned by the pool.
func (o VpcIpamPreviewNextCidrOutput) DisallowedCidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcIpamPreviewNextCidr](o, func(v VpcIpamPreviewNextCidr) pulumix.ArrayOutput[string] { return v.DisallowedCidrs })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the pool to which you want to assign a CIDR.
func (o VpcIpamPreviewNextCidrOutput) IpamPoolId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPreviewNextCidr](o, func(v VpcIpamPreviewNextCidr) pulumix.Output[string] { return v.IpamPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The netmask length of the CIDR you would like to preview from the IPAM pool.
func (o VpcIpamPreviewNextCidrOutput) NetmaskLength() pulumix.Output[*int] {
	value := pulumix.Apply[VpcIpamPreviewNextCidr](o, func(v VpcIpamPreviewNextCidr) pulumix.Output[*int] { return v.NetmaskLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcIpamPreviewNextCidrOutput{})
}
