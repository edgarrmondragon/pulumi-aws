// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get a list the AWS services for which the specified account is a delegated administrator
func GetDelegatedServices(ctx *pulumi.Context, args *GetDelegatedServicesArgs, opts ...pulumi.InvokeOption) (*GetDelegatedServicesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDelegatedServicesResult
	err := ctx.Invoke("aws:organizations/getDelegatedServices:getDelegatedServices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDelegatedServices.
type GetDelegatedServicesArgs struct {
	// Account ID number of a delegated administrator account in the organization.
	AccountId string `pulumi:"accountId"`
}

// A collection of values returned by getDelegatedServices.
type GetDelegatedServicesResult struct {
	AccountId string `pulumi:"accountId"`
	// Services for which the account is a delegated administrator, which have the following attributes:
	DelegatedServices []GetDelegatedServicesDelegatedService `pulumi:"delegatedServices"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetDelegatedServicesOutput(ctx *pulumi.Context, args GetDelegatedServicesOutputArgs, opts ...pulumi.InvokeOption) GetDelegatedServicesResultOutput {
	outputResult := pulumix.ApplyErr[*GetDelegatedServicesArgs](args.ToOutput(), func(plainArgs *GetDelegatedServicesArgs) (*GetDelegatedServicesResult, error) {
		return GetDelegatedServices(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetDelegatedServicesResultOutput, *GetDelegatedServicesResult](outputResult)
}

// A collection of arguments for invoking getDelegatedServices.
type GetDelegatedServicesOutputArgs struct {
	// Account ID number of a delegated administrator account in the organization.
	AccountId pulumix.Input[string] `pulumi:"accountId"`
}

func (args GetDelegatedServicesOutputArgs) ToOutput() pulumix.Output[*GetDelegatedServicesArgs] {
	allArgs := pulumix.All(
		args.AccountId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetDelegatedServicesArgs {
		return &GetDelegatedServicesArgs{
			AccountId: resolvedArgs[0].(string),
		}
	})
}

type GetDelegatedServicesResultOutput struct{ *pulumi.OutputState }

func (GetDelegatedServicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegatedServicesResult)(nil)).Elem()
}

func (o GetDelegatedServicesResultOutput) ToOutput(context.Context) pulumix.Output[*GetDelegatedServicesResult] {
	return pulumix.Output[*GetDelegatedServicesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetDelegatedServicesResultOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[*GetDelegatedServicesResult](o, func(v *GetDelegatedServicesResult) string { return v.AccountId })
}

func (o GetDelegatedServicesResultOutput) DelegatedServices() pulumix.GArrayOutput[GetDelegatedServicesDelegatedService, GetDelegatedServicesDelegatedServiceOutput] {
	value := pulumix.Apply[*GetDelegatedServicesResult](o, func(v *GetDelegatedServicesResult) []GetDelegatedServicesDelegatedService { return v.DelegatedServices })
	return pulumix.GArrayOutput[GetDelegatedServicesDelegatedService, GetDelegatedServicesDelegatedServiceOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetDelegatedServicesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetDelegatedServicesResult](o, func(v *GetDelegatedServicesResult) string { return v.Id })
}
