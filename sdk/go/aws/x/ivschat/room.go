// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IVS (Interactive Video) Chat Room.
type Room struct {
	pulumi.CustomResourceState

	// ARN of the Room.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers pulumix.ArrayOutput[string] `pulumi:"loggingConfigurationIdentifiers"`
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength pulumix.Output[int] `pulumi:"maximumMessageLength"`
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond pulumix.Output[int] `pulumi:"maximumMessageRatePerSecond"`
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler pulumix.GPtrOutput[RoomMessageReviewHandler, RoomMessageReviewHandlerOutput] `pulumi:"messageReviewHandler"`
	// Room name.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRoom registers a new resource with the given unique name, arguments, and options.
func NewRoom(ctx *pulumi.Context,
	name string, args *RoomArgs, opts ...pulumi.ResourceOption) (*Room, error) {
	if args == nil {
		args = &RoomArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Room
	err := ctx.RegisterResource("aws:ivschat/room:Room", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoom gets an existing Room resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoomState, opts ...pulumi.ResourceOption) (*Room, error) {
	var resource Room
	err := ctx.ReadResource("aws:ivschat/room:Room", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Room resources.
type roomState struct {
	// ARN of the Room.
	Arn *string `pulumi:"arn"`
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers []string `pulumi:"loggingConfigurationIdentifiers"`
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength *int `pulumi:"maximumMessageLength"`
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond *int `pulumi:"maximumMessageRatePerSecond"`
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler *RoomMessageReviewHandler `pulumi:"messageReviewHandler"`
	// Room name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RoomState struct {
	// ARN of the Room.
	Arn pulumix.Input[*string]
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers pulumix.Input[[]string]
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength pulumix.Input[*int]
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond pulumix.Input[*int]
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler pulumix.Input[*RoomMessageReviewHandlerArgs]
	// Room name.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RoomState) ElementType() reflect.Type {
	return reflect.TypeOf((*roomState)(nil)).Elem()
}

type roomArgs struct {
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers []string `pulumi:"loggingConfigurationIdentifiers"`
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength *int `pulumi:"maximumMessageLength"`
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond *int `pulumi:"maximumMessageRatePerSecond"`
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler *RoomMessageReviewHandler `pulumi:"messageReviewHandler"`
	// Room name.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Room resource.
type RoomArgs struct {
	// List of Logging Configuration
	// ARNs to attach to the room.
	LoggingConfigurationIdentifiers pulumix.Input[[]string]
	// Maximum number of characters in a single
	// message. Messages are expected to be UTF-8 encoded and this limit applies
	// specifically to rune/code-point count, not number of bytes.
	MaximumMessageLength pulumix.Input[*int]
	// Maximum number of messages per
	// second that can be sent to the room (by all clients).
	MaximumMessageRatePerSecond pulumix.Input[*int]
	// Configuration information for optional
	// review of messages.
	MessageReviewHandler pulumix.Input[*RoomMessageReviewHandlerArgs]
	// Room name.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RoomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roomArgs)(nil)).Elem()
}

type RoomOutput struct{ *pulumi.OutputState }

func (RoomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Room)(nil)).Elem()
}

func (o RoomOutput) ToRoomOutput() RoomOutput {
	return o
}

func (o RoomOutput) ToRoomOutputWithContext(ctx context.Context) RoomOutput {
	return o
}

func (o RoomOutput) ToOutput(ctx context.Context) pulumix.Output[Room] {
	return pulumix.Output[Room]{
		OutputState: o.OutputState,
	}
}

// ARN of the Room.
func (o RoomOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of Logging Configuration
// ARNs to attach to the room.
func (o RoomOutput) LoggingConfigurationIdentifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.ArrayOutput[string] { return v.LoggingConfigurationIdentifiers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Maximum number of characters in a single
// message. Messages are expected to be UTF-8 encoded and this limit applies
// specifically to rune/code-point count, not number of bytes.
func (o RoomOutput) MaximumMessageLength() pulumix.Output[int] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.Output[int] { return v.MaximumMessageLength })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Maximum number of messages per
// second that can be sent to the room (by all clients).
func (o RoomOutput) MaximumMessageRatePerSecond() pulumix.Output[int] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.Output[int] { return v.MaximumMessageRatePerSecond })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Configuration information for optional
// review of messages.
func (o RoomOutput) MessageReviewHandler() pulumix.GPtrOutput[RoomMessageReviewHandler, RoomMessageReviewHandlerOutput] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.GPtrOutput[RoomMessageReviewHandler, RoomMessageReviewHandlerOutput] {
		return v.MessageReviewHandler
	})
	unwrapped := pulumix.Flatten[*RoomMessageReviewHandler, pulumix.GPtrOutput[RoomMessageReviewHandler, RoomMessageReviewHandlerOutput]](value)
	return pulumix.GPtrOutput[RoomMessageReviewHandler, RoomMessageReviewHandlerOutput]{OutputState: unwrapped.OutputState}
}

// Room name.
func (o RoomOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RoomOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RoomOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Room](o, func(v Room) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RoomOutput{})
}
