// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a link.
func LookupLink(ctx *pulumi.Context, args *LookupLinkArgs, opts ...pulumi.InvokeOption) (*LookupLinkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLinkResult
	err := ctx.Invoke("aws:networkmanager/getLink:getLink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLink.
type LookupLinkArgs struct {
	// ID of the Global Network of the link to retrieve.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// ID of the specific link to retrieve.
	LinkId string `pulumi:"linkId"`
	// Key-value tags for the link.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLink.
type LookupLinkResult struct {
	// ARN of the link.
	Arn string `pulumi:"arn"`
	// Upload speed and download speed of the link as documented below
	Bandwidths []GetLinkBandwidth `pulumi:"bandwidths"`
	// Description of the link.
	Description     string `pulumi:"description"`
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	LinkId string `pulumi:"linkId"`
	// Provider of the link.
	ProviderName string `pulumi:"providerName"`
	// ID of the site.
	SiteId string `pulumi:"siteId"`
	// Key-value tags for the link.
	Tags map[string]string `pulumi:"tags"`
	// Type of the link.
	Type string `pulumi:"type"`
}

func LookupLinkOutput(ctx *pulumi.Context, args LookupLinkOutputArgs, opts ...pulumi.InvokeOption) LookupLinkResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLinkArgs](args.ToOutput(), func(plainArgs *LookupLinkArgs) (*LookupLinkResult, error) {
		return LookupLink(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLinkResultOutput, *LookupLinkResult](outputResult)
}

// A collection of arguments for invoking getLink.
type LookupLinkOutputArgs struct {
	// ID of the Global Network of the link to retrieve.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// ID of the specific link to retrieve.
	LinkId pulumix.Input[string] `pulumi:"linkId"`
	// Key-value tags for the link.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupLinkOutputArgs) ToOutput() pulumix.Output[*LookupLinkArgs] {
	allArgs := pulumix.All(
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.LinkId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLinkArgs {
		return &LookupLinkArgs{
			GlobalNetworkId: resolvedArgs[0].(string),
			LinkId:          resolvedArgs[1].(string),
			Tags:            resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupLinkResultOutput struct{ *pulumi.OutputState }

func (LookupLinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinkResult)(nil)).Elem()
}

func (o LookupLinkResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLinkResult] {
	return pulumix.Output[*LookupLinkResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLinkResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.Arn })
}

func (o LookupLinkResultOutput) Bandwidths() pulumix.GArrayOutput[GetLinkBandwidth, GetLinkBandwidthOutput] {
	value := pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) []GetLinkBandwidth { return v.Bandwidths })
	return pulumix.GArrayOutput[GetLinkBandwidth, GetLinkBandwidthOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupLinkResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.Description })
}

func (o LookupLinkResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.GlobalNetworkId })
}

func (o LookupLinkResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.Id })
}

func (o LookupLinkResultOutput) LinkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.LinkId })
}

func (o LookupLinkResultOutput) ProviderName() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.ProviderName })
}

func (o LookupLinkResultOutput) SiteId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.SiteId })
}

func (o LookupLinkResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLinkResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupLinkResult](o, func(v *LookupLinkResult) string { return v.Type })
}
