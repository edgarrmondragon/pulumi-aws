// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IoT policy attachment.
type PolicyAttachment struct {
	pulumi.CustomResourceState

	// The name of the policy to attach.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// The identity to which the policy is attached.
	Target pulumix.Output[string] `pulumi:"target"`
}

// NewPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAttachment(ctx *pulumi.Context,
	name string, args *PolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyAttachment
	err := ctx.RegisterResource("aws:iot/policyAttachment:PolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAttachment gets an existing PolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAttachmentState, opts ...pulumi.ResourceOption) (*PolicyAttachment, error) {
	var resource PolicyAttachment
	err := ctx.ReadResource("aws:iot/policyAttachment:PolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAttachment resources.
type policyAttachmentState struct {
	// The name of the policy to attach.
	Policy interface{} `pulumi:"policy"`
	// The identity to which the policy is attached.
	Target *string `pulumi:"target"`
}

type PolicyAttachmentState struct {
	// The name of the policy to attach.
	Policy pulumix.Input[*any]
	// The identity to which the policy is attached.
	Target pulumix.Input[*string]
}

func (PolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAttachmentState)(nil)).Elem()
}

type policyAttachmentArgs struct {
	// The name of the policy to attach.
	Policy interface{} `pulumi:"policy"`
	// The identity to which the policy is attached.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a PolicyAttachment resource.
type PolicyAttachmentArgs struct {
	// The name of the policy to attach.
	Policy pulumix.Input[any]
	// The identity to which the policy is attached.
	Target pulumix.Input[string]
}

func (PolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAttachmentArgs)(nil)).Elem()
}

type PolicyAttachmentOutput struct{ *pulumi.OutputState }

func (PolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAttachment)(nil)).Elem()
}

func (o PolicyAttachmentOutput) ToPolicyAttachmentOutput() PolicyAttachmentOutput {
	return o
}

func (o PolicyAttachmentOutput) ToPolicyAttachmentOutputWithContext(ctx context.Context) PolicyAttachmentOutput {
	return o
}

func (o PolicyAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyAttachment] {
	return pulumix.Output[PolicyAttachment]{
		OutputState: o.OutputState,
	}
}

// The name of the policy to attach.
func (o PolicyAttachmentOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identity to which the policy is attached.
func (o PolicyAttachmentOutput) Target() pulumix.Output[string] {
	value := pulumix.Apply[PolicyAttachment](o, func(v PolicyAttachment) pulumix.Output[string] { return v.Target })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PolicyAttachmentOutput{})
}
