// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AliasRoutingConfig struct {
	// A map that defines the proportion of events that should be sent to different versions of a lambda function.
	AdditionalVersionWeights map[string]float64 `pulumi:"additionalVersionWeights"`
}

type AliasRoutingConfigArgs struct {
	// A map that defines the proportion of events that should be sent to different versions of a lambda function.
	AdditionalVersionWeights pulumix.Input[map[string]float64] `pulumi:"additionalVersionWeights"`
}

func (AliasRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfig)(nil)).Elem()
}

func (i AliasRoutingConfigArgs) ToAliasRoutingConfigOutput() AliasRoutingConfigOutput {
	return i.ToAliasRoutingConfigOutputWithContext(context.Background())
}

func (i AliasRoutingConfigArgs) ToAliasRoutingConfigOutputWithContext(ctx context.Context) AliasRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigOutput)
}

func (i *AliasRoutingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*AliasRoutingConfigArgs] {
	return pulumix.Val(i)
}

type AliasRoutingConfigOutput struct{ *pulumi.OutputState }

func (AliasRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfig)(nil)).Elem()
}

func (o AliasRoutingConfigOutput) ToAliasRoutingConfigOutput() AliasRoutingConfigOutput {
	return o
}

func (o AliasRoutingConfigOutput) ToAliasRoutingConfigOutputWithContext(ctx context.Context) AliasRoutingConfigOutput {
	return o
}

func (o AliasRoutingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AliasRoutingConfig] {
	return pulumix.Output[AliasRoutingConfig]{
		OutputState: o.OutputState,
	}
}

// A map that defines the proportion of events that should be sent to different versions of a lambda function.
func (o AliasRoutingConfigOutput) AdditionalVersionWeights() pulumix.MapOutput[float64] {
	value := pulumix.Apply[AliasRoutingConfig](o, func(v AliasRoutingConfig) map[string]float64 { return v.AdditionalVersionWeights })
	return pulumix.MapOutput[float64]{OutputState: value.OutputState}
}

type CodeSigningConfigAllowedPublishers struct {
	// The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
	SigningProfileVersionArns []string `pulumi:"signingProfileVersionArns"`
}

type CodeSigningConfigAllowedPublishersArgs struct {
	// The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
	SigningProfileVersionArns pulumix.Input[[]string] `pulumi:"signingProfileVersionArns"`
}

func (CodeSigningConfigAllowedPublishersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput {
	return i.ToCodeSigningConfigAllowedPublishersOutputWithContext(context.Background())
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigAllowedPublishersOutput)
}

func (i *CodeSigningConfigAllowedPublishersArgs) ToOutput(ctx context.Context) pulumix.Output[*CodeSigningConfigAllowedPublishersArgs] {
	return pulumix.Val(i)
}

type CodeSigningConfigAllowedPublishersOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigAllowedPublishersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersOutput) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfigAllowedPublishers] {
	return pulumix.Output[CodeSigningConfigAllowedPublishers]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
func (o CodeSigningConfigAllowedPublishersOutput) SigningProfileVersionArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CodeSigningConfigAllowedPublishers](o, func(v CodeSigningConfigAllowedPublishers) []string { return v.SigningProfileVersionArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CodeSigningConfigPolicies struct {
	// Code signing configuration policy for deployment validation failure. If you set the policy to Enforce, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to Warn, Lambda allows the deployment and creates a CloudWatch log. Valid values: `Warn`, `Enforce`. Default value: `Warn`.
	UntrustedArtifactOnDeployment string `pulumi:"untrustedArtifactOnDeployment"`
}

type CodeSigningConfigPoliciesArgs struct {
	// Code signing configuration policy for deployment validation failure. If you set the policy to Enforce, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to Warn, Lambda allows the deployment and creates a CloudWatch log. Valid values: `Warn`, `Enforce`. Default value: `Warn`.
	UntrustedArtifactOnDeployment pulumix.Input[string] `pulumi:"untrustedArtifactOnDeployment"`
}

func (CodeSigningConfigPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigPolicies)(nil)).Elem()
}

func (i CodeSigningConfigPoliciesArgs) ToCodeSigningConfigPoliciesOutput() CodeSigningConfigPoliciesOutput {
	return i.ToCodeSigningConfigPoliciesOutputWithContext(context.Background())
}

func (i CodeSigningConfigPoliciesArgs) ToCodeSigningConfigPoliciesOutputWithContext(ctx context.Context) CodeSigningConfigPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigPoliciesOutput)
}

func (i *CodeSigningConfigPoliciesArgs) ToOutput(ctx context.Context) pulumix.Output[*CodeSigningConfigPoliciesArgs] {
	return pulumix.Val(i)
}

type CodeSigningConfigPoliciesOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigPolicies)(nil)).Elem()
}

func (o CodeSigningConfigPoliciesOutput) ToCodeSigningConfigPoliciesOutput() CodeSigningConfigPoliciesOutput {
	return o
}

func (o CodeSigningConfigPoliciesOutput) ToCodeSigningConfigPoliciesOutputWithContext(ctx context.Context) CodeSigningConfigPoliciesOutput {
	return o
}

func (o CodeSigningConfigPoliciesOutput) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfigPolicies] {
	return pulumix.Output[CodeSigningConfigPolicies]{
		OutputState: o.OutputState,
	}
}

// Code signing configuration policy for deployment validation failure. If you set the policy to Enforce, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to Warn, Lambda allows the deployment and creates a CloudWatch log. Valid values: `Warn`, `Enforce`. Default value: `Warn`.
func (o CodeSigningConfigPoliciesOutput) UntrustedArtifactOnDeployment() pulumix.Output[string] {
	return pulumix.Apply[CodeSigningConfigPolicies](o, func(v CodeSigningConfigPolicies) string { return v.UntrustedArtifactOnDeployment })
}

type EventSourceMappingAmazonManagedKafkaEventSourceConfig struct {
	// A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See [AmazonManagedKafkaEventSourceConfig Syntax](https://docs.aws.amazon.com/lambda/latest/dg/API_AmazonManagedKafkaEventSourceConfig.html).
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
}

type EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs struct {
	// A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See [AmazonManagedKafkaEventSourceConfig Syntax](https://docs.aws.amazon.com/lambda/latest/dg/API_AmazonManagedKafkaEventSourceConfig.html).
	ConsumerGroupId pulumix.Input[*string] `pulumi:"consumerGroupId"`
}

func (EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingAmazonManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return i.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput)
}

func (i *EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingAmazonManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingAmazonManagedKafkaEventSourceConfig] {
	return pulumix.Output[EventSourceMappingAmazonManagedKafkaEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

// A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See [AmazonManagedKafkaEventSourceConfig Syntax](https://docs.aws.amazon.com/lambda/latest/dg/API_AmazonManagedKafkaEventSourceConfig.html).
func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ConsumerGroupId() pulumix.Output[*string] {
	return pulumix.Apply[EventSourceMappingAmazonManagedKafkaEventSourceConfig](o, func(v EventSourceMappingAmazonManagedKafkaEventSourceConfig) *string { return v.ConsumerGroupId })
}

type EventSourceMappingDestinationConfig struct {
	// The destination configuration for failed invocations. Detailed below.
	OnFailure *EventSourceMappingDestinationConfigOnFailure `pulumi:"onFailure"`
}

type EventSourceMappingDestinationConfigArgs struct {
	// The destination configuration for failed invocations. Detailed below.
	OnFailure pulumix.Input[*EventSourceMappingDestinationConfigOnFailureArgs] `pulumi:"onFailure"`
}

func (EventSourceMappingDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput {
	return i.ToEventSourceMappingDestinationConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigOutput)
}

func (i *EventSourceMappingDestinationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDestinationConfigArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingDestinationConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDestinationConfig] {
	return pulumix.Output[EventSourceMappingDestinationConfig]{
		OutputState: o.OutputState,
	}
}

// The destination configuration for failed invocations. Detailed below.
func (o EventSourceMappingDestinationConfigOutput) OnFailure() pulumix.GPtrOutput[EventSourceMappingDestinationConfigOnFailure, EventSourceMappingDestinationConfigOnFailureOutput] {
	value := pulumix.Apply[EventSourceMappingDestinationConfig](o, func(v EventSourceMappingDestinationConfig) *EventSourceMappingDestinationConfigOnFailure {
		return v.OnFailure
	})
	return pulumix.GPtrOutput[EventSourceMappingDestinationConfigOnFailure, EventSourceMappingDestinationConfigOnFailureOutput]{OutputState: value.OutputState}
}

type EventSourceMappingDestinationConfigOnFailure struct {
	// The Amazon Resource Name (ARN) of the destination resource.
	DestinationArn string `pulumi:"destinationArn"`
}

type EventSourceMappingDestinationConfigOnFailureArgs struct {
	// The Amazon Resource Name (ARN) of the destination resource.
	DestinationArn pulumix.Input[string] `pulumi:"destinationArn"`
}

func (EventSourceMappingDestinationConfigOnFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfigOnFailure)(nil)).Elem()
}

func (i EventSourceMappingDestinationConfigOnFailureArgs) ToEventSourceMappingDestinationConfigOnFailureOutput() EventSourceMappingDestinationConfigOnFailureOutput {
	return i.ToEventSourceMappingDestinationConfigOnFailureOutputWithContext(context.Background())
}

func (i EventSourceMappingDestinationConfigOnFailureArgs) ToEventSourceMappingDestinationConfigOnFailureOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOnFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigOnFailureOutput)
}

func (i *EventSourceMappingDestinationConfigOnFailureArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDestinationConfigOnFailureArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingDestinationConfigOnFailureOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDestinationConfigOnFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfigOnFailure)(nil)).Elem()
}

func (o EventSourceMappingDestinationConfigOnFailureOutput) ToEventSourceMappingDestinationConfigOnFailureOutput() EventSourceMappingDestinationConfigOnFailureOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOnFailureOutput) ToEventSourceMappingDestinationConfigOnFailureOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOnFailureOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOnFailureOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDestinationConfigOnFailure] {
	return pulumix.Output[EventSourceMappingDestinationConfigOnFailure]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the destination resource.
func (o EventSourceMappingDestinationConfigOnFailureOutput) DestinationArn() pulumix.Output[string] {
	return pulumix.Apply[EventSourceMappingDestinationConfigOnFailure](o, func(v EventSourceMappingDestinationConfigOnFailure) string { return v.DestinationArn })
}

type EventSourceMappingDocumentDbEventSourceConfig struct {
	// The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
	CollectionName *string `pulumi:"collectionName"`
	// The name of the database to consume within the DocumentDB cluster.
	DatabaseName string `pulumi:"databaseName"`
	// Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
	FullDocument *string `pulumi:"fullDocument"`
}

type EventSourceMappingDocumentDbEventSourceConfigArgs struct {
	// The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
	CollectionName pulumix.Input[*string] `pulumi:"collectionName"`
	// The name of the database to consume within the DocumentDB cluster.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
	FullDocument pulumix.Input[*string] `pulumi:"fullDocument"`
}

func (EventSourceMappingDocumentDbEventSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDocumentDbEventSourceConfig)(nil)).Elem()
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToEventSourceMappingDocumentDbEventSourceConfigOutput() EventSourceMappingDocumentDbEventSourceConfigOutput {
	return i.ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDocumentDbEventSourceConfigOutput)
}

func (i *EventSourceMappingDocumentDbEventSourceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDocumentDbEventSourceConfigArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingDocumentDbEventSourceConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDocumentDbEventSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDocumentDbEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToEventSourceMappingDocumentDbEventSourceConfigOutput() EventSourceMappingDocumentDbEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDocumentDbEventSourceConfig] {
	return pulumix.Output[EventSourceMappingDocumentDbEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
func (o EventSourceMappingDocumentDbEventSourceConfigOutput) CollectionName() pulumix.Output[*string] {
	return pulumix.Apply[EventSourceMappingDocumentDbEventSourceConfig](o, func(v EventSourceMappingDocumentDbEventSourceConfig) *string { return v.CollectionName })
}

// The name of the database to consume within the DocumentDB cluster.
func (o EventSourceMappingDocumentDbEventSourceConfigOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[EventSourceMappingDocumentDbEventSourceConfig](o, func(v EventSourceMappingDocumentDbEventSourceConfig) string { return v.DatabaseName })
}

// Determines what DocumentDB sends to your event stream during document update operations. If set to `UpdateLookup`, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: `UpdateLookup`, `Default`.
func (o EventSourceMappingDocumentDbEventSourceConfigOutput) FullDocument() pulumix.Output[*string] {
	return pulumix.Apply[EventSourceMappingDocumentDbEventSourceConfig](o, func(v EventSourceMappingDocumentDbEventSourceConfig) *string { return v.FullDocument })
}

type EventSourceMappingFilterCriteria struct {
	// A set of up to 5 filter. If an event satisfies at least one, Lambda sends the event to the function or adds it to the next batch. Detailed below.
	Filters []EventSourceMappingFilterCriteriaFilter `pulumi:"filters"`
}

type EventSourceMappingFilterCriteriaArgs struct {
	// A set of up to 5 filter. If an event satisfies at least one, Lambda sends the event to the function or adds it to the next batch. Detailed below.
	Filters pulumix.Input[[]*EventSourceMappingFilterCriteriaFilterArgs] `pulumi:"filters"`
}

func (EventSourceMappingFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilterCriteria)(nil)).Elem()
}

func (i EventSourceMappingFilterCriteriaArgs) ToEventSourceMappingFilterCriteriaOutput() EventSourceMappingFilterCriteriaOutput {
	return i.ToEventSourceMappingFilterCriteriaOutputWithContext(context.Background())
}

func (i EventSourceMappingFilterCriteriaArgs) ToEventSourceMappingFilterCriteriaOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterCriteriaOutput)
}

func (i *EventSourceMappingFilterCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingFilterCriteriaArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingFilterCriteriaOutput struct{ *pulumi.OutputState }

func (EventSourceMappingFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilterCriteria)(nil)).Elem()
}

func (o EventSourceMappingFilterCriteriaOutput) ToEventSourceMappingFilterCriteriaOutput() EventSourceMappingFilterCriteriaOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaOutput) ToEventSourceMappingFilterCriteriaOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingFilterCriteria] {
	return pulumix.Output[EventSourceMappingFilterCriteria]{
		OutputState: o.OutputState,
	}
}

// A set of up to 5 filter. If an event satisfies at least one, Lambda sends the event to the function or adds it to the next batch. Detailed below.
func (o EventSourceMappingFilterCriteriaOutput) Filters() pulumix.GArrayOutput[EventSourceMappingFilterCriteriaFilter, EventSourceMappingFilterCriteriaFilterOutput] {
	value := pulumix.Apply[EventSourceMappingFilterCriteria](o, func(v EventSourceMappingFilterCriteria) []EventSourceMappingFilterCriteriaFilter { return v.Filters })
	return pulumix.GArrayOutput[EventSourceMappingFilterCriteriaFilter, EventSourceMappingFilterCriteriaFilterOutput]{OutputState: value.OutputState}
}

type EventSourceMappingFilterCriteriaFilter struct {
	// A filter pattern up to 4096 characters. See [Filter Rule Syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).
	Pattern *string `pulumi:"pattern"`
}

type EventSourceMappingFilterCriteriaFilterArgs struct {
	// A filter pattern up to 4096 characters. See [Filter Rule Syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).
	Pattern pulumix.Input[*string] `pulumi:"pattern"`
}

func (EventSourceMappingFilterCriteriaFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilterCriteriaFilter)(nil)).Elem()
}

func (i EventSourceMappingFilterCriteriaFilterArgs) ToEventSourceMappingFilterCriteriaFilterOutput() EventSourceMappingFilterCriteriaFilterOutput {
	return i.ToEventSourceMappingFilterCriteriaFilterOutputWithContext(context.Background())
}

func (i EventSourceMappingFilterCriteriaFilterArgs) ToEventSourceMappingFilterCriteriaFilterOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterCriteriaFilterOutput)
}

func (i *EventSourceMappingFilterCriteriaFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingFilterCriteriaFilterArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingFilterCriteriaFilterOutput struct{ *pulumi.OutputState }

func (EventSourceMappingFilterCriteriaFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilterCriteriaFilter)(nil)).Elem()
}

func (o EventSourceMappingFilterCriteriaFilterOutput) ToEventSourceMappingFilterCriteriaFilterOutput() EventSourceMappingFilterCriteriaFilterOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaFilterOutput) ToEventSourceMappingFilterCriteriaFilterOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaFilterOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaFilterOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingFilterCriteriaFilter] {
	return pulumix.Output[EventSourceMappingFilterCriteriaFilter]{
		OutputState: o.OutputState,
	}
}

// A filter pattern up to 4096 characters. See [Filter Rule Syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).
func (o EventSourceMappingFilterCriteriaFilterOutput) Pattern() pulumix.Output[*string] {
	return pulumix.Apply[EventSourceMappingFilterCriteriaFilter](o, func(v EventSourceMappingFilterCriteriaFilter) *string { return v.Pattern })
}

type EventSourceMappingScalingConfig struct {
	// Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be between `2` and `1000`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
	MaximumConcurrency *int `pulumi:"maximumConcurrency"`
}

type EventSourceMappingScalingConfigArgs struct {
	// Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be between `2` and `1000`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
	MaximumConcurrency pulumix.Input[*int] `pulumi:"maximumConcurrency"`
}

func (EventSourceMappingScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingScalingConfig)(nil)).Elem()
}

func (i EventSourceMappingScalingConfigArgs) ToEventSourceMappingScalingConfigOutput() EventSourceMappingScalingConfigOutput {
	return i.ToEventSourceMappingScalingConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingScalingConfigArgs) ToEventSourceMappingScalingConfigOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingScalingConfigOutput)
}

func (i *EventSourceMappingScalingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingScalingConfigArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingScalingConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingScalingConfig)(nil)).Elem()
}

func (o EventSourceMappingScalingConfigOutput) ToEventSourceMappingScalingConfigOutput() EventSourceMappingScalingConfigOutput {
	return o
}

func (o EventSourceMappingScalingConfigOutput) ToEventSourceMappingScalingConfigOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigOutput {
	return o
}

func (o EventSourceMappingScalingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingScalingConfig] {
	return pulumix.Output[EventSourceMappingScalingConfig]{
		OutputState: o.OutputState,
	}
}

// Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be between `2` and `1000`. See [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
func (o EventSourceMappingScalingConfigOutput) MaximumConcurrency() pulumix.Output[*int] {
	return pulumix.Apply[EventSourceMappingScalingConfig](o, func(v EventSourceMappingScalingConfig) *int { return v.MaximumConcurrency })
}

type EventSourceMappingSelfManagedEventSource struct {
	// A map of endpoints for the self managed source.  For Kafka self-managed sources, the key should be `KAFKA_BOOTSTRAP_SERVERS` and the value should be a string with a comma separated list of broker endpoints.
	Endpoints map[string]string `pulumi:"endpoints"`
}

type EventSourceMappingSelfManagedEventSourceArgs struct {
	// A map of endpoints for the self managed source.  For Kafka self-managed sources, the key should be `KAFKA_BOOTSTRAP_SERVERS` and the value should be a string with a comma separated list of broker endpoints.
	Endpoints pulumix.Input[map[string]string] `pulumi:"endpoints"`
}

func (EventSourceMappingSelfManagedEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput {
	return i.ToEventSourceMappingSelfManagedEventSourceOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourceOutput)
}

func (i *EventSourceMappingSelfManagedEventSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSelfManagedEventSourceArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingSelfManagedEventSourceOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedEventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourceOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSelfManagedEventSource] {
	return pulumix.Output[EventSourceMappingSelfManagedEventSource]{
		OutputState: o.OutputState,
	}
}

// A map of endpoints for the self managed source.  For Kafka self-managed sources, the key should be `KAFKA_BOOTSTRAP_SERVERS` and the value should be a string with a comma separated list of broker endpoints.
func (o EventSourceMappingSelfManagedEventSourceOutput) Endpoints() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventSourceMappingSelfManagedEventSource](o, func(v EventSourceMappingSelfManagedEventSource) map[string]string { return v.Endpoints })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type EventSourceMappingSelfManagedKafkaEventSourceConfig struct {
	// A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See [SelfManagedKafkaEventSourceConfig Syntax](https://docs.aws.amazon.com/lambda/latest/dg/API_SelfManagedKafkaEventSourceConfig.html).
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
}

type EventSourceMappingSelfManagedKafkaEventSourceConfigArgs struct {
	// A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See [SelfManagedKafkaEventSourceConfig Syntax](https://docs.aws.amazon.com/lambda/latest/dg/API_SelfManagedKafkaEventSourceConfig.html).
	ConsumerGroupId pulumix.Input[*string] `pulumi:"consumerGroupId"`
}

func (EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return i.ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput)
}

func (i *EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSelfManagedKafkaEventSourceConfigArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingSelfManagedKafkaEventSourceConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSelfManagedKafkaEventSourceConfig] {
	return pulumix.Output[EventSourceMappingSelfManagedKafkaEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

// A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See [SelfManagedKafkaEventSourceConfig Syntax](https://docs.aws.amazon.com/lambda/latest/dg/API_SelfManagedKafkaEventSourceConfig.html).
func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ConsumerGroupId() pulumix.Output[*string] {
	return pulumix.Apply[EventSourceMappingSelfManagedKafkaEventSourceConfig](o, func(v EventSourceMappingSelfManagedKafkaEventSourceConfig) *string { return v.ConsumerGroupId })
}

type EventSourceMappingSourceAccessConfiguration struct {
	// The type of this configuration.  For Self Managed Kafka you will need to supply blocks for type `VPC_SUBNET` and `VPC_SECURITY_GROUP`.
	Type string `pulumi:"type"`
	// The URI for this configuration.  For type `VPC_SUBNET` the value should be `subnet:subnet_id` where `subnetId` is the value you would find in an ec2.Subnet resource's id attribute.  For type `VPC_SECURITY_GROUP` the value should be `security_group:security_group_id` where `securityGroupId` is the value you would find in an ec2.SecurityGroup resource's id attribute.
	Uri string `pulumi:"uri"`
}

type EventSourceMappingSourceAccessConfigurationArgs struct {
	// The type of this configuration.  For Self Managed Kafka you will need to supply blocks for type `VPC_SUBNET` and `VPC_SECURITY_GROUP`.
	Type pulumix.Input[string] `pulumi:"type"`
	// The URI for this configuration.  For type `VPC_SUBNET` the value should be `subnet:subnet_id` where `subnetId` is the value you would find in an ec2.Subnet resource's id attribute.  For type `VPC_SECURITY_GROUP` the value should be `security_group:security_group_id` where `securityGroupId` is the value you would find in an ec2.SecurityGroup resource's id attribute.
	Uri pulumix.Input[string] `pulumi:"uri"`
}

func (EventSourceMappingSourceAccessConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput {
	return i.ToEventSourceMappingSourceAccessConfigurationOutputWithContext(context.Background())
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSourceAccessConfigurationOutput)
}

func (i *EventSourceMappingSourceAccessConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSourceAccessConfigurationArgs] {
	return pulumix.Val(i)
}

type EventSourceMappingSourceAccessConfigurationOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSourceAccessConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSourceAccessConfiguration] {
	return pulumix.Output[EventSourceMappingSourceAccessConfiguration]{
		OutputState: o.OutputState,
	}
}

// The type of this configuration.  For Self Managed Kafka you will need to supply blocks for type `VPC_SUBNET` and `VPC_SECURITY_GROUP`.
func (o EventSourceMappingSourceAccessConfigurationOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[EventSourceMappingSourceAccessConfiguration](o, func(v EventSourceMappingSourceAccessConfiguration) string { return v.Type })
}

// The URI for this configuration.  For type `VPC_SUBNET` the value should be `subnet:subnet_id` where `subnetId` is the value you would find in an ec2.Subnet resource's id attribute.  For type `VPC_SECURITY_GROUP` the value should be `security_group:security_group_id` where `securityGroupId` is the value you would find in an ec2.SecurityGroup resource's id attribute.
func (o EventSourceMappingSourceAccessConfigurationOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[EventSourceMappingSourceAccessConfiguration](o, func(v EventSourceMappingSourceAccessConfiguration) string { return v.Uri })
}

type FunctionDeadLetterConfig struct {
	// ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on which service is targeted.
	TargetArn string `pulumi:"targetArn"`
}

type FunctionDeadLetterConfigArgs struct {
	// ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on which service is targeted.
	TargetArn pulumix.Input[string] `pulumi:"targetArn"`
}

func (FunctionDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionDeadLetterConfig)(nil)).Elem()
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput {
	return i.ToFunctionDeadLetterConfigOutputWithContext(context.Background())
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigOutputWithContext(ctx context.Context) FunctionDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigOutput)
}

func (i *FunctionDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionDeadLetterConfigArgs] {
	return pulumix.Val(i)
}

type FunctionDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (FunctionDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionDeadLetterConfig)(nil)).Elem()
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput {
	return o
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigOutputWithContext(ctx context.Context) FunctionDeadLetterConfigOutput {
	return o
}

func (o FunctionDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionDeadLetterConfig] {
	return pulumix.Output[FunctionDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on which service is targeted.
func (o FunctionDeadLetterConfigOutput) TargetArn() pulumix.Output[string] {
	return pulumix.Apply[FunctionDeadLetterConfig](o, func(v FunctionDeadLetterConfig) string { return v.TargetArn })
}

type FunctionEnvironment struct {
	// Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
	Variables map[string]string `pulumi:"variables"`
}

type FunctionEnvironmentArgs struct {
	// Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
	Variables pulumix.Input[map[string]string] `pulumi:"variables"`
}

func (FunctionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEnvironment)(nil)).Elem()
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentOutput() FunctionEnvironmentOutput {
	return i.ToFunctionEnvironmentOutputWithContext(context.Background())
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentOutputWithContext(ctx context.Context) FunctionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentOutput)
}

func (i *FunctionEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionEnvironmentArgs] {
	return pulumix.Val(i)
}

type FunctionEnvironmentOutput struct{ *pulumi.OutputState }

func (FunctionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEnvironment)(nil)).Elem()
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentOutput() FunctionEnvironmentOutput {
	return o
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentOutputWithContext(ctx context.Context) FunctionEnvironmentOutput {
	return o
}

func (o FunctionEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEnvironment] {
	return pulumix.Output[FunctionEnvironment]{
		OutputState: o.OutputState,
	}
}

// Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
func (o FunctionEnvironmentOutput) Variables() pulumix.MapOutput[string] {
	value := pulumix.Apply[FunctionEnvironment](o, func(v FunctionEnvironment) map[string]string { return v.Variables })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type FunctionEphemeralStorage struct {
	// The size of the Lambda function Ephemeral storage(`/tmp`) represented in MB. The minimum supported `ephemeralStorage` value defaults to `512`MB and the maximum supported value is `10240`MB.
	Size *int `pulumi:"size"`
}

type FunctionEphemeralStorageArgs struct {
	// The size of the Lambda function Ephemeral storage(`/tmp`) represented in MB. The minimum supported `ephemeralStorage` value defaults to `512`MB and the maximum supported value is `10240`MB.
	Size pulumix.Input[*int] `pulumi:"size"`
}

func (FunctionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEphemeralStorage)(nil)).Elem()
}

func (i FunctionEphemeralStorageArgs) ToFunctionEphemeralStorageOutput() FunctionEphemeralStorageOutput {
	return i.ToFunctionEphemeralStorageOutputWithContext(context.Background())
}

func (i FunctionEphemeralStorageArgs) ToFunctionEphemeralStorageOutputWithContext(ctx context.Context) FunctionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEphemeralStorageOutput)
}

func (i *FunctionEphemeralStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionEphemeralStorageArgs] {
	return pulumix.Val(i)
}

type FunctionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (FunctionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEphemeralStorage)(nil)).Elem()
}

func (o FunctionEphemeralStorageOutput) ToFunctionEphemeralStorageOutput() FunctionEphemeralStorageOutput {
	return o
}

func (o FunctionEphemeralStorageOutput) ToFunctionEphemeralStorageOutputWithContext(ctx context.Context) FunctionEphemeralStorageOutput {
	return o
}

func (o FunctionEphemeralStorageOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEphemeralStorage] {
	return pulumix.Output[FunctionEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

// The size of the Lambda function Ephemeral storage(`/tmp`) represented in MB. The minimum supported `ephemeralStorage` value defaults to `512`MB and the maximum supported value is `10240`MB.
func (o FunctionEphemeralStorageOutput) Size() pulumix.Output[*int] {
	return pulumix.Apply[FunctionEphemeralStorage](o, func(v FunctionEphemeralStorage) *int { return v.Size })
}

type FunctionEventInvokeConfigDestinationConfig struct {
	// Configuration block with destination configuration for failed asynchronous invocations. See below for details.
	OnFailure *FunctionEventInvokeConfigDestinationConfigOnFailure `pulumi:"onFailure"`
	// Configuration block with destination configuration for successful asynchronous invocations. See below for details.
	OnSuccess *FunctionEventInvokeConfigDestinationConfigOnSuccess `pulumi:"onSuccess"`
}

type FunctionEventInvokeConfigDestinationConfigArgs struct {
	// Configuration block with destination configuration for failed asynchronous invocations. See below for details.
	OnFailure pulumix.Input[*FunctionEventInvokeConfigDestinationConfigOnFailureArgs] `pulumi:"onFailure"`
	// Configuration block with destination configuration for successful asynchronous invocations. See below for details.
	OnSuccess pulumix.Input[*FunctionEventInvokeConfigDestinationConfigOnSuccessArgs] `pulumi:"onSuccess"`
}

func (FunctionEventInvokeConfigDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEventInvokeConfigDestinationConfig)(nil)).Elem()
}

func (i FunctionEventInvokeConfigDestinationConfigArgs) ToFunctionEventInvokeConfigDestinationConfigOutput() FunctionEventInvokeConfigDestinationConfigOutput {
	return i.ToFunctionEventInvokeConfigDestinationConfigOutputWithContext(context.Background())
}

func (i FunctionEventInvokeConfigDestinationConfigArgs) ToFunctionEventInvokeConfigDestinationConfigOutputWithContext(ctx context.Context) FunctionEventInvokeConfigDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEventInvokeConfigDestinationConfigOutput)
}

func (i *FunctionEventInvokeConfigDestinationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionEventInvokeConfigDestinationConfigArgs] {
	return pulumix.Val(i)
}

type FunctionEventInvokeConfigDestinationConfigOutput struct{ *pulumi.OutputState }

func (FunctionEventInvokeConfigDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEventInvokeConfigDestinationConfig)(nil)).Elem()
}

func (o FunctionEventInvokeConfigDestinationConfigOutput) ToFunctionEventInvokeConfigDestinationConfigOutput() FunctionEventInvokeConfigDestinationConfigOutput {
	return o
}

func (o FunctionEventInvokeConfigDestinationConfigOutput) ToFunctionEventInvokeConfigDestinationConfigOutputWithContext(ctx context.Context) FunctionEventInvokeConfigDestinationConfigOutput {
	return o
}

func (o FunctionEventInvokeConfigDestinationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEventInvokeConfigDestinationConfig] {
	return pulumix.Output[FunctionEventInvokeConfigDestinationConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration block with destination configuration for failed asynchronous invocations. See below for details.
func (o FunctionEventInvokeConfigDestinationConfigOutput) OnFailure() pulumix.GPtrOutput[FunctionEventInvokeConfigDestinationConfigOnFailure, FunctionEventInvokeConfigDestinationConfigOnFailureOutput] {
	value := pulumix.Apply[FunctionEventInvokeConfigDestinationConfig](o, func(v FunctionEventInvokeConfigDestinationConfig) *FunctionEventInvokeConfigDestinationConfigOnFailure {
		return v.OnFailure
	})
	return pulumix.GPtrOutput[FunctionEventInvokeConfigDestinationConfigOnFailure, FunctionEventInvokeConfigDestinationConfigOnFailureOutput]{OutputState: value.OutputState}
}

// Configuration block with destination configuration for successful asynchronous invocations. See below for details.
func (o FunctionEventInvokeConfigDestinationConfigOutput) OnSuccess() pulumix.GPtrOutput[FunctionEventInvokeConfigDestinationConfigOnSuccess, FunctionEventInvokeConfigDestinationConfigOnSuccessOutput] {
	value := pulumix.Apply[FunctionEventInvokeConfigDestinationConfig](o, func(v FunctionEventInvokeConfigDestinationConfig) *FunctionEventInvokeConfigDestinationConfigOnSuccess {
		return v.OnSuccess
	})
	return pulumix.GPtrOutput[FunctionEventInvokeConfigDestinationConfigOnSuccess, FunctionEventInvokeConfigDestinationConfigOnSuccessOutput]{OutputState: value.OutputState}
}

type FunctionEventInvokeConfigDestinationConfigOnFailure struct {
	// Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
	Destination string `pulumi:"destination"`
}

type FunctionEventInvokeConfigDestinationConfigOnFailureArgs struct {
	// Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
	Destination pulumix.Input[string] `pulumi:"destination"`
}

func (FunctionEventInvokeConfigDestinationConfigOnFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEventInvokeConfigDestinationConfigOnFailure)(nil)).Elem()
}

func (i FunctionEventInvokeConfigDestinationConfigOnFailureArgs) ToFunctionEventInvokeConfigDestinationConfigOnFailureOutput() FunctionEventInvokeConfigDestinationConfigOnFailureOutput {
	return i.ToFunctionEventInvokeConfigDestinationConfigOnFailureOutputWithContext(context.Background())
}

func (i FunctionEventInvokeConfigDestinationConfigOnFailureArgs) ToFunctionEventInvokeConfigDestinationConfigOnFailureOutputWithContext(ctx context.Context) FunctionEventInvokeConfigDestinationConfigOnFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEventInvokeConfigDestinationConfigOnFailureOutput)
}

func (i *FunctionEventInvokeConfigDestinationConfigOnFailureArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionEventInvokeConfigDestinationConfigOnFailureArgs] {
	return pulumix.Val(i)
}

type FunctionEventInvokeConfigDestinationConfigOnFailureOutput struct{ *pulumi.OutputState }

func (FunctionEventInvokeConfigDestinationConfigOnFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEventInvokeConfigDestinationConfigOnFailure)(nil)).Elem()
}

func (o FunctionEventInvokeConfigDestinationConfigOnFailureOutput) ToFunctionEventInvokeConfigDestinationConfigOnFailureOutput() FunctionEventInvokeConfigDestinationConfigOnFailureOutput {
	return o
}

func (o FunctionEventInvokeConfigDestinationConfigOnFailureOutput) ToFunctionEventInvokeConfigDestinationConfigOnFailureOutputWithContext(ctx context.Context) FunctionEventInvokeConfigDestinationConfigOnFailureOutput {
	return o
}

func (o FunctionEventInvokeConfigDestinationConfigOnFailureOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEventInvokeConfigDestinationConfigOnFailure] {
	return pulumix.Output[FunctionEventInvokeConfigDestinationConfigOnFailure]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
func (o FunctionEventInvokeConfigDestinationConfigOnFailureOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[FunctionEventInvokeConfigDestinationConfigOnFailure](o, func(v FunctionEventInvokeConfigDestinationConfigOnFailure) string { return v.Destination })
}

type FunctionEventInvokeConfigDestinationConfigOnSuccess struct {
	// Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
	Destination string `pulumi:"destination"`
}

type FunctionEventInvokeConfigDestinationConfigOnSuccessArgs struct {
	// Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
	Destination pulumix.Input[string] `pulumi:"destination"`
}

func (FunctionEventInvokeConfigDestinationConfigOnSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEventInvokeConfigDestinationConfigOnSuccess)(nil)).Elem()
}

func (i FunctionEventInvokeConfigDestinationConfigOnSuccessArgs) ToFunctionEventInvokeConfigDestinationConfigOnSuccessOutput() FunctionEventInvokeConfigDestinationConfigOnSuccessOutput {
	return i.ToFunctionEventInvokeConfigDestinationConfigOnSuccessOutputWithContext(context.Background())
}

func (i FunctionEventInvokeConfigDestinationConfigOnSuccessArgs) ToFunctionEventInvokeConfigDestinationConfigOnSuccessOutputWithContext(ctx context.Context) FunctionEventInvokeConfigDestinationConfigOnSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEventInvokeConfigDestinationConfigOnSuccessOutput)
}

func (i *FunctionEventInvokeConfigDestinationConfigOnSuccessArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionEventInvokeConfigDestinationConfigOnSuccessArgs] {
	return pulumix.Val(i)
}

type FunctionEventInvokeConfigDestinationConfigOnSuccessOutput struct{ *pulumi.OutputState }

func (FunctionEventInvokeConfigDestinationConfigOnSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEventInvokeConfigDestinationConfigOnSuccess)(nil)).Elem()
}

func (o FunctionEventInvokeConfigDestinationConfigOnSuccessOutput) ToFunctionEventInvokeConfigDestinationConfigOnSuccessOutput() FunctionEventInvokeConfigDestinationConfigOnSuccessOutput {
	return o
}

func (o FunctionEventInvokeConfigDestinationConfigOnSuccessOutput) ToFunctionEventInvokeConfigDestinationConfigOnSuccessOutputWithContext(ctx context.Context) FunctionEventInvokeConfigDestinationConfigOnSuccessOutput {
	return o
}

func (o FunctionEventInvokeConfigDestinationConfigOnSuccessOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEventInvokeConfigDestinationConfigOnSuccess] {
	return pulumix.Output[FunctionEventInvokeConfigDestinationConfigOnSuccess]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
func (o FunctionEventInvokeConfigDestinationConfigOnSuccessOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[FunctionEventInvokeConfigDestinationConfigOnSuccess](o, func(v FunctionEventInvokeConfigDestinationConfigOnSuccess) string { return v.Destination })
}

type FunctionFileSystemConfig struct {
	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	Arn string `pulumi:"arn"`
	// Path where the function can access the file system, starting with /mnt/.
	LocalMountPath string `pulumi:"localMountPath"`
}

type FunctionFileSystemConfigArgs struct {
	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Path where the function can access the file system, starting with /mnt/.
	LocalMountPath pulumix.Input[string] `pulumi:"localMountPath"`
}

func (FunctionFileSystemConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFileSystemConfig)(nil)).Elem()
}

func (i FunctionFileSystemConfigArgs) ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput {
	return i.ToFunctionFileSystemConfigOutputWithContext(context.Background())
}

func (i FunctionFileSystemConfigArgs) ToFunctionFileSystemConfigOutputWithContext(ctx context.Context) FunctionFileSystemConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFileSystemConfigOutput)
}

func (i *FunctionFileSystemConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionFileSystemConfigArgs] {
	return pulumix.Val(i)
}

type FunctionFileSystemConfigOutput struct{ *pulumi.OutputState }

func (FunctionFileSystemConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFileSystemConfig)(nil)).Elem()
}

func (o FunctionFileSystemConfigOutput) ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput {
	return o
}

func (o FunctionFileSystemConfigOutput) ToFunctionFileSystemConfigOutputWithContext(ctx context.Context) FunctionFileSystemConfigOutput {
	return o
}

func (o FunctionFileSystemConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionFileSystemConfig] {
	return pulumix.Output[FunctionFileSystemConfig]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
func (o FunctionFileSystemConfigOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[FunctionFileSystemConfig](o, func(v FunctionFileSystemConfig) string { return v.Arn })
}

// Path where the function can access the file system, starting with /mnt/.
func (o FunctionFileSystemConfigOutput) LocalMountPath() pulumix.Output[string] {
	return pulumix.Apply[FunctionFileSystemConfig](o, func(v FunctionFileSystemConfig) string { return v.LocalMountPath })
}

type FunctionImageConfig struct {
	// Parameters that you want to pass in with `entryPoint`.
	Commands []string `pulumi:"commands"`
	// Entry point to your application, which is typically the location of the runtime executable.
	EntryPoints []string `pulumi:"entryPoints"`
	// Working directory.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

type FunctionImageConfigArgs struct {
	// Parameters that you want to pass in with `entryPoint`.
	Commands pulumix.Input[[]string] `pulumi:"commands"`
	// Entry point to your application, which is typically the location of the runtime executable.
	EntryPoints pulumix.Input[[]string] `pulumi:"entryPoints"`
	// Working directory.
	WorkingDirectory pulumix.Input[*string] `pulumi:"workingDirectory"`
}

func (FunctionImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return i.ToFunctionImageConfigOutputWithContext(context.Background())
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigOutput)
}

func (i *FunctionImageConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionImageConfigArgs] {
	return pulumix.Val(i)
}

type FunctionImageConfigOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionImageConfig] {
	return pulumix.Output[FunctionImageConfig]{
		OutputState: o.OutputState,
	}
}

// Parameters that you want to pass in with `entryPoint`.
func (o FunctionImageConfigOutput) Commands() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionImageConfig](o, func(v FunctionImageConfig) []string { return v.Commands })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Entry point to your application, which is typically the location of the runtime executable.
func (o FunctionImageConfigOutput) EntryPoints() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionImageConfig](o, func(v FunctionImageConfig) []string { return v.EntryPoints })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Working directory.
func (o FunctionImageConfigOutput) WorkingDirectory() pulumix.Output[*string] {
	return pulumix.Apply[FunctionImageConfig](o, func(v FunctionImageConfig) *string { return v.WorkingDirectory })
}

type FunctionSnapStart struct {
	// Conditions where snap start is enabled. Valid values are `PublishedVersions`.
	ApplyOn            string  `pulumi:"applyOn"`
	OptimizationStatus *string `pulumi:"optimizationStatus"`
}

type FunctionSnapStartArgs struct {
	// Conditions where snap start is enabled. Valid values are `PublishedVersions`.
	ApplyOn            pulumix.Input[string]  `pulumi:"applyOn"`
	OptimizationStatus pulumix.Input[*string] `pulumi:"optimizationStatus"`
}

func (FunctionSnapStartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSnapStart)(nil)).Elem()
}

func (i FunctionSnapStartArgs) ToFunctionSnapStartOutput() FunctionSnapStartOutput {
	return i.ToFunctionSnapStartOutputWithContext(context.Background())
}

func (i FunctionSnapStartArgs) ToFunctionSnapStartOutputWithContext(ctx context.Context) FunctionSnapStartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSnapStartOutput)
}

func (i *FunctionSnapStartArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionSnapStartArgs] {
	return pulumix.Val(i)
}

type FunctionSnapStartOutput struct{ *pulumi.OutputState }

func (FunctionSnapStartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSnapStart)(nil)).Elem()
}

func (o FunctionSnapStartOutput) ToFunctionSnapStartOutput() FunctionSnapStartOutput {
	return o
}

func (o FunctionSnapStartOutput) ToFunctionSnapStartOutputWithContext(ctx context.Context) FunctionSnapStartOutput {
	return o
}

func (o FunctionSnapStartOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionSnapStart] {
	return pulumix.Output[FunctionSnapStart]{
		OutputState: o.OutputState,
	}
}

// Conditions where snap start is enabled. Valid values are `PublishedVersions`.
func (o FunctionSnapStartOutput) ApplyOn() pulumix.Output[string] {
	return pulumix.Apply[FunctionSnapStart](o, func(v FunctionSnapStart) string { return v.ApplyOn })
}

func (o FunctionSnapStartOutput) OptimizationStatus() pulumix.Output[*string] {
	return pulumix.Apply[FunctionSnapStart](o, func(v FunctionSnapStart) *string { return v.OptimizationStatus })
}

type FunctionTracingConfig struct {
	// Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`. If `PassThrough`, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If `Active`, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
	Mode string `pulumi:"mode"`
}

type FunctionTracingConfigArgs struct {
	// Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`. If `PassThrough`, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If `Active`, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
	Mode pulumix.Input[string] `pulumi:"mode"`
}

func (FunctionTracingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTracingConfig)(nil)).Elem()
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigOutput() FunctionTracingConfigOutput {
	return i.ToFunctionTracingConfigOutputWithContext(context.Background())
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigOutputWithContext(ctx context.Context) FunctionTracingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigOutput)
}

func (i *FunctionTracingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionTracingConfigArgs] {
	return pulumix.Val(i)
}

type FunctionTracingConfigOutput struct{ *pulumi.OutputState }

func (FunctionTracingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTracingConfig)(nil)).Elem()
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigOutput() FunctionTracingConfigOutput {
	return o
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigOutputWithContext(ctx context.Context) FunctionTracingConfigOutput {
	return o
}

func (o FunctionTracingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionTracingConfig] {
	return pulumix.Output[FunctionTracingConfig]{
		OutputState: o.OutputState,
	}
}

// Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`. If `PassThrough`, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If `Active`, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
func (o FunctionTracingConfigOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[FunctionTracingConfig](o, func(v FunctionTracingConfig) string { return v.Mode })
}

type FunctionUrlCors struct {
	// Whether to allow cookies or other credentials in requests to the function URL. The default is `false`.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// The HTTP headers that origins can include in requests to the function URL. For example: `["date", "keep-alive", "x-custom-header"]`.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// The HTTP methods that are allowed when calling the function URL. For example: `["GET", "POST", "DELETE"]`, or the wildcard character (`["*"]`).
	AllowMethods []string `pulumi:"allowMethods"`
	// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character (`"*"`)), separated by a comma. For example: `["https://www.example.com", "http://localhost:60905"]`.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// The HTTP headers in your function response that you want to expose to origins that call the function URL.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to `0`, which means that the browser doesn't cache results. The maximum value is `86400`.
	MaxAge *int `pulumi:"maxAge"`
}

type FunctionUrlCorsArgs struct {
	// Whether to allow cookies or other credentials in requests to the function URL. The default is `false`.
	AllowCredentials pulumix.Input[*bool] `pulumi:"allowCredentials"`
	// The HTTP headers that origins can include in requests to the function URL. For example: `["date", "keep-alive", "x-custom-header"]`.
	AllowHeaders pulumix.Input[[]string] `pulumi:"allowHeaders"`
	// The HTTP methods that are allowed when calling the function URL. For example: `["GET", "POST", "DELETE"]`, or the wildcard character (`["*"]`).
	AllowMethods pulumix.Input[[]string] `pulumi:"allowMethods"`
	// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character (`"*"`)), separated by a comma. For example: `["https://www.example.com", "http://localhost:60905"]`.
	AllowOrigins pulumix.Input[[]string] `pulumi:"allowOrigins"`
	// The HTTP headers in your function response that you want to expose to origins that call the function URL.
	ExposeHeaders pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to `0`, which means that the browser doesn't cache results. The maximum value is `86400`.
	MaxAge pulumix.Input[*int] `pulumi:"maxAge"`
}

func (FunctionUrlCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionUrlCors)(nil)).Elem()
}

func (i FunctionUrlCorsArgs) ToFunctionUrlCorsOutput() FunctionUrlCorsOutput {
	return i.ToFunctionUrlCorsOutputWithContext(context.Background())
}

func (i FunctionUrlCorsArgs) ToFunctionUrlCorsOutputWithContext(ctx context.Context) FunctionUrlCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionUrlCorsOutput)
}

func (i *FunctionUrlCorsArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionUrlCorsArgs] {
	return pulumix.Val(i)
}

type FunctionUrlCorsOutput struct{ *pulumi.OutputState }

func (FunctionUrlCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionUrlCors)(nil)).Elem()
}

func (o FunctionUrlCorsOutput) ToFunctionUrlCorsOutput() FunctionUrlCorsOutput {
	return o
}

func (o FunctionUrlCorsOutput) ToFunctionUrlCorsOutputWithContext(ctx context.Context) FunctionUrlCorsOutput {
	return o
}

func (o FunctionUrlCorsOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionUrlCors] {
	return pulumix.Output[FunctionUrlCors]{
		OutputState: o.OutputState,
	}
}

// Whether to allow cookies or other credentials in requests to the function URL. The default is `false`.
func (o FunctionUrlCorsOutput) AllowCredentials() pulumix.Output[*bool] {
	return pulumix.Apply[FunctionUrlCors](o, func(v FunctionUrlCors) *bool { return v.AllowCredentials })
}

// The HTTP headers that origins can include in requests to the function URL. For example: `["date", "keep-alive", "x-custom-header"]`.
func (o FunctionUrlCorsOutput) AllowHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionUrlCors](o, func(v FunctionUrlCors) []string { return v.AllowHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The HTTP methods that are allowed when calling the function URL. For example: `["GET", "POST", "DELETE"]`, or the wildcard character (`["*"]`).
func (o FunctionUrlCorsOutput) AllowMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionUrlCors](o, func(v FunctionUrlCors) []string { return v.AllowMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character (`"*"`)), separated by a comma. For example: `["https://www.example.com", "http://localhost:60905"]`.
func (o FunctionUrlCorsOutput) AllowOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionUrlCors](o, func(v FunctionUrlCors) []string { return v.AllowOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The HTTP headers in your function response that you want to expose to origins that call the function URL.
func (o FunctionUrlCorsOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionUrlCors](o, func(v FunctionUrlCors) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to `0`, which means that the browser doesn't cache results. The maximum value is `86400`.
func (o FunctionUrlCorsOutput) MaxAge() pulumix.Output[*int] {
	return pulumix.Apply[FunctionUrlCors](o, func(v FunctionUrlCors) *int { return v.MaxAge })
}

type FunctionVpcConfig struct {
	// List of security group IDs associated with the Lambda function.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs associated with the Lambda function.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     *string  `pulumi:"vpcId"`
}

type FunctionVpcConfigArgs struct {
	// List of security group IDs associated with the Lambda function.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// List of subnet IDs associated with the Lambda function.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	VpcId     pulumix.Input[*string]  `pulumi:"vpcId"`
}

func (FunctionVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionVpcConfig)(nil)).Elem()
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigOutput() FunctionVpcConfigOutput {
	return i.ToFunctionVpcConfigOutputWithContext(context.Background())
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigOutputWithContext(ctx context.Context) FunctionVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigOutput)
}

func (i *FunctionVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionVpcConfigArgs] {
	return pulumix.Val(i)
}

type FunctionVpcConfigOutput struct{ *pulumi.OutputState }

func (FunctionVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionVpcConfig)(nil)).Elem()
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigOutput() FunctionVpcConfigOutput {
	return o
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigOutputWithContext(ctx context.Context) FunctionVpcConfigOutput {
	return o
}

func (o FunctionVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionVpcConfig] {
	return pulumix.Output[FunctionVpcConfig]{
		OutputState: o.OutputState,
	}
}

// List of security group IDs associated with the Lambda function.
func (o FunctionVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionVpcConfig](o, func(v FunctionVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of subnet IDs associated with the Lambda function.
func (o FunctionVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FunctionVpcConfig](o, func(v FunctionVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o FunctionVpcConfigOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[FunctionVpcConfig](o, func(v FunctionVpcConfig) *string { return v.VpcId })
}

type GetCodeSigningConfigAllowedPublisher struct {
	// The ARN for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
	SigningProfileVersionArns []string `pulumi:"signingProfileVersionArns"`
}

type GetCodeSigningConfigAllowedPublisherArgs struct {
	// The ARN for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
	SigningProfileVersionArns pulumix.Input[[]string] `pulumi:"signingProfileVersionArns"`
}

func (GetCodeSigningConfigAllowedPublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodeSigningConfigAllowedPublisher)(nil)).Elem()
}

func (i GetCodeSigningConfigAllowedPublisherArgs) ToGetCodeSigningConfigAllowedPublisherOutput() GetCodeSigningConfigAllowedPublisherOutput {
	return i.ToGetCodeSigningConfigAllowedPublisherOutputWithContext(context.Background())
}

func (i GetCodeSigningConfigAllowedPublisherArgs) ToGetCodeSigningConfigAllowedPublisherOutputWithContext(ctx context.Context) GetCodeSigningConfigAllowedPublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodeSigningConfigAllowedPublisherOutput)
}

func (i *GetCodeSigningConfigAllowedPublisherArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCodeSigningConfigAllowedPublisherArgs] {
	return pulumix.Val(i)
}

type GetCodeSigningConfigAllowedPublisherOutput struct{ *pulumi.OutputState }

func (GetCodeSigningConfigAllowedPublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodeSigningConfigAllowedPublisher)(nil)).Elem()
}

func (o GetCodeSigningConfigAllowedPublisherOutput) ToGetCodeSigningConfigAllowedPublisherOutput() GetCodeSigningConfigAllowedPublisherOutput {
	return o
}

func (o GetCodeSigningConfigAllowedPublisherOutput) ToGetCodeSigningConfigAllowedPublisherOutputWithContext(ctx context.Context) GetCodeSigningConfigAllowedPublisherOutput {
	return o
}

func (o GetCodeSigningConfigAllowedPublisherOutput) ToOutput(ctx context.Context) pulumix.Output[GetCodeSigningConfigAllowedPublisher] {
	return pulumix.Output[GetCodeSigningConfigAllowedPublisher]{
		OutputState: o.OutputState,
	}
}

// The ARN for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
func (o GetCodeSigningConfigAllowedPublisherOutput) SigningProfileVersionArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCodeSigningConfigAllowedPublisher](o, func(v GetCodeSigningConfigAllowedPublisher) []string { return v.SigningProfileVersionArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCodeSigningConfigPolicy struct {
	// Code signing configuration policy for deployment validation failure.
	UntrustedArtifactOnDeployment string `pulumi:"untrustedArtifactOnDeployment"`
}

type GetCodeSigningConfigPolicyArgs struct {
	// Code signing configuration policy for deployment validation failure.
	UntrustedArtifactOnDeployment pulumix.Input[string] `pulumi:"untrustedArtifactOnDeployment"`
}

func (GetCodeSigningConfigPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodeSigningConfigPolicy)(nil)).Elem()
}

func (i GetCodeSigningConfigPolicyArgs) ToGetCodeSigningConfigPolicyOutput() GetCodeSigningConfigPolicyOutput {
	return i.ToGetCodeSigningConfigPolicyOutputWithContext(context.Background())
}

func (i GetCodeSigningConfigPolicyArgs) ToGetCodeSigningConfigPolicyOutputWithContext(ctx context.Context) GetCodeSigningConfigPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodeSigningConfigPolicyOutput)
}

func (i *GetCodeSigningConfigPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCodeSigningConfigPolicyArgs] {
	return pulumix.Val(i)
}

type GetCodeSigningConfigPolicyOutput struct{ *pulumi.OutputState }

func (GetCodeSigningConfigPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodeSigningConfigPolicy)(nil)).Elem()
}

func (o GetCodeSigningConfigPolicyOutput) ToGetCodeSigningConfigPolicyOutput() GetCodeSigningConfigPolicyOutput {
	return o
}

func (o GetCodeSigningConfigPolicyOutput) ToGetCodeSigningConfigPolicyOutputWithContext(ctx context.Context) GetCodeSigningConfigPolicyOutput {
	return o
}

func (o GetCodeSigningConfigPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetCodeSigningConfigPolicy] {
	return pulumix.Output[GetCodeSigningConfigPolicy]{
		OutputState: o.OutputState,
	}
}

// Code signing configuration policy for deployment validation failure.
func (o GetCodeSigningConfigPolicyOutput) UntrustedArtifactOnDeployment() pulumix.Output[string] {
	return pulumix.Apply[GetCodeSigningConfigPolicy](o, func(v GetCodeSigningConfigPolicy) string { return v.UntrustedArtifactOnDeployment })
}

type GetFunctionDeadLetterConfig struct {
	TargetArn string `pulumi:"targetArn"`
}

type GetFunctionDeadLetterConfigArgs struct {
	TargetArn pulumix.Input[string] `pulumi:"targetArn"`
}

func (GetFunctionDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionDeadLetterConfig)(nil)).Elem()
}

func (i GetFunctionDeadLetterConfigArgs) ToGetFunctionDeadLetterConfigOutput() GetFunctionDeadLetterConfigOutput {
	return i.ToGetFunctionDeadLetterConfigOutputWithContext(context.Background())
}

func (i GetFunctionDeadLetterConfigArgs) ToGetFunctionDeadLetterConfigOutputWithContext(ctx context.Context) GetFunctionDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionDeadLetterConfigOutput)
}

func (i *GetFunctionDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionDeadLetterConfigArgs] {
	return pulumix.Val(i)
}

type GetFunctionDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (GetFunctionDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionDeadLetterConfig)(nil)).Elem()
}

func (o GetFunctionDeadLetterConfigOutput) ToGetFunctionDeadLetterConfigOutput() GetFunctionDeadLetterConfigOutput {
	return o
}

func (o GetFunctionDeadLetterConfigOutput) ToGetFunctionDeadLetterConfigOutputWithContext(ctx context.Context) GetFunctionDeadLetterConfigOutput {
	return o
}

func (o GetFunctionDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionDeadLetterConfig] {
	return pulumix.Output[GetFunctionDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetFunctionDeadLetterConfigOutput) TargetArn() pulumix.Output[string] {
	return pulumix.Apply[GetFunctionDeadLetterConfig](o, func(v GetFunctionDeadLetterConfig) string { return v.TargetArn })
}

type GetFunctionEnvironment struct {
	Variables map[string]string `pulumi:"variables"`
}

type GetFunctionEnvironmentArgs struct {
	Variables pulumix.Input[map[string]string] `pulumi:"variables"`
}

func (GetFunctionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionEnvironment)(nil)).Elem()
}

func (i GetFunctionEnvironmentArgs) ToGetFunctionEnvironmentOutput() GetFunctionEnvironmentOutput {
	return i.ToGetFunctionEnvironmentOutputWithContext(context.Background())
}

func (i GetFunctionEnvironmentArgs) ToGetFunctionEnvironmentOutputWithContext(ctx context.Context) GetFunctionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionEnvironmentOutput)
}

func (i *GetFunctionEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionEnvironmentArgs] {
	return pulumix.Val(i)
}

type GetFunctionEnvironmentOutput struct{ *pulumi.OutputState }

func (GetFunctionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionEnvironment)(nil)).Elem()
}

func (o GetFunctionEnvironmentOutput) ToGetFunctionEnvironmentOutput() GetFunctionEnvironmentOutput {
	return o
}

func (o GetFunctionEnvironmentOutput) ToGetFunctionEnvironmentOutputWithContext(ctx context.Context) GetFunctionEnvironmentOutput {
	return o
}

func (o GetFunctionEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionEnvironment] {
	return pulumix.Output[GetFunctionEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o GetFunctionEnvironmentOutput) Variables() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetFunctionEnvironment](o, func(v GetFunctionEnvironment) map[string]string { return v.Variables })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type GetFunctionEphemeralStorage struct {
	Size int `pulumi:"size"`
}

type GetFunctionEphemeralStorageArgs struct {
	Size pulumix.Input[int] `pulumi:"size"`
}

func (GetFunctionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionEphemeralStorage)(nil)).Elem()
}

func (i GetFunctionEphemeralStorageArgs) ToGetFunctionEphemeralStorageOutput() GetFunctionEphemeralStorageOutput {
	return i.ToGetFunctionEphemeralStorageOutputWithContext(context.Background())
}

func (i GetFunctionEphemeralStorageArgs) ToGetFunctionEphemeralStorageOutputWithContext(ctx context.Context) GetFunctionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionEphemeralStorageOutput)
}

func (i *GetFunctionEphemeralStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionEphemeralStorageArgs] {
	return pulumix.Val(i)
}

type GetFunctionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (GetFunctionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionEphemeralStorage)(nil)).Elem()
}

func (o GetFunctionEphemeralStorageOutput) ToGetFunctionEphemeralStorageOutput() GetFunctionEphemeralStorageOutput {
	return o
}

func (o GetFunctionEphemeralStorageOutput) ToGetFunctionEphemeralStorageOutputWithContext(ctx context.Context) GetFunctionEphemeralStorageOutput {
	return o
}

func (o GetFunctionEphemeralStorageOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionEphemeralStorage] {
	return pulumix.Output[GetFunctionEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

func (o GetFunctionEphemeralStorageOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[GetFunctionEphemeralStorage](o, func(v GetFunctionEphemeralStorage) int { return v.Size })
}

type GetFunctionFileSystemConfig struct {
	// Unqualified (no `:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `qualifiedArn`.
	Arn            string `pulumi:"arn"`
	LocalMountPath string `pulumi:"localMountPath"`
}

type GetFunctionFileSystemConfigArgs struct {
	// Unqualified (no `:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `qualifiedArn`.
	Arn            pulumix.Input[string] `pulumi:"arn"`
	LocalMountPath pulumix.Input[string] `pulumi:"localMountPath"`
}

func (GetFunctionFileSystemConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionFileSystemConfig)(nil)).Elem()
}

func (i GetFunctionFileSystemConfigArgs) ToGetFunctionFileSystemConfigOutput() GetFunctionFileSystemConfigOutput {
	return i.ToGetFunctionFileSystemConfigOutputWithContext(context.Background())
}

func (i GetFunctionFileSystemConfigArgs) ToGetFunctionFileSystemConfigOutputWithContext(ctx context.Context) GetFunctionFileSystemConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionFileSystemConfigOutput)
}

func (i *GetFunctionFileSystemConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionFileSystemConfigArgs] {
	return pulumix.Val(i)
}

type GetFunctionFileSystemConfigOutput struct{ *pulumi.OutputState }

func (GetFunctionFileSystemConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionFileSystemConfig)(nil)).Elem()
}

func (o GetFunctionFileSystemConfigOutput) ToGetFunctionFileSystemConfigOutput() GetFunctionFileSystemConfigOutput {
	return o
}

func (o GetFunctionFileSystemConfigOutput) ToGetFunctionFileSystemConfigOutputWithContext(ctx context.Context) GetFunctionFileSystemConfigOutput {
	return o
}

func (o GetFunctionFileSystemConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionFileSystemConfig] {
	return pulumix.Output[GetFunctionFileSystemConfig]{
		OutputState: o.OutputState,
	}
}

// Unqualified (no `:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `qualifiedArn`.
func (o GetFunctionFileSystemConfigOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetFunctionFileSystemConfig](o, func(v GetFunctionFileSystemConfig) string { return v.Arn })
}

func (o GetFunctionFileSystemConfigOutput) LocalMountPath() pulumix.Output[string] {
	return pulumix.Apply[GetFunctionFileSystemConfig](o, func(v GetFunctionFileSystemConfig) string { return v.LocalMountPath })
}

type GetFunctionTracingConfig struct {
	Mode string `pulumi:"mode"`
}

type GetFunctionTracingConfigArgs struct {
	Mode pulumix.Input[string] `pulumi:"mode"`
}

func (GetFunctionTracingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionTracingConfig)(nil)).Elem()
}

func (i GetFunctionTracingConfigArgs) ToGetFunctionTracingConfigOutput() GetFunctionTracingConfigOutput {
	return i.ToGetFunctionTracingConfigOutputWithContext(context.Background())
}

func (i GetFunctionTracingConfigArgs) ToGetFunctionTracingConfigOutputWithContext(ctx context.Context) GetFunctionTracingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionTracingConfigOutput)
}

func (i *GetFunctionTracingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionTracingConfigArgs] {
	return pulumix.Val(i)
}

type GetFunctionTracingConfigOutput struct{ *pulumi.OutputState }

func (GetFunctionTracingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionTracingConfig)(nil)).Elem()
}

func (o GetFunctionTracingConfigOutput) ToGetFunctionTracingConfigOutput() GetFunctionTracingConfigOutput {
	return o
}

func (o GetFunctionTracingConfigOutput) ToGetFunctionTracingConfigOutputWithContext(ctx context.Context) GetFunctionTracingConfigOutput {
	return o
}

func (o GetFunctionTracingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionTracingConfig] {
	return pulumix.Output[GetFunctionTracingConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetFunctionTracingConfigOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[GetFunctionTracingConfig](o, func(v GetFunctionTracingConfig) string { return v.Mode })
}

type GetFunctionUrlCor struct {
	AllowCredentials bool     `pulumi:"allowCredentials"`
	AllowHeaders     []string `pulumi:"allowHeaders"`
	AllowMethods     []string `pulumi:"allowMethods"`
	AllowOrigins     []string `pulumi:"allowOrigins"`
	ExposeHeaders    []string `pulumi:"exposeHeaders"`
	MaxAge           int      `pulumi:"maxAge"`
}

type GetFunctionUrlCorArgs struct {
	AllowCredentials pulumix.Input[bool]     `pulumi:"allowCredentials"`
	AllowHeaders     pulumix.Input[[]string] `pulumi:"allowHeaders"`
	AllowMethods     pulumix.Input[[]string] `pulumi:"allowMethods"`
	AllowOrigins     pulumix.Input[[]string] `pulumi:"allowOrigins"`
	ExposeHeaders    pulumix.Input[[]string] `pulumi:"exposeHeaders"`
	MaxAge           pulumix.Input[int]      `pulumi:"maxAge"`
}

func (GetFunctionUrlCorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionUrlCor)(nil)).Elem()
}

func (i GetFunctionUrlCorArgs) ToGetFunctionUrlCorOutput() GetFunctionUrlCorOutput {
	return i.ToGetFunctionUrlCorOutputWithContext(context.Background())
}

func (i GetFunctionUrlCorArgs) ToGetFunctionUrlCorOutputWithContext(ctx context.Context) GetFunctionUrlCorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionUrlCorOutput)
}

func (i *GetFunctionUrlCorArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionUrlCorArgs] {
	return pulumix.Val(i)
}

type GetFunctionUrlCorOutput struct{ *pulumi.OutputState }

func (GetFunctionUrlCorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionUrlCor)(nil)).Elem()
}

func (o GetFunctionUrlCorOutput) ToGetFunctionUrlCorOutput() GetFunctionUrlCorOutput {
	return o
}

func (o GetFunctionUrlCorOutput) ToGetFunctionUrlCorOutputWithContext(ctx context.Context) GetFunctionUrlCorOutput {
	return o
}

func (o GetFunctionUrlCorOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionUrlCor] {
	return pulumix.Output[GetFunctionUrlCor]{
		OutputState: o.OutputState,
	}
}

func (o GetFunctionUrlCorOutput) AllowCredentials() pulumix.Output[bool] {
	return pulumix.Apply[GetFunctionUrlCor](o, func(v GetFunctionUrlCor) bool { return v.AllowCredentials })
}

func (o GetFunctionUrlCorOutput) AllowHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFunctionUrlCor](o, func(v GetFunctionUrlCor) []string { return v.AllowHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetFunctionUrlCorOutput) AllowMethods() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFunctionUrlCor](o, func(v GetFunctionUrlCor) []string { return v.AllowMethods })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetFunctionUrlCorOutput) AllowOrigins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFunctionUrlCor](o, func(v GetFunctionUrlCor) []string { return v.AllowOrigins })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetFunctionUrlCorOutput) ExposeHeaders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFunctionUrlCor](o, func(v GetFunctionUrlCor) []string { return v.ExposeHeaders })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetFunctionUrlCorOutput) MaxAge() pulumix.Output[int] {
	return pulumix.Apply[GetFunctionUrlCor](o, func(v GetFunctionUrlCor) int { return v.MaxAge })
}

type GetFunctionVpcConfig struct {
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SubnetIds        []string `pulumi:"subnetIds"`
	VpcId            string   `pulumi:"vpcId"`
}

type GetFunctionVpcConfigArgs struct {
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	SubnetIds        pulumix.Input[[]string] `pulumi:"subnetIds"`
	VpcId            pulumix.Input[string]   `pulumi:"vpcId"`
}

func (GetFunctionVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionVpcConfig)(nil)).Elem()
}

func (i GetFunctionVpcConfigArgs) ToGetFunctionVpcConfigOutput() GetFunctionVpcConfigOutput {
	return i.ToGetFunctionVpcConfigOutputWithContext(context.Background())
}

func (i GetFunctionVpcConfigArgs) ToGetFunctionVpcConfigOutputWithContext(ctx context.Context) GetFunctionVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionVpcConfigOutput)
}

func (i *GetFunctionVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFunctionVpcConfigArgs] {
	return pulumix.Val(i)
}

type GetFunctionVpcConfigOutput struct{ *pulumi.OutputState }

func (GetFunctionVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionVpcConfig)(nil)).Elem()
}

func (o GetFunctionVpcConfigOutput) ToGetFunctionVpcConfigOutput() GetFunctionVpcConfigOutput {
	return o
}

func (o GetFunctionVpcConfigOutput) ToGetFunctionVpcConfigOutputWithContext(ctx context.Context) GetFunctionVpcConfigOutput {
	return o
}

func (o GetFunctionVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetFunctionVpcConfig] {
	return pulumix.Output[GetFunctionVpcConfig]{
		OutputState: o.OutputState,
	}
}

func (o GetFunctionVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFunctionVpcConfig](o, func(v GetFunctionVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetFunctionVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFunctionVpcConfig](o, func(v GetFunctionVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetFunctionVpcConfigOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetFunctionVpcConfig](o, func(v GetFunctionVpcConfig) string { return v.VpcId })
}

func init() {
	pulumi.RegisterOutputType(AliasRoutingConfigOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigAllowedPublishersOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigPoliciesOutput{})
	pulumi.RegisterOutputType(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDestinationConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDestinationConfigOnFailureOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDocumentDbEventSourceConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingFilterCriteriaOutput{})
	pulumi.RegisterOutputType(EventSourceMappingFilterCriteriaFilterOutput{})
	pulumi.RegisterOutputType(EventSourceMappingScalingConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedEventSourceOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSourceAccessConfigurationOutput{})
	pulumi.RegisterOutputType(FunctionDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(FunctionEnvironmentOutput{})
	pulumi.RegisterOutputType(FunctionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(FunctionEventInvokeConfigDestinationConfigOutput{})
	pulumi.RegisterOutputType(FunctionEventInvokeConfigDestinationConfigOnFailureOutput{})
	pulumi.RegisterOutputType(FunctionEventInvokeConfigDestinationConfigOnSuccessOutput{})
	pulumi.RegisterOutputType(FunctionFileSystemConfigOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigOutput{})
	pulumi.RegisterOutputType(FunctionSnapStartOutput{})
	pulumi.RegisterOutputType(FunctionTracingConfigOutput{})
	pulumi.RegisterOutputType(FunctionUrlCorsOutput{})
	pulumi.RegisterOutputType(FunctionVpcConfigOutput{})
	pulumi.RegisterOutputType(GetCodeSigningConfigAllowedPublisherOutput{})
	pulumi.RegisterOutputType(GetCodeSigningConfigPolicyOutput{})
	pulumi.RegisterOutputType(GetFunctionDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(GetFunctionEnvironmentOutput{})
	pulumi.RegisterOutputType(GetFunctionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(GetFunctionFileSystemConfigOutput{})
	pulumi.RegisterOutputType(GetFunctionTracingConfigOutput{})
	pulumi.RegisterOutputType(GetFunctionUrlCorOutput{})
	pulumi.RegisterOutputType(GetFunctionVpcConfigOutput{})
}
