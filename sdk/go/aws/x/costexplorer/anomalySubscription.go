// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costexplorer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CE Anomaly Subscription.
type AnomalySubscription struct {
	pulumi.CustomResourceState

	// The unique identifier for the AWS account in which the anomaly subscription ought to be created.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// ARN of the anomaly subscription.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
	Frequency pulumix.Output[string] `pulumi:"frequency"`
	// A list of cost anomaly monitors.
	MonitorArnLists pulumix.ArrayOutput[string] `pulumi:"monitorArnLists"`
	// The name for the subscription.
	Name pulumix.Output[string] `pulumi:"name"`
	// A subscriber configuration. Multiple subscribers can be defined.
	Subscribers pulumix.GArrayOutput[AnomalySubscriptionSubscriber, AnomalySubscriptionSubscriberOutput] `pulumi:"subscribers"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
	ThresholdExpression pulumix.GPtrOutput[AnomalySubscriptionThresholdExpression, AnomalySubscriptionThresholdExpressionOutput] `pulumi:"thresholdExpression"`
}

// NewAnomalySubscription registers a new resource with the given unique name, arguments, and options.
func NewAnomalySubscription(ctx *pulumi.Context,
	name string, args *AnomalySubscriptionArgs, opts ...pulumi.ResourceOption) (*AnomalySubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.MonitorArnLists == nil {
		return nil, errors.New("invalid value for required argument 'MonitorArnLists'")
	}
	if args.Subscribers == nil {
		return nil, errors.New("invalid value for required argument 'Subscribers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnomalySubscription
	err := ctx.RegisterResource("aws:costexplorer/anomalySubscription:AnomalySubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnomalySubscription gets an existing AnomalySubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnomalySubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnomalySubscriptionState, opts ...pulumi.ResourceOption) (*AnomalySubscription, error) {
	var resource AnomalySubscription
	err := ctx.ReadResource("aws:costexplorer/anomalySubscription:AnomalySubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnomalySubscription resources.
type anomalySubscriptionState struct {
	// The unique identifier for the AWS account in which the anomaly subscription ought to be created.
	AccountId *string `pulumi:"accountId"`
	// ARN of the anomaly subscription.
	Arn *string `pulumi:"arn"`
	// The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
	Frequency *string `pulumi:"frequency"`
	// A list of cost anomaly monitors.
	MonitorArnLists []string `pulumi:"monitorArnLists"`
	// The name for the subscription.
	Name *string `pulumi:"name"`
	// A subscriber configuration. Multiple subscribers can be defined.
	Subscribers []AnomalySubscriptionSubscriber `pulumi:"subscribers"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
	ThresholdExpression *AnomalySubscriptionThresholdExpression `pulumi:"thresholdExpression"`
}

type AnomalySubscriptionState struct {
	// The unique identifier for the AWS account in which the anomaly subscription ought to be created.
	AccountId pulumix.Input[*string]
	// ARN of the anomaly subscription.
	Arn pulumix.Input[*string]
	// The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
	Frequency pulumix.Input[*string]
	// A list of cost anomaly monitors.
	MonitorArnLists pulumix.Input[[]string]
	// The name for the subscription.
	Name pulumix.Input[*string]
	// A subscriber configuration. Multiple subscribers can be defined.
	Subscribers pulumix.Input[[]*AnomalySubscriptionSubscriberArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
	ThresholdExpression pulumix.Input[*AnomalySubscriptionThresholdExpressionArgs]
}

func (AnomalySubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalySubscriptionState)(nil)).Elem()
}

type anomalySubscriptionArgs struct {
	// The unique identifier for the AWS account in which the anomaly subscription ought to be created.
	AccountId *string `pulumi:"accountId"`
	// The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
	Frequency string `pulumi:"frequency"`
	// A list of cost anomaly monitors.
	MonitorArnLists []string `pulumi:"monitorArnLists"`
	// The name for the subscription.
	Name *string `pulumi:"name"`
	// A subscriber configuration. Multiple subscribers can be defined.
	Subscribers []AnomalySubscriptionSubscriber `pulumi:"subscribers"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
	ThresholdExpression *AnomalySubscriptionThresholdExpression `pulumi:"thresholdExpression"`
}

// The set of arguments for constructing a AnomalySubscription resource.
type AnomalySubscriptionArgs struct {
	// The unique identifier for the AWS account in which the anomaly subscription ought to be created.
	AccountId pulumix.Input[*string]
	// The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
	Frequency pulumix.Input[string]
	// A list of cost anomaly monitors.
	MonitorArnLists pulumix.Input[[]string]
	// The name for the subscription.
	Name pulumix.Input[*string]
	// A subscriber configuration. Multiple subscribers can be defined.
	Subscribers pulumix.Input[[]*AnomalySubscriptionSubscriberArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
	ThresholdExpression pulumix.Input[*AnomalySubscriptionThresholdExpressionArgs]
}

func (AnomalySubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalySubscriptionArgs)(nil)).Elem()
}

type AnomalySubscriptionOutput struct{ *pulumi.OutputState }

func (AnomalySubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalySubscription)(nil)).Elem()
}

func (o AnomalySubscriptionOutput) ToAnomalySubscriptionOutput() AnomalySubscriptionOutput {
	return o
}

func (o AnomalySubscriptionOutput) ToAnomalySubscriptionOutputWithContext(ctx context.Context) AnomalySubscriptionOutput {
	return o
}

func (o AnomalySubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[AnomalySubscription] {
	return pulumix.Output[AnomalySubscription]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the AWS account in which the anomaly subscription ought to be created.
func (o AnomalySubscriptionOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the anomaly subscription.
func (o AnomalySubscriptionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
func (o AnomalySubscriptionOutput) Frequency() pulumix.Output[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.Output[string] { return v.Frequency })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of cost anomaly monitors.
func (o AnomalySubscriptionOutput) MonitorArnLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.ArrayOutput[string] { return v.MonitorArnLists })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name for the subscription.
func (o AnomalySubscriptionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A subscriber configuration. Multiple subscribers can be defined.
func (o AnomalySubscriptionOutput) Subscribers() pulumix.GArrayOutput[AnomalySubscriptionSubscriber, AnomalySubscriptionSubscriberOutput] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.GArrayOutput[AnomalySubscriptionSubscriber, AnomalySubscriptionSubscriberOutput] {
		return v.Subscribers
	})
	unwrapped := pulumix.Flatten[[]AnomalySubscriptionSubscriber, pulumix.GArrayOutput[AnomalySubscriptionSubscriber, AnomalySubscriptionSubscriberOutput]](value)
	return pulumix.GArrayOutput[AnomalySubscriptionSubscriber, AnomalySubscriptionSubscriberOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnomalySubscriptionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AnomalySubscriptionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// An Expression object used to specify the anomalies that you want to generate alerts for. See Threshold Expression.
func (o AnomalySubscriptionOutput) ThresholdExpression() pulumix.GPtrOutput[AnomalySubscriptionThresholdExpression, AnomalySubscriptionThresholdExpressionOutput] {
	value := pulumix.Apply[AnomalySubscription](o, func(v AnomalySubscription) pulumix.GPtrOutput[AnomalySubscriptionThresholdExpression, AnomalySubscriptionThresholdExpressionOutput] {
		return v.ThresholdExpression
	})
	unwrapped := pulumix.Flatten[*AnomalySubscriptionThresholdExpression, pulumix.GPtrOutput[AnomalySubscriptionThresholdExpression, AnomalySubscriptionThresholdExpressionOutput]](value)
	return pulumix.GPtrOutput[AnomalySubscriptionThresholdExpression, AnomalySubscriptionThresholdExpressionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AnomalySubscriptionOutput{})
}
