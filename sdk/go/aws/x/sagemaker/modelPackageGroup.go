// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Model Package Group resource.
type ModelPackageGroup struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Model Package Group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description for the model group.
	ModelPackageGroupDescription pulumix.Output[*string] `pulumi:"modelPackageGroupDescription"`
	// The name of the model group.
	ModelPackageGroupName pulumix.Output[string] `pulumi:"modelPackageGroupName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewModelPackageGroup registers a new resource with the given unique name, arguments, and options.
func NewModelPackageGroup(ctx *pulumi.Context,
	name string, args *ModelPackageGroupArgs, opts ...pulumi.ResourceOption) (*ModelPackageGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelPackageGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ModelPackageGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelPackageGroup
	err := ctx.RegisterResource("aws:sagemaker/modelPackageGroup:ModelPackageGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelPackageGroup gets an existing ModelPackageGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelPackageGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelPackageGroupState, opts ...pulumi.ResourceOption) (*ModelPackageGroup, error) {
	var resource ModelPackageGroup
	err := ctx.ReadResource("aws:sagemaker/modelPackageGroup:ModelPackageGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelPackageGroup resources.
type modelPackageGroupState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Model Package Group.
	Arn *string `pulumi:"arn"`
	// A description for the model group.
	ModelPackageGroupDescription *string `pulumi:"modelPackageGroupDescription"`
	// The name of the model group.
	ModelPackageGroupName *string `pulumi:"modelPackageGroupName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ModelPackageGroupState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Model Package Group.
	Arn pulumix.Input[*string]
	// A description for the model group.
	ModelPackageGroupDescription pulumix.Input[*string]
	// The name of the model group.
	ModelPackageGroupName pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ModelPackageGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelPackageGroupState)(nil)).Elem()
}

type modelPackageGroupArgs struct {
	// A description for the model group.
	ModelPackageGroupDescription *string `pulumi:"modelPackageGroupDescription"`
	// The name of the model group.
	ModelPackageGroupName string `pulumi:"modelPackageGroupName"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ModelPackageGroup resource.
type ModelPackageGroupArgs struct {
	// A description for the model group.
	ModelPackageGroupDescription pulumix.Input[*string]
	// The name of the model group.
	ModelPackageGroupName pulumix.Input[string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ModelPackageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelPackageGroupArgs)(nil)).Elem()
}

type ModelPackageGroupOutput struct{ *pulumi.OutputState }

func (ModelPackageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPackageGroup)(nil)).Elem()
}

func (o ModelPackageGroupOutput) ToModelPackageGroupOutput() ModelPackageGroupOutput {
	return o
}

func (o ModelPackageGroupOutput) ToModelPackageGroupOutputWithContext(ctx context.Context) ModelPackageGroupOutput {
	return o
}

func (o ModelPackageGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ModelPackageGroup] {
	return pulumix.Output[ModelPackageGroup]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this Model Package Group.
func (o ModelPackageGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ModelPackageGroup](o, func(v ModelPackageGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description for the model group.
func (o ModelPackageGroupOutput) ModelPackageGroupDescription() pulumix.Output[*string] {
	value := pulumix.Apply[ModelPackageGroup](o, func(v ModelPackageGroup) pulumix.Output[*string] { return v.ModelPackageGroupDescription })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the model group.
func (o ModelPackageGroupOutput) ModelPackageGroupName() pulumix.Output[string] {
	value := pulumix.Apply[ModelPackageGroup](o, func(v ModelPackageGroup) pulumix.Output[string] { return v.ModelPackageGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ModelPackageGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ModelPackageGroup](o, func(v ModelPackageGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ModelPackageGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ModelPackageGroup](o, func(v ModelPackageGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ModelPackageGroupOutput{})
}
