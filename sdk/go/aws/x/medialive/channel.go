// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS MediaLive Channel.
type Channel struct {
	pulumi.CustomResourceState

	// ARN of the Channel.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification pulumix.GPtrOutput[ChannelCdiInputSpecification, ChannelCdiInputSpecificationOutput] `pulumi:"cdiInputSpecification"`
	// Concise argument description.
	ChannelClass pulumix.Output[string] `pulumi:"channelClass"`
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId pulumix.Output[string] `pulumi:"channelId"`
	// Destinations for channel. See Destinations for more details.
	Destinations pulumix.GArrayOutput[ChannelDestination, ChannelDestinationOutput] `pulumi:"destinations"`
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings pulumix.GPtrOutput[ChannelEncoderSettings, ChannelEncoderSettingsOutput] `pulumi:"encoderSettings"`
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments pulumix.GArrayOutput[ChannelInputAttachment, ChannelInputAttachmentOutput] `pulumi:"inputAttachments"`
	// Specification of network and file inputs for the channel.
	InputSpecification pulumix.GPtrOutput[ChannelInputSpecification, ChannelInputSpecificationOutput] `pulumi:"inputSpecification"`
	// The log level to write to Cloudwatch logs.
	LogLevel pulumix.Output[string] `pulumi:"logLevel"`
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance pulumix.GPtrOutput[ChannelMaintenance, ChannelMaintenanceOutput] `pulumi:"maintenance"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Concise argument description.
	RoleArn pulumix.Output[*string] `pulumi:"roleArn"`
	// Whether to start/stop channel. Default: `false`
	StartChannel pulumix.Output[*bool] `pulumi:"startChannel"`
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Settings for the VPC outputs.
	Vpc pulumix.GPtrOutput[ChannelVpc, ChannelVpcOutput] `pulumi:"vpc"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelClass == nil {
		return nil, errors.New("invalid value for required argument 'ChannelClass'")
	}
	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.EncoderSettings == nil {
		return nil, errors.New("invalid value for required argument 'EncoderSettings'")
	}
	if args.InputAttachments == nil {
		return nil, errors.New("invalid value for required argument 'InputAttachments'")
	}
	if args.InputSpecification == nil {
		return nil, errors.New("invalid value for required argument 'InputSpecification'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws:medialive/channel:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws:medialive/channel:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
	// ARN of the Channel.
	Arn *string `pulumi:"arn"`
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification *ChannelCdiInputSpecification `pulumi:"cdiInputSpecification"`
	// Concise argument description.
	ChannelClass *string `pulumi:"channelClass"`
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId *string `pulumi:"channelId"`
	// Destinations for channel. See Destinations for more details.
	Destinations []ChannelDestination `pulumi:"destinations"`
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings *ChannelEncoderSettings `pulumi:"encoderSettings"`
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments []ChannelInputAttachment `pulumi:"inputAttachments"`
	// Specification of network and file inputs for the channel.
	InputSpecification *ChannelInputSpecification `pulumi:"inputSpecification"`
	// The log level to write to Cloudwatch logs.
	LogLevel *string `pulumi:"logLevel"`
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance *ChannelMaintenance `pulumi:"maintenance"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Concise argument description.
	RoleArn *string `pulumi:"roleArn"`
	// Whether to start/stop channel. Default: `false`
	StartChannel *bool `pulumi:"startChannel"`
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Settings for the VPC outputs.
	Vpc *ChannelVpc `pulumi:"vpc"`
}

type ChannelState struct {
	// ARN of the Channel.
	Arn pulumix.Input[*string]
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification pulumix.Input[*ChannelCdiInputSpecificationArgs]
	// Concise argument description.
	ChannelClass pulumix.Input[*string]
	// ID of the channel in MediaPackage that is the destination for this output group.
	ChannelId pulumix.Input[*string]
	// Destinations for channel. See Destinations for more details.
	Destinations pulumix.Input[[]*ChannelDestinationArgs]
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings pulumix.Input[*ChannelEncoderSettingsArgs]
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments pulumix.Input[[]*ChannelInputAttachmentArgs]
	// Specification of network and file inputs for the channel.
	InputSpecification pulumix.Input[*ChannelInputSpecificationArgs]
	// The log level to write to Cloudwatch logs.
	LogLevel pulumix.Input[*string]
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance pulumix.Input[*ChannelMaintenanceArgs]
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Concise argument description.
	RoleArn pulumix.Input[*string]
	// Whether to start/stop channel. Default: `false`
	StartChannel pulumix.Input[*bool]
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Settings for the VPC outputs.
	Vpc pulumix.Input[*ChannelVpcArgs]
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification *ChannelCdiInputSpecification `pulumi:"cdiInputSpecification"`
	// Concise argument description.
	ChannelClass string `pulumi:"channelClass"`
	// Destinations for channel. See Destinations for more details.
	Destinations []ChannelDestination `pulumi:"destinations"`
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings ChannelEncoderSettings `pulumi:"encoderSettings"`
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments []ChannelInputAttachment `pulumi:"inputAttachments"`
	// Specification of network and file inputs for the channel.
	InputSpecification ChannelInputSpecification `pulumi:"inputSpecification"`
	// The log level to write to Cloudwatch logs.
	LogLevel *string `pulumi:"logLevel"`
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance *ChannelMaintenance `pulumi:"maintenance"`
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Concise argument description.
	RoleArn *string `pulumi:"roleArn"`
	// Whether to start/stop channel. Default: `false`
	StartChannel *bool `pulumi:"startChannel"`
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Settings for the VPC outputs.
	Vpc *ChannelVpc `pulumi:"vpc"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
	CdiInputSpecification pulumix.Input[*ChannelCdiInputSpecificationArgs]
	// Concise argument description.
	ChannelClass pulumix.Input[string]
	// Destinations for channel. See Destinations for more details.
	Destinations pulumix.Input[[]*ChannelDestinationArgs]
	// Encoder settings. See Encoder Settings for more details.
	EncoderSettings pulumix.Input[*ChannelEncoderSettingsArgs]
	// Input attachments for the channel. See Input Attachments for more details.
	InputAttachments pulumix.Input[[]*ChannelInputAttachmentArgs]
	// Specification of network and file inputs for the channel.
	InputSpecification pulumix.Input[*ChannelInputSpecificationArgs]
	// The log level to write to Cloudwatch logs.
	LogLevel pulumix.Input[*string]
	// Maintenance settings for this channel. See Maintenance for more details.
	Maintenance pulumix.Input[*ChannelMaintenanceArgs]
	// Name of the Channel.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Concise argument description.
	RoleArn pulumix.Input[*string]
	// Whether to start/stop channel. Default: `false`
	StartChannel pulumix.Input[*bool]
	// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Settings for the VPC outputs.
	Vpc pulumix.Input[*ChannelVpcArgs]
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) ToOutput(ctx context.Context) pulumix.Output[Channel] {
	return pulumix.Output[Channel]{
		OutputState: o.OutputState,
	}
}

// ARN of the Channel.
func (o ChannelOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specification of CDI inputs for this channel. See CDI Input Specification for more details.
func (o ChannelOutput) CdiInputSpecification() pulumix.GPtrOutput[ChannelCdiInputSpecification, ChannelCdiInputSpecificationOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GPtrOutput[ChannelCdiInputSpecification, ChannelCdiInputSpecificationOutput] {
		return v.CdiInputSpecification
	})
	unwrapped := pulumix.Flatten[*ChannelCdiInputSpecification, pulumix.GPtrOutput[ChannelCdiInputSpecification, ChannelCdiInputSpecificationOutput]](value)
	return pulumix.GPtrOutput[ChannelCdiInputSpecification, ChannelCdiInputSpecificationOutput]{OutputState: unwrapped.OutputState}
}

// Concise argument description.
func (o ChannelOutput) ChannelClass() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.ChannelClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the channel in MediaPackage that is the destination for this output group.
func (o ChannelOutput) ChannelId() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.ChannelId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Destinations for channel. See Destinations for more details.
func (o ChannelOutput) Destinations() pulumix.GArrayOutput[ChannelDestination, ChannelDestinationOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GArrayOutput[ChannelDestination, ChannelDestinationOutput] {
		return v.Destinations
	})
	unwrapped := pulumix.Flatten[[]ChannelDestination, pulumix.GArrayOutput[ChannelDestination, ChannelDestinationOutput]](value)
	return pulumix.GArrayOutput[ChannelDestination, ChannelDestinationOutput]{OutputState: unwrapped.OutputState}
}

// Encoder settings. See Encoder Settings for more details.
func (o ChannelOutput) EncoderSettings() pulumix.GPtrOutput[ChannelEncoderSettings, ChannelEncoderSettingsOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GPtrOutput[ChannelEncoderSettings, ChannelEncoderSettingsOutput] {
		return v.EncoderSettings
	})
	unwrapped := pulumix.Flatten[*ChannelEncoderSettings, pulumix.GPtrOutput[ChannelEncoderSettings, ChannelEncoderSettingsOutput]](value)
	return pulumix.GPtrOutput[ChannelEncoderSettings, ChannelEncoderSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Input attachments for the channel. See Input Attachments for more details.
func (o ChannelOutput) InputAttachments() pulumix.GArrayOutput[ChannelInputAttachment, ChannelInputAttachmentOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GArrayOutput[ChannelInputAttachment, ChannelInputAttachmentOutput] {
		return v.InputAttachments
	})
	unwrapped := pulumix.Flatten[[]ChannelInputAttachment, pulumix.GArrayOutput[ChannelInputAttachment, ChannelInputAttachmentOutput]](value)
	return pulumix.GArrayOutput[ChannelInputAttachment, ChannelInputAttachmentOutput]{OutputState: unwrapped.OutputState}
}

// Specification of network and file inputs for the channel.
func (o ChannelOutput) InputSpecification() pulumix.GPtrOutput[ChannelInputSpecification, ChannelInputSpecificationOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GPtrOutput[ChannelInputSpecification, ChannelInputSpecificationOutput] {
		return v.InputSpecification
	})
	unwrapped := pulumix.Flatten[*ChannelInputSpecification, pulumix.GPtrOutput[ChannelInputSpecification, ChannelInputSpecificationOutput]](value)
	return pulumix.GPtrOutput[ChannelInputSpecification, ChannelInputSpecificationOutput]{OutputState: unwrapped.OutputState}
}

// The log level to write to Cloudwatch logs.
func (o ChannelOutput) LogLevel() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.LogLevel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Maintenance settings for this channel. See Maintenance for more details.
func (o ChannelOutput) Maintenance() pulumix.GPtrOutput[ChannelMaintenance, ChannelMaintenanceOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GPtrOutput[ChannelMaintenance, ChannelMaintenanceOutput] { return v.Maintenance })
	unwrapped := pulumix.Flatten[*ChannelMaintenance, pulumix.GPtrOutput[ChannelMaintenance, ChannelMaintenanceOutput]](value)
	return pulumix.GPtrOutput[ChannelMaintenance, ChannelMaintenanceOutput]{OutputState: unwrapped.OutputState}
}

// Name of the Channel.
//
// The following arguments are optional:
func (o ChannelOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Concise argument description.
func (o ChannelOutput) RoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[*string] { return v.RoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to start/stop channel. Default: `false`
func (o ChannelOutput) StartChannel() pulumix.Output[*bool] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[*bool] { return v.StartChannel })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A map of tags to assign to the channel. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ChannelOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ChannelOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Settings for the VPC outputs.
func (o ChannelOutput) Vpc() pulumix.GPtrOutput[ChannelVpc, ChannelVpcOutput] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.GPtrOutput[ChannelVpc, ChannelVpcOutput] { return v.Vpc })
	unwrapped := pulumix.Flatten[*ChannelVpc, pulumix.GPtrOutput[ChannelVpc, ChannelVpcOutput]](value)
	return pulumix.GPtrOutput[ChannelVpc, ChannelVpcOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ChannelOutput{})
}
