// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS DataSync FSx Lustre Location.
type LocationFsxLustre struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The time that the FSx for Lustre location was created.
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn pulumix.Output[string] `pulumi:"fsxFilesystemArn"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns pulumix.ArrayOutput[string] `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination.
	Subdirectory pulumix.Output[string] `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The URL of the FSx for Lustre location that was described.
	Uri pulumix.Output[string] `pulumi:"uri"`
}

// NewLocationFsxLustre registers a new resource with the given unique name, arguments, and options.
func NewLocationFsxLustre(ctx *pulumi.Context,
	name string, args *LocationFsxLustreArgs, opts ...pulumi.ResourceOption) (*LocationFsxLustre, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsxFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'FsxFilesystemArn'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationFsxLustre
	err := ctx.RegisterResource("aws:datasync/locationFsxLustre:LocationFsxLustre", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationFsxLustre gets an existing LocationFsxLustre resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationFsxLustre(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationFsxLustreState, opts ...pulumi.ResourceOption) (*LocationFsxLustre, error) {
	var resource LocationFsxLustre
	err := ctx.ReadResource("aws:datasync/locationFsxLustre:LocationFsxLustre", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationFsxLustre resources.
type locationFsxLustreState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// The time that the FSx for Lustre location was created.
	CreationTime *string `pulumi:"creationTime"`
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn *string `pulumi:"fsxFilesystemArn"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The URL of the FSx for Lustre location that was described.
	Uri *string `pulumi:"uri"`
}

type LocationFsxLustreState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Input[*string]
	// The time that the FSx for Lustre location was created.
	CreationTime pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn pulumix.Input[*string]
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns pulumix.Input[[]string]
	// Subdirectory to perform actions as source or destination.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The URL of the FSx for Lustre location that was described.
	Uri pulumix.Input[*string]
}

func (LocationFsxLustreState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxLustreState)(nil)).Elem()
}

type locationFsxLustreArgs struct {
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn string `pulumi:"fsxFilesystemArn"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LocationFsxLustre resource.
type LocationFsxLustreArgs struct {
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn pulumix.Input[string]
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns pulumix.Input[[]string]
	// Subdirectory to perform actions as source or destination.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LocationFsxLustreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxLustreArgs)(nil)).Elem()
}

type LocationFsxLustreOutput struct{ *pulumi.OutputState }

func (LocationFsxLustreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxLustre)(nil)).Elem()
}

func (o LocationFsxLustreOutput) ToLocationFsxLustreOutput() LocationFsxLustreOutput {
	return o
}

func (o LocationFsxLustreOutput) ToLocationFsxLustreOutputWithContext(ctx context.Context) LocationFsxLustreOutput {
	return o
}

func (o LocationFsxLustreOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxLustre] {
	return pulumix.Output[LocationFsxLustre]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o LocationFsxLustreOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The time that the FSx for Lustre location was created.
func (o LocationFsxLustreOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
func (o LocationFsxLustreOutput) FsxFilesystemArn() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.Output[string] { return v.FsxFilesystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Lustre file system.
func (o LocationFsxLustreOutput) SecurityGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.ArrayOutput[string] { return v.SecurityGroupArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Subdirectory to perform actions as source or destination.
func (o LocationFsxLustreOutput) Subdirectory() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.Output[string] { return v.Subdirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LocationFsxLustreOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LocationFsxLustreOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The URL of the FSx for Lustre location that was described.
func (o LocationFsxLustreOutput) Uri() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxLustre](o, func(v LocationFsxLustre) pulumix.Output[string] { return v.Uri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LocationFsxLustreOutput{})
}
