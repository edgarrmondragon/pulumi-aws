// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codegurureviewer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CodeGuru Reviewer Repository Association.
type RepositoryAssociation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) identifying the repository association.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID of the repository association.
	AssociationId pulumix.Output[string] `pulumi:"associationId"`
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumix.Output[string] `pulumi:"connectionArn"`
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails pulumix.GPtrOutput[RepositoryAssociationKmsKeyDetails, RepositoryAssociationKmsKeyDetailsOutput] `pulumi:"kmsKeyDetails"`
	// The name of the third party source repository.
	Name pulumix.Output[string] `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner pulumix.Output[string] `pulumi:"owner"`
	// The provider type of the repository association.
	ProviderType pulumix.Output[string] `pulumi:"providerType"`
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository          pulumix.GPtrOutput[RepositoryAssociationRepository, RepositoryAssociationRepositoryOutput]                   `pulumi:"repository"`
	S3RepositoryDetails pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetail, RepositoryAssociationS3RepositoryDetailOutput] `pulumi:"s3RepositoryDetails"`
	// The state of the repository association.
	State pulumix.Output[string] `pulumi:"state"`
	// A description of why the repository association is in the current state.
	StateReason pulumix.Output[string]    `pulumi:"stateReason"`
	Tags        pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll     pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRepositoryAssociation registers a new resource with the given unique name, arguments, and options.
func NewRepositoryAssociation(ctx *pulumi.Context,
	name string, args *RepositoryAssociationArgs, opts ...pulumi.ResourceOption) (*RepositoryAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryAssociation
	err := ctx.RegisterResource("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryAssociation gets an existing RepositoryAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryAssociationState, opts ...pulumi.ResourceOption) (*RepositoryAssociation, error) {
	var resource RepositoryAssociation
	err := ctx.ReadResource("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryAssociation resources.
type repositoryAssociationState struct {
	// The Amazon Resource Name (ARN) identifying the repository association.
	Arn *string `pulumi:"arn"`
	// The ID of the repository association.
	AssociationId *string `pulumi:"associationId"`
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn *string `pulumi:"connectionArn"`
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails *RepositoryAssociationKmsKeyDetails `pulumi:"kmsKeyDetails"`
	// The name of the third party source repository.
	Name *string `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner *string `pulumi:"owner"`
	// The provider type of the repository association.
	ProviderType *string `pulumi:"providerType"`
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository          *RepositoryAssociationRepository          `pulumi:"repository"`
	S3RepositoryDetails []RepositoryAssociationS3RepositoryDetail `pulumi:"s3RepositoryDetails"`
	// The state of the repository association.
	State *string `pulumi:"state"`
	// A description of why the repository association is in the current state.
	StateReason *string           `pulumi:"stateReason"`
	Tags        map[string]string `pulumi:"tags"`
	TagsAll     map[string]string `pulumi:"tagsAll"`
}

type RepositoryAssociationState struct {
	// The Amazon Resource Name (ARN) identifying the repository association.
	Arn pulumix.Input[*string]
	// The ID of the repository association.
	AssociationId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumix.Input[*string]
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails pulumix.Input[*RepositoryAssociationKmsKeyDetailsArgs]
	// The name of the third party source repository.
	Name pulumix.Input[*string]
	// The username for the account that owns the repository.
	Owner pulumix.Input[*string]
	// The provider type of the repository association.
	ProviderType pulumix.Input[*string]
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository          pulumix.Input[*RepositoryAssociationRepositoryArgs]
	S3RepositoryDetails pulumix.Input[[]*RepositoryAssociationS3RepositoryDetailArgs]
	// The state of the repository association.
	State pulumix.Input[*string]
	// A description of why the repository association is in the current state.
	StateReason pulumix.Input[*string]
	Tags        pulumix.Input[map[string]string]
	TagsAll     pulumix.Input[map[string]string]
}

func (RepositoryAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryAssociationState)(nil)).Elem()
}

type repositoryAssociationArgs struct {
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails *RepositoryAssociationKmsKeyDetails `pulumi:"kmsKeyDetails"`
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository RepositoryAssociationRepository `pulumi:"repository"`
	Tags       map[string]string               `pulumi:"tags"`
}

// The set of arguments for constructing a RepositoryAssociation resource.
type RepositoryAssociationArgs struct {
	// An object describing the KMS key to asssociate. Block is documented below.
	KmsKeyDetails pulumix.Input[*RepositoryAssociationKmsKeyDetailsArgs]
	// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
	//
	// The following arguments are optional:
	Repository pulumix.Input[*RepositoryAssociationRepositoryArgs]
	Tags       pulumix.Input[map[string]string]
}

func (RepositoryAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryAssociationArgs)(nil)).Elem()
}

type RepositoryAssociationOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociation)(nil)).Elem()
}

func (o RepositoryAssociationOutput) ToRepositoryAssociationOutput() RepositoryAssociationOutput {
	return o
}

func (o RepositoryAssociationOutput) ToRepositoryAssociationOutputWithContext(ctx context.Context) RepositoryAssociationOutput {
	return o
}

func (o RepositoryAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociation] {
	return pulumix.Output[RepositoryAssociation]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) identifying the repository association.
func (o RepositoryAssociationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the repository association.
func (o RepositoryAssociationOutput) AssociationId() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.AssociationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationOutput) ConnectionArn() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.ConnectionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An object describing the KMS key to asssociate. Block is documented below.
func (o RepositoryAssociationOutput) KmsKeyDetails() pulumix.GPtrOutput[RepositoryAssociationKmsKeyDetails, RepositoryAssociationKmsKeyDetailsOutput] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.GPtrOutput[RepositoryAssociationKmsKeyDetails, RepositoryAssociationKmsKeyDetailsOutput] {
		return v.KmsKeyDetails
	})
	unwrapped := pulumix.Flatten[*RepositoryAssociationKmsKeyDetails, pulumix.GPtrOutput[RepositoryAssociationKmsKeyDetails, RepositoryAssociationKmsKeyDetailsOutput]](value)
	return pulumix.GPtrOutput[RepositoryAssociationKmsKeyDetails, RepositoryAssociationKmsKeyDetailsOutput]{OutputState: unwrapped.OutputState}
}

// The name of the third party source repository.
func (o RepositoryAssociationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The username for the account that owns the repository.
func (o RepositoryAssociationOutput) Owner() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.Owner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The provider type of the repository association.
func (o RepositoryAssociationOutput) ProviderType() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.ProviderType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `githubEnterpriseServer`, or `s3Bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `githubEnterpriseServer`) the connection must be in `Available` status prior to creating this resource.
//
// The following arguments are optional:
func (o RepositoryAssociationOutput) Repository() pulumix.GPtrOutput[RepositoryAssociationRepository, RepositoryAssociationRepositoryOutput] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.GPtrOutput[RepositoryAssociationRepository, RepositoryAssociationRepositoryOutput] {
		return v.Repository
	})
	unwrapped := pulumix.Flatten[*RepositoryAssociationRepository, pulumix.GPtrOutput[RepositoryAssociationRepository, RepositoryAssociationRepositoryOutput]](value)
	return pulumix.GPtrOutput[RepositoryAssociationRepository, RepositoryAssociationRepositoryOutput]{OutputState: unwrapped.OutputState}
}

func (o RepositoryAssociationOutput) S3RepositoryDetails() pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetail, RepositoryAssociationS3RepositoryDetailOutput] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetail, RepositoryAssociationS3RepositoryDetailOutput] {
		return v.S3RepositoryDetails
	})
	unwrapped := pulumix.Flatten[[]RepositoryAssociationS3RepositoryDetail, pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetail, RepositoryAssociationS3RepositoryDetailOutput]](value)
	return pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetail, RepositoryAssociationS3RepositoryDetailOutput]{OutputState: unwrapped.OutputState}
}

// The state of the repository association.
func (o RepositoryAssociationOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of why the repository association is in the current state.
func (o RepositoryAssociationOutput) StateReason() pulumix.Output[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.Output[string] { return v.StateReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o RepositoryAssociationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o RepositoryAssociationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RepositoryAssociation](o, func(v RepositoryAssociation) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RepositoryAssociationOutput{})
}
