// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterClusterNode struct {
	// Whether the node is a leader node or a compute node
	NodeRole *string `pulumi:"nodeRole"`
	// The private IP address of a node within a cluster
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The public IP address of a node within a cluster
	PublicIpAddress *string `pulumi:"publicIpAddress"`
}

type ClusterClusterNodeArgs struct {
	// Whether the node is a leader node or a compute node
	NodeRole pulumix.Input[*string] `pulumi:"nodeRole"`
	// The private IP address of a node within a cluster
	PrivateIpAddress pulumix.Input[*string] `pulumi:"privateIpAddress"`
	// The public IP address of a node within a cluster
	PublicIpAddress pulumix.Input[*string] `pulumi:"publicIpAddress"`
}

func (ClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterNode)(nil)).Elem()
}

func (i ClusterClusterNodeArgs) ToClusterClusterNodeOutput() ClusterClusterNodeOutput {
	return i.ToClusterClusterNodeOutputWithContext(context.Background())
}

func (i ClusterClusterNodeArgs) ToClusterClusterNodeOutputWithContext(ctx context.Context) ClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClusterNodeOutput)
}

func (i *ClusterClusterNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterClusterNodeArgs] {
	return pulumix.Val(i)
}

type ClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (ClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClusterNode)(nil)).Elem()
}

func (o ClusterClusterNodeOutput) ToClusterClusterNodeOutput() ClusterClusterNodeOutput {
	return o
}

func (o ClusterClusterNodeOutput) ToClusterClusterNodeOutputWithContext(ctx context.Context) ClusterClusterNodeOutput {
	return o
}

func (o ClusterClusterNodeOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterClusterNode] {
	return pulumix.Output[ClusterClusterNode]{
		OutputState: o.OutputState,
	}
}

// Whether the node is a leader node or a compute node
func (o ClusterClusterNodeOutput) NodeRole() pulumix.Output[*string] {
	return pulumix.Apply[ClusterClusterNode](o, func(v ClusterClusterNode) *string { return v.NodeRole })
}

// The private IP address of a node within a cluster
func (o ClusterClusterNodeOutput) PrivateIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[ClusterClusterNode](o, func(v ClusterClusterNode) *string { return v.PrivateIpAddress })
}

// The public IP address of a node within a cluster
func (o ClusterClusterNodeOutput) PublicIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[ClusterClusterNode](o, func(v ClusterClusterNode) *string { return v.PublicIpAddress })
}

type ClusterLogging struct {
	// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
	// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
	BucketName *string `pulumi:"bucketName"`
	// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
	Enable bool `pulumi:"enable"`
	// The log destination type. An enum with possible values of `s3` and `cloudwatch`.
	LogDestinationType *string `pulumi:"logDestinationType"`
	// The collection of exported log types. Log types include the connection log, user log and user activity log. Required when `logDestinationType` is `cloudwatch`. Valid log types are `connectionlog`, `userlog`, and `useractivitylog`.
	LogExports []string `pulumi:"logExports"`
	// The prefix applied to the log file names.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

type ClusterLoggingArgs struct {
	// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
	// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
	BucketName pulumix.Input[*string] `pulumi:"bucketName"`
	// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
	Enable pulumix.Input[bool] `pulumi:"enable"`
	// The log destination type. An enum with possible values of `s3` and `cloudwatch`.
	LogDestinationType pulumix.Input[*string] `pulumi:"logDestinationType"`
	// The collection of exported log types. Log types include the connection log, user log and user activity log. Required when `logDestinationType` is `cloudwatch`. Valid log types are `connectionlog`, `userlog`, and `useractivitylog`.
	LogExports pulumix.Input[[]string] `pulumi:"logExports"`
	// The prefix applied to the log file names.
	S3KeyPrefix pulumix.Input[*string] `pulumi:"s3KeyPrefix"`
}

func (ClusterLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogging)(nil)).Elem()
}

func (i ClusterLoggingArgs) ToClusterLoggingOutput() ClusterLoggingOutput {
	return i.ToClusterLoggingOutputWithContext(context.Background())
}

func (i ClusterLoggingArgs) ToClusterLoggingOutputWithContext(ctx context.Context) ClusterLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingOutput)
}

func (i *ClusterLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingArgs] {
	return pulumix.Val(i)
}

type ClusterLoggingOutput struct{ *pulumi.OutputState }

func (ClusterLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogging)(nil)).Elem()
}

func (o ClusterLoggingOutput) ToClusterLoggingOutput() ClusterLoggingOutput {
	return o
}

func (o ClusterLoggingOutput) ToClusterLoggingOutputWithContext(ctx context.Context) ClusterLoggingOutput {
	return o
}

func (o ClusterLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLogging] {
	return pulumix.Output[ClusterLogging]{
		OutputState: o.OutputState,
	}
}

// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
// For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
func (o ClusterLoggingOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLogging](o, func(v ClusterLogging) *string { return v.BucketName })
}

// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
func (o ClusterLoggingOutput) Enable() pulumix.Output[bool] {
	return pulumix.Apply[ClusterLogging](o, func(v ClusterLogging) bool { return v.Enable })
}

// The log destination type. An enum with possible values of `s3` and `cloudwatch`.
func (o ClusterLoggingOutput) LogDestinationType() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLogging](o, func(v ClusterLogging) *string { return v.LogDestinationType })
}

// The collection of exported log types. Log types include the connection log, user log and user activity log. Required when `logDestinationType` is `cloudwatch`. Valid log types are `connectionlog`, `userlog`, and `useractivitylog`.
func (o ClusterLoggingOutput) LogExports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterLogging](o, func(v ClusterLogging) []string { return v.LogExports })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The prefix applied to the log file names.
func (o ClusterLoggingOutput) S3KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ClusterLogging](o, func(v ClusterLogging) *string { return v.S3KeyPrefix })
}

type ClusterSnapshotCopy struct {
	// The destination region that you want to copy snapshots to.
	DestinationRegion string `pulumi:"destinationRegion"`
	// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
	GrantName *string `pulumi:"grantName"`
	// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

type ClusterSnapshotCopyArgs struct {
	// The destination region that you want to copy snapshots to.
	DestinationRegion pulumix.Input[string] `pulumi:"destinationRegion"`
	// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
	GrantName pulumix.Input[*string] `pulumi:"grantName"`
	// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
	RetentionPeriod pulumix.Input[*int] `pulumi:"retentionPeriod"`
}

func (ClusterSnapshotCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSnapshotCopy)(nil)).Elem()
}

func (i ClusterSnapshotCopyArgs) ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput {
	return i.ToClusterSnapshotCopyOutputWithContext(context.Background())
}

func (i ClusterSnapshotCopyArgs) ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSnapshotCopyOutput)
}

func (i *ClusterSnapshotCopyArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterSnapshotCopyArgs] {
	return pulumix.Val(i)
}

type ClusterSnapshotCopyOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSnapshotCopy)(nil)).Elem()
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyOutput() ClusterSnapshotCopyOutput {
	return o
}

func (o ClusterSnapshotCopyOutput) ToClusterSnapshotCopyOutputWithContext(ctx context.Context) ClusterSnapshotCopyOutput {
	return o
}

func (o ClusterSnapshotCopyOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterSnapshotCopy] {
	return pulumix.Output[ClusterSnapshotCopy]{
		OutputState: o.OutputState,
	}
}

// The destination region that you want to copy snapshots to.
func (o ClusterSnapshotCopyOutput) DestinationRegion() pulumix.Output[string] {
	return pulumix.Apply[ClusterSnapshotCopy](o, func(v ClusterSnapshotCopy) string { return v.DestinationRegion })
}

// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
func (o ClusterSnapshotCopyOutput) GrantName() pulumix.Output[*string] {
	return pulumix.Apply[ClusterSnapshotCopy](o, func(v ClusterSnapshotCopy) *string { return v.GrantName })
}

// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
func (o ClusterSnapshotCopyOutput) RetentionPeriod() pulumix.Output[*int] {
	return pulumix.Apply[ClusterSnapshotCopy](o, func(v ClusterSnapshotCopy) *int { return v.RetentionPeriod })
}

type EndpointAccessVpcEndpoint struct {
	// One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
	NetworkInterfaces []EndpointAccessVpcEndpointNetworkInterface `pulumi:"networkInterfaces"`
	// The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The VPC identifier that the endpoint is associated.
	VpcId *string `pulumi:"vpcId"`
}

type EndpointAccessVpcEndpointArgs struct {
	// One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
	NetworkInterfaces pulumix.Input[[]*EndpointAccessVpcEndpointNetworkInterfaceArgs] `pulumi:"networkInterfaces"`
	// The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
	VpcEndpointId pulumix.Input[*string] `pulumi:"vpcEndpointId"`
	// The VPC identifier that the endpoint is associated.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (EndpointAccessVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpoint)(nil)).Elem()
}

func (i EndpointAccessVpcEndpointArgs) ToEndpointAccessVpcEndpointOutput() EndpointAccessVpcEndpointOutput {
	return i.ToEndpointAccessVpcEndpointOutputWithContext(context.Background())
}

func (i EndpointAccessVpcEndpointArgs) ToEndpointAccessVpcEndpointOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessVpcEndpointOutput)
}

func (i *EndpointAccessVpcEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointAccessVpcEndpointArgs] {
	return pulumix.Val(i)
}

type EndpointAccessVpcEndpointOutput struct{ *pulumi.OutputState }

func (EndpointAccessVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpoint)(nil)).Elem()
}

func (o EndpointAccessVpcEndpointOutput) ToEndpointAccessVpcEndpointOutput() EndpointAccessVpcEndpointOutput {
	return o
}

func (o EndpointAccessVpcEndpointOutput) ToEndpointAccessVpcEndpointOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointOutput {
	return o
}

func (o EndpointAccessVpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAccessVpcEndpoint] {
	return pulumix.Output[EndpointAccessVpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
func (o EndpointAccessVpcEndpointOutput) NetworkInterfaces() pulumix.GArrayOutput[EndpointAccessVpcEndpointNetworkInterface, EndpointAccessVpcEndpointNetworkInterfaceOutput] {
	value := pulumix.Apply[EndpointAccessVpcEndpoint](o, func(v EndpointAccessVpcEndpoint) []EndpointAccessVpcEndpointNetworkInterface {
		return v.NetworkInterfaces
	})
	return pulumix.GArrayOutput[EndpointAccessVpcEndpointNetworkInterface, EndpointAccessVpcEndpointNetworkInterfaceOutput]{OutputState: value.OutputState}
}

// The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
func (o EndpointAccessVpcEndpointOutput) VpcEndpointId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpoint](o, func(v EndpointAccessVpcEndpoint) *string { return v.VpcEndpointId })
}

// The VPC identifier that the endpoint is associated.
func (o EndpointAccessVpcEndpointOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpoint](o, func(v EndpointAccessVpcEndpoint) *string { return v.VpcId })
}

type EndpointAccessVpcEndpointNetworkInterface struct {
	// The Availability Zone.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The network interface identifier.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The subnet identifier.
	SubnetId *string `pulumi:"subnetId"`
}

type EndpointAccessVpcEndpointNetworkInterfaceArgs struct {
	// The Availability Zone.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// The network interface identifier.
	NetworkInterfaceId pulumix.Input[*string] `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress pulumix.Input[*string] `pulumi:"privateIpAddress"`
	// The subnet identifier.
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
}

func (EndpointAccessVpcEndpointNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpointNetworkInterface)(nil)).Elem()
}

func (i EndpointAccessVpcEndpointNetworkInterfaceArgs) ToEndpointAccessVpcEndpointNetworkInterfaceOutput() EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return i.ToEndpointAccessVpcEndpointNetworkInterfaceOutputWithContext(context.Background())
}

func (i EndpointAccessVpcEndpointNetworkInterfaceArgs) ToEndpointAccessVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAccessVpcEndpointNetworkInterfaceOutput)
}

func (i *EndpointAccessVpcEndpointNetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[*EndpointAccessVpcEndpointNetworkInterfaceArgs] {
	return pulumix.Val(i)
}

type EndpointAccessVpcEndpointNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (EndpointAccessVpcEndpointNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAccessVpcEndpointNetworkInterface)(nil)).Elem()
}

func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) ToEndpointAccessVpcEndpointNetworkInterfaceOutput() EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) ToEndpointAccessVpcEndpointNetworkInterfaceOutputWithContext(ctx context.Context) EndpointAccessVpcEndpointNetworkInterfaceOutput {
	return o
}

func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointAccessVpcEndpointNetworkInterface] {
	return pulumix.Output[EndpointAccessVpcEndpointNetworkInterface]{
		OutputState: o.OutputState,
	}
}

// The Availability Zone.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) AvailabilityZone() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.AvailabilityZone })
}

// The network interface identifier.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) NetworkInterfaceId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.NetworkInterfaceId })
}

// The IPv4 address of the network interface within the subnet.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) PrivateIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.PrivateIpAddress })
}

// The subnet identifier.
func (o EndpointAccessVpcEndpointNetworkInterfaceOutput) SubnetId() pulumix.Output[*string] {
	return pulumix.Apply[EndpointAccessVpcEndpointNetworkInterface](o, func(v EndpointAccessVpcEndpointNetworkInterface) *string { return v.SubnetId })
}

type ParameterGroupParameter struct {
	// The name of the Redshift parameter.
	Name string `pulumi:"name"`
	// The value of the Redshift parameter.
	Value string `pulumi:"value"`
}

type ParameterGroupParameterArgs struct {
	// The name of the Redshift parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the Redshift parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

func (i *ParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ParameterGroupParameter] {
	return pulumix.Output[ParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the Redshift parameter.
func (o ParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Name })
}

// The value of the Redshift parameter.
func (o ParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Value })
}

type ScheduledActionTargetAction struct {
	// An action that runs a `PauseCluster` API operation. Documented below.
	PauseCluster *ScheduledActionTargetActionPauseCluster `pulumi:"pauseCluster"`
	// An action that runs a `ResizeCluster` API operation. Documented below.
	ResizeCluster *ScheduledActionTargetActionResizeCluster `pulumi:"resizeCluster"`
	// An action that runs a `ResumeCluster` API operation. Documented below.
	ResumeCluster *ScheduledActionTargetActionResumeCluster `pulumi:"resumeCluster"`
}

type ScheduledActionTargetActionArgs struct {
	// An action that runs a `PauseCluster` API operation. Documented below.
	PauseCluster pulumix.Input[*ScheduledActionTargetActionPauseClusterArgs] `pulumi:"pauseCluster"`
	// An action that runs a `ResizeCluster` API operation. Documented below.
	ResizeCluster pulumix.Input[*ScheduledActionTargetActionResizeClusterArgs] `pulumi:"resizeCluster"`
	// An action that runs a `ResumeCluster` API operation. Documented below.
	ResumeCluster pulumix.Input[*ScheduledActionTargetActionResumeClusterArgs] `pulumi:"resumeCluster"`
}

func (ScheduledActionTargetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetAction)(nil)).Elem()
}

func (i ScheduledActionTargetActionArgs) ToScheduledActionTargetActionOutput() ScheduledActionTargetActionOutput {
	return i.ToScheduledActionTargetActionOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionArgs) ToScheduledActionTargetActionOutputWithContext(ctx context.Context) ScheduledActionTargetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionOutput)
}

func (i *ScheduledActionTargetActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduledActionTargetActionArgs] {
	return pulumix.Val(i)
}

type ScheduledActionTargetActionOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetAction)(nil)).Elem()
}

func (o ScheduledActionTargetActionOutput) ToScheduledActionTargetActionOutput() ScheduledActionTargetActionOutput {
	return o
}

func (o ScheduledActionTargetActionOutput) ToScheduledActionTargetActionOutputWithContext(ctx context.Context) ScheduledActionTargetActionOutput {
	return o
}

func (o ScheduledActionTargetActionOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledActionTargetAction] {
	return pulumix.Output[ScheduledActionTargetAction]{
		OutputState: o.OutputState,
	}
}

// An action that runs a `PauseCluster` API operation. Documented below.
func (o ScheduledActionTargetActionOutput) PauseCluster() pulumix.GPtrOutput[ScheduledActionTargetActionPauseCluster, ScheduledActionTargetActionPauseClusterOutput] {
	value := pulumix.Apply[ScheduledActionTargetAction](o, func(v ScheduledActionTargetAction) *ScheduledActionTargetActionPauseCluster { return v.PauseCluster })
	return pulumix.GPtrOutput[ScheduledActionTargetActionPauseCluster, ScheduledActionTargetActionPauseClusterOutput]{OutputState: value.OutputState}
}

// An action that runs a `ResizeCluster` API operation. Documented below.
func (o ScheduledActionTargetActionOutput) ResizeCluster() pulumix.GPtrOutput[ScheduledActionTargetActionResizeCluster, ScheduledActionTargetActionResizeClusterOutput] {
	value := pulumix.Apply[ScheduledActionTargetAction](o, func(v ScheduledActionTargetAction) *ScheduledActionTargetActionResizeCluster { return v.ResizeCluster })
	return pulumix.GPtrOutput[ScheduledActionTargetActionResizeCluster, ScheduledActionTargetActionResizeClusterOutput]{OutputState: value.OutputState}
}

// An action that runs a `ResumeCluster` API operation. Documented below.
func (o ScheduledActionTargetActionOutput) ResumeCluster() pulumix.GPtrOutput[ScheduledActionTargetActionResumeCluster, ScheduledActionTargetActionResumeClusterOutput] {
	value := pulumix.Apply[ScheduledActionTargetAction](o, func(v ScheduledActionTargetAction) *ScheduledActionTargetActionResumeCluster { return v.ResumeCluster })
	return pulumix.GPtrOutput[ScheduledActionTargetActionResumeCluster, ScheduledActionTargetActionResumeClusterOutput]{OutputState: value.OutputState}
}

type ScheduledActionTargetActionPauseCluster struct {
	// The identifier of the cluster to be paused.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
}

type ScheduledActionTargetActionPauseClusterArgs struct {
	// The identifier of the cluster to be paused.
	ClusterIdentifier pulumix.Input[string] `pulumi:"clusterIdentifier"`
}

func (ScheduledActionTargetActionPauseClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionPauseCluster)(nil)).Elem()
}

func (i ScheduledActionTargetActionPauseClusterArgs) ToScheduledActionTargetActionPauseClusterOutput() ScheduledActionTargetActionPauseClusterOutput {
	return i.ToScheduledActionTargetActionPauseClusterOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionPauseClusterArgs) ToScheduledActionTargetActionPauseClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionPauseClusterOutput)
}

func (i *ScheduledActionTargetActionPauseClusterArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduledActionTargetActionPauseClusterArgs] {
	return pulumix.Val(i)
}

type ScheduledActionTargetActionPauseClusterOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionPauseClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionPauseCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToScheduledActionTargetActionPauseClusterOutput() ScheduledActionTargetActionPauseClusterOutput {
	return o
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToScheduledActionTargetActionPauseClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionPauseClusterOutput {
	return o
}

func (o ScheduledActionTargetActionPauseClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledActionTargetActionPauseCluster] {
	return pulumix.Output[ScheduledActionTargetActionPauseCluster]{
		OutputState: o.OutputState,
	}
}

// The identifier of the cluster to be paused.
func (o ScheduledActionTargetActionPauseClusterOutput) ClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ScheduledActionTargetActionPauseCluster](o, func(v ScheduledActionTargetActionPauseCluster) string { return v.ClusterIdentifier })
}

type ScheduledActionTargetActionResizeCluster struct {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
	Classic *bool `pulumi:"classic"`
	// The unique identifier for the cluster to resize.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The new cluster type for the specified cluster.
	ClusterType *string `pulumi:"clusterType"`
	// The new node type for the nodes you are adding.
	NodeType *string `pulumi:"nodeType"`
	// The new number of nodes for the cluster.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
}

type ScheduledActionTargetActionResizeClusterArgs struct {
	// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
	Classic pulumix.Input[*bool] `pulumi:"classic"`
	// The unique identifier for the cluster to resize.
	ClusterIdentifier pulumix.Input[string] `pulumi:"clusterIdentifier"`
	// The new cluster type for the specified cluster.
	ClusterType pulumix.Input[*string] `pulumi:"clusterType"`
	// The new node type for the nodes you are adding.
	NodeType pulumix.Input[*string] `pulumi:"nodeType"`
	// The new number of nodes for the cluster.
	NumberOfNodes pulumix.Input[*int] `pulumi:"numberOfNodes"`
}

func (ScheduledActionTargetActionResizeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResizeCluster)(nil)).Elem()
}

func (i ScheduledActionTargetActionResizeClusterArgs) ToScheduledActionTargetActionResizeClusterOutput() ScheduledActionTargetActionResizeClusterOutput {
	return i.ToScheduledActionTargetActionResizeClusterOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionResizeClusterArgs) ToScheduledActionTargetActionResizeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResizeClusterOutput)
}

func (i *ScheduledActionTargetActionResizeClusterArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduledActionTargetActionResizeClusterArgs] {
	return pulumix.Val(i)
}

type ScheduledActionTargetActionResizeClusterOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionResizeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResizeCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToScheduledActionTargetActionResizeClusterOutput() ScheduledActionTargetActionResizeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToScheduledActionTargetActionResizeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResizeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResizeClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledActionTargetActionResizeCluster] {
	return pulumix.Output[ScheduledActionTargetActionResizeCluster]{
		OutputState: o.OutputState,
	}
}

// A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
func (o ScheduledActionTargetActionResizeClusterOutput) Classic() pulumix.Output[*bool] {
	return pulumix.Apply[ScheduledActionTargetActionResizeCluster](o, func(v ScheduledActionTargetActionResizeCluster) *bool { return v.Classic })
}

// The unique identifier for the cluster to resize.
func (o ScheduledActionTargetActionResizeClusterOutput) ClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ScheduledActionTargetActionResizeCluster](o, func(v ScheduledActionTargetActionResizeCluster) string { return v.ClusterIdentifier })
}

// The new cluster type for the specified cluster.
func (o ScheduledActionTargetActionResizeClusterOutput) ClusterType() pulumix.Output[*string] {
	return pulumix.Apply[ScheduledActionTargetActionResizeCluster](o, func(v ScheduledActionTargetActionResizeCluster) *string { return v.ClusterType })
}

// The new node type for the nodes you are adding.
func (o ScheduledActionTargetActionResizeClusterOutput) NodeType() pulumix.Output[*string] {
	return pulumix.Apply[ScheduledActionTargetActionResizeCluster](o, func(v ScheduledActionTargetActionResizeCluster) *string { return v.NodeType })
}

// The new number of nodes for the cluster.
func (o ScheduledActionTargetActionResizeClusterOutput) NumberOfNodes() pulumix.Output[*int] {
	return pulumix.Apply[ScheduledActionTargetActionResizeCluster](o, func(v ScheduledActionTargetActionResizeCluster) *int { return v.NumberOfNodes })
}

type ScheduledActionTargetActionResumeCluster struct {
	// The identifier of the cluster to be resumed.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
}

type ScheduledActionTargetActionResumeClusterArgs struct {
	// The identifier of the cluster to be resumed.
	ClusterIdentifier pulumix.Input[string] `pulumi:"clusterIdentifier"`
}

func (ScheduledActionTargetActionResumeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResumeCluster)(nil)).Elem()
}

func (i ScheduledActionTargetActionResumeClusterArgs) ToScheduledActionTargetActionResumeClusterOutput() ScheduledActionTargetActionResumeClusterOutput {
	return i.ToScheduledActionTargetActionResumeClusterOutputWithContext(context.Background())
}

func (i ScheduledActionTargetActionResumeClusterArgs) ToScheduledActionTargetActionResumeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionTargetActionResumeClusterOutput)
}

func (i *ScheduledActionTargetActionResumeClusterArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduledActionTargetActionResumeClusterArgs] {
	return pulumix.Val(i)
}

type ScheduledActionTargetActionResumeClusterOutput struct{ *pulumi.OutputState }

func (ScheduledActionTargetActionResumeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionTargetActionResumeCluster)(nil)).Elem()
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToScheduledActionTargetActionResumeClusterOutput() ScheduledActionTargetActionResumeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToScheduledActionTargetActionResumeClusterOutputWithContext(ctx context.Context) ScheduledActionTargetActionResumeClusterOutput {
	return o
}

func (o ScheduledActionTargetActionResumeClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledActionTargetActionResumeCluster] {
	return pulumix.Output[ScheduledActionTargetActionResumeCluster]{
		OutputState: o.OutputState,
	}
}

// The identifier of the cluster to be resumed.
func (o ScheduledActionTargetActionResumeClusterOutput) ClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ScheduledActionTargetActionResumeCluster](o, func(v ScheduledActionTargetActionResumeCluster) string { return v.ClusterIdentifier })
}

type GetClusterClusterNode struct {
	// Whether the node is a leader node or a compute node
	NodeRole string `pulumi:"nodeRole"`
	// Private IP address of a node within a cluster
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP address of a node within a cluster
	PublicIpAddress string `pulumi:"publicIpAddress"`
}

type GetClusterClusterNodeArgs struct {
	// Whether the node is a leader node or a compute node
	NodeRole pulumix.Input[string] `pulumi:"nodeRole"`
	// Private IP address of a node within a cluster
	PrivateIpAddress pulumix.Input[string] `pulumi:"privateIpAddress"`
	// Public IP address of a node within a cluster
	PublicIpAddress pulumix.Input[string] `pulumi:"publicIpAddress"`
}

func (GetClusterClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterClusterNode)(nil)).Elem()
}

func (i GetClusterClusterNodeArgs) ToGetClusterClusterNodeOutput() GetClusterClusterNodeOutput {
	return i.ToGetClusterClusterNodeOutputWithContext(context.Background())
}

func (i GetClusterClusterNodeArgs) ToGetClusterClusterNodeOutputWithContext(ctx context.Context) GetClusterClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterClusterNodeOutput)
}

func (i *GetClusterClusterNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterClusterNodeArgs] {
	return pulumix.Val(i)
}

type GetClusterClusterNodeOutput struct{ *pulumi.OutputState }

func (GetClusterClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterClusterNode)(nil)).Elem()
}

func (o GetClusterClusterNodeOutput) ToGetClusterClusterNodeOutput() GetClusterClusterNodeOutput {
	return o
}

func (o GetClusterClusterNodeOutput) ToGetClusterClusterNodeOutputWithContext(ctx context.Context) GetClusterClusterNodeOutput {
	return o
}

func (o GetClusterClusterNodeOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterClusterNode] {
	return pulumix.Output[GetClusterClusterNode]{
		OutputState: o.OutputState,
	}
}

// Whether the node is a leader node or a compute node
func (o GetClusterClusterNodeOutput) NodeRole() pulumix.Output[string] {
	return pulumix.Apply[GetClusterClusterNode](o, func(v GetClusterClusterNode) string { return v.NodeRole })
}

// Private IP address of a node within a cluster
func (o GetClusterClusterNodeOutput) PrivateIpAddress() pulumix.Output[string] {
	return pulumix.Apply[GetClusterClusterNode](o, func(v GetClusterClusterNode) string { return v.PrivateIpAddress })
}

// Public IP address of a node within a cluster
func (o GetClusterClusterNodeOutput) PublicIpAddress() pulumix.Output[string] {
	return pulumix.Apply[GetClusterClusterNode](o, func(v GetClusterClusterNode) string { return v.PublicIpAddress })
}

func init() {
	pulumi.RegisterOutputType(ClusterClusterNodeOutput{})
	pulumi.RegisterOutputType(ClusterLoggingOutput{})
	pulumi.RegisterOutputType(ClusterSnapshotCopyOutput{})
	pulumi.RegisterOutputType(EndpointAccessVpcEndpointOutput{})
	pulumi.RegisterOutputType(EndpointAccessVpcEndpointNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionPauseClusterOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionResizeClusterOutput{})
	pulumi.RegisterOutputType(ScheduledActionTargetActionResumeClusterOutput{})
	pulumi.RegisterOutputType(GetClusterClusterNodeOutput{})
}
