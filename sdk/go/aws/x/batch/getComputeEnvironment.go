// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Batch Compute Environment data source allows access to details of a specific
// compute environment within AWS Batch.
func LookupComputeEnvironment(ctx *pulumi.Context, args *LookupComputeEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupComputeEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeEnvironmentResult
	err := ctx.Invoke("aws:batch/getComputeEnvironment:getComputeEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeEnvironment.
type LookupComputeEnvironmentArgs struct {
	// Name of the Batch Compute Environment
	ComputeEnvironmentName string `pulumi:"computeEnvironmentName"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getComputeEnvironment.
type LookupComputeEnvironmentResult struct {
	// ARN of the compute environment.
	Arn                    string `pulumi:"arn"`
	ComputeEnvironmentName string `pulumi:"computeEnvironmentName"`
	// ARN of the underlying Amazon ECS cluster used by the compute environment.
	EcsClusterArn string `pulumi:"ecsClusterArn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole string `pulumi:"serviceRole"`
	// State of the compute environment (for example, `ENABLED` or `DISABLED`). If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.
	State string `pulumi:"state"`
	// Current status of the compute environment (for example, `CREATING` or `VALID`).
	Status string `pulumi:"status"`
	// Short, human-readable string to provide additional details about the current status of the compute environment.
	StatusReason string `pulumi:"statusReason"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
	// Type of the compute environment (for example, `MANAGED` or `UNMANAGED`).
	Type string `pulumi:"type"`
}

func LookupComputeEnvironmentOutput(ctx *pulumi.Context, args LookupComputeEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupComputeEnvironmentResultOutput {
	outputResult := pulumix.ApplyErr[*LookupComputeEnvironmentArgs](args.ToOutput(), func(plainArgs *LookupComputeEnvironmentArgs) (*LookupComputeEnvironmentResult, error) {
		return LookupComputeEnvironment(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupComputeEnvironmentResultOutput, *LookupComputeEnvironmentResult](outputResult)
}

// A collection of arguments for invoking getComputeEnvironment.
type LookupComputeEnvironmentOutputArgs struct {
	// Name of the Batch Compute Environment
	ComputeEnvironmentName pulumix.Input[string] `pulumi:"computeEnvironmentName"`
	// Key-value map of resource tags
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupComputeEnvironmentOutputArgs) ToOutput() pulumix.Output[*LookupComputeEnvironmentArgs] {
	allArgs := pulumix.All(
		args.ComputeEnvironmentName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupComputeEnvironmentArgs {
		return &LookupComputeEnvironmentArgs{
			ComputeEnvironmentName: resolvedArgs[0].(string),
			Tags:                   resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupComputeEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupComputeEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeEnvironmentResult)(nil)).Elem()
}

func (o LookupComputeEnvironmentResultOutput) ToOutput(context.Context) pulumix.Output[*LookupComputeEnvironmentResult] {
	return pulumix.Output[*LookupComputeEnvironmentResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupComputeEnvironmentResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.Arn })
}

func (o LookupComputeEnvironmentResultOutput) ComputeEnvironmentName() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.ComputeEnvironmentName })
}

func (o LookupComputeEnvironmentResultOutput) EcsClusterArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.EcsClusterArn })
}

func (o LookupComputeEnvironmentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.Id })
}

func (o LookupComputeEnvironmentResultOutput) ServiceRole() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.ServiceRole })
}

func (o LookupComputeEnvironmentResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.State })
}

func (o LookupComputeEnvironmentResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.Status })
}

func (o LookupComputeEnvironmentResultOutput) StatusReason() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.StatusReason })
}

func (o LookupComputeEnvironmentResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupComputeEnvironmentResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupComputeEnvironmentResult](o, func(v *LookupComputeEnvironmentResult) string { return v.Type })
}
