// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Control.
type Control struct {
	pulumi.CustomResourceState

	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions pulumix.Output[*string] `pulumi:"actionPlanInstructions"`
	// Title of the action plan for remediating the control.
	ActionPlanTitle pulumix.Output[*string] `pulumi:"actionPlanTitle"`
	// Amazon Resource Name (ARN) of the control.
	// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources pulumix.GArrayOutput[ControlControlMappingSource, ControlControlMappingSourceOutput] `pulumi:"controlMappingSources"`
	// Description of the control.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the control.
	Name pulumix.Output[string] `pulumi:"name"`
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Steps to follow to determine if the control is satisfied.
	TestingInformation pulumix.Output[*string] `pulumi:"testingInformation"`
	// Type of control, such as a custom control or a standard control.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewControl registers a new resource with the given unique name, arguments, and options.
func NewControl(ctx *pulumi.Context,
	name string, args *ControlArgs, opts ...pulumi.ResourceOption) (*Control, error) {
	if args == nil {
		args = &ControlArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Control
	err := ctx.RegisterResource("aws:auditmanager/control:Control", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControl gets an existing Control resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControlState, opts ...pulumi.ResourceOption) (*Control, error) {
	var resource Control
	err := ctx.ReadResource("aws:auditmanager/control:Control", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Control resources.
type controlState struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions *string `pulumi:"actionPlanInstructions"`
	// Title of the action plan for remediating the control.
	ActionPlanTitle *string `pulumi:"actionPlanTitle"`
	// Amazon Resource Name (ARN) of the control.
	// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
	Arn *string `pulumi:"arn"`
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources []ControlControlMappingSource `pulumi:"controlMappingSources"`
	// Description of the control.
	Description *string `pulumi:"description"`
	// Name of the control.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Steps to follow to determine if the control is satisfied.
	TestingInformation *string `pulumi:"testingInformation"`
	// Type of control, such as a custom control or a standard control.
	Type *string `pulumi:"type"`
}

type ControlState struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions pulumix.Input[*string]
	// Title of the action plan for remediating the control.
	ActionPlanTitle pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the control.
	// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
	Arn pulumix.Input[*string]
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources pulumix.Input[[]*ControlControlMappingSourceArgs]
	// Description of the control.
	Description pulumix.Input[*string]
	// Name of the control.
	Name pulumix.Input[*string]
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Steps to follow to determine if the control is satisfied.
	TestingInformation pulumix.Input[*string]
	// Type of control, such as a custom control or a standard control.
	Type pulumix.Input[*string]
}

func (ControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*controlState)(nil)).Elem()
}

type controlArgs struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions *string `pulumi:"actionPlanInstructions"`
	// Title of the action plan for remediating the control.
	ActionPlanTitle *string `pulumi:"actionPlanTitle"`
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources []ControlControlMappingSource `pulumi:"controlMappingSources"`
	// Description of the control.
	Description *string `pulumi:"description"`
	// Name of the control.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Steps to follow to determine if the control is satisfied.
	TestingInformation *string `pulumi:"testingInformation"`
}

// The set of arguments for constructing a Control resource.
type ControlArgs struct {
	// Recommended actions to carry out if the control isn't fulfilled.
	ActionPlanInstructions pulumix.Input[*string]
	// Title of the action plan for remediating the control.
	ActionPlanTitle pulumix.Input[*string]
	// Data mapping sources. See `controlMappingSources` below.
	//
	// The following arguments are optional:
	ControlMappingSources pulumix.Input[[]*ControlControlMappingSourceArgs]
	// Description of the control.
	Description pulumix.Input[*string]
	// Name of the control.
	Name pulumix.Input[*string]
	// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Steps to follow to determine if the control is satisfied.
	TestingInformation pulumix.Input[*string]
}

func (ControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlArgs)(nil)).Elem()
}

type ControlOutput struct{ *pulumi.OutputState }

func (ControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Control)(nil)).Elem()
}

func (o ControlOutput) ToControlOutput() ControlOutput {
	return o
}

func (o ControlOutput) ToControlOutputWithContext(ctx context.Context) ControlOutput {
	return o
}

func (o ControlOutput) ToOutput(ctx context.Context) pulumix.Output[Control] {
	return pulumix.Output[Control]{
		OutputState: o.OutputState,
	}
}

// Recommended actions to carry out if the control isn't fulfilled.
func (o ControlOutput) ActionPlanInstructions() pulumix.Output[*string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[*string] { return v.ActionPlanInstructions })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Title of the action plan for remediating the control.
func (o ControlOutput) ActionPlanTitle() pulumix.Output[*string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[*string] { return v.ActionPlanTitle })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Amazon Resource Name (ARN) of the control.
// * `control_mapping_sources.*.source_id` - Unique identifier for the source.
func (o ControlOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Data mapping sources. See `controlMappingSources` below.
//
// The following arguments are optional:
func (o ControlOutput) ControlMappingSources() pulumix.GArrayOutput[ControlControlMappingSource, ControlControlMappingSourceOutput] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.GArrayOutput[ControlControlMappingSource, ControlControlMappingSourceOutput] {
		return v.ControlMappingSources
	})
	unwrapped := pulumix.Flatten[[]ControlControlMappingSource, pulumix.GArrayOutput[ControlControlMappingSource, ControlControlMappingSourceOutput]](value)
	return pulumix.GArrayOutput[ControlControlMappingSource, ControlControlMappingSourceOutput]{OutputState: unwrapped.OutputState}
}

// Description of the control.
func (o ControlOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the control.
func (o ControlOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the control. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ControlOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ControlOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Steps to follow to determine if the control is satisfied.
func (o ControlOutput) TestingInformation() pulumix.Output[*string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[*string] { return v.TestingInformation })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Type of control, such as a custom control or a standard control.
func (o ControlOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Control](o, func(v Control) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ControlOutput{})
}
