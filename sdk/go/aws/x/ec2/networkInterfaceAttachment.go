// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attach an Elastic network interface (ENI) resource with EC2 instance.
type NetworkInterfaceAttachment struct {
	pulumi.CustomResourceState

	// The ENI Attachment ID.
	AttachmentId pulumix.Output[string] `pulumi:"attachmentId"`
	// Network interface index (int).
	DeviceIndex pulumix.Output[int] `pulumi:"deviceIndex"`
	// Instance ID to attach.
	InstanceId pulumix.Output[string] `pulumi:"instanceId"`
	// ENI ID to attach.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// The status of the Network Interface Attachment.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewNetworkInterfaceAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceAttachment(ctx *pulumi.Context,
	name string, args *NetworkInterfaceAttachmentArgs, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceIndex == nil {
		return nil, errors.New("invalid value for required argument 'DeviceIndex'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterfaceAttachment
	err := ctx.RegisterResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfaceAttachment gets an existing NetworkInterfaceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceAttachmentState, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttachment, error) {
	var resource NetworkInterfaceAttachment
	err := ctx.ReadResource("aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfaceAttachment resources.
type networkInterfaceAttachmentState struct {
	// The ENI Attachment ID.
	AttachmentId *string `pulumi:"attachmentId"`
	// Network interface index (int).
	DeviceIndex *int `pulumi:"deviceIndex"`
	// Instance ID to attach.
	InstanceId *string `pulumi:"instanceId"`
	// ENI ID to attach.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The status of the Network Interface Attachment.
	Status *string `pulumi:"status"`
}

type NetworkInterfaceAttachmentState struct {
	// The ENI Attachment ID.
	AttachmentId pulumix.Input[*string]
	// Network interface index (int).
	DeviceIndex pulumix.Input[*int]
	// Instance ID to attach.
	InstanceId pulumix.Input[*string]
	// ENI ID to attach.
	NetworkInterfaceId pulumix.Input[*string]
	// The status of the Network Interface Attachment.
	Status pulumix.Input[*string]
}

func (NetworkInterfaceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachmentState)(nil)).Elem()
}

type networkInterfaceAttachmentArgs struct {
	// Network interface index (int).
	DeviceIndex int `pulumi:"deviceIndex"`
	// Instance ID to attach.
	InstanceId string `pulumi:"instanceId"`
	// ENI ID to attach.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
}

// The set of arguments for constructing a NetworkInterfaceAttachment resource.
type NetworkInterfaceAttachmentArgs struct {
	// Network interface index (int).
	DeviceIndex pulumix.Input[int]
	// Instance ID to attach.
	InstanceId pulumix.Input[string]
	// ENI ID to attach.
	NetworkInterfaceId pulumix.Input[string]
}

func (NetworkInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachmentArgs)(nil)).Elem()
}

type NetworkInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceAttachment)(nil)).Elem()
}

func (o NetworkInterfaceAttachmentOutput) ToNetworkInterfaceAttachmentOutput() NetworkInterfaceAttachmentOutput {
	return o
}

func (o NetworkInterfaceAttachmentOutput) ToNetworkInterfaceAttachmentOutputWithContext(ctx context.Context) NetworkInterfaceAttachmentOutput {
	return o
}

func (o NetworkInterfaceAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkInterfaceAttachment] {
	return pulumix.Output[NetworkInterfaceAttachment]{
		OutputState: o.OutputState,
	}
}

// The ENI Attachment ID.
func (o NetworkInterfaceAttachmentOutput) AttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterfaceAttachment](o, func(v NetworkInterfaceAttachment) pulumix.Output[string] { return v.AttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Network interface index (int).
func (o NetworkInterfaceAttachmentOutput) DeviceIndex() pulumix.Output[int] {
	value := pulumix.Apply[NetworkInterfaceAttachment](o, func(v NetworkInterfaceAttachment) pulumix.Output[int] { return v.DeviceIndex })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Instance ID to attach.
func (o NetworkInterfaceAttachmentOutput) InstanceId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterfaceAttachment](o, func(v NetworkInterfaceAttachment) pulumix.Output[string] { return v.InstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ENI ID to attach.
func (o NetworkInterfaceAttachmentOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterfaceAttachment](o, func(v NetworkInterfaceAttachment) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the Network Interface Attachment.
func (o NetworkInterfaceAttachmentOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[NetworkInterfaceAttachment](o, func(v NetworkInterfaceAttachment) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NetworkInterfaceAttachmentOutput{})
}
