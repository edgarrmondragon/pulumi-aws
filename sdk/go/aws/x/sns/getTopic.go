// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARN of a topic in AWS Simple Notification
// Service (SNS). By using this data source, you can reference SNS topics
// without having to hard code the ARNs as input.
func LookupTopic(ctx *pulumi.Context, args *LookupTopicArgs, opts ...pulumi.InvokeOption) (*LookupTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTopicResult
	err := ctx.Invoke("aws:sns/getTopic:getTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopic.
type LookupTopicArgs struct {
	// Friendly name of the topic to match.
	Name string `pulumi:"name"`
}

// A collection of values returned by getTopic.
type LookupTopicResult struct {
	// ARN of the found topic, suitable for referencing in other resources that support SNS topics.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupTopicOutput(ctx *pulumi.Context, args LookupTopicOutputArgs, opts ...pulumi.InvokeOption) LookupTopicResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTopicArgs](args.ToOutput(), func(plainArgs *LookupTopicArgs) (*LookupTopicResult, error) {
		return LookupTopic(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTopicResultOutput, *LookupTopicResult](outputResult)
}

// A collection of arguments for invoking getTopic.
type LookupTopicOutputArgs struct {
	// Friendly name of the topic to match.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupTopicOutputArgs) ToOutput() pulumix.Output[*LookupTopicArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTopicArgs {
		return &LookupTopicArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupTopicResultOutput struct{ *pulumi.OutputState }

func (LookupTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicResult)(nil)).Elem()
}

func (o LookupTopicResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTopicResult] {
	return pulumix.Output[*LookupTopicResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTopicResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTopicResult](o, func(v *LookupTopicResult) string { return v.Arn })
}

func (o LookupTopicResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTopicResult](o, func(v *LookupTopicResult) string { return v.Id })
}

func (o LookupTopicResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupTopicResult](o, func(v *LookupTopicResult) string { return v.Name })
}
