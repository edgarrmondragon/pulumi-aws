// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a DB Proxy.
func LookupProxy(ctx *pulumi.Context, args *LookupProxyArgs, opts ...pulumi.InvokeOption) (*LookupProxyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProxyResult
	err := ctx.Invoke("aws:rds/getProxy:getProxy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProxy.
type LookupProxyArgs struct {
	// Name of the DB proxy.
	Name string `pulumi:"name"`
}

// A collection of values returned by getProxy.
type LookupProxyResult struct {
	// ARN of the DB Proxy.
	Arn string `pulumi:"arn"`
	// Configuration(s) with authorization mechanisms to connect to the associated instance or cluster.
	Auths []GetProxyAuth `pulumi:"auths"`
	// Whether the proxy includes detailed information about SQL statements in its logs.
	DebugLogging bool `pulumi:"debugLogging"`
	// Endpoint that you can use to connect to the DB proxy.
	Endpoint string `pulumi:"endpoint"`
	// Kinds of databases that the proxy can connect to.
	EngineFamily string `pulumi:"engineFamily"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Number of seconds a connection to the proxy can have no activity before the proxy drops the client connection.
	IdleClientTimeout int    `pulumi:"idleClientTimeout"`
	Name              string `pulumi:"name"`
	// Whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
	RequireTls bool `pulumi:"requireTls"`
	// ARN for the IAM role that the proxy uses to access Amazon Secrets Manager.
	RoleArn string `pulumi:"roleArn"`
	// Provides the VPC ID of the DB proxy.
	VpcId string `pulumi:"vpcId"`
	// Provides a list of VPC security groups that the proxy belongs to.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// EC2 subnet IDs for the proxy.
	VpcSubnetIds []string `pulumi:"vpcSubnetIds"`
}

func LookupProxyOutput(ctx *pulumi.Context, args LookupProxyOutputArgs, opts ...pulumi.InvokeOption) LookupProxyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupProxyArgs](args.ToOutput(), func(plainArgs *LookupProxyArgs) (*LookupProxyResult, error) {
		return LookupProxy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupProxyResultOutput, *LookupProxyResult](outputResult)
}

// A collection of arguments for invoking getProxy.
type LookupProxyOutputArgs struct {
	// Name of the DB proxy.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupProxyOutputArgs) ToOutput() pulumix.Output[*LookupProxyArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupProxyArgs {
		return &LookupProxyArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupProxyResultOutput struct{ *pulumi.OutputState }

func (LookupProxyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProxyResult)(nil)).Elem()
}

func (o LookupProxyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupProxyResult] {
	return pulumix.Output[*LookupProxyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupProxyResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.Arn })
}

func (o LookupProxyResultOutput) Auths() pulumix.GArrayOutput[GetProxyAuth, GetProxyAuthOutput] {
	value := pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) []GetProxyAuth { return v.Auths })
	return pulumix.GArrayOutput[GetProxyAuth, GetProxyAuthOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupProxyResultOutput) DebugLogging() pulumix.Output[bool] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) bool { return v.DebugLogging })
}

func (o LookupProxyResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.Endpoint })
}

func (o LookupProxyResultOutput) EngineFamily() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.EngineFamily })
}

func (o LookupProxyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.Id })
}

func (o LookupProxyResultOutput) IdleClientTimeout() pulumix.Output[int] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) int { return v.IdleClientTimeout })
}

func (o LookupProxyResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.Name })
}

func (o LookupProxyResultOutput) RequireTls() pulumix.Output[bool] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) bool { return v.RequireTls })
}

func (o LookupProxyResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.RoleArn })
}

func (o LookupProxyResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) string { return v.VpcId })
}

func (o LookupProxyResultOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) []string { return v.VpcSecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupProxyResultOutput) VpcSubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupProxyResult](o, func(v *LookupProxyResult) []string { return v.VpcSubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
