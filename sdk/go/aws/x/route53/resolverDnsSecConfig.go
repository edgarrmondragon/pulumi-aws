// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route 53 Resolver DNSSEC config resource.
type ResolverDnsSecConfig struct {
	pulumi.CustomResourceState

	// The ARN for a configuration for DNSSEC validation.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.
	ValidationStatus pulumix.Output[string] `pulumi:"validationStatus"`
}

// NewResolverDnsSecConfig registers a new resource with the given unique name, arguments, and options.
func NewResolverDnsSecConfig(ctx *pulumi.Context,
	name string, args *ResolverDnsSecConfigArgs, opts ...pulumi.ResourceOption) (*ResolverDnsSecConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverDnsSecConfig
	err := ctx.RegisterResource("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverDnsSecConfig gets an existing ResolverDnsSecConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverDnsSecConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverDnsSecConfigState, opts ...pulumi.ResourceOption) (*ResolverDnsSecConfig, error) {
	var resource ResolverDnsSecConfig
	err := ctx.ReadResource("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverDnsSecConfig resources.
type resolverDnsSecConfigState struct {
	// The ARN for a configuration for DNSSEC validation.
	Arn *string `pulumi:"arn"`
	// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
	OwnerId *string `pulumi:"ownerId"`
	// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
	ResourceId *string `pulumi:"resourceId"`
	// The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.
	ValidationStatus *string `pulumi:"validationStatus"`
}

type ResolverDnsSecConfigState struct {
	// The ARN for a configuration for DNSSEC validation.
	Arn pulumix.Input[*string]
	// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
	OwnerId pulumix.Input[*string]
	// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
	ResourceId pulumix.Input[*string]
	// The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.
	ValidationStatus pulumix.Input[*string]
}

func (ResolverDnsSecConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverDnsSecConfigState)(nil)).Elem()
}

type resolverDnsSecConfigArgs struct {
	// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResolverDnsSecConfig resource.
type ResolverDnsSecConfigArgs struct {
	// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
	ResourceId pulumix.Input[string]
}

func (ResolverDnsSecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverDnsSecConfigArgs)(nil)).Elem()
}

type ResolverDnsSecConfigOutput struct{ *pulumi.OutputState }

func (ResolverDnsSecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverDnsSecConfig)(nil)).Elem()
}

func (o ResolverDnsSecConfigOutput) ToResolverDnsSecConfigOutput() ResolverDnsSecConfigOutput {
	return o
}

func (o ResolverDnsSecConfigOutput) ToResolverDnsSecConfigOutputWithContext(ctx context.Context) ResolverDnsSecConfigOutput {
	return o
}

func (o ResolverDnsSecConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverDnsSecConfig] {
	return pulumix.Output[ResolverDnsSecConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN for a configuration for DNSSEC validation.
func (o ResolverDnsSecConfigOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ResolverDnsSecConfig](o, func(v ResolverDnsSecConfig) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
func (o ResolverDnsSecConfigOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverDnsSecConfig](o, func(v ResolverDnsSecConfig) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
func (o ResolverDnsSecConfigOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverDnsSecConfig](o, func(v ResolverDnsSecConfig) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.
func (o ResolverDnsSecConfigOutput) ValidationStatus() pulumix.Output[string] {
	value := pulumix.Apply[ResolverDnsSecConfig](o, func(v ResolverDnsSecConfig) pulumix.Output[string] { return v.ValidationStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResolverDnsSecConfigOutput{})
}
