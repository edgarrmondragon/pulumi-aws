// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
// Any new Site-to-Site VPN connection that you create is an [AWS VPN connection](https://docs.aws.amazon.com/vpn/latest/s2svpn/vpn-categories.html).
//
// > **Note:** The CIDR blocks in the arguments `tunnel1InsideCidr` and `tunnel2InsideCidr` must have a prefix of /30 and be a part of a specific range.
// [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
type VpnConnection struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the VPN Connection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ARN of the core network.
	CoreNetworkArn pulumix.Output[string] `pulumi:"coreNetworkArn"`
	// The ARN of the core network attachment.
	CoreNetworkAttachmentArn pulumix.Output[string] `pulumi:"coreNetworkAttachmentArn"`
	// The configuration information for the VPN connection's customer gateway (in the native XML format).
	CustomerGatewayConfiguration pulumix.Output[string] `pulumi:"customerGatewayConfiguration"`
	// The ID of the customer gateway.
	CustomerGatewayId pulumix.Output[string] `pulumi:"customerGatewayId"`
	// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
	EnableAcceleration pulumix.Output[bool] `pulumi:"enableAcceleration"`
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv4NetworkCidr pulumix.Output[string] `pulumi:"localIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv6NetworkCidr pulumix.Output[string] `pulumi:"localIpv6NetworkCidr"`
	// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
	OutsideIpAddressType pulumix.Output[string] `pulumi:"outsideIpAddressType"`
	// The IPv4 CIDR on the AWS side of the VPN connection.
	RemoteIpv4NetworkCidr pulumix.Output[string] `pulumi:"remoteIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	RemoteIpv6NetworkCidr pulumix.Output[string] `pulumi:"remoteIpv6NetworkCidr"`
	// The static routes associated with the VPN connection. Detailed below.
	Routes pulumix.GArrayOutput[VpnConnectionRouteType, VpnConnectionRouteTypeOutput] `pulumi:"routes"`
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly pulumix.Output[bool] `pulumi:"staticRoutesOnly"`
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// When associated with an EC2 Transit Gateway (`transitGatewayId` argument), the attachment ID. See also the `ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
	TransitGatewayAttachmentId pulumix.Output[string] `pulumi:"transitGatewayAttachmentId"`
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId pulumix.Output[*string] `pulumi:"transitGatewayId"`
	// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
	TransportTransitGatewayAttachmentId pulumix.Output[*string] `pulumi:"transportTransitGatewayAttachmentId"`
	// The public IP address of the first VPN tunnel.
	Tunnel1Address pulumix.Output[string] `pulumi:"tunnel1Address"`
	// The bgp asn number of the first VPN tunnel.
	Tunnel1BgpAsn pulumix.Output[string] `pulumi:"tunnel1BgpAsn"`
	// The bgp holdtime of the first VPN tunnel.
	Tunnel1BgpHoldtime pulumix.Output[int] `pulumi:"tunnel1BgpHoldtime"`
	// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
	Tunnel1CgwInsideAddress pulumix.Output[string] `pulumi:"tunnel1CgwInsideAddress"`
	// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel1DpdTimeoutAction pulumix.Output[*string] `pulumi:"tunnel1DpdTimeoutAction"`
	// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel1DpdTimeoutSeconds pulumix.Output[*int] `pulumi:"tunnel1DpdTimeoutSeconds"`
	// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
	Tunnel1EnableTunnelLifecycleControl pulumix.Output[*bool] `pulumi:"tunnel1EnableTunnelLifecycleControl"`
	// The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel1IkeVersions pulumix.ArrayOutput[string] `pulumi:"tunnel1IkeVersions"`
	// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel1InsideCidr pulumix.Output[string] `pulumi:"tunnel1InsideCidr"`
	// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel1InsideIpv6Cidr pulumix.Output[string] `pulumi:"tunnel1InsideIpv6Cidr"`
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel1LogOptions pulumix.GPtrOutput[VpnConnectionTunnel1LogOptions, VpnConnectionTunnel1LogOptionsOutput] `pulumi:"tunnel1LogOptions"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel1Phase1DhGroupNumbers pulumix.ArrayOutput[int] `pulumi:"tunnel1Phase1DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase1EncryptionAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel1Phase1EncryptionAlgorithms"`
	// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase1IntegrityAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel1Phase1IntegrityAlgorithms"`
	// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel1Phase1LifetimeSeconds pulumix.Output[*int] `pulumi:"tunnel1Phase1LifetimeSeconds"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel1Phase2DhGroupNumbers pulumix.ArrayOutput[int] `pulumi:"tunnel1Phase2DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase2EncryptionAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel1Phase2EncryptionAlgorithms"`
	// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase2IntegrityAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel1Phase2IntegrityAlgorithms"`
	// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel1Phase2LifetimeSeconds pulumix.Output[*int] `pulumi:"tunnel1Phase2LifetimeSeconds"`
	// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel1PresharedKey pulumix.Output[string] `pulumi:"tunnel1PresharedKey"`
	// The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel1RekeyFuzzPercentage pulumix.Output[*int] `pulumi:"tunnel1RekeyFuzzPercentage"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
	Tunnel1RekeyMarginTimeSeconds pulumix.Output[*int] `pulumi:"tunnel1RekeyMarginTimeSeconds"`
	// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel1ReplayWindowSize pulumix.Output[*int] `pulumi:"tunnel1ReplayWindowSize"`
	// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel1StartupAction pulumix.Output[*string] `pulumi:"tunnel1StartupAction"`
	// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
	Tunnel1VgwInsideAddress pulumix.Output[string] `pulumi:"tunnel1VgwInsideAddress"`
	// The public IP address of the second VPN tunnel.
	Tunnel2Address pulumix.Output[string] `pulumi:"tunnel2Address"`
	// The bgp asn number of the second VPN tunnel.
	Tunnel2BgpAsn pulumix.Output[string] `pulumi:"tunnel2BgpAsn"`
	// The bgp holdtime of the second VPN tunnel.
	Tunnel2BgpHoldtime pulumix.Output[int] `pulumi:"tunnel2BgpHoldtime"`
	// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
	Tunnel2CgwInsideAddress pulumix.Output[string] `pulumi:"tunnel2CgwInsideAddress"`
	// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel2DpdTimeoutAction pulumix.Output[*string] `pulumi:"tunnel2DpdTimeoutAction"`
	// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel2DpdTimeoutSeconds pulumix.Output[*int] `pulumi:"tunnel2DpdTimeoutSeconds"`
	// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
	Tunnel2EnableTunnelLifecycleControl pulumix.Output[*bool] `pulumi:"tunnel2EnableTunnelLifecycleControl"`
	// The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel2IkeVersions pulumix.ArrayOutput[string] `pulumi:"tunnel2IkeVersions"`
	// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel2InsideCidr pulumix.Output[string] `pulumi:"tunnel2InsideCidr"`
	// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel2InsideIpv6Cidr pulumix.Output[string] `pulumi:"tunnel2InsideIpv6Cidr"`
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel2LogOptions pulumix.GPtrOutput[VpnConnectionTunnel2LogOptions, VpnConnectionTunnel2LogOptionsOutput] `pulumi:"tunnel2LogOptions"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel2Phase1DhGroupNumbers pulumix.ArrayOutput[int] `pulumi:"tunnel2Phase1DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase1EncryptionAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel2Phase1EncryptionAlgorithms"`
	// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase1IntegrityAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel2Phase1IntegrityAlgorithms"`
	// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel2Phase1LifetimeSeconds pulumix.Output[*int] `pulumi:"tunnel2Phase1LifetimeSeconds"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel2Phase2DhGroupNumbers pulumix.ArrayOutput[int] `pulumi:"tunnel2Phase2DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase2EncryptionAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel2Phase2EncryptionAlgorithms"`
	// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase2IntegrityAlgorithms pulumix.ArrayOutput[string] `pulumi:"tunnel2Phase2IntegrityAlgorithms"`
	// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel2Phase2LifetimeSeconds pulumix.Output[*int] `pulumi:"tunnel2Phase2LifetimeSeconds"`
	// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel2PresharedKey pulumix.Output[string] `pulumi:"tunnel2PresharedKey"`
	// The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel2RekeyFuzzPercentage pulumix.Output[*int] `pulumi:"tunnel2RekeyFuzzPercentage"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
	Tunnel2RekeyMarginTimeSeconds pulumix.Output[*int] `pulumi:"tunnel2RekeyMarginTimeSeconds"`
	// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel2ReplayWindowSize pulumix.Output[*int] `pulumi:"tunnel2ReplayWindowSize"`
	// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel2StartupAction pulumix.Output[*string] `pulumi:"tunnel2StartupAction"`
	// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
	Tunnel2VgwInsideAddress pulumix.Output[string] `pulumi:"tunnel2VgwInsideAddress"`
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
	TunnelInsideIpVersion pulumix.Output[string] `pulumi:"tunnelInsideIpVersion"`
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type pulumix.Output[string] `pulumi:"type"`
	// Telemetry for the VPN tunnels. Detailed below.
	VgwTelemetries pulumix.GArrayOutput[VpnConnectionVgwTelemetry, VpnConnectionVgwTelemetryOutput] `pulumi:"vgwTelemetries"`
	// The ID of the Virtual Private Gateway.
	VpnGatewayId pulumix.Output[*string] `pulumi:"vpnGatewayId"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Tunnel1PresharedKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.Tunnel1PresharedKey.ToOutput(ctx.Context()).Untyped())
		args.Tunnel1PresharedKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.Tunnel2PresharedKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.Tunnel2PresharedKey.ToOutput(ctx.Context()).Untyped())
		args.Tunnel2PresharedKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"customerGatewayConfiguration",
		"tunnel1PresharedKey",
		"tunnel2PresharedKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("aws:ec2/vpnConnection:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("aws:ec2/vpnConnection:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
	// Amazon Resource Name (ARN) of the VPN Connection.
	Arn *string `pulumi:"arn"`
	// The ARN of the core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// The ARN of the core network attachment.
	CoreNetworkAttachmentArn *string `pulumi:"coreNetworkAttachmentArn"`
	// The configuration information for the VPN connection's customer gateway (in the native XML format).
	CustomerGatewayConfiguration *string `pulumi:"customerGatewayConfiguration"`
	// The ID of the customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv4NetworkCidr *string `pulumi:"localIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv6NetworkCidr *string `pulumi:"localIpv6NetworkCidr"`
	// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
	OutsideIpAddressType *string `pulumi:"outsideIpAddressType"`
	// The IPv4 CIDR on the AWS side of the VPN connection.
	RemoteIpv4NetworkCidr *string `pulumi:"remoteIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	RemoteIpv6NetworkCidr *string `pulumi:"remoteIpv6NetworkCidr"`
	// The static routes associated with the VPN connection. Detailed below.
	Routes []VpnConnectionRouteType `pulumi:"routes"`
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly *bool `pulumi:"staticRoutesOnly"`
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// When associated with an EC2 Transit Gateway (`transitGatewayId` argument), the attachment ID. See also the `ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
	TransportTransitGatewayAttachmentId *string `pulumi:"transportTransitGatewayAttachmentId"`
	// The public IP address of the first VPN tunnel.
	Tunnel1Address *string `pulumi:"tunnel1Address"`
	// The bgp asn number of the first VPN tunnel.
	Tunnel1BgpAsn *string `pulumi:"tunnel1BgpAsn"`
	// The bgp holdtime of the first VPN tunnel.
	Tunnel1BgpHoldtime *int `pulumi:"tunnel1BgpHoldtime"`
	// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
	Tunnel1CgwInsideAddress *string `pulumi:"tunnel1CgwInsideAddress"`
	// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel1DpdTimeoutAction *string `pulumi:"tunnel1DpdTimeoutAction"`
	// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel1DpdTimeoutSeconds *int `pulumi:"tunnel1DpdTimeoutSeconds"`
	// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
	Tunnel1EnableTunnelLifecycleControl *bool `pulumi:"tunnel1EnableTunnelLifecycleControl"`
	// The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel1IkeVersions []string `pulumi:"tunnel1IkeVersions"`
	// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel1InsideCidr *string `pulumi:"tunnel1InsideCidr"`
	// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel1InsideIpv6Cidr *string `pulumi:"tunnel1InsideIpv6Cidr"`
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel1LogOptions *VpnConnectionTunnel1LogOptions `pulumi:"tunnel1LogOptions"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel1Phase1DhGroupNumbers []int `pulumi:"tunnel1Phase1DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase1EncryptionAlgorithms []string `pulumi:"tunnel1Phase1EncryptionAlgorithms"`
	// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase1IntegrityAlgorithms []string `pulumi:"tunnel1Phase1IntegrityAlgorithms"`
	// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel1Phase1LifetimeSeconds *int `pulumi:"tunnel1Phase1LifetimeSeconds"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel1Phase2DhGroupNumbers []int `pulumi:"tunnel1Phase2DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase2EncryptionAlgorithms []string `pulumi:"tunnel1Phase2EncryptionAlgorithms"`
	// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase2IntegrityAlgorithms []string `pulumi:"tunnel1Phase2IntegrityAlgorithms"`
	// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel1Phase2LifetimeSeconds *int `pulumi:"tunnel1Phase2LifetimeSeconds"`
	// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel1PresharedKey *string `pulumi:"tunnel1PresharedKey"`
	// The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel1RekeyFuzzPercentage *int `pulumi:"tunnel1RekeyFuzzPercentage"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
	Tunnel1RekeyMarginTimeSeconds *int `pulumi:"tunnel1RekeyMarginTimeSeconds"`
	// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel1ReplayWindowSize *int `pulumi:"tunnel1ReplayWindowSize"`
	// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel1StartupAction *string `pulumi:"tunnel1StartupAction"`
	// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
	Tunnel1VgwInsideAddress *string `pulumi:"tunnel1VgwInsideAddress"`
	// The public IP address of the second VPN tunnel.
	Tunnel2Address *string `pulumi:"tunnel2Address"`
	// The bgp asn number of the second VPN tunnel.
	Tunnel2BgpAsn *string `pulumi:"tunnel2BgpAsn"`
	// The bgp holdtime of the second VPN tunnel.
	Tunnel2BgpHoldtime *int `pulumi:"tunnel2BgpHoldtime"`
	// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
	Tunnel2CgwInsideAddress *string `pulumi:"tunnel2CgwInsideAddress"`
	// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel2DpdTimeoutAction *string `pulumi:"tunnel2DpdTimeoutAction"`
	// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel2DpdTimeoutSeconds *int `pulumi:"tunnel2DpdTimeoutSeconds"`
	// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
	Tunnel2EnableTunnelLifecycleControl *bool `pulumi:"tunnel2EnableTunnelLifecycleControl"`
	// The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel2IkeVersions []string `pulumi:"tunnel2IkeVersions"`
	// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel2InsideCidr *string `pulumi:"tunnel2InsideCidr"`
	// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel2InsideIpv6Cidr *string `pulumi:"tunnel2InsideIpv6Cidr"`
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel2LogOptions *VpnConnectionTunnel2LogOptions `pulumi:"tunnel2LogOptions"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel2Phase1DhGroupNumbers []int `pulumi:"tunnel2Phase1DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase1EncryptionAlgorithms []string `pulumi:"tunnel2Phase1EncryptionAlgorithms"`
	// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase1IntegrityAlgorithms []string `pulumi:"tunnel2Phase1IntegrityAlgorithms"`
	// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel2Phase1LifetimeSeconds *int `pulumi:"tunnel2Phase1LifetimeSeconds"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel2Phase2DhGroupNumbers []int `pulumi:"tunnel2Phase2DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase2EncryptionAlgorithms []string `pulumi:"tunnel2Phase2EncryptionAlgorithms"`
	// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase2IntegrityAlgorithms []string `pulumi:"tunnel2Phase2IntegrityAlgorithms"`
	// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel2Phase2LifetimeSeconds *int `pulumi:"tunnel2Phase2LifetimeSeconds"`
	// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel2PresharedKey *string `pulumi:"tunnel2PresharedKey"`
	// The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel2RekeyFuzzPercentage *int `pulumi:"tunnel2RekeyFuzzPercentage"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
	Tunnel2RekeyMarginTimeSeconds *int `pulumi:"tunnel2RekeyMarginTimeSeconds"`
	// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel2ReplayWindowSize *int `pulumi:"tunnel2ReplayWindowSize"`
	// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel2StartupAction *string `pulumi:"tunnel2StartupAction"`
	// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
	Tunnel2VgwInsideAddress *string `pulumi:"tunnel2VgwInsideAddress"`
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
	TunnelInsideIpVersion *string `pulumi:"tunnelInsideIpVersion"`
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type *string `pulumi:"type"`
	// Telemetry for the VPN tunnels. Detailed below.
	VgwTelemetries []VpnConnectionVgwTelemetry `pulumi:"vgwTelemetries"`
	// The ID of the Virtual Private Gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type VpnConnectionState struct {
	// Amazon Resource Name (ARN) of the VPN Connection.
	Arn pulumix.Input[*string]
	// The ARN of the core network.
	CoreNetworkArn pulumix.Input[*string]
	// The ARN of the core network attachment.
	CoreNetworkAttachmentArn pulumix.Input[*string]
	// The configuration information for the VPN connection's customer gateway (in the native XML format).
	CustomerGatewayConfiguration pulumix.Input[*string]
	// The ID of the customer gateway.
	CustomerGatewayId pulumix.Input[*string]
	// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
	EnableAcceleration pulumix.Input[*bool]
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv4NetworkCidr pulumix.Input[*string]
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv6NetworkCidr pulumix.Input[*string]
	// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
	OutsideIpAddressType pulumix.Input[*string]
	// The IPv4 CIDR on the AWS side of the VPN connection.
	RemoteIpv4NetworkCidr pulumix.Input[*string]
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	RemoteIpv6NetworkCidr pulumix.Input[*string]
	// The static routes associated with the VPN connection. Detailed below.
	Routes pulumix.Input[[]*VpnConnectionRouteTypeArgs]
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly pulumix.Input[*bool]
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// When associated with an EC2 Transit Gateway (`transitGatewayId` argument), the attachment ID. See also the `ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
	TransitGatewayAttachmentId pulumix.Input[*string]
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string]
	// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
	TransportTransitGatewayAttachmentId pulumix.Input[*string]
	// The public IP address of the first VPN tunnel.
	Tunnel1Address pulumix.Input[*string]
	// The bgp asn number of the first VPN tunnel.
	Tunnel1BgpAsn pulumix.Input[*string]
	// The bgp holdtime of the first VPN tunnel.
	Tunnel1BgpHoldtime pulumix.Input[*int]
	// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
	Tunnel1CgwInsideAddress pulumix.Input[*string]
	// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel1DpdTimeoutAction pulumix.Input[*string]
	// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel1DpdTimeoutSeconds pulumix.Input[*int]
	// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
	Tunnel1EnableTunnelLifecycleControl pulumix.Input[*bool]
	// The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel1IkeVersions pulumix.Input[[]string]
	// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel1InsideCidr pulumix.Input[*string]
	// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel1InsideIpv6Cidr pulumix.Input[*string]
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel1LogOptions pulumix.Input[*VpnConnectionTunnel1LogOptionsArgs]
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel1Phase1DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase1EncryptionAlgorithms pulumix.Input[[]string]
	// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase1IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel1Phase1LifetimeSeconds pulumix.Input[*int]
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel1Phase2DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase2EncryptionAlgorithms pulumix.Input[[]string]
	// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase2IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel1Phase2LifetimeSeconds pulumix.Input[*int]
	// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel1PresharedKey pulumix.Input[*string]
	// The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel1RekeyFuzzPercentage pulumix.Input[*int]
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
	Tunnel1RekeyMarginTimeSeconds pulumix.Input[*int]
	// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel1ReplayWindowSize pulumix.Input[*int]
	// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel1StartupAction pulumix.Input[*string]
	// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
	Tunnel1VgwInsideAddress pulumix.Input[*string]
	// The public IP address of the second VPN tunnel.
	Tunnel2Address pulumix.Input[*string]
	// The bgp asn number of the second VPN tunnel.
	Tunnel2BgpAsn pulumix.Input[*string]
	// The bgp holdtime of the second VPN tunnel.
	Tunnel2BgpHoldtime pulumix.Input[*int]
	// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
	Tunnel2CgwInsideAddress pulumix.Input[*string]
	// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel2DpdTimeoutAction pulumix.Input[*string]
	// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel2DpdTimeoutSeconds pulumix.Input[*int]
	// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
	Tunnel2EnableTunnelLifecycleControl pulumix.Input[*bool]
	// The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel2IkeVersions pulumix.Input[[]string]
	// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel2InsideCidr pulumix.Input[*string]
	// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel2InsideIpv6Cidr pulumix.Input[*string]
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel2LogOptions pulumix.Input[*VpnConnectionTunnel2LogOptionsArgs]
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel2Phase1DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase1EncryptionAlgorithms pulumix.Input[[]string]
	// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase1IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel2Phase1LifetimeSeconds pulumix.Input[*int]
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel2Phase2DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase2EncryptionAlgorithms pulumix.Input[[]string]
	// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase2IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel2Phase2LifetimeSeconds pulumix.Input[*int]
	// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel2PresharedKey pulumix.Input[*string]
	// The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel2RekeyFuzzPercentage pulumix.Input[*int]
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
	Tunnel2RekeyMarginTimeSeconds pulumix.Input[*int]
	// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel2ReplayWindowSize pulumix.Input[*int]
	// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel2StartupAction pulumix.Input[*string]
	// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
	Tunnel2VgwInsideAddress pulumix.Input[*string]
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
	TunnelInsideIpVersion pulumix.Input[*string]
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type pulumix.Input[*string]
	// Telemetry for the VPN tunnels. Detailed below.
	VgwTelemetries pulumix.Input[[]*VpnConnectionVgwTelemetryArgs]
	// The ID of the Virtual Private Gateway.
	VpnGatewayId pulumix.Input[*string]
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// The ID of the customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv4NetworkCidr *string `pulumi:"localIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv6NetworkCidr *string `pulumi:"localIpv6NetworkCidr"`
	// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
	OutsideIpAddressType *string `pulumi:"outsideIpAddressType"`
	// The IPv4 CIDR on the AWS side of the VPN connection.
	RemoteIpv4NetworkCidr *string `pulumi:"remoteIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	RemoteIpv6NetworkCidr *string `pulumi:"remoteIpv6NetworkCidr"`
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly *bool `pulumi:"staticRoutesOnly"`
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
	TransportTransitGatewayAttachmentId *string `pulumi:"transportTransitGatewayAttachmentId"`
	// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel1DpdTimeoutAction *string `pulumi:"tunnel1DpdTimeoutAction"`
	// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel1DpdTimeoutSeconds *int `pulumi:"tunnel1DpdTimeoutSeconds"`
	// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
	Tunnel1EnableTunnelLifecycleControl *bool `pulumi:"tunnel1EnableTunnelLifecycleControl"`
	// The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel1IkeVersions []string `pulumi:"tunnel1IkeVersions"`
	// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel1InsideCidr *string `pulumi:"tunnel1InsideCidr"`
	// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel1InsideIpv6Cidr *string `pulumi:"tunnel1InsideIpv6Cidr"`
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel1LogOptions *VpnConnectionTunnel1LogOptions `pulumi:"tunnel1LogOptions"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel1Phase1DhGroupNumbers []int `pulumi:"tunnel1Phase1DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase1EncryptionAlgorithms []string `pulumi:"tunnel1Phase1EncryptionAlgorithms"`
	// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase1IntegrityAlgorithms []string `pulumi:"tunnel1Phase1IntegrityAlgorithms"`
	// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel1Phase1LifetimeSeconds *int `pulumi:"tunnel1Phase1LifetimeSeconds"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel1Phase2DhGroupNumbers []int `pulumi:"tunnel1Phase2DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase2EncryptionAlgorithms []string `pulumi:"tunnel1Phase2EncryptionAlgorithms"`
	// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase2IntegrityAlgorithms []string `pulumi:"tunnel1Phase2IntegrityAlgorithms"`
	// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel1Phase2LifetimeSeconds *int `pulumi:"tunnel1Phase2LifetimeSeconds"`
	// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel1PresharedKey *string `pulumi:"tunnel1PresharedKey"`
	// The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel1RekeyFuzzPercentage *int `pulumi:"tunnel1RekeyFuzzPercentage"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
	Tunnel1RekeyMarginTimeSeconds *int `pulumi:"tunnel1RekeyMarginTimeSeconds"`
	// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel1ReplayWindowSize *int `pulumi:"tunnel1ReplayWindowSize"`
	// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel1StartupAction *string `pulumi:"tunnel1StartupAction"`
	// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel2DpdTimeoutAction *string `pulumi:"tunnel2DpdTimeoutAction"`
	// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel2DpdTimeoutSeconds *int `pulumi:"tunnel2DpdTimeoutSeconds"`
	// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
	Tunnel2EnableTunnelLifecycleControl *bool `pulumi:"tunnel2EnableTunnelLifecycleControl"`
	// The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel2IkeVersions []string `pulumi:"tunnel2IkeVersions"`
	// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel2InsideCidr *string `pulumi:"tunnel2InsideCidr"`
	// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel2InsideIpv6Cidr *string `pulumi:"tunnel2InsideIpv6Cidr"`
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel2LogOptions *VpnConnectionTunnel2LogOptions `pulumi:"tunnel2LogOptions"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel2Phase1DhGroupNumbers []int `pulumi:"tunnel2Phase1DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase1EncryptionAlgorithms []string `pulumi:"tunnel2Phase1EncryptionAlgorithms"`
	// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase1IntegrityAlgorithms []string `pulumi:"tunnel2Phase1IntegrityAlgorithms"`
	// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel2Phase1LifetimeSeconds *int `pulumi:"tunnel2Phase1LifetimeSeconds"`
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel2Phase2DhGroupNumbers []int `pulumi:"tunnel2Phase2DhGroupNumbers"`
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase2EncryptionAlgorithms []string `pulumi:"tunnel2Phase2EncryptionAlgorithms"`
	// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase2IntegrityAlgorithms []string `pulumi:"tunnel2Phase2IntegrityAlgorithms"`
	// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel2Phase2LifetimeSeconds *int `pulumi:"tunnel2Phase2LifetimeSeconds"`
	// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel2PresharedKey *string `pulumi:"tunnel2PresharedKey"`
	// The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel2RekeyFuzzPercentage *int `pulumi:"tunnel2RekeyFuzzPercentage"`
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
	Tunnel2RekeyMarginTimeSeconds *int `pulumi:"tunnel2RekeyMarginTimeSeconds"`
	// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel2ReplayWindowSize *int `pulumi:"tunnel2ReplayWindowSize"`
	// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel2StartupAction *string `pulumi:"tunnel2StartupAction"`
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
	TunnelInsideIpVersion *string `pulumi:"tunnelInsideIpVersion"`
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type string `pulumi:"type"`
	// The ID of the Virtual Private Gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The ID of the customer gateway.
	CustomerGatewayId pulumix.Input[string]
	// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
	EnableAcceleration pulumix.Input[*bool]
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv4NetworkCidr pulumix.Input[*string]
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv6NetworkCidr pulumix.Input[*string]
	// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
	OutsideIpAddressType pulumix.Input[*string]
	// The IPv4 CIDR on the AWS side of the VPN connection.
	RemoteIpv4NetworkCidr pulumix.Input[*string]
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	RemoteIpv6NetworkCidr pulumix.Input[*string]
	// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
	StaticRoutesOnly pulumix.Input[*bool]
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string]
	// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
	TransportTransitGatewayAttachmentId pulumix.Input[*string]
	// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel1DpdTimeoutAction pulumix.Input[*string]
	// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel1DpdTimeoutSeconds pulumix.Input[*int]
	// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
	Tunnel1EnableTunnelLifecycleControl pulumix.Input[*bool]
	// The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel1IkeVersions pulumix.Input[[]string]
	// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel1InsideCidr pulumix.Input[*string]
	// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel1InsideIpv6Cidr pulumix.Input[*string]
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel1LogOptions pulumix.Input[*VpnConnectionTunnel1LogOptionsArgs]
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel1Phase1DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase1EncryptionAlgorithms pulumix.Input[[]string]
	// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase1IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel1Phase1LifetimeSeconds pulumix.Input[*int]
	// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel1Phase2DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel1Phase2EncryptionAlgorithms pulumix.Input[[]string]
	// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel1Phase2IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel1Phase2LifetimeSeconds pulumix.Input[*int]
	// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel1PresharedKey pulumix.Input[*string]
	// The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel1RekeyFuzzPercentage pulumix.Input[*int]
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
	Tunnel1RekeyMarginTimeSeconds pulumix.Input[*int]
	// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel1ReplayWindowSize pulumix.Input[*int]
	// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel1StartupAction pulumix.Input[*string]
	// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
	Tunnel2DpdTimeoutAction pulumix.Input[*string]
	// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
	Tunnel2DpdTimeoutSeconds pulumix.Input[*int]
	// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
	Tunnel2EnableTunnelLifecycleControl pulumix.Input[*bool]
	// The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
	Tunnel2IkeVersions pulumix.Input[[]string]
	// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
	Tunnel2InsideCidr pulumix.Input[*string]
	// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
	Tunnel2InsideIpv6Cidr pulumix.Input[*string]
	// Options for logging VPN tunnel activity. See Log Options below for more details.
	Tunnel2LogOptions pulumix.Input[*VpnConnectionTunnel2LogOptionsArgs]
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
	Tunnel2Phase1DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase1EncryptionAlgorithms pulumix.Input[[]string]
	// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase1IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
	Tunnel2Phase1LifetimeSeconds pulumix.Input[*int]
	// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
	Tunnel2Phase2DhGroupNumbers pulumix.Input[[]int]
	// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
	Tunnel2Phase2EncryptionAlgorithms pulumix.Input[[]string]
	// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
	Tunnel2Phase2IntegrityAlgorithms pulumix.Input[[]string]
	// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
	Tunnel2Phase2LifetimeSeconds pulumix.Input[*int]
	// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
	Tunnel2PresharedKey pulumix.Input[*string]
	// The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
	Tunnel2RekeyFuzzPercentage pulumix.Input[*int]
	// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
	Tunnel2RekeyMarginTimeSeconds pulumix.Input[*int]
	// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
	Tunnel2ReplayWindowSize pulumix.Input[*int]
	// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
	Tunnel2StartupAction pulumix.Input[*string]
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
	TunnelInsideIpVersion pulumix.Input[*string]
	// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
	Type pulumix.Input[string]
	// The ID of the Virtual Private Gateway.
	VpnGatewayId pulumix.Input[*string]
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[VpnConnection] {
	return pulumix.Output[VpnConnection]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the VPN Connection.
func (o VpnConnectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the core network.
func (o VpnConnectionOutput) CoreNetworkArn() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.CoreNetworkArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the core network attachment.
func (o VpnConnectionOutput) CoreNetworkAttachmentArn() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.CoreNetworkAttachmentArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration information for the VPN connection's customer gateway (in the native XML format).
func (o VpnConnectionOutput) CustomerGatewayConfiguration() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.CustomerGatewayConfiguration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the customer gateway.
func (o VpnConnectionOutput) CustomerGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.CustomerGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
func (o VpnConnectionOutput) EnableAcceleration() pulumix.Output[bool] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[bool] { return v.EnableAcceleration })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
func (o VpnConnectionOutput) LocalIpv4NetworkCidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.LocalIpv4NetworkCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
func (o VpnConnectionOutput) LocalIpv6NetworkCidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.LocalIpv6NetworkCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are `PublicIpv4 | PrivateIpv4`
func (o VpnConnectionOutput) OutsideIpAddressType() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.OutsideIpAddressType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv4 CIDR on the AWS side of the VPN connection.
func (o VpnConnectionOutput) RemoteIpv4NetworkCidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.RemoteIpv4NetworkCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
func (o VpnConnectionOutput) RemoteIpv6NetworkCidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.RemoteIpv6NetworkCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The static routes associated with the VPN connection. Detailed below.
func (o VpnConnectionOutput) Routes() pulumix.GArrayOutput[VpnConnectionRouteType, VpnConnectionRouteTypeOutput] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.GArrayOutput[VpnConnectionRouteType, VpnConnectionRouteTypeOutput] {
		return v.Routes
	})
	unwrapped := pulumix.Flatten[[]VpnConnectionRouteType, pulumix.GArrayOutput[VpnConnectionRouteType, VpnConnectionRouteTypeOutput]](value)
	return pulumix.GArrayOutput[VpnConnectionRouteType, VpnConnectionRouteTypeOutput]{OutputState: unwrapped.OutputState}
}

// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
func (o VpnConnectionOutput) StaticRoutesOnly() pulumix.Output[bool] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[bool] { return v.StaticRoutesOnly })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpnConnectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpnConnectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// When associated with an EC2 Transit Gateway (`transitGatewayId` argument), the attachment ID. See also the `ec2.Tag` resource for tagging the EC2 Transit Gateway VPN Attachment.
func (o VpnConnectionOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.TransitGatewayAttachmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the EC2 Transit Gateway.
func (o VpnConnectionOutput) TransitGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.TransitGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
func (o VpnConnectionOutput) TransportTransitGatewayAttachmentId() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.TransportTransitGatewayAttachmentId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The public IP address of the first VPN tunnel.
func (o VpnConnectionOutput) Tunnel1Address() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1Address })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The bgp asn number of the first VPN tunnel.
func (o VpnConnectionOutput) Tunnel1BgpAsn() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1BgpAsn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The bgp holdtime of the first VPN tunnel.
func (o VpnConnectionOutput) Tunnel1BgpHoldtime() pulumix.Output[int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[int] { return v.Tunnel1BgpHoldtime })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
func (o VpnConnectionOutput) Tunnel1CgwInsideAddress() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1CgwInsideAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
func (o VpnConnectionOutput) Tunnel1DpdTimeoutAction() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.Tunnel1DpdTimeoutAction })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than `30`.
func (o VpnConnectionOutput) Tunnel1DpdTimeoutSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel1DpdTimeoutSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are `true | false`.
func (o VpnConnectionOutput) Tunnel1EnableTunnelLifecycleControl() pulumix.Output[*bool] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*bool] { return v.Tunnel1EnableTunnelLifecycleControl })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The IKE versions that are permitted for the first VPN tunnel. Valid values are `ikev1 | ikev2`.
func (o VpnConnectionOutput) Tunnel1IkeVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel1IkeVersions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
func (o VpnConnectionOutput) Tunnel1InsideCidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1InsideCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
func (o VpnConnectionOutput) Tunnel1InsideIpv6Cidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1InsideIpv6Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Options for logging VPN tunnel activity. See Log Options below for more details.
func (o VpnConnectionOutput) Tunnel1LogOptions() pulumix.GPtrOutput[VpnConnectionTunnel1LogOptions, VpnConnectionTunnel1LogOptionsOutput] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.GPtrOutput[VpnConnectionTunnel1LogOptions, VpnConnectionTunnel1LogOptionsOutput] {
		return v.Tunnel1LogOptions
	})
	unwrapped := pulumix.Flatten[*VpnConnectionTunnel1LogOptions, pulumix.GPtrOutput[VpnConnectionTunnel1LogOptions, VpnConnectionTunnel1LogOptionsOutput]](value)
	return pulumix.GPtrOutput[VpnConnectionTunnel1LogOptions, VpnConnectionTunnel1LogOptionsOutput]{OutputState: unwrapped.OutputState}
}

// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
func (o VpnConnectionOutput) Tunnel1Phase1DhGroupNumbers() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[int] { return v.Tunnel1Phase1DhGroupNumbers })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
func (o VpnConnectionOutput) Tunnel1Phase1EncryptionAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel1Phase1EncryptionAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
func (o VpnConnectionOutput) Tunnel1Phase1IntegrityAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel1Phase1IntegrityAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `28800`.
func (o VpnConnectionOutput) Tunnel1Phase1LifetimeSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel1Phase1LifetimeSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
func (o VpnConnectionOutput) Tunnel1Phase2DhGroupNumbers() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[int] { return v.Tunnel1Phase2DhGroupNumbers })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
func (o VpnConnectionOutput) Tunnel1Phase2EncryptionAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel1Phase2EncryptionAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
func (o VpnConnectionOutput) Tunnel1Phase2IntegrityAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel1Phase2IntegrityAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between `900` and `3600`.
func (o VpnConnectionOutput) Tunnel1Phase2LifetimeSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel1Phase2LifetimeSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
func (o VpnConnectionOutput) Tunnel1PresharedKey() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1PresharedKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The percentage of the rekey window for the first VPN tunnel (determined by `tunnel1RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
func (o VpnConnectionOutput) Tunnel1RekeyFuzzPercentage() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel1RekeyFuzzPercentage })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel1RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel1Phase2LifetimeSeconds`.
func (o VpnConnectionOutput) Tunnel1RekeyMarginTimeSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel1RekeyMarginTimeSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between `64` and `2048`.
func (o VpnConnectionOutput) Tunnel1ReplayWindowSize() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel1ReplayWindowSize })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
func (o VpnConnectionOutput) Tunnel1StartupAction() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.Tunnel1StartupAction })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
func (o VpnConnectionOutput) Tunnel1VgwInsideAddress() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel1VgwInsideAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public IP address of the second VPN tunnel.
func (o VpnConnectionOutput) Tunnel2Address() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2Address })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The bgp asn number of the second VPN tunnel.
func (o VpnConnectionOutput) Tunnel2BgpAsn() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2BgpAsn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The bgp holdtime of the second VPN tunnel.
func (o VpnConnectionOutput) Tunnel2BgpHoldtime() pulumix.Output[int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[int] { return v.Tunnel2BgpHoldtime })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
func (o VpnConnectionOutput) Tunnel2CgwInsideAddress() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2CgwInsideAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are `clear | none | restart`.
func (o VpnConnectionOutput) Tunnel2DpdTimeoutAction() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.Tunnel2DpdTimeoutAction })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than `30`.
func (o VpnConnectionOutput) Tunnel2DpdTimeoutSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel2DpdTimeoutSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are `true | false`.
func (o VpnConnectionOutput) Tunnel2EnableTunnelLifecycleControl() pulumix.Output[*bool] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*bool] { return v.Tunnel2EnableTunnelLifecycleControl })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The IKE versions that are permitted for the second VPN tunnel. Valid values are `ikev1 | ikev2`.
func (o VpnConnectionOutput) Tunnel2IkeVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel2IkeVersions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
func (o VpnConnectionOutput) Tunnel2InsideCidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2InsideCidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
func (o VpnConnectionOutput) Tunnel2InsideIpv6Cidr() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2InsideIpv6Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Options for logging VPN tunnel activity. See Log Options below for more details.
func (o VpnConnectionOutput) Tunnel2LogOptions() pulumix.GPtrOutput[VpnConnectionTunnel2LogOptions, VpnConnectionTunnel2LogOptionsOutput] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.GPtrOutput[VpnConnectionTunnel2LogOptions, VpnConnectionTunnel2LogOptionsOutput] {
		return v.Tunnel2LogOptions
	})
	unwrapped := pulumix.Flatten[*VpnConnectionTunnel2LogOptions, pulumix.GPtrOutput[VpnConnectionTunnel2LogOptions, VpnConnectionTunnel2LogOptionsOutput]](value)
	return pulumix.GPtrOutput[VpnConnectionTunnel2LogOptions, VpnConnectionTunnel2LogOptionsOutput]{OutputState: unwrapped.OutputState}
}

// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 `.
func (o VpnConnectionOutput) Tunnel2Phase1DhGroupNumbers() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[int] { return v.Tunnel2Phase1DhGroupNumbers })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
func (o VpnConnectionOutput) Tunnel2Phase1EncryptionAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel2Phase1EncryptionAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
func (o VpnConnectionOutput) Tunnel2Phase1IntegrityAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel2Phase1IntegrityAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `28800`.
func (o VpnConnectionOutput) Tunnel2Phase1LifetimeSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel2Phase1LifetimeSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24`.
func (o VpnConnectionOutput) Tunnel2Phase2DhGroupNumbers() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[int] { return v.Tunnel2Phase2DhGroupNumbers })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16`.
func (o VpnConnectionOutput) Tunnel2Phase2EncryptionAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel2Phase2EncryptionAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are `SHA1 | SHA2-256 | SHA2-384 | SHA2-512`.
func (o VpnConnectionOutput) Tunnel2Phase2IntegrityAlgorithms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.ArrayOutput[string] { return v.Tunnel2Phase2IntegrityAlgorithms })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between `900` and `3600`.
func (o VpnConnectionOutput) Tunnel2Phase2LifetimeSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel2Phase2LifetimeSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
func (o VpnConnectionOutput) Tunnel2PresharedKey() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2PresharedKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The percentage of the rekey window for the second VPN tunnel (determined by `tunnel2RekeyMarginTimeSeconds`) during which the rekey time is randomly selected. Valid value is between `0` and `100`.
func (o VpnConnectionOutput) Tunnel2RekeyFuzzPercentage() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel2RekeyFuzzPercentage })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for `tunnel2RekeyFuzzPercentage`. Valid value is between `60` and half of `tunnel2Phase2LifetimeSeconds`.
func (o VpnConnectionOutput) Tunnel2RekeyMarginTimeSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel2RekeyMarginTimeSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between `64` and `2048`.
func (o VpnConnectionOutput) Tunnel2ReplayWindowSize() pulumix.Output[*int] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*int] { return v.Tunnel2ReplayWindowSize })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are `add | start`.
func (o VpnConnectionOutput) Tunnel2StartupAction() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.Tunnel2StartupAction })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
func (o VpnConnectionOutput) Tunnel2VgwInsideAddress() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Tunnel2VgwInsideAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are `ipv4 | ipv6`. `ipv6` Supports only EC2 Transit Gateway.
func (o VpnConnectionOutput) TunnelInsideIpVersion() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.TunnelInsideIpVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
func (o VpnConnectionOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Telemetry for the VPN tunnels. Detailed below.
func (o VpnConnectionOutput) VgwTelemetries() pulumix.GArrayOutput[VpnConnectionVgwTelemetry, VpnConnectionVgwTelemetryOutput] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.GArrayOutput[VpnConnectionVgwTelemetry, VpnConnectionVgwTelemetryOutput] {
		return v.VgwTelemetries
	})
	unwrapped := pulumix.Flatten[[]VpnConnectionVgwTelemetry, pulumix.GArrayOutput[VpnConnectionVgwTelemetry, VpnConnectionVgwTelemetryOutput]](value)
	return pulumix.GArrayOutput[VpnConnectionVgwTelemetry, VpnConnectionVgwTelemetryOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the Virtual Private Gateway.
func (o VpnConnectionOutput) VpnGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[VpnConnection](o, func(v VpnConnection) pulumix.Output[*string] { return v.VpnGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpnConnectionOutput{})
}
