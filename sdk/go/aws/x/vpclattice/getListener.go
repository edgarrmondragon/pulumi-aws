// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS VPC Lattice Listener.
func LookupListener(ctx *pulumi.Context, args *LookupListenerArgs, opts ...pulumi.InvokeOption) (*LookupListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerResult
	err := ctx.Invoke("aws:vpclattice/getListener:getListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListener.
type LookupListenerArgs struct {
	// ID or Amazon Resource Name (ARN) of the listener
	ListenerIdentifier string `pulumi:"listenerIdentifier"`
	// ID or Amazon Resource Name (ARN) of the service network
	ServiceIdentifier string `pulumi:"serviceIdentifier"`
	// List of tags associated with the listener.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getListener.
type LookupListenerResult struct {
	// ARN of the listener.
	Arn string `pulumi:"arn"`
	// The date and time that the listener was created.
	CreatedAt string `pulumi:"createdAt"`
	// The actions for the default listener rule.
	DefaultActions []GetListenerDefaultAction `pulumi:"defaultActions"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The date and time the listener was last updated.
	LastUpdatedAt string `pulumi:"lastUpdatedAt"`
	// The ID of the listener.
	ListenerId         string `pulumi:"listenerId"`
	ListenerIdentifier string `pulumi:"listenerIdentifier"`
	// The name of the listener.
	Name string `pulumi:"name"`
	// The listener port.
	Port int `pulumi:"port"`
	// The listener protocol. Either `HTTPS` or `HTTP`.
	Protocol string `pulumi:"protocol"`
	// The ARN of the service.
	ServiceArn string `pulumi:"serviceArn"`
	// The ID of the service.
	ServiceId         string `pulumi:"serviceId"`
	ServiceIdentifier string `pulumi:"serviceIdentifier"`
	// List of tags associated with the listener.
	Tags map[string]string `pulumi:"tags"`
}

func LookupListenerOutput(ctx *pulumi.Context, args LookupListenerOutputArgs, opts ...pulumi.InvokeOption) LookupListenerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupListenerArgs](args.ToOutput(), func(plainArgs *LookupListenerArgs) (*LookupListenerResult, error) {
		return LookupListener(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupListenerResultOutput, *LookupListenerResult](outputResult)
}

// A collection of arguments for invoking getListener.
type LookupListenerOutputArgs struct {
	// ID or Amazon Resource Name (ARN) of the listener
	ListenerIdentifier pulumix.Input[string] `pulumi:"listenerIdentifier"`
	// ID or Amazon Resource Name (ARN) of the service network
	ServiceIdentifier pulumix.Input[string] `pulumi:"serviceIdentifier"`
	// List of tags associated with the listener.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupListenerOutputArgs) ToOutput() pulumix.Output[*LookupListenerArgs] {
	allArgs := pulumix.All(
		args.ListenerIdentifier.ToOutput(context.Background()).AsAny(),
		args.ServiceIdentifier.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupListenerArgs {
		return &LookupListenerArgs{
			ListenerIdentifier: resolvedArgs[0].(string),
			ServiceIdentifier:  resolvedArgs[1].(string),
			Tags:               resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupListenerResultOutput struct{ *pulumi.OutputState }

func (LookupListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerResult)(nil)).Elem()
}

func (o LookupListenerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupListenerResult] {
	return pulumix.Output[*LookupListenerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupListenerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Arn })
}

func (o LookupListenerResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.CreatedAt })
}

func (o LookupListenerResultOutput) DefaultActions() pulumix.GArrayOutput[GetListenerDefaultAction, GetListenerDefaultActionOutput] {
	value := pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) []GetListenerDefaultAction { return v.DefaultActions })
	return pulumix.GArrayOutput[GetListenerDefaultAction, GetListenerDefaultActionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupListenerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Id })
}

func (o LookupListenerResultOutput) LastUpdatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.LastUpdatedAt })
}

func (o LookupListenerResultOutput) ListenerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.ListenerId })
}

func (o LookupListenerResultOutput) ListenerIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.ListenerIdentifier })
}

func (o LookupListenerResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Name })
}

func (o LookupListenerResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) int { return v.Port })
}

func (o LookupListenerResultOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Protocol })
}

func (o LookupListenerResultOutput) ServiceArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.ServiceArn })
}

func (o LookupListenerResultOutput) ServiceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.ServiceId })
}

func (o LookupListenerResultOutput) ServiceIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.ServiceIdentifier })
}

func (o LookupListenerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
