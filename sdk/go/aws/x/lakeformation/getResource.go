// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a Lake Formation resource.
func LookupResource(ctx *pulumi.Context, args *LookupResourceArgs, opts ...pulumi.InvokeOption) (*LookupResourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourceResult
	err := ctx.Invoke("aws:lakeformation/getResource:getResource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResource.
type LookupResourceArgs struct {
	// ARN of the resource, an S3 path.
	Arn string `pulumi:"arn"`
}

// A collection of values returned by getResource.
type LookupResourceResult struct {
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Date and time the resource was last modified in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
	LastModified string `pulumi:"lastModified"`
	// Role that the resource was registered with.
	RoleArn string `pulumi:"roleArn"`
}

func LookupResourceOutput(ctx *pulumi.Context, args LookupResourceOutputArgs, opts ...pulumi.InvokeOption) LookupResourceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResourceArgs](args.ToOutput(), func(plainArgs *LookupResourceArgs) (*LookupResourceResult, error) {
		return LookupResource(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResourceResultOutput, *LookupResourceResult](outputResult)
}

// A collection of arguments for invoking getResource.
type LookupResourceOutputArgs struct {
	// ARN of the resource, an S3 path.
	Arn pulumix.Input[string] `pulumi:"arn"`
}

func (args LookupResourceOutputArgs) ToOutput() pulumix.Output[*LookupResourceArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResourceArgs {
		return &LookupResourceArgs{
			Arn: resolvedArgs[0].(string),
		}
	})
}

type LookupResourceResultOutput struct{ *pulumi.OutputState }

func (LookupResourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceResult)(nil)).Elem()
}

func (o LookupResourceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResourceResult] {
	return pulumix.Output[*LookupResourceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResourceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.Arn })
}

func (o LookupResourceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.Id })
}

func (o LookupResourceResultOutput) LastModified() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.LastModified })
}

func (o LookupResourceResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceResult](o, func(v *LookupResourceResult) string { return v.RoleArn })
}
