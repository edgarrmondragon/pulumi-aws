// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS OpenSearch Serverless Access Policy. See AWS documentation for [data access policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html) and [supported data access policy permissions](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html#serverless-data-supported-permissions).
type ServerlessAccessPolicy struct {
	pulumi.CustomResourceState

	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the policy.
	Name pulumix.Output[string] `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy pulumix.Output[string] `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion pulumix.Output[string] `pulumi:"policyVersion"`
	// Type of access policy. Must be `data`.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewServerlessAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerlessAccessPolicy(ctx *pulumi.Context,
	name string, args *ServerlessAccessPolicyArgs, opts ...pulumi.ResourceOption) (*ServerlessAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessAccessPolicy
	err := ctx.RegisterResource("aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessAccessPolicy gets an existing ServerlessAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessAccessPolicyState, opts ...pulumi.ResourceOption) (*ServerlessAccessPolicy, error) {
	var resource ServerlessAccessPolicy
	err := ctx.ReadResource("aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessAccessPolicy resources.
type serverlessAccessPolicyState struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy *string `pulumi:"policy"`
	// Version of the policy.
	PolicyVersion *string `pulumi:"policyVersion"`
	// Type of access policy. Must be `data`.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
}

type ServerlessAccessPolicyState struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumix.Input[*string]
	// Name of the policy.
	Name pulumix.Input[*string]
	// JSON policy document to use as the content for the new policy
	Policy pulumix.Input[*string]
	// Version of the policy.
	PolicyVersion pulumix.Input[*string]
	// Type of access policy. Must be `data`.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
}

func (ServerlessAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessAccessPolicyState)(nil)).Elem()
}

type serverlessAccessPolicyArgs struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description *string `pulumi:"description"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// JSON policy document to use as the content for the new policy
	Policy string `pulumi:"policy"`
	// Type of access policy. Must be `data`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ServerlessAccessPolicy resource.
type ServerlessAccessPolicyArgs struct {
	// Description of the policy. Typically used to store information about the permissions defined in the policy.
	Description pulumix.Input[*string]
	// Name of the policy.
	Name pulumix.Input[*string]
	// JSON policy document to use as the content for the new policy
	Policy pulumix.Input[string]
	// Type of access policy. Must be `data`.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
}

func (ServerlessAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessAccessPolicyArgs)(nil)).Elem()
}

type ServerlessAccessPolicyOutput struct{ *pulumi.OutputState }

func (ServerlessAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessAccessPolicy)(nil)).Elem()
}

func (o ServerlessAccessPolicyOutput) ToServerlessAccessPolicyOutput() ServerlessAccessPolicyOutput {
	return o
}

func (o ServerlessAccessPolicyOutput) ToServerlessAccessPolicyOutputWithContext(ctx context.Context) ServerlessAccessPolicyOutput {
	return o
}

func (o ServerlessAccessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessAccessPolicy] {
	return pulumix.Output[ServerlessAccessPolicy]{
		OutputState: o.OutputState,
	}
}

// Description of the policy. Typically used to store information about the permissions defined in the policy.
func (o ServerlessAccessPolicyOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ServerlessAccessPolicy](o, func(v ServerlessAccessPolicy) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the policy.
func (o ServerlessAccessPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessAccessPolicy](o, func(v ServerlessAccessPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON policy document to use as the content for the new policy
func (o ServerlessAccessPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessAccessPolicy](o, func(v ServerlessAccessPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the policy.
func (o ServerlessAccessPolicyOutput) PolicyVersion() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessAccessPolicy](o, func(v ServerlessAccessPolicy) pulumix.Output[string] { return v.PolicyVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of access policy. Must be `data`.
//
// The following arguments are optional:
func (o ServerlessAccessPolicyOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[ServerlessAccessPolicy](o, func(v ServerlessAccessPolicy) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServerlessAccessPolicyOutput{})
}
