// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an App Runner Connection.
//
// > **NOTE:** After creation, you must complete the authentication handshake using the App Runner console.
type Connection struct {
	pulumi.CustomResourceState

	// ARN of the connection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of the connection.
	ConnectionName pulumix.Output[string] `pulumi:"connectionName"`
	// Source repository provider. Valid values: `GITHUB`.
	ProviderType pulumix.Output[string] `pulumi:"providerType"`
	// Current state of the App Runner connection. When the state is `AVAILABLE`, you can use the connection to create an `apprunner.Service` resource.
	Status pulumix.Output[string] `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("aws:apprunner/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("aws:apprunner/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// ARN of the connection.
	Arn *string `pulumi:"arn"`
	// Name of the connection.
	ConnectionName *string `pulumi:"connectionName"`
	// Source repository provider. Valid values: `GITHUB`.
	ProviderType *string `pulumi:"providerType"`
	// Current state of the App Runner connection. When the state is `AVAILABLE`, you can use the connection to create an `apprunner.Service` resource.
	Status *string `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ConnectionState struct {
	// ARN of the connection.
	Arn pulumix.Input[*string]
	// Name of the connection.
	ConnectionName pulumix.Input[*string]
	// Source repository provider. Valid values: `GITHUB`.
	ProviderType pulumix.Input[*string]
	// Current state of the App Runner connection. When the state is `AVAILABLE`, you can use the connection to create an `apprunner.Service` resource.
	Status pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Name of the connection.
	ConnectionName string `pulumi:"connectionName"`
	// Source repository provider. Valid values: `GITHUB`.
	ProviderType string `pulumi:"providerType"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Name of the connection.
	ConnectionName pulumix.Input[string]
	// Source repository provider. Valid values: `GITHUB`.
	ProviderType pulumix.Input[string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[Connection] {
	return pulumix.Output[Connection]{
		OutputState: o.OutputState,
	}
}

// ARN of the connection.
func (o ConnectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the connection.
func (o ConnectionOutput) ConnectionName() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.ConnectionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Source repository provider. Valid values: `GITHUB`.
func (o ConnectionOutput) ProviderType() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.ProviderType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Current state of the App Runner connection. When the state is `AVAILABLE`, you can use the connection to create an `apprunner.Service` resource.
func (o ConnectionOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ConnectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connection](o, func(v Connection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ConnectionOutput{})
}
