// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudTrail resource.
//
// > **Tip:** For a multi-region trail, this resource must be in the home region of the trail.
//
// > **Tip:** For an organization trail, this resource must be in the master account of the organization.
type Trail struct {
	pulumi.CustomResourceState

	// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `eventSelector`.
	AdvancedEventSelectors pulumix.GArrayOutput[TrailAdvancedEventSelector, TrailAdvancedEventSelectorOutput] `pulumi:"advancedEventSelectors"`
	// ARN of the trail.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
	CloudWatchLogsGroupArn pulumix.Output[*string] `pulumi:"cloudWatchLogsGroupArn"`
	// Role for the CloudWatch Logs endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn pulumix.Output[*string] `pulumi:"cloudWatchLogsRoleArn"`
	// Whether log file integrity validation is enabled. Defaults to `false`.
	EnableLogFileValidation pulumix.Output[*bool] `pulumi:"enableLogFileValidation"`
	// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
	EnableLogging pulumix.Output[*bool] `pulumi:"enableLogging"`
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advancedEventSelector`.
	EventSelectors pulumix.GArrayOutput[TrailEventSelector, TrailEventSelectorOutput] `pulumi:"eventSelectors"`
	// Region in which the trail was created.
	HomeRegion pulumix.Output[string] `pulumi:"homeRegion"`
	// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents pulumix.Output[*bool] `pulumi:"includeGlobalServiceEvents"`
	// Configuration block for identifying unusual operational activity. See details below.
	InsightSelectors pulumix.GArrayOutput[TrailInsightSelector, TrailInsightSelectorOutput] `pulumi:"insightSelectors"`
	// Whether the trail is created in the current region or in all regions. Defaults to `false`.
	IsMultiRegionTrail pulumix.Output[*bool] `pulumi:"isMultiRegionTrail"`
	// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
	IsOrganizationTrail pulumix.Output[*bool] `pulumi:"isOrganizationTrail"`
	// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId pulumix.Output[*string] `pulumi:"kmsKeyId"`
	// Name of the trail.
	Name pulumix.Output[string] `pulumi:"name"`
	// Name of the S3 bucket designated for publishing log files.
	//
	// The following arguments are optional:
	S3BucketName pulumix.Output[string] `pulumi:"s3BucketName"`
	// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
	S3KeyPrefix pulumix.Output[*string] `pulumi:"s3KeyPrefix"`
	// Name of the Amazon SNS topic defined for notification of log file delivery.
	SnsTopicName pulumix.Output[*string] `pulumi:"snsTopicName"`
	// Map of tags to assign to the trail. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewTrail registers a new resource with the given unique name, arguments, and options.
func NewTrail(ctx *pulumi.Context,
	name string, args *TrailArgs, opts ...pulumi.ResourceOption) (*Trail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.S3BucketName == nil {
		return nil, errors.New("invalid value for required argument 'S3BucketName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trail
	err := ctx.RegisterResource("aws:cloudtrail/trail:Trail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrail gets an existing Trail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrailState, opts ...pulumi.ResourceOption) (*Trail, error) {
	var resource Trail
	err := ctx.ReadResource("aws:cloudtrail/trail:Trail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trail resources.
type trailState struct {
	// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `eventSelector`.
	AdvancedEventSelectors []TrailAdvancedEventSelector `pulumi:"advancedEventSelectors"`
	// ARN of the trail.
	Arn *string `pulumi:"arn"`
	// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
	CloudWatchLogsGroupArn *string `pulumi:"cloudWatchLogsGroupArn"`
	// Role for the CloudWatch Logs endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn *string `pulumi:"cloudWatchLogsRoleArn"`
	// Whether log file integrity validation is enabled. Defaults to `false`.
	EnableLogFileValidation *bool `pulumi:"enableLogFileValidation"`
	// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
	EnableLogging *bool `pulumi:"enableLogging"`
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advancedEventSelector`.
	EventSelectors []TrailEventSelector `pulumi:"eventSelectors"`
	// Region in which the trail was created.
	HomeRegion *string `pulumi:"homeRegion"`
	// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents *bool `pulumi:"includeGlobalServiceEvents"`
	// Configuration block for identifying unusual operational activity. See details below.
	InsightSelectors []TrailInsightSelector `pulumi:"insightSelectors"`
	// Whether the trail is created in the current region or in all regions. Defaults to `false`.
	IsMultiRegionTrail *bool `pulumi:"isMultiRegionTrail"`
	// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
	IsOrganizationTrail *bool `pulumi:"isOrganizationTrail"`
	// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Name of the trail.
	Name *string `pulumi:"name"`
	// Name of the S3 bucket designated for publishing log files.
	//
	// The following arguments are optional:
	S3BucketName *string `pulumi:"s3BucketName"`
	// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
	// Name of the Amazon SNS topic defined for notification of log file delivery.
	SnsTopicName *string `pulumi:"snsTopicName"`
	// Map of tags to assign to the trail. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type TrailState struct {
	// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `eventSelector`.
	AdvancedEventSelectors pulumix.Input[[]*TrailAdvancedEventSelectorArgs]
	// ARN of the trail.
	Arn pulumix.Input[*string]
	// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
	CloudWatchLogsGroupArn pulumix.Input[*string]
	// Role for the CloudWatch Logs endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn pulumix.Input[*string]
	// Whether log file integrity validation is enabled. Defaults to `false`.
	EnableLogFileValidation pulumix.Input[*bool]
	// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
	EnableLogging pulumix.Input[*bool]
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advancedEventSelector`.
	EventSelectors pulumix.Input[[]*TrailEventSelectorArgs]
	// Region in which the trail was created.
	HomeRegion pulumix.Input[*string]
	// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents pulumix.Input[*bool]
	// Configuration block for identifying unusual operational activity. See details below.
	InsightSelectors pulumix.Input[[]*TrailInsightSelectorArgs]
	// Whether the trail is created in the current region or in all regions. Defaults to `false`.
	IsMultiRegionTrail pulumix.Input[*bool]
	// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
	IsOrganizationTrail pulumix.Input[*bool]
	// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId pulumix.Input[*string]
	// Name of the trail.
	Name pulumix.Input[*string]
	// Name of the S3 bucket designated for publishing log files.
	//
	// The following arguments are optional:
	S3BucketName pulumix.Input[*string]
	// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
	S3KeyPrefix pulumix.Input[*string]
	// Name of the Amazon SNS topic defined for notification of log file delivery.
	SnsTopicName pulumix.Input[*string]
	// Map of tags to assign to the trail. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (TrailState) ElementType() reflect.Type {
	return reflect.TypeOf((*trailState)(nil)).Elem()
}

type trailArgs struct {
	// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `eventSelector`.
	AdvancedEventSelectors []TrailAdvancedEventSelector `pulumi:"advancedEventSelectors"`
	// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
	CloudWatchLogsGroupArn *string `pulumi:"cloudWatchLogsGroupArn"`
	// Role for the CloudWatch Logs endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn *string `pulumi:"cloudWatchLogsRoleArn"`
	// Whether log file integrity validation is enabled. Defaults to `false`.
	EnableLogFileValidation *bool `pulumi:"enableLogFileValidation"`
	// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
	EnableLogging *bool `pulumi:"enableLogging"`
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advancedEventSelector`.
	EventSelectors []TrailEventSelector `pulumi:"eventSelectors"`
	// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents *bool `pulumi:"includeGlobalServiceEvents"`
	// Configuration block for identifying unusual operational activity. See details below.
	InsightSelectors []TrailInsightSelector `pulumi:"insightSelectors"`
	// Whether the trail is created in the current region or in all regions. Defaults to `false`.
	IsMultiRegionTrail *bool `pulumi:"isMultiRegionTrail"`
	// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
	IsOrganizationTrail *bool `pulumi:"isOrganizationTrail"`
	// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Name of the trail.
	Name *string `pulumi:"name"`
	// Name of the S3 bucket designated for publishing log files.
	//
	// The following arguments are optional:
	S3BucketName string `pulumi:"s3BucketName"`
	// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
	// Name of the Amazon SNS topic defined for notification of log file delivery.
	SnsTopicName *string `pulumi:"snsTopicName"`
	// Map of tags to assign to the trail. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Trail resource.
type TrailArgs struct {
	// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `eventSelector`.
	AdvancedEventSelectors pulumix.Input[[]*TrailAdvancedEventSelectorArgs]
	// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
	CloudWatchLogsGroupArn pulumix.Input[*string]
	// Role for the CloudWatch Logs endpoint to assume to write to a user’s log group.
	CloudWatchLogsRoleArn pulumix.Input[*string]
	// Whether log file integrity validation is enabled. Defaults to `false`.
	EnableLogFileValidation pulumix.Input[*bool]
	// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
	EnableLogging pulumix.Input[*bool]
	// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advancedEventSelector`.
	EventSelectors pulumix.Input[[]*TrailEventSelectorArgs]
	// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
	IncludeGlobalServiceEvents pulumix.Input[*bool]
	// Configuration block for identifying unusual operational activity. See details below.
	InsightSelectors pulumix.Input[[]*TrailInsightSelectorArgs]
	// Whether the trail is created in the current region or in all regions. Defaults to `false`.
	IsMultiRegionTrail pulumix.Input[*bool]
	// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
	IsOrganizationTrail pulumix.Input[*bool]
	// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
	KmsKeyId pulumix.Input[*string]
	// Name of the trail.
	Name pulumix.Input[*string]
	// Name of the S3 bucket designated for publishing log files.
	//
	// The following arguments are optional:
	S3BucketName pulumix.Input[string]
	// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
	S3KeyPrefix pulumix.Input[*string]
	// Name of the Amazon SNS topic defined for notification of log file delivery.
	SnsTopicName pulumix.Input[*string]
	// Map of tags to assign to the trail. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (TrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trailArgs)(nil)).Elem()
}

type TrailOutput struct{ *pulumi.OutputState }

func (TrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trail)(nil)).Elem()
}

func (o TrailOutput) ToTrailOutput() TrailOutput {
	return o
}

func (o TrailOutput) ToTrailOutputWithContext(ctx context.Context) TrailOutput {
	return o
}

func (o TrailOutput) ToOutput(ctx context.Context) pulumix.Output[Trail] {
	return pulumix.Output[Trail]{
		OutputState: o.OutputState,
	}
}

// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with `eventSelector`.
func (o TrailOutput) AdvancedEventSelectors() pulumix.GArrayOutput[TrailAdvancedEventSelector, TrailAdvancedEventSelectorOutput] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.GArrayOutput[TrailAdvancedEventSelector, TrailAdvancedEventSelectorOutput] {
		return v.AdvancedEventSelectors
	})
	unwrapped := pulumix.Flatten[[]TrailAdvancedEventSelector, pulumix.GArrayOutput[TrailAdvancedEventSelector, TrailAdvancedEventSelectorOutput]](value)
	return pulumix.GArrayOutput[TrailAdvancedEventSelector, TrailAdvancedEventSelectorOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the trail.
func (o TrailOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
func (o TrailOutput) CloudWatchLogsGroupArn() pulumix.Output[*string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*string] { return v.CloudWatchLogsGroupArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Role for the CloudWatch Logs endpoint to assume to write to a user’s log group.
func (o TrailOutput) CloudWatchLogsRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*string] { return v.CloudWatchLogsRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether log file integrity validation is enabled. Defaults to `false`.
func (o TrailOutput) EnableLogFileValidation() pulumix.Output[*bool] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*bool] { return v.EnableLogFileValidation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Enables logging for the trail. Defaults to `true`. Setting this to `false` will pause logging.
func (o TrailOutput) EnableLogging() pulumix.Output[*bool] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*bool] { return v.EnableLogging })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Specifies an event selector for enabling data event logging. Fields documented below. Please note the [CloudTrail limits](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) when configuring these. Conflicts with `advancedEventSelector`.
func (o TrailOutput) EventSelectors() pulumix.GArrayOutput[TrailEventSelector, TrailEventSelectorOutput] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.GArrayOutput[TrailEventSelector, TrailEventSelectorOutput] {
		return v.EventSelectors
	})
	unwrapped := pulumix.Flatten[[]TrailEventSelector, pulumix.GArrayOutput[TrailEventSelector, TrailEventSelectorOutput]](value)
	return pulumix.GArrayOutput[TrailEventSelector, TrailEventSelectorOutput]{OutputState: unwrapped.OutputState}
}

// Region in which the trail was created.
func (o TrailOutput) HomeRegion() pulumix.Output[string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[string] { return v.HomeRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to `true`.
func (o TrailOutput) IncludeGlobalServiceEvents() pulumix.Output[*bool] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*bool] { return v.IncludeGlobalServiceEvents })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Configuration block for identifying unusual operational activity. See details below.
func (o TrailOutput) InsightSelectors() pulumix.GArrayOutput[TrailInsightSelector, TrailInsightSelectorOutput] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.GArrayOutput[TrailInsightSelector, TrailInsightSelectorOutput] {
		return v.InsightSelectors
	})
	unwrapped := pulumix.Flatten[[]TrailInsightSelector, pulumix.GArrayOutput[TrailInsightSelector, TrailInsightSelectorOutput]](value)
	return pulumix.GArrayOutput[TrailInsightSelector, TrailInsightSelectorOutput]{OutputState: unwrapped.OutputState}
}

// Whether the trail is created in the current region or in all regions. Defaults to `false`.
func (o TrailOutput) IsMultiRegionTrail() pulumix.Output[*bool] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*bool] { return v.IsMultiRegionTrail })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to `false`.
func (o TrailOutput) IsOrganizationTrail() pulumix.Output[*bool] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*bool] { return v.IsOrganizationTrail })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
func (o TrailOutput) KmsKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*string] { return v.KmsKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the trail.
func (o TrailOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the S3 bucket designated for publishing log files.
//
// The following arguments are optional:
func (o TrailOutput) S3BucketName() pulumix.Output[string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[string] { return v.S3BucketName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
func (o TrailOutput) S3KeyPrefix() pulumix.Output[*string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*string] { return v.S3KeyPrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the Amazon SNS topic defined for notification of log file delivery.
func (o TrailOutput) SnsTopicName() pulumix.Output[*string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.Output[*string] { return v.SnsTopicName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of tags to assign to the trail. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TrailOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TrailOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Trail](o, func(v Trail) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TrailOutput{})
}
