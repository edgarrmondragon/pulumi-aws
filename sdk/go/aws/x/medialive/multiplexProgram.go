// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS MediaLive MultiplexProgram.
type MultiplexProgram struct {
	pulumi.CustomResourceState

	// Multiplex ID.
	MultiplexId pulumix.Output[string] `pulumi:"multiplexId"`
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettings, MultiplexProgramMultiplexProgramSettingsOutput] `pulumi:"multiplexProgramSettings"`
	// Unique program name.
	ProgramName pulumix.Output[string] `pulumi:"programName"`
}

// NewMultiplexProgram registers a new resource with the given unique name, arguments, and options.
func NewMultiplexProgram(ctx *pulumi.Context,
	name string, args *MultiplexProgramArgs, opts ...pulumi.ResourceOption) (*MultiplexProgram, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MultiplexId == nil {
		return nil, errors.New("invalid value for required argument 'MultiplexId'")
	}
	if args.ProgramName == nil {
		return nil, errors.New("invalid value for required argument 'ProgramName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MultiplexProgram
	err := ctx.RegisterResource("aws:medialive/multiplexProgram:MultiplexProgram", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiplexProgram gets an existing MultiplexProgram resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiplexProgram(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiplexProgramState, opts ...pulumi.ResourceOption) (*MultiplexProgram, error) {
	var resource MultiplexProgram
	err := ctx.ReadResource("aws:medialive/multiplexProgram:MultiplexProgram", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultiplexProgram resources.
type multiplexProgramState struct {
	// Multiplex ID.
	MultiplexId *string `pulumi:"multiplexId"`
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings *MultiplexProgramMultiplexProgramSettings `pulumi:"multiplexProgramSettings"`
	// Unique program name.
	ProgramName *string `pulumi:"programName"`
}

type MultiplexProgramState struct {
	// Multiplex ID.
	MultiplexId pulumix.Input[*string]
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings pulumix.Input[*MultiplexProgramMultiplexProgramSettingsArgs]
	// Unique program name.
	ProgramName pulumix.Input[*string]
}

func (MultiplexProgramState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexProgramState)(nil)).Elem()
}

type multiplexProgramArgs struct {
	// Multiplex ID.
	MultiplexId string `pulumi:"multiplexId"`
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings *MultiplexProgramMultiplexProgramSettings `pulumi:"multiplexProgramSettings"`
	// Unique program name.
	ProgramName string `pulumi:"programName"`
}

// The set of arguments for constructing a MultiplexProgram resource.
type MultiplexProgramArgs struct {
	// Multiplex ID.
	MultiplexId pulumix.Input[string]
	// MultiplexProgram settings. See Multiplex Program Settings for more details.
	//
	// The following arguments are optional:
	MultiplexProgramSettings pulumix.Input[*MultiplexProgramMultiplexProgramSettingsArgs]
	// Unique program name.
	ProgramName pulumix.Input[string]
}

func (MultiplexProgramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexProgramArgs)(nil)).Elem()
}

type MultiplexProgramOutput struct{ *pulumi.OutputState }

func (MultiplexProgramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplexProgram)(nil)).Elem()
}

func (o MultiplexProgramOutput) ToMultiplexProgramOutput() MultiplexProgramOutput {
	return o
}

func (o MultiplexProgramOutput) ToMultiplexProgramOutputWithContext(ctx context.Context) MultiplexProgramOutput {
	return o
}

func (o MultiplexProgramOutput) ToOutput(ctx context.Context) pulumix.Output[MultiplexProgram] {
	return pulumix.Output[MultiplexProgram]{
		OutputState: o.OutputState,
	}
}

// Multiplex ID.
func (o MultiplexProgramOutput) MultiplexId() pulumix.Output[string] {
	value := pulumix.Apply[MultiplexProgram](o, func(v MultiplexProgram) pulumix.Output[string] { return v.MultiplexId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// MultiplexProgram settings. See Multiplex Program Settings for more details.
//
// The following arguments are optional:
func (o MultiplexProgramOutput) MultiplexProgramSettings() pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettings, MultiplexProgramMultiplexProgramSettingsOutput] {
	value := pulumix.Apply[MultiplexProgram](o, func(v MultiplexProgram) pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettings, MultiplexProgramMultiplexProgramSettingsOutput] {
		return v.MultiplexProgramSettings
	})
	unwrapped := pulumix.Flatten[*MultiplexProgramMultiplexProgramSettings, pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettings, MultiplexProgramMultiplexProgramSettingsOutput]](value)
	return pulumix.GPtrOutput[MultiplexProgramMultiplexProgramSettings, MultiplexProgramMultiplexProgramSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Unique program name.
func (o MultiplexProgramOutput) ProgramName() pulumix.Output[string] {
	value := pulumix.Apply[MultiplexProgram](o, func(v MultiplexProgram) pulumix.Output[string] { return v.ProgramName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MultiplexProgramOutput{})
}
