// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53domains

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a domain that has been [registered](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html) and associated with the current AWS account.
//
// **This is an advanced resource** and has special caveats to be aware of when using it. Please read this document in its entirety before using this resource.
//
// The `route53domains.RegisteredDomain` resource behaves differently from normal resources in that if a domain has been registered, the provider does not _register_ this domain, but instead "adopts" it into management. A destroy does not delete the domain but does remove the resource from state.
type RegisteredDomain struct {
	pulumi.CustomResourceState

	// Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
	AbuseContactEmail pulumix.Output[string] `pulumi:"abuseContactEmail"`
	// Phone number for reporting abuse.
	AbuseContactPhone pulumix.Output[string] `pulumi:"abuseContactPhone"`
	// Details about the domain administrative contact.
	AdminContact pulumix.GPtrOutput[RegisteredDomainAdminContact, RegisteredDomainAdminContactOutput] `pulumi:"adminContact"`
	// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
	AdminPrivacy pulumix.Output[*bool] `pulumi:"adminPrivacy"`
	// Whether the domain registration is set to renew automatically. Default: `true`.
	AutoRenew pulumix.Output[*bool] `pulumi:"autoRenew"`
	// The date when the domain was created as found in the response to a WHOIS query.
	CreationDate pulumix.Output[string] `pulumi:"creationDate"`
	// The name of the registered domain.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// The date when the registration for the domain is set to expire.
	ExpirationDate pulumix.Output[string] `pulumi:"expirationDate"`
	// The list of nameservers for the domain.
	NameServers pulumix.GArrayOutput[RegisteredDomainNameServer, RegisteredDomainNameServerOutput] `pulumi:"nameServers"`
	// Details about the domain registrant.
	RegistrantContact pulumix.GPtrOutput[RegisteredDomainRegistrantContact, RegisteredDomainRegistrantContactOutput] `pulumi:"registrantContact"`
	// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
	RegistrantPrivacy pulumix.Output[*bool] `pulumi:"registrantPrivacy"`
	// Name of the registrar of the domain as identified in the registry.
	RegistrarName pulumix.Output[string] `pulumi:"registrarName"`
	// Web address of the registrar.
	RegistrarUrl pulumix.Output[string] `pulumi:"registrarUrl"`
	// Reseller of the domain.
	Reseller pulumix.Output[string] `pulumi:"reseller"`
	// List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
	StatusLists pulumix.ArrayOutput[string] `pulumi:"statusLists"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Details about the domain technical contact.
	TechContact pulumix.GPtrOutput[RegisteredDomainTechContact, RegisteredDomainTechContactOutput] `pulumi:"techContact"`
	// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
	TechPrivacy pulumix.Output[*bool] `pulumi:"techPrivacy"`
	// Whether the domain is locked for transfer. Default: `true`.
	TransferLock pulumix.Output[*bool] `pulumi:"transferLock"`
	// The last updated date of the domain as found in the response to a WHOIS query.
	UpdatedDate pulumix.Output[string] `pulumi:"updatedDate"`
	// The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
	WhoisServer pulumix.Output[string] `pulumi:"whoisServer"`
}

// NewRegisteredDomain registers a new resource with the given unique name, arguments, and options.
func NewRegisteredDomain(ctx *pulumi.Context,
	name string, args *RegisteredDomainArgs, opts ...pulumi.ResourceOption) (*RegisteredDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegisteredDomain
	err := ctx.RegisterResource("aws:route53domains/registeredDomain:RegisteredDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegisteredDomain gets an existing RegisteredDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegisteredDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegisteredDomainState, opts ...pulumi.ResourceOption) (*RegisteredDomain, error) {
	var resource RegisteredDomain
	err := ctx.ReadResource("aws:route53domains/registeredDomain:RegisteredDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegisteredDomain resources.
type registeredDomainState struct {
	// Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
	AbuseContactEmail *string `pulumi:"abuseContactEmail"`
	// Phone number for reporting abuse.
	AbuseContactPhone *string `pulumi:"abuseContactPhone"`
	// Details about the domain administrative contact.
	AdminContact *RegisteredDomainAdminContact `pulumi:"adminContact"`
	// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
	AdminPrivacy *bool `pulumi:"adminPrivacy"`
	// Whether the domain registration is set to renew automatically. Default: `true`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The date when the domain was created as found in the response to a WHOIS query.
	CreationDate *string `pulumi:"creationDate"`
	// The name of the registered domain.
	DomainName *string `pulumi:"domainName"`
	// The date when the registration for the domain is set to expire.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The list of nameservers for the domain.
	NameServers []RegisteredDomainNameServer `pulumi:"nameServers"`
	// Details about the domain registrant.
	RegistrantContact *RegisteredDomainRegistrantContact `pulumi:"registrantContact"`
	// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
	RegistrantPrivacy *bool `pulumi:"registrantPrivacy"`
	// Name of the registrar of the domain as identified in the registry.
	RegistrarName *string `pulumi:"registrarName"`
	// Web address of the registrar.
	RegistrarUrl *string `pulumi:"registrarUrl"`
	// Reseller of the domain.
	Reseller *string `pulumi:"reseller"`
	// List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
	StatusLists []string `pulumi:"statusLists"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Details about the domain technical contact.
	TechContact *RegisteredDomainTechContact `pulumi:"techContact"`
	// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
	TechPrivacy *bool `pulumi:"techPrivacy"`
	// Whether the domain is locked for transfer. Default: `true`.
	TransferLock *bool `pulumi:"transferLock"`
	// The last updated date of the domain as found in the response to a WHOIS query.
	UpdatedDate *string `pulumi:"updatedDate"`
	// The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
	WhoisServer *string `pulumi:"whoisServer"`
}

type RegisteredDomainState struct {
	// Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
	AbuseContactEmail pulumix.Input[*string]
	// Phone number for reporting abuse.
	AbuseContactPhone pulumix.Input[*string]
	// Details about the domain administrative contact.
	AdminContact pulumix.Input[*RegisteredDomainAdminContactArgs]
	// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
	AdminPrivacy pulumix.Input[*bool]
	// Whether the domain registration is set to renew automatically. Default: `true`.
	AutoRenew pulumix.Input[*bool]
	// The date when the domain was created as found in the response to a WHOIS query.
	CreationDate pulumix.Input[*string]
	// The name of the registered domain.
	DomainName pulumix.Input[*string]
	// The date when the registration for the domain is set to expire.
	ExpirationDate pulumix.Input[*string]
	// The list of nameservers for the domain.
	NameServers pulumix.Input[[]*RegisteredDomainNameServerArgs]
	// Details about the domain registrant.
	RegistrantContact pulumix.Input[*RegisteredDomainRegistrantContactArgs]
	// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
	RegistrantPrivacy pulumix.Input[*bool]
	// Name of the registrar of the domain as identified in the registry.
	RegistrarName pulumix.Input[*string]
	// Web address of the registrar.
	RegistrarUrl pulumix.Input[*string]
	// Reseller of the domain.
	Reseller pulumix.Input[*string]
	// List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
	StatusLists pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Details about the domain technical contact.
	TechContact pulumix.Input[*RegisteredDomainTechContactArgs]
	// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
	TechPrivacy pulumix.Input[*bool]
	// Whether the domain is locked for transfer. Default: `true`.
	TransferLock pulumix.Input[*bool]
	// The last updated date of the domain as found in the response to a WHOIS query.
	UpdatedDate pulumix.Input[*string]
	// The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
	WhoisServer pulumix.Input[*string]
}

func (RegisteredDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredDomainState)(nil)).Elem()
}

type registeredDomainArgs struct {
	// Details about the domain administrative contact.
	AdminContact *RegisteredDomainAdminContact `pulumi:"adminContact"`
	// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
	AdminPrivacy *bool `pulumi:"adminPrivacy"`
	// Whether the domain registration is set to renew automatically. Default: `true`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The name of the registered domain.
	DomainName string `pulumi:"domainName"`
	// The list of nameservers for the domain.
	NameServers []RegisteredDomainNameServer `pulumi:"nameServers"`
	// Details about the domain registrant.
	RegistrantContact *RegisteredDomainRegistrantContact `pulumi:"registrantContact"`
	// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
	RegistrantPrivacy *bool `pulumi:"registrantPrivacy"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Details about the domain technical contact.
	TechContact *RegisteredDomainTechContact `pulumi:"techContact"`
	// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
	TechPrivacy *bool `pulumi:"techPrivacy"`
	// Whether the domain is locked for transfer. Default: `true`.
	TransferLock *bool `pulumi:"transferLock"`
}

// The set of arguments for constructing a RegisteredDomain resource.
type RegisteredDomainArgs struct {
	// Details about the domain administrative contact.
	AdminContact pulumix.Input[*RegisteredDomainAdminContactArgs]
	// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
	AdminPrivacy pulumix.Input[*bool]
	// Whether the domain registration is set to renew automatically. Default: `true`.
	AutoRenew pulumix.Input[*bool]
	// The name of the registered domain.
	DomainName pulumix.Input[string]
	// The list of nameservers for the domain.
	NameServers pulumix.Input[[]*RegisteredDomainNameServerArgs]
	// Details about the domain registrant.
	RegistrantContact pulumix.Input[*RegisteredDomainRegistrantContactArgs]
	// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
	RegistrantPrivacy pulumix.Input[*bool]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Details about the domain technical contact.
	TechContact pulumix.Input[*RegisteredDomainTechContactArgs]
	// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
	TechPrivacy pulumix.Input[*bool]
	// Whether the domain is locked for transfer. Default: `true`.
	TransferLock pulumix.Input[*bool]
}

func (RegisteredDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredDomainArgs)(nil)).Elem()
}

type RegisteredDomainOutput struct{ *pulumi.OutputState }

func (RegisteredDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainOutput) ToRegisteredDomainOutput() RegisteredDomainOutput {
	return o
}

func (o RegisteredDomainOutput) ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput {
	return o
}

func (o RegisteredDomainOutput) ToOutput(ctx context.Context) pulumix.Output[RegisteredDomain] {
	return pulumix.Output[RegisteredDomain]{
		OutputState: o.OutputState,
	}
}

// Email address to contact to report incorrect contact information for a domain, to report that the domain is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.
func (o RegisteredDomainOutput) AbuseContactEmail() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.AbuseContactEmail })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Phone number for reporting abuse.
func (o RegisteredDomainOutput) AbuseContactPhone() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.AbuseContactPhone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Details about the domain administrative contact.
func (o RegisteredDomainOutput) AdminContact() pulumix.GPtrOutput[RegisteredDomainAdminContact, RegisteredDomainAdminContactOutput] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.GPtrOutput[RegisteredDomainAdminContact, RegisteredDomainAdminContactOutput] {
		return v.AdminContact
	})
	unwrapped := pulumix.Flatten[*RegisteredDomainAdminContact, pulumix.GPtrOutput[RegisteredDomainAdminContact, RegisteredDomainAdminContactOutput]](value)
	return pulumix.GPtrOutput[RegisteredDomainAdminContact, RegisteredDomainAdminContactOutput]{OutputState: unwrapped.OutputState}
}

// Whether domain administrative contact information is concealed from WHOIS queries. Default: `true`.
func (o RegisteredDomainOutput) AdminPrivacy() pulumix.Output[*bool] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[*bool] { return v.AdminPrivacy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether the domain registration is set to renew automatically. Default: `true`.
func (o RegisteredDomainOutput) AutoRenew() pulumix.Output[*bool] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[*bool] { return v.AutoRenew })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The date when the domain was created as found in the response to a WHOIS query.
func (o RegisteredDomainOutput) CreationDate() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.CreationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the registered domain.
func (o RegisteredDomainOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date when the registration for the domain is set to expire.
func (o RegisteredDomainOutput) ExpirationDate() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.ExpirationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of nameservers for the domain.
func (o RegisteredDomainOutput) NameServers() pulumix.GArrayOutput[RegisteredDomainNameServer, RegisteredDomainNameServerOutput] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.GArrayOutput[RegisteredDomainNameServer, RegisteredDomainNameServerOutput] {
		return v.NameServers
	})
	unwrapped := pulumix.Flatten[[]RegisteredDomainNameServer, pulumix.GArrayOutput[RegisteredDomainNameServer, RegisteredDomainNameServerOutput]](value)
	return pulumix.GArrayOutput[RegisteredDomainNameServer, RegisteredDomainNameServerOutput]{OutputState: unwrapped.OutputState}
}

// Details about the domain registrant.
func (o RegisteredDomainOutput) RegistrantContact() pulumix.GPtrOutput[RegisteredDomainRegistrantContact, RegisteredDomainRegistrantContactOutput] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.GPtrOutput[RegisteredDomainRegistrantContact, RegisteredDomainRegistrantContactOutput] {
		return v.RegistrantContact
	})
	unwrapped := pulumix.Flatten[*RegisteredDomainRegistrantContact, pulumix.GPtrOutput[RegisteredDomainRegistrantContact, RegisteredDomainRegistrantContactOutput]](value)
	return pulumix.GPtrOutput[RegisteredDomainRegistrantContact, RegisteredDomainRegistrantContactOutput]{OutputState: unwrapped.OutputState}
}

// Whether domain registrant contact information is concealed from WHOIS queries. Default: `true`.
func (o RegisteredDomainOutput) RegistrantPrivacy() pulumix.Output[*bool] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[*bool] { return v.RegistrantPrivacy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the registrar of the domain as identified in the registry.
func (o RegisteredDomainOutput) RegistrarName() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.RegistrarName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Web address of the registrar.
func (o RegisteredDomainOutput) RegistrarUrl() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.RegistrarUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Reseller of the domain.
func (o RegisteredDomainOutput) Reseller() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.Reseller })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of [domain name status codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
func (o RegisteredDomainOutput) StatusLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.ArrayOutput[string] { return v.StatusLists })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RegisteredDomainOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RegisteredDomainOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Details about the domain technical contact.
func (o RegisteredDomainOutput) TechContact() pulumix.GPtrOutput[RegisteredDomainTechContact, RegisteredDomainTechContactOutput] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.GPtrOutput[RegisteredDomainTechContact, RegisteredDomainTechContactOutput] {
		return v.TechContact
	})
	unwrapped := pulumix.Flatten[*RegisteredDomainTechContact, pulumix.GPtrOutput[RegisteredDomainTechContact, RegisteredDomainTechContactOutput]](value)
	return pulumix.GPtrOutput[RegisteredDomainTechContact, RegisteredDomainTechContactOutput]{OutputState: unwrapped.OutputState}
}

// Whether domain technical contact information is concealed from WHOIS queries. Default: `true`.
func (o RegisteredDomainOutput) TechPrivacy() pulumix.Output[*bool] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[*bool] { return v.TechPrivacy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether the domain is locked for transfer. Default: `true`.
func (o RegisteredDomainOutput) TransferLock() pulumix.Output[*bool] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[*bool] { return v.TransferLock })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The last updated date of the domain as found in the response to a WHOIS query.
func (o RegisteredDomainOutput) UpdatedDate() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.UpdatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.
func (o RegisteredDomainOutput) WhoisServer() pulumix.Output[string] {
	value := pulumix.Apply[RegisteredDomain](o, func(v RegisteredDomain) pulumix.Output[string] { return v.WhoisServer })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RegisteredDomainOutput{})
}
