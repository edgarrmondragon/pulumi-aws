// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS RDS (Relational Database) Export Task.
type ExportTask struct {
	pulumi.CustomResourceState

	// Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
	ExportOnlies pulumix.ArrayOutput[string] `pulumi:"exportOnlies"`
	// Unique identifier for the snapshot export task.
	ExportTaskIdentifier pulumix.Output[string] `pulumi:"exportTaskIdentifier"`
	// Reason the export failed, if it failed.
	FailureCause pulumix.Output[string] `pulumi:"failureCause"`
	// ARN of the IAM role to use for writing to the Amazon S3 bucket.
	IamRoleArn pulumix.Output[string] `pulumi:"iamRoleArn"`
	// ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// Progress of the snapshot export task as a percentage.
	PercentProgress pulumix.Output[int] `pulumi:"percentProgress"`
	// Name of the Amazon S3 bucket to export the snapshot to.
	S3BucketName pulumix.Output[string] `pulumi:"s3BucketName"`
	// Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
	S3Prefix pulumix.Output[string] `pulumi:"s3Prefix"`
	// Time that the snapshot was created.
	SnapshotTime pulumix.Output[string] `pulumi:"snapshotTime"`
	// Amazon Resource Name (ARN) of the snapshot to export.
	//
	// The following arguments are optional:
	SourceArn pulumix.Output[string] `pulumi:"sourceArn"`
	// Type of source for the export.
	SourceType pulumix.Output[string] `pulumi:"sourceType"`
	// Status of the export task.
	Status pulumix.Output[string] `pulumi:"status"`
	// Time that the snapshot export task completed.
	TaskEndTime pulumix.Output[string] `pulumi:"taskEndTime"`
	// Time that the snapshot export task started.
	TaskStartTime pulumix.Output[string]                                           `pulumi:"taskStartTime"`
	Timeouts      pulumix.GPtrOutput[ExportTaskTimeouts, ExportTaskTimeoutsOutput] `pulumi:"timeouts"`
	// Warning about the snapshot export task, if any.
	WarningMessage pulumix.Output[string] `pulumi:"warningMessage"`
}

// NewExportTask registers a new resource with the given unique name, arguments, and options.
func NewExportTask(ctx *pulumi.Context,
	name string, args *ExportTaskArgs, opts ...pulumi.ResourceOption) (*ExportTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExportTaskIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ExportTaskIdentifier'")
	}
	if args.IamRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'IamRoleArn'")
	}
	if args.KmsKeyId == nil {
		return nil, errors.New("invalid value for required argument 'KmsKeyId'")
	}
	if args.S3BucketName == nil {
		return nil, errors.New("invalid value for required argument 'S3BucketName'")
	}
	if args.SourceArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExportTask
	err := ctx.RegisterResource("aws:rds/exportTask:ExportTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExportTask gets an existing ExportTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExportTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExportTaskState, opts ...pulumi.ResourceOption) (*ExportTask, error) {
	var resource ExportTask
	err := ctx.ReadResource("aws:rds/exportTask:ExportTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExportTask resources.
type exportTaskState struct {
	// Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
	ExportOnlies []string `pulumi:"exportOnlies"`
	// Unique identifier for the snapshot export task.
	ExportTaskIdentifier *string `pulumi:"exportTaskIdentifier"`
	// Reason the export failed, if it failed.
	FailureCause *string `pulumi:"failureCause"`
	// ARN of the IAM role to use for writing to the Amazon S3 bucket.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Progress of the snapshot export task as a percentage.
	PercentProgress *int `pulumi:"percentProgress"`
	// Name of the Amazon S3 bucket to export the snapshot to.
	S3BucketName *string `pulumi:"s3BucketName"`
	// Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
	S3Prefix *string `pulumi:"s3Prefix"`
	// Time that the snapshot was created.
	SnapshotTime *string `pulumi:"snapshotTime"`
	// Amazon Resource Name (ARN) of the snapshot to export.
	//
	// The following arguments are optional:
	SourceArn *string `pulumi:"sourceArn"`
	// Type of source for the export.
	SourceType *string `pulumi:"sourceType"`
	// Status of the export task.
	Status *string `pulumi:"status"`
	// Time that the snapshot export task completed.
	TaskEndTime *string `pulumi:"taskEndTime"`
	// Time that the snapshot export task started.
	TaskStartTime *string             `pulumi:"taskStartTime"`
	Timeouts      *ExportTaskTimeouts `pulumi:"timeouts"`
	// Warning about the snapshot export task, if any.
	WarningMessage *string `pulumi:"warningMessage"`
}

type ExportTaskState struct {
	// Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
	ExportOnlies pulumix.Input[[]string]
	// Unique identifier for the snapshot export task.
	ExportTaskIdentifier pulumix.Input[*string]
	// Reason the export failed, if it failed.
	FailureCause pulumix.Input[*string]
	// ARN of the IAM role to use for writing to the Amazon S3 bucket.
	IamRoleArn pulumix.Input[*string]
	// ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
	KmsKeyId pulumix.Input[*string]
	// Progress of the snapshot export task as a percentage.
	PercentProgress pulumix.Input[*int]
	// Name of the Amazon S3 bucket to export the snapshot to.
	S3BucketName pulumix.Input[*string]
	// Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
	S3Prefix pulumix.Input[*string]
	// Time that the snapshot was created.
	SnapshotTime pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the snapshot to export.
	//
	// The following arguments are optional:
	SourceArn pulumix.Input[*string]
	// Type of source for the export.
	SourceType pulumix.Input[*string]
	// Status of the export task.
	Status pulumix.Input[*string]
	// Time that the snapshot export task completed.
	TaskEndTime pulumix.Input[*string]
	// Time that the snapshot export task started.
	TaskStartTime pulumix.Input[*string]
	Timeouts      pulumix.Input[*ExportTaskTimeoutsArgs]
	// Warning about the snapshot export task, if any.
	WarningMessage pulumix.Input[*string]
}

func (ExportTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*exportTaskState)(nil)).Elem()
}

type exportTaskArgs struct {
	// Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
	ExportOnlies []string `pulumi:"exportOnlies"`
	// Unique identifier for the snapshot export task.
	ExportTaskIdentifier string `pulumi:"exportTaskIdentifier"`
	// ARN of the IAM role to use for writing to the Amazon S3 bucket.
	IamRoleArn string `pulumi:"iamRoleArn"`
	// ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Name of the Amazon S3 bucket to export the snapshot to.
	S3BucketName string `pulumi:"s3BucketName"`
	// Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
	S3Prefix *string `pulumi:"s3Prefix"`
	// Amazon Resource Name (ARN) of the snapshot to export.
	//
	// The following arguments are optional:
	SourceArn string              `pulumi:"sourceArn"`
	Timeouts  *ExportTaskTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ExportTask resource.
type ExportTaskArgs struct {
	// Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
	ExportOnlies pulumix.Input[[]string]
	// Unique identifier for the snapshot export task.
	ExportTaskIdentifier pulumix.Input[string]
	// ARN of the IAM role to use for writing to the Amazon S3 bucket.
	IamRoleArn pulumix.Input[string]
	// ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
	KmsKeyId pulumix.Input[string]
	// Name of the Amazon S3 bucket to export the snapshot to.
	S3BucketName pulumix.Input[string]
	// Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
	S3Prefix pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the snapshot to export.
	//
	// The following arguments are optional:
	SourceArn pulumix.Input[string]
	Timeouts  pulumix.Input[*ExportTaskTimeoutsArgs]
}

func (ExportTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exportTaskArgs)(nil)).Elem()
}

type ExportTaskOutput struct{ *pulumi.OutputState }

func (ExportTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTask)(nil)).Elem()
}

func (o ExportTaskOutput) ToExportTaskOutput() ExportTaskOutput {
	return o
}

func (o ExportTaskOutput) ToExportTaskOutputWithContext(ctx context.Context) ExportTaskOutput {
	return o
}

func (o ExportTaskOutput) ToOutput(ctx context.Context) pulumix.Output[ExportTask] {
	return pulumix.Output[ExportTask]{
		OutputState: o.OutputState,
	}
}

// Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
func (o ExportTaskOutput) ExportOnlies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.ArrayOutput[string] { return v.ExportOnlies })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Unique identifier for the snapshot export task.
func (o ExportTaskOutput) ExportTaskIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.ExportTaskIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Reason the export failed, if it failed.
func (o ExportTaskOutput) FailureCause() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.FailureCause })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the IAM role to use for writing to the Amazon S3 bucket.
func (o ExportTaskOutput) IamRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.IamRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
func (o ExportTaskOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Progress of the snapshot export task as a percentage.
func (o ExportTaskOutput) PercentProgress() pulumix.Output[int] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[int] { return v.PercentProgress })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Name of the Amazon S3 bucket to export the snapshot to.
func (o ExportTaskOutput) S3BucketName() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.S3BucketName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
func (o ExportTaskOutput) S3Prefix() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.S3Prefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Time that the snapshot was created.
func (o ExportTaskOutput) SnapshotTime() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.SnapshotTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the snapshot to export.
//
// The following arguments are optional:
func (o ExportTaskOutput) SourceArn() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.SourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of source for the export.
func (o ExportTaskOutput) SourceType() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.SourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the export task.
func (o ExportTaskOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Time that the snapshot export task completed.
func (o ExportTaskOutput) TaskEndTime() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.TaskEndTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Time that the snapshot export task started.
func (o ExportTaskOutput) TaskStartTime() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.TaskStartTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ExportTaskOutput) Timeouts() pulumix.GPtrOutput[ExportTaskTimeouts, ExportTaskTimeoutsOutput] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.GPtrOutput[ExportTaskTimeouts, ExportTaskTimeoutsOutput] { return v.Timeouts })
	unwrapped := pulumix.Flatten[*ExportTaskTimeouts, pulumix.GPtrOutput[ExportTaskTimeouts, ExportTaskTimeoutsOutput]](value)
	return pulumix.GPtrOutput[ExportTaskTimeouts, ExportTaskTimeoutsOutput]{OutputState: unwrapped.OutputState}
}

// Warning about the snapshot export task, if any.
func (o ExportTaskOutput) WarningMessage() pulumix.Output[string] {
	value := pulumix.Apply[ExportTask](o, func(v ExportTask) pulumix.Output[string] { return v.WarningMessage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ExportTaskOutput{})
}
