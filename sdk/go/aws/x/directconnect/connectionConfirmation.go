// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a confirmation of the creation of the specified hosted connection on an interconnect.
type ConnectionConfirmation struct {
	pulumi.CustomResourceState

	// The ID of the hosted connection.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
}

// NewConnectionConfirmation registers a new resource with the given unique name, arguments, and options.
func NewConnectionConfirmation(ctx *pulumi.Context,
	name string, args *ConnectionConfirmationArgs, opts ...pulumi.ResourceOption) (*ConnectionConfirmation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionConfirmation
	err := ctx.RegisterResource("aws:directconnect/connectionConfirmation:ConnectionConfirmation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionConfirmation gets an existing ConnectionConfirmation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionConfirmation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionConfirmationState, opts ...pulumi.ResourceOption) (*ConnectionConfirmation, error) {
	var resource ConnectionConfirmation
	err := ctx.ReadResource("aws:directconnect/connectionConfirmation:ConnectionConfirmation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionConfirmation resources.
type connectionConfirmationState struct {
	// The ID of the hosted connection.
	ConnectionId *string `pulumi:"connectionId"`
}

type ConnectionConfirmationState struct {
	// The ID of the hosted connection.
	ConnectionId pulumix.Input[*string]
}

func (ConnectionConfirmationState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionConfirmationState)(nil)).Elem()
}

type connectionConfirmationArgs struct {
	// The ID of the hosted connection.
	ConnectionId string `pulumi:"connectionId"`
}

// The set of arguments for constructing a ConnectionConfirmation resource.
type ConnectionConfirmationArgs struct {
	// The ID of the hosted connection.
	ConnectionId pulumix.Input[string]
}

func (ConnectionConfirmationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionConfirmationArgs)(nil)).Elem()
}

type ConnectionConfirmationOutput struct{ *pulumi.OutputState }

func (ConnectionConfirmationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionConfirmation)(nil)).Elem()
}

func (o ConnectionConfirmationOutput) ToConnectionConfirmationOutput() ConnectionConfirmationOutput {
	return o
}

func (o ConnectionConfirmationOutput) ToConnectionConfirmationOutputWithContext(ctx context.Context) ConnectionConfirmationOutput {
	return o
}

func (o ConnectionConfirmationOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionConfirmation] {
	return pulumix.Output[ConnectionConfirmation]{
		OutputState: o.OutputState,
	}
}

// The ID of the hosted connection.
func (o ConnectionConfirmationOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[ConnectionConfirmation](o, func(v ConnectionConfirmation) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConnectionConfirmationOutput{})
}
