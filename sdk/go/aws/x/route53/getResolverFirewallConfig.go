// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `route53.ResolverFirewallConfig` provides details about a specific a Route 53 Resolver DNS Firewall config.
//
// This data source allows to find a details about a specific a Route 53 Resolver DNS Firewall config.
func LookupResolverFirewallConfig(ctx *pulumi.Context, args *LookupResolverFirewallConfigArgs, opts ...pulumi.InvokeOption) (*LookupResolverFirewallConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverFirewallConfigResult
	err := ctx.Invoke("aws:route53/getResolverFirewallConfig:getResolverFirewallConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverFirewallConfig.
type LookupResolverFirewallConfigArgs struct {
	// The ID of the VPC from Amazon VPC that the configuration is for.
	//
	// The following attribute is additionally exported:
	ResourceId string `pulumi:"resourceId"`
}

// A collection of values returned by getResolverFirewallConfig.
type LookupResolverFirewallConfigResult struct {
	FirewallFailOpen string `pulumi:"firewallFailOpen"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	OwnerId    string `pulumi:"ownerId"`
	ResourceId string `pulumi:"resourceId"`
}

func LookupResolverFirewallConfigOutput(ctx *pulumi.Context, args LookupResolverFirewallConfigOutputArgs, opts ...pulumi.InvokeOption) LookupResolverFirewallConfigResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResolverFirewallConfigArgs](args.ToOutput(), func(plainArgs *LookupResolverFirewallConfigArgs) (*LookupResolverFirewallConfigResult, error) {
		return LookupResolverFirewallConfig(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResolverFirewallConfigResultOutput, *LookupResolverFirewallConfigResult](outputResult)
}

// A collection of arguments for invoking getResolverFirewallConfig.
type LookupResolverFirewallConfigOutputArgs struct {
	// The ID of the VPC from Amazon VPC that the configuration is for.
	//
	// The following attribute is additionally exported:
	ResourceId pulumix.Input[string] `pulumi:"resourceId"`
}

func (args LookupResolverFirewallConfigOutputArgs) ToOutput() pulumix.Output[*LookupResolverFirewallConfigArgs] {
	allArgs := pulumix.All(
		args.ResourceId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResolverFirewallConfigArgs {
		return &LookupResolverFirewallConfigArgs{
			ResourceId: resolvedArgs[0].(string),
		}
	})
}

type LookupResolverFirewallConfigResultOutput struct{ *pulumi.OutputState }

func (LookupResolverFirewallConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverFirewallConfigResult)(nil)).Elem()
}

func (o LookupResolverFirewallConfigResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResolverFirewallConfigResult] {
	return pulumix.Output[*LookupResolverFirewallConfigResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResolverFirewallConfigResultOutput) FirewallFailOpen() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverFirewallConfigResult](o, func(v *LookupResolverFirewallConfigResult) string { return v.FirewallFailOpen })
}

func (o LookupResolverFirewallConfigResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverFirewallConfigResult](o, func(v *LookupResolverFirewallConfigResult) string { return v.Id })
}

func (o LookupResolverFirewallConfigResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverFirewallConfigResult](o, func(v *LookupResolverFirewallConfigResult) string { return v.OwnerId })
}

func (o LookupResolverFirewallConfigResultOutput) ResourceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResolverFirewallConfigResult](o, func(v *LookupResolverFirewallConfigResult) string { return v.ResourceId })
}
