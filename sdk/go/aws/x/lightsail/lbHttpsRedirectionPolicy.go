// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Configures Https Redirection for a Lightsail Load Balancer. A valid Certificate must be attached to the load balancer in order to enable https redirection.
type LbHttpsRedirectionPolicy struct {
	pulumi.CustomResourceState

	// The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
	Enabled pulumix.Output[bool] `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable http to https redirection.
	LbName pulumix.Output[string] `pulumi:"lbName"`
}

// NewLbHttpsRedirectionPolicy registers a new resource with the given unique name, arguments, and options.
func NewLbHttpsRedirectionPolicy(ctx *pulumi.Context,
	name string, args *LbHttpsRedirectionPolicyArgs, opts ...pulumi.ResourceOption) (*LbHttpsRedirectionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.LbName == nil {
		return nil, errors.New("invalid value for required argument 'LbName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbHttpsRedirectionPolicy
	err := ctx.RegisterResource("aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbHttpsRedirectionPolicy gets an existing LbHttpsRedirectionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbHttpsRedirectionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbHttpsRedirectionPolicyState, opts ...pulumi.ResourceOption) (*LbHttpsRedirectionPolicy, error) {
	var resource LbHttpsRedirectionPolicy
	err := ctx.ReadResource("aws:lightsail/lbHttpsRedirectionPolicy:LbHttpsRedirectionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbHttpsRedirectionPolicy resources.
type lbHttpsRedirectionPolicyState struct {
	// The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
	Enabled *bool `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable http to https redirection.
	LbName *string `pulumi:"lbName"`
}

type LbHttpsRedirectionPolicyState struct {
	// The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
	Enabled pulumix.Input[*bool]
	// The name of the load balancer to which you want to enable http to https redirection.
	LbName pulumix.Input[*string]
}

func (LbHttpsRedirectionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbHttpsRedirectionPolicyState)(nil)).Elem()
}

type lbHttpsRedirectionPolicyArgs struct {
	// The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
	Enabled bool `pulumi:"enabled"`
	// The name of the load balancer to which you want to enable http to https redirection.
	LbName string `pulumi:"lbName"`
}

// The set of arguments for constructing a LbHttpsRedirectionPolicy resource.
type LbHttpsRedirectionPolicyArgs struct {
	// The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
	Enabled pulumix.Input[bool]
	// The name of the load balancer to which you want to enable http to https redirection.
	LbName pulumix.Input[string]
}

func (LbHttpsRedirectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbHttpsRedirectionPolicyArgs)(nil)).Elem()
}

type LbHttpsRedirectionPolicyOutput struct{ *pulumi.OutputState }

func (LbHttpsRedirectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbHttpsRedirectionPolicy)(nil)).Elem()
}

func (o LbHttpsRedirectionPolicyOutput) ToLbHttpsRedirectionPolicyOutput() LbHttpsRedirectionPolicyOutput {
	return o
}

func (o LbHttpsRedirectionPolicyOutput) ToLbHttpsRedirectionPolicyOutputWithContext(ctx context.Context) LbHttpsRedirectionPolicyOutput {
	return o
}

func (o LbHttpsRedirectionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LbHttpsRedirectionPolicy] {
	return pulumix.Output[LbHttpsRedirectionPolicy]{
		OutputState: o.OutputState,
	}
}

// The Https Redirection state of the load balancer. `true` to activate http to https redirection or `false` to deactivate http to https redirection.
func (o LbHttpsRedirectionPolicyOutput) Enabled() pulumix.Output[bool] {
	value := pulumix.Apply[LbHttpsRedirectionPolicy](o, func(v LbHttpsRedirectionPolicy) pulumix.Output[bool] { return v.Enabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The name of the load balancer to which you want to enable http to https redirection.
func (o LbHttpsRedirectionPolicyOutput) LbName() pulumix.Output[string] {
	value := pulumix.Apply[LbHttpsRedirectionPolicy](o, func(v LbHttpsRedirectionPolicy) pulumix.Output[string] { return v.LbName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LbHttpsRedirectionPolicyOutput{})
}
