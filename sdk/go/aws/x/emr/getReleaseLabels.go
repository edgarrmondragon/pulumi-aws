// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about EMR Release Labels.
func GetReleaseLabels(ctx *pulumi.Context, args *GetReleaseLabelsArgs, opts ...pulumi.InvokeOption) (*GetReleaseLabelsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetReleaseLabelsResult
	err := ctx.Invoke("aws:emr/getReleaseLabels:getReleaseLabels", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReleaseLabels.
type GetReleaseLabelsArgs struct {
	// Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return. See Filters.
	Filters *GetReleaseLabelsFilters `pulumi:"filters"`
}

// A collection of values returned by getReleaseLabels.
type GetReleaseLabelsResult struct {
	Filters *GetReleaseLabelsFilters `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Returned release labels.
	ReleaseLabels []string `pulumi:"releaseLabels"`
}

func GetReleaseLabelsOutput(ctx *pulumi.Context, args GetReleaseLabelsOutputArgs, opts ...pulumi.InvokeOption) GetReleaseLabelsResultOutput {
	outputResult := pulumix.ApplyErr[*GetReleaseLabelsArgs](args.ToOutput(), func(plainArgs *GetReleaseLabelsArgs) (*GetReleaseLabelsResult, error) {
		return GetReleaseLabels(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetReleaseLabelsResultOutput, *GetReleaseLabelsResult](outputResult)
}

// A collection of arguments for invoking getReleaseLabels.
type GetReleaseLabelsOutputArgs struct {
	// Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return. See Filters.
	Filters pulumix.Input[*GetReleaseLabelsFiltersArgs] `pulumi:"filters"`
}

func (args GetReleaseLabelsOutputArgs) ToOutput() pulumix.Output[*GetReleaseLabelsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetReleaseLabelsArgs {
		return &GetReleaseLabelsArgs{
			Filters: resolvedArgs[0].(*GetReleaseLabelsFilters),
		}
	})
}

type GetReleaseLabelsResultOutput struct{ *pulumi.OutputState }

func (GetReleaseLabelsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseLabelsResult)(nil)).Elem()
}

func (o GetReleaseLabelsResultOutput) ToOutput(context.Context) pulumix.Output[*GetReleaseLabelsResult] {
	return pulumix.Output[*GetReleaseLabelsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetReleaseLabelsResultOutput) Filters() pulumix.GPtrOutput[GetReleaseLabelsFilters, GetReleaseLabelsFiltersOutput] {
	value := pulumix.Apply[*GetReleaseLabelsResult](o, func(v *GetReleaseLabelsResult) *GetReleaseLabelsFilters { return v.Filters })
	return pulumix.GPtrOutput[GetReleaseLabelsFilters, GetReleaseLabelsFiltersOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReleaseLabelsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetReleaseLabelsResult](o, func(v *GetReleaseLabelsResult) string { return v.Id })
}

func (o GetReleaseLabelsResultOutput) ReleaseLabels() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetReleaseLabelsResult](o, func(v *GetReleaseLabelsResult) []string { return v.ReleaseLabels })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
