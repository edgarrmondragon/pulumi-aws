// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mskconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an Amazon MSK Connect Connector.
func LookupConnector(ctx *pulumi.Context, args *LookupConnectorArgs, opts ...pulumi.InvokeOption) (*LookupConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectorResult
	err := ctx.Invoke("aws:mskconnect/getConnector:getConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnector.
type LookupConnectorArgs struct {
	// Name of the connector.
	Name string `pulumi:"name"`
}

// A collection of values returned by getConnector.
type LookupConnectorResult struct {
	// ARN of the connector.
	Arn string `pulumi:"arn"`
	// Summary description of the connector.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Current version of the connector.
	Version string `pulumi:"version"`
}

func LookupConnectorOutput(ctx *pulumi.Context, args LookupConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectorArgs](args.ToOutput(), func(plainArgs *LookupConnectorArgs) (*LookupConnectorResult, error) {
		return LookupConnector(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectorResultOutput, *LookupConnectorResult](outputResult)
}

// A collection of arguments for invoking getConnector.
type LookupConnectorOutputArgs struct {
	// Name of the connector.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupConnectorOutputArgs) ToOutput() pulumix.Output[*LookupConnectorArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectorArgs {
		return &LookupConnectorArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorResult)(nil)).Elem()
}

func (o LookupConnectorResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectorResult] {
	return pulumix.Output[*LookupConnectorResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectorResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectorResult](o, func(v *LookupConnectorResult) string { return v.Arn })
}

func (o LookupConnectorResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectorResult](o, func(v *LookupConnectorResult) string { return v.Description })
}

func (o LookupConnectorResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectorResult](o, func(v *LookupConnectorResult) string { return v.Id })
}

func (o LookupConnectorResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectorResult](o, func(v *LookupConnectorResult) string { return v.Name })
}

func (o LookupConnectorResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectorResult](o, func(v *LookupConnectorResult) string { return v.Version })
}
