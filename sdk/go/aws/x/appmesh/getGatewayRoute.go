// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The App Mesh Gateway Route data source allows details of an App Mesh Gateway Route to be retrieved by its name, mesh_name, virtual_gateway_name, and optionally the mesh_owner.
func LookupGatewayRoute(ctx *pulumi.Context, args *LookupGatewayRouteArgs, opts ...pulumi.InvokeOption) (*LookupGatewayRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGatewayRouteResult
	err := ctx.Invoke("aws:appmesh/getGatewayRoute:getGatewayRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGatewayRoute.
type LookupGatewayRouteArgs struct {
	// Name of the service mesh in which the virtual gateway exists.
	MeshName string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name of the gateway route.
	Name string `pulumi:"name"`
	// Map of tags.
	Tags map[string]string `pulumi:"tags"`
	// Name of the virtual gateway in which the route exists.
	VirtualGatewayName string `pulumi:"virtualGatewayName"`
}

// A collection of values returned by getGatewayRoute.
type LookupGatewayRouteResult struct {
	// ARN of the gateway route.
	Arn string `pulumi:"arn"`
	// Creation date of the gateway route.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Last update date of the gateway route.
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	MeshName        string `pulumi:"meshName"`
	MeshOwner       string `pulumi:"meshOwner"`
	Name            string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner string `pulumi:"resourceOwner"`
	// Gateway route specification. See the `appmesh.GatewayRoute` resource for details.
	Specs []GetGatewayRouteSpec `pulumi:"specs"`
	// Map of tags.
	Tags               map[string]string `pulumi:"tags"`
	VirtualGatewayName string            `pulumi:"virtualGatewayName"`
}

func LookupGatewayRouteOutput(ctx *pulumi.Context, args LookupGatewayRouteOutputArgs, opts ...pulumi.InvokeOption) LookupGatewayRouteResultOutput {
	outputResult := pulumix.ApplyErr[*LookupGatewayRouteArgs](args.ToOutput(), func(plainArgs *LookupGatewayRouteArgs) (*LookupGatewayRouteResult, error) {
		return LookupGatewayRoute(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupGatewayRouteResultOutput, *LookupGatewayRouteResult](outputResult)
}

// A collection of arguments for invoking getGatewayRoute.
type LookupGatewayRouteOutputArgs struct {
	// Name of the service mesh in which the virtual gateway exists.
	MeshName pulumix.Input[string] `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner.
	MeshOwner pulumix.Input[*string] `pulumi:"meshOwner"`
	// Name of the gateway route.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Name of the virtual gateway in which the route exists.
	VirtualGatewayName pulumix.Input[string] `pulumi:"virtualGatewayName"`
}

func (args LookupGatewayRouteOutputArgs) ToOutput() pulumix.Output[*LookupGatewayRouteArgs] {
	allArgs := pulumix.All(
		args.MeshName.ToOutput(context.Background()).AsAny(),
		args.MeshOwner.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VirtualGatewayName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupGatewayRouteArgs {
		return &LookupGatewayRouteArgs{
			MeshName:           resolvedArgs[0].(string),
			MeshOwner:          resolvedArgs[1].(*string),
			Name:               resolvedArgs[2].(string),
			Tags:               resolvedArgs[3].(map[string]string),
			VirtualGatewayName: resolvedArgs[4].(string),
		}
	})
}

type LookupGatewayRouteResultOutput struct{ *pulumi.OutputState }

func (LookupGatewayRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGatewayRouteResult)(nil)).Elem()
}

func (o LookupGatewayRouteResultOutput) ToOutput(context.Context) pulumix.Output[*LookupGatewayRouteResult] {
	return pulumix.Output[*LookupGatewayRouteResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupGatewayRouteResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.Arn })
}

func (o LookupGatewayRouteResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.CreatedDate })
}

func (o LookupGatewayRouteResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.Id })
}

func (o LookupGatewayRouteResultOutput) LastUpdatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.LastUpdatedDate })
}

func (o LookupGatewayRouteResultOutput) MeshName() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.MeshName })
}

func (o LookupGatewayRouteResultOutput) MeshOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.MeshOwner })
}

func (o LookupGatewayRouteResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.Name })
}

func (o LookupGatewayRouteResultOutput) ResourceOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.ResourceOwner })
}

func (o LookupGatewayRouteResultOutput) Specs() pulumix.GArrayOutput[GetGatewayRouteSpec, GetGatewayRouteSpecOutput] {
	value := pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) []GetGatewayRouteSpec { return v.Specs })
	return pulumix.GArrayOutput[GetGatewayRouteSpec, GetGatewayRouteSpecOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGatewayRouteResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGatewayRouteResultOutput) VirtualGatewayName() pulumix.Output[string] {
	return pulumix.Apply[*LookupGatewayRouteResult](o, func(v *LookupGatewayRouteResult) string { return v.VirtualGatewayName })
}
