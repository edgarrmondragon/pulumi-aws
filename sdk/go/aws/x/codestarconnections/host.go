// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarconnections

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeStar Host.
//
// > **NOTE:** The `codestarconnections.Host` resource is created in the state `PENDING`. Authentication with the host provider must be completed in the AWS Console. For more information visit [Set up a pending host](https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-host-setup.html).
type Host struct {
	pulumi.CustomResourceState

	// The CodeStar Host ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name pulumix.Output[string] `pulumi:"name"`
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint pulumix.Output[string] `pulumi:"providerEndpoint"`
	// The name of the external provider where your third-party code repository is configured.
	ProviderType pulumix.Output[string] `pulumi:"providerType"`
	// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
	Status pulumix.Output[string] `pulumi:"status"`
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration pulumix.GPtrOutput[HostVpcConfiguration, HostVpcConfigurationOutput] `pulumi:"vpcConfiguration"`
}

// NewHost registers a new resource with the given unique name, arguments, and options.
func NewHost(ctx *pulumi.Context,
	name string, args *HostArgs, opts ...pulumi.ResourceOption) (*Host, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ProviderEndpoint'")
	}
	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Host
	err := ctx.RegisterResource("aws:codestarconnections/host:Host", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHost gets an existing Host resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostState, opts ...pulumi.ResourceOption) (*Host, error) {
	var resource Host
	err := ctx.ReadResource("aws:codestarconnections/host:Host", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Host resources.
type hostState struct {
	// The CodeStar Host ARN.
	Arn *string `pulumi:"arn"`
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name *string `pulumi:"name"`
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint *string `pulumi:"providerEndpoint"`
	// The name of the external provider where your third-party code repository is configured.
	ProviderType *string `pulumi:"providerType"`
	// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
	Status *string `pulumi:"status"`
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration *HostVpcConfiguration `pulumi:"vpcConfiguration"`
}

type HostState struct {
	// The CodeStar Host ARN.
	Arn pulumix.Input[*string]
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name pulumix.Input[*string]
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint pulumix.Input[*string]
	// The name of the external provider where your third-party code repository is configured.
	ProviderType pulumix.Input[*string]
	// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
	Status pulumix.Input[*string]
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration pulumix.Input[*HostVpcConfigurationArgs]
}

func (HostState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostState)(nil)).Elem()
}

type hostArgs struct {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name *string `pulumi:"name"`
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint string `pulumi:"providerEndpoint"`
	// The name of the external provider where your third-party code repository is configured.
	ProviderType string `pulumi:"providerType"`
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration *HostVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a Host resource.
type HostArgs struct {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	Name pulumix.Input[*string]
	// The endpoint of the infrastructure to be represented by the host after it is created.
	ProviderEndpoint pulumix.Input[string]
	// The name of the external provider where your third-party code repository is configured.
	ProviderType pulumix.Input[string]
	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	VpcConfiguration pulumix.Input[*HostVpcConfigurationArgs]
}

func (HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostArgs)(nil)).Elem()
}

type HostOutput struct{ *pulumi.OutputState }

func (HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil)).Elem()
}

func (o HostOutput) ToHostOutput() HostOutput {
	return o
}

func (o HostOutput) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return o
}

func (o HostOutput) ToOutput(ctx context.Context) pulumix.Output[Host] {
	return pulumix.Output[Host]{
		OutputState: o.OutputState,
	}
}

// The CodeStar Host ARN.
func (o HostOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Host](o, func(v Host) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the host to be created. The name must be unique in the calling AWS account.
func (o HostOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Host](o, func(v Host) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The endpoint of the infrastructure to be represented by the host after it is created.
func (o HostOutput) ProviderEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[Host](o, func(v Host) pulumix.Output[string] { return v.ProviderEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the external provider where your third-party code repository is configured.
func (o HostOutput) ProviderType() pulumix.Output[string] {
	value := pulumix.Apply[Host](o, func(v Host) pulumix.Output[string] { return v.ProviderType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The CodeStar Host status. Possible values are `PENDING`, `AVAILABLE`, `VPC_CONFIG_DELETING`, `VPC_CONFIG_INITIALIZING`, and `VPC_CONFIG_FAILED_INITIALIZATION`.
func (o HostOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Host](o, func(v Host) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
func (o HostOutput) VpcConfiguration() pulumix.GPtrOutput[HostVpcConfiguration, HostVpcConfigurationOutput] {
	value := pulumix.Apply[Host](o, func(v Host) pulumix.GPtrOutput[HostVpcConfiguration, HostVpcConfigurationOutput] {
		return v.VpcConfiguration
	})
	unwrapped := pulumix.Flatten[*HostVpcConfiguration, pulumix.GPtrOutput[HostVpcConfiguration, HostVpcConfigurationOutput]](value)
	return pulumix.GPtrOutput[HostVpcConfiguration, HostVpcConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(HostOutput{})
}
