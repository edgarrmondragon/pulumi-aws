// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codepipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodePipeline.
type Pipeline struct {
	pulumi.CustomResourceState

	// The codepipeline ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// One or more artifactStore blocks. Artifact stores are documented below.
	ArtifactStores pulumix.GArrayOutput[PipelineArtifactStore, PipelineArtifactStoreOutput] `pulumi:"artifactStores"`
	// The name of the pipeline.
	Name pulumix.Output[string] `pulumi:"name"`
	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// A stage block. Stages are documented below.
	Stages pulumix.GArrayOutput[PipelineStage, PipelineStageOutput] `pulumi:"stages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactStores == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactStores'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("aws:codepipeline/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws:codepipeline/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	// The codepipeline ARN.
	Arn *string `pulumi:"arn"`
	// One or more artifactStore blocks. Artifact stores are documented below.
	ArtifactStores []PipelineArtifactStore `pulumi:"artifactStores"`
	// The name of the pipeline.
	Name *string `pulumi:"name"`
	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	RoleArn *string `pulumi:"roleArn"`
	// A stage block. Stages are documented below.
	Stages []PipelineStage `pulumi:"stages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type PipelineState struct {
	// The codepipeline ARN.
	Arn pulumix.Input[*string]
	// One or more artifactStore blocks. Artifact stores are documented below.
	ArtifactStores pulumix.Input[[]*PipelineArtifactStoreArgs]
	// The name of the pipeline.
	Name pulumix.Input[*string]
	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	RoleArn pulumix.Input[*string]
	// A stage block. Stages are documented below.
	Stages pulumix.Input[[]*PipelineStageArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// One or more artifactStore blocks. Artifact stores are documented below.
	ArtifactStores []PipelineArtifactStore `pulumi:"artifactStores"`
	// The name of the pipeline.
	Name *string `pulumi:"name"`
	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	RoleArn string `pulumi:"roleArn"`
	// A stage block. Stages are documented below.
	Stages []PipelineStage `pulumi:"stages"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// One or more artifactStore blocks. Artifact stores are documented below.
	ArtifactStores pulumix.Input[[]*PipelineArtifactStoreArgs]
	// The name of the pipeline.
	Name pulumix.Input[*string]
	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	RoleArn pulumix.Input[string]
	// A stage block. Stages are documented below.
	Stages pulumix.Input[[]*PipelineStageArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

func (o PipelineOutput) ToOutput(ctx context.Context) pulumix.Output[Pipeline] {
	return pulumix.Output[Pipeline]{
		OutputState: o.OutputState,
	}
}

// The codepipeline ARN.
func (o PipelineOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more artifactStore blocks. Artifact stores are documented below.
func (o PipelineOutput) ArtifactStores() pulumix.GArrayOutput[PipelineArtifactStore, PipelineArtifactStoreOutput] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.GArrayOutput[PipelineArtifactStore, PipelineArtifactStoreOutput] {
		return v.ArtifactStores
	})
	unwrapped := pulumix.Flatten[[]PipelineArtifactStore, pulumix.GArrayOutput[PipelineArtifactStore, PipelineArtifactStoreOutput]](value)
	return pulumix.GArrayOutput[PipelineArtifactStore, PipelineArtifactStoreOutput]{OutputState: unwrapped.OutputState}
}

// The name of the pipeline.
func (o PipelineOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
func (o PipelineOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A stage block. Stages are documented below.
func (o PipelineOutput) Stages() pulumix.GArrayOutput[PipelineStage, PipelineStageOutput] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.GArrayOutput[PipelineStage, PipelineStageOutput] { return v.Stages })
	unwrapped := pulumix.Flatten[[]PipelineStage, pulumix.GArrayOutput[PipelineStage, PipelineStageOutput]](value)
	return pulumix.GArrayOutput[PipelineStage, PipelineStageOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PipelineOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PipelineOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Pipeline](o, func(v Pipeline) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PipelineOutput{})
}
