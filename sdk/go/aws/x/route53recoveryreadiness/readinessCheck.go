// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Readiness Readiness Check.
type ReadinessCheck struct {
	pulumi.CustomResourceState

	// ARN of the readiness_check
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Unique name describing the readiness check.
	ReadinessCheckName pulumix.Output[string] `pulumi:"readinessCheckName"`
	// Name describing the resource set that will be monitored for readiness.
	//
	// The following arguments are optional:
	ResourceSetName pulumix.Output[string] `pulumi:"resourceSetName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewReadinessCheck registers a new resource with the given unique name, arguments, and options.
func NewReadinessCheck(ctx *pulumi.Context,
	name string, args *ReadinessCheckArgs, opts ...pulumi.ResourceOption) (*ReadinessCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReadinessCheckName == nil {
		return nil, errors.New("invalid value for required argument 'ReadinessCheckName'")
	}
	if args.ResourceSetName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceSetName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReadinessCheck
	err := ctx.RegisterResource("aws:route53recoveryreadiness/readinessCheck:ReadinessCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReadinessCheck gets an existing ReadinessCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReadinessCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReadinessCheckState, opts ...pulumi.ResourceOption) (*ReadinessCheck, error) {
	var resource ReadinessCheck
	err := ctx.ReadResource("aws:route53recoveryreadiness/readinessCheck:ReadinessCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReadinessCheck resources.
type readinessCheckState struct {
	// ARN of the readiness_check
	Arn *string `pulumi:"arn"`
	// Unique name describing the readiness check.
	ReadinessCheckName *string `pulumi:"readinessCheckName"`
	// Name describing the resource set that will be monitored for readiness.
	//
	// The following arguments are optional:
	ResourceSetName *string `pulumi:"resourceSetName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ReadinessCheckState struct {
	// ARN of the readiness_check
	Arn pulumix.Input[*string]
	// Unique name describing the readiness check.
	ReadinessCheckName pulumix.Input[*string]
	// Name describing the resource set that will be monitored for readiness.
	//
	// The following arguments are optional:
	ResourceSetName pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ReadinessCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*readinessCheckState)(nil)).Elem()
}

type readinessCheckArgs struct {
	// Unique name describing the readiness check.
	ReadinessCheckName string `pulumi:"readinessCheckName"`
	// Name describing the resource set that will be monitored for readiness.
	//
	// The following arguments are optional:
	ResourceSetName string `pulumi:"resourceSetName"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ReadinessCheck resource.
type ReadinessCheckArgs struct {
	// Unique name describing the readiness check.
	ReadinessCheckName pulumix.Input[string]
	// Name describing the resource set that will be monitored for readiness.
	//
	// The following arguments are optional:
	ResourceSetName pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (ReadinessCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*readinessCheckArgs)(nil)).Elem()
}

type ReadinessCheckOutput struct{ *pulumi.OutputState }

func (ReadinessCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheck)(nil)).Elem()
}

func (o ReadinessCheckOutput) ToReadinessCheckOutput() ReadinessCheckOutput {
	return o
}

func (o ReadinessCheckOutput) ToReadinessCheckOutputWithContext(ctx context.Context) ReadinessCheckOutput {
	return o
}

func (o ReadinessCheckOutput) ToOutput(ctx context.Context) pulumix.Output[ReadinessCheck] {
	return pulumix.Output[ReadinessCheck]{
		OutputState: o.OutputState,
	}
}

// ARN of the readiness_check
func (o ReadinessCheckOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ReadinessCheck](o, func(v ReadinessCheck) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name describing the readiness check.
func (o ReadinessCheckOutput) ReadinessCheckName() pulumix.Output[string] {
	value := pulumix.Apply[ReadinessCheck](o, func(v ReadinessCheck) pulumix.Output[string] { return v.ReadinessCheckName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name describing the resource set that will be monitored for readiness.
//
// The following arguments are optional:
func (o ReadinessCheckOutput) ResourceSetName() pulumix.Output[string] {
	value := pulumix.Apply[ReadinessCheck](o, func(v ReadinessCheck) pulumix.Output[string] { return v.ResourceSetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o ReadinessCheckOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ReadinessCheck](o, func(v ReadinessCheck) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ReadinessCheckOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ReadinessCheck](o, func(v ReadinessCheck) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ReadinessCheckOutput{})
}
