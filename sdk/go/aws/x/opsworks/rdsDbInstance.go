// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks RDS DB Instance resource.
type RdsDbInstance struct {
	pulumi.CustomResourceState

	// A db password
	DbPassword pulumix.Output[string] `pulumi:"dbPassword"`
	// A db username
	DbUser pulumix.Output[string] `pulumi:"dbUser"`
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn pulumix.Output[string] `pulumi:"rdsDbInstanceArn"`
	// The stack to register a db instance for. Changing this will force a new resource.
	StackId pulumix.Output[string] `pulumi:"stackId"`
}

// NewRdsDbInstance registers a new resource with the given unique name, arguments, and options.
func NewRdsDbInstance(ctx *pulumi.Context,
	name string, args *RdsDbInstanceArgs, opts ...pulumi.ResourceOption) (*RdsDbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbPassword == nil {
		return nil, errors.New("invalid value for required argument 'DbPassword'")
	}
	if args.DbUser == nil {
		return nil, errors.New("invalid value for required argument 'DbUser'")
	}
	if args.RdsDbInstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'RdsDbInstanceArn'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.DbPassword != nil {
		untypedSecretValue := pulumi.ToSecret(args.DbPassword.ToOutput(ctx.Context()).Untyped())
		args.DbPassword = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"dbPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsDbInstance
	err := ctx.RegisterResource("aws:opsworks/rdsDbInstance:RdsDbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsDbInstance gets an existing RdsDbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsDbInstanceState, opts ...pulumi.ResourceOption) (*RdsDbInstance, error) {
	var resource RdsDbInstance
	err := ctx.ReadResource("aws:opsworks/rdsDbInstance:RdsDbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsDbInstance resources.
type rdsDbInstanceState struct {
	// A db password
	DbPassword *string `pulumi:"dbPassword"`
	// A db username
	DbUser *string `pulumi:"dbUser"`
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn *string `pulumi:"rdsDbInstanceArn"`
	// The stack to register a db instance for. Changing this will force a new resource.
	StackId *string `pulumi:"stackId"`
}

type RdsDbInstanceState struct {
	// A db password
	DbPassword pulumix.Input[*string]
	// A db username
	DbUser pulumix.Input[*string]
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn pulumix.Input[*string]
	// The stack to register a db instance for. Changing this will force a new resource.
	StackId pulumix.Input[*string]
}

func (RdsDbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsDbInstanceState)(nil)).Elem()
}

type rdsDbInstanceArgs struct {
	// A db password
	DbPassword string `pulumi:"dbPassword"`
	// A db username
	DbUser string `pulumi:"dbUser"`
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn string `pulumi:"rdsDbInstanceArn"`
	// The stack to register a db instance for. Changing this will force a new resource.
	StackId string `pulumi:"stackId"`
}

// The set of arguments for constructing a RdsDbInstance resource.
type RdsDbInstanceArgs struct {
	// A db password
	DbPassword pulumix.Input[string]
	// A db username
	DbUser pulumix.Input[string]
	// The db instance to register for this stack. Changing this will force a new resource.
	RdsDbInstanceArn pulumix.Input[string]
	// The stack to register a db instance for. Changing this will force a new resource.
	StackId pulumix.Input[string]
}

func (RdsDbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsDbInstanceArgs)(nil)).Elem()
}

type RdsDbInstanceOutput struct{ *pulumi.OutputState }

func (RdsDbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsDbInstance)(nil)).Elem()
}

func (o RdsDbInstanceOutput) ToRdsDbInstanceOutput() RdsDbInstanceOutput {
	return o
}

func (o RdsDbInstanceOutput) ToRdsDbInstanceOutputWithContext(ctx context.Context) RdsDbInstanceOutput {
	return o
}

func (o RdsDbInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[RdsDbInstance] {
	return pulumix.Output[RdsDbInstance]{
		OutputState: o.OutputState,
	}
}

// A db password
func (o RdsDbInstanceOutput) DbPassword() pulumix.Output[string] {
	value := pulumix.Apply[RdsDbInstance](o, func(v RdsDbInstance) pulumix.Output[string] { return v.DbPassword })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A db username
func (o RdsDbInstanceOutput) DbUser() pulumix.Output[string] {
	value := pulumix.Apply[RdsDbInstance](o, func(v RdsDbInstance) pulumix.Output[string] { return v.DbUser })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The db instance to register for this stack. Changing this will force a new resource.
func (o RdsDbInstanceOutput) RdsDbInstanceArn() pulumix.Output[string] {
	value := pulumix.Apply[RdsDbInstance](o, func(v RdsDbInstance) pulumix.Output[string] { return v.RdsDbInstanceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The stack to register a db instance for. Changing this will force a new resource.
func (o RdsDbInstanceOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[RdsDbInstance](o, func(v RdsDbInstance) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RdsDbInstanceOutput{})
}
