// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the IP ranges of various AWS products and services. For more information about the contents of this data source and required JSON syntax if referencing a custom URL, see the [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html).
func GetIpRanges(ctx *pulumi.Context, args *GetIpRangesArgs, opts ...pulumi.InvokeOption) (*GetIpRangesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpRangesResult
	err := ctx.Invoke("aws:index/getIpRanges:getIpRanges", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpRanges.
type GetIpRangesArgs struct {
	Id *string `pulumi:"id"`
	// Filter IP ranges by regions (or include all regions, if
	// omitted). Valid items are `global` (for `cloudfront`) as well as all AWS regions
	// (e.g., `eu-central-1`)
	Regions []string `pulumi:"regions"`
	// Filter IP ranges by services. Valid items are `amazon`
	// (for amazon.com), `amazonConnect`, `apiGateway`, `cloud9`, `cloudfront`,
	// `codebuild`, `dynamodb`, `ec2`, `ec2InstanceConnect`, `globalaccelerator`,
	// `route53`, `route53Healthchecks`, `s3` and `workspacesGateways`. See the
	// [`service` attribute][2] documentation for other possible values.
	//
	// > **NOTE:** If the specified combination of regions and services does not yield any
	// CIDR blocks, this call will fail.
	Services []string `pulumi:"services"`
	// Custom URL for source JSON file. Syntax must match [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html). Defaults to `https://ip-ranges.amazonaws.com/ip-ranges.json`.
	Url *string `pulumi:"url"`
}

// A collection of values returned by getIpRanges.
type GetIpRangesResult struct {
	// Lexically ordered list of CIDR blocks.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// Publication time of the IP ranges (e.g., `2016-08-03-23-46-05`).
	CreateDate string `pulumi:"createDate"`
	Id         string `pulumi:"id"`
	// Lexically ordered list of IPv6 CIDR blocks.
	Ipv6CidrBlocks []string `pulumi:"ipv6CidrBlocks"`
	Regions        []string `pulumi:"regions"`
	Services       []string `pulumi:"services"`
	// Publication time of the IP ranges, in Unix epoch time format
	// (e.g., `1470267965`).
	SyncToken int     `pulumi:"syncToken"`
	Url       *string `pulumi:"url"`
}

func GetIpRangesOutput(ctx *pulumi.Context, args GetIpRangesOutputArgs, opts ...pulumi.InvokeOption) GetIpRangesResultOutput {
	outputResult := pulumix.ApplyErr[*GetIpRangesArgs](args.ToOutput(), func(plainArgs *GetIpRangesArgs) (*GetIpRangesResult, error) {
		return GetIpRanges(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetIpRangesResultOutput, *GetIpRangesResult](outputResult)
}

// A collection of arguments for invoking getIpRanges.
type GetIpRangesOutputArgs struct {
	Id pulumix.Input[*string] `pulumi:"id"`
	// Filter IP ranges by regions (or include all regions, if
	// omitted). Valid items are `global` (for `cloudfront`) as well as all AWS regions
	// (e.g., `eu-central-1`)
	Regions pulumix.Input[[]string] `pulumi:"regions"`
	// Filter IP ranges by services. Valid items are `amazon`
	// (for amazon.com), `amazonConnect`, `apiGateway`, `cloud9`, `cloudfront`,
	// `codebuild`, `dynamodb`, `ec2`, `ec2InstanceConnect`, `globalaccelerator`,
	// `route53`, `route53Healthchecks`, `s3` and `workspacesGateways`. See the
	// [`service` attribute][2] documentation for other possible values.
	//
	// > **NOTE:** If the specified combination of regions and services does not yield any
	// CIDR blocks, this call will fail.
	Services pulumix.Input[[]string] `pulumi:"services"`
	// Custom URL for source JSON file. Syntax must match [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html). Defaults to `https://ip-ranges.amazonaws.com/ip-ranges.json`.
	Url pulumix.Input[*string] `pulumi:"url"`
}

func (args GetIpRangesOutputArgs) ToOutput() pulumix.Output[*GetIpRangesArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Regions.ToOutput(context.Background()).AsAny(),
		args.Services.ToOutput(context.Background()).AsAny(),
		args.Url.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetIpRangesArgs {
		return &GetIpRangesArgs{
			Id:       resolvedArgs[0].(*string),
			Regions:  resolvedArgs[1].([]string),
			Services: resolvedArgs[2].([]string),
			Url:      resolvedArgs[3].(*string),
		}
	})
}

type GetIpRangesResultOutput struct{ *pulumi.OutputState }

func (GetIpRangesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpRangesResult)(nil)).Elem()
}

func (o GetIpRangesResultOutput) ToOutput(context.Context) pulumix.Output[*GetIpRangesResult] {
	return pulumix.Output[*GetIpRangesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetIpRangesResultOutput) CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) []string { return v.CidrBlocks })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetIpRangesResultOutput) CreateDate() pulumix.Output[string] {
	return pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) string { return v.CreateDate })
}

func (o GetIpRangesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) string { return v.Id })
}

func (o GetIpRangesResultOutput) Ipv6CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) []string { return v.Ipv6CidrBlocks })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetIpRangesResultOutput) Regions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) []string { return v.Regions })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetIpRangesResultOutput) Services() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) []string { return v.Services })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetIpRangesResultOutput) SyncToken() pulumix.Output[int] {
	return pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) int { return v.SyncToken })
}

func (o GetIpRangesResultOutput) Url() pulumix.Output[*string] {
	return pulumix.Apply[*GetIpRangesResult](o, func(v *GetIpRangesResult) *string { return v.Url })
}
