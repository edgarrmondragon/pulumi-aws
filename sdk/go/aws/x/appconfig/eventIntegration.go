// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon AppIntegrations Event Integration resource.
type EventIntegration struct {
	pulumi.CustomResourceState

	// ARN of the Event Integration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the Event Integration.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	EventFilter pulumix.GPtrOutput[EventIntegrationEventFilter, EventIntegrationEventFilterOutput] `pulumi:"eventFilter"`
	// EventBridge bus.
	EventbridgeBus pulumix.Output[string] `pulumi:"eventbridgeBus"`
	// Name of the Event Integration.
	Name pulumix.Output[string] `pulumi:"name"`
	// Tags to apply to the Event Integration. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewEventIntegration registers a new resource with the given unique name, arguments, and options.
func NewEventIntegration(ctx *pulumi.Context,
	name string, args *EventIntegrationArgs, opts ...pulumi.ResourceOption) (*EventIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventFilter == nil {
		return nil, errors.New("invalid value for required argument 'EventFilter'")
	}
	if args.EventbridgeBus == nil {
		return nil, errors.New("invalid value for required argument 'EventbridgeBus'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventIntegration
	err := ctx.RegisterResource("aws:appconfig/eventIntegration:EventIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventIntegration gets an existing EventIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventIntegrationState, opts ...pulumi.ResourceOption) (*EventIntegration, error) {
	var resource EventIntegration
	err := ctx.ReadResource("aws:appconfig/eventIntegration:EventIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventIntegration resources.
type eventIntegrationState struct {
	// ARN of the Event Integration.
	Arn *string `pulumi:"arn"`
	// Description of the Event Integration.
	Description *string `pulumi:"description"`
	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	EventFilter *EventIntegrationEventFilter `pulumi:"eventFilter"`
	// EventBridge bus.
	EventbridgeBus *string `pulumi:"eventbridgeBus"`
	// Name of the Event Integration.
	Name *string `pulumi:"name"`
	// Tags to apply to the Event Integration. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type EventIntegrationState struct {
	// ARN of the Event Integration.
	Arn pulumix.Input[*string]
	// Description of the Event Integration.
	Description pulumix.Input[*string]
	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	EventFilter pulumix.Input[*EventIntegrationEventFilterArgs]
	// EventBridge bus.
	EventbridgeBus pulumix.Input[*string]
	// Name of the Event Integration.
	Name pulumix.Input[*string]
	// Tags to apply to the Event Integration. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (EventIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventIntegrationState)(nil)).Elem()
}

type eventIntegrationArgs struct {
	// Description of the Event Integration.
	Description *string `pulumi:"description"`
	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	EventFilter EventIntegrationEventFilter `pulumi:"eventFilter"`
	// EventBridge bus.
	EventbridgeBus string `pulumi:"eventbridgeBus"`
	// Name of the Event Integration.
	Name *string `pulumi:"name"`
	// Tags to apply to the Event Integration. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EventIntegration resource.
type EventIntegrationArgs struct {
	// Description of the Event Integration.
	Description pulumix.Input[*string]
	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	EventFilter pulumix.Input[*EventIntegrationEventFilterArgs]
	// EventBridge bus.
	EventbridgeBus pulumix.Input[string]
	// Name of the Event Integration.
	Name pulumix.Input[*string]
	// Tags to apply to the Event Integration. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (EventIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventIntegrationArgs)(nil)).Elem()
}

type EventIntegrationOutput struct{ *pulumi.OutputState }

func (EventIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegration)(nil)).Elem()
}

func (o EventIntegrationOutput) ToEventIntegrationOutput() EventIntegrationOutput {
	return o
}

func (o EventIntegrationOutput) ToEventIntegrationOutputWithContext(ctx context.Context) EventIntegrationOutput {
	return o
}

func (o EventIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[EventIntegration] {
	return pulumix.Output[EventIntegration]{
		OutputState: o.OutputState,
	}
}

// ARN of the Event Integration.
func (o EventIntegrationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the Event Integration.
func (o EventIntegrationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
func (o EventIntegrationOutput) EventFilter() pulumix.GPtrOutput[EventIntegrationEventFilter, EventIntegrationEventFilterOutput] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.GPtrOutput[EventIntegrationEventFilter, EventIntegrationEventFilterOutput] {
		return v.EventFilter
	})
	unwrapped := pulumix.Flatten[*EventIntegrationEventFilter, pulumix.GPtrOutput[EventIntegrationEventFilter, EventIntegrationEventFilterOutput]](value)
	return pulumix.GPtrOutput[EventIntegrationEventFilter, EventIntegrationEventFilterOutput]{OutputState: unwrapped.OutputState}
}

// EventBridge bus.
func (o EventIntegrationOutput) EventbridgeBus() pulumix.Output[string] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.Output[string] { return v.EventbridgeBus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the Event Integration.
func (o EventIntegrationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the Event Integration. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EventIntegrationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o EventIntegrationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventIntegration](o, func(v EventIntegration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EventIntegrationOutput{})
}
