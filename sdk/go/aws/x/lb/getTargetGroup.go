// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **Note:** `alb.TargetGroup` is known as `lb.TargetGroup`. The functionality is identical.
//
// Provides information about a Load Balancer Target Group.
//
// This data source can prove useful when a module accepts an LB Target Group as an
// input variable and needs to know its attributes. It can also be used to get the ARN of
// an LB Target Group for use in other resources, given LB Target Group name.
func LookupTargetGroup(ctx *pulumi.Context, args *LookupTargetGroupArgs, opts ...pulumi.InvokeOption) (*LookupTargetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTargetGroupResult
	err := ctx.Invoke("aws:lb/getTargetGroup:getTargetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTargetGroup.
type LookupTargetGroupArgs struct {
	// Full ARN of the target group.
	Arn *string `pulumi:"arn"`
	// Unique name of the target group.
	Name *string `pulumi:"name"`
	// Mapping of tags, each pair of which must exactly match a pair on the desired target group.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence. `tags` has the lowest precedence.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getTargetGroup.
type LookupTargetGroupResult struct {
	Arn                   string                    `pulumi:"arn"`
	ArnSuffix             string                    `pulumi:"arnSuffix"`
	ConnectionTermination bool                      `pulumi:"connectionTermination"`
	DeregistrationDelay   int                       `pulumi:"deregistrationDelay"`
	HealthCheck           GetTargetGroupHealthCheck `pulumi:"healthCheck"`
	// The provider-assigned unique ID for this managed resource.
	Id                             string                   `pulumi:"id"`
	LambdaMultiValueHeadersEnabled bool                     `pulumi:"lambdaMultiValueHeadersEnabled"`
	LoadBalancingAlgorithmType     string                   `pulumi:"loadBalancingAlgorithmType"`
	LoadBalancingCrossZoneEnabled  string                   `pulumi:"loadBalancingCrossZoneEnabled"`
	Name                           string                   `pulumi:"name"`
	Port                           int                      `pulumi:"port"`
	PreserveClientIp               string                   `pulumi:"preserveClientIp"`
	Protocol                       string                   `pulumi:"protocol"`
	ProtocolVersion                string                   `pulumi:"protocolVersion"`
	ProxyProtocolV2                bool                     `pulumi:"proxyProtocolV2"`
	SlowStart                      int                      `pulumi:"slowStart"`
	Stickiness                     GetTargetGroupStickiness `pulumi:"stickiness"`
	Tags                           map[string]string        `pulumi:"tags"`
	TargetType                     string                   `pulumi:"targetType"`
	VpcId                          string                   `pulumi:"vpcId"`
}

func LookupTargetGroupOutput(ctx *pulumi.Context, args LookupTargetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupTargetGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTargetGroupArgs](args.ToOutput(), func(plainArgs *LookupTargetGroupArgs) (*LookupTargetGroupResult, error) {
		return LookupTargetGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTargetGroupResultOutput, *LookupTargetGroupResult](outputResult)
}

// A collection of arguments for invoking getTargetGroup.
type LookupTargetGroupOutputArgs struct {
	// Full ARN of the target group.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Unique name of the target group.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Mapping of tags, each pair of which must exactly match a pair on the desired target group.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence. `tags` has the lowest precedence.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupTargetGroupOutputArgs) ToOutput() pulumix.Output[*LookupTargetGroupArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTargetGroupArgs {
		return &LookupTargetGroupArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
			Tags: resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupTargetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupTargetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetGroupResult)(nil)).Elem()
}

func (o LookupTargetGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTargetGroupResult] {
	return pulumix.Output[*LookupTargetGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTargetGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.Arn })
}

func (o LookupTargetGroupResultOutput) ArnSuffix() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.ArnSuffix })
}

func (o LookupTargetGroupResultOutput) ConnectionTermination() pulumix.Output[bool] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) bool { return v.ConnectionTermination })
}

func (o LookupTargetGroupResultOutput) DeregistrationDelay() pulumix.Output[int] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) int { return v.DeregistrationDelay })
}

func (o LookupTargetGroupResultOutput) HealthCheck() pulumix.GPtrOutput[GetTargetGroupHealthCheck, GetTargetGroupHealthCheckOutput] {
	value := pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) GetTargetGroupHealthCheck { return v.HealthCheck })
	return pulumix.GPtrOutput[GetTargetGroupHealthCheck, GetTargetGroupHealthCheckOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTargetGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.Id })
}

func (o LookupTargetGroupResultOutput) LambdaMultiValueHeadersEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) bool { return v.LambdaMultiValueHeadersEnabled })
}

func (o LookupTargetGroupResultOutput) LoadBalancingAlgorithmType() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.LoadBalancingAlgorithmType })
}

func (o LookupTargetGroupResultOutput) LoadBalancingCrossZoneEnabled() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.LoadBalancingCrossZoneEnabled })
}

func (o LookupTargetGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.Name })
}

func (o LookupTargetGroupResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) int { return v.Port })
}

func (o LookupTargetGroupResultOutput) PreserveClientIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.PreserveClientIp })
}

func (o LookupTargetGroupResultOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.Protocol })
}

func (o LookupTargetGroupResultOutput) ProtocolVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.ProtocolVersion })
}

func (o LookupTargetGroupResultOutput) ProxyProtocolV2() pulumix.Output[bool] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) bool { return v.ProxyProtocolV2 })
}

func (o LookupTargetGroupResultOutput) SlowStart() pulumix.Output[int] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) int { return v.SlowStart })
}

func (o LookupTargetGroupResultOutput) Stickiness() pulumix.GPtrOutput[GetTargetGroupStickiness, GetTargetGroupStickinessOutput] {
	value := pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) GetTargetGroupStickiness { return v.Stickiness })
	return pulumix.GPtrOutput[GetTargetGroupStickiness, GetTargetGroupStickinessOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTargetGroupResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupTargetGroupResultOutput) TargetType() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.TargetType })
}

func (o LookupTargetGroupResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupTargetGroupResult](o, func(v *LookupTargetGroupResult) string { return v.VpcId })
}
