// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a VPC Endpoint resource.
//
// > **NOTE on VPC Endpoints and VPC Endpoint Associations:** The provider provides both standalone VPC Endpoint Associations for
// Route Tables - (an association between a VPC endpoint and a single `routeTableId`),
// Security Groups - (an association between a VPC endpoint and a single `securityGroupId`),
// and Subnets - (an association between a VPC endpoint and a single `subnetId`) and
// a VPC Endpoint resource with `routeTableIds` and `subnetIds` attributes.
// Do not use the same resource ID in both a VPC Endpoint resource and a VPC Endpoint Association resource.
// Doing so will cause a conflict of associations and will overwrite the association.
type VpcEndpoint struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the VPC endpoint.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept pulumix.Output[*bool] `pulumi:"autoAccept"`
	// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
	CidrBlocks pulumix.ArrayOutput[string] `pulumi:"cidrBlocks"`
	// The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
	DnsEntries pulumix.GArrayOutput[VpcEndpointDnsEntry, VpcEndpointDnsEntryOutput] `pulumi:"dnsEntries"`
	// The DNS options for the endpoint. See dnsOptions below.
	DnsOptions pulumix.GPtrOutput[VpcEndpointDnsOptions, VpcEndpointDnsOptionsOutput] `pulumi:"dnsOptions"`
	// The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
	IpAddressType pulumix.Output[string] `pulumi:"ipAddressType"`
	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
	NetworkInterfaceIds pulumix.ArrayOutput[string] `pulumi:"networkInterfaceIds"`
	// The ID of the AWS account that owns the VPC endpoint.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
	PrefixListId pulumix.Output[string] `pulumi:"prefixListId"`
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled pulumix.Output[*bool] `pulumi:"privateDnsEnabled"`
	// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
	RequesterManaged pulumix.Output[bool] `pulumi:"requesterManaged"`
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds pulumix.ArrayOutput[string] `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
	// If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName pulumix.Output[string] `pulumi:"serviceName"`
	// The state of the VPC endpoint.
	State pulumix.Output[string] `pulumi:"state"`
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
	VpcEndpointType pulumix.Output[*string] `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewVpcEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpoint(ctx *pulumi.Context,
	name string, args *VpcEndpointArgs, opts ...pulumi.ResourceOption) (*VpcEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpoint
	err := ctx.RegisterResource("aws:ec2/vpcEndpoint:VpcEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpoint gets an existing VpcEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointState, opts ...pulumi.ResourceOption) (*VpcEndpoint, error) {
	var resource VpcEndpoint
	err := ctx.ReadResource("aws:ec2/vpcEndpoint:VpcEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpoint resources.
type vpcEndpointState struct {
	// The Amazon Resource Name (ARN) of the VPC endpoint.
	Arn *string `pulumi:"arn"`
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept *bool `pulumi:"autoAccept"`
	// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
	DnsEntries []VpcEndpointDnsEntry `pulumi:"dnsEntries"`
	// The DNS options for the endpoint. See dnsOptions below.
	DnsOptions *VpcEndpointDnsOptions `pulumi:"dnsOptions"`
	// The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// The ID of the AWS account that owns the VPC endpoint.
	OwnerId *string `pulumi:"ownerId"`
	// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy *string `pulumi:"policy"`
	// The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
	PrefixListId *string `pulumi:"prefixListId"`
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled *bool `pulumi:"privateDnsEnabled"`
	// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
	RequesterManaged *bool `pulumi:"requesterManaged"`
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
	// If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName *string `pulumi:"serviceName"`
	// The state of the VPC endpoint.
	State *string `pulumi:"state"`
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
	VpcEndpointType *string `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId *string `pulumi:"vpcId"`
}

type VpcEndpointState struct {
	// The Amazon Resource Name (ARN) of the VPC endpoint.
	Arn pulumix.Input[*string]
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept pulumix.Input[*bool]
	// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
	CidrBlocks pulumix.Input[[]string]
	// The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
	DnsEntries pulumix.Input[[]*VpcEndpointDnsEntryArgs]
	// The DNS options for the endpoint. See dnsOptions below.
	DnsOptions pulumix.Input[*VpcEndpointDnsOptionsArgs]
	// The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
	IpAddressType pulumix.Input[*string]
	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
	NetworkInterfaceIds pulumix.Input[[]string]
	// The ID of the AWS account that owns the VPC endpoint.
	OwnerId pulumix.Input[*string]
	// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy pulumix.Input[*string]
	// The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
	PrefixListId pulumix.Input[*string]
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled pulumix.Input[*bool]
	// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
	RequesterManaged pulumix.Input[*bool]
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds pulumix.Input[[]string]
	// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
	// If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
	SecurityGroupIds pulumix.Input[[]string]
	// The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName pulumix.Input[*string]
	// The state of the VPC endpoint.
	State pulumix.Input[*string]
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
	VpcEndpointType pulumix.Input[*string]
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumix.Input[*string]
}

func (VpcEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointState)(nil)).Elem()
}

type vpcEndpointArgs struct {
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept *bool `pulumi:"autoAccept"`
	// The DNS options for the endpoint. See dnsOptions below.
	DnsOptions *VpcEndpointDnsOptions `pulumi:"dnsOptions"`
	// The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
	IpAddressType *string `pulumi:"ipAddressType"`
	// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy *string `pulumi:"policy"`
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled *bool `pulumi:"privateDnsEnabled"`
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
	// If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName string `pulumi:"serviceName"`
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
	VpcEndpointType *string `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcEndpoint resource.
type VpcEndpointArgs struct {
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	AutoAccept pulumix.Input[*bool]
	// The DNS options for the endpoint. See dnsOptions below.
	DnsOptions pulumix.Input[*VpcEndpointDnsOptionsArgs]
	// The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
	IpAddressType pulumix.Input[*string]
	// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
	Policy pulumix.Input[*string]
	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
	// Defaults to `false`.
	PrivateDnsEnabled pulumix.Input[*bool]
	// One or more route table IDs. Applicable for endpoints of type `Gateway`.
	RouteTableIds pulumix.Input[[]string]
	// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
	// If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
	SecurityGroupIds pulumix.Input[[]string]
	// The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName pulumix.Input[string]
	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
	VpcEndpointType pulumix.Input[*string]
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumix.Input[string]
}

func (VpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointArgs)(nil)).Elem()
}

type VpcEndpointOutput struct{ *pulumi.OutputState }

func (VpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpoint)(nil)).Elem()
}

func (o VpcEndpointOutput) ToVpcEndpointOutput() VpcEndpointOutput {
	return o
}

func (o VpcEndpointOutput) ToVpcEndpointOutputWithContext(ctx context.Context) VpcEndpointOutput {
	return o
}

func (o VpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[VpcEndpoint] {
	return pulumix.Output[VpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the VPC endpoint.
func (o VpcEndpointOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
func (o VpcEndpointOutput) AutoAccept() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[*bool] { return v.AutoAccept })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
func (o VpcEndpointOutput) CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.ArrayOutput[string] { return v.CidrBlocks })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS blocks are documented below.
func (o VpcEndpointOutput) DnsEntries() pulumix.GArrayOutput[VpcEndpointDnsEntry, VpcEndpointDnsEntryOutput] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.GArrayOutput[VpcEndpointDnsEntry, VpcEndpointDnsEntryOutput] {
		return v.DnsEntries
	})
	unwrapped := pulumix.Flatten[[]VpcEndpointDnsEntry, pulumix.GArrayOutput[VpcEndpointDnsEntry, VpcEndpointDnsEntryOutput]](value)
	return pulumix.GArrayOutput[VpcEndpointDnsEntry, VpcEndpointDnsEntryOutput]{OutputState: unwrapped.OutputState}
}

// The DNS options for the endpoint. See dnsOptions below.
func (o VpcEndpointOutput) DnsOptions() pulumix.GPtrOutput[VpcEndpointDnsOptions, VpcEndpointDnsOptionsOutput] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.GPtrOutput[VpcEndpointDnsOptions, VpcEndpointDnsOptionsOutput] {
		return v.DnsOptions
	})
	unwrapped := pulumix.Flatten[*VpcEndpointDnsOptions, pulumix.GPtrOutput[VpcEndpointDnsOptions, VpcEndpointDnsOptionsOutput]](value)
	return pulumix.GPtrOutput[VpcEndpointDnsOptions, VpcEndpointDnsOptionsOutput]{OutputState: unwrapped.OutputState}
}

// The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
func (o VpcEndpointOutput) IpAddressType() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.IpAddressType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
func (o VpcEndpointOutput) NetworkInterfaceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.ArrayOutput[string] { return v.NetworkInterfaceIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the AWS account that owns the VPC endpoint.
func (o VpcEndpointOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
func (o VpcEndpointOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
func (o VpcEndpointOutput) PrefixListId() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.PrefixListId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type `Interface`.
// Defaults to `false`.
func (o VpcEndpointOutput) PrivateDnsEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[*bool] { return v.PrivateDnsEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
func (o VpcEndpointOutput) RequesterManaged() pulumix.Output[bool] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[bool] { return v.RequesterManaged })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// One or more route table IDs. Applicable for endpoints of type `Gateway`.
func (o VpcEndpointOutput) RouteTableIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.ArrayOutput[string] { return v.RouteTableIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
// If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
func (o VpcEndpointOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
func (o VpcEndpointOutput) ServiceName() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.ServiceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the VPC endpoint.
func (o VpcEndpointOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`.
func (o VpcEndpointOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcEndpointOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcEndpointOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
func (o VpcEndpointOutput) VpcEndpointType() pulumix.Output[*string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[*string] { return v.VpcEndpointType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the VPC in which the endpoint will be used.
func (o VpcEndpointOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointOutput{})
}
