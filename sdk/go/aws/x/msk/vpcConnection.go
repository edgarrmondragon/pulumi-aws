// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Managed Streaming for Kafka VPC Connection.
type VpcConnection struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the VPC connection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication pulumix.Output[string] `pulumi:"authentication"`
	// The list of subnets in the client VPC to connect to.
	ClientSubnets pulumix.ArrayOutput[string] `pulumi:"clientSubnets"`
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn pulumix.Output[string] `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewVpcConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcConnection(ctx *pulumi.Context,
	name string, args *VpcConnectionArgs, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.ClientSubnets == nil {
		return nil, errors.New("invalid value for required argument 'ClientSubnets'")
	}
	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.TargetClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetClusterArn'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcConnection
	err := ctx.RegisterResource("aws:msk/vpcConnection:VpcConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcConnection gets an existing VpcConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcConnectionState, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	var resource VpcConnection
	err := ctx.ReadResource("aws:msk/vpcConnection:VpcConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcConnection resources.
type vpcConnectionState struct {
	// Amazon Resource Name (ARN) of the VPC connection.
	Arn *string `pulumi:"arn"`
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication *string `pulumi:"authentication"`
	// The list of subnets in the client VPC to connect to.
	ClientSubnets []string `pulumi:"clientSubnets"`
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn *string `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId *string `pulumi:"vpcId"`
}

type VpcConnectionState struct {
	// Amazon Resource Name (ARN) of the VPC connection.
	Arn pulumix.Input[*string]
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication pulumix.Input[*string]
	// The list of subnets in the client VPC to connect to.
	ClientSubnets pulumix.Input[[]string]
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn pulumix.Input[*string]
	// The VPC ID of the remote client.
	VpcId pulumix.Input[*string]
}

func (VpcConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionState)(nil)).Elem()
}

type vpcConnectionArgs struct {
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication string `pulumi:"authentication"`
	// The list of subnets in the client VPC to connect to.
	ClientSubnets []string `pulumi:"clientSubnets"`
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups []string `pulumi:"securityGroups"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn string `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcConnection resource.
type VpcConnectionArgs struct {
	// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
	Authentication pulumix.Input[string]
	// The list of subnets in the client VPC to connect to.
	ClientSubnets pulumix.Input[[]string]
	// The security groups to attach to the ENIs for the broker nodes.
	SecurityGroups pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn pulumix.Input[string]
	// The VPC ID of the remote client.
	VpcId pulumix.Input[string]
}

func (VpcConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionArgs)(nil)).Elem()
}

type VpcConnectionOutput struct{ *pulumi.OutputState }

func (VpcConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnection)(nil)).Elem()
}

func (o VpcConnectionOutput) ToVpcConnectionOutput() VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnection] {
	return pulumix.Output[VpcConnection]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the VPC connection.
func (o VpcConnectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The authentication type for the client VPC connection. Specify one of these auth type strings: SASL_IAM, SASL_SCRAM, or TLS.
func (o VpcConnectionOutput) Authentication() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.Authentication })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of subnets in the client VPC to connect to.
func (o VpcConnectionOutput) ClientSubnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.ArrayOutput[string] { return v.ClientSubnets })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The security groups to attach to the ENIs for the broker nodes.
func (o VpcConnectionOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcConnectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcConnectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the cluster.
func (o VpcConnectionOutput) TargetClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.TargetClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The VPC ID of the remote client.
func (o VpcConnectionOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcConnectionOutput{})
}
