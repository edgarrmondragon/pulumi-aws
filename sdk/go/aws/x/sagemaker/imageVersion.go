// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Image Version resource.
type ImageVersion struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The registry path of the container image on which this image version is based.
	BaseImage pulumix.Output[string] `pulumi:"baseImage"`
	// The registry path of the container image that contains this image version.
	ContainerImage pulumix.Output[string] `pulumi:"containerImage"`
	// The Amazon Resource Name (ARN) of the image the version is based on.
	ImageArn pulumix.Output[string] `pulumi:"imageArn"`
	// The name of the image. Must be unique to your account.
	ImageName pulumix.Output[string] `pulumi:"imageName"`
	Version   pulumix.Output[int]    `pulumi:"version"`
}

// NewImageVersion registers a new resource with the given unique name, arguments, and options.
func NewImageVersion(ctx *pulumi.Context,
	name string, args *ImageVersionArgs, opts ...pulumi.ResourceOption) (*ImageVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseImage == nil {
		return nil, errors.New("invalid value for required argument 'BaseImage'")
	}
	if args.ImageName == nil {
		return nil, errors.New("invalid value for required argument 'ImageName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageVersion
	err := ctx.RegisterResource("aws:sagemaker/imageVersion:ImageVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageVersion gets an existing ImageVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageVersionState, opts ...pulumi.ResourceOption) (*ImageVersion, error) {
	var resource ImageVersion
	err := ctx.ReadResource("aws:sagemaker/imageVersion:ImageVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageVersion resources.
type imageVersionState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
	Arn *string `pulumi:"arn"`
	// The registry path of the container image on which this image version is based.
	BaseImage *string `pulumi:"baseImage"`
	// The registry path of the container image that contains this image version.
	ContainerImage *string `pulumi:"containerImage"`
	// The Amazon Resource Name (ARN) of the image the version is based on.
	ImageArn *string `pulumi:"imageArn"`
	// The name of the image. Must be unique to your account.
	ImageName *string `pulumi:"imageName"`
	Version   *int    `pulumi:"version"`
}

type ImageVersionState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
	Arn pulumix.Input[*string]
	// The registry path of the container image on which this image version is based.
	BaseImage pulumix.Input[*string]
	// The registry path of the container image that contains this image version.
	ContainerImage pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the image the version is based on.
	ImageArn pulumix.Input[*string]
	// The name of the image. Must be unique to your account.
	ImageName pulumix.Input[*string]
	Version   pulumix.Input[*int]
}

func (ImageVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageVersionState)(nil)).Elem()
}

type imageVersionArgs struct {
	// The registry path of the container image on which this image version is based.
	BaseImage string `pulumi:"baseImage"`
	// The name of the image. Must be unique to your account.
	ImageName string `pulumi:"imageName"`
}

// The set of arguments for constructing a ImageVersion resource.
type ImageVersionArgs struct {
	// The registry path of the container image on which this image version is based.
	BaseImage pulumix.Input[string]
	// The name of the image. Must be unique to your account.
	ImageName pulumix.Input[string]
}

func (ImageVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageVersionArgs)(nil)).Elem()
}

type ImageVersionOutput struct{ *pulumi.OutputState }

func (ImageVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVersion)(nil)).Elem()
}

func (o ImageVersionOutput) ToImageVersionOutput() ImageVersionOutput {
	return o
}

func (o ImageVersionOutput) ToImageVersionOutputWithContext(ctx context.Context) ImageVersionOutput {
	return o
}

func (o ImageVersionOutput) ToOutput(ctx context.Context) pulumix.Output[ImageVersion] {
	return pulumix.Output[ImageVersion]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
func (o ImageVersionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ImageVersion](o, func(v ImageVersion) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The registry path of the container image on which this image version is based.
func (o ImageVersionOutput) BaseImage() pulumix.Output[string] {
	value := pulumix.Apply[ImageVersion](o, func(v ImageVersion) pulumix.Output[string] { return v.BaseImage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The registry path of the container image that contains this image version.
func (o ImageVersionOutput) ContainerImage() pulumix.Output[string] {
	value := pulumix.Apply[ImageVersion](o, func(v ImageVersion) pulumix.Output[string] { return v.ContainerImage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the image the version is based on.
func (o ImageVersionOutput) ImageArn() pulumix.Output[string] {
	value := pulumix.Apply[ImageVersion](o, func(v ImageVersion) pulumix.Output[string] { return v.ImageArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the image. Must be unique to your account.
func (o ImageVersionOutput) ImageName() pulumix.Output[string] {
	value := pulumix.Apply[ImageVersion](o, func(v ImageVersion) pulumix.Output[string] { return v.ImageName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ImageVersionOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[ImageVersion](o, func(v ImageVersion) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ImageVersionOutput{})
}
