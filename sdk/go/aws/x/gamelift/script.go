// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an GameLift Script resource.
type Script struct {
	pulumi.CustomResourceState

	// GameLift Script ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of the script
	Name pulumix.Output[string] `pulumi:"name"`
	// Information indicating where your game script files are stored. See below.
	StorageLocation pulumix.GPtrOutput[ScriptStorageLocation, ScriptStorageLocationOutput] `pulumi:"storageLocation"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Version that is associated with this script.
	Version pulumix.Output[*string] `pulumi:"version"`
	// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
	ZipFile pulumix.Output[*string] `pulumi:"zipFile"`
}

// NewScript registers a new resource with the given unique name, arguments, and options.
func NewScript(ctx *pulumi.Context,
	name string, args *ScriptArgs, opts ...pulumi.ResourceOption) (*Script, error) {
	if args == nil {
		args = &ScriptArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Script
	err := ctx.RegisterResource("aws:gamelift/script:Script", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScript gets an existing Script resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScriptState, opts ...pulumi.ResourceOption) (*Script, error) {
	var resource Script
	err := ctx.ReadResource("aws:gamelift/script:Script", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Script resources.
type scriptState struct {
	// GameLift Script ARN.
	Arn *string `pulumi:"arn"`
	// Name of the script
	Name *string `pulumi:"name"`
	// Information indicating where your game script files are stored. See below.
	StorageLocation *ScriptStorageLocation `pulumi:"storageLocation"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Version that is associated with this script.
	Version *string `pulumi:"version"`
	// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
	ZipFile *string `pulumi:"zipFile"`
}

type ScriptState struct {
	// GameLift Script ARN.
	Arn pulumix.Input[*string]
	// Name of the script
	Name pulumix.Input[*string]
	// Information indicating where your game script files are stored. See below.
	StorageLocation pulumix.Input[*ScriptStorageLocationArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Version that is associated with this script.
	Version pulumix.Input[*string]
	// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
	ZipFile pulumix.Input[*string]
}

func (ScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptState)(nil)).Elem()
}

type scriptArgs struct {
	// Name of the script
	Name *string `pulumi:"name"`
	// Information indicating where your game script files are stored. See below.
	StorageLocation *ScriptStorageLocation `pulumi:"storageLocation"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Version that is associated with this script.
	Version *string `pulumi:"version"`
	// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
	ZipFile *string `pulumi:"zipFile"`
}

// The set of arguments for constructing a Script resource.
type ScriptArgs struct {
	// Name of the script
	Name pulumix.Input[*string]
	// Information indicating where your game script files are stored. See below.
	StorageLocation pulumix.Input[*ScriptStorageLocationArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Version that is associated with this script.
	Version pulumix.Input[*string]
	// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
	ZipFile pulumix.Input[*string]
}

func (ScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptArgs)(nil)).Elem()
}

type ScriptOutput struct{ *pulumi.OutputState }

func (ScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Script)(nil)).Elem()
}

func (o ScriptOutput) ToScriptOutput() ScriptOutput {
	return o
}

func (o ScriptOutput) ToScriptOutputWithContext(ctx context.Context) ScriptOutput {
	return o
}

func (o ScriptOutput) ToOutput(ctx context.Context) pulumix.Output[Script] {
	return pulumix.Output[Script]{
		OutputState: o.OutputState,
	}
}

// GameLift Script ARN.
func (o ScriptOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the script
func (o ScriptOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information indicating where your game script files are stored. See below.
func (o ScriptOutput) StorageLocation() pulumix.GPtrOutput[ScriptStorageLocation, ScriptStorageLocationOutput] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.GPtrOutput[ScriptStorageLocation, ScriptStorageLocationOutput] {
		return v.StorageLocation
	})
	unwrapped := pulumix.Flatten[*ScriptStorageLocation, pulumix.GPtrOutput[ScriptStorageLocation, ScriptStorageLocationOutput]](value)
	return pulumix.GPtrOutput[ScriptStorageLocation, ScriptStorageLocationOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ScriptOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ScriptOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Version that is associated with this script.
func (o ScriptOutput) Version() pulumix.Output[*string] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.Output[*string] { return v.Version })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A data object containing your Realtime scripts and dependencies as a zip  file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.
func (o ScriptOutput) ZipFile() pulumix.Output[*string] {
	value := pulumix.Apply[Script](o, func(v Script) pulumix.Output[*string] { return v.ZipFile })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ScriptOutput{})
}
