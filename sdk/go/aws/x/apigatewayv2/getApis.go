// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about multiple Amazon API Gateway Version 2 APIs.
func GetApis(ctx *pulumi.Context, args *GetApisArgs, opts ...pulumi.InvokeOption) (*GetApisResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetApisResult
	err := ctx.Invoke("aws:apigatewayv2/getApis:getApis", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApis.
type GetApisArgs struct {
	// API name.
	Name *string `pulumi:"name"`
	// API protocol.
	ProtocolType *string `pulumi:"protocolType"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired APIs.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getApis.
type GetApisResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of API identifiers.
	Ids          []string          `pulumi:"ids"`
	Name         *string           `pulumi:"name"`
	ProtocolType *string           `pulumi:"protocolType"`
	Tags         map[string]string `pulumi:"tags"`
}

func GetApisOutput(ctx *pulumi.Context, args GetApisOutputArgs, opts ...pulumi.InvokeOption) GetApisResultOutput {
	outputResult := pulumix.ApplyErr[*GetApisArgs](args.ToOutput(), func(plainArgs *GetApisArgs) (*GetApisResult, error) {
		return GetApis(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetApisResultOutput, *GetApisResult](outputResult)
}

// A collection of arguments for invoking getApis.
type GetApisOutputArgs struct {
	// API name.
	Name pulumix.Input[*string] `pulumi:"name"`
	// API protocol.
	ProtocolType pulumix.Input[*string] `pulumi:"protocolType"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired APIs.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetApisOutputArgs) ToOutput() pulumix.Output[*GetApisArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.ProtocolType.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetApisArgs {
		return &GetApisArgs{
			Name:         resolvedArgs[0].(*string),
			ProtocolType: resolvedArgs[1].(*string),
			Tags:         resolvedArgs[2].(map[string]string),
		}
	})
}

type GetApisResultOutput struct{ *pulumi.OutputState }

func (GetApisResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApisResult)(nil)).Elem()
}

func (o GetApisResultOutput) ToOutput(context.Context) pulumix.Output[*GetApisResult] {
	return pulumix.Output[*GetApisResult]{
		OutputState: o.OutputState,
	}
}

func (o GetApisResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetApisResult](o, func(v *GetApisResult) string { return v.Id })
}

func (o GetApisResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetApisResult](o, func(v *GetApisResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetApisResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*GetApisResult](o, func(v *GetApisResult) *string { return v.Name })
}

func (o GetApisResultOutput) ProtocolType() pulumix.Output[*string] {
	return pulumix.Apply[*GetApisResult](o, func(v *GetApisResult) *string { return v.ProtocolType })
}

func (o GetApisResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetApisResult](o, func(v *GetApisResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
