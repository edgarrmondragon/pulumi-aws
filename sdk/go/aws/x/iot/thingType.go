// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages an AWS IoT Thing Type.
type ThingType struct {
	pulumi.CustomResourceState

	// The ARN of the created AWS IoT Thing Type.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumix.Output[*bool] `pulumi:"deprecated"`
	// The name of the thing type.
	Name pulumix.Output[string] `pulumi:"name"`
	// , Configuration block that can contain the following properties of the thing type:
	Properties pulumix.GPtrOutput[ThingTypeProperties, ThingTypePropertiesOutput] `pulumi:"properties"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewThingType registers a new resource with the given unique name, arguments, and options.
func NewThingType(ctx *pulumi.Context,
	name string, args *ThingTypeArgs, opts ...pulumi.ResourceOption) (*ThingType, error) {
	if args == nil {
		args = &ThingTypeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ThingType
	err := ctx.RegisterResource("aws:iot/thingType:ThingType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThingType gets an existing ThingType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThingType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThingTypeState, opts ...pulumi.ResourceOption) (*ThingType, error) {
	var resource ThingType
	err := ctx.ReadResource("aws:iot/thingType:ThingType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThingType resources.
type thingTypeState struct {
	// The ARN of the created AWS IoT Thing Type.
	Arn *string `pulumi:"arn"`
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated *bool `pulumi:"deprecated"`
	// The name of the thing type.
	Name *string `pulumi:"name"`
	// , Configuration block that can contain the following properties of the thing type:
	Properties *ThingTypeProperties `pulumi:"properties"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ThingTypeState struct {
	// The ARN of the created AWS IoT Thing Type.
	Arn pulumix.Input[*string]
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumix.Input[*bool]
	// The name of the thing type.
	Name pulumix.Input[*string]
	// , Configuration block that can contain the following properties of the thing type:
	Properties pulumix.Input[*ThingTypePropertiesArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ThingTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*thingTypeState)(nil)).Elem()
}

type thingTypeArgs struct {
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated *bool `pulumi:"deprecated"`
	// The name of the thing type.
	Name *string `pulumi:"name"`
	// , Configuration block that can contain the following properties of the thing type:
	Properties *ThingTypeProperties `pulumi:"properties"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ThingType resource.
type ThingTypeArgs struct {
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumix.Input[*bool]
	// The name of the thing type.
	Name pulumix.Input[*string]
	// , Configuration block that can contain the following properties of the thing type:
	Properties pulumix.Input[*ThingTypePropertiesArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (ThingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*thingTypeArgs)(nil)).Elem()
}

type ThingTypeOutput struct{ *pulumi.OutputState }

func (ThingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingType)(nil)).Elem()
}

func (o ThingTypeOutput) ToThingTypeOutput() ThingTypeOutput {
	return o
}

func (o ThingTypeOutput) ToThingTypeOutputWithContext(ctx context.Context) ThingTypeOutput {
	return o
}

func (o ThingTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ThingType] {
	return pulumix.Output[ThingType]{
		OutputState: o.OutputState,
	}
}

// The ARN of the created AWS IoT Thing Type.
func (o ThingTypeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ThingType](o, func(v ThingType) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the thing type is deprecated. If true, no new things could be associated with this type.
func (o ThingTypeOutput) Deprecated() pulumix.Output[*bool] {
	value := pulumix.Apply[ThingType](o, func(v ThingType) pulumix.Output[*bool] { return v.Deprecated })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the thing type.
func (o ThingTypeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ThingType](o, func(v ThingType) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// , Configuration block that can contain the following properties of the thing type:
func (o ThingTypeOutput) Properties() pulumix.GPtrOutput[ThingTypeProperties, ThingTypePropertiesOutput] {
	value := pulumix.Apply[ThingType](o, func(v ThingType) pulumix.GPtrOutput[ThingTypeProperties, ThingTypePropertiesOutput] {
		return v.Properties
	})
	unwrapped := pulumix.Flatten[*ThingTypeProperties, pulumix.GPtrOutput[ThingTypeProperties, ThingTypePropertiesOutput]](value)
	return pulumix.GPtrOutput[ThingTypeProperties, ThingTypePropertiesOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o ThingTypeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ThingType](o, func(v ThingType) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ThingTypeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ThingType](o, func(v ThingType) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ThingTypeOutput{})
}
