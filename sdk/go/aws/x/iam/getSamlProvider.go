// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// IAM SAML provider. This will allow you to easily retrieve the metadata
// document of an existing SAML provider.
func LookupSamlProvider(ctx *pulumi.Context, args *LookupSamlProviderArgs, opts ...pulumi.InvokeOption) (*LookupSamlProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSamlProviderResult
	err := ctx.Invoke("aws:iam/getSamlProvider:getSamlProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSamlProvider.
type LookupSamlProviderArgs struct {
	// ARN assigned by AWS for the provider.
	Arn string `pulumi:"arn"`
	// Tags attached to the SAML provider.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSamlProvider.
type LookupSamlProviderResult struct {
	Arn string `pulumi:"arn"`
	// Creation date of the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2006 15:04:05 MST`.
	CreateDate string `pulumi:"createDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the provider.
	Name string `pulumi:"name"`
	// The XML document generated by an identity provider that supports SAML 2.0.
	SamlMetadataDocument string `pulumi:"samlMetadataDocument"`
	// Tags attached to the SAML provider.
	Tags map[string]string `pulumi:"tags"`
	// Expiration date and time for the SAML provider in RFC1123 format, e.g. `Mon, 02 Jan 2007 15:04:05 MST`.
	ValidUntil string `pulumi:"validUntil"`
}

func LookupSamlProviderOutput(ctx *pulumi.Context, args LookupSamlProviderOutputArgs, opts ...pulumi.InvokeOption) LookupSamlProviderResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSamlProviderArgs](args.ToOutput(), func(plainArgs *LookupSamlProviderArgs) (*LookupSamlProviderResult, error) {
		return LookupSamlProvider(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSamlProviderResultOutput, *LookupSamlProviderResult](outputResult)
}

// A collection of arguments for invoking getSamlProvider.
type LookupSamlProviderOutputArgs struct {
	// ARN assigned by AWS for the provider.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Tags attached to the SAML provider.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSamlProviderOutputArgs) ToOutput() pulumix.Output[*LookupSamlProviderArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSamlProviderArgs {
		return &LookupSamlProviderArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupSamlProviderResultOutput struct{ *pulumi.OutputState }

func (LookupSamlProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSamlProviderResult)(nil)).Elem()
}

func (o LookupSamlProviderResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSamlProviderResult] {
	return pulumix.Output[*LookupSamlProviderResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSamlProviderResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) string { return v.Arn })
}

func (o LookupSamlProviderResultOutput) CreateDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) string { return v.CreateDate })
}

func (o LookupSamlProviderResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) string { return v.Id })
}

func (o LookupSamlProviderResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) string { return v.Name })
}

func (o LookupSamlProviderResultOutput) SamlMetadataDocument() pulumix.Output[string] {
	return pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) string { return v.SamlMetadataDocument })
}

func (o LookupSamlProviderResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSamlProviderResultOutput) ValidUntil() pulumix.Output[string] {
	return pulumix.Apply[*LookupSamlProviderResult](o, func(v *LookupSamlProviderResult) string { return v.ValidUntil })
}
