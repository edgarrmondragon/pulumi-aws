// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AutoScaling Scaling Policy resource.
//
// > **NOTE:** You may want to omit `desiredCapacity` attribute from attached `autoscaling.Group`
// when using autoscaling policies. It's good practice to pick either
// [manual](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html)
// or [dynamic](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html)
// (policy-based) scaling.
type Policy struct {
	pulumi.CustomResourceState

	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType pulumix.Output[*string] `pulumi:"adjustmentType"`
	// ARN assigned by AWS to the scaling policy.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of the autoscaling group.
	AutoscalingGroupName pulumix.Output[string] `pulumi:"autoscalingGroupName"`
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown pulumix.Output[*int] `pulumi:"cooldown"`
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup pulumix.Output[*int] `pulumi:"estimatedInstanceWarmup"`
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType pulumix.Output[string] `pulumi:"metricAggregationType"`
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude pulumix.Output[*int] `pulumi:"minAdjustmentMagnitude"`
	// Name of the policy.
	Name pulumix.Output[string] `pulumi:"name"`
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType pulumix.Output[*string] `pulumi:"policyType"`
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration pulumix.GPtrOutput[PolicyPredictiveScalingConfiguration, PolicyPredictiveScalingConfigurationOutput] `pulumi:"predictiveScalingConfiguration"`
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment pulumix.Output[*int] `pulumi:"scalingAdjustment"`
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments pulumix.GArrayOutput[PolicyStepAdjustment, PolicyStepAdjustmentOutput] `pulumi:"stepAdjustments"`
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration pulumix.GPtrOutput[PolicyTargetTrackingConfiguration, PolicyTargetTrackingConfigurationOutput] `pulumi:"targetTrackingConfiguration"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("aws:autoscaling/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws:autoscaling/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType *string `pulumi:"adjustmentType"`
	// ARN assigned by AWS to the scaling policy.
	Arn *string `pulumi:"arn"`
	// Name of the autoscaling group.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown *int `pulumi:"cooldown"`
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled *bool `pulumi:"enabled"`
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup *int `pulumi:"estimatedInstanceWarmup"`
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType *string `pulumi:"metricAggregationType"`
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude *int `pulumi:"minAdjustmentMagnitude"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType *string `pulumi:"policyType"`
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration *PolicyPredictiveScalingConfiguration `pulumi:"predictiveScalingConfiguration"`
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment *int `pulumi:"scalingAdjustment"`
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments []PolicyStepAdjustment `pulumi:"stepAdjustments"`
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration *PolicyTargetTrackingConfiguration `pulumi:"targetTrackingConfiguration"`
}

type PolicyState struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType pulumix.Input[*string]
	// ARN assigned by AWS to the scaling policy.
	Arn pulumix.Input[*string]
	// Name of the autoscaling group.
	AutoscalingGroupName pulumix.Input[*string]
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown pulumix.Input[*int]
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled pulumix.Input[*bool]
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup pulumix.Input[*int]
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType pulumix.Input[*string]
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude pulumix.Input[*int]
	// Name of the policy.
	Name pulumix.Input[*string]
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType pulumix.Input[*string]
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration pulumix.Input[*PolicyPredictiveScalingConfigurationArgs]
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment pulumix.Input[*int]
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments pulumix.Input[[]*PolicyStepAdjustmentArgs]
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration pulumix.Input[*PolicyTargetTrackingConfigurationArgs]
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType *string `pulumi:"adjustmentType"`
	// Name of the autoscaling group.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown *int `pulumi:"cooldown"`
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled *bool `pulumi:"enabled"`
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup *int `pulumi:"estimatedInstanceWarmup"`
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType *string `pulumi:"metricAggregationType"`
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude *int `pulumi:"minAdjustmentMagnitude"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType *string `pulumi:"policyType"`
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration *PolicyPredictiveScalingConfiguration `pulumi:"predictiveScalingConfiguration"`
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment *int `pulumi:"scalingAdjustment"`
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments []PolicyStepAdjustment `pulumi:"stepAdjustments"`
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration *PolicyTargetTrackingConfiguration `pulumi:"targetTrackingConfiguration"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
	AdjustmentType pulumix.Input[*string]
	// Name of the autoscaling group.
	AutoscalingGroupName pulumix.Input[string]
	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	Cooldown pulumix.Input[*int]
	// Whether the scaling policy is enabled or disabled. Default: `true`.
	//
	// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
	Enabled pulumix.Input[*bool]
	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	EstimatedInstanceWarmup pulumix.Input[*int]
	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	MetricAggregationType pulumix.Input[*string]
	// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
	//
	// The following arguments are only available to "SimpleScaling" type policies:
	MinAdjustmentMagnitude pulumix.Input[*int]
	// Name of the policy.
	Name pulumix.Input[*string]
	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	PolicyType pulumix.Input[*string]
	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	PredictiveScalingConfiguration pulumix.Input[*PolicyPredictiveScalingConfigurationArgs]
	// Number of members by which to
	// scale, when the adjustment bounds are breached. A positive value scales
	// up. A negative value scales down.
	ScalingAdjustment pulumix.Input[*int]
	// Set of adjustments that manage
	// group scaling. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("1"),
	// 					MetricIntervalUpperBound: pulumi.String("2"),
	// 					ScalingAdjustment:        -1,
	// 				},
	// 				&autoscaling.PolicyStepAdjustmentArgs{
	// 					MetricIntervalLowerBound: pulumi.String("2"),
	// 					MetricIntervalUpperBound: pulumi.String("3"),
	// 					ScalingAdjustment:        pulumi.Int(1),
	// 				},
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in step adjustments:
	StepAdjustments pulumix.Input[[]*PolicyStepAdjustmentArgs]
	// Target tracking policy. These have the following structure:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
	// 			TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
	// 				PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
	// 					PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
	// 				},
	// 				TargetValue: pulumi.Float64(40),
	// 			},
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The following fields are available in target tracking configuration:
	TargetTrackingConfiguration pulumix.Input[*PolicyTargetTrackingConfigurationArgs]
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToOutput(ctx context.Context) pulumix.Output[Policy] {
	return pulumix.Output[Policy]{
		OutputState: o.OutputState,
	}
}

// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
func (o PolicyOutput) AdjustmentType() pulumix.Output[*string] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*string] { return v.AdjustmentType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN assigned by AWS to the scaling policy.
func (o PolicyOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the autoscaling group.
func (o PolicyOutput) AutoscalingGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[string] { return v.AutoscalingGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
func (o PolicyOutput) Cooldown() pulumix.Output[*int] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*int] { return v.Cooldown })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Whether the scaling policy is enabled or disabled. Default: `true`.
//
// The following argument is only available to "SimpleScaling" and "StepScaling" type policies:
func (o PolicyOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
func (o PolicyOutput) EstimatedInstanceWarmup() pulumix.Output[*int] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*int] { return v.EstimatedInstanceWarmup })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
func (o PolicyOutput) MetricAggregationType() pulumix.Output[string] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[string] { return v.MetricAggregationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
//
// The following arguments are only available to "SimpleScaling" type policies:
func (o PolicyOutput) MinAdjustmentMagnitude() pulumix.Output[*int] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*int] { return v.MinAdjustmentMagnitude })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Name of the policy.
func (o PolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
func (o PolicyOutput) PolicyType() pulumix.Output[*string] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*string] { return v.PolicyType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
func (o PolicyOutput) PredictiveScalingConfiguration() pulumix.GPtrOutput[PolicyPredictiveScalingConfiguration, PolicyPredictiveScalingConfigurationOutput] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.GPtrOutput[PolicyPredictiveScalingConfiguration, PolicyPredictiveScalingConfigurationOutput] {
		return v.PredictiveScalingConfiguration
	})
	unwrapped := pulumix.Flatten[*PolicyPredictiveScalingConfiguration, pulumix.GPtrOutput[PolicyPredictiveScalingConfiguration, PolicyPredictiveScalingConfigurationOutput]](value)
	return pulumix.GPtrOutput[PolicyPredictiveScalingConfiguration, PolicyPredictiveScalingConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Number of members by which to
// scale, when the adjustment bounds are breached. A positive value scales
// up. A negative value scales down.
func (o PolicyOutput) ScalingAdjustment() pulumix.Output[*int] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.Output[*int] { return v.ScalingAdjustment })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Set of adjustments that manage
// group scaling. These have the following structure:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				StepAdjustments: autoscaling.PolicyStepAdjustmentArray{
//					&autoscaling.PolicyStepAdjustmentArgs{
//						MetricIntervalLowerBound: pulumi.String("1"),
//						MetricIntervalUpperBound: pulumi.String("2"),
//						ScalingAdjustment:        -1,
//					},
//					&autoscaling.PolicyStepAdjustmentArgs{
//						MetricIntervalLowerBound: pulumi.String("2"),
//						MetricIntervalUpperBound: pulumi.String("3"),
//						ScalingAdjustment:        pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// The following fields are available in step adjustments:
func (o PolicyOutput) StepAdjustments() pulumix.GArrayOutput[PolicyStepAdjustment, PolicyStepAdjustmentOutput] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.GArrayOutput[PolicyStepAdjustment, PolicyStepAdjustmentOutput] {
		return v.StepAdjustments
	})
	unwrapped := pulumix.Flatten[[]PolicyStepAdjustment, pulumix.GArrayOutput[PolicyStepAdjustment, PolicyStepAdjustmentOutput]](value)
	return pulumix.GArrayOutput[PolicyStepAdjustment, PolicyStepAdjustmentOutput]{OutputState: unwrapped.OutputState}
}

// Target tracking policy. These have the following structure:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewPolicy(ctx, "example", &autoscaling.PolicyArgs{
//				TargetTrackingConfiguration: &autoscaling.PolicyTargetTrackingConfigurationArgs{
//					PredefinedMetricSpecification: &autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{
//						PredefinedMetricType: pulumi.String("ASGAverageCPUUtilization"),
//					},
//					TargetValue: pulumi.Float64(40),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// The following fields are available in target tracking configuration:
func (o PolicyOutput) TargetTrackingConfiguration() pulumix.GPtrOutput[PolicyTargetTrackingConfiguration, PolicyTargetTrackingConfigurationOutput] {
	value := pulumix.Apply[Policy](o, func(v Policy) pulumix.GPtrOutput[PolicyTargetTrackingConfiguration, PolicyTargetTrackingConfigurationOutput] {
		return v.TargetTrackingConfiguration
	})
	unwrapped := pulumix.Flatten[*PolicyTargetTrackingConfiguration, pulumix.GPtrOutput[PolicyTargetTrackingConfiguration, PolicyTargetTrackingConfigurationOutput]](value)
	return pulumix.GPtrOutput[PolicyTargetTrackingConfiguration, PolicyTargetTrackingConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PolicyOutput{})
}
