// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a MemoryDB User.
//
// More information about users and ACL-s can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/clusters.acls.html).
//
// > **Note:** All arguments including the username and passwords will be stored in the raw state as plain-text.
type User struct {
	pulumi.CustomResourceState

	// The access permissions string used for this user.
	AccessString pulumix.Output[string] `pulumi:"accessString"`
	// The ARN of the user.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput] `pulumi:"authenticationMode"`
	// The minimum engine version supported for the user.
	MinimumEngineVersion pulumix.Output[string] `pulumi:"minimumEngineVersion"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Name of the MemoryDB user. Up to 40 characters.
	//
	// The following arguments are optional:
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessString == nil {
		return nil, errors.New("invalid value for required argument 'AccessString'")
	}
	if args.AuthenticationMode == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationMode'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("aws:memorydb/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:memorydb/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The access permissions string used for this user.
	AccessString *string `pulumi:"accessString"`
	// The ARN of the user.
	Arn *string `pulumi:"arn"`
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode *UserAuthenticationMode `pulumi:"authenticationMode"`
	// The minimum engine version supported for the user.
	MinimumEngineVersion *string `pulumi:"minimumEngineVersion"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Name of the MemoryDB user. Up to 40 characters.
	//
	// The following arguments are optional:
	UserName *string `pulumi:"userName"`
}

type UserState struct {
	// The access permissions string used for this user.
	AccessString pulumix.Input[*string]
	// The ARN of the user.
	Arn pulumix.Input[*string]
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode pulumix.Input[*UserAuthenticationModeArgs]
	// The minimum engine version supported for the user.
	MinimumEngineVersion pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Name of the MemoryDB user. Up to 40 characters.
	//
	// The following arguments are optional:
	UserName pulumix.Input[*string]
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The access permissions string used for this user.
	AccessString string `pulumi:"accessString"`
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode UserAuthenticationMode `pulumi:"authenticationMode"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Name of the MemoryDB user. Up to 40 characters.
	//
	// The following arguments are optional:
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The access permissions string used for this user.
	AccessString pulumix.Input[string]
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode pulumix.Input[*UserAuthenticationModeArgs]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Name of the MemoryDB user. Up to 40 characters.
	//
	// The following arguments are optional:
	UserName pulumix.Input[string]
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ToOutput(ctx context.Context) pulumix.Output[User] {
	return pulumix.Output[User]{
		OutputState: o.OutputState,
	}
}

// The access permissions string used for this user.
func (o UserOutput) AccessString() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.AccessString })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the user.
func (o UserOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Denotes the user's authentication properties. Detailed below.
func (o UserOutput) AuthenticationMode() pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput] {
	value := pulumix.Apply[User](o, func(v User) pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput] {
		return v.AuthenticationMode
	})
	unwrapped := pulumix.Flatten[*UserAuthenticationMode, pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput]](value)
	return pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput]{OutputState: unwrapped.OutputState}
}

// The minimum engine version supported for the user.
func (o UserOutput) MinimumEngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.MinimumEngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o UserOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o UserOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of the MemoryDB user. Up to 40 characters.
//
// The following arguments are optional:
func (o UserOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
