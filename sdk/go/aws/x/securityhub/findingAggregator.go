// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Security Hub finding aggregator. Security Hub needs to be enabled in a region in order for the aggregator to pull through findings.
type FindingAggregator struct {
	pulumi.CustomResourceState

	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode pulumix.Output[string] `pulumi:"linkingMode"`
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions pulumix.ArrayOutput[string] `pulumi:"specifiedRegions"`
}

// NewFindingAggregator registers a new resource with the given unique name, arguments, and options.
func NewFindingAggregator(ctx *pulumi.Context,
	name string, args *FindingAggregatorArgs, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinkingMode == nil {
		return nil, errors.New("invalid value for required argument 'LinkingMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FindingAggregator
	err := ctx.RegisterResource("aws:securityhub/findingAggregator:FindingAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingAggregator gets an existing FindingAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingAggregatorState, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	var resource FindingAggregator
	err := ctx.ReadResource("aws:securityhub/findingAggregator:FindingAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingAggregator resources.
type findingAggregatorState struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode *string `pulumi:"linkingMode"`
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions []string `pulumi:"specifiedRegions"`
}

type FindingAggregatorState struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode pulumix.Input[*string]
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions pulumix.Input[[]string]
}

func (FindingAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorState)(nil)).Elem()
}

type findingAggregatorArgs struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode string `pulumi:"linkingMode"`
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions []string `pulumi:"specifiedRegions"`
}

// The set of arguments for constructing a FindingAggregator resource.
type FindingAggregatorArgs struct {
	// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	LinkingMode pulumix.Input[string]
	// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
	SpecifiedRegions pulumix.Input[[]string]
}

func (FindingAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorArgs)(nil)).Elem()
}

type FindingAggregatorOutput struct{ *pulumi.OutputState }

func (FindingAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) ToOutput(ctx context.Context) pulumix.Output[FindingAggregator] {
	return pulumix.Output[FindingAggregator]{
		OutputState: o.OutputState,
	}
}

// Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
func (o FindingAggregatorOutput) LinkingMode() pulumix.Output[string] {
	value := pulumix.Apply[FindingAggregator](o, func(v FindingAggregator) pulumix.Output[string] { return v.LinkingMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of regions to include or exclude (required if `linkingMode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)
func (o FindingAggregatorOutput) SpecifiedRegions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FindingAggregator](o, func(v FindingAggregator) pulumix.ArrayOutput[string] { return v.SpecifiedRegions })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FindingAggregatorOutput{})
}
