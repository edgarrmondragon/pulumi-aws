// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeCommit Trigger Resource.
type Trigger struct {
	pulumi.CustomResourceState

	// System-generated unique identifier.
	ConfigurationId pulumix.Output[string] `pulumi:"configurationId"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Output[string]                                     `pulumi:"repositoryName"`
	Triggers       pulumix.GArrayOutput[TriggerTrigger, TriggerTriggerOutput] `pulumi:"triggers"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	if args.Triggers == nil {
		return nil, errors.New("invalid value for required argument 'Triggers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trigger
	err := ctx.RegisterResource("aws:codecommit/trigger:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("aws:codecommit/trigger:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
	// System-generated unique identifier.
	ConfigurationId *string `pulumi:"configurationId"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName *string          `pulumi:"repositoryName"`
	Triggers       []TriggerTrigger `pulumi:"triggers"`
}

type TriggerState struct {
	// System-generated unique identifier.
	ConfigurationId pulumix.Input[*string]
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Input[*string]
	Triggers       pulumix.Input[[]*TriggerTriggerArgs]
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName string           `pulumi:"repositoryName"`
	Triggers       []TriggerTrigger `pulumi:"triggers"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Input[string]
	Triggers       pulumix.Input[[]*TriggerTriggerArgs]
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

func (o TriggerOutput) ToOutput(ctx context.Context) pulumix.Output[Trigger] {
	return pulumix.Output[Trigger]{
		OutputState: o.OutputState,
	}
}

// System-generated unique identifier.
func (o TriggerOutput) ConfigurationId() pulumix.Output[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[string] { return v.ConfigurationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for the repository. This needs to be less than 100 characters.
func (o TriggerOutput) RepositoryName() pulumix.Output[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[string] { return v.RepositoryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TriggerOutput) Triggers() pulumix.GArrayOutput[TriggerTrigger, TriggerTriggerOutput] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.GArrayOutput[TriggerTrigger, TriggerTriggerOutput] { return v.Triggers })
	unwrapped := pulumix.Flatten[[]TriggerTrigger, pulumix.GArrayOutput[TriggerTrigger, TriggerTriggerOutput]](value)
	return pulumix.GArrayOutput[TriggerTrigger, TriggerTriggerOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TriggerOutput{})
}
