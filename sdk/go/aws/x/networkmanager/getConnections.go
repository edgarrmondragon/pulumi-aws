// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about connections.
func GetConnections(ctx *pulumi.Context, args *GetConnectionsArgs, opts ...pulumi.InvokeOption) (*GetConnectionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetConnectionsResult
	err := ctx.Invoke("aws:networkmanager/getConnections:getConnections", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnections.
type GetConnectionsArgs struct {
	// ID of the device of the connections to retrieve.
	DeviceId *string `pulumi:"deviceId"`
	// ID of the Global Network of the connections to retrieve.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// Restricts the list to the connections with these tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getConnections.
type GetConnectionsResult struct {
	DeviceId        *string `pulumi:"deviceId"`
	GlobalNetworkId string  `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IDs of the connections.
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
}

func GetConnectionsOutput(ctx *pulumi.Context, args GetConnectionsOutputArgs, opts ...pulumi.InvokeOption) GetConnectionsResultOutput {
	outputResult := pulumix.ApplyErr[*GetConnectionsArgs](args.ToOutput(), func(plainArgs *GetConnectionsArgs) (*GetConnectionsResult, error) {
		return GetConnections(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetConnectionsResultOutput, *GetConnectionsResult](outputResult)
}

// A collection of arguments for invoking getConnections.
type GetConnectionsOutputArgs struct {
	// ID of the device of the connections to retrieve.
	DeviceId pulumix.Input[*string] `pulumi:"deviceId"`
	// ID of the Global Network of the connections to retrieve.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// Restricts the list to the connections with these tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetConnectionsOutputArgs) ToOutput() pulumix.Output[*GetConnectionsArgs] {
	allArgs := pulumix.All(
		args.DeviceId.ToOutput(context.Background()).AsAny(),
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetConnectionsArgs {
		return &GetConnectionsArgs{
			DeviceId:        resolvedArgs[0].(*string),
			GlobalNetworkId: resolvedArgs[1].(string),
			Tags:            resolvedArgs[2].(map[string]string),
		}
	})
}

type GetConnectionsResultOutput struct{ *pulumi.OutputState }

func (GetConnectionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionsResult)(nil)).Elem()
}

func (o GetConnectionsResultOutput) ToOutput(context.Context) pulumix.Output[*GetConnectionsResult] {
	return pulumix.Output[*GetConnectionsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetConnectionsResultOutput) DeviceId() pulumix.Output[*string] {
	return pulumix.Apply[*GetConnectionsResult](o, func(v *GetConnectionsResult) *string { return v.DeviceId })
}

func (o GetConnectionsResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*GetConnectionsResult](o, func(v *GetConnectionsResult) string { return v.GlobalNetworkId })
}

func (o GetConnectionsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetConnectionsResult](o, func(v *GetConnectionsResult) string { return v.Id })
}

func (o GetConnectionsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetConnectionsResult](o, func(v *GetConnectionsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetConnectionsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetConnectionsResult](o, func(v *GetConnectionsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
