// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconvert

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Elemental MediaConvert Queue.
type Queue struct {
	pulumi.CustomResourceState

	// The Arn of the queue
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description of the queue
	Description pulumix.Output[*string] `pulumi:"description"`
	// A unique identifier describing the queue
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan pulumix.Output[*string] `pulumi:"pricingPlan"`
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings pulumix.GPtrOutput[QueueReservationPlanSettings, QueueReservationPlanSettingsOutput] `pulumi:"reservationPlanSettings"`
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status pulumix.Output[*string] `pulumi:"status"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		args = &QueueArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("aws:mediaconvert/queue:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws:mediaconvert/queue:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
	// The Arn of the queue
	Arn *string `pulumi:"arn"`
	// A description of the queue
	Description *string `pulumi:"description"`
	// A unique identifier describing the queue
	Name *string `pulumi:"name"`
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan *string `pulumi:"pricingPlan"`
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings *QueueReservationPlanSettings `pulumi:"reservationPlanSettings"`
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status *string `pulumi:"status"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type QueueState struct {
	// The Arn of the queue
	Arn pulumix.Input[*string]
	// A description of the queue
	Description pulumix.Input[*string]
	// A unique identifier describing the queue
	Name pulumix.Input[*string]
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan pulumix.Input[*string]
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings pulumix.Input[*QueueReservationPlanSettingsArgs]
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	// A description of the queue
	Description *string `pulumi:"description"`
	// A unique identifier describing the queue
	Name *string `pulumi:"name"`
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan *string `pulumi:"pricingPlan"`
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings *QueueReservationPlanSettings `pulumi:"reservationPlanSettings"`
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status *string `pulumi:"status"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// A description of the queue
	Description pulumix.Input[*string]
	// A unique identifier describing the queue
	Name pulumix.Input[*string]
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan pulumix.Input[*string]
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings pulumix.Input[*QueueReservationPlanSettingsArgs]
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

func (o QueueOutput) ToOutput(ctx context.Context) pulumix.Output[Queue] {
	return pulumix.Output[Queue]{
		OutputState: o.OutputState,
	}
}

// The Arn of the queue
func (o QueueOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the queue
func (o QueueOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A unique identifier describing the queue
func (o QueueOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
func (o QueueOutput) PricingPlan() pulumix.Output[*string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.Output[*string] { return v.PricingPlan })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A detail pricing plan of the  reserved queue. See below.
func (o QueueOutput) ReservationPlanSettings() pulumix.GPtrOutput[QueueReservationPlanSettings, QueueReservationPlanSettingsOutput] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.GPtrOutput[QueueReservationPlanSettings, QueueReservationPlanSettingsOutput] {
		return v.ReservationPlanSettings
	})
	unwrapped := pulumix.Flatten[*QueueReservationPlanSettings, pulumix.GPtrOutput[QueueReservationPlanSettings, QueueReservationPlanSettingsOutput]](value)
	return pulumix.GPtrOutput[QueueReservationPlanSettings, QueueReservationPlanSettingsOutput]{OutputState: unwrapped.OutputState}
}

// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
func (o QueueOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o QueueOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o QueueOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Queue](o, func(v Queue) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(QueueOutput{})
}
