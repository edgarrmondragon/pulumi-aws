// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Transfer AS2 Connector resource.
type Connector struct {
	pulumi.CustomResourceState

	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole pulumix.Output[string] `pulumi:"accessRole"`
	// The ARN of the connector.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The parameters to configure for the connector object. Fields documented below.
	As2Config pulumix.GPtrOutput[ConnectorAs2Config, ConnectorAs2ConfigOutput] `pulumi:"as2Config"`
	// The unique identifier for the AS2 profile.
	ConnectorId pulumix.Output[string] `pulumi:"connectorId"`
	// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
	LoggingRole pulumix.Output[*string] `pulumi:"loggingRole"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The URL of the partners AS2 endpoint.
	Url pulumix.Output[string] `pulumi:"url"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessRole == nil {
		return nil, errors.New("invalid value for required argument 'AccessRole'")
	}
	if args.As2Config == nil {
		return nil, errors.New("invalid value for required argument 'As2Config'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("aws:transfer/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("aws:transfer/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole *string `pulumi:"accessRole"`
	// The ARN of the connector.
	Arn *string `pulumi:"arn"`
	// The parameters to configure for the connector object. Fields documented below.
	As2Config *ConnectorAs2Config `pulumi:"as2Config"`
	// The unique identifier for the AS2 profile.
	ConnectorId *string `pulumi:"connectorId"`
	// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
	LoggingRole *string `pulumi:"loggingRole"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The URL of the partners AS2 endpoint.
	Url *string `pulumi:"url"`
}

type ConnectorState struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole pulumix.Input[*string]
	// The ARN of the connector.
	Arn pulumix.Input[*string]
	// The parameters to configure for the connector object. Fields documented below.
	As2Config pulumix.Input[*ConnectorAs2ConfigArgs]
	// The unique identifier for the AS2 profile.
	ConnectorId pulumix.Input[*string]
	// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
	LoggingRole pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The URL of the partners AS2 endpoint.
	Url pulumix.Input[*string]
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole string `pulumi:"accessRole"`
	// The parameters to configure for the connector object. Fields documented below.
	As2Config ConnectorAs2Config `pulumi:"as2Config"`
	// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
	LoggingRole *string `pulumi:"loggingRole"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The URL of the partners AS2 endpoint.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
	AccessRole pulumix.Input[string]
	// The parameters to configure for the connector object. Fields documented below.
	As2Config pulumix.Input[*ConnectorAs2ConfigArgs]
	// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
	LoggingRole pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The URL of the partners AS2 endpoint.
	Url pulumix.Input[string]
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[Connector] {
	return pulumix.Output[Connector]{
		OutputState: o.OutputState,
	}
}

// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
func (o ConnectorOutput) AccessRole() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.AccessRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the connector.
func (o ConnectorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The parameters to configure for the connector object. Fields documented below.
func (o ConnectorOutput) As2Config() pulumix.GPtrOutput[ConnectorAs2Config, ConnectorAs2ConfigOutput] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.GPtrOutput[ConnectorAs2Config, ConnectorAs2ConfigOutput] { return v.As2Config })
	unwrapped := pulumix.Flatten[*ConnectorAs2Config, pulumix.GPtrOutput[ConnectorAs2Config, ConnectorAs2ConfigOutput]](value)
	return pulumix.GPtrOutput[ConnectorAs2Config, ConnectorAs2ConfigOutput]{OutputState: unwrapped.OutputState}
}

// The unique identifier for the AS2 profile.
func (o ConnectorOutput) ConnectorId() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.ConnectorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
func (o ConnectorOutput) LoggingRole() pulumix.Output[*string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[*string] { return v.LoggingRole })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ConnectorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ConnectorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The URL of the partners AS2 endpoint.
func (o ConnectorOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Connector](o, func(v Connector) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ConnectorOutput{})
}
