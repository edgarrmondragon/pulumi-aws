// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Lambda Layer Version Permission resource. It allows you to share you own Lambda Layers to another account by account ID, to all accounts in AWS organization or even to all AWS accounts.
//
// For information about Lambda Layer Permissions and how to use them, see [Using Resource-based Policies for AWS Lambda][1]
//
// > **NOTE:** Setting `skipDestroy` to `true` means that the AWS Provider will _not_ destroy any layer version permission, even when running `pulumi destroy`. Layer version permissions are thus intentional dangling resources that are _not_ managed by Pulumi and may incur extra expense in your AWS account.
type LayerVersionPermission struct {
	pulumi.CustomResourceState

	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action pulumix.Output[string] `pulumi:"action"`
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName pulumix.Output[string] `pulumi:"layerName"`
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId pulumix.Output[*string] `pulumi:"organizationId"`
	// Full Lambda Layer Permission policy.
	Policy pulumix.Output[string] `pulumi:"policy"`
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal pulumix.Output[string] `pulumi:"principal"`
	// A unique identifier for the current revision of the policy.
	RevisionId pulumix.Output[string] `pulumi:"revisionId"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumix.Output[*bool] `pulumi:"skipDestroy"`
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId pulumix.Output[string] `pulumi:"statementId"`
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber pulumix.Output[int] `pulumi:"versionNumber"`
}

// NewLayerVersionPermission registers a new resource with the given unique name, arguments, and options.
func NewLayerVersionPermission(ctx *pulumi.Context,
	name string, args *LayerVersionPermissionArgs, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	if args.VersionNumber == nil {
		return nil, errors.New("invalid value for required argument 'VersionNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LayerVersionPermission
	err := ctx.RegisterResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersionPermission gets an existing LayerVersionPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersionPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerVersionPermissionState, opts ...pulumi.ResourceOption) (*LayerVersionPermission, error) {
	var resource LayerVersionPermission
	err := ctx.ReadResource("aws:lambda/layerVersionPermission:LayerVersionPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LayerVersionPermission resources.
type layerVersionPermissionState struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action *string `pulumi:"action"`
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName *string `pulumi:"layerName"`
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId *string `pulumi:"organizationId"`
	// Full Lambda Layer Permission policy.
	Policy *string `pulumi:"policy"`
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal *string `pulumi:"principal"`
	// A unique identifier for the current revision of the policy.
	RevisionId *string `pulumi:"revisionId"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId *string `pulumi:"statementId"`
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber *int `pulumi:"versionNumber"`
}

type LayerVersionPermissionState struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action pulumix.Input[*string]
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName pulumix.Input[*string]
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId pulumix.Input[*string]
	// Full Lambda Layer Permission policy.
	Policy pulumix.Input[*string]
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal pulumix.Input[*string]
	// A unique identifier for the current revision of the policy.
	RevisionId pulumix.Input[*string]
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumix.Input[*bool]
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId pulumix.Input[*string]
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber pulumix.Input[*int]
}

func (LayerVersionPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionState)(nil)).Elem()
}

type layerVersionPermissionArgs struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action string `pulumi:"action"`
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName string `pulumi:"layerName"`
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId *string `pulumi:"organizationId"`
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal string `pulumi:"principal"`
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId string `pulumi:"statementId"`
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber int `pulumi:"versionNumber"`
}

// The set of arguments for constructing a LayerVersionPermission resource.
type LayerVersionPermissionArgs struct {
	// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
	Action pulumix.Input[string]
	// The name or ARN of the Lambda Layer, which you want to grant access to.
	LayerName pulumix.Input[string]
	// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
	OrganizationId pulumix.Input[*string]
	// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
	Principal pulumix.Input[string]
	// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
	SkipDestroy pulumix.Input[*bool]
	// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
	StatementId pulumix.Input[string]
	// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
	VersionNumber pulumix.Input[int]
}

func (LayerVersionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerVersionPermissionArgs)(nil)).Elem()
}

type LayerVersionPermissionOutput struct{ *pulumi.OutputState }

func (LayerVersionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerVersionPermission)(nil)).Elem()
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutput() LayerVersionPermissionOutput {
	return o
}

func (o LayerVersionPermissionOutput) ToLayerVersionPermissionOutputWithContext(ctx context.Context) LayerVersionPermissionOutput {
	return o
}

func (o LayerVersionPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[LayerVersionPermission] {
	return pulumix.Output[LayerVersionPermission]{
		OutputState: o.OutputState,
	}
}

// Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
func (o LayerVersionPermissionOutput) Action() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[string] { return v.Action })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name or ARN of the Lambda Layer, which you want to grant access to.
func (o LayerVersionPermissionOutput) LayerName() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[string] { return v.LayerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
func (o LayerVersionPermissionOutput) OrganizationId() pulumix.Output[*string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[*string] { return v.OrganizationId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Full Lambda Layer Permission policy.
func (o LayerVersionPermissionOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
func (o LayerVersionPermissionOutput) Principal() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[string] { return v.Principal })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A unique identifier for the current revision of the policy.
func (o LayerVersionPermissionOutput) RevisionId() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[string] { return v.RevisionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
func (o LayerVersionPermissionOutput) SkipDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[*bool] { return v.SkipDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
func (o LayerVersionPermissionOutput) StatementId() pulumix.Output[string] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[string] { return v.StatementId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
func (o LayerVersionPermissionOutput) VersionNumber() pulumix.Output[int] {
	value := pulumix.Apply[LayerVersionPermission](o, func(v LayerVersionPermission) pulumix.Output[int] { return v.VersionNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(LayerVersionPermissionOutput{})
}
