// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific EC2 Customer-Owned IP Pool.
//
// This data source can prove useful when a module accepts a coip pool id as
// an input variable and needs to, for example, determine the CIDR block of that
// COIP Pool.
func GetCoipPool(ctx *pulumi.Context, args *GetCoipPoolArgs, opts ...pulumi.InvokeOption) (*GetCoipPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCoipPoolResult
	err := ctx.Invoke("aws:ec2/getCoipPool:getCoipPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCoipPool.
type GetCoipPoolArgs struct {
	Filters []GetCoipPoolFilter `pulumi:"filters"`
	// Local Gateway Route Table Id assigned to desired COIP Pool
	LocalGatewayRouteTableId *string `pulumi:"localGatewayRouteTableId"`
	// ID of the specific COIP Pool to retrieve.
	PoolId *string `pulumi:"poolId"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired COIP Pool.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCoipPool.
type GetCoipPoolResult struct {
	// ARN of the COIP pool
	Arn     string              `pulumi:"arn"`
	Filters []GetCoipPoolFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string `pulumi:"id"`
	LocalGatewayRouteTableId string `pulumi:"localGatewayRouteTableId"`
	// Set of CIDR blocks in pool
	PoolCidrs []string          `pulumi:"poolCidrs"`
	PoolId    string            `pulumi:"poolId"`
	Tags      map[string]string `pulumi:"tags"`
}

func GetCoipPoolOutput(ctx *pulumi.Context, args GetCoipPoolOutputArgs, opts ...pulumi.InvokeOption) GetCoipPoolResultOutput {
	outputResult := pulumix.ApplyErr[*GetCoipPoolArgs](args.ToOutput(), func(plainArgs *GetCoipPoolArgs) (*GetCoipPoolResult, error) {
		return GetCoipPool(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetCoipPoolResultOutput, *GetCoipPoolResult](outputResult)
}

// A collection of arguments for invoking getCoipPool.
type GetCoipPoolOutputArgs struct {
	Filters pulumix.Input[[]*GetCoipPoolFilterArgs] `pulumi:"filters"`
	// Local Gateway Route Table Id assigned to desired COIP Pool
	LocalGatewayRouteTableId pulumix.Input[*string] `pulumi:"localGatewayRouteTableId"`
	// ID of the specific COIP Pool to retrieve.
	PoolId pulumix.Input[*string] `pulumi:"poolId"`
	// Mapping of tags, each pair of which must exactly match
	// a pair on the desired COIP Pool.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetCoipPoolOutputArgs) ToOutput() pulumix.Output[*GetCoipPoolArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.LocalGatewayRouteTableId.ToOutput(context.Background()).AsAny(),
		args.PoolId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetCoipPoolArgs {
		return &GetCoipPoolArgs{
			Filters:                  resolvedArgs[0].([]GetCoipPoolFilter),
			LocalGatewayRouteTableId: resolvedArgs[1].(*string),
			PoolId:                   resolvedArgs[2].(*string),
			Tags:                     resolvedArgs[3].(map[string]string),
		}
	})
}

type GetCoipPoolResultOutput struct{ *pulumi.OutputState }

func (GetCoipPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCoipPoolResult)(nil)).Elem()
}

func (o GetCoipPoolResultOutput) ToOutput(context.Context) pulumix.Output[*GetCoipPoolResult] {
	return pulumix.Output[*GetCoipPoolResult]{
		OutputState: o.OutputState,
	}
}

func (o GetCoipPoolResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) string { return v.Arn })
}

func (o GetCoipPoolResultOutput) Filters() pulumix.GArrayOutput[GetCoipPoolFilter, GetCoipPoolFilterOutput] {
	value := pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) []GetCoipPoolFilter { return v.Filters })
	return pulumix.GArrayOutput[GetCoipPoolFilter, GetCoipPoolFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetCoipPoolResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) string { return v.Id })
}

func (o GetCoipPoolResultOutput) LocalGatewayRouteTableId() pulumix.Output[string] {
	return pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) string { return v.LocalGatewayRouteTableId })
}

func (o GetCoipPoolResultOutput) PoolCidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) []string { return v.PoolCidrs })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetCoipPoolResultOutput) PoolId() pulumix.Output[string] {
	return pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) string { return v.PoolId })
}

func (o GetCoipPoolResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetCoipPoolResult](o, func(v *GetCoipPoolResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
