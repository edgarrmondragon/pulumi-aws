// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS SSM Contact.
func LookupContact(ctx *pulumi.Context, args *LookupContactArgs, opts ...pulumi.InvokeOption) (*LookupContactResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContactResult
	err := ctx.Invoke("aws:ssmcontacts/getContact:getContact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContact.
type LookupContactArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	Arn string `pulumi:"arn"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getContact.
type LookupContactResult struct {
	// A unique and identifiable alias of the contact or escalation plan.
	Alias string `pulumi:"alias"`
	Arn   string `pulumi:"arn"`
	// Full friendly name of the contact or escalation plan.
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of contact engaged. A single contact is type `PERSONAL` and an escalation plan is type `ESCALATION`.
	Type string `pulumi:"type"`
}

func LookupContactOutput(ctx *pulumi.Context, args LookupContactOutputArgs, opts ...pulumi.InvokeOption) LookupContactResultOutput {
	outputResult := pulumix.ApplyErr[*LookupContactArgs](args.ToOutput(), func(plainArgs *LookupContactArgs) (*LookupContactResult, error) {
		return LookupContact(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupContactResultOutput, *LookupContactResult](outputResult)
}

// A collection of arguments for invoking getContact.
type LookupContactOutputArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Map of tags to assign to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupContactOutputArgs) ToOutput() pulumix.Output[*LookupContactArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupContactArgs {
		return &LookupContactArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupContactResultOutput struct{ *pulumi.OutputState }

func (LookupContactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContactResult)(nil)).Elem()
}

func (o LookupContactResultOutput) ToOutput(context.Context) pulumix.Output[*LookupContactResult] {
	return pulumix.Output[*LookupContactResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupContactResultOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactResult](o, func(v *LookupContactResult) string { return v.Alias })
}

func (o LookupContactResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactResult](o, func(v *LookupContactResult) string { return v.Arn })
}

func (o LookupContactResultOutput) DisplayName() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactResult](o, func(v *LookupContactResult) string { return v.DisplayName })
}

func (o LookupContactResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactResult](o, func(v *LookupContactResult) string { return v.Id })
}

func (o LookupContactResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupContactResult](o, func(v *LookupContactResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupContactResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupContactResult](o, func(v *LookupContactResult) string { return v.Type })
}
