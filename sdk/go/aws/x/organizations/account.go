// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create a member account in the current organization.
//
// > **Note:** Account management must be done from the organization's root account.
//
// > **Note:** By default, deleting this resource will only remove an AWS account from an organization. You must set the `closeOnDeletion` flag to true to close the account. It is worth noting that quotas are enforced when using the `closeOnDeletion` argument, which can produce a [CLOSE_ACCOUNT_QUOTA_EXCEEDED](https://docs.aws.amazon.com/organizations/latest/APIReference/API_CloseAccount.html) error, and require you to close the account manually.
type Account struct {
	pulumi.CustomResourceState

	// The ARN for this account.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// If true, a deletion event will close the account. Otherwise, it will only remove from the organization. This is not supported for GovCloud accounts.
	CloseOnDeletion pulumix.Output[*bool] `pulumi:"closeOnDeletion"`
	// Whether to also create a GovCloud account. The GovCloud account is tied to the main (commercial) account this resource creates. If `true`, the GovCloud account ID is available in the `govcloudId` attribute. The only way to manage the GovCloud account with the provider is to subsequently import the account using this resource.
	CreateGovcloud pulumix.Output[*bool] `pulumi:"createGovcloud"`
	// Email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email pulumix.Output[string] `pulumi:"email"`
	// ID for a GovCloud account created with the account.
	GovcloudId pulumix.Output[string] `pulumi:"govcloudId"`
	// If set to `ALLOW`, the new account enables IAM users and roles to access account billing information if they have the required permissions. If set to `DENY`, then only the root user (and no roles) of the new account can access account billing information. If this is unset, the AWS API will default this to `ALLOW`. If the resource is created and this option is changed, it will try to recreate the account.
	IamUserAccessToBilling pulumix.Output[*string] `pulumi:"iamUserAccessToBilling"`
	JoinedMethod           pulumix.Output[string]  `pulumi:"joinedMethod"`
	JoinedTimestamp        pulumix.Output[string]  `pulumi:"joinedTimestamp"`
	// Friendly name for the member account.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId pulumix.Output[string] `pulumi:"parentId"`
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the root account, allowing users in the root account to assume the role, as permitted by the root account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so the provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless `ignoreChanges` is used.
	RoleName pulumix.Output[*string] `pulumi:"roleName"`
	Status   pulumix.Output[string]  `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("aws:organizations/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("aws:organizations/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// The ARN for this account.
	Arn *string `pulumi:"arn"`
	// If true, a deletion event will close the account. Otherwise, it will only remove from the organization. This is not supported for GovCloud accounts.
	CloseOnDeletion *bool `pulumi:"closeOnDeletion"`
	// Whether to also create a GovCloud account. The GovCloud account is tied to the main (commercial) account this resource creates. If `true`, the GovCloud account ID is available in the `govcloudId` attribute. The only way to manage the GovCloud account with the provider is to subsequently import the account using this resource.
	CreateGovcloud *bool `pulumi:"createGovcloud"`
	// Email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email *string `pulumi:"email"`
	// ID for a GovCloud account created with the account.
	GovcloudId *string `pulumi:"govcloudId"`
	// If set to `ALLOW`, the new account enables IAM users and roles to access account billing information if they have the required permissions. If set to `DENY`, then only the root user (and no roles) of the new account can access account billing information. If this is unset, the AWS API will default this to `ALLOW`. If the resource is created and this option is changed, it will try to recreate the account.
	IamUserAccessToBilling *string `pulumi:"iamUserAccessToBilling"`
	JoinedMethod           *string `pulumi:"joinedMethod"`
	JoinedTimestamp        *string `pulumi:"joinedTimestamp"`
	// Friendly name for the member account.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId *string `pulumi:"parentId"`
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the root account, allowing users in the root account to assume the role, as permitted by the root account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so the provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless `ignoreChanges` is used.
	RoleName *string `pulumi:"roleName"`
	Status   *string `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AccountState struct {
	// The ARN for this account.
	Arn pulumix.Input[*string]
	// If true, a deletion event will close the account. Otherwise, it will only remove from the organization. This is not supported for GovCloud accounts.
	CloseOnDeletion pulumix.Input[*bool]
	// Whether to also create a GovCloud account. The GovCloud account is tied to the main (commercial) account this resource creates. If `true`, the GovCloud account ID is available in the `govcloudId` attribute. The only way to manage the GovCloud account with the provider is to subsequently import the account using this resource.
	CreateGovcloud pulumix.Input[*bool]
	// Email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email pulumix.Input[*string]
	// ID for a GovCloud account created with the account.
	GovcloudId pulumix.Input[*string]
	// If set to `ALLOW`, the new account enables IAM users and roles to access account billing information if they have the required permissions. If set to `DENY`, then only the root user (and no roles) of the new account can access account billing information. If this is unset, the AWS API will default this to `ALLOW`. If the resource is created and this option is changed, it will try to recreate the account.
	IamUserAccessToBilling pulumix.Input[*string]
	JoinedMethod           pulumix.Input[*string]
	JoinedTimestamp        pulumix.Input[*string]
	// Friendly name for the member account.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId pulumix.Input[*string]
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the root account, allowing users in the root account to assume the role, as permitted by the root account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so the provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless `ignoreChanges` is used.
	RoleName pulumix.Input[*string]
	Status   pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// If true, a deletion event will close the account. Otherwise, it will only remove from the organization. This is not supported for GovCloud accounts.
	CloseOnDeletion *bool `pulumi:"closeOnDeletion"`
	// Whether to also create a GovCloud account. The GovCloud account is tied to the main (commercial) account this resource creates. If `true`, the GovCloud account ID is available in the `govcloudId` attribute. The only way to manage the GovCloud account with the provider is to subsequently import the account using this resource.
	CreateGovcloud *bool `pulumi:"createGovcloud"`
	// Email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email string `pulumi:"email"`
	// If set to `ALLOW`, the new account enables IAM users and roles to access account billing information if they have the required permissions. If set to `DENY`, then only the root user (and no roles) of the new account can access account billing information. If this is unset, the AWS API will default this to `ALLOW`. If the resource is created and this option is changed, it will try to recreate the account.
	IamUserAccessToBilling *string `pulumi:"iamUserAccessToBilling"`
	// Friendly name for the member account.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId *string `pulumi:"parentId"`
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the root account, allowing users in the root account to assume the role, as permitted by the root account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so the provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless `ignoreChanges` is used.
	RoleName *string `pulumi:"roleName"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// If true, a deletion event will close the account. Otherwise, it will only remove from the organization. This is not supported for GovCloud accounts.
	CloseOnDeletion pulumix.Input[*bool]
	// Whether to also create a GovCloud account. The GovCloud account is tied to the main (commercial) account this resource creates. If `true`, the GovCloud account ID is available in the `govcloudId` attribute. The only way to manage the GovCloud account with the provider is to subsequently import the account using this resource.
	CreateGovcloud pulumix.Input[*bool]
	// Email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
	Email pulumix.Input[string]
	// If set to `ALLOW`, the new account enables IAM users and roles to access account billing information if they have the required permissions. If set to `DENY`, then only the root user (and no roles) of the new account can access account billing information. If this is unset, the AWS API will default this to `ALLOW`. If the resource is created and this option is changed, it will try to recreate the account.
	IamUserAccessToBilling pulumix.Input[*string]
	// Friendly name for the member account.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
	ParentId pulumix.Input[*string]
	// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the root account, allowing users in the root account to assume the role, as permitted by the root account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so the provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless `ignoreChanges` is used.
	RoleName pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

func (o AccountOutput) ToOutput(ctx context.Context) pulumix.Output[Account] {
	return pulumix.Output[Account]{
		OutputState: o.OutputState,
	}
}

// The ARN for this account.
func (o AccountOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If true, a deletion event will close the account. Otherwise, it will only remove from the organization. This is not supported for GovCloud accounts.
func (o AccountOutput) CloseOnDeletion() pulumix.Output[*bool] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[*bool] { return v.CloseOnDeletion })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether to also create a GovCloud account. The GovCloud account is tied to the main (commercial) account this resource creates. If `true`, the GovCloud account ID is available in the `govcloudId` attribute. The only way to manage the GovCloud account with the provider is to subsequently import the account using this resource.
func (o AccountOutput) CreateGovcloud() pulumix.Output[*bool] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[*bool] { return v.CreateGovcloud })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
func (o AccountOutput) Email() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.Email })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID for a GovCloud account created with the account.
func (o AccountOutput) GovcloudId() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.GovcloudId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If set to `ALLOW`, the new account enables IAM users and roles to access account billing information if they have the required permissions. If set to `DENY`, then only the root user (and no roles) of the new account can access account billing information. If this is unset, the AWS API will default this to `ALLOW`. If the resource is created and this option is changed, it will try to recreate the account.
func (o AccountOutput) IamUserAccessToBilling() pulumix.Output[*string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[*string] { return v.IamUserAccessToBilling })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o AccountOutput) JoinedMethod() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.JoinedMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o AccountOutput) JoinedTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.JoinedTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Friendly name for the member account.
//
// The following arguments are optional:
func (o AccountOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Parent Organizational Unit ID or Root ID for the account. Defaults to the Organization default Root ID. A configuration must be present for this argument to perform drift detection.
func (o AccountOutput) ParentId() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.ParentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the root account, allowing users in the root account to assume the role, as permitted by the root account administrator. The role has administrator permissions in the new member account. The Organizations API provides no method for reading this information after account creation, so the provider cannot perform drift detection on its value and will always show a difference for a configured value after import unless `ignoreChanges` is used.
func (o AccountOutput) RoleName() pulumix.Output[*string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[*string] { return v.RoleName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o AccountOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AccountOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AccountOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Account](o, func(v Account) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AccountOutput{})
}
