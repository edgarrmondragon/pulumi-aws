// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves information about a Service Discovery private or public DNS namespace.
func GetDnsNamespace(ctx *pulumi.Context, args *GetDnsNamespaceArgs, opts ...pulumi.InvokeOption) (*GetDnsNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDnsNamespaceResult
	err := ctx.Invoke("aws:servicediscovery/getDnsNamespace:getDnsNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsNamespace.
type GetDnsNamespaceArgs struct {
	// Name of the namespace.
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// Type of the namespace. Allowed values are `DNS_PUBLIC` or `DNS_PRIVATE`.
	Type string `pulumi:"type"`
}

// A collection of values returned by getDnsNamespace.
type GetDnsNamespaceResult struct {
	// ARN of the namespace.
	Arn string `pulumi:"arn"`
	// Description of the namespace.
	Description string `pulumi:"description"`
	// ID for the hosted zone that Amazon Route 53 creates when you create a namespace.
	HostedZone string `pulumi:"hostedZone"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	Type string            `pulumi:"type"`
}

func GetDnsNamespaceOutput(ctx *pulumi.Context, args GetDnsNamespaceOutputArgs, opts ...pulumi.InvokeOption) GetDnsNamespaceResultOutput {
	outputResult := pulumix.ApplyErr[*GetDnsNamespaceArgs](args.ToOutput(), func(plainArgs *GetDnsNamespaceArgs) (*GetDnsNamespaceResult, error) {
		return GetDnsNamespace(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetDnsNamespaceResultOutput, *GetDnsNamespaceResult](outputResult)
}

// A collection of arguments for invoking getDnsNamespace.
type GetDnsNamespaceOutputArgs struct {
	// Name of the namespace.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Type of the namespace. Allowed values are `DNS_PUBLIC` or `DNS_PRIVATE`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (args GetDnsNamespaceOutputArgs) ToOutput() pulumix.Output[*GetDnsNamespaceArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.Type.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetDnsNamespaceArgs {
		return &GetDnsNamespaceArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
			Type: resolvedArgs[2].(string),
		}
	})
}

type GetDnsNamespaceResultOutput struct{ *pulumi.OutputState }

func (GetDnsNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsNamespaceResult)(nil)).Elem()
}

func (o GetDnsNamespaceResultOutput) ToOutput(context.Context) pulumix.Output[*GetDnsNamespaceResult] {
	return pulumix.Output[*GetDnsNamespaceResult]{
		OutputState: o.OutputState,
	}
}

func (o GetDnsNamespaceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) string { return v.Arn })
}

func (o GetDnsNamespaceResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) string { return v.Description })
}

func (o GetDnsNamespaceResultOutput) HostedZone() pulumix.Output[string] {
	return pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) string { return v.HostedZone })
}

func (o GetDnsNamespaceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) string { return v.Id })
}

func (o GetDnsNamespaceResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) string { return v.Name })
}

func (o GetDnsNamespaceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetDnsNamespaceResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*GetDnsNamespaceResult](o, func(v *GetDnsNamespaceResult) string { return v.Type })
}
