// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The bucket policy data source returns IAM policy of an S3 bucket.
func LookupBucketPolicy(ctx *pulumi.Context, args *LookupBucketPolicyArgs, opts ...pulumi.InvokeOption) (*LookupBucketPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBucketPolicyResult
	err := ctx.Invoke("aws:s3/getBucketPolicy:getBucketPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBucketPolicy.
type LookupBucketPolicyArgs struct {
	// Bucket name.
	Bucket string `pulumi:"bucket"`
}

// A collection of values returned by getBucketPolicy.
type LookupBucketPolicyResult struct {
	Bucket string `pulumi:"bucket"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IAM bucket policy.
	Policy string `pulumi:"policy"`
}

func LookupBucketPolicyOutput(ctx *pulumi.Context, args LookupBucketPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupBucketPolicyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupBucketPolicyArgs](args.ToOutput(), func(plainArgs *LookupBucketPolicyArgs) (*LookupBucketPolicyResult, error) {
		return LookupBucketPolicy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupBucketPolicyResultOutput, *LookupBucketPolicyResult](outputResult)
}

// A collection of arguments for invoking getBucketPolicy.
type LookupBucketPolicyOutputArgs struct {
	// Bucket name.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
}

func (args LookupBucketPolicyOutputArgs) ToOutput() pulumix.Output[*LookupBucketPolicyArgs] {
	allArgs := pulumix.All(
		args.Bucket.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupBucketPolicyArgs {
		return &LookupBucketPolicyArgs{
			Bucket: resolvedArgs[0].(string),
		}
	})
}

type LookupBucketPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupBucketPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBucketPolicyResult)(nil)).Elem()
}

func (o LookupBucketPolicyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupBucketPolicyResult] {
	return pulumix.Output[*LookupBucketPolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupBucketPolicyResultOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[*LookupBucketPolicyResult](o, func(v *LookupBucketPolicyResult) string { return v.Bucket })
}

func (o LookupBucketPolicyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupBucketPolicyResult](o, func(v *LookupBucketPolicyResult) string { return v.Id })
}

func (o LookupBucketPolicyResultOutput) Policy() pulumix.Output[string] {
	return pulumix.Apply[*LookupBucketPolicyResult](o, func(v *LookupBucketPolicyResult) string { return v.Policy })
}
