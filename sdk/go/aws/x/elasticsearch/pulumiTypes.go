// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DomainAdvancedSecurityOptions struct {
	// Whether advanced security is enabled.
	Enabled bool `pulumi:"enabled"`
	// Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
	InternalUserDatabaseEnabled *bool `pulumi:"internalUserDatabaseEnabled"`
	// Configuration block for the main user. Detailed below.
	MasterUserOptions *DomainAdvancedSecurityOptionsMasterUserOptions `pulumi:"masterUserOptions"`
}

type DomainAdvancedSecurityOptionsArgs struct {
	// Whether advanced security is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
	InternalUserDatabaseEnabled pulumix.Input[*bool] `pulumi:"internalUserDatabaseEnabled"`
	// Configuration block for the main user. Detailed below.
	MasterUserOptions pulumix.Input[*DomainAdvancedSecurityOptionsMasterUserOptionsArgs] `pulumi:"masterUserOptions"`
}

func (DomainAdvancedSecurityOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdvancedSecurityOptions)(nil)).Elem()
}

func (i DomainAdvancedSecurityOptionsArgs) ToDomainAdvancedSecurityOptionsOutput() DomainAdvancedSecurityOptionsOutput {
	return i.ToDomainAdvancedSecurityOptionsOutputWithContext(context.Background())
}

func (i DomainAdvancedSecurityOptionsArgs) ToDomainAdvancedSecurityOptionsOutputWithContext(ctx context.Context) DomainAdvancedSecurityOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdvancedSecurityOptionsOutput)
}

func (i *DomainAdvancedSecurityOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainAdvancedSecurityOptionsArgs] {
	return pulumix.Val(i)
}

type DomainAdvancedSecurityOptionsOutput struct{ *pulumi.OutputState }

func (DomainAdvancedSecurityOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdvancedSecurityOptions)(nil)).Elem()
}

func (o DomainAdvancedSecurityOptionsOutput) ToDomainAdvancedSecurityOptionsOutput() DomainAdvancedSecurityOptionsOutput {
	return o
}

func (o DomainAdvancedSecurityOptionsOutput) ToDomainAdvancedSecurityOptionsOutputWithContext(ctx context.Context) DomainAdvancedSecurityOptionsOutput {
	return o
}

func (o DomainAdvancedSecurityOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAdvancedSecurityOptions] {
	return pulumix.Output[DomainAdvancedSecurityOptions]{
		OutputState: o.OutputState,
	}
}

// Whether advanced security is enabled.
func (o DomainAdvancedSecurityOptionsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[DomainAdvancedSecurityOptions](o, func(v DomainAdvancedSecurityOptions) bool { return v.Enabled })
}

// Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
func (o DomainAdvancedSecurityOptionsOutput) InternalUserDatabaseEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainAdvancedSecurityOptions](o, func(v DomainAdvancedSecurityOptions) *bool { return v.InternalUserDatabaseEnabled })
}

// Configuration block for the main user. Detailed below.
func (o DomainAdvancedSecurityOptionsOutput) MasterUserOptions() pulumix.GPtrOutput[DomainAdvancedSecurityOptionsMasterUserOptions, DomainAdvancedSecurityOptionsMasterUserOptionsOutput] {
	value := pulumix.Apply[DomainAdvancedSecurityOptions](o, func(v DomainAdvancedSecurityOptions) *DomainAdvancedSecurityOptionsMasterUserOptions {
		return v.MasterUserOptions
	})
	return pulumix.GPtrOutput[DomainAdvancedSecurityOptionsMasterUserOptions, DomainAdvancedSecurityOptionsMasterUserOptionsOutput]{OutputState: value.OutputState}
}

type DomainAdvancedSecurityOptionsMasterUserOptions struct {
	// ARN for the main user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`.
	MasterUserArn *string `pulumi:"masterUserArn"`
	// Main user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
	MasterUserName *string `pulumi:"masterUserName"`
	// Main user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
	MasterUserPassword *string `pulumi:"masterUserPassword"`
}

type DomainAdvancedSecurityOptionsMasterUserOptionsArgs struct {
	// ARN for the main user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`.
	MasterUserArn pulumix.Input[*string] `pulumi:"masterUserArn"`
	// Main user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
	MasterUserName pulumix.Input[*string] `pulumi:"masterUserName"`
	// Main user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
	MasterUserPassword pulumix.Input[*string] `pulumi:"masterUserPassword"`
}

func (DomainAdvancedSecurityOptionsMasterUserOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdvancedSecurityOptionsMasterUserOptions)(nil)).Elem()
}

func (i DomainAdvancedSecurityOptionsMasterUserOptionsArgs) ToDomainAdvancedSecurityOptionsMasterUserOptionsOutput() DomainAdvancedSecurityOptionsMasterUserOptionsOutput {
	return i.ToDomainAdvancedSecurityOptionsMasterUserOptionsOutputWithContext(context.Background())
}

func (i DomainAdvancedSecurityOptionsMasterUserOptionsArgs) ToDomainAdvancedSecurityOptionsMasterUserOptionsOutputWithContext(ctx context.Context) DomainAdvancedSecurityOptionsMasterUserOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAdvancedSecurityOptionsMasterUserOptionsOutput)
}

func (i *DomainAdvancedSecurityOptionsMasterUserOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainAdvancedSecurityOptionsMasterUserOptionsArgs] {
	return pulumix.Val(i)
}

type DomainAdvancedSecurityOptionsMasterUserOptionsOutput struct{ *pulumi.OutputState }

func (DomainAdvancedSecurityOptionsMasterUserOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAdvancedSecurityOptionsMasterUserOptions)(nil)).Elem()
}

func (o DomainAdvancedSecurityOptionsMasterUserOptionsOutput) ToDomainAdvancedSecurityOptionsMasterUserOptionsOutput() DomainAdvancedSecurityOptionsMasterUserOptionsOutput {
	return o
}

func (o DomainAdvancedSecurityOptionsMasterUserOptionsOutput) ToDomainAdvancedSecurityOptionsMasterUserOptionsOutputWithContext(ctx context.Context) DomainAdvancedSecurityOptionsMasterUserOptionsOutput {
	return o
}

func (o DomainAdvancedSecurityOptionsMasterUserOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAdvancedSecurityOptionsMasterUserOptions] {
	return pulumix.Output[DomainAdvancedSecurityOptionsMasterUserOptions]{
		OutputState: o.OutputState,
	}
}

// ARN for the main user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`.
func (o DomainAdvancedSecurityOptionsMasterUserOptionsOutput) MasterUserArn() pulumix.Output[*string] {
	return pulumix.Apply[DomainAdvancedSecurityOptionsMasterUserOptions](o, func(v DomainAdvancedSecurityOptionsMasterUserOptions) *string { return v.MasterUserArn })
}

// Main user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
func (o DomainAdvancedSecurityOptionsMasterUserOptionsOutput) MasterUserName() pulumix.Output[*string] {
	return pulumix.Apply[DomainAdvancedSecurityOptionsMasterUserOptions](o, func(v DomainAdvancedSecurityOptionsMasterUserOptions) *string { return v.MasterUserName })
}

// Main user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
func (o DomainAdvancedSecurityOptionsMasterUserOptionsOutput) MasterUserPassword() pulumix.Output[*string] {
	return pulumix.Apply[DomainAdvancedSecurityOptionsMasterUserOptions](o, func(v DomainAdvancedSecurityOptionsMasterUserOptions) *string { return v.MasterUserPassword })
}

type DomainAutoTuneOptions struct {
	// The Auto-Tune desired state for the domain. Valid values: `ENABLED` or `DISABLED`.
	DesiredState string `pulumi:"desiredState"`
	// Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
	MaintenanceSchedules []DomainAutoTuneOptionsMaintenanceSchedule `pulumi:"maintenanceSchedules"`
	// Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: `DEFAULT_ROLLBACK` or `NO_ROLLBACK`.
	RollbackOnDisable *string `pulumi:"rollbackOnDisable"`
}

type DomainAutoTuneOptionsArgs struct {
	// The Auto-Tune desired state for the domain. Valid values: `ENABLED` or `DISABLED`.
	DesiredState pulumix.Input[string] `pulumi:"desiredState"`
	// Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
	MaintenanceSchedules pulumix.Input[[]*DomainAutoTuneOptionsMaintenanceScheduleArgs] `pulumi:"maintenanceSchedules"`
	// Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: `DEFAULT_ROLLBACK` or `NO_ROLLBACK`.
	RollbackOnDisable pulumix.Input[*string] `pulumi:"rollbackOnDisable"`
}

func (DomainAutoTuneOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoTuneOptions)(nil)).Elem()
}

func (i DomainAutoTuneOptionsArgs) ToDomainAutoTuneOptionsOutput() DomainAutoTuneOptionsOutput {
	return i.ToDomainAutoTuneOptionsOutputWithContext(context.Background())
}

func (i DomainAutoTuneOptionsArgs) ToDomainAutoTuneOptionsOutputWithContext(ctx context.Context) DomainAutoTuneOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAutoTuneOptionsOutput)
}

func (i *DomainAutoTuneOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainAutoTuneOptionsArgs] {
	return pulumix.Val(i)
}

type DomainAutoTuneOptionsOutput struct{ *pulumi.OutputState }

func (DomainAutoTuneOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoTuneOptions)(nil)).Elem()
}

func (o DomainAutoTuneOptionsOutput) ToDomainAutoTuneOptionsOutput() DomainAutoTuneOptionsOutput {
	return o
}

func (o DomainAutoTuneOptionsOutput) ToDomainAutoTuneOptionsOutputWithContext(ctx context.Context) DomainAutoTuneOptionsOutput {
	return o
}

func (o DomainAutoTuneOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAutoTuneOptions] {
	return pulumix.Output[DomainAutoTuneOptions]{
		OutputState: o.OutputState,
	}
}

// The Auto-Tune desired state for the domain. Valid values: `ENABLED` or `DISABLED`.
func (o DomainAutoTuneOptionsOutput) DesiredState() pulumix.Output[string] {
	return pulumix.Apply[DomainAutoTuneOptions](o, func(v DomainAutoTuneOptions) string { return v.DesiredState })
}

// Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
func (o DomainAutoTuneOptionsOutput) MaintenanceSchedules() pulumix.GArrayOutput[DomainAutoTuneOptionsMaintenanceSchedule, DomainAutoTuneOptionsMaintenanceScheduleOutput] {
	value := pulumix.Apply[DomainAutoTuneOptions](o, func(v DomainAutoTuneOptions) []DomainAutoTuneOptionsMaintenanceSchedule {
		return v.MaintenanceSchedules
	})
	return pulumix.GArrayOutput[DomainAutoTuneOptionsMaintenanceSchedule, DomainAutoTuneOptionsMaintenanceScheduleOutput]{OutputState: value.OutputState}
}

// Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: `DEFAULT_ROLLBACK` or `NO_ROLLBACK`.
func (o DomainAutoTuneOptionsOutput) RollbackOnDisable() pulumix.Output[*string] {
	return pulumix.Apply[DomainAutoTuneOptions](o, func(v DomainAutoTuneOptions) *string { return v.RollbackOnDisable })
}

type DomainAutoTuneOptionsMaintenanceSchedule struct {
	// A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
	CronExpressionForRecurrence string `pulumi:"cronExpressionForRecurrence"`
	// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
	Duration DomainAutoTuneOptionsMaintenanceScheduleDuration `pulumi:"duration"`
	// Date and time at which to start the Auto-Tune maintenance schedule in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
	StartAt string `pulumi:"startAt"`
}

type DomainAutoTuneOptionsMaintenanceScheduleArgs struct {
	// A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
	CronExpressionForRecurrence pulumix.Input[string] `pulumi:"cronExpressionForRecurrence"`
	// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
	Duration pulumix.Input[*DomainAutoTuneOptionsMaintenanceScheduleDurationArgs] `pulumi:"duration"`
	// Date and time at which to start the Auto-Tune maintenance schedule in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
	StartAt pulumix.Input[string] `pulumi:"startAt"`
}

func (DomainAutoTuneOptionsMaintenanceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoTuneOptionsMaintenanceSchedule)(nil)).Elem()
}

func (i DomainAutoTuneOptionsMaintenanceScheduleArgs) ToDomainAutoTuneOptionsMaintenanceScheduleOutput() DomainAutoTuneOptionsMaintenanceScheduleOutput {
	return i.ToDomainAutoTuneOptionsMaintenanceScheduleOutputWithContext(context.Background())
}

func (i DomainAutoTuneOptionsMaintenanceScheduleArgs) ToDomainAutoTuneOptionsMaintenanceScheduleOutputWithContext(ctx context.Context) DomainAutoTuneOptionsMaintenanceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAutoTuneOptionsMaintenanceScheduleOutput)
}

func (i *DomainAutoTuneOptionsMaintenanceScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainAutoTuneOptionsMaintenanceScheduleArgs] {
	return pulumix.Val(i)
}

type DomainAutoTuneOptionsMaintenanceScheduleOutput struct{ *pulumi.OutputState }

func (DomainAutoTuneOptionsMaintenanceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoTuneOptionsMaintenanceSchedule)(nil)).Elem()
}

func (o DomainAutoTuneOptionsMaintenanceScheduleOutput) ToDomainAutoTuneOptionsMaintenanceScheduleOutput() DomainAutoTuneOptionsMaintenanceScheduleOutput {
	return o
}

func (o DomainAutoTuneOptionsMaintenanceScheduleOutput) ToDomainAutoTuneOptionsMaintenanceScheduleOutputWithContext(ctx context.Context) DomainAutoTuneOptionsMaintenanceScheduleOutput {
	return o
}

func (o DomainAutoTuneOptionsMaintenanceScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAutoTuneOptionsMaintenanceSchedule] {
	return pulumix.Output[DomainAutoTuneOptionsMaintenanceSchedule]{
		OutputState: o.OutputState,
	}
}

// A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
func (o DomainAutoTuneOptionsMaintenanceScheduleOutput) CronExpressionForRecurrence() pulumix.Output[string] {
	return pulumix.Apply[DomainAutoTuneOptionsMaintenanceSchedule](o, func(v DomainAutoTuneOptionsMaintenanceSchedule) string { return v.CronExpressionForRecurrence })
}

// Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
func (o DomainAutoTuneOptionsMaintenanceScheduleOutput) Duration() pulumix.GPtrOutput[DomainAutoTuneOptionsMaintenanceScheduleDuration, DomainAutoTuneOptionsMaintenanceScheduleDurationOutput] {
	value := pulumix.Apply[DomainAutoTuneOptionsMaintenanceSchedule](o, func(v DomainAutoTuneOptionsMaintenanceSchedule) DomainAutoTuneOptionsMaintenanceScheduleDuration {
		return v.Duration
	})
	return pulumix.GPtrOutput[DomainAutoTuneOptionsMaintenanceScheduleDuration, DomainAutoTuneOptionsMaintenanceScheduleDurationOutput]{OutputState: value.OutputState}
}

// Date and time at which to start the Auto-Tune maintenance schedule in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
func (o DomainAutoTuneOptionsMaintenanceScheduleOutput) StartAt() pulumix.Output[string] {
	return pulumix.Apply[DomainAutoTuneOptionsMaintenanceSchedule](o, func(v DomainAutoTuneOptionsMaintenanceSchedule) string { return v.StartAt })
}

type DomainAutoTuneOptionsMaintenanceScheduleDuration struct {
	// The unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: `HOURS`.
	Unit string `pulumi:"unit"`
	// An integer specifying the value of the duration of an Auto-Tune maintenance window.
	Value int `pulumi:"value"`
}

type DomainAutoTuneOptionsMaintenanceScheduleDurationArgs struct {
	// The unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: `HOURS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// An integer specifying the value of the duration of an Auto-Tune maintenance window.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (DomainAutoTuneOptionsMaintenanceScheduleDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoTuneOptionsMaintenanceScheduleDuration)(nil)).Elem()
}

func (i DomainAutoTuneOptionsMaintenanceScheduleDurationArgs) ToDomainAutoTuneOptionsMaintenanceScheduleDurationOutput() DomainAutoTuneOptionsMaintenanceScheduleDurationOutput {
	return i.ToDomainAutoTuneOptionsMaintenanceScheduleDurationOutputWithContext(context.Background())
}

func (i DomainAutoTuneOptionsMaintenanceScheduleDurationArgs) ToDomainAutoTuneOptionsMaintenanceScheduleDurationOutputWithContext(ctx context.Context) DomainAutoTuneOptionsMaintenanceScheduleDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAutoTuneOptionsMaintenanceScheduleDurationOutput)
}

func (i *DomainAutoTuneOptionsMaintenanceScheduleDurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainAutoTuneOptionsMaintenanceScheduleDurationArgs] {
	return pulumix.Val(i)
}

type DomainAutoTuneOptionsMaintenanceScheduleDurationOutput struct{ *pulumi.OutputState }

func (DomainAutoTuneOptionsMaintenanceScheduleDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoTuneOptionsMaintenanceScheduleDuration)(nil)).Elem()
}

func (o DomainAutoTuneOptionsMaintenanceScheduleDurationOutput) ToDomainAutoTuneOptionsMaintenanceScheduleDurationOutput() DomainAutoTuneOptionsMaintenanceScheduleDurationOutput {
	return o
}

func (o DomainAutoTuneOptionsMaintenanceScheduleDurationOutput) ToDomainAutoTuneOptionsMaintenanceScheduleDurationOutputWithContext(ctx context.Context) DomainAutoTuneOptionsMaintenanceScheduleDurationOutput {
	return o
}

func (o DomainAutoTuneOptionsMaintenanceScheduleDurationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAutoTuneOptionsMaintenanceScheduleDuration] {
	return pulumix.Output[DomainAutoTuneOptionsMaintenanceScheduleDuration]{
		OutputState: o.OutputState,
	}
}

// The unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: `HOURS`.
func (o DomainAutoTuneOptionsMaintenanceScheduleDurationOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[DomainAutoTuneOptionsMaintenanceScheduleDuration](o, func(v DomainAutoTuneOptionsMaintenanceScheduleDuration) string { return v.Unit })
}

// An integer specifying the value of the duration of an Auto-Tune maintenance window.
func (o DomainAutoTuneOptionsMaintenanceScheduleDurationOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[DomainAutoTuneOptionsMaintenanceScheduleDuration](o, func(v DomainAutoTuneOptionsMaintenanceScheduleDuration) int { return v.Value })
}

type DomainClusterConfig struct {
	// Configuration block containing cold storage configuration. Detailed below.
	ColdStorageOptions *DomainClusterConfigColdStorageOptions `pulumi:"coldStorageOptions"`
	// Number of dedicated main nodes in the cluster.
	DedicatedMasterCount *int `pulumi:"dedicatedMasterCount"`
	// Whether dedicated main nodes are enabled for the cluster.
	DedicatedMasterEnabled *bool `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated main nodes in the cluster.
	DedicatedMasterType *string `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount *int `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType *string `pulumi:"instanceType"`
	// Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
	WarmCount *int `pulumi:"warmCount"`
	// Whether to enable warm storage.
	WarmEnabled *bool `pulumi:"warmEnabled"`
	// Instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
	WarmType *string `pulumi:"warmType"`
	// Configuration block containing zone awareness settings. Detailed below.
	ZoneAwarenessConfig *DomainClusterConfigZoneAwarenessConfig `pulumi:"zoneAwarenessConfig"`
	// Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled *bool `pulumi:"zoneAwarenessEnabled"`
}

type DomainClusterConfigArgs struct {
	// Configuration block containing cold storage configuration. Detailed below.
	ColdStorageOptions pulumix.Input[*DomainClusterConfigColdStorageOptionsArgs] `pulumi:"coldStorageOptions"`
	// Number of dedicated main nodes in the cluster.
	DedicatedMasterCount pulumix.Input[*int] `pulumi:"dedicatedMasterCount"`
	// Whether dedicated main nodes are enabled for the cluster.
	DedicatedMasterEnabled pulumix.Input[*bool] `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated main nodes in the cluster.
	DedicatedMasterType pulumix.Input[*string] `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount pulumix.Input[*int] `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType pulumix.Input[*string] `pulumi:"instanceType"`
	// Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
	WarmCount pulumix.Input[*int] `pulumi:"warmCount"`
	// Whether to enable warm storage.
	WarmEnabled pulumix.Input[*bool] `pulumi:"warmEnabled"`
	// Instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
	WarmType pulumix.Input[*string] `pulumi:"warmType"`
	// Configuration block containing zone awareness settings. Detailed below.
	ZoneAwarenessConfig pulumix.Input[*DomainClusterConfigZoneAwarenessConfigArgs] `pulumi:"zoneAwarenessConfig"`
	// Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
	ZoneAwarenessEnabled pulumix.Input[*bool] `pulumi:"zoneAwarenessEnabled"`
}

func (DomainClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfig)(nil)).Elem()
}

func (i DomainClusterConfigArgs) ToDomainClusterConfigOutput() DomainClusterConfigOutput {
	return i.ToDomainClusterConfigOutputWithContext(context.Background())
}

func (i DomainClusterConfigArgs) ToDomainClusterConfigOutputWithContext(ctx context.Context) DomainClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigOutput)
}

func (i *DomainClusterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainClusterConfigArgs] {
	return pulumix.Val(i)
}

type DomainClusterConfigOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfig)(nil)).Elem()
}

func (o DomainClusterConfigOutput) ToDomainClusterConfigOutput() DomainClusterConfigOutput {
	return o
}

func (o DomainClusterConfigOutput) ToDomainClusterConfigOutputWithContext(ctx context.Context) DomainClusterConfigOutput {
	return o
}

func (o DomainClusterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DomainClusterConfig] {
	return pulumix.Output[DomainClusterConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration block containing cold storage configuration. Detailed below.
func (o DomainClusterConfigOutput) ColdStorageOptions() pulumix.GPtrOutput[DomainClusterConfigColdStorageOptions, DomainClusterConfigColdStorageOptionsOutput] {
	value := pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *DomainClusterConfigColdStorageOptions { return v.ColdStorageOptions })
	return pulumix.GPtrOutput[DomainClusterConfigColdStorageOptions, DomainClusterConfigColdStorageOptionsOutput]{OutputState: value.OutputState}
}

// Number of dedicated main nodes in the cluster.
func (o DomainClusterConfigOutput) DedicatedMasterCount() pulumix.Output[*int] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *int { return v.DedicatedMasterCount })
}

// Whether dedicated main nodes are enabled for the cluster.
func (o DomainClusterConfigOutput) DedicatedMasterEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *bool { return v.DedicatedMasterEnabled })
}

// Instance type of the dedicated main nodes in the cluster.
func (o DomainClusterConfigOutput) DedicatedMasterType() pulumix.Output[*string] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *string { return v.DedicatedMasterType })
}

// Number of instances in the cluster.
func (o DomainClusterConfigOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *int { return v.InstanceCount })
}

// Instance type of data nodes in the cluster.
func (o DomainClusterConfigOutput) InstanceType() pulumix.Output[*string] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *string { return v.InstanceType })
}

// Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
func (o DomainClusterConfigOutput) WarmCount() pulumix.Output[*int] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *int { return v.WarmCount })
}

// Whether to enable warm storage.
func (o DomainClusterConfigOutput) WarmEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *bool { return v.WarmEnabled })
}

// Instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
func (o DomainClusterConfigOutput) WarmType() pulumix.Output[*string] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *string { return v.WarmType })
}

// Configuration block containing zone awareness settings. Detailed below.
func (o DomainClusterConfigOutput) ZoneAwarenessConfig() pulumix.GPtrOutput[DomainClusterConfigZoneAwarenessConfig, DomainClusterConfigZoneAwarenessConfigOutput] {
	value := pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *DomainClusterConfigZoneAwarenessConfig { return v.ZoneAwarenessConfig })
	return pulumix.GPtrOutput[DomainClusterConfigZoneAwarenessConfig, DomainClusterConfigZoneAwarenessConfigOutput]{OutputState: value.OutputState}
}

// Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
func (o DomainClusterConfigOutput) ZoneAwarenessEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainClusterConfig](o, func(v DomainClusterConfig) *bool { return v.ZoneAwarenessEnabled })
}

type DomainClusterConfigColdStorageOptions struct {
	// Boolean to enable cold storage for an Elasticsearch domain. Defaults to `false`. Master and ultrawarm nodes must be enabled for cold storage.
	Enabled *bool `pulumi:"enabled"`
}

type DomainClusterConfigColdStorageOptionsArgs struct {
	// Boolean to enable cold storage for an Elasticsearch domain. Defaults to `false`. Master and ultrawarm nodes must be enabled for cold storage.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (DomainClusterConfigColdStorageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigColdStorageOptions)(nil)).Elem()
}

func (i DomainClusterConfigColdStorageOptionsArgs) ToDomainClusterConfigColdStorageOptionsOutput() DomainClusterConfigColdStorageOptionsOutput {
	return i.ToDomainClusterConfigColdStorageOptionsOutputWithContext(context.Background())
}

func (i DomainClusterConfigColdStorageOptionsArgs) ToDomainClusterConfigColdStorageOptionsOutputWithContext(ctx context.Context) DomainClusterConfigColdStorageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigColdStorageOptionsOutput)
}

func (i *DomainClusterConfigColdStorageOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainClusterConfigColdStorageOptionsArgs] {
	return pulumix.Val(i)
}

type DomainClusterConfigColdStorageOptionsOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigColdStorageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigColdStorageOptions)(nil)).Elem()
}

func (o DomainClusterConfigColdStorageOptionsOutput) ToDomainClusterConfigColdStorageOptionsOutput() DomainClusterConfigColdStorageOptionsOutput {
	return o
}

func (o DomainClusterConfigColdStorageOptionsOutput) ToDomainClusterConfigColdStorageOptionsOutputWithContext(ctx context.Context) DomainClusterConfigColdStorageOptionsOutput {
	return o
}

func (o DomainClusterConfigColdStorageOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainClusterConfigColdStorageOptions] {
	return pulumix.Output[DomainClusterConfigColdStorageOptions]{
		OutputState: o.OutputState,
	}
}

// Boolean to enable cold storage for an Elasticsearch domain. Defaults to `false`. Master and ultrawarm nodes must be enabled for cold storage.
func (o DomainClusterConfigColdStorageOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainClusterConfigColdStorageOptions](o, func(v DomainClusterConfigColdStorageOptions) *bool { return v.Enabled })
}

type DomainClusterConfigZoneAwarenessConfig struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount *int `pulumi:"availabilityZoneCount"`
}

type DomainClusterConfigZoneAwarenessConfigArgs struct {
	// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
	AvailabilityZoneCount pulumix.Input[*int] `pulumi:"availabilityZoneCount"`
}

func (DomainClusterConfigZoneAwarenessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (i DomainClusterConfigZoneAwarenessConfigArgs) ToDomainClusterConfigZoneAwarenessConfigOutput() DomainClusterConfigZoneAwarenessConfigOutput {
	return i.ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(context.Background())
}

func (i DomainClusterConfigZoneAwarenessConfigArgs) ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainClusterConfigZoneAwarenessConfigOutput)
}

func (i *DomainClusterConfigZoneAwarenessConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainClusterConfigZoneAwarenessConfigArgs] {
	return pulumix.Val(i)
}

type DomainClusterConfigZoneAwarenessConfigOutput struct{ *pulumi.OutputState }

func (DomainClusterConfigZoneAwarenessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToDomainClusterConfigZoneAwarenessConfigOutput() DomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) DomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o DomainClusterConfigZoneAwarenessConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DomainClusterConfigZoneAwarenessConfig] {
	return pulumix.Output[DomainClusterConfigZoneAwarenessConfig]{
		OutputState: o.OutputState,
	}
}

// Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
func (o DomainClusterConfigZoneAwarenessConfigOutput) AvailabilityZoneCount() pulumix.Output[*int] {
	return pulumix.Apply[DomainClusterConfigZoneAwarenessConfig](o, func(v DomainClusterConfigZoneAwarenessConfig) *int { return v.AvailabilityZoneCount })
}

type DomainCognitoOptions struct {
	// Whether Amazon Cognito authentication with Kibana is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use.
	IdentityPoolId string `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached.
	RoleArn string `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use.
	UserPoolId string `pulumi:"userPoolId"`
}

type DomainCognitoOptionsArgs struct {
	// Whether Amazon Cognito authentication with Kibana is enabled or not.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// ID of the Cognito Identity Pool to use.
	IdentityPoolId pulumix.Input[string] `pulumi:"identityPoolId"`
	// ARN of the IAM role that has the AmazonESCognitoAccess policy attached.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// ID of the Cognito User Pool to use.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (DomainCognitoOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptions)(nil)).Elem()
}

func (i DomainCognitoOptionsArgs) ToDomainCognitoOptionsOutput() DomainCognitoOptionsOutput {
	return i.ToDomainCognitoOptionsOutputWithContext(context.Background())
}

func (i DomainCognitoOptionsArgs) ToDomainCognitoOptionsOutputWithContext(ctx context.Context) DomainCognitoOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainCognitoOptionsOutput)
}

func (i *DomainCognitoOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainCognitoOptionsArgs] {
	return pulumix.Val(i)
}

type DomainCognitoOptionsOutput struct{ *pulumi.OutputState }

func (DomainCognitoOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainCognitoOptions)(nil)).Elem()
}

func (o DomainCognitoOptionsOutput) ToDomainCognitoOptionsOutput() DomainCognitoOptionsOutput {
	return o
}

func (o DomainCognitoOptionsOutput) ToDomainCognitoOptionsOutputWithContext(ctx context.Context) DomainCognitoOptionsOutput {
	return o
}

func (o DomainCognitoOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainCognitoOptions] {
	return pulumix.Output[DomainCognitoOptions]{
		OutputState: o.OutputState,
	}
}

// Whether Amazon Cognito authentication with Kibana is enabled or not.
func (o DomainCognitoOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainCognitoOptions](o, func(v DomainCognitoOptions) *bool { return v.Enabled })
}

// ID of the Cognito Identity Pool to use.
func (o DomainCognitoOptionsOutput) IdentityPoolId() pulumix.Output[string] {
	return pulumix.Apply[DomainCognitoOptions](o, func(v DomainCognitoOptions) string { return v.IdentityPoolId })
}

// ARN of the IAM role that has the AmazonESCognitoAccess policy attached.
func (o DomainCognitoOptionsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[DomainCognitoOptions](o, func(v DomainCognitoOptions) string { return v.RoleArn })
}

// ID of the Cognito User Pool to use.
func (o DomainCognitoOptionsOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[DomainCognitoOptions](o, func(v DomainCognitoOptions) string { return v.UserPoolId })
}

type DomainDomainEndpointOptions struct {
	// Fully qualified domain for your custom endpoint.
	CustomEndpoint *string `pulumi:"customEndpoint"`
	// ACM certificate ARN for your custom endpoint.
	CustomEndpointCertificateArn *string `pulumi:"customEndpointCertificateArn"`
	// Whether to enable custom endpoint for the Elasticsearch domain.
	CustomEndpointEnabled *bool `pulumi:"customEndpointEnabled"`
	// Whether or not to require HTTPS. Defaults to `true`.
	EnforceHttps *bool `pulumi:"enforceHttps"`
	// Name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. The provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy *string `pulumi:"tlsSecurityPolicy"`
}

type DomainDomainEndpointOptionsArgs struct {
	// Fully qualified domain for your custom endpoint.
	CustomEndpoint pulumix.Input[*string] `pulumi:"customEndpoint"`
	// ACM certificate ARN for your custom endpoint.
	CustomEndpointCertificateArn pulumix.Input[*string] `pulumi:"customEndpointCertificateArn"`
	// Whether to enable custom endpoint for the Elasticsearch domain.
	CustomEndpointEnabled pulumix.Input[*bool] `pulumi:"customEndpointEnabled"`
	// Whether or not to require HTTPS. Defaults to `true`.
	EnforceHttps pulumix.Input[*bool] `pulumi:"enforceHttps"`
	// Name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. The provider will only perform drift detection if a configuration value is provided.
	TlsSecurityPolicy pulumix.Input[*string] `pulumi:"tlsSecurityPolicy"`
}

func (DomainDomainEndpointOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptions)(nil)).Elem()
}

func (i DomainDomainEndpointOptionsArgs) ToDomainDomainEndpointOptionsOutput() DomainDomainEndpointOptionsOutput {
	return i.ToDomainDomainEndpointOptionsOutputWithContext(context.Background())
}

func (i DomainDomainEndpointOptionsArgs) ToDomainDomainEndpointOptionsOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainDomainEndpointOptionsOutput)
}

func (i *DomainDomainEndpointOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainDomainEndpointOptionsArgs] {
	return pulumix.Val(i)
}

type DomainDomainEndpointOptionsOutput struct{ *pulumi.OutputState }

func (DomainDomainEndpointOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDomainEndpointOptions)(nil)).Elem()
}

func (o DomainDomainEndpointOptionsOutput) ToDomainDomainEndpointOptionsOutput() DomainDomainEndpointOptionsOutput {
	return o
}

func (o DomainDomainEndpointOptionsOutput) ToDomainDomainEndpointOptionsOutputWithContext(ctx context.Context) DomainDomainEndpointOptionsOutput {
	return o
}

func (o DomainDomainEndpointOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainDomainEndpointOptions] {
	return pulumix.Output[DomainDomainEndpointOptions]{
		OutputState: o.OutputState,
	}
}

// Fully qualified domain for your custom endpoint.
func (o DomainDomainEndpointOptionsOutput) CustomEndpoint() pulumix.Output[*string] {
	return pulumix.Apply[DomainDomainEndpointOptions](o, func(v DomainDomainEndpointOptions) *string { return v.CustomEndpoint })
}

// ACM certificate ARN for your custom endpoint.
func (o DomainDomainEndpointOptionsOutput) CustomEndpointCertificateArn() pulumix.Output[*string] {
	return pulumix.Apply[DomainDomainEndpointOptions](o, func(v DomainDomainEndpointOptions) *string { return v.CustomEndpointCertificateArn })
}

// Whether to enable custom endpoint for the Elasticsearch domain.
func (o DomainDomainEndpointOptionsOutput) CustomEndpointEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainDomainEndpointOptions](o, func(v DomainDomainEndpointOptions) *bool { return v.CustomEndpointEnabled })
}

// Whether or not to require HTTPS. Defaults to `true`.
func (o DomainDomainEndpointOptionsOutput) EnforceHttps() pulumix.Output[*bool] {
	return pulumix.Apply[DomainDomainEndpointOptions](o, func(v DomainDomainEndpointOptions) *bool { return v.EnforceHttps })
}

// Name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. The provider will only perform drift detection if a configuration value is provided.
func (o DomainDomainEndpointOptionsOutput) TlsSecurityPolicy() pulumix.Output[*string] {
	return pulumix.Apply[DomainDomainEndpointOptions](o, func(v DomainDomainEndpointOptions) *string { return v.TlsSecurityPolicy })
}

type DomainEbsOptions struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled bool `pulumi:"ebsEnabled"`
	// Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
	Iops *int `pulumi:"iops"`
	// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
	Throughput *int `pulumi:"throughput"`
	// Size of EBS volumes attached to data nodes (in GiB).
	VolumeSize *int `pulumi:"volumeSize"`
	// Type of EBS volumes attached to data nodes.
	VolumeType *string `pulumi:"volumeType"`
}

type DomainEbsOptionsArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled pulumix.Input[bool] `pulumi:"ebsEnabled"`
	// Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
	Throughput pulumix.Input[*int] `pulumi:"throughput"`
	// Size of EBS volumes attached to data nodes (in GiB).
	VolumeSize pulumix.Input[*int] `pulumi:"volumeSize"`
	// Type of EBS volumes attached to data nodes.
	VolumeType pulumix.Input[*string] `pulumi:"volumeType"`
}

func (DomainEbsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptions)(nil)).Elem()
}

func (i DomainEbsOptionsArgs) ToDomainEbsOptionsOutput() DomainEbsOptionsOutput {
	return i.ToDomainEbsOptionsOutputWithContext(context.Background())
}

func (i DomainEbsOptionsArgs) ToDomainEbsOptionsOutputWithContext(ctx context.Context) DomainEbsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEbsOptionsOutput)
}

func (i *DomainEbsOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainEbsOptionsArgs] {
	return pulumix.Val(i)
}

type DomainEbsOptionsOutput struct{ *pulumi.OutputState }

func (DomainEbsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEbsOptions)(nil)).Elem()
}

func (o DomainEbsOptionsOutput) ToDomainEbsOptionsOutput() DomainEbsOptionsOutput {
	return o
}

func (o DomainEbsOptionsOutput) ToDomainEbsOptionsOutputWithContext(ctx context.Context) DomainEbsOptionsOutput {
	return o
}

func (o DomainEbsOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainEbsOptions] {
	return pulumix.Output[DomainEbsOptions]{
		OutputState: o.OutputState,
	}
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o DomainEbsOptionsOutput) EbsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[DomainEbsOptions](o, func(v DomainEbsOptions) bool { return v.EbsEnabled })
}

// Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
func (o DomainEbsOptionsOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[DomainEbsOptions](o, func(v DomainEbsOptions) *int { return v.Iops })
}

// Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type.
func (o DomainEbsOptionsOutput) Throughput() pulumix.Output[*int] {
	return pulumix.Apply[DomainEbsOptions](o, func(v DomainEbsOptions) *int { return v.Throughput })
}

// Size of EBS volumes attached to data nodes (in GiB).
func (o DomainEbsOptionsOutput) VolumeSize() pulumix.Output[*int] {
	return pulumix.Apply[DomainEbsOptions](o, func(v DomainEbsOptions) *int { return v.VolumeSize })
}

// Type of EBS volumes attached to data nodes.
func (o DomainEbsOptionsOutput) VolumeType() pulumix.Output[*string] {
	return pulumix.Apply[DomainEbsOptions](o, func(v DomainEbsOptions) *string { return v.VolumeType })
}

type DomainEncryptAtRest struct {
	// Whether to enable encryption at rest. If the `encryptAtRest` block is not provided then this defaults to `false`. Enabling encryption on new domains requires `elasticsearchVersion` 5.1 or greater.
	Enabled bool `pulumi:"enabled"`
	// KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN. To prevent the provider detecting unwanted changes, use the key ARN instead.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

type DomainEncryptAtRestArgs struct {
	// Whether to enable encryption at rest. If the `encryptAtRest` block is not provided then this defaults to `false`. Enabling encryption on new domains requires `elasticsearchVersion` 5.1 or greater.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN. To prevent the provider detecting unwanted changes, use the key ARN instead.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
}

func (DomainEncryptAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRest)(nil)).Elem()
}

func (i DomainEncryptAtRestArgs) ToDomainEncryptAtRestOutput() DomainEncryptAtRestOutput {
	return i.ToDomainEncryptAtRestOutputWithContext(context.Background())
}

func (i DomainEncryptAtRestArgs) ToDomainEncryptAtRestOutputWithContext(ctx context.Context) DomainEncryptAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainEncryptAtRestOutput)
}

func (i *DomainEncryptAtRestArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainEncryptAtRestArgs] {
	return pulumix.Val(i)
}

type DomainEncryptAtRestOutput struct{ *pulumi.OutputState }

func (DomainEncryptAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEncryptAtRest)(nil)).Elem()
}

func (o DomainEncryptAtRestOutput) ToDomainEncryptAtRestOutput() DomainEncryptAtRestOutput {
	return o
}

func (o DomainEncryptAtRestOutput) ToDomainEncryptAtRestOutputWithContext(ctx context.Context) DomainEncryptAtRestOutput {
	return o
}

func (o DomainEncryptAtRestOutput) ToOutput(ctx context.Context) pulumix.Output[DomainEncryptAtRest] {
	return pulumix.Output[DomainEncryptAtRest]{
		OutputState: o.OutputState,
	}
}

// Whether to enable encryption at rest. If the `encryptAtRest` block is not provided then this defaults to `false`. Enabling encryption on new domains requires `elasticsearchVersion` 5.1 or greater.
func (o DomainEncryptAtRestOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[DomainEncryptAtRest](o, func(v DomainEncryptAtRest) bool { return v.Enabled })
}

// KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN. To prevent the provider detecting unwanted changes, use the key ARN instead.
func (o DomainEncryptAtRestOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[DomainEncryptAtRest](o, func(v DomainEncryptAtRest) *string { return v.KmsKeyId })
}

type DomainLogPublishingOption struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Whether given log publishing option is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Type of Elasticsearch log. Valid values: `INDEX_SLOW_LOGS`, `SEARCH_SLOW_LOGS`, `ES_APPLICATION_LOGS`, `AUDIT_LOGS`.
	LogType string `pulumi:"logType"`
}

type DomainLogPublishingOptionArgs struct {
	// ARN of the Cloudwatch log group to which log needs to be published.
	CloudwatchLogGroupArn pulumix.Input[string] `pulumi:"cloudwatchLogGroupArn"`
	// Whether given log publishing option is enabled or not.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Type of Elasticsearch log. Valid values: `INDEX_SLOW_LOGS`, `SEARCH_SLOW_LOGS`, `ES_APPLICATION_LOGS`, `AUDIT_LOGS`.
	LogType pulumix.Input[string] `pulumi:"logType"`
}

func (DomainLogPublishingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOption)(nil)).Elem()
}

func (i DomainLogPublishingOptionArgs) ToDomainLogPublishingOptionOutput() DomainLogPublishingOptionOutput {
	return i.ToDomainLogPublishingOptionOutputWithContext(context.Background())
}

func (i DomainLogPublishingOptionArgs) ToDomainLogPublishingOptionOutputWithContext(ctx context.Context) DomainLogPublishingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLogPublishingOptionOutput)
}

func (i *DomainLogPublishingOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainLogPublishingOptionArgs] {
	return pulumix.Val(i)
}

type DomainLogPublishingOptionOutput struct{ *pulumi.OutputState }

func (DomainLogPublishingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainLogPublishingOption)(nil)).Elem()
}

func (o DomainLogPublishingOptionOutput) ToDomainLogPublishingOptionOutput() DomainLogPublishingOptionOutput {
	return o
}

func (o DomainLogPublishingOptionOutput) ToDomainLogPublishingOptionOutputWithContext(ctx context.Context) DomainLogPublishingOptionOutput {
	return o
}

func (o DomainLogPublishingOptionOutput) ToOutput(ctx context.Context) pulumix.Output[DomainLogPublishingOption] {
	return pulumix.Output[DomainLogPublishingOption]{
		OutputState: o.OutputState,
	}
}

// ARN of the Cloudwatch log group to which log needs to be published.
func (o DomainLogPublishingOptionOutput) CloudwatchLogGroupArn() pulumix.Output[string] {
	return pulumix.Apply[DomainLogPublishingOption](o, func(v DomainLogPublishingOption) string { return v.CloudwatchLogGroupArn })
}

// Whether given log publishing option is enabled or not.
func (o DomainLogPublishingOptionOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainLogPublishingOption](o, func(v DomainLogPublishingOption) *bool { return v.Enabled })
}

// Type of Elasticsearch log. Valid values: `INDEX_SLOW_LOGS`, `SEARCH_SLOW_LOGS`, `ES_APPLICATION_LOGS`, `AUDIT_LOGS`.
func (o DomainLogPublishingOptionOutput) LogType() pulumix.Output[string] {
	return pulumix.Apply[DomainLogPublishingOption](o, func(v DomainLogPublishingOption) string { return v.LogType })
}

type DomainNodeToNodeEncryption struct {
	// Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
	Enabled bool `pulumi:"enabled"`
}

type DomainNodeToNodeEncryptionArgs struct {
	// Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (DomainNodeToNodeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryption)(nil)).Elem()
}

func (i DomainNodeToNodeEncryptionArgs) ToDomainNodeToNodeEncryptionOutput() DomainNodeToNodeEncryptionOutput {
	return i.ToDomainNodeToNodeEncryptionOutputWithContext(context.Background())
}

func (i DomainNodeToNodeEncryptionArgs) ToDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNodeToNodeEncryptionOutput)
}

func (i *DomainNodeToNodeEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainNodeToNodeEncryptionArgs] {
	return pulumix.Val(i)
}

type DomainNodeToNodeEncryptionOutput struct{ *pulumi.OutputState }

func (DomainNodeToNodeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNodeToNodeEncryption)(nil)).Elem()
}

func (o DomainNodeToNodeEncryptionOutput) ToDomainNodeToNodeEncryptionOutput() DomainNodeToNodeEncryptionOutput {
	return o
}

func (o DomainNodeToNodeEncryptionOutput) ToDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) DomainNodeToNodeEncryptionOutput {
	return o
}

func (o DomainNodeToNodeEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[DomainNodeToNodeEncryption] {
	return pulumix.Output[DomainNodeToNodeEncryption]{
		OutputState: o.OutputState,
	}
}

// Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
func (o DomainNodeToNodeEncryptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[DomainNodeToNodeEncryption](o, func(v DomainNodeToNodeEncryption) bool { return v.Enabled })
}

type DomainSamlOptionsSamlOptions struct {
	// Whether SAML authentication is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Information from your identity provider.
	Idp *DomainSamlOptionsSamlOptionsIdp `pulumi:"idp"`
	// This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
	MasterBackendRole *string `pulumi:"masterBackendRole"`
	// This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
	MasterUserName *string `pulumi:"masterUserName"`
	// Element of the SAML assertion to use for backend roles. Default is roles.
	RolesKey *string `pulumi:"rolesKey"`
	// Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
	SessionTimeoutMinutes *int `pulumi:"sessionTimeoutMinutes"`
	// Custom SAML attribute to use for user names. Default is an empty string - `""`. This will cause Elasticsearch to use the `NameID` element of the `Subject`, which is the default location for name identifiers in the SAML specification.
	SubjectKey *string `pulumi:"subjectKey"`
}

type DomainSamlOptionsSamlOptionsArgs struct {
	// Whether SAML authentication is enabled.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Information from your identity provider.
	Idp pulumix.Input[*DomainSamlOptionsSamlOptionsIdpArgs] `pulumi:"idp"`
	// This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
	MasterBackendRole pulumix.Input[*string] `pulumi:"masterBackendRole"`
	// This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
	MasterUserName pulumix.Input[*string] `pulumi:"masterUserName"`
	// Element of the SAML assertion to use for backend roles. Default is roles.
	RolesKey pulumix.Input[*string] `pulumi:"rolesKey"`
	// Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
	SessionTimeoutMinutes pulumix.Input[*int] `pulumi:"sessionTimeoutMinutes"`
	// Custom SAML attribute to use for user names. Default is an empty string - `""`. This will cause Elasticsearch to use the `NameID` element of the `Subject`, which is the default location for name identifiers in the SAML specification.
	SubjectKey pulumix.Input[*string] `pulumi:"subjectKey"`
}

func (DomainSamlOptionsSamlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSamlOptionsSamlOptions)(nil)).Elem()
}

func (i DomainSamlOptionsSamlOptionsArgs) ToDomainSamlOptionsSamlOptionsOutput() DomainSamlOptionsSamlOptionsOutput {
	return i.ToDomainSamlOptionsSamlOptionsOutputWithContext(context.Background())
}

func (i DomainSamlOptionsSamlOptionsArgs) ToDomainSamlOptionsSamlOptionsOutputWithContext(ctx context.Context) DomainSamlOptionsSamlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSamlOptionsSamlOptionsOutput)
}

func (i *DomainSamlOptionsSamlOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainSamlOptionsSamlOptionsArgs] {
	return pulumix.Val(i)
}

type DomainSamlOptionsSamlOptionsOutput struct{ *pulumi.OutputState }

func (DomainSamlOptionsSamlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSamlOptionsSamlOptions)(nil)).Elem()
}

func (o DomainSamlOptionsSamlOptionsOutput) ToDomainSamlOptionsSamlOptionsOutput() DomainSamlOptionsSamlOptionsOutput {
	return o
}

func (o DomainSamlOptionsSamlOptionsOutput) ToDomainSamlOptionsSamlOptionsOutputWithContext(ctx context.Context) DomainSamlOptionsSamlOptionsOutput {
	return o
}

func (o DomainSamlOptionsSamlOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainSamlOptionsSamlOptions] {
	return pulumix.Output[DomainSamlOptionsSamlOptions]{
		OutputState: o.OutputState,
	}
}

// Whether SAML authentication is enabled.
func (o DomainSamlOptionsSamlOptionsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *bool { return v.Enabled })
}

// Information from your identity provider.
func (o DomainSamlOptionsSamlOptionsOutput) Idp() pulumix.GPtrOutput[DomainSamlOptionsSamlOptionsIdp, DomainSamlOptionsSamlOptionsIdpOutput] {
	value := pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *DomainSamlOptionsSamlOptionsIdp { return v.Idp })
	return pulumix.GPtrOutput[DomainSamlOptionsSamlOptionsIdp, DomainSamlOptionsSamlOptionsIdpOutput]{OutputState: value.OutputState}
}

// This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
func (o DomainSamlOptionsSamlOptionsOutput) MasterBackendRole() pulumix.Output[*string] {
	return pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *string { return v.MasterBackendRole })
}

// This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
func (o DomainSamlOptionsSamlOptionsOutput) MasterUserName() pulumix.Output[*string] {
	return pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *string { return v.MasterUserName })
}

// Element of the SAML assertion to use for backend roles. Default is roles.
func (o DomainSamlOptionsSamlOptionsOutput) RolesKey() pulumix.Output[*string] {
	return pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *string { return v.RolesKey })
}

// Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
func (o DomainSamlOptionsSamlOptionsOutput) SessionTimeoutMinutes() pulumix.Output[*int] {
	return pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *int { return v.SessionTimeoutMinutes })
}

// Custom SAML attribute to use for user names. Default is an empty string - `""`. This will cause Elasticsearch to use the `NameID` element of the `Subject`, which is the default location for name identifiers in the SAML specification.
func (o DomainSamlOptionsSamlOptionsOutput) SubjectKey() pulumix.Output[*string] {
	return pulumix.Apply[DomainSamlOptionsSamlOptions](o, func(v DomainSamlOptionsSamlOptions) *string { return v.SubjectKey })
}

type DomainSamlOptionsSamlOptionsIdp struct {
	// The unique Entity ID of the application in SAML Identity Provider.
	EntityId string `pulumi:"entityId"`
	// The Metadata of the SAML application in xml format.
	MetadataContent string `pulumi:"metadataContent"`
}

type DomainSamlOptionsSamlOptionsIdpArgs struct {
	// The unique Entity ID of the application in SAML Identity Provider.
	EntityId pulumix.Input[string] `pulumi:"entityId"`
	// The Metadata of the SAML application in xml format.
	MetadataContent pulumix.Input[string] `pulumi:"metadataContent"`
}

func (DomainSamlOptionsSamlOptionsIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSamlOptionsSamlOptionsIdp)(nil)).Elem()
}

func (i DomainSamlOptionsSamlOptionsIdpArgs) ToDomainSamlOptionsSamlOptionsIdpOutput() DomainSamlOptionsSamlOptionsIdpOutput {
	return i.ToDomainSamlOptionsSamlOptionsIdpOutputWithContext(context.Background())
}

func (i DomainSamlOptionsSamlOptionsIdpArgs) ToDomainSamlOptionsSamlOptionsIdpOutputWithContext(ctx context.Context) DomainSamlOptionsSamlOptionsIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSamlOptionsSamlOptionsIdpOutput)
}

func (i *DomainSamlOptionsSamlOptionsIdpArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainSamlOptionsSamlOptionsIdpArgs] {
	return pulumix.Val(i)
}

type DomainSamlOptionsSamlOptionsIdpOutput struct{ *pulumi.OutputState }

func (DomainSamlOptionsSamlOptionsIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSamlOptionsSamlOptionsIdp)(nil)).Elem()
}

func (o DomainSamlOptionsSamlOptionsIdpOutput) ToDomainSamlOptionsSamlOptionsIdpOutput() DomainSamlOptionsSamlOptionsIdpOutput {
	return o
}

func (o DomainSamlOptionsSamlOptionsIdpOutput) ToDomainSamlOptionsSamlOptionsIdpOutputWithContext(ctx context.Context) DomainSamlOptionsSamlOptionsIdpOutput {
	return o
}

func (o DomainSamlOptionsSamlOptionsIdpOutput) ToOutput(ctx context.Context) pulumix.Output[DomainSamlOptionsSamlOptionsIdp] {
	return pulumix.Output[DomainSamlOptionsSamlOptionsIdp]{
		OutputState: o.OutputState,
	}
}

// The unique Entity ID of the application in SAML Identity Provider.
func (o DomainSamlOptionsSamlOptionsIdpOutput) EntityId() pulumix.Output[string] {
	return pulumix.Apply[DomainSamlOptionsSamlOptionsIdp](o, func(v DomainSamlOptionsSamlOptionsIdp) string { return v.EntityId })
}

// The Metadata of the SAML application in xml format.
func (o DomainSamlOptionsSamlOptionsIdpOutput) MetadataContent() pulumix.Output[string] {
	return pulumix.Apply[DomainSamlOptionsSamlOptionsIdp](o, func(v DomainSamlOptionsSamlOptionsIdp) string { return v.MetadataContent })
}

type DomainSnapshotOptions struct {
	// Hour during which the service takes an automated daily snapshot of the indices in the domain.
	AutomatedSnapshotStartHour int `pulumi:"automatedSnapshotStartHour"`
}

type DomainSnapshotOptionsArgs struct {
	// Hour during which the service takes an automated daily snapshot of the indices in the domain.
	AutomatedSnapshotStartHour pulumix.Input[int] `pulumi:"automatedSnapshotStartHour"`
}

func (DomainSnapshotOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptions)(nil)).Elem()
}

func (i DomainSnapshotOptionsArgs) ToDomainSnapshotOptionsOutput() DomainSnapshotOptionsOutput {
	return i.ToDomainSnapshotOptionsOutputWithContext(context.Background())
}

func (i DomainSnapshotOptionsArgs) ToDomainSnapshotOptionsOutputWithContext(ctx context.Context) DomainSnapshotOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSnapshotOptionsOutput)
}

func (i *DomainSnapshotOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainSnapshotOptionsArgs] {
	return pulumix.Val(i)
}

type DomainSnapshotOptionsOutput struct{ *pulumi.OutputState }

func (DomainSnapshotOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSnapshotOptions)(nil)).Elem()
}

func (o DomainSnapshotOptionsOutput) ToDomainSnapshotOptionsOutput() DomainSnapshotOptionsOutput {
	return o
}

func (o DomainSnapshotOptionsOutput) ToDomainSnapshotOptionsOutputWithContext(ctx context.Context) DomainSnapshotOptionsOutput {
	return o
}

func (o DomainSnapshotOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainSnapshotOptions] {
	return pulumix.Output[DomainSnapshotOptions]{
		OutputState: o.OutputState,
	}
}

// Hour during which the service takes an automated daily snapshot of the indices in the domain.
func (o DomainSnapshotOptionsOutput) AutomatedSnapshotStartHour() pulumix.Output[int] {
	return pulumix.Apply[DomainSnapshotOptions](o, func(v DomainSnapshotOptions) int { return v.AutomatedSnapshotStartHour })
}

type DomainVpcOptions struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     *string  `pulumi:"vpcId"`
}

type DomainVpcOptionsArgs struct {
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	VpcId     pulumix.Input[*string]  `pulumi:"vpcId"`
}

func (DomainVpcOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptions)(nil)).Elem()
}

func (i DomainVpcOptionsArgs) ToDomainVpcOptionsOutput() DomainVpcOptionsOutput {
	return i.ToDomainVpcOptionsOutputWithContext(context.Background())
}

func (i DomainVpcOptionsArgs) ToDomainVpcOptionsOutputWithContext(ctx context.Context) DomainVpcOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainVpcOptionsOutput)
}

func (i *DomainVpcOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainVpcOptionsArgs] {
	return pulumix.Val(i)
}

type DomainVpcOptionsOutput struct{ *pulumi.OutputState }

func (DomainVpcOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainVpcOptions)(nil)).Elem()
}

func (o DomainVpcOptionsOutput) ToDomainVpcOptionsOutput() DomainVpcOptionsOutput {
	return o
}

func (o DomainVpcOptionsOutput) ToDomainVpcOptionsOutputWithContext(ctx context.Context) DomainVpcOptionsOutput {
	return o
}

func (o DomainVpcOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainVpcOptions] {
	return pulumix.Output[DomainVpcOptions]{
		OutputState: o.OutputState,
	}
}

func (o DomainVpcOptionsOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DomainVpcOptions](o, func(v DomainVpcOptions) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
func (o DomainVpcOptionsOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DomainVpcOptions](o, func(v DomainVpcOptions) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
func (o DomainVpcOptionsOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DomainVpcOptions](o, func(v DomainVpcOptions) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o DomainVpcOptionsOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[DomainVpcOptions](o, func(v DomainVpcOptions) *string { return v.VpcId })
}

type GetDomainAdvancedSecurityOption struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// Whether the internal user database is enabled.
	InternalUserDatabaseEnabled bool `pulumi:"internalUserDatabaseEnabled"`
}

type GetDomainAdvancedSecurityOptionArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Whether the internal user database is enabled.
	InternalUserDatabaseEnabled pulumix.Input[bool] `pulumi:"internalUserDatabaseEnabled"`
}

func (GetDomainAdvancedSecurityOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAdvancedSecurityOption)(nil)).Elem()
}

func (i GetDomainAdvancedSecurityOptionArgs) ToGetDomainAdvancedSecurityOptionOutput() GetDomainAdvancedSecurityOptionOutput {
	return i.ToGetDomainAdvancedSecurityOptionOutputWithContext(context.Background())
}

func (i GetDomainAdvancedSecurityOptionArgs) ToGetDomainAdvancedSecurityOptionOutputWithContext(ctx context.Context) GetDomainAdvancedSecurityOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainAdvancedSecurityOptionOutput)
}

func (i *GetDomainAdvancedSecurityOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainAdvancedSecurityOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainAdvancedSecurityOptionOutput struct{ *pulumi.OutputState }

func (GetDomainAdvancedSecurityOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAdvancedSecurityOption)(nil)).Elem()
}

func (o GetDomainAdvancedSecurityOptionOutput) ToGetDomainAdvancedSecurityOptionOutput() GetDomainAdvancedSecurityOptionOutput {
	return o
}

func (o GetDomainAdvancedSecurityOptionOutput) ToGetDomainAdvancedSecurityOptionOutputWithContext(ctx context.Context) GetDomainAdvancedSecurityOptionOutput {
	return o
}

func (o GetDomainAdvancedSecurityOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainAdvancedSecurityOption] {
	return pulumix.Output[GetDomainAdvancedSecurityOption]{
		OutputState: o.OutputState,
	}
}

// Whether node to node encryption is enabled.
func (o GetDomainAdvancedSecurityOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainAdvancedSecurityOption](o, func(v GetDomainAdvancedSecurityOption) bool { return v.Enabled })
}

// Whether the internal user database is enabled.
func (o GetDomainAdvancedSecurityOptionOutput) InternalUserDatabaseEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainAdvancedSecurityOption](o, func(v GetDomainAdvancedSecurityOption) bool { return v.InternalUserDatabaseEnabled })
}

type GetDomainAutoTuneOption struct {
	// The Auto-Tune desired state for the domain.
	DesiredState string `pulumi:"desiredState"`
	// A list of the nested configurations for the Auto-Tune maintenance windows of the domain.
	MaintenanceSchedules []GetDomainAutoTuneOptionMaintenanceSchedule `pulumi:"maintenanceSchedules"`
	// Whether the domain is set to roll back to default Auto-Tune settings when disabling Auto-Tune.
	RollbackOnDisable string `pulumi:"rollbackOnDisable"`
}

type GetDomainAutoTuneOptionArgs struct {
	// The Auto-Tune desired state for the domain.
	DesiredState pulumix.Input[string] `pulumi:"desiredState"`
	// A list of the nested configurations for the Auto-Tune maintenance windows of the domain.
	MaintenanceSchedules pulumix.Input[[]*GetDomainAutoTuneOptionMaintenanceScheduleArgs] `pulumi:"maintenanceSchedules"`
	// Whether the domain is set to roll back to default Auto-Tune settings when disabling Auto-Tune.
	RollbackOnDisable pulumix.Input[string] `pulumi:"rollbackOnDisable"`
}

func (GetDomainAutoTuneOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAutoTuneOption)(nil)).Elem()
}

func (i GetDomainAutoTuneOptionArgs) ToGetDomainAutoTuneOptionOutput() GetDomainAutoTuneOptionOutput {
	return i.ToGetDomainAutoTuneOptionOutputWithContext(context.Background())
}

func (i GetDomainAutoTuneOptionArgs) ToGetDomainAutoTuneOptionOutputWithContext(ctx context.Context) GetDomainAutoTuneOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainAutoTuneOptionOutput)
}

func (i *GetDomainAutoTuneOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainAutoTuneOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainAutoTuneOptionOutput struct{ *pulumi.OutputState }

func (GetDomainAutoTuneOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAutoTuneOption)(nil)).Elem()
}

func (o GetDomainAutoTuneOptionOutput) ToGetDomainAutoTuneOptionOutput() GetDomainAutoTuneOptionOutput {
	return o
}

func (o GetDomainAutoTuneOptionOutput) ToGetDomainAutoTuneOptionOutputWithContext(ctx context.Context) GetDomainAutoTuneOptionOutput {
	return o
}

func (o GetDomainAutoTuneOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainAutoTuneOption] {
	return pulumix.Output[GetDomainAutoTuneOption]{
		OutputState: o.OutputState,
	}
}

// The Auto-Tune desired state for the domain.
func (o GetDomainAutoTuneOptionOutput) DesiredState() pulumix.Output[string] {
	return pulumix.Apply[GetDomainAutoTuneOption](o, func(v GetDomainAutoTuneOption) string { return v.DesiredState })
}

// A list of the nested configurations for the Auto-Tune maintenance windows of the domain.
func (o GetDomainAutoTuneOptionOutput) MaintenanceSchedules() pulumix.GArrayOutput[GetDomainAutoTuneOptionMaintenanceSchedule, GetDomainAutoTuneOptionMaintenanceScheduleOutput] {
	value := pulumix.Apply[GetDomainAutoTuneOption](o, func(v GetDomainAutoTuneOption) []GetDomainAutoTuneOptionMaintenanceSchedule {
		return v.MaintenanceSchedules
	})
	return pulumix.GArrayOutput[GetDomainAutoTuneOptionMaintenanceSchedule, GetDomainAutoTuneOptionMaintenanceScheduleOutput]{OutputState: value.OutputState}
}

// Whether the domain is set to roll back to default Auto-Tune settings when disabling Auto-Tune.
func (o GetDomainAutoTuneOptionOutput) RollbackOnDisable() pulumix.Output[string] {
	return pulumix.Apply[GetDomainAutoTuneOption](o, func(v GetDomainAutoTuneOption) string { return v.RollbackOnDisable })
}

type GetDomainAutoTuneOptionMaintenanceSchedule struct {
	// Cron expression for an Auto-Tune maintenance schedule.
	CronExpressionForRecurrence string `pulumi:"cronExpressionForRecurrence"`
	// Configuration block for the duration of the Auto-Tune maintenance window.
	Durations []GetDomainAutoTuneOptionMaintenanceScheduleDuration `pulumi:"durations"`
	// Date and time at which the Auto-Tune maintenance schedule starts in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
	StartAt string `pulumi:"startAt"`
}

type GetDomainAutoTuneOptionMaintenanceScheduleArgs struct {
	// Cron expression for an Auto-Tune maintenance schedule.
	CronExpressionForRecurrence pulumix.Input[string] `pulumi:"cronExpressionForRecurrence"`
	// Configuration block for the duration of the Auto-Tune maintenance window.
	Durations pulumix.Input[[]*GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs] `pulumi:"durations"`
	// Date and time at which the Auto-Tune maintenance schedule starts in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
	StartAt pulumix.Input[string] `pulumi:"startAt"`
}

func (GetDomainAutoTuneOptionMaintenanceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAutoTuneOptionMaintenanceSchedule)(nil)).Elem()
}

func (i GetDomainAutoTuneOptionMaintenanceScheduleArgs) ToGetDomainAutoTuneOptionMaintenanceScheduleOutput() GetDomainAutoTuneOptionMaintenanceScheduleOutput {
	return i.ToGetDomainAutoTuneOptionMaintenanceScheduleOutputWithContext(context.Background())
}

func (i GetDomainAutoTuneOptionMaintenanceScheduleArgs) ToGetDomainAutoTuneOptionMaintenanceScheduleOutputWithContext(ctx context.Context) GetDomainAutoTuneOptionMaintenanceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainAutoTuneOptionMaintenanceScheduleOutput)
}

func (i *GetDomainAutoTuneOptionMaintenanceScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainAutoTuneOptionMaintenanceScheduleArgs] {
	return pulumix.Val(i)
}

type GetDomainAutoTuneOptionMaintenanceScheduleOutput struct{ *pulumi.OutputState }

func (GetDomainAutoTuneOptionMaintenanceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAutoTuneOptionMaintenanceSchedule)(nil)).Elem()
}

func (o GetDomainAutoTuneOptionMaintenanceScheduleOutput) ToGetDomainAutoTuneOptionMaintenanceScheduleOutput() GetDomainAutoTuneOptionMaintenanceScheduleOutput {
	return o
}

func (o GetDomainAutoTuneOptionMaintenanceScheduleOutput) ToGetDomainAutoTuneOptionMaintenanceScheduleOutputWithContext(ctx context.Context) GetDomainAutoTuneOptionMaintenanceScheduleOutput {
	return o
}

func (o GetDomainAutoTuneOptionMaintenanceScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainAutoTuneOptionMaintenanceSchedule] {
	return pulumix.Output[GetDomainAutoTuneOptionMaintenanceSchedule]{
		OutputState: o.OutputState,
	}
}

// Cron expression for an Auto-Tune maintenance schedule.
func (o GetDomainAutoTuneOptionMaintenanceScheduleOutput) CronExpressionForRecurrence() pulumix.Output[string] {
	return pulumix.Apply[GetDomainAutoTuneOptionMaintenanceSchedule](o, func(v GetDomainAutoTuneOptionMaintenanceSchedule) string { return v.CronExpressionForRecurrence })
}

// Configuration block for the duration of the Auto-Tune maintenance window.
func (o GetDomainAutoTuneOptionMaintenanceScheduleOutput) Durations() pulumix.GArrayOutput[GetDomainAutoTuneOptionMaintenanceScheduleDuration, GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput] {
	value := pulumix.Apply[GetDomainAutoTuneOptionMaintenanceSchedule](o, func(v GetDomainAutoTuneOptionMaintenanceSchedule) []GetDomainAutoTuneOptionMaintenanceScheduleDuration {
		return v.Durations
	})
	return pulumix.GArrayOutput[GetDomainAutoTuneOptionMaintenanceScheduleDuration, GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput]{OutputState: value.OutputState}
}

// Date and time at which the Auto-Tune maintenance schedule starts in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
func (o GetDomainAutoTuneOptionMaintenanceScheduleOutput) StartAt() pulumix.Output[string] {
	return pulumix.Apply[GetDomainAutoTuneOptionMaintenanceSchedule](o, func(v GetDomainAutoTuneOptionMaintenanceSchedule) string { return v.StartAt })
}

type GetDomainAutoTuneOptionMaintenanceScheduleDuration struct {
	// Unit of time.
	Unit string `pulumi:"unit"`
	// Duration of an Auto-Tune maintenance window.
	Value int `pulumi:"value"`
}

type GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs struct {
	// Unit of time.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// Duration of an Auto-Tune maintenance window.
	Value pulumix.Input[int] `pulumi:"value"`
}

func (GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAutoTuneOptionMaintenanceScheduleDuration)(nil)).Elem()
}

func (i GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs) ToGetDomainAutoTuneOptionMaintenanceScheduleDurationOutput() GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput {
	return i.ToGetDomainAutoTuneOptionMaintenanceScheduleDurationOutputWithContext(context.Background())
}

func (i GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs) ToGetDomainAutoTuneOptionMaintenanceScheduleDurationOutputWithContext(ctx context.Context) GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput)
}

func (i *GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainAutoTuneOptionMaintenanceScheduleDurationArgs] {
	return pulumix.Val(i)
}

type GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput struct{ *pulumi.OutputState }

func (GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAutoTuneOptionMaintenanceScheduleDuration)(nil)).Elem()
}

func (o GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput) ToGetDomainAutoTuneOptionMaintenanceScheduleDurationOutput() GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput {
	return o
}

func (o GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput) ToGetDomainAutoTuneOptionMaintenanceScheduleDurationOutputWithContext(ctx context.Context) GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput {
	return o
}

func (o GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainAutoTuneOptionMaintenanceScheduleDuration] {
	return pulumix.Output[GetDomainAutoTuneOptionMaintenanceScheduleDuration]{
		OutputState: o.OutputState,
	}
}

// Unit of time.
func (o GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[GetDomainAutoTuneOptionMaintenanceScheduleDuration](o, func(v GetDomainAutoTuneOptionMaintenanceScheduleDuration) string { return v.Unit })
}

// Duration of an Auto-Tune maintenance window.
func (o GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput) Value() pulumix.Output[int] {
	return pulumix.Apply[GetDomainAutoTuneOptionMaintenanceScheduleDuration](o, func(v GetDomainAutoTuneOptionMaintenanceScheduleDuration) int { return v.Value })
}

type GetDomainClusterConfig struct {
	// Configuration block containing cold storage configuration.
	ColdStorageOptions []GetDomainClusterConfigColdStorageOption `pulumi:"coldStorageOptions"`
	// Number of dedicated master nodes in the cluster.
	DedicatedMasterCount int `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled bool `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType string `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount int `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType string `pulumi:"instanceType"`
	// The number of warm nodes in the cluster.
	WarmCount int `pulumi:"warmCount"`
	// Warm storage is enabled.
	WarmEnabled bool `pulumi:"warmEnabled"`
	// The instance type for the Elasticsearch cluster's warm nodes.
	WarmType string `pulumi:"warmType"`
	// Configuration block containing zone awareness settings.
	ZoneAwarenessConfigs []GetDomainClusterConfigZoneAwarenessConfig `pulumi:"zoneAwarenessConfigs"`
	// Indicates whether zone awareness is enabled.
	ZoneAwarenessEnabled bool `pulumi:"zoneAwarenessEnabled"`
}

type GetDomainClusterConfigArgs struct {
	// Configuration block containing cold storage configuration.
	ColdStorageOptions pulumix.Input[[]*GetDomainClusterConfigColdStorageOptionArgs] `pulumi:"coldStorageOptions"`
	// Number of dedicated master nodes in the cluster.
	DedicatedMasterCount pulumix.Input[int] `pulumi:"dedicatedMasterCount"`
	// Indicates whether dedicated master nodes are enabled for the cluster.
	DedicatedMasterEnabled pulumix.Input[bool] `pulumi:"dedicatedMasterEnabled"`
	// Instance type of the dedicated master nodes in the cluster.
	DedicatedMasterType pulumix.Input[string] `pulumi:"dedicatedMasterType"`
	// Number of instances in the cluster.
	InstanceCount pulumix.Input[int] `pulumi:"instanceCount"`
	// Instance type of data nodes in the cluster.
	InstanceType pulumix.Input[string] `pulumi:"instanceType"`
	// The number of warm nodes in the cluster.
	WarmCount pulumix.Input[int] `pulumi:"warmCount"`
	// Warm storage is enabled.
	WarmEnabled pulumix.Input[bool] `pulumi:"warmEnabled"`
	// The instance type for the Elasticsearch cluster's warm nodes.
	WarmType pulumix.Input[string] `pulumi:"warmType"`
	// Configuration block containing zone awareness settings.
	ZoneAwarenessConfigs pulumix.Input[[]*GetDomainClusterConfigZoneAwarenessConfigArgs] `pulumi:"zoneAwarenessConfigs"`
	// Indicates whether zone awareness is enabled.
	ZoneAwarenessEnabled pulumix.Input[bool] `pulumi:"zoneAwarenessEnabled"`
}

func (GetDomainClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfig)(nil)).Elem()
}

func (i GetDomainClusterConfigArgs) ToGetDomainClusterConfigOutput() GetDomainClusterConfigOutput {
	return i.ToGetDomainClusterConfigOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigArgs) ToGetDomainClusterConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigOutput)
}

func (i *GetDomainClusterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainClusterConfigArgs] {
	return pulumix.Val(i)
}

type GetDomainClusterConfigOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfig)(nil)).Elem()
}

func (o GetDomainClusterConfigOutput) ToGetDomainClusterConfigOutput() GetDomainClusterConfigOutput {
	return o
}

func (o GetDomainClusterConfigOutput) ToGetDomainClusterConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigOutput {
	return o
}

func (o GetDomainClusterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainClusterConfig] {
	return pulumix.Output[GetDomainClusterConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration block containing cold storage configuration.
func (o GetDomainClusterConfigOutput) ColdStorageOptions() pulumix.GArrayOutput[GetDomainClusterConfigColdStorageOption, GetDomainClusterConfigColdStorageOptionOutput] {
	value := pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) []GetDomainClusterConfigColdStorageOption { return v.ColdStorageOptions })
	return pulumix.GArrayOutput[GetDomainClusterConfigColdStorageOption, GetDomainClusterConfigColdStorageOptionOutput]{OutputState: value.OutputState}
}

// Number of dedicated master nodes in the cluster.
func (o GetDomainClusterConfigOutput) DedicatedMasterCount() pulumix.Output[int] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) int { return v.DedicatedMasterCount })
}

// Indicates whether dedicated master nodes are enabled for the cluster.
func (o GetDomainClusterConfigOutput) DedicatedMasterEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) bool { return v.DedicatedMasterEnabled })
}

// Instance type of the dedicated master nodes in the cluster.
func (o GetDomainClusterConfigOutput) DedicatedMasterType() pulumix.Output[string] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) string { return v.DedicatedMasterType })
}

// Number of instances in the cluster.
func (o GetDomainClusterConfigOutput) InstanceCount() pulumix.Output[int] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) int { return v.InstanceCount })
}

// Instance type of data nodes in the cluster.
func (o GetDomainClusterConfigOutput) InstanceType() pulumix.Output[string] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) string { return v.InstanceType })
}

// The number of warm nodes in the cluster.
func (o GetDomainClusterConfigOutput) WarmCount() pulumix.Output[int] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) int { return v.WarmCount })
}

// Warm storage is enabled.
func (o GetDomainClusterConfigOutput) WarmEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) bool { return v.WarmEnabled })
}

// The instance type for the Elasticsearch cluster's warm nodes.
func (o GetDomainClusterConfigOutput) WarmType() pulumix.Output[string] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) string { return v.WarmType })
}

// Configuration block containing zone awareness settings.
func (o GetDomainClusterConfigOutput) ZoneAwarenessConfigs() pulumix.GArrayOutput[GetDomainClusterConfigZoneAwarenessConfig, GetDomainClusterConfigZoneAwarenessConfigOutput] {
	value := pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) []GetDomainClusterConfigZoneAwarenessConfig {
		return v.ZoneAwarenessConfigs
	})
	return pulumix.GArrayOutput[GetDomainClusterConfigZoneAwarenessConfig, GetDomainClusterConfigZoneAwarenessConfigOutput]{OutputState: value.OutputState}
}

// Indicates whether zone awareness is enabled.
func (o GetDomainClusterConfigOutput) ZoneAwarenessEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainClusterConfig](o, func(v GetDomainClusterConfig) bool { return v.ZoneAwarenessEnabled })
}

type GetDomainClusterConfigColdStorageOption struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
}

type GetDomainClusterConfigColdStorageOptionArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (GetDomainClusterConfigColdStorageOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfigColdStorageOption)(nil)).Elem()
}

func (i GetDomainClusterConfigColdStorageOptionArgs) ToGetDomainClusterConfigColdStorageOptionOutput() GetDomainClusterConfigColdStorageOptionOutput {
	return i.ToGetDomainClusterConfigColdStorageOptionOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigColdStorageOptionArgs) ToGetDomainClusterConfigColdStorageOptionOutputWithContext(ctx context.Context) GetDomainClusterConfigColdStorageOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigColdStorageOptionOutput)
}

func (i *GetDomainClusterConfigColdStorageOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainClusterConfigColdStorageOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainClusterConfigColdStorageOptionOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigColdStorageOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfigColdStorageOption)(nil)).Elem()
}

func (o GetDomainClusterConfigColdStorageOptionOutput) ToGetDomainClusterConfigColdStorageOptionOutput() GetDomainClusterConfigColdStorageOptionOutput {
	return o
}

func (o GetDomainClusterConfigColdStorageOptionOutput) ToGetDomainClusterConfigColdStorageOptionOutputWithContext(ctx context.Context) GetDomainClusterConfigColdStorageOptionOutput {
	return o
}

func (o GetDomainClusterConfigColdStorageOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainClusterConfigColdStorageOption] {
	return pulumix.Output[GetDomainClusterConfigColdStorageOption]{
		OutputState: o.OutputState,
	}
}

// Whether node to node encryption is enabled.
func (o GetDomainClusterConfigColdStorageOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainClusterConfigColdStorageOption](o, func(v GetDomainClusterConfigColdStorageOption) bool { return v.Enabled })
}

type GetDomainClusterConfigZoneAwarenessConfig struct {
	// Number of availability zones used.
	AvailabilityZoneCount int `pulumi:"availabilityZoneCount"`
}

type GetDomainClusterConfigZoneAwarenessConfigArgs struct {
	// Number of availability zones used.
	AvailabilityZoneCount pulumix.Input[int] `pulumi:"availabilityZoneCount"`
}

func (GetDomainClusterConfigZoneAwarenessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (i GetDomainClusterConfigZoneAwarenessConfigArgs) ToGetDomainClusterConfigZoneAwarenessConfigOutput() GetDomainClusterConfigZoneAwarenessConfigOutput {
	return i.ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(context.Background())
}

func (i GetDomainClusterConfigZoneAwarenessConfigArgs) ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigZoneAwarenessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainClusterConfigZoneAwarenessConfigOutput)
}

func (i *GetDomainClusterConfigZoneAwarenessConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainClusterConfigZoneAwarenessConfigArgs] {
	return pulumix.Val(i)
}

type GetDomainClusterConfigZoneAwarenessConfigOutput struct{ *pulumi.OutputState }

func (GetDomainClusterConfigZoneAwarenessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainClusterConfigZoneAwarenessConfig)(nil)).Elem()
}

func (o GetDomainClusterConfigZoneAwarenessConfigOutput) ToGetDomainClusterConfigZoneAwarenessConfigOutput() GetDomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o GetDomainClusterConfigZoneAwarenessConfigOutput) ToGetDomainClusterConfigZoneAwarenessConfigOutputWithContext(ctx context.Context) GetDomainClusterConfigZoneAwarenessConfigOutput {
	return o
}

func (o GetDomainClusterConfigZoneAwarenessConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainClusterConfigZoneAwarenessConfig] {
	return pulumix.Output[GetDomainClusterConfigZoneAwarenessConfig]{
		OutputState: o.OutputState,
	}
}

// Number of availability zones used.
func (o GetDomainClusterConfigZoneAwarenessConfigOutput) AvailabilityZoneCount() pulumix.Output[int] {
	return pulumix.Apply[GetDomainClusterConfigZoneAwarenessConfig](o, func(v GetDomainClusterConfigZoneAwarenessConfig) int { return v.AvailabilityZoneCount })
}

type GetDomainCognitoOption struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// The Cognito Identity pool used by the domain.
	IdentityPoolId string `pulumi:"identityPoolId"`
	// The IAM Role with the AmazonESCognitoAccess policy attached.
	RoleArn string `pulumi:"roleArn"`
	// The Cognito User pool used by the domain.
	UserPoolId string `pulumi:"userPoolId"`
}

type GetDomainCognitoOptionArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// The Cognito Identity pool used by the domain.
	IdentityPoolId pulumix.Input[string] `pulumi:"identityPoolId"`
	// The IAM Role with the AmazonESCognitoAccess policy attached.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The Cognito User pool used by the domain.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (GetDomainCognitoOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainCognitoOption)(nil)).Elem()
}

func (i GetDomainCognitoOptionArgs) ToGetDomainCognitoOptionOutput() GetDomainCognitoOptionOutput {
	return i.ToGetDomainCognitoOptionOutputWithContext(context.Background())
}

func (i GetDomainCognitoOptionArgs) ToGetDomainCognitoOptionOutputWithContext(ctx context.Context) GetDomainCognitoOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainCognitoOptionOutput)
}

func (i *GetDomainCognitoOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainCognitoOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainCognitoOptionOutput struct{ *pulumi.OutputState }

func (GetDomainCognitoOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainCognitoOption)(nil)).Elem()
}

func (o GetDomainCognitoOptionOutput) ToGetDomainCognitoOptionOutput() GetDomainCognitoOptionOutput {
	return o
}

func (o GetDomainCognitoOptionOutput) ToGetDomainCognitoOptionOutputWithContext(ctx context.Context) GetDomainCognitoOptionOutput {
	return o
}

func (o GetDomainCognitoOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainCognitoOption] {
	return pulumix.Output[GetDomainCognitoOption]{
		OutputState: o.OutputState,
	}
}

// Whether node to node encryption is enabled.
func (o GetDomainCognitoOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainCognitoOption](o, func(v GetDomainCognitoOption) bool { return v.Enabled })
}

// The Cognito Identity pool used by the domain.
func (o GetDomainCognitoOptionOutput) IdentityPoolId() pulumix.Output[string] {
	return pulumix.Apply[GetDomainCognitoOption](o, func(v GetDomainCognitoOption) string { return v.IdentityPoolId })
}

// The IAM Role with the AmazonESCognitoAccess policy attached.
func (o GetDomainCognitoOptionOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetDomainCognitoOption](o, func(v GetDomainCognitoOption) string { return v.RoleArn })
}

// The Cognito User pool used by the domain.
func (o GetDomainCognitoOptionOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[GetDomainCognitoOption](o, func(v GetDomainCognitoOption) string { return v.UserPoolId })
}

type GetDomainEbsOption struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled bool `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
	Iops int `pulumi:"iops"`
	// The throughput (in MiB/s) of the EBS volumes attached to data nodes.
	Throughput int `pulumi:"throughput"`
	// The size of EBS volumes attached to data nodes (in GB).
	VolumeSize int `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType string `pulumi:"volumeType"`
}

type GetDomainEbsOptionArgs struct {
	// Whether EBS volumes are attached to data nodes in the domain.
	EbsEnabled pulumix.Input[bool] `pulumi:"ebsEnabled"`
	// The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
	Iops pulumix.Input[int] `pulumi:"iops"`
	// The throughput (in MiB/s) of the EBS volumes attached to data nodes.
	Throughput pulumix.Input[int] `pulumi:"throughput"`
	// The size of EBS volumes attached to data nodes (in GB).
	VolumeSize pulumix.Input[int] `pulumi:"volumeSize"`
	// The type of EBS volumes attached to data nodes.
	VolumeType pulumix.Input[string] `pulumi:"volumeType"`
}

func (GetDomainEbsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEbsOption)(nil)).Elem()
}

func (i GetDomainEbsOptionArgs) ToGetDomainEbsOptionOutput() GetDomainEbsOptionOutput {
	return i.ToGetDomainEbsOptionOutputWithContext(context.Background())
}

func (i GetDomainEbsOptionArgs) ToGetDomainEbsOptionOutputWithContext(ctx context.Context) GetDomainEbsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainEbsOptionOutput)
}

func (i *GetDomainEbsOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainEbsOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainEbsOptionOutput struct{ *pulumi.OutputState }

func (GetDomainEbsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEbsOption)(nil)).Elem()
}

func (o GetDomainEbsOptionOutput) ToGetDomainEbsOptionOutput() GetDomainEbsOptionOutput {
	return o
}

func (o GetDomainEbsOptionOutput) ToGetDomainEbsOptionOutputWithContext(ctx context.Context) GetDomainEbsOptionOutput {
	return o
}

func (o GetDomainEbsOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainEbsOption] {
	return pulumix.Output[GetDomainEbsOption]{
		OutputState: o.OutputState,
	}
}

// Whether EBS volumes are attached to data nodes in the domain.
func (o GetDomainEbsOptionOutput) EbsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainEbsOption](o, func(v GetDomainEbsOption) bool { return v.EbsEnabled })
}

// The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
func (o GetDomainEbsOptionOutput) Iops() pulumix.Output[int] {
	return pulumix.Apply[GetDomainEbsOption](o, func(v GetDomainEbsOption) int { return v.Iops })
}

// The throughput (in MiB/s) of the EBS volumes attached to data nodes.
func (o GetDomainEbsOptionOutput) Throughput() pulumix.Output[int] {
	return pulumix.Apply[GetDomainEbsOption](o, func(v GetDomainEbsOption) int { return v.Throughput })
}

// The size of EBS volumes attached to data nodes (in GB).
func (o GetDomainEbsOptionOutput) VolumeSize() pulumix.Output[int] {
	return pulumix.Apply[GetDomainEbsOption](o, func(v GetDomainEbsOption) int { return v.VolumeSize })
}

// The type of EBS volumes attached to data nodes.
func (o GetDomainEbsOptionOutput) VolumeType() pulumix.Output[string] {
	return pulumix.Apply[GetDomainEbsOption](o, func(v GetDomainEbsOption) string { return v.VolumeType })
}

type GetDomainEncryptionAtRest struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// The KMS key id used to encrypt data at rest.
	KmsKeyId string `pulumi:"kmsKeyId"`
}

type GetDomainEncryptionAtRestArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// The KMS key id used to encrypt data at rest.
	KmsKeyId pulumix.Input[string] `pulumi:"kmsKeyId"`
}

func (GetDomainEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEncryptionAtRest)(nil)).Elem()
}

func (i GetDomainEncryptionAtRestArgs) ToGetDomainEncryptionAtRestOutput() GetDomainEncryptionAtRestOutput {
	return i.ToGetDomainEncryptionAtRestOutputWithContext(context.Background())
}

func (i GetDomainEncryptionAtRestArgs) ToGetDomainEncryptionAtRestOutputWithContext(ctx context.Context) GetDomainEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainEncryptionAtRestOutput)
}

func (i *GetDomainEncryptionAtRestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainEncryptionAtRestArgs] {
	return pulumix.Val(i)
}

type GetDomainEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (GetDomainEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainEncryptionAtRest)(nil)).Elem()
}

func (o GetDomainEncryptionAtRestOutput) ToGetDomainEncryptionAtRestOutput() GetDomainEncryptionAtRestOutput {
	return o
}

func (o GetDomainEncryptionAtRestOutput) ToGetDomainEncryptionAtRestOutputWithContext(ctx context.Context) GetDomainEncryptionAtRestOutput {
	return o
}

func (o GetDomainEncryptionAtRestOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainEncryptionAtRest] {
	return pulumix.Output[GetDomainEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

// Whether node to node encryption is enabled.
func (o GetDomainEncryptionAtRestOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainEncryptionAtRest](o, func(v GetDomainEncryptionAtRest) bool { return v.Enabled })
}

// The KMS key id used to encrypt data at rest.
func (o GetDomainEncryptionAtRestOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetDomainEncryptionAtRest](o, func(v GetDomainEncryptionAtRest) string { return v.KmsKeyId })
}

type GetDomainLogPublishingOption struct {
	// The CloudWatch Log Group where the logs are published.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
	// The type of Elasticsearch log being published.
	LogType string `pulumi:"logType"`
}

type GetDomainLogPublishingOptionArgs struct {
	// The CloudWatch Log Group where the logs are published.
	CloudwatchLogGroupArn pulumix.Input[string] `pulumi:"cloudwatchLogGroupArn"`
	// Whether node to node encryption is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// The type of Elasticsearch log being published.
	LogType pulumix.Input[string] `pulumi:"logType"`
}

func (GetDomainLogPublishingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainLogPublishingOption)(nil)).Elem()
}

func (i GetDomainLogPublishingOptionArgs) ToGetDomainLogPublishingOptionOutput() GetDomainLogPublishingOptionOutput {
	return i.ToGetDomainLogPublishingOptionOutputWithContext(context.Background())
}

func (i GetDomainLogPublishingOptionArgs) ToGetDomainLogPublishingOptionOutputWithContext(ctx context.Context) GetDomainLogPublishingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainLogPublishingOptionOutput)
}

func (i *GetDomainLogPublishingOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainLogPublishingOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainLogPublishingOptionOutput struct{ *pulumi.OutputState }

func (GetDomainLogPublishingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainLogPublishingOption)(nil)).Elem()
}

func (o GetDomainLogPublishingOptionOutput) ToGetDomainLogPublishingOptionOutput() GetDomainLogPublishingOptionOutput {
	return o
}

func (o GetDomainLogPublishingOptionOutput) ToGetDomainLogPublishingOptionOutputWithContext(ctx context.Context) GetDomainLogPublishingOptionOutput {
	return o
}

func (o GetDomainLogPublishingOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainLogPublishingOption] {
	return pulumix.Output[GetDomainLogPublishingOption]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch Log Group where the logs are published.
func (o GetDomainLogPublishingOptionOutput) CloudwatchLogGroupArn() pulumix.Output[string] {
	return pulumix.Apply[GetDomainLogPublishingOption](o, func(v GetDomainLogPublishingOption) string { return v.CloudwatchLogGroupArn })
}

// Whether node to node encryption is enabled.
func (o GetDomainLogPublishingOptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainLogPublishingOption](o, func(v GetDomainLogPublishingOption) bool { return v.Enabled })
}

// The type of Elasticsearch log being published.
func (o GetDomainLogPublishingOptionOutput) LogType() pulumix.Output[string] {
	return pulumix.Apply[GetDomainLogPublishingOption](o, func(v GetDomainLogPublishingOption) string { return v.LogType })
}

type GetDomainNodeToNodeEncryption struct {
	// Whether node to node encryption is enabled.
	Enabled bool `pulumi:"enabled"`
}

type GetDomainNodeToNodeEncryptionArgs struct {
	// Whether node to node encryption is enabled.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (GetDomainNodeToNodeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainNodeToNodeEncryption)(nil)).Elem()
}

func (i GetDomainNodeToNodeEncryptionArgs) ToGetDomainNodeToNodeEncryptionOutput() GetDomainNodeToNodeEncryptionOutput {
	return i.ToGetDomainNodeToNodeEncryptionOutputWithContext(context.Background())
}

func (i GetDomainNodeToNodeEncryptionArgs) ToGetDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) GetDomainNodeToNodeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainNodeToNodeEncryptionOutput)
}

func (i *GetDomainNodeToNodeEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainNodeToNodeEncryptionArgs] {
	return pulumix.Val(i)
}

type GetDomainNodeToNodeEncryptionOutput struct{ *pulumi.OutputState }

func (GetDomainNodeToNodeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainNodeToNodeEncryption)(nil)).Elem()
}

func (o GetDomainNodeToNodeEncryptionOutput) ToGetDomainNodeToNodeEncryptionOutput() GetDomainNodeToNodeEncryptionOutput {
	return o
}

func (o GetDomainNodeToNodeEncryptionOutput) ToGetDomainNodeToNodeEncryptionOutputWithContext(ctx context.Context) GetDomainNodeToNodeEncryptionOutput {
	return o
}

func (o GetDomainNodeToNodeEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainNodeToNodeEncryption] {
	return pulumix.Output[GetDomainNodeToNodeEncryption]{
		OutputState: o.OutputState,
	}
}

// Whether node to node encryption is enabled.
func (o GetDomainNodeToNodeEncryptionOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDomainNodeToNodeEncryption](o, func(v GetDomainNodeToNodeEncryption) bool { return v.Enabled })
}

type GetDomainSnapshotOption struct {
	// Hour during which the service takes an automated daily snapshot of the indices in the domain.
	AutomatedSnapshotStartHour int `pulumi:"automatedSnapshotStartHour"`
}

type GetDomainSnapshotOptionArgs struct {
	// Hour during which the service takes an automated daily snapshot of the indices in the domain.
	AutomatedSnapshotStartHour pulumix.Input[int] `pulumi:"automatedSnapshotStartHour"`
}

func (GetDomainSnapshotOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSnapshotOption)(nil)).Elem()
}

func (i GetDomainSnapshotOptionArgs) ToGetDomainSnapshotOptionOutput() GetDomainSnapshotOptionOutput {
	return i.ToGetDomainSnapshotOptionOutputWithContext(context.Background())
}

func (i GetDomainSnapshotOptionArgs) ToGetDomainSnapshotOptionOutputWithContext(ctx context.Context) GetDomainSnapshotOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainSnapshotOptionOutput)
}

func (i *GetDomainSnapshotOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainSnapshotOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainSnapshotOptionOutput struct{ *pulumi.OutputState }

func (GetDomainSnapshotOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainSnapshotOption)(nil)).Elem()
}

func (o GetDomainSnapshotOptionOutput) ToGetDomainSnapshotOptionOutput() GetDomainSnapshotOptionOutput {
	return o
}

func (o GetDomainSnapshotOptionOutput) ToGetDomainSnapshotOptionOutputWithContext(ctx context.Context) GetDomainSnapshotOptionOutput {
	return o
}

func (o GetDomainSnapshotOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainSnapshotOption] {
	return pulumix.Output[GetDomainSnapshotOption]{
		OutputState: o.OutputState,
	}
}

// Hour during which the service takes an automated daily snapshot of the indices in the domain.
func (o GetDomainSnapshotOptionOutput) AutomatedSnapshotStartHour() pulumix.Output[int] {
	return pulumix.Apply[GetDomainSnapshotOption](o, func(v GetDomainSnapshotOption) int { return v.AutomatedSnapshotStartHour })
}

type GetDomainVpcOption struct {
	// The availability zones used by the domain.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The security groups used by the domain.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnets used by the domain.
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC used by the domain.
	VpcId string `pulumi:"vpcId"`
}

type GetDomainVpcOptionArgs struct {
	// The availability zones used by the domain.
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// The security groups used by the domain.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// The subnets used by the domain.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The VPC used by the domain.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (GetDomainVpcOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainVpcOption)(nil)).Elem()
}

func (i GetDomainVpcOptionArgs) ToGetDomainVpcOptionOutput() GetDomainVpcOptionOutput {
	return i.ToGetDomainVpcOptionOutputWithContext(context.Background())
}

func (i GetDomainVpcOptionArgs) ToGetDomainVpcOptionOutputWithContext(ctx context.Context) GetDomainVpcOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainVpcOptionOutput)
}

func (i *GetDomainVpcOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainVpcOptionArgs] {
	return pulumix.Val(i)
}

type GetDomainVpcOptionOutput struct{ *pulumi.OutputState }

func (GetDomainVpcOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainVpcOption)(nil)).Elem()
}

func (o GetDomainVpcOptionOutput) ToGetDomainVpcOptionOutput() GetDomainVpcOptionOutput {
	return o
}

func (o GetDomainVpcOptionOutput) ToGetDomainVpcOptionOutputWithContext(ctx context.Context) GetDomainVpcOptionOutput {
	return o
}

func (o GetDomainVpcOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainVpcOption] {
	return pulumix.Output[GetDomainVpcOption]{
		OutputState: o.OutputState,
	}
}

// The availability zones used by the domain.
func (o GetDomainVpcOptionOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDomainVpcOption](o, func(v GetDomainVpcOption) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The security groups used by the domain.
func (o GetDomainVpcOptionOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDomainVpcOption](o, func(v GetDomainVpcOption) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The subnets used by the domain.
func (o GetDomainVpcOptionOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDomainVpcOption](o, func(v GetDomainVpcOption) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The VPC used by the domain.
func (o GetDomainVpcOptionOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetDomainVpcOption](o, func(v GetDomainVpcOption) string { return v.VpcId })
}

func init() {
	pulumi.RegisterOutputType(DomainAdvancedSecurityOptionsOutput{})
	pulumi.RegisterOutputType(DomainAdvancedSecurityOptionsMasterUserOptionsOutput{})
	pulumi.RegisterOutputType(DomainAutoTuneOptionsOutput{})
	pulumi.RegisterOutputType(DomainAutoTuneOptionsMaintenanceScheduleOutput{})
	pulumi.RegisterOutputType(DomainAutoTuneOptionsMaintenanceScheduleDurationOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigColdStorageOptionsOutput{})
	pulumi.RegisterOutputType(DomainClusterConfigZoneAwarenessConfigOutput{})
	pulumi.RegisterOutputType(DomainCognitoOptionsOutput{})
	pulumi.RegisterOutputType(DomainDomainEndpointOptionsOutput{})
	pulumi.RegisterOutputType(DomainEbsOptionsOutput{})
	pulumi.RegisterOutputType(DomainEncryptAtRestOutput{})
	pulumi.RegisterOutputType(DomainLogPublishingOptionOutput{})
	pulumi.RegisterOutputType(DomainNodeToNodeEncryptionOutput{})
	pulumi.RegisterOutputType(DomainSamlOptionsSamlOptionsOutput{})
	pulumi.RegisterOutputType(DomainSamlOptionsSamlOptionsIdpOutput{})
	pulumi.RegisterOutputType(DomainSnapshotOptionsOutput{})
	pulumi.RegisterOutputType(DomainVpcOptionsOutput{})
	pulumi.RegisterOutputType(GetDomainAdvancedSecurityOptionOutput{})
	pulumi.RegisterOutputType(GetDomainAutoTuneOptionOutput{})
	pulumi.RegisterOutputType(GetDomainAutoTuneOptionMaintenanceScheduleOutput{})
	pulumi.RegisterOutputType(GetDomainAutoTuneOptionMaintenanceScheduleDurationOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigColdStorageOptionOutput{})
	pulumi.RegisterOutputType(GetDomainClusterConfigZoneAwarenessConfigOutput{})
	pulumi.RegisterOutputType(GetDomainCognitoOptionOutput{})
	pulumi.RegisterOutputType(GetDomainEbsOptionOutput{})
	pulumi.RegisterOutputType(GetDomainEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(GetDomainLogPublishingOptionOutput{})
	pulumi.RegisterOutputType(GetDomainNodeToNodeEncryptionOutput{})
	pulumi.RegisterOutputType(GetDomainSnapshotOptionOutput{})
	pulumi.RegisterOutputType(GetDomainVpcOptionOutput{})
}
