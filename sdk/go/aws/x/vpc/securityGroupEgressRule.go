// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an outbound (egress) rule for a security group.
//
// When specifying an outbound rule for your security group in a VPC, the configuration must include a destination for the traffic.
//
// > **NOTE on Security Groups and Security Group Rules:** this provider currently provides a Security Group resource with `ingress` and `egress` rules defined in-line and a Security Group Rule resource which manages one or more `ingress` or
// `egress` rules. Both of these resource were added before AWS assigned a [security group rule unique ID](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html), and they do not work well in all scenarios using the`description` and `tags` attributes, which rely on the unique ID.
// The `vpc.SecurityGroupEgressRule` resource has been added to address these limitations and should be used for all new security group rules.
// You should not use the `vpc.SecurityGroupEgressRule` resource in conjunction with an `ec2.SecurityGroup` resource with in-line rules or with `ec2.SecurityGroupRule` resources defined for the same Security Group, as rule conflicts may occur and rules will be overwritten.
type SecurityGroupEgressRule struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the security group rule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The destination IPv4 CIDR range.
	CidrIpv4 pulumix.Output[*string] `pulumi:"cidrIpv4"`
	// The destination IPv6 CIDR range.
	CidrIpv6 pulumix.Output[*string] `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort pulumix.Output[*int] `pulumi:"fromPort"`
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol pulumix.Output[string] `pulumi:"ipProtocol"`
	// The ID of the destination prefix list.
	PrefixListId pulumix.Output[*string] `pulumi:"prefixListId"`
	// The destination security group that is referenced in the rule.
	ReferencedSecurityGroupId pulumix.Output[*string] `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId pulumix.Output[string] `pulumi:"securityGroupId"`
	// The ID of the security group rule.
	SecurityGroupRuleId pulumix.Output[string] `pulumi:"securityGroupRuleId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort pulumix.Output[*int] `pulumi:"toPort"`
}

// NewSecurityGroupEgressRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupEgressRule(ctx *pulumi.Context,
	name string, args *SecurityGroupEgressRuleArgs, opts ...pulumi.ResourceOption) (*SecurityGroupEgressRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpProtocol == nil {
		return nil, errors.New("invalid value for required argument 'IpProtocol'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupEgressRule
	err := ctx.RegisterResource("aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupEgressRule gets an existing SecurityGroupEgressRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupEgressRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupEgressRuleState, opts ...pulumi.ResourceOption) (*SecurityGroupEgressRule, error) {
	var resource SecurityGroupEgressRule
	err := ctx.ReadResource("aws:vpc/securityGroupEgressRule:SecurityGroupEgressRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupEgressRule resources.
type securityGroupEgressRuleState struct {
	// The Amazon Resource Name (ARN) of the security group rule.
	Arn *string `pulumi:"arn"`
	// The destination IPv4 CIDR range.
	CidrIpv4 *string `pulumi:"cidrIpv4"`
	// The destination IPv6 CIDR range.
	CidrIpv6 *string `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description *string `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort *int `pulumi:"fromPort"`
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol *string `pulumi:"ipProtocol"`
	// The ID of the destination prefix list.
	PrefixListId *string `pulumi:"prefixListId"`
	// The destination security group that is referenced in the rule.
	ReferencedSecurityGroupId *string `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The ID of the security group rule.
	SecurityGroupRuleId *string `pulumi:"securityGroupRuleId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort *int `pulumi:"toPort"`
}

type SecurityGroupEgressRuleState struct {
	// The Amazon Resource Name (ARN) of the security group rule.
	Arn pulumix.Input[*string]
	// The destination IPv4 CIDR range.
	CidrIpv4 pulumix.Input[*string]
	// The destination IPv6 CIDR range.
	CidrIpv6 pulumix.Input[*string]
	// The security group rule description.
	Description pulumix.Input[*string]
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort pulumix.Input[*int]
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol pulumix.Input[*string]
	// The ID of the destination prefix list.
	PrefixListId pulumix.Input[*string]
	// The destination security group that is referenced in the rule.
	ReferencedSecurityGroupId pulumix.Input[*string]
	// The ID of the security group.
	SecurityGroupId pulumix.Input[*string]
	// The ID of the security group rule.
	SecurityGroupRuleId pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort pulumix.Input[*int]
}

func (SecurityGroupEgressRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupEgressRuleState)(nil)).Elem()
}

type securityGroupEgressRuleArgs struct {
	// The destination IPv4 CIDR range.
	CidrIpv4 *string `pulumi:"cidrIpv4"`
	// The destination IPv6 CIDR range.
	CidrIpv6 *string `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description *string `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort *int `pulumi:"fromPort"`
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol string `pulumi:"ipProtocol"`
	// The ID of the destination prefix list.
	PrefixListId *string `pulumi:"prefixListId"`
	// The destination security group that is referenced in the rule.
	ReferencedSecurityGroupId *string `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort *int `pulumi:"toPort"`
}

// The set of arguments for constructing a SecurityGroupEgressRule resource.
type SecurityGroupEgressRuleArgs struct {
	// The destination IPv4 CIDR range.
	CidrIpv4 pulumix.Input[*string]
	// The destination IPv6 CIDR range.
	CidrIpv6 pulumix.Input[*string]
	// The security group rule description.
	Description pulumix.Input[*string]
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort pulumix.Input[*int]
	// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
	IpProtocol pulumix.Input[string]
	// The ID of the destination prefix list.
	PrefixListId pulumix.Input[*string]
	// The destination security group that is referenced in the rule.
	ReferencedSecurityGroupId pulumix.Input[*string]
	// The ID of the security group.
	SecurityGroupId pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort pulumix.Input[*int]
}

func (SecurityGroupEgressRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupEgressRuleArgs)(nil)).Elem()
}

type SecurityGroupEgressRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupEgressRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupEgressRule)(nil)).Elem()
}

func (o SecurityGroupEgressRuleOutput) ToSecurityGroupEgressRuleOutput() SecurityGroupEgressRuleOutput {
	return o
}

func (o SecurityGroupEgressRuleOutput) ToSecurityGroupEgressRuleOutputWithContext(ctx context.Context) SecurityGroupEgressRuleOutput {
	return o
}

func (o SecurityGroupEgressRuleOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityGroupEgressRule] {
	return pulumix.Output[SecurityGroupEgressRule]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the security group rule.
func (o SecurityGroupEgressRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The destination IPv4 CIDR range.
func (o SecurityGroupEgressRuleOutput) CidrIpv4() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*string] { return v.CidrIpv4 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The destination IPv6 CIDR range.
func (o SecurityGroupEgressRuleOutput) CidrIpv6() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*string] { return v.CidrIpv6 })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The security group rule description.
func (o SecurityGroupEgressRuleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
func (o SecurityGroupEgressRuleOutput) FromPort() pulumix.Output[*int] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*int] { return v.FromPort })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The IP protocol name or number. Use `-1` to specify all protocols. Note that if `ipProtocol` is set to `-1`, it translates to all protocols, all port ranges, and `fromPort` and `toPort` values should not be defined.
func (o SecurityGroupEgressRuleOutput) IpProtocol() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[string] { return v.IpProtocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the destination prefix list.
func (o SecurityGroupEgressRuleOutput) PrefixListId() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*string] { return v.PrefixListId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The destination security group that is referenced in the rule.
func (o SecurityGroupEgressRuleOutput) ReferencedSecurityGroupId() pulumix.Output[*string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*string] { return v.ReferencedSecurityGroupId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the security group.
func (o SecurityGroupEgressRuleOutput) SecurityGroupId() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[string] { return v.SecurityGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the security group rule.
func (o SecurityGroupEgressRuleOutput) SecurityGroupRuleId() pulumix.Output[string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[string] { return v.SecurityGroupRuleId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SecurityGroupEgressRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SecurityGroupEgressRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
func (o SecurityGroupEgressRuleOutput) ToPort() pulumix.Output[*int] {
	value := pulumix.Apply[SecurityGroupEgressRule](o, func(v SecurityGroupEgressRule) pulumix.Output[*int] { return v.ToPort })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(SecurityGroupEgressRuleOutput{})
}
