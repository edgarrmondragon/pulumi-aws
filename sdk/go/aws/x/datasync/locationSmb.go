// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a SMB Location within AWS DataSync.
//
// > **NOTE:** The DataSync Agents must be available before creating this resource.
type LocationSmb struct {
	pulumi.CustomResourceState

	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumix.ArrayOutput[string] `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the Windows domain the SMB server belongs to.
	Domain pulumix.Output[string] `pulumi:"domain"`
	// Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
	MountOptions pulumix.GPtrOutput[LocationSmbMountOptions, LocationSmbMountOptionsOutput] `pulumi:"mountOptions"`
	// The password of the user who can mount the share and has file permissions in the SMB.
	Password pulumix.Output[string] `pulumi:"password"`
	// Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
	ServerHostname pulumix.Output[string] `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumix.Output[string] `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	Uri     pulumix.Output[string]    `pulumi:"uri"`
	// The user who can mount the share and has file and folder permissions in the SMB share.
	User pulumix.Output[string] `pulumi:"user"`
}

// NewLocationSmb registers a new resource with the given unique name, arguments, and options.
func NewLocationSmb(ctx *pulumi.Context,
	name string, args *LocationSmbArgs, opts ...pulumi.ResourceOption) (*LocationSmb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentArns == nil {
		return nil, errors.New("invalid value for required argument 'AgentArns'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ServerHostname == nil {
		return nil, errors.New("invalid value for required argument 'ServerHostname'")
	}
	if args.Subdirectory == nil {
		return nil, errors.New("invalid value for required argument 'Subdirectory'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationSmb
	err := ctx.RegisterResource("aws:datasync/locationSmb:LocationSmb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationSmb gets an existing LocationSmb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationSmb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationSmbState, opts ...pulumi.ResourceOption) (*LocationSmb, error) {
	var resource LocationSmb
	err := ctx.ReadResource("aws:datasync/locationSmb:LocationSmb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationSmb resources.
type locationSmbState struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns []string `pulumi:"agentArns"`
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// The name of the Windows domain the SMB server belongs to.
	Domain *string `pulumi:"domain"`
	// Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
	MountOptions *LocationSmbMountOptions `pulumi:"mountOptions"`
	// The password of the user who can mount the share and has file permissions in the SMB.
	Password *string `pulumi:"password"`
	// Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
	ServerHostname *string `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	Uri     *string           `pulumi:"uri"`
	// The user who can mount the share and has file and folder permissions in the SMB share.
	User *string `pulumi:"user"`
}

type LocationSmbState struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumix.Input[[]string]
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Input[*string]
	// The name of the Windows domain the SMB server belongs to.
	Domain pulumix.Input[*string]
	// Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
	MountOptions pulumix.Input[*LocationSmbMountOptionsArgs]
	// The password of the user who can mount the share and has file permissions in the SMB.
	Password pulumix.Input[*string]
	// Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
	ServerHostname pulumix.Input[*string]
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	Uri     pulumix.Input[*string]
	// The user who can mount the share and has file and folder permissions in the SMB share.
	User pulumix.Input[*string]
}

func (LocationSmbState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationSmbState)(nil)).Elem()
}

type locationSmbArgs struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns []string `pulumi:"agentArns"`
	// The name of the Windows domain the SMB server belongs to.
	Domain *string `pulumi:"domain"`
	// Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
	MountOptions *LocationSmbMountOptions `pulumi:"mountOptions"`
	// The password of the user who can mount the share and has file permissions in the SMB.
	Password string `pulumi:"password"`
	// Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
	ServerHostname string `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The user who can mount the share and has file and folder permissions in the SMB share.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a LocationSmb resource.
type LocationSmbArgs struct {
	// A list of DataSync Agent ARNs with which this location will be associated.
	AgentArns pulumix.Input[[]string]
	// The name of the Windows domain the SMB server belongs to.
	Domain pulumix.Input[*string]
	// Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
	MountOptions pulumix.Input[*LocationSmbMountOptionsArgs]
	// The password of the user who can mount the share and has file permissions in the SMB.
	Password pulumix.Input[string]
	// Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
	ServerHostname pulumix.Input[string]
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumix.Input[string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The user who can mount the share and has file and folder permissions in the SMB share.
	User pulumix.Input[string]
}

func (LocationSmbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationSmbArgs)(nil)).Elem()
}

type LocationSmbOutput struct{ *pulumi.OutputState }

func (LocationSmbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmb)(nil)).Elem()
}

func (o LocationSmbOutput) ToLocationSmbOutput() LocationSmbOutput {
	return o
}

func (o LocationSmbOutput) ToLocationSmbOutputWithContext(ctx context.Context) LocationSmbOutput {
	return o
}

func (o LocationSmbOutput) ToOutput(ctx context.Context) pulumix.Output[LocationSmb] {
	return pulumix.Output[LocationSmb]{
		OutputState: o.OutputState,
	}
}

// A list of DataSync Agent ARNs with which this location will be associated.
func (o LocationSmbOutput) AgentArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.ArrayOutput[string] { return v.AgentArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o LocationSmbOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Windows domain the SMB server belongs to.
func (o LocationSmbOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block containing mount options used by DataSync to access the SMB Server. Can be `AUTOMATIC`, `SMB2`, or `SMB3`.
func (o LocationSmbOutput) MountOptions() pulumix.GPtrOutput[LocationSmbMountOptions, LocationSmbMountOptionsOutput] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.GPtrOutput[LocationSmbMountOptions, LocationSmbMountOptionsOutput] {
		return v.MountOptions
	})
	unwrapped := pulumix.Flatten[*LocationSmbMountOptions, pulumix.GPtrOutput[LocationSmbMountOptions, LocationSmbMountOptionsOutput]](value)
	return pulumix.GPtrOutput[LocationSmbMountOptions, LocationSmbMountOptionsOutput]{OutputState: unwrapped.OutputState}
}

// The password of the user who can mount the share and has file permissions in the SMB.
func (o LocationSmbOutput) Password() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.Password })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the IP address or DNS name of the SMB server. The DataSync Agent(s) use this to mount the SMB share.
func (o LocationSmbOutput) ServerHostname() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.ServerHostname })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
func (o LocationSmbOutput) Subdirectory() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.Subdirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LocationSmbOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LocationSmbOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o LocationSmbOutput) Uri() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.Uri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user who can mount the share and has file and folder permissions in the SMB share.
func (o LocationSmbOutput) User() pulumix.Output[string] {
	value := pulumix.Apply[LocationSmb](o, func(v LocationSmb) pulumix.Output[string] { return v.User })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LocationSmbOutput{})
}
