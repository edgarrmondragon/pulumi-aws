// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Dashboard resource.
type Dashboard struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the dashboard.
	DashboardArn pulumix.Output[string] `pulumi:"dashboardArn"`
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody pulumix.Output[string] `pulumi:"dashboardBody"`
	// The name of the dashboard.
	DashboardName pulumix.Output[string] `pulumi:"dashboardName"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardBody == nil {
		return nil, errors.New("invalid value for required argument 'DashboardBody'")
	}
	if args.DashboardName == nil {
		return nil, errors.New("invalid value for required argument 'DashboardName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("aws:cloudwatch/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("aws:cloudwatch/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// The Amazon Resource Name (ARN) of the dashboard.
	DashboardArn *string `pulumi:"dashboardArn"`
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody *string `pulumi:"dashboardBody"`
	// The name of the dashboard.
	DashboardName *string `pulumi:"dashboardName"`
}

type DashboardState struct {
	// The Amazon Resource Name (ARN) of the dashboard.
	DashboardArn pulumix.Input[*string]
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody pulumix.Input[*string]
	// The name of the dashboard.
	DashboardName pulumix.Input[*string]
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody string `pulumi:"dashboardBody"`
	// The name of the dashboard.
	DashboardName string `pulumi:"dashboardName"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody pulumix.Input[string]
	// The name of the dashboard.
	DashboardName pulumix.Input[string]
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) ToOutput(ctx context.Context) pulumix.Output[Dashboard] {
	return pulumix.Output[Dashboard]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the dashboard.
func (o DashboardOutput) DashboardArn() pulumix.Output[string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[string] { return v.DashboardArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
func (o DashboardOutput) DashboardBody() pulumix.Output[string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[string] { return v.DashboardBody })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the dashboard.
func (o DashboardOutput) DashboardName() pulumix.Output[string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[string] { return v.DashboardName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DashboardOutput{})
}
