// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Connect Lambda Function Association.
func LookupLambdaFunctionAssociation(ctx *pulumi.Context, args *LookupLambdaFunctionAssociationArgs, opts ...pulumi.InvokeOption) (*LookupLambdaFunctionAssociationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLambdaFunctionAssociationResult
	err := ctx.Invoke("aws:connect/getLambdaFunctionAssociation:getLambdaFunctionAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLambdaFunctionAssociation.
type LookupLambdaFunctionAssociationArgs struct {
	// ARN of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn string `pulumi:"functionArn"`
	// Identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId string `pulumi:"instanceId"`
}

// A collection of values returned by getLambdaFunctionAssociation.
type LookupLambdaFunctionAssociationResult struct {
	FunctionArn string `pulumi:"functionArn"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
}

func LookupLambdaFunctionAssociationOutput(ctx *pulumi.Context, args LookupLambdaFunctionAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupLambdaFunctionAssociationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLambdaFunctionAssociationArgs](args.ToOutput(), func(plainArgs *LookupLambdaFunctionAssociationArgs) (*LookupLambdaFunctionAssociationResult, error) {
		return LookupLambdaFunctionAssociation(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLambdaFunctionAssociationResultOutput, *LookupLambdaFunctionAssociationResult](outputResult)
}

// A collection of arguments for invoking getLambdaFunctionAssociation.
type LookupLambdaFunctionAssociationOutputArgs struct {
	// ARN of the Lambda Function, omitting any version or alias qualifier.
	FunctionArn pulumix.Input[string] `pulumi:"functionArn"`
	// Identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
}

func (args LookupLambdaFunctionAssociationOutputArgs) ToOutput() pulumix.Output[*LookupLambdaFunctionAssociationArgs] {
	allArgs := pulumix.All(
		args.FunctionArn.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLambdaFunctionAssociationArgs {
		return &LookupLambdaFunctionAssociationArgs{
			FunctionArn: resolvedArgs[0].(string),
			InstanceId:  resolvedArgs[1].(string),
		}
	})
}

type LookupLambdaFunctionAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupLambdaFunctionAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLambdaFunctionAssociationResult)(nil)).Elem()
}

func (o LookupLambdaFunctionAssociationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLambdaFunctionAssociationResult] {
	return pulumix.Output[*LookupLambdaFunctionAssociationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLambdaFunctionAssociationResultOutput) FunctionArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLambdaFunctionAssociationResult](o, func(v *LookupLambdaFunctionAssociationResult) string { return v.FunctionArn })
}

func (o LookupLambdaFunctionAssociationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLambdaFunctionAssociationResult](o, func(v *LookupLambdaFunctionAssociationResult) string { return v.Id })
}

func (o LookupLambdaFunctionAssociationResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLambdaFunctionAssociationResult](o, func(v *LookupLambdaFunctionAssociationResult) string { return v.InstanceId })
}
