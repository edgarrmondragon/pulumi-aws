// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an ECS cluster capacity provider. More information can be found on the [ECS Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html).
//
// > **NOTE:** Associating an ECS Capacity Provider to an Auto Scaling Group will automatically add the `AmazonECSManaged` tag to the Auto Scaling Group. This tag should be included in the `autoscaling.Group` resource configuration to prevent the provider from removing it in subsequent executions as well as ensuring the `AmazonECSManaged` tag is propagated to all EC2 Instances in the Auto Scaling Group if `minSize` is above 0 on creation. Any EC2 Instances in the Auto Scaling Group without this tag must be manually be updated, otherwise they may cause unexpected scaling behavior and metrics.
type CapacityProvider struct {
	pulumi.CustomResourceState

	// ARN that identifies the capacity provider.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block for the provider for the ECS auto scaling group. Detailed below.
	AutoScalingGroupProvider pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProvider, CapacityProviderAutoScalingGroupProviderOutput] `pulumi:"autoScalingGroupProvider"`
	// Name of the capacity provider.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCapacityProvider registers a new resource with the given unique name, arguments, and options.
func NewCapacityProvider(ctx *pulumi.Context,
	name string, args *CapacityProviderArgs, opts ...pulumi.ResourceOption) (*CapacityProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoScalingGroupProvider == nil {
		return nil, errors.New("invalid value for required argument 'AutoScalingGroupProvider'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CapacityProvider
	err := ctx.RegisterResource("aws:ecs/capacityProvider:CapacityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityProvider gets an existing CapacityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityProviderState, opts ...pulumi.ResourceOption) (*CapacityProvider, error) {
	var resource CapacityProvider
	err := ctx.ReadResource("aws:ecs/capacityProvider:CapacityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityProvider resources.
type capacityProviderState struct {
	// ARN that identifies the capacity provider.
	Arn *string `pulumi:"arn"`
	// Configuration block for the provider for the ECS auto scaling group. Detailed below.
	AutoScalingGroupProvider *CapacityProviderAutoScalingGroupProvider `pulumi:"autoScalingGroupProvider"`
	// Name of the capacity provider.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CapacityProviderState struct {
	// ARN that identifies the capacity provider.
	Arn pulumix.Input[*string]
	// Configuration block for the provider for the ECS auto scaling group. Detailed below.
	AutoScalingGroupProvider pulumix.Input[*CapacityProviderAutoScalingGroupProviderArgs]
	// Name of the capacity provider.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (CapacityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityProviderState)(nil)).Elem()
}

type capacityProviderArgs struct {
	// Configuration block for the provider for the ECS auto scaling group. Detailed below.
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProvider `pulumi:"autoScalingGroupProvider"`
	// Name of the capacity provider.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CapacityProvider resource.
type CapacityProviderArgs struct {
	// Configuration block for the provider for the ECS auto scaling group. Detailed below.
	AutoScalingGroupProvider pulumix.Input[*CapacityProviderAutoScalingGroupProviderArgs]
	// Name of the capacity provider.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (CapacityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityProviderArgs)(nil)).Elem()
}

type CapacityProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProvider)(nil)).Elem()
}

func (o CapacityProviderOutput) ToCapacityProviderOutput() CapacityProviderOutput {
	return o
}

func (o CapacityProviderOutput) ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput {
	return o
}

func (o CapacityProviderOutput) ToOutput(ctx context.Context) pulumix.Output[CapacityProvider] {
	return pulumix.Output[CapacityProvider]{
		OutputState: o.OutputState,
	}
}

// ARN that identifies the capacity provider.
func (o CapacityProviderOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CapacityProvider](o, func(v CapacityProvider) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the provider for the ECS auto scaling group. Detailed below.
func (o CapacityProviderOutput) AutoScalingGroupProvider() pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProvider, CapacityProviderAutoScalingGroupProviderOutput] {
	value := pulumix.Apply[CapacityProvider](o, func(v CapacityProvider) pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProvider, CapacityProviderAutoScalingGroupProviderOutput] {
		return v.AutoScalingGroupProvider
	})
	unwrapped := pulumix.Flatten[*CapacityProviderAutoScalingGroupProvider, pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProvider, CapacityProviderAutoScalingGroupProviderOutput]](value)
	return pulumix.GPtrOutput[CapacityProviderAutoScalingGroupProvider, CapacityProviderAutoScalingGroupProviderOutput]{OutputState: unwrapped.OutputState}
}

// Name of the capacity provider.
func (o CapacityProviderOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CapacityProvider](o, func(v CapacityProvider) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CapacityProviderOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[CapacityProvider](o, func(v CapacityProvider) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CapacityProviderOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[CapacityProvider](o, func(v CapacityProvider) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CapacityProviderOutput{})
}
