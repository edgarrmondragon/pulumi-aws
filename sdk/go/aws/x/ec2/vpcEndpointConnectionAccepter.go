// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to accept a pending VPC Endpoint Connection accept request to VPC Endpoint Service.
type VpcEndpointConnectionAccepter struct {
	pulumi.CustomResourceState

	// AWS VPC Endpoint ID.
	VpcEndpointId pulumix.Output[string] `pulumi:"vpcEndpointId"`
	// AWS VPC Endpoint Service ID.
	VpcEndpointServiceId pulumix.Output[string] `pulumi:"vpcEndpointServiceId"`
	// State of the VPC Endpoint.
	VpcEndpointState pulumix.Output[string] `pulumi:"vpcEndpointState"`
}

// NewVpcEndpointConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointConnectionAccepter(ctx *pulumi.Context,
	name string, args *VpcEndpointConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*VpcEndpointConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'VpcEndpointId'")
	}
	if args.VpcEndpointServiceId == nil {
		return nil, errors.New("invalid value for required argument 'VpcEndpointServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpointConnectionAccepter
	err := ctx.RegisterResource("aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointConnectionAccepter gets an existing VpcEndpointConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointConnectionAccepterState, opts ...pulumi.ResourceOption) (*VpcEndpointConnectionAccepter, error) {
	var resource VpcEndpointConnectionAccepter
	err := ctx.ReadResource("aws:ec2/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointConnectionAccepter resources.
type vpcEndpointConnectionAccepterState struct {
	// AWS VPC Endpoint ID.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// AWS VPC Endpoint Service ID.
	VpcEndpointServiceId *string `pulumi:"vpcEndpointServiceId"`
	// State of the VPC Endpoint.
	VpcEndpointState *string `pulumi:"vpcEndpointState"`
}

type VpcEndpointConnectionAccepterState struct {
	// AWS VPC Endpoint ID.
	VpcEndpointId pulumix.Input[*string]
	// AWS VPC Endpoint Service ID.
	VpcEndpointServiceId pulumix.Input[*string]
	// State of the VPC Endpoint.
	VpcEndpointState pulumix.Input[*string]
}

func (VpcEndpointConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointConnectionAccepterState)(nil)).Elem()
}

type vpcEndpointConnectionAccepterArgs struct {
	// AWS VPC Endpoint ID.
	VpcEndpointId string `pulumi:"vpcEndpointId"`
	// AWS VPC Endpoint Service ID.
	VpcEndpointServiceId string `pulumi:"vpcEndpointServiceId"`
}

// The set of arguments for constructing a VpcEndpointConnectionAccepter resource.
type VpcEndpointConnectionAccepterArgs struct {
	// AWS VPC Endpoint ID.
	VpcEndpointId pulumix.Input[string]
	// AWS VPC Endpoint Service ID.
	VpcEndpointServiceId pulumix.Input[string]
}

func (VpcEndpointConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointConnectionAccepterArgs)(nil)).Elem()
}

type VpcEndpointConnectionAccepterOutput struct{ *pulumi.OutputState }

func (VpcEndpointConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointConnectionAccepter)(nil)).Elem()
}

func (o VpcEndpointConnectionAccepterOutput) ToVpcEndpointConnectionAccepterOutput() VpcEndpointConnectionAccepterOutput {
	return o
}

func (o VpcEndpointConnectionAccepterOutput) ToVpcEndpointConnectionAccepterOutputWithContext(ctx context.Context) VpcEndpointConnectionAccepterOutput {
	return o
}

func (o VpcEndpointConnectionAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[VpcEndpointConnectionAccepter] {
	return pulumix.Output[VpcEndpointConnectionAccepter]{
		OutputState: o.OutputState,
	}
}

// AWS VPC Endpoint ID.
func (o VpcEndpointConnectionAccepterOutput) VpcEndpointId() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointConnectionAccepter](o, func(v VpcEndpointConnectionAccepter) pulumix.Output[string] { return v.VpcEndpointId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS VPC Endpoint Service ID.
func (o VpcEndpointConnectionAccepterOutput) VpcEndpointServiceId() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointConnectionAccepter](o, func(v VpcEndpointConnectionAccepter) pulumix.Output[string] { return v.VpcEndpointServiceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the VPC Endpoint.
func (o VpcEndpointConnectionAccepterOutput) VpcEndpointState() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointConnectionAccepter](o, func(v VpcEndpointConnectionAccepter) pulumix.Output[string] { return v.VpcEndpointState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointConnectionAccepterOutput{})
}
