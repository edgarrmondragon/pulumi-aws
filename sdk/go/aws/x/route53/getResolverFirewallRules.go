// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `route53.getResolverFirewallRules` Provides details about rules in a specific Route53 Resolver Firewall rule group.
func GetResolverFirewallRules(ctx *pulumi.Context, args *GetResolverFirewallRulesArgs, opts ...pulumi.InvokeOption) (*GetResolverFirewallRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetResolverFirewallRulesResult
	err := ctx.Invoke("aws:route53/getResolverFirewallRules:getResolverFirewallRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverFirewallRules.
type GetResolverFirewallRulesArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action *string `pulumi:"action"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId string `pulumi:"firewallRuleGroupId"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority *int `pulumi:"priority"`
}

// A collection of values returned by getResolverFirewallRules.
type GetResolverFirewallRulesResult struct {
	Action              *string `pulumi:"action"`
	FirewallRuleGroupId string  `pulumi:"firewallRuleGroupId"`
	// List with information about the firewall rules. See details below.
	FirewallRules []GetResolverFirewallRulesFirewallRule `pulumi:"firewallRules"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Priority *int   `pulumi:"priority"`
}

func GetResolverFirewallRulesOutput(ctx *pulumi.Context, args GetResolverFirewallRulesOutputArgs, opts ...pulumi.InvokeOption) GetResolverFirewallRulesResultOutput {
	outputResult := pulumix.ApplyErr[*GetResolverFirewallRulesArgs](args.ToOutput(), func(plainArgs *GetResolverFirewallRulesArgs) (*GetResolverFirewallRulesResult, error) {
		return GetResolverFirewallRules(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetResolverFirewallRulesResultOutput, *GetResolverFirewallRulesResult](outputResult)
}

// A collection of arguments for invoking getResolverFirewallRules.
type GetResolverFirewallRulesOutputArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action pulumix.Input[*string] `pulumi:"action"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId pulumix.Input[string] `pulumi:"firewallRuleGroupId"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority pulumix.Input[*int] `pulumi:"priority"`
}

func (args GetResolverFirewallRulesOutputArgs) ToOutput() pulumix.Output[*GetResolverFirewallRulesArgs] {
	allArgs := pulumix.All(
		args.Action.ToOutput(context.Background()).AsAny(),
		args.FirewallRuleGroupId.ToOutput(context.Background()).AsAny(),
		args.Priority.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetResolverFirewallRulesArgs {
		return &GetResolverFirewallRulesArgs{
			Action:              resolvedArgs[0].(*string),
			FirewallRuleGroupId: resolvedArgs[1].(string),
			Priority:            resolvedArgs[2].(*int),
		}
	})
}

type GetResolverFirewallRulesResultOutput struct{ *pulumi.OutputState }

func (GetResolverFirewallRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesResult)(nil)).Elem()
}

func (o GetResolverFirewallRulesResultOutput) ToOutput(context.Context) pulumix.Output[*GetResolverFirewallRulesResult] {
	return pulumix.Output[*GetResolverFirewallRulesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetResolverFirewallRulesResultOutput) Action() pulumix.Output[*string] {
	return pulumix.Apply[*GetResolverFirewallRulesResult](o, func(v *GetResolverFirewallRulesResult) *string { return v.Action })
}

func (o GetResolverFirewallRulesResultOutput) FirewallRuleGroupId() pulumix.Output[string] {
	return pulumix.Apply[*GetResolverFirewallRulesResult](o, func(v *GetResolverFirewallRulesResult) string { return v.FirewallRuleGroupId })
}

func (o GetResolverFirewallRulesResultOutput) FirewallRules() pulumix.GArrayOutput[GetResolverFirewallRulesFirewallRule, GetResolverFirewallRulesFirewallRuleOutput] {
	value := pulumix.Apply[*GetResolverFirewallRulesResult](o, func(v *GetResolverFirewallRulesResult) []GetResolverFirewallRulesFirewallRule { return v.FirewallRules })
	return pulumix.GArrayOutput[GetResolverFirewallRulesFirewallRule, GetResolverFirewallRulesFirewallRuleOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetResolverFirewallRulesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetResolverFirewallRulesResult](o, func(v *GetResolverFirewallRulesResult) string { return v.Id })
}

func (o GetResolverFirewallRulesResultOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[*GetResolverFirewallRulesResult](o, func(v *GetResolverFirewallRulesResult) *int { return v.Priority })
}
