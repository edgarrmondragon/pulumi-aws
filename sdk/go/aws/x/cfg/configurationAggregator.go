// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS Config Configuration Aggregator
type ConfigurationAggregator struct {
	pulumi.CustomResourceState

	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource pulumix.GPtrOutput[ConfigurationAggregatorAccountAggregationSource, ConfigurationAggregatorAccountAggregationSourceOutput] `pulumi:"accountAggregationSource"`
	// The ARN of the aggregator
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the configuration aggregator.
	Name pulumix.Output[string] `pulumi:"name"`
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource pulumix.GPtrOutput[ConfigurationAggregatorOrganizationAggregationSource, ConfigurationAggregatorOrganizationAggregationSourceOutput] `pulumi:"organizationAggregationSource"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Either `accountAggregationSource` or `organizationAggregationSource` must be specified.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewConfigurationAggregator registers a new resource with the given unique name, arguments, and options.
func NewConfigurationAggregator(ctx *pulumi.Context,
	name string, args *ConfigurationAggregatorArgs, opts ...pulumi.ResourceOption) (*ConfigurationAggregator, error) {
	if args == nil {
		args = &ConfigurationAggregatorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationAggregator
	err := ctx.RegisterResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationAggregator gets an existing ConfigurationAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationAggregatorState, opts ...pulumi.ResourceOption) (*ConfigurationAggregator, error) {
	var resource ConfigurationAggregator
	err := ctx.ReadResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationAggregator resources.
type configurationAggregatorState struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource *ConfigurationAggregatorAccountAggregationSource `pulumi:"accountAggregationSource"`
	// The ARN of the aggregator
	Arn *string `pulumi:"arn"`
	// The name of the configuration aggregator.
	Name *string `pulumi:"name"`
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource *ConfigurationAggregatorOrganizationAggregationSource `pulumi:"organizationAggregationSource"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Either `accountAggregationSource` or `organizationAggregationSource` must be specified.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ConfigurationAggregatorState struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource pulumix.Input[*ConfigurationAggregatorAccountAggregationSourceArgs]
	// The ARN of the aggregator
	Arn pulumix.Input[*string]
	// The name of the configuration aggregator.
	Name pulumix.Input[*string]
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource pulumix.Input[*ConfigurationAggregatorOrganizationAggregationSourceArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Either `accountAggregationSource` or `organizationAggregationSource` must be specified.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ConfigurationAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationAggregatorState)(nil)).Elem()
}

type configurationAggregatorArgs struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource *ConfigurationAggregatorAccountAggregationSource `pulumi:"accountAggregationSource"`
	// The name of the configuration aggregator.
	Name *string `pulumi:"name"`
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource *ConfigurationAggregatorOrganizationAggregationSource `pulumi:"organizationAggregationSource"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Either `accountAggregationSource` or `organizationAggregationSource` must be specified.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ConfigurationAggregator resource.
type ConfigurationAggregatorArgs struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource pulumix.Input[*ConfigurationAggregatorAccountAggregationSourceArgs]
	// The name of the configuration aggregator.
	Name pulumix.Input[*string]
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource pulumix.Input[*ConfigurationAggregatorOrganizationAggregationSourceArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Either `accountAggregationSource` or `organizationAggregationSource` must be specified.
	Tags pulumix.Input[map[string]string]
}

func (ConfigurationAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationAggregatorArgs)(nil)).Elem()
}

type ConfigurationAggregatorOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregator)(nil)).Elem()
}

func (o ConfigurationAggregatorOutput) ToConfigurationAggregatorOutput() ConfigurationAggregatorOutput {
	return o
}

func (o ConfigurationAggregatorOutput) ToConfigurationAggregatorOutputWithContext(ctx context.Context) ConfigurationAggregatorOutput {
	return o
}

func (o ConfigurationAggregatorOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationAggregator] {
	return pulumix.Output[ConfigurationAggregator]{
		OutputState: o.OutputState,
	}
}

// The account(s) to aggregate config data from as documented below.
func (o ConfigurationAggregatorOutput) AccountAggregationSource() pulumix.GPtrOutput[ConfigurationAggregatorAccountAggregationSource, ConfigurationAggregatorAccountAggregationSourceOutput] {
	value := pulumix.Apply[ConfigurationAggregator](o, func(v ConfigurationAggregator) pulumix.GPtrOutput[ConfigurationAggregatorAccountAggregationSource, ConfigurationAggregatorAccountAggregationSourceOutput] {
		return v.AccountAggregationSource
	})
	unwrapped := pulumix.Flatten[*ConfigurationAggregatorAccountAggregationSource, pulumix.GPtrOutput[ConfigurationAggregatorAccountAggregationSource, ConfigurationAggregatorAccountAggregationSourceOutput]](value)
	return pulumix.GPtrOutput[ConfigurationAggregatorAccountAggregationSource, ConfigurationAggregatorAccountAggregationSourceOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the aggregator
func (o ConfigurationAggregatorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ConfigurationAggregator](o, func(v ConfigurationAggregator) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the configuration aggregator.
func (o ConfigurationAggregatorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ConfigurationAggregator](o, func(v ConfigurationAggregator) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The organization to aggregate config data from as documented below.
func (o ConfigurationAggregatorOutput) OrganizationAggregationSource() pulumix.GPtrOutput[ConfigurationAggregatorOrganizationAggregationSource, ConfigurationAggregatorOrganizationAggregationSourceOutput] {
	value := pulumix.Apply[ConfigurationAggregator](o, func(v ConfigurationAggregator) pulumix.GPtrOutput[ConfigurationAggregatorOrganizationAggregationSource, ConfigurationAggregatorOrganizationAggregationSourceOutput] {
		return v.OrganizationAggregationSource
	})
	unwrapped := pulumix.Flatten[*ConfigurationAggregatorOrganizationAggregationSource, pulumix.GPtrOutput[ConfigurationAggregatorOrganizationAggregationSource, ConfigurationAggregatorOrganizationAggregationSourceOutput]](value)
	return pulumix.GPtrOutput[ConfigurationAggregatorOrganizationAggregationSource, ConfigurationAggregatorOrganizationAggregationSourceOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// Either `accountAggregationSource` or `organizationAggregationSource` must be specified.
func (o ConfigurationAggregatorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConfigurationAggregator](o, func(v ConfigurationAggregator) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ConfigurationAggregatorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ConfigurationAggregator](o, func(v ConfigurationAggregator) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ConfigurationAggregatorOutput{})
}
