// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an HTTP Method Integration Response for an API Gateway Resource.
//
// > **Note:** Depends on having `apigateway.Integration` inside your rest api. To ensure this
// you might need to add an explicit `dependsOn` for clean runs.
type IntegrationResponse struct {
	pulumi.CustomResourceState

	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling pulumix.Output[*string] `pulumi:"contentHandling"`
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
	HttpMethod pulumix.Output[string] `pulumi:"httpMethod"`
	// API resource ID.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// Map of response parameters that can be read from the backend response. For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`.
	ResponseParameters pulumix.MapOutput[string] `pulumi:"responseParameters"`
	// Map of templates used to transform the integration response body.
	ResponseTemplates pulumix.MapOutput[string] `pulumi:"responseTemplates"`
	// ID of the associated REST API.
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern pulumix.Output[*string] `pulumi:"selectionPattern"`
	// HTTP status code.
	//
	// The following arguments are optional:
	StatusCode pulumix.Output[string] `pulumi:"statusCode"`
}

// NewIntegrationResponse registers a new resource with the given unique name, arguments, and options.
func NewIntegrationResponse(ctx *pulumi.Context,
	name string, args *IntegrationResponseArgs, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.StatusCode == nil {
		return nil, errors.New("invalid value for required argument 'StatusCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationResponse
	err := ctx.RegisterResource("aws:apigateway/integrationResponse:IntegrationResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationResponse gets an existing IntegrationResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationResponseState, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	var resource IntegrationResponse
	err := ctx.ReadResource("aws:apigateway/integrationResponse:IntegrationResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationResponse resources.
type integrationResponseState struct {
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling *string `pulumi:"contentHandling"`
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
	HttpMethod *string `pulumi:"httpMethod"`
	// API resource ID.
	ResourceId *string `pulumi:"resourceId"`
	// Map of response parameters that can be read from the backend response. For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`.
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	// Map of templates used to transform the integration response body.
	ResponseTemplates map[string]string `pulumi:"responseTemplates"`
	// ID of the associated REST API.
	RestApi interface{} `pulumi:"restApi"`
	// Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern *string `pulumi:"selectionPattern"`
	// HTTP status code.
	//
	// The following arguments are optional:
	StatusCode *string `pulumi:"statusCode"`
}

type IntegrationResponseState struct {
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling pulumix.Input[*string]
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
	HttpMethod pulumix.Input[*string]
	// API resource ID.
	ResourceId pulumix.Input[*string]
	// Map of response parameters that can be read from the backend response. For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`.
	ResponseParameters pulumix.Input[map[string]string]
	// Map of templates used to transform the integration response body.
	ResponseTemplates pulumix.Input[map[string]string]
	// ID of the associated REST API.
	RestApi pulumix.Input[*any]
	// Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern pulumix.Input[*string]
	// HTTP status code.
	//
	// The following arguments are optional:
	StatusCode pulumix.Input[*string]
}

func (IntegrationResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseState)(nil)).Elem()
}

type integrationResponseArgs struct {
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling *string `pulumi:"contentHandling"`
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
	HttpMethod string `pulumi:"httpMethod"`
	// API resource ID.
	ResourceId string `pulumi:"resourceId"`
	// Map of response parameters that can be read from the backend response. For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`.
	ResponseParameters map[string]string `pulumi:"responseParameters"`
	// Map of templates used to transform the integration response body.
	ResponseTemplates map[string]string `pulumi:"responseTemplates"`
	// ID of the associated REST API.
	RestApi interface{} `pulumi:"restApi"`
	// Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern *string `pulumi:"selectionPattern"`
	// HTTP status code.
	//
	// The following arguments are optional:
	StatusCode string `pulumi:"statusCode"`
}

// The set of arguments for constructing a IntegrationResponse resource.
type IntegrationResponseArgs struct {
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
	ContentHandling pulumix.Input[*string]
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
	HttpMethod pulumix.Input[string]
	// API resource ID.
	ResourceId pulumix.Input[string]
	// Map of response parameters that can be read from the backend response. For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`.
	ResponseParameters pulumix.Input[map[string]string]
	// Map of templates used to transform the integration response body.
	ResponseTemplates pulumix.Input[map[string]string]
	// ID of the associated REST API.
	RestApi pulumix.Input[any]
	// Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
	SelectionPattern pulumix.Input[*string]
	// HTTP status code.
	//
	// The following arguments are optional:
	StatusCode pulumix.Input[string]
}

func (IntegrationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseArgs)(nil)).Elem()
}

type IntegrationResponseOutput struct{ *pulumi.OutputState }

func (IntegrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponse)(nil)).Elem()
}

func (o IntegrationResponseOutput) ToIntegrationResponseOutput() IntegrationResponseOutput {
	return o
}

func (o IntegrationResponseOutput) ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput {
	return o
}

func (o IntegrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationResponse] {
	return pulumix.Output[IntegrationResponse]{
		OutputState: o.OutputState,
	}
}

// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
func (o IntegrationResponseOutput) ContentHandling() pulumix.Output[*string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.Output[*string] { return v.ContentHandling })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`).
func (o IntegrationResponseOutput) HttpMethod() pulumix.Output[string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.Output[string] { return v.HttpMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// API resource ID.
func (o IntegrationResponseOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of response parameters that can be read from the backend response. For example: `responseParameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }`.
func (o IntegrationResponseOutput) ResponseParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.MapOutput[string] { return v.ResponseParameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of templates used to transform the integration response body.
func (o IntegrationResponseOutput) ResponseTemplates() pulumix.MapOutput[string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.MapOutput[string] { return v.ResponseTemplates })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// ID of the associated REST API.
func (o IntegrationResponseOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an `AWS` Lambda function, the AWS Lambda function error header is matched. For all other `HTTP` and `AWS` backends, the HTTP status code is matched.
func (o IntegrationResponseOutput) SelectionPattern() pulumix.Output[*string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.Output[*string] { return v.SelectionPattern })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// HTTP status code.
//
// The following arguments are optional:
func (o IntegrationResponseOutput) StatusCode() pulumix.Output[string] {
	value := pulumix.Apply[IntegrationResponse](o, func(v IntegrationResponse) pulumix.Output[string] { return v.StatusCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(IntegrationResponseOutput{})
}
