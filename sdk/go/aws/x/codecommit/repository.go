// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CodeCommit Repository Resource.
type Repository struct {
	pulumi.CustomResourceState

	// The ARN of the repository
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The URL to use for cloning the repository over HTTPS.
	CloneUrlHttp pulumix.Output[string] `pulumi:"cloneUrlHttp"`
	// The URL to use for cloning the repository over SSH.
	CloneUrlSsh pulumix.Output[string] `pulumi:"cloneUrlSsh"`
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch pulumix.Output[*string] `pulumi:"defaultBranch"`
	// The description of the repository. This needs to be less than 1000 characters
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ID of the repository
	RepositoryId pulumix.Output[string] `pulumi:"repositoryId"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Output[string] `pulumi:"repositoryName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("aws:codecommit/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("aws:codecommit/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// The ARN of the repository
	Arn *string `pulumi:"arn"`
	// The URL to use for cloning the repository over HTTPS.
	CloneUrlHttp *string `pulumi:"cloneUrlHttp"`
	// The URL to use for cloning the repository over SSH.
	CloneUrlSsh *string `pulumi:"cloneUrlSsh"`
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// The description of the repository. This needs to be less than 1000 characters
	Description *string `pulumi:"description"`
	// The ID of the repository
	RepositoryId *string `pulumi:"repositoryId"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName *string `pulumi:"repositoryName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RepositoryState struct {
	// The ARN of the repository
	Arn pulumix.Input[*string]
	// The URL to use for cloning the repository over HTTPS.
	CloneUrlHttp pulumix.Input[*string]
	// The URL to use for cloning the repository over SSH.
	CloneUrlSsh pulumix.Input[*string]
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch pulumix.Input[*string]
	// The description of the repository. This needs to be less than 1000 characters
	Description pulumix.Input[*string]
	// The ID of the repository
	RepositoryId pulumix.Input[*string]
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// The description of the repository. This needs to be less than 1000 characters
	Description *string `pulumi:"description"`
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName string `pulumi:"repositoryName"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// The default branch of the repository. The branch specified here needs to exist.
	DefaultBranch pulumix.Input[*string]
	// The description of the repository. This needs to be less than 1000 characters
	Description pulumix.Input[*string]
	// The name for the repository. This needs to be less than 100 characters.
	RepositoryName pulumix.Input[string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[Repository] {
	return pulumix.Output[Repository]{
		OutputState: o.OutputState,
	}
}

// The ARN of the repository
func (o RepositoryOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The URL to use for cloning the repository over HTTPS.
func (o RepositoryOutput) CloneUrlHttp() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.CloneUrlHttp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The URL to use for cloning the repository over SSH.
func (o RepositoryOutput) CloneUrlSsh() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.CloneUrlSsh })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The default branch of the repository. The branch specified here needs to exist.
func (o RepositoryOutput) DefaultBranch() pulumix.Output[*string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[*string] { return v.DefaultBranch })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The description of the repository. This needs to be less than 1000 characters
func (o RepositoryOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the repository
func (o RepositoryOutput) RepositoryId() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.RepositoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for the repository. This needs to be less than 100 characters.
func (o RepositoryOutput) RepositoryName() pulumix.Output[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.Output[string] { return v.RepositoryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RepositoryOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RepositoryOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Repository](o, func(v Repository) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RepositoryOutput{})
}
