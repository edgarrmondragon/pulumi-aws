// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type TopicRule struct {
	pulumi.CustomResourceState

	// The ARN of the topic rule
	Arn               pulumix.Output[string]                                                           `pulumi:"arn"`
	CloudwatchAlarms  pulumix.GArrayOutput[TopicRuleCloudwatchAlarm, TopicRuleCloudwatchAlarmOutput]   `pulumi:"cloudwatchAlarms"`
	CloudwatchLogs    pulumix.GArrayOutput[TopicRuleCloudwatchLog, TopicRuleCloudwatchLogOutput]       `pulumi:"cloudwatchLogs"`
	CloudwatchMetrics pulumix.GArrayOutput[TopicRuleCloudwatchMetric, TopicRuleCloudwatchMetricOutput] `pulumi:"cloudwatchMetrics"`
	// The description of the rule.
	Description   pulumix.Output[*string]                                                    `pulumi:"description"`
	Dynamodbs     pulumix.GArrayOutput[TopicRuleDynamodb, TopicRuleDynamodbOutput]           `pulumi:"dynamodbs"`
	Dynamodbv2s   pulumix.GArrayOutput[TopicRuleDynamodbv2, TopicRuleDynamodbv2Output]       `pulumi:"dynamodbv2s"`
	Elasticsearch pulumix.GArrayOutput[TopicRuleElasticsearch, TopicRuleElasticsearchOutput] `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled pulumix.Output[bool] `pulumi:"enabled"`
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  pulumix.GPtrOutput[TopicRuleErrorAction, TopicRuleErrorActionOutput]   `pulumi:"errorAction"`
	Firehoses    pulumix.GArrayOutput[TopicRuleFirehose, TopicRuleFirehoseOutput]       `pulumi:"firehoses"`
	Https        pulumix.GArrayOutput[TopicRuleHttp, TopicRuleHttpOutput]               `pulumi:"https"`
	IotAnalytics pulumix.GArrayOutput[TopicRuleIotAnalytic, TopicRuleIotAnalyticOutput] `pulumi:"iotAnalytics"`
	IotEvents    pulumix.GArrayOutput[TopicRuleIotEvent, TopicRuleIotEventOutput]       `pulumi:"iotEvents"`
	Kafkas       pulumix.GArrayOutput[TopicRuleKafka, TopicRuleKafkaOutput]             `pulumi:"kafkas"`
	Kineses      pulumix.GArrayOutput[TopicRuleKinesis, TopicRuleKinesisOutput]         `pulumi:"kineses"`
	Lambdas      pulumix.GArrayOutput[TopicRuleLambda, TopicRuleLambdaOutput]           `pulumi:"lambdas"`
	// The name of the rule.
	Name        pulumix.Output[string]                                             `pulumi:"name"`
	Republishes pulumix.GArrayOutput[TopicRuleRepublish, TopicRuleRepublishOutput] `pulumi:"republishes"`
	S3          pulumix.GArrayOutput[TopicRuleS3, TopicRuleS3Output]               `pulumi:"s3"`
	Sns         pulumix.GArrayOutput[TopicRuleSns, TopicRuleSnsOutput]             `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumix.Output[string] `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    pulumix.Output[string]                                                   `pulumi:"sqlVersion"`
	Sqs           pulumix.GArrayOutput[TopicRuleSqs, TopicRuleSqsOutput]                   `pulumi:"sqs"`
	StepFunctions pulumix.GArrayOutput[TopicRuleStepFunction, TopicRuleStepFunctionOutput] `pulumi:"stepFunctions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     pulumix.MapOutput[string]                                            `pulumi:"tagsAll"`
	Timestreams pulumix.GArrayOutput[TopicRuleTimestream, TopicRuleTimestreamOutput] `pulumi:"timestreams"`
}

// NewTopicRule registers a new resource with the given unique name, arguments, and options.
func NewTopicRule(ctx *pulumi.Context,
	name string, args *TopicRuleArgs, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	if args.SqlVersion == nil {
		return nil, errors.New("invalid value for required argument 'SqlVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TopicRule
	err := ctx.RegisterResource("aws:iot/topicRule:TopicRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicRule gets an existing TopicRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicRuleState, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	var resource TopicRule
	err := ctx.ReadResource("aws:iot/topicRule:TopicRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicRule resources.
type topicRuleState struct {
	// The ARN of the topic rule
	Arn               *string                     `pulumi:"arn"`
	CloudwatchAlarms  []TopicRuleCloudwatchAlarm  `pulumi:"cloudwatchAlarms"`
	CloudwatchLogs    []TopicRuleCloudwatchLog    `pulumi:"cloudwatchLogs"`
	CloudwatchMetrics []TopicRuleCloudwatchMetric `pulumi:"cloudwatchMetrics"`
	// The description of the rule.
	Description   *string                  `pulumi:"description"`
	Dynamodbs     []TopicRuleDynamodb      `pulumi:"dynamodbs"`
	Dynamodbv2s   []TopicRuleDynamodbv2    `pulumi:"dynamodbv2s"`
	Elasticsearch []TopicRuleElasticsearch `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  *TopicRuleErrorAction  `pulumi:"errorAction"`
	Firehoses    []TopicRuleFirehose    `pulumi:"firehoses"`
	Https        []TopicRuleHttp        `pulumi:"https"`
	IotAnalytics []TopicRuleIotAnalytic `pulumi:"iotAnalytics"`
	IotEvents    []TopicRuleIotEvent    `pulumi:"iotEvents"`
	Kafkas       []TopicRuleKafka       `pulumi:"kafkas"`
	Kineses      []TopicRuleKinesis     `pulumi:"kineses"`
	Lambdas      []TopicRuleLambda      `pulumi:"lambdas"`
	// The name of the rule.
	Name        *string              `pulumi:"name"`
	Republishes []TopicRuleRepublish `pulumi:"republishes"`
	S3          []TopicRuleS3        `pulumi:"s3"`
	Sns         []TopicRuleSns       `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql *string `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    *string                 `pulumi:"sqlVersion"`
	Sqs           []TopicRuleSqs          `pulumi:"sqs"`
	StepFunctions []TopicRuleStepFunction `pulumi:"stepFunctions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     map[string]string     `pulumi:"tagsAll"`
	Timestreams []TopicRuleTimestream `pulumi:"timestreams"`
}

type TopicRuleState struct {
	// The ARN of the topic rule
	Arn               pulumix.Input[*string]
	CloudwatchAlarms  pulumix.Input[[]*TopicRuleCloudwatchAlarmArgs]
	CloudwatchLogs    pulumix.Input[[]*TopicRuleCloudwatchLogArgs]
	CloudwatchMetrics pulumix.Input[[]*TopicRuleCloudwatchMetricArgs]
	// The description of the rule.
	Description   pulumix.Input[*string]
	Dynamodbs     pulumix.Input[[]*TopicRuleDynamodbArgs]
	Dynamodbv2s   pulumix.Input[[]*TopicRuleDynamodbv2Args]
	Elasticsearch pulumix.Input[[]*TopicRuleElasticsearchArgs]
	// Specifies whether the rule is enabled.
	Enabled pulumix.Input[*bool]
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  pulumix.Input[*TopicRuleErrorActionArgs]
	Firehoses    pulumix.Input[[]*TopicRuleFirehoseArgs]
	Https        pulumix.Input[[]*TopicRuleHttpArgs]
	IotAnalytics pulumix.Input[[]*TopicRuleIotAnalyticArgs]
	IotEvents    pulumix.Input[[]*TopicRuleIotEventArgs]
	Kafkas       pulumix.Input[[]*TopicRuleKafkaArgs]
	Kineses      pulumix.Input[[]*TopicRuleKinesisArgs]
	Lambdas      pulumix.Input[[]*TopicRuleLambdaArgs]
	// The name of the rule.
	Name        pulumix.Input[*string]
	Republishes pulumix.Input[[]*TopicRuleRepublishArgs]
	S3          pulumix.Input[[]*TopicRuleS3Args]
	Sns         pulumix.Input[[]*TopicRuleSnsArgs]
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumix.Input[*string]
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    pulumix.Input[*string]
	Sqs           pulumix.Input[[]*TopicRuleSqsArgs]
	StepFunctions pulumix.Input[[]*TopicRuleStepFunctionArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll     pulumix.Input[map[string]string]
	Timestreams pulumix.Input[[]*TopicRuleTimestreamArgs]
}

func (TopicRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleState)(nil)).Elem()
}

type topicRuleArgs struct {
	CloudwatchAlarms  []TopicRuleCloudwatchAlarm  `pulumi:"cloudwatchAlarms"`
	CloudwatchLogs    []TopicRuleCloudwatchLog    `pulumi:"cloudwatchLogs"`
	CloudwatchMetrics []TopicRuleCloudwatchMetric `pulumi:"cloudwatchMetrics"`
	// The description of the rule.
	Description   *string                  `pulumi:"description"`
	Dynamodbs     []TopicRuleDynamodb      `pulumi:"dynamodbs"`
	Dynamodbv2s   []TopicRuleDynamodbv2    `pulumi:"dynamodbv2s"`
	Elasticsearch []TopicRuleElasticsearch `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled bool `pulumi:"enabled"`
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  *TopicRuleErrorAction  `pulumi:"errorAction"`
	Firehoses    []TopicRuleFirehose    `pulumi:"firehoses"`
	Https        []TopicRuleHttp        `pulumi:"https"`
	IotAnalytics []TopicRuleIotAnalytic `pulumi:"iotAnalytics"`
	IotEvents    []TopicRuleIotEvent    `pulumi:"iotEvents"`
	Kafkas       []TopicRuleKafka       `pulumi:"kafkas"`
	Kineses      []TopicRuleKinesis     `pulumi:"kineses"`
	Lambdas      []TopicRuleLambda      `pulumi:"lambdas"`
	// The name of the rule.
	Name        *string              `pulumi:"name"`
	Republishes []TopicRuleRepublish `pulumi:"republishes"`
	S3          []TopicRuleS3        `pulumi:"s3"`
	Sns         []TopicRuleSns       `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql string `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    string                  `pulumi:"sqlVersion"`
	Sqs           []TopicRuleSqs          `pulumi:"sqs"`
	StepFunctions []TopicRuleStepFunction `pulumi:"stepFunctions"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags        map[string]string     `pulumi:"tags"`
	Timestreams []TopicRuleTimestream `pulumi:"timestreams"`
}

// The set of arguments for constructing a TopicRule resource.
type TopicRuleArgs struct {
	CloudwatchAlarms  pulumix.Input[[]*TopicRuleCloudwatchAlarmArgs]
	CloudwatchLogs    pulumix.Input[[]*TopicRuleCloudwatchLogArgs]
	CloudwatchMetrics pulumix.Input[[]*TopicRuleCloudwatchMetricArgs]
	// The description of the rule.
	Description   pulumix.Input[*string]
	Dynamodbs     pulumix.Input[[]*TopicRuleDynamodbArgs]
	Dynamodbv2s   pulumix.Input[[]*TopicRuleDynamodbv2Args]
	Elasticsearch pulumix.Input[[]*TopicRuleElasticsearchArgs]
	// Specifies whether the rule is enabled.
	Enabled pulumix.Input[bool]
	// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
	ErrorAction  pulumix.Input[*TopicRuleErrorActionArgs]
	Firehoses    pulumix.Input[[]*TopicRuleFirehoseArgs]
	Https        pulumix.Input[[]*TopicRuleHttpArgs]
	IotAnalytics pulumix.Input[[]*TopicRuleIotAnalyticArgs]
	IotEvents    pulumix.Input[[]*TopicRuleIotEventArgs]
	Kafkas       pulumix.Input[[]*TopicRuleKafkaArgs]
	Kineses      pulumix.Input[[]*TopicRuleKinesisArgs]
	Lambdas      pulumix.Input[[]*TopicRuleLambdaArgs]
	// The name of the rule.
	Name        pulumix.Input[*string]
	Republishes pulumix.Input[[]*TopicRuleRepublishArgs]
	S3          pulumix.Input[[]*TopicRuleS3Args]
	Sns         pulumix.Input[[]*TopicRuleSnsArgs]
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumix.Input[string]
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion    pulumix.Input[string]
	Sqs           pulumix.Input[[]*TopicRuleSqsArgs]
	StepFunctions pulumix.Input[[]*TopicRuleStepFunctionArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags        pulumix.Input[map[string]string]
	Timestreams pulumix.Input[[]*TopicRuleTimestreamArgs]
}

func (TopicRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleArgs)(nil)).Elem()
}

type TopicRuleOutput struct{ *pulumi.OutputState }

func (TopicRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRule)(nil)).Elem()
}

func (o TopicRuleOutput) ToTopicRuleOutput() TopicRuleOutput {
	return o
}

func (o TopicRuleOutput) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return o
}

func (o TopicRuleOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRule] {
	return pulumix.Output[TopicRule]{
		OutputState: o.OutputState,
	}
}

// The ARN of the topic rule
func (o TopicRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TopicRuleOutput) CloudwatchAlarms() pulumix.GArrayOutput[TopicRuleCloudwatchAlarm, TopicRuleCloudwatchAlarmOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleCloudwatchAlarm, TopicRuleCloudwatchAlarmOutput] {
		return v.CloudwatchAlarms
	})
	unwrapped := pulumix.Flatten[[]TopicRuleCloudwatchAlarm, pulumix.GArrayOutput[TopicRuleCloudwatchAlarm, TopicRuleCloudwatchAlarmOutput]](value)
	return pulumix.GArrayOutput[TopicRuleCloudwatchAlarm, TopicRuleCloudwatchAlarmOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) CloudwatchLogs() pulumix.GArrayOutput[TopicRuleCloudwatchLog, TopicRuleCloudwatchLogOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleCloudwatchLog, TopicRuleCloudwatchLogOutput] {
		return v.CloudwatchLogs
	})
	unwrapped := pulumix.Flatten[[]TopicRuleCloudwatchLog, pulumix.GArrayOutput[TopicRuleCloudwatchLog, TopicRuleCloudwatchLogOutput]](value)
	return pulumix.GArrayOutput[TopicRuleCloudwatchLog, TopicRuleCloudwatchLogOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) CloudwatchMetrics() pulumix.GArrayOutput[TopicRuleCloudwatchMetric, TopicRuleCloudwatchMetricOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleCloudwatchMetric, TopicRuleCloudwatchMetricOutput] {
		return v.CloudwatchMetrics
	})
	unwrapped := pulumix.Flatten[[]TopicRuleCloudwatchMetric, pulumix.GArrayOutput[TopicRuleCloudwatchMetric, TopicRuleCloudwatchMetricOutput]](value)
	return pulumix.GArrayOutput[TopicRuleCloudwatchMetric, TopicRuleCloudwatchMetricOutput]{OutputState: unwrapped.OutputState}
}

// The description of the rule.
func (o TopicRuleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o TopicRuleOutput) Dynamodbs() pulumix.GArrayOutput[TopicRuleDynamodb, TopicRuleDynamodbOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleDynamodb, TopicRuleDynamodbOutput] { return v.Dynamodbs })
	unwrapped := pulumix.Flatten[[]TopicRuleDynamodb, pulumix.GArrayOutput[TopicRuleDynamodb, TopicRuleDynamodbOutput]](value)
	return pulumix.GArrayOutput[TopicRuleDynamodb, TopicRuleDynamodbOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Dynamodbv2s() pulumix.GArrayOutput[TopicRuleDynamodbv2, TopicRuleDynamodbv2Output] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleDynamodbv2, TopicRuleDynamodbv2Output] {
		return v.Dynamodbv2s
	})
	unwrapped := pulumix.Flatten[[]TopicRuleDynamodbv2, pulumix.GArrayOutput[TopicRuleDynamodbv2, TopicRuleDynamodbv2Output]](value)
	return pulumix.GArrayOutput[TopicRuleDynamodbv2, TopicRuleDynamodbv2Output]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Elasticsearch() pulumix.GArrayOutput[TopicRuleElasticsearch, TopicRuleElasticsearchOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleElasticsearch, TopicRuleElasticsearchOutput] {
		return v.Elasticsearch
	})
	unwrapped := pulumix.Flatten[[]TopicRuleElasticsearch, pulumix.GArrayOutput[TopicRuleElasticsearch, TopicRuleElasticsearchOutput]](value)
	return pulumix.GArrayOutput[TopicRuleElasticsearch, TopicRuleElasticsearchOutput]{OutputState: unwrapped.OutputState}
}

// Specifies whether the rule is enabled.
func (o TopicRuleOutput) Enabled() pulumix.Output[bool] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.Output[bool] { return v.Enabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Configuration block with error action to be associated with the rule. See the documentation for `cloudwatchAlarm`, `cloudwatchLogs`, `cloudwatchMetric`, `dynamodb`, `dynamodbv2`, `elasticsearch`, `firehose`, `http`, `iotAnalytics`, `iotEvents`, `kafka`, `kinesis`, `lambda`, `republish`, `s3`, `sns`, `sqs`, `stepFunctions`, `timestream` configuration blocks for further configuration details.
func (o TopicRuleOutput) ErrorAction() pulumix.GPtrOutput[TopicRuleErrorAction, TopicRuleErrorActionOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GPtrOutput[TopicRuleErrorAction, TopicRuleErrorActionOutput] {
		return v.ErrorAction
	})
	unwrapped := pulumix.Flatten[*TopicRuleErrorAction, pulumix.GPtrOutput[TopicRuleErrorAction, TopicRuleErrorActionOutput]](value)
	return pulumix.GPtrOutput[TopicRuleErrorAction, TopicRuleErrorActionOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Firehoses() pulumix.GArrayOutput[TopicRuleFirehose, TopicRuleFirehoseOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleFirehose, TopicRuleFirehoseOutput] { return v.Firehoses })
	unwrapped := pulumix.Flatten[[]TopicRuleFirehose, pulumix.GArrayOutput[TopicRuleFirehose, TopicRuleFirehoseOutput]](value)
	return pulumix.GArrayOutput[TopicRuleFirehose, TopicRuleFirehoseOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Https() pulumix.GArrayOutput[TopicRuleHttp, TopicRuleHttpOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleHttp, TopicRuleHttpOutput] { return v.Https })
	unwrapped := pulumix.Flatten[[]TopicRuleHttp, pulumix.GArrayOutput[TopicRuleHttp, TopicRuleHttpOutput]](value)
	return pulumix.GArrayOutput[TopicRuleHttp, TopicRuleHttpOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) IotAnalytics() pulumix.GArrayOutput[TopicRuleIotAnalytic, TopicRuleIotAnalyticOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleIotAnalytic, TopicRuleIotAnalyticOutput] {
		return v.IotAnalytics
	})
	unwrapped := pulumix.Flatten[[]TopicRuleIotAnalytic, pulumix.GArrayOutput[TopicRuleIotAnalytic, TopicRuleIotAnalyticOutput]](value)
	return pulumix.GArrayOutput[TopicRuleIotAnalytic, TopicRuleIotAnalyticOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) IotEvents() pulumix.GArrayOutput[TopicRuleIotEvent, TopicRuleIotEventOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleIotEvent, TopicRuleIotEventOutput] { return v.IotEvents })
	unwrapped := pulumix.Flatten[[]TopicRuleIotEvent, pulumix.GArrayOutput[TopicRuleIotEvent, TopicRuleIotEventOutput]](value)
	return pulumix.GArrayOutput[TopicRuleIotEvent, TopicRuleIotEventOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Kafkas() pulumix.GArrayOutput[TopicRuleKafka, TopicRuleKafkaOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleKafka, TopicRuleKafkaOutput] { return v.Kafkas })
	unwrapped := pulumix.Flatten[[]TopicRuleKafka, pulumix.GArrayOutput[TopicRuleKafka, TopicRuleKafkaOutput]](value)
	return pulumix.GArrayOutput[TopicRuleKafka, TopicRuleKafkaOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Kineses() pulumix.GArrayOutput[TopicRuleKinesis, TopicRuleKinesisOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleKinesis, TopicRuleKinesisOutput] { return v.Kineses })
	unwrapped := pulumix.Flatten[[]TopicRuleKinesis, pulumix.GArrayOutput[TopicRuleKinesis, TopicRuleKinesisOutput]](value)
	return pulumix.GArrayOutput[TopicRuleKinesis, TopicRuleKinesisOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Lambdas() pulumix.GArrayOutput[TopicRuleLambda, TopicRuleLambdaOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleLambda, TopicRuleLambdaOutput] { return v.Lambdas })
	unwrapped := pulumix.Flatten[[]TopicRuleLambda, pulumix.GArrayOutput[TopicRuleLambda, TopicRuleLambdaOutput]](value)
	return pulumix.GArrayOutput[TopicRuleLambda, TopicRuleLambdaOutput]{OutputState: unwrapped.OutputState}
}

// The name of the rule.
func (o TopicRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TopicRuleOutput) Republishes() pulumix.GArrayOutput[TopicRuleRepublish, TopicRuleRepublishOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleRepublish, TopicRuleRepublishOutput] {
		return v.Republishes
	})
	unwrapped := pulumix.Flatten[[]TopicRuleRepublish, pulumix.GArrayOutput[TopicRuleRepublish, TopicRuleRepublishOutput]](value)
	return pulumix.GArrayOutput[TopicRuleRepublish, TopicRuleRepublishOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) S3() pulumix.GArrayOutput[TopicRuleS3, TopicRuleS3Output] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleS3, TopicRuleS3Output] { return v.S3 })
	unwrapped := pulumix.Flatten[[]TopicRuleS3, pulumix.GArrayOutput[TopicRuleS3, TopicRuleS3Output]](value)
	return pulumix.GArrayOutput[TopicRuleS3, TopicRuleS3Output]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Sns() pulumix.GArrayOutput[TopicRuleSns, TopicRuleSnsOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleSns, TopicRuleSnsOutput] { return v.Sns })
	unwrapped := pulumix.Flatten[[]TopicRuleSns, pulumix.GArrayOutput[TopicRuleSns, TopicRuleSnsOutput]](value)
	return pulumix.GArrayOutput[TopicRuleSns, TopicRuleSnsOutput]{OutputState: unwrapped.OutputState}
}

// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
func (o TopicRuleOutput) Sql() pulumix.Output[string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.Output[string] { return v.Sql })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version of the SQL rules engine to use when evaluating the rule.
func (o TopicRuleOutput) SqlVersion() pulumix.Output[string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.Output[string] { return v.SqlVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o TopicRuleOutput) Sqs() pulumix.GArrayOutput[TopicRuleSqs, TopicRuleSqsOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleSqs, TopicRuleSqsOutput] { return v.Sqs })
	unwrapped := pulumix.Flatten[[]TopicRuleSqs, pulumix.GArrayOutput[TopicRuleSqs, TopicRuleSqsOutput]](value)
	return pulumix.GArrayOutput[TopicRuleSqs, TopicRuleSqsOutput]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) StepFunctions() pulumix.GArrayOutput[TopicRuleStepFunction, TopicRuleStepFunctionOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleStepFunction, TopicRuleStepFunctionOutput] {
		return v.StepFunctions
	})
	unwrapped := pulumix.Flatten[[]TopicRuleStepFunction, pulumix.GArrayOutput[TopicRuleStepFunction, TopicRuleStepFunctionOutput]](value)
	return pulumix.GArrayOutput[TopicRuleStepFunction, TopicRuleStepFunctionOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TopicRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TopicRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o TopicRuleOutput) Timestreams() pulumix.GArrayOutput[TopicRuleTimestream, TopicRuleTimestreamOutput] {
	value := pulumix.Apply[TopicRule](o, func(v TopicRule) pulumix.GArrayOutput[TopicRuleTimestream, TopicRuleTimestreamOutput] {
		return v.Timestreams
	})
	unwrapped := pulumix.Flatten[[]TopicRuleTimestream, pulumix.GArrayOutput[TopicRuleTimestream, TopicRuleTimestreamOutput]](value)
	return pulumix.GArrayOutput[TopicRuleTimestream, TopicRuleTimestreamOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TopicRuleOutput{})
}
