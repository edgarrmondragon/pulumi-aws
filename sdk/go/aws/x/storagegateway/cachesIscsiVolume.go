// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagegateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS Storage Gateway cached iSCSI volume.
//
// > **NOTE:** The gateway must have cache added (e.g., via the `storagegateway.Cache` resource) before creating volumes otherwise the Storage Gateway API will return an error.
//
// > **NOTE:** The gateway must have an upload buffer added (e.g., via the `storagegateway.UploadBuffer` resource) before the volume is operational to clients, however the Storage Gateway API will allow volume creation without error in that case and return volume status as `UPLOAD BUFFER NOT CONFIGURED`.
type CachesIscsiVolume struct {
	pulumi.CustomResourceState

	// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether mutual CHAP is enabled for the iSCSI target.
	ChapEnabled pulumix.Output[bool] `pulumi:"chapEnabled"`
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn pulumix.Output[string] `pulumi:"gatewayArn"`
	// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
	KmsEncrypted pulumix.Output[*bool] `pulumi:"kmsEncrypted"`
	// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kmsEncrypted` is set.
	KmsKey pulumix.Output[*string] `pulumi:"kmsKey"`
	// Logical disk number.
	LunNumber pulumix.Output[int] `pulumi:"lunNumber"`
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// The port used to communicate with iSCSI targets.
	NetworkInterfacePort pulumix.Output[int] `pulumi:"networkInterfacePort"`
	// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
	SnapshotId pulumix.Output[*string] `pulumi:"snapshotId"`
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volumeSizeInBytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn pulumix.Output[*string] `pulumi:"sourceVolumeArn"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Target Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
	TargetArn pulumix.Output[string] `pulumi:"targetArn"`
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName pulumix.Output[string] `pulumi:"targetName"`
	// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	VolumeArn pulumix.Output[string] `pulumi:"volumeArn"`
	// Volume ID, e.g., `vol-12345678`.
	VolumeId pulumix.Output[string] `pulumi:"volumeId"`
	// The size of the volume in bytes.
	VolumeSizeInBytes pulumix.Output[int] `pulumi:"volumeSizeInBytes"`
}

// NewCachesIscsiVolume registers a new resource with the given unique name, arguments, and options.
func NewCachesIscsiVolume(ctx *pulumi.Context,
	name string, args *CachesIscsiVolumeArgs, opts ...pulumi.ResourceOption) (*CachesIscsiVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'GatewayArn'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.TargetName == nil {
		return nil, errors.New("invalid value for required argument 'TargetName'")
	}
	if args.VolumeSizeInBytes == nil {
		return nil, errors.New("invalid value for required argument 'VolumeSizeInBytes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CachesIscsiVolume
	err := ctx.RegisterResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCachesIscsiVolume gets an existing CachesIscsiVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachesIscsiVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachesIscsiVolumeState, opts ...pulumi.ResourceOption) (*CachesIscsiVolume, error) {
	var resource CachesIscsiVolume
	err := ctx.ReadResource("aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CachesIscsiVolume resources.
type cachesIscsiVolumeState struct {
	// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	Arn *string `pulumi:"arn"`
	// Whether mutual CHAP is enabled for the iSCSI target.
	ChapEnabled *bool `pulumi:"chapEnabled"`
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn *string `pulumi:"gatewayArn"`
	// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
	KmsEncrypted *bool `pulumi:"kmsEncrypted"`
	// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kmsEncrypted` is set.
	KmsKey *string `pulumi:"kmsKey"`
	// Logical disk number.
	LunNumber *int `pulumi:"lunNumber"`
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The port used to communicate with iSCSI targets.
	NetworkInterfacePort *int `pulumi:"networkInterfacePort"`
	// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
	SnapshotId *string `pulumi:"snapshotId"`
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volumeSizeInBytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn *string `pulumi:"sourceVolumeArn"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Target Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
	TargetArn *string `pulumi:"targetArn"`
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName *string `pulumi:"targetName"`
	// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	VolumeArn *string `pulumi:"volumeArn"`
	// Volume ID, e.g., `vol-12345678`.
	VolumeId *string `pulumi:"volumeId"`
	// The size of the volume in bytes.
	VolumeSizeInBytes *int `pulumi:"volumeSizeInBytes"`
}

type CachesIscsiVolumeState struct {
	// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	Arn pulumix.Input[*string]
	// Whether mutual CHAP is enabled for the iSCSI target.
	ChapEnabled pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn pulumix.Input[*string]
	// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
	KmsEncrypted pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kmsEncrypted` is set.
	KmsKey pulumix.Input[*string]
	// Logical disk number.
	LunNumber pulumix.Input[*int]
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId pulumix.Input[*string]
	// The port used to communicate with iSCSI targets.
	NetworkInterfacePort pulumix.Input[*int]
	// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
	SnapshotId pulumix.Input[*string]
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volumeSizeInBytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Target Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
	TargetArn pulumix.Input[*string]
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName pulumix.Input[*string]
	// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
	VolumeArn pulumix.Input[*string]
	// Volume ID, e.g., `vol-12345678`.
	VolumeId pulumix.Input[*string]
	// The size of the volume in bytes.
	VolumeSizeInBytes pulumix.Input[*int]
}

func (CachesIscsiVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachesIscsiVolumeState)(nil)).Elem()
}

type cachesIscsiVolumeArgs struct {
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn string `pulumi:"gatewayArn"`
	// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
	KmsEncrypted *bool `pulumi:"kmsEncrypted"`
	// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kmsEncrypted` is set.
	KmsKey *string `pulumi:"kmsKey"`
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
	SnapshotId *string `pulumi:"snapshotId"`
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volumeSizeInBytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn *string `pulumi:"sourceVolumeArn"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName string `pulumi:"targetName"`
	// The size of the volume in bytes.
	VolumeSizeInBytes int `pulumi:"volumeSizeInBytes"`
}

// The set of arguments for constructing a CachesIscsiVolume resource.
type CachesIscsiVolumeArgs struct {
	// The Amazon Resource Name (ARN) of the gateway.
	GatewayArn pulumix.Input[string]
	// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
	KmsEncrypted pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kmsEncrypted` is set.
	KmsKey pulumix.Input[*string]
	// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
	NetworkInterfaceId pulumix.Input[string]
	// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
	SnapshotId pulumix.Input[*string]
	// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volumeSizeInBytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
	SourceVolumeArn pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
	TargetName pulumix.Input[string]
	// The size of the volume in bytes.
	VolumeSizeInBytes pulumix.Input[int]
}

func (CachesIscsiVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachesIscsiVolumeArgs)(nil)).Elem()
}

type CachesIscsiVolumeOutput struct{ *pulumi.OutputState }

func (CachesIscsiVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CachesIscsiVolume)(nil)).Elem()
}

func (o CachesIscsiVolumeOutput) ToCachesIscsiVolumeOutput() CachesIscsiVolumeOutput {
	return o
}

func (o CachesIscsiVolumeOutput) ToCachesIscsiVolumeOutputWithContext(ctx context.Context) CachesIscsiVolumeOutput {
	return o
}

func (o CachesIscsiVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[CachesIscsiVolume] {
	return pulumix.Output[CachesIscsiVolume]{
		OutputState: o.OutputState,
	}
}

// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
func (o CachesIscsiVolumeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether mutual CHAP is enabled for the iSCSI target.
func (o CachesIscsiVolumeOutput) ChapEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[bool] { return v.ChapEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The Amazon Resource Name (ARN) of the gateway.
func (o CachesIscsiVolumeOutput) GatewayArn() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.GatewayArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set to `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3.
func (o CachesIscsiVolumeOutput) KmsEncrypted() pulumix.Output[*bool] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[*bool] { return v.KmsEncrypted })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. Is required when `kmsEncrypted` is set.
func (o CachesIscsiVolumeOutput) KmsKey() pulumix.Output[*string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[*string] { return v.KmsKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Logical disk number.
func (o CachesIscsiVolumeOutput) LunNumber() pulumix.Output[int] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[int] { return v.LunNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted.
func (o CachesIscsiVolumeOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port used to communicate with iSCSI targets.
func (o CachesIscsiVolumeOutput) NetworkInterfacePort() pulumix.Output[int] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[int] { return v.NetworkInterfacePort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The snapshot ID of the snapshot to restore as the new cached volumeE.g., `snap-1122aabb`.
func (o CachesIscsiVolumeOutput) SnapshotId() pulumix.Output[*string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[*string] { return v.SnapshotId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The `volumeSizeInBytes` value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
func (o CachesIscsiVolumeOutput) SourceVolumeArn() pulumix.Output[*string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[*string] { return v.SourceVolumeArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CachesIscsiVolumeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CachesIscsiVolumeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Target Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/target/iqn.1997-05.com.amazon:TargetName`.
func (o CachesIscsiVolumeOutput) TargetArn() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.TargetArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. The target name must be unique across all volumes of a gateway.
func (o CachesIscsiVolumeOutput) TargetName() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.TargetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Volume Amazon Resource Name (ARN), e.g., `arn:aws:storagegateway:us-east-1:123456789012:gateway/sgw-12345678/volume/vol-12345678`.
func (o CachesIscsiVolumeOutput) VolumeArn() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.VolumeArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Volume ID, e.g., `vol-12345678`.
func (o CachesIscsiVolumeOutput) VolumeId() pulumix.Output[string] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[string] { return v.VolumeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The size of the volume in bytes.
func (o CachesIscsiVolumeOutput) VolumeSizeInBytes() pulumix.Output[int] {
	value := pulumix.Apply[CachesIscsiVolume](o, func(v CachesIscsiVolume) pulumix.Output[int] { return v.VolumeSizeInBytes })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(CachesIscsiVolumeOutput{})
}
