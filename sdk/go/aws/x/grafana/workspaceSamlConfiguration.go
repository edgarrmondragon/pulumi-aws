// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon Managed Grafana workspace SAML configuration resource.
type WorkspaceSamlConfiguration struct {
	pulumi.CustomResourceState

	// The admin role values.
	AdminRoleValues pulumix.ArrayOutput[string] `pulumi:"adminRoleValues"`
	// The allowed organizations.
	AllowedOrganizations pulumix.ArrayOutput[string] `pulumi:"allowedOrganizations"`
	// The editor role values.
	EditorRoleValues pulumix.ArrayOutput[string] `pulumi:"editorRoleValues"`
	// The email assertion.
	EmailAssertion pulumix.Output[string] `pulumi:"emailAssertion"`
	// The groups assertion.
	GroupsAssertion pulumix.Output[*string] `pulumi:"groupsAssertion"`
	// The IDP Metadata URL. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataUrl pulumix.Output[*string] `pulumi:"idpMetadataUrl"`
	// The IDP Metadata XML. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataXml pulumix.Output[*string] `pulumi:"idpMetadataXml"`
	// The login assertion.
	LoginAssertion pulumix.Output[string] `pulumi:"loginAssertion"`
	// The login validity duration.
	LoginValidityDuration pulumix.Output[int] `pulumi:"loginValidityDuration"`
	// The name assertion.
	NameAssertion pulumix.Output[string] `pulumi:"nameAssertion"`
	// The org assertion.
	OrgAssertion pulumix.Output[*string] `pulumi:"orgAssertion"`
	// The role assertion.
	RoleAssertion pulumix.Output[*string] `pulumi:"roleAssertion"`
	// The status of the SAML configuration.
	Status pulumix.Output[string] `pulumi:"status"`
	// The workspace id.
	//
	// The following arguments are optional:
	WorkspaceId pulumix.Output[string] `pulumi:"workspaceId"`
}

// NewWorkspaceSamlConfiguration registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceSamlConfiguration(ctx *pulumi.Context,
	name string, args *WorkspaceSamlConfigurationArgs, opts ...pulumi.ResourceOption) (*WorkspaceSamlConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EditorRoleValues == nil {
		return nil, errors.New("invalid value for required argument 'EditorRoleValues'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceSamlConfiguration
	err := ctx.RegisterResource("aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceSamlConfiguration gets an existing WorkspaceSamlConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceSamlConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceSamlConfigurationState, opts ...pulumi.ResourceOption) (*WorkspaceSamlConfiguration, error) {
	var resource WorkspaceSamlConfiguration
	err := ctx.ReadResource("aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceSamlConfiguration resources.
type workspaceSamlConfigurationState struct {
	// The admin role values.
	AdminRoleValues []string `pulumi:"adminRoleValues"`
	// The allowed organizations.
	AllowedOrganizations []string `pulumi:"allowedOrganizations"`
	// The editor role values.
	EditorRoleValues []string `pulumi:"editorRoleValues"`
	// The email assertion.
	EmailAssertion *string `pulumi:"emailAssertion"`
	// The groups assertion.
	GroupsAssertion *string `pulumi:"groupsAssertion"`
	// The IDP Metadata URL. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataUrl *string `pulumi:"idpMetadataUrl"`
	// The IDP Metadata XML. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataXml *string `pulumi:"idpMetadataXml"`
	// The login assertion.
	LoginAssertion *string `pulumi:"loginAssertion"`
	// The login validity duration.
	LoginValidityDuration *int `pulumi:"loginValidityDuration"`
	// The name assertion.
	NameAssertion *string `pulumi:"nameAssertion"`
	// The org assertion.
	OrgAssertion *string `pulumi:"orgAssertion"`
	// The role assertion.
	RoleAssertion *string `pulumi:"roleAssertion"`
	// The status of the SAML configuration.
	Status *string `pulumi:"status"`
	// The workspace id.
	//
	// The following arguments are optional:
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceSamlConfigurationState struct {
	// The admin role values.
	AdminRoleValues pulumix.Input[[]string]
	// The allowed organizations.
	AllowedOrganizations pulumix.Input[[]string]
	// The editor role values.
	EditorRoleValues pulumix.Input[[]string]
	// The email assertion.
	EmailAssertion pulumix.Input[*string]
	// The groups assertion.
	GroupsAssertion pulumix.Input[*string]
	// The IDP Metadata URL. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataUrl pulumix.Input[*string]
	// The IDP Metadata XML. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataXml pulumix.Input[*string]
	// The login assertion.
	LoginAssertion pulumix.Input[*string]
	// The login validity duration.
	LoginValidityDuration pulumix.Input[*int]
	// The name assertion.
	NameAssertion pulumix.Input[*string]
	// The org assertion.
	OrgAssertion pulumix.Input[*string]
	// The role assertion.
	RoleAssertion pulumix.Input[*string]
	// The status of the SAML configuration.
	Status pulumix.Input[*string]
	// The workspace id.
	//
	// The following arguments are optional:
	WorkspaceId pulumix.Input[*string]
}

func (WorkspaceSamlConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceSamlConfigurationState)(nil)).Elem()
}

type workspaceSamlConfigurationArgs struct {
	// The admin role values.
	AdminRoleValues []string `pulumi:"adminRoleValues"`
	// The allowed organizations.
	AllowedOrganizations []string `pulumi:"allowedOrganizations"`
	// The editor role values.
	EditorRoleValues []string `pulumi:"editorRoleValues"`
	// The email assertion.
	EmailAssertion *string `pulumi:"emailAssertion"`
	// The groups assertion.
	GroupsAssertion *string `pulumi:"groupsAssertion"`
	// The IDP Metadata URL. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataUrl *string `pulumi:"idpMetadataUrl"`
	// The IDP Metadata XML. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataXml *string `pulumi:"idpMetadataXml"`
	// The login assertion.
	LoginAssertion *string `pulumi:"loginAssertion"`
	// The login validity duration.
	LoginValidityDuration *int `pulumi:"loginValidityDuration"`
	// The name assertion.
	NameAssertion *string `pulumi:"nameAssertion"`
	// The org assertion.
	OrgAssertion *string `pulumi:"orgAssertion"`
	// The role assertion.
	RoleAssertion *string `pulumi:"roleAssertion"`
	// The workspace id.
	//
	// The following arguments are optional:
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceSamlConfiguration resource.
type WorkspaceSamlConfigurationArgs struct {
	// The admin role values.
	AdminRoleValues pulumix.Input[[]string]
	// The allowed organizations.
	AllowedOrganizations pulumix.Input[[]string]
	// The editor role values.
	EditorRoleValues pulumix.Input[[]string]
	// The email assertion.
	EmailAssertion pulumix.Input[*string]
	// The groups assertion.
	GroupsAssertion pulumix.Input[*string]
	// The IDP Metadata URL. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataUrl pulumix.Input[*string]
	// The IDP Metadata XML. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
	IdpMetadataXml pulumix.Input[*string]
	// The login assertion.
	LoginAssertion pulumix.Input[*string]
	// The login validity duration.
	LoginValidityDuration pulumix.Input[*int]
	// The name assertion.
	NameAssertion pulumix.Input[*string]
	// The org assertion.
	OrgAssertion pulumix.Input[*string]
	// The role assertion.
	RoleAssertion pulumix.Input[*string]
	// The workspace id.
	//
	// The following arguments are optional:
	WorkspaceId pulumix.Input[string]
}

func (WorkspaceSamlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceSamlConfigurationArgs)(nil)).Elem()
}

type WorkspaceSamlConfigurationOutput struct{ *pulumi.OutputState }

func (WorkspaceSamlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceSamlConfiguration)(nil)).Elem()
}

func (o WorkspaceSamlConfigurationOutput) ToWorkspaceSamlConfigurationOutput() WorkspaceSamlConfigurationOutput {
	return o
}

func (o WorkspaceSamlConfigurationOutput) ToWorkspaceSamlConfigurationOutputWithContext(ctx context.Context) WorkspaceSamlConfigurationOutput {
	return o
}

func (o WorkspaceSamlConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceSamlConfiguration] {
	return pulumix.Output[WorkspaceSamlConfiguration]{
		OutputState: o.OutputState,
	}
}

// The admin role values.
func (o WorkspaceSamlConfigurationOutput) AdminRoleValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.ArrayOutput[string] { return v.AdminRoleValues })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The allowed organizations.
func (o WorkspaceSamlConfigurationOutput) AllowedOrganizations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.ArrayOutput[string] { return v.AllowedOrganizations })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The editor role values.
func (o WorkspaceSamlConfigurationOutput) EditorRoleValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.ArrayOutput[string] { return v.EditorRoleValues })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The email assertion.
func (o WorkspaceSamlConfigurationOutput) EmailAssertion() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[string] { return v.EmailAssertion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The groups assertion.
func (o WorkspaceSamlConfigurationOutput) GroupsAssertion() pulumix.Output[*string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[*string] { return v.GroupsAssertion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The IDP Metadata URL. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
func (o WorkspaceSamlConfigurationOutput) IdpMetadataUrl() pulumix.Output[*string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[*string] { return v.IdpMetadataUrl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The IDP Metadata XML. Note that either `idpMetadataUrl` or `idpMetadataXml` (but not both) must be specified.
func (o WorkspaceSamlConfigurationOutput) IdpMetadataXml() pulumix.Output[*string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[*string] { return v.IdpMetadataXml })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The login assertion.
func (o WorkspaceSamlConfigurationOutput) LoginAssertion() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[string] { return v.LoginAssertion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The login validity duration.
func (o WorkspaceSamlConfigurationOutput) LoginValidityDuration() pulumix.Output[int] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[int] { return v.LoginValidityDuration })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The name assertion.
func (o WorkspaceSamlConfigurationOutput) NameAssertion() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[string] { return v.NameAssertion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The org assertion.
func (o WorkspaceSamlConfigurationOutput) OrgAssertion() pulumix.Output[*string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[*string] { return v.OrgAssertion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The role assertion.
func (o WorkspaceSamlConfigurationOutput) RoleAssertion() pulumix.Output[*string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[*string] { return v.RoleAssertion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The status of the SAML configuration.
func (o WorkspaceSamlConfigurationOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The workspace id.
//
// The following arguments are optional:
func (o WorkspaceSamlConfigurationOutput) WorkspaceId() pulumix.Output[string] {
	value := pulumix.Apply[WorkspaceSamlConfiguration](o, func(v WorkspaceSamlConfiguration) pulumix.Output[string] { return v.WorkspaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceSamlConfigurationOutput{})
}
