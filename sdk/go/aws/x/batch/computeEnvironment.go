// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a AWS Batch compute environment. Compute environments contain the Amazon ECS container instances that are used to run containerized batch jobs.
//
// For information about AWS Batch, see [What is AWS Batch?](http://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html) .
// For information about compute environment, see [Compute Environments](http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) .
//
// > **Note:** To prevent a race condition during environment deletion, make sure to set `dependsOn` to the related `iam.RolePolicyAttachment`;
// otherwise, the policy may be destroyed too soon and the compute environment will then get stuck in the `DELETING` state, see [Troubleshooting AWS Batch](http://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html) .
type ComputeEnvironment struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the compute environment.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
	ComputeEnvironmentName pulumix.Output[string] `pulumi:"computeEnvironmentName"`
	// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `computeEnvironmentName`.
	ComputeEnvironmentNamePrefix pulumix.Output[string] `pulumi:"computeEnvironmentNamePrefix"`
	// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
	ComputeResources pulumix.GPtrOutput[ComputeEnvironmentComputeResources, ComputeEnvironmentComputeResourcesOutput] `pulumi:"computeResources"`
	// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
	EcsClusterArn pulumix.Output[string] `pulumi:"ecsClusterArn"`
	// Details for the Amazon EKS cluster that supports the compute environment. See details below.
	EksConfiguration pulumix.GPtrOutput[ComputeEnvironmentEksConfiguration, ComputeEnvironmentEksConfigurationOutput] `pulumi:"eksConfiguration"`
	// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole pulumix.Output[string] `pulumi:"serviceRole"`
	// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	State pulumix.Output[*string] `pulumi:"state"`
	// The current status of the compute environment (for example, CREATING or VALID).
	Status pulumix.Output[string] `pulumi:"status"`
	// A short, human-readable string to provide additional details about the current status of the compute environment.
	StatusReason pulumix.Output[string] `pulumi:"statusReason"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewComputeEnvironment registers a new resource with the given unique name, arguments, and options.
func NewComputeEnvironment(ctx *pulumi.Context,
	name string, args *ComputeEnvironmentArgs, opts ...pulumi.ResourceOption) (*ComputeEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeEnvironment
	err := ctx.RegisterResource("aws:batch/computeEnvironment:ComputeEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeEnvironment gets an existing ComputeEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeEnvironmentState, opts ...pulumi.ResourceOption) (*ComputeEnvironment, error) {
	var resource ComputeEnvironment
	err := ctx.ReadResource("aws:batch/computeEnvironment:ComputeEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeEnvironment resources.
type computeEnvironmentState struct {
	// The Amazon Resource Name (ARN) of the compute environment.
	Arn *string `pulumi:"arn"`
	// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
	ComputeEnvironmentName *string `pulumi:"computeEnvironmentName"`
	// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `computeEnvironmentName`.
	ComputeEnvironmentNamePrefix *string `pulumi:"computeEnvironmentNamePrefix"`
	// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
	ComputeResources *ComputeEnvironmentComputeResources `pulumi:"computeResources"`
	// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
	EcsClusterArn *string `pulumi:"ecsClusterArn"`
	// Details for the Amazon EKS cluster that supports the compute environment. See details below.
	EksConfiguration *ComputeEnvironmentEksConfiguration `pulumi:"eksConfiguration"`
	// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole *string `pulumi:"serviceRole"`
	// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	State *string `pulumi:"state"`
	// The current status of the compute environment (for example, CREATING or VALID).
	Status *string `pulumi:"status"`
	// A short, human-readable string to provide additional details about the current status of the compute environment.
	StatusReason *string `pulumi:"statusReason"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
	Type *string `pulumi:"type"`
}

type ComputeEnvironmentState struct {
	// The Amazon Resource Name (ARN) of the compute environment.
	Arn pulumix.Input[*string]
	// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
	ComputeEnvironmentName pulumix.Input[*string]
	// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `computeEnvironmentName`.
	ComputeEnvironmentNamePrefix pulumix.Input[*string]
	// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
	ComputeResources pulumix.Input[*ComputeEnvironmentComputeResourcesArgs]
	// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
	EcsClusterArn pulumix.Input[*string]
	// Details for the Amazon EKS cluster that supports the compute environment. See details below.
	EksConfiguration pulumix.Input[*ComputeEnvironmentEksConfigurationArgs]
	// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole pulumix.Input[*string]
	// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	State pulumix.Input[*string]
	// The current status of the compute environment (for example, CREATING or VALID).
	Status pulumix.Input[*string]
	// A short, human-readable string to provide additional details about the current status of the compute environment.
	StatusReason pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
	Type pulumix.Input[*string]
}

func (ComputeEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEnvironmentState)(nil)).Elem()
}

type computeEnvironmentArgs struct {
	// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
	ComputeEnvironmentName *string `pulumi:"computeEnvironmentName"`
	// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `computeEnvironmentName`.
	ComputeEnvironmentNamePrefix *string `pulumi:"computeEnvironmentNamePrefix"`
	// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
	ComputeResources *ComputeEnvironmentComputeResources `pulumi:"computeResources"`
	// Details for the Amazon EKS cluster that supports the compute environment. See details below.
	EksConfiguration *ComputeEnvironmentEksConfiguration `pulumi:"eksConfiguration"`
	// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole *string `pulumi:"serviceRole"`
	// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	State *string `pulumi:"state"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ComputeEnvironment resource.
type ComputeEnvironmentArgs struct {
	// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
	ComputeEnvironmentName pulumix.Input[*string]
	// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `computeEnvironmentName`.
	ComputeEnvironmentNamePrefix pulumix.Input[*string]
	// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
	ComputeResources pulumix.Input[*ComputeEnvironmentComputeResourcesArgs]
	// Details for the Amazon EKS cluster that supports the compute environment. See details below.
	EksConfiguration pulumix.Input[*ComputeEnvironmentEksConfigurationArgs]
	// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
	ServiceRole pulumix.Input[*string]
	// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
	State pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
	Type pulumix.Input[string]
}

func (ComputeEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEnvironmentArgs)(nil)).Elem()
}

type ComputeEnvironmentOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironment)(nil)).Elem()
}

func (o ComputeEnvironmentOutput) ToComputeEnvironmentOutput() ComputeEnvironmentOutput {
	return o
}

func (o ComputeEnvironmentOutput) ToComputeEnvironmentOutputWithContext(ctx context.Context) ComputeEnvironmentOutput {
	return o
}

func (o ComputeEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeEnvironment] {
	return pulumix.Output[ComputeEnvironment]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the compute environment.
func (o ComputeEnvironmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, the provider will assign a random, unique name.
func (o ComputeEnvironmentOutput) ComputeEnvironmentName() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.ComputeEnvironmentName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `computeEnvironmentName`.
func (o ComputeEnvironmentOutput) ComputeEnvironmentNamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.ComputeEnvironmentNamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
func (o ComputeEnvironmentOutput) ComputeResources() pulumix.GPtrOutput[ComputeEnvironmentComputeResources, ComputeEnvironmentComputeResourcesOutput] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.GPtrOutput[ComputeEnvironmentComputeResources, ComputeEnvironmentComputeResourcesOutput] {
		return v.ComputeResources
	})
	unwrapped := pulumix.Flatten[*ComputeEnvironmentComputeResources, pulumix.GPtrOutput[ComputeEnvironmentComputeResources, ComputeEnvironmentComputeResourcesOutput]](value)
	return pulumix.GPtrOutput[ComputeEnvironmentComputeResources, ComputeEnvironmentComputeResourcesOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
func (o ComputeEnvironmentOutput) EcsClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.EcsClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Details for the Amazon EKS cluster that supports the compute environment. See details below.
func (o ComputeEnvironmentOutput) EksConfiguration() pulumix.GPtrOutput[ComputeEnvironmentEksConfiguration, ComputeEnvironmentEksConfigurationOutput] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.GPtrOutput[ComputeEnvironmentEksConfiguration, ComputeEnvironmentEksConfigurationOutput] {
		return v.EksConfiguration
	})
	unwrapped := pulumix.Flatten[*ComputeEnvironmentEksConfiguration, pulumix.GPtrOutput[ComputeEnvironmentEksConfiguration, ComputeEnvironmentEksConfigurationOutput]](value)
	return pulumix.GPtrOutput[ComputeEnvironmentEksConfiguration, ComputeEnvironmentEksConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
func (o ComputeEnvironmentOutput) ServiceRole() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.ServiceRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
func (o ComputeEnvironmentOutput) State() pulumix.Output[*string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[*string] { return v.State })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The current status of the compute environment (for example, CREATING or VALID).
func (o ComputeEnvironmentOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A short, human-readable string to provide additional details about the current status of the compute environment.
func (o ComputeEnvironmentOutput) StatusReason() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.StatusReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ComputeEnvironmentOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ComputeEnvironmentOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of the compute environment. Valid items are `MANAGED` or `UNMANAGED`.
func (o ComputeEnvironmentOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[ComputeEnvironment](o, func(v ComputeEnvironment) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ComputeEnvironmentOutput{})
}
