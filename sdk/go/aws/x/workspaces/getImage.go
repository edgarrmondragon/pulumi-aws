// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a Workspaces image.
func GetImage(ctx *pulumi.Context, args *GetImageArgs, opts ...pulumi.InvokeOption) (*GetImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageResult
	err := ctx.Invoke("aws:workspaces/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type GetImageArgs struct {
	// ID of the image.
	ImageId string `pulumi:"imageId"`
}

// A collection of values returned by getImage.
type GetImageResult struct {
	// The description of the image.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	ImageId string `pulumi:"imageId"`
	// The name of the image.
	Name                string `pulumi:"name"`
	OperatingSystemType string `pulumi:"operatingSystemType"`
	// Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to DEDICATED. For more information, see [Bring Your Own Windows Desktop Images](https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html).
	RequiredTenancy string `pulumi:"requiredTenancy"`
	// The status of the image.
	State string `pulumi:"state"`
}

func GetImageOutput(ctx *pulumi.Context, args GetImageOutputArgs, opts ...pulumi.InvokeOption) GetImageResultOutput {
	outputResult := pulumix.ApplyErr[*GetImageArgs](args.ToOutput(), func(plainArgs *GetImageArgs) (*GetImageResult, error) {
		return GetImage(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetImageResultOutput, *GetImageResult](outputResult)
}

// A collection of arguments for invoking getImage.
type GetImageOutputArgs struct {
	// ID of the image.
	ImageId pulumix.Input[string] `pulumi:"imageId"`
}

func (args GetImageOutputArgs) ToOutput() pulumix.Output[*GetImageArgs] {
	allArgs := pulumix.All(
		args.ImageId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetImageArgs {
		return &GetImageArgs{
			ImageId: resolvedArgs[0].(string),
		}
	})
}

type GetImageResultOutput struct{ *pulumi.OutputState }

func (GetImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageResult)(nil)).Elem()
}

func (o GetImageResultOutput) ToOutput(context.Context) pulumix.Output[*GetImageResult] {
	return pulumix.Output[*GetImageResult]{
		OutputState: o.OutputState,
	}
}

func (o GetImageResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.Description })
}

func (o GetImageResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.Id })
}

func (o GetImageResultOutput) ImageId() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.ImageId })
}

func (o GetImageResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.Name })
}

func (o GetImageResultOutput) OperatingSystemType() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.OperatingSystemType })
}

func (o GetImageResultOutput) RequiredTenancy() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.RequiredTenancy })
}

func (o GetImageResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.State })
}
