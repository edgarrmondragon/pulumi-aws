// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon FSx for OpenZFS volume.
// See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
type OpenZfsVolume struct {
	pulumi.CustomResourceState

	// Amazon Resource Name of the file system.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToSnapshots pulumix.Output[*bool] `pulumi:"copyTagsToSnapshots"`
	// Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
	DataCompressionType pulumix.Output[*string] `pulumi:"dataCompressionType"`
	// The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
	Name pulumix.Output[string] `pulumi:"name"`
	// NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
	NfsExports pulumix.GPtrOutput[OpenZfsVolumeNfsExports, OpenZfsVolumeNfsExportsOutput] `pulumi:"nfsExports"`
	// The ARN of the source snapshot to create the volume from.
	OriginSnapshot pulumix.GPtrOutput[OpenZfsVolumeOriginSnapshot, OpenZfsVolumeOriginSnapshotOutput] `pulumi:"originSnapshot"`
	// The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `fsx.OpenZfsFileSystem` resource with the `rootVolumeId` or the `id` property of another `fsx.OpenZfsVolume`.
	ParentVolumeId pulumix.Output[string] `pulumi:"parentVolumeId"`
	// specifies whether the volume is read-only. Default is false.
	ReadOnly pulumix.Output[bool] `pulumi:"readOnly"`
	// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
	RecordSizeKib pulumix.Output[*int] `pulumi:"recordSizeKib"`
	// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
	StorageCapacityQuotaGib pulumix.Output[int] `pulumi:"storageCapacityQuotaGib"`
	// The amount of storage in gibibytes (GiB) to reserve from the parent volume.
	StorageCapacityReservationGib pulumix.Output[int] `pulumi:"storageCapacityReservationGib"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
	UserAndGroupQuotas pulumix.GArrayOutput[OpenZfsVolumeUserAndGroupQuota, OpenZfsVolumeUserAndGroupQuotaOutput] `pulumi:"userAndGroupQuotas"`
	VolumeType         pulumix.Output[*string]                                                                    `pulumi:"volumeType"`
}

// NewOpenZfsVolume registers a new resource with the given unique name, arguments, and options.
func NewOpenZfsVolume(ctx *pulumi.Context,
	name string, args *OpenZfsVolumeArgs, opts ...pulumi.ResourceOption) (*OpenZfsVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentVolumeId == nil {
		return nil, errors.New("invalid value for required argument 'ParentVolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenZfsVolume
	err := ctx.RegisterResource("aws:fsx/openZfsVolume:OpenZfsVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenZfsVolume gets an existing OpenZfsVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenZfsVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenZfsVolumeState, opts ...pulumi.ResourceOption) (*OpenZfsVolume, error) {
	var resource OpenZfsVolume
	err := ctx.ReadResource("aws:fsx/openZfsVolume:OpenZfsVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenZfsVolume resources.
type openZfsVolumeState struct {
	// Amazon Resource Name of the file system.
	Arn *string `pulumi:"arn"`
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToSnapshots *bool `pulumi:"copyTagsToSnapshots"`
	// Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
	DataCompressionType *string `pulumi:"dataCompressionType"`
	// The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
	Name *string `pulumi:"name"`
	// NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
	NfsExports *OpenZfsVolumeNfsExports `pulumi:"nfsExports"`
	// The ARN of the source snapshot to create the volume from.
	OriginSnapshot *OpenZfsVolumeOriginSnapshot `pulumi:"originSnapshot"`
	// The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `fsx.OpenZfsFileSystem` resource with the `rootVolumeId` or the `id` property of another `fsx.OpenZfsVolume`.
	ParentVolumeId *string `pulumi:"parentVolumeId"`
	// specifies whether the volume is read-only. Default is false.
	ReadOnly *bool `pulumi:"readOnly"`
	// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
	RecordSizeKib *int `pulumi:"recordSizeKib"`
	// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
	StorageCapacityQuotaGib *int `pulumi:"storageCapacityQuotaGib"`
	// The amount of storage in gibibytes (GiB) to reserve from the parent volume.
	StorageCapacityReservationGib *int `pulumi:"storageCapacityReservationGib"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
	UserAndGroupQuotas []OpenZfsVolumeUserAndGroupQuota `pulumi:"userAndGroupQuotas"`
	VolumeType         *string                          `pulumi:"volumeType"`
}

type OpenZfsVolumeState struct {
	// Amazon Resource Name of the file system.
	Arn pulumix.Input[*string]
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToSnapshots pulumix.Input[*bool]
	// Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
	DataCompressionType pulumix.Input[*string]
	// The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
	Name pulumix.Input[*string]
	// NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
	NfsExports pulumix.Input[*OpenZfsVolumeNfsExportsArgs]
	// The ARN of the source snapshot to create the volume from.
	OriginSnapshot pulumix.Input[*OpenZfsVolumeOriginSnapshotArgs]
	// The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `fsx.OpenZfsFileSystem` resource with the `rootVolumeId` or the `id` property of another `fsx.OpenZfsVolume`.
	ParentVolumeId pulumix.Input[*string]
	// specifies whether the volume is read-only. Default is false.
	ReadOnly pulumix.Input[*bool]
	// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
	RecordSizeKib pulumix.Input[*int]
	// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
	StorageCapacityQuotaGib pulumix.Input[*int]
	// The amount of storage in gibibytes (GiB) to reserve from the parent volume.
	StorageCapacityReservationGib pulumix.Input[*int]
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
	UserAndGroupQuotas pulumix.Input[[]*OpenZfsVolumeUserAndGroupQuotaArgs]
	VolumeType         pulumix.Input[*string]
}

func (OpenZfsVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsVolumeState)(nil)).Elem()
}

type openZfsVolumeArgs struct {
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToSnapshots *bool `pulumi:"copyTagsToSnapshots"`
	// Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
	DataCompressionType *string `pulumi:"dataCompressionType"`
	// The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
	Name *string `pulumi:"name"`
	// NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
	NfsExports *OpenZfsVolumeNfsExports `pulumi:"nfsExports"`
	// The ARN of the source snapshot to create the volume from.
	OriginSnapshot *OpenZfsVolumeOriginSnapshot `pulumi:"originSnapshot"`
	// The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `fsx.OpenZfsFileSystem` resource with the `rootVolumeId` or the `id` property of another `fsx.OpenZfsVolume`.
	ParentVolumeId string `pulumi:"parentVolumeId"`
	// specifies whether the volume is read-only. Default is false.
	ReadOnly *bool `pulumi:"readOnly"`
	// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
	RecordSizeKib *int `pulumi:"recordSizeKib"`
	// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
	StorageCapacityQuotaGib *int `pulumi:"storageCapacityQuotaGib"`
	// The amount of storage in gibibytes (GiB) to reserve from the parent volume.
	StorageCapacityReservationGib *int `pulumi:"storageCapacityReservationGib"`
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
	UserAndGroupQuotas []OpenZfsVolumeUserAndGroupQuota `pulumi:"userAndGroupQuotas"`
	VolumeType         *string                          `pulumi:"volumeType"`
}

// The set of arguments for constructing a OpenZfsVolume resource.
type OpenZfsVolumeArgs struct {
	// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
	CopyTagsToSnapshots pulumix.Input[*bool]
	// Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
	DataCompressionType pulumix.Input[*string]
	// The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
	Name pulumix.Input[*string]
	// NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
	NfsExports pulumix.Input[*OpenZfsVolumeNfsExportsArgs]
	// The ARN of the source snapshot to create the volume from.
	OriginSnapshot pulumix.Input[*OpenZfsVolumeOriginSnapshotArgs]
	// The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `fsx.OpenZfsFileSystem` resource with the `rootVolumeId` or the `id` property of another `fsx.OpenZfsVolume`.
	ParentVolumeId pulumix.Input[string]
	// specifies whether the volume is read-only. Default is false.
	ReadOnly pulumix.Input[*bool]
	// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
	RecordSizeKib pulumix.Input[*int]
	// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
	StorageCapacityQuotaGib pulumix.Input[*int]
	// The amount of storage in gibibytes (GiB) to reserve from the parent volume.
	StorageCapacityReservationGib pulumix.Input[*int]
	// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
	UserAndGroupQuotas pulumix.Input[[]*OpenZfsVolumeUserAndGroupQuotaArgs]
	VolumeType         pulumix.Input[*string]
}

func (OpenZfsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openZfsVolumeArgs)(nil)).Elem()
}

type OpenZfsVolumeOutput struct{ *pulumi.OutputState }

func (OpenZfsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenZfsVolume)(nil)).Elem()
}

func (o OpenZfsVolumeOutput) ToOpenZfsVolumeOutput() OpenZfsVolumeOutput {
	return o
}

func (o OpenZfsVolumeOutput) ToOpenZfsVolumeOutputWithContext(ctx context.Context) OpenZfsVolumeOutput {
	return o
}

func (o OpenZfsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[OpenZfsVolume] {
	return pulumix.Output[OpenZfsVolume]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name of the file system.
func (o OpenZfsVolumeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A boolean flag indicating whether tags for the file system should be copied to snapshots. The default value is false.
func (o OpenZfsVolumeOutput) CopyTagsToSnapshots() pulumix.Output[*bool] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[*bool] { return v.CopyTagsToSnapshots })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Method used to compress the data on the volume. Valid values are `NONE` or `ZSTD`. Child volumes that don't specify compression option will inherit from parent volume. This option on file system applies to the root volume.
func (o OpenZfsVolumeOutput) DataCompressionType() pulumix.Output[*string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[*string] { return v.DataCompressionType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the Volume. You can use a maximum of 203 alphanumeric characters, plus the underscore (_) special character.
func (o OpenZfsVolumeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// NFS export configuration for the root volume. Exactly 1 item. See NFS Exports Below.
func (o OpenZfsVolumeOutput) NfsExports() pulumix.GPtrOutput[OpenZfsVolumeNfsExports, OpenZfsVolumeNfsExportsOutput] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.GPtrOutput[OpenZfsVolumeNfsExports, OpenZfsVolumeNfsExportsOutput] {
		return v.NfsExports
	})
	unwrapped := pulumix.Flatten[*OpenZfsVolumeNfsExports, pulumix.GPtrOutput[OpenZfsVolumeNfsExports, OpenZfsVolumeNfsExportsOutput]](value)
	return pulumix.GPtrOutput[OpenZfsVolumeNfsExports, OpenZfsVolumeNfsExportsOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the source snapshot to create the volume from.
func (o OpenZfsVolumeOutput) OriginSnapshot() pulumix.GPtrOutput[OpenZfsVolumeOriginSnapshot, OpenZfsVolumeOriginSnapshotOutput] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.GPtrOutput[OpenZfsVolumeOriginSnapshot, OpenZfsVolumeOriginSnapshotOutput] {
		return v.OriginSnapshot
	})
	unwrapped := pulumix.Flatten[*OpenZfsVolumeOriginSnapshot, pulumix.GPtrOutput[OpenZfsVolumeOriginSnapshot, OpenZfsVolumeOriginSnapshotOutput]](value)
	return pulumix.GPtrOutput[OpenZfsVolumeOriginSnapshot, OpenZfsVolumeOriginSnapshotOutput]{OutputState: unwrapped.OutputState}
}

// The volume id of volume that will be the parent volume for the volume being created, this could be the root volume created from the `fsx.OpenZfsFileSystem` resource with the `rootVolumeId` or the `id` property of another `fsx.OpenZfsVolume`.
func (o OpenZfsVolumeOutput) ParentVolumeId() pulumix.Output[string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[string] { return v.ParentVolumeId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// specifies whether the volume is read-only. Default is false.
func (o OpenZfsVolumeOutput) ReadOnly() pulumix.Output[bool] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[bool] { return v.ReadOnly })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The record size of an OpenZFS volume, in kibibytes (KiB). Valid values are `4`, `8`, `16`, `32`, `64`, `128`, `256`, `512`, or `1024` KiB. The default is `128` KiB.
func (o OpenZfsVolumeOutput) RecordSizeKib() pulumix.Output[*int] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[*int] { return v.RecordSizeKib })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The maximum amount of storage in gibibytes (GiB) that the volume can use from its parent.
func (o OpenZfsVolumeOutput) StorageCapacityQuotaGib() pulumix.Output[int] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[int] { return v.StorageCapacityQuotaGib })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The amount of storage in gibibytes (GiB) to reserve from the parent volume.
func (o OpenZfsVolumeOutput) StorageCapacityReservationGib() pulumix.Output[int] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[int] { return v.StorageCapacityReservationGib })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A map of tags to assign to the file system. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o OpenZfsVolumeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o OpenZfsVolumeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specify how much storage users or groups can use on the volume. Maximum of 100 items. See User and Group Quotas Below.
func (o OpenZfsVolumeOutput) UserAndGroupQuotas() pulumix.GArrayOutput[OpenZfsVolumeUserAndGroupQuota, OpenZfsVolumeUserAndGroupQuotaOutput] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.GArrayOutput[OpenZfsVolumeUserAndGroupQuota, OpenZfsVolumeUserAndGroupQuotaOutput] {
		return v.UserAndGroupQuotas
	})
	unwrapped := pulumix.Flatten[[]OpenZfsVolumeUserAndGroupQuota, pulumix.GArrayOutput[OpenZfsVolumeUserAndGroupQuota, OpenZfsVolumeUserAndGroupQuotaOutput]](value)
	return pulumix.GArrayOutput[OpenZfsVolumeUserAndGroupQuota, OpenZfsVolumeUserAndGroupQuotaOutput]{OutputState: unwrapped.OutputState}
}

func (o OpenZfsVolumeOutput) VolumeType() pulumix.Output[*string] {
	value := pulumix.Apply[OpenZfsVolume](o, func(v OpenZfsVolume) pulumix.Output[*string] { return v.VolumeType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(OpenZfsVolumeOutput{})
}
