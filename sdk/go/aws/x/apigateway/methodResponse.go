// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an HTTP Method Response for an API Gateway Resource.
type MethodResponse struct {
	pulumi.CustomResourceState

	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumix.Output[string] `pulumi:"httpMethod"`
	// API resource ID
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// Map of the API models used for the response's content type
	ResponseModels pulumix.MapOutput[string] `pulumi:"responseModels"`
	// Map of response parameters that can be sent to the caller.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
	// would define that the header `X-Some-Header` can be provided on the response.
	ResponseParameters pulumix.MapOutput[bool] `pulumi:"responseParameters"`
	// ID of the associated REST API
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// HTTP status code
	StatusCode pulumix.Output[string] `pulumi:"statusCode"`
}

// NewMethodResponse registers a new resource with the given unique name, arguments, and options.
func NewMethodResponse(ctx *pulumi.Context,
	name string, args *MethodResponseArgs, opts ...pulumi.ResourceOption) (*MethodResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.StatusCode == nil {
		return nil, errors.New("invalid value for required argument 'StatusCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MethodResponse
	err := ctx.RegisterResource("aws:apigateway/methodResponse:MethodResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMethodResponse gets an existing MethodResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMethodResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MethodResponseState, opts ...pulumi.ResourceOption) (*MethodResponse, error) {
	var resource MethodResponse
	err := ctx.ReadResource("aws:apigateway/methodResponse:MethodResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MethodResponse resources.
type methodResponseState struct {
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod *string `pulumi:"httpMethod"`
	// API resource ID
	ResourceId *string `pulumi:"resourceId"`
	// Map of the API models used for the response's content type
	ResponseModels map[string]string `pulumi:"responseModels"`
	// Map of response parameters that can be sent to the caller.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
	// would define that the header `X-Some-Header` can be provided on the response.
	ResponseParameters map[string]bool `pulumi:"responseParameters"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// HTTP status code
	StatusCode *string `pulumi:"statusCode"`
}

type MethodResponseState struct {
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumix.Input[*string]
	// API resource ID
	ResourceId pulumix.Input[*string]
	// Map of the API models used for the response's content type
	ResponseModels pulumix.Input[map[string]string]
	// Map of response parameters that can be sent to the caller.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
	// would define that the header `X-Some-Header` can be provided on the response.
	ResponseParameters pulumix.Input[map[string]bool]
	// ID of the associated REST API
	RestApi pulumix.Input[*any]
	// HTTP status code
	StatusCode pulumix.Input[*string]
}

func (MethodResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*methodResponseState)(nil)).Elem()
}

type methodResponseArgs struct {
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod string `pulumi:"httpMethod"`
	// API resource ID
	ResourceId string `pulumi:"resourceId"`
	// Map of the API models used for the response's content type
	ResponseModels map[string]string `pulumi:"responseModels"`
	// Map of response parameters that can be sent to the caller.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
	// would define that the header `X-Some-Header` can be provided on the response.
	ResponseParameters map[string]bool `pulumi:"responseParameters"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// HTTP status code
	StatusCode string `pulumi:"statusCode"`
}

// The set of arguments for constructing a MethodResponse resource.
type MethodResponseArgs struct {
	// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
	HttpMethod pulumix.Input[string]
	// API resource ID
	ResourceId pulumix.Input[string]
	// Map of the API models used for the response's content type
	ResponseModels pulumix.Input[map[string]string]
	// Map of response parameters that can be sent to the caller.
	// For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
	// would define that the header `X-Some-Header` can be provided on the response.
	ResponseParameters pulumix.Input[map[string]bool]
	// ID of the associated REST API
	RestApi pulumix.Input[any]
	// HTTP status code
	StatusCode pulumix.Input[string]
}

func (MethodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*methodResponseArgs)(nil)).Elem()
}

type MethodResponseOutput struct{ *pulumi.OutputState }

func (MethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MethodResponse)(nil)).Elem()
}

func (o MethodResponseOutput) ToMethodResponseOutput() MethodResponseOutput {
	return o
}

func (o MethodResponseOutput) ToMethodResponseOutputWithContext(ctx context.Context) MethodResponseOutput {
	return o
}

func (o MethodResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MethodResponse] {
	return pulumix.Output[MethodResponse]{
		OutputState: o.OutputState,
	}
}

// HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
func (o MethodResponseOutput) HttpMethod() pulumix.Output[string] {
	value := pulumix.Apply[MethodResponse](o, func(v MethodResponse) pulumix.Output[string] { return v.HttpMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// API resource ID
func (o MethodResponseOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[MethodResponse](o, func(v MethodResponse) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of the API models used for the response's content type
func (o MethodResponseOutput) ResponseModels() pulumix.MapOutput[string] {
	value := pulumix.Apply[MethodResponse](o, func(v MethodResponse) pulumix.MapOutput[string] { return v.ResponseModels })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of response parameters that can be sent to the caller.
// For example: `responseParameters = { "method.response.header.X-Some-Header" = true }`
// would define that the header `X-Some-Header` can be provided on the response.
func (o MethodResponseOutput) ResponseParameters() pulumix.MapOutput[bool] {
	value := pulumix.Apply[MethodResponse](o, func(v MethodResponse) pulumix.MapOutput[bool] { return v.ResponseParameters })
	unwrapped := pulumix.Flatten[map[string]bool, pulumix.MapOutput[bool]](value)
	return pulumix.MapOutput[bool]{OutputState: unwrapped.OutputState}
}

// ID of the associated REST API
func (o MethodResponseOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[MethodResponse](o, func(v MethodResponse) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// HTTP status code
func (o MethodResponseOutput) StatusCode() pulumix.Output[string] {
	value := pulumix.Apply[MethodResponse](o, func(v MethodResponse) pulumix.Output[string] { return v.StatusCode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MethodResponseOutput{})
}
