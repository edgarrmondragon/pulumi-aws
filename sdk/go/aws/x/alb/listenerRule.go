// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Load Balancer Listener Rule resource.
//
// > **Note:** `alb.ListenerRule` is known as `lb.ListenerRule`. The functionality is identical.
type ListenerRule struct {
	pulumi.CustomResourceState

	// An Action block. Action blocks are documented below.
	Actions pulumix.GArrayOutput[ListenerRuleAction, ListenerRuleActionOutput] `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the target group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
	Conditions pulumix.GArrayOutput[ListenerRuleCondition, ListenerRuleConditionOutput] `pulumi:"conditions"`
	// The ARN of the listener to which to attach the rule.
	ListenerArn pulumix.Output[string] `pulumi:"listenerArn"`
	// The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
	Priority pulumix.Output[int] `pulumi:"priority"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewListenerRule registers a new resource with the given unique name, arguments, and options.
func NewListenerRule(ctx *pulumi.Context,
	name string, args *ListenerRuleArgs, opts ...pulumi.ResourceOption) (*ListenerRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.ListenerArn == nil {
		return nil, errors.New("invalid value for required argument 'ListenerArn'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:applicationloadbalancing/listenerRule:ListenerRule"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListenerRule
	err := ctx.RegisterResource("aws:alb/listenerRule:ListenerRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerRule gets an existing ListenerRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerRuleState, opts ...pulumi.ResourceOption) (*ListenerRule, error) {
	var resource ListenerRule
	err := ctx.ReadResource("aws:alb/listenerRule:ListenerRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerRule resources.
type listenerRuleState struct {
	// An Action block. Action blocks are documented below.
	Actions []ListenerRuleAction `pulumi:"actions"`
	// The Amazon Resource Name (ARN) of the target group.
	Arn *string `pulumi:"arn"`
	// A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
	Conditions []ListenerRuleCondition `pulumi:"conditions"`
	// The ARN of the listener to which to attach the rule.
	ListenerArn *string `pulumi:"listenerArn"`
	// The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
	Priority *int `pulumi:"priority"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ListenerRuleState struct {
	// An Action block. Action blocks are documented below.
	Actions pulumix.Input[[]*ListenerRuleActionArgs]
	// The Amazon Resource Name (ARN) of the target group.
	Arn pulumix.Input[*string]
	// A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
	Conditions pulumix.Input[[]*ListenerRuleConditionArgs]
	// The ARN of the listener to which to attach the rule.
	ListenerArn pulumix.Input[*string]
	// The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
	Priority pulumix.Input[*int]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ListenerRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerRuleState)(nil)).Elem()
}

type listenerRuleArgs struct {
	// An Action block. Action blocks are documented below.
	Actions []ListenerRuleAction `pulumi:"actions"`
	// A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
	Conditions []ListenerRuleCondition `pulumi:"conditions"`
	// The ARN of the listener to which to attach the rule.
	ListenerArn string `pulumi:"listenerArn"`
	// The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
	Priority *int `pulumi:"priority"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ListenerRule resource.
type ListenerRuleArgs struct {
	// An Action block. Action blocks are documented below.
	Actions pulumix.Input[[]*ListenerRuleActionArgs]
	// A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
	Conditions pulumix.Input[[]*ListenerRuleConditionArgs]
	// The ARN of the listener to which to attach the rule.
	ListenerArn pulumix.Input[string]
	// The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
	Priority pulumix.Input[*int]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ListenerRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerRuleArgs)(nil)).Elem()
}

type ListenerRuleOutput struct{ *pulumi.OutputState }

func (ListenerRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRule)(nil)).Elem()
}

func (o ListenerRuleOutput) ToListenerRuleOutput() ListenerRuleOutput {
	return o
}

func (o ListenerRuleOutput) ToListenerRuleOutputWithContext(ctx context.Context) ListenerRuleOutput {
	return o
}

func (o ListenerRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRule] {
	return pulumix.Output[ListenerRule]{
		OutputState: o.OutputState,
	}
}

// An Action block. Action blocks are documented below.
func (o ListenerRuleOutput) Actions() pulumix.GArrayOutput[ListenerRuleAction, ListenerRuleActionOutput] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.GArrayOutput[ListenerRuleAction, ListenerRuleActionOutput] {
		return v.Actions
	})
	unwrapped := pulumix.Flatten[[]ListenerRuleAction, pulumix.GArrayOutput[ListenerRuleAction, ListenerRuleActionOutput]](value)
	return pulumix.GArrayOutput[ListenerRuleAction, ListenerRuleActionOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the target group.
func (o ListenerRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A Condition block. Multiple condition blocks of different types can be set and all must be satisfied for the rule to match. Condition blocks are documented below.
func (o ListenerRuleOutput) Conditions() pulumix.GArrayOutput[ListenerRuleCondition, ListenerRuleConditionOutput] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.GArrayOutput[ListenerRuleCondition, ListenerRuleConditionOutput] {
		return v.Conditions
	})
	unwrapped := pulumix.Flatten[[]ListenerRuleCondition, pulumix.GArrayOutput[ListenerRuleCondition, ListenerRuleConditionOutput]](value)
	return pulumix.GArrayOutput[ListenerRuleCondition, ListenerRuleConditionOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the listener to which to attach the rule.
func (o ListenerRuleOutput) ListenerArn() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.ListenerArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The priority for the rule between `1` and `50000`. Leaving it unset will automatically set the rule with next available priority after currently existing highest rule. A listener can't have multiple rules with the same priority.
func (o ListenerRuleOutput) Priority() pulumix.Output[int] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[int] { return v.Priority })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ListenerRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ListenerRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ListenerRuleOutput{})
}
