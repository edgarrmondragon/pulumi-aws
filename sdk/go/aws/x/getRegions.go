// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about AWS Regions. Can be used to filter regions i.e., by Opt-In status or only regions enabled for current account. To get details like endpoint and description of each region the data source can be combined with the `getRegion` data source.
func GetRegions(ctx *pulumi.Context, args *GetRegionsArgs, opts ...pulumi.InvokeOption) (*GetRegionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegionsResult
	err := ctx.Invoke("aws:index/getRegions:getRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegions.
type GetRegionsArgs struct {
	// If true the source will query all regions regardless of availability.
	AllRegions *bool `pulumi:"allRegions"`
	// Configuration block(s) to use as filters. Detailed below.
	Filters []GetRegionsFilter `pulumi:"filters"`
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Id *string `pulumi:"id"`
}

// A collection of values returned by getRegions.
type GetRegionsResult struct {
	AllRegions *bool              `pulumi:"allRegions"`
	Filters    []GetRegionsFilter `pulumi:"filters"`
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Id string `pulumi:"id"`
	// Names of regions that meets the criteria.
	Names []string `pulumi:"names"`
}

func GetRegionsOutput(ctx *pulumi.Context, args GetRegionsOutputArgs, opts ...pulumi.InvokeOption) GetRegionsResultOutput {
	outputResult := pulumix.ApplyErr[*GetRegionsArgs](args.ToOutput(), func(plainArgs *GetRegionsArgs) (*GetRegionsResult, error) {
		return GetRegions(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetRegionsResultOutput, *GetRegionsResult](outputResult)
}

// A collection of arguments for invoking getRegions.
type GetRegionsOutputArgs struct {
	// If true the source will query all regions regardless of availability.
	AllRegions pulumix.Input[*bool] `pulumi:"allRegions"`
	// Configuration block(s) to use as filters. Detailed below.
	Filters pulumix.Input[[]*GetRegionsFilterArgs] `pulumi:"filters"`
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (args GetRegionsOutputArgs) ToOutput() pulumix.Output[*GetRegionsArgs] {
	allArgs := pulumix.All(
		args.AllRegions.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetRegionsArgs {
		return &GetRegionsArgs{
			AllRegions: resolvedArgs[0].(*bool),
			Filters:    resolvedArgs[1].([]GetRegionsFilter),
			Id:         resolvedArgs[2].(*string),
		}
	})
}

type GetRegionsResultOutput struct{ *pulumi.OutputState }

func (GetRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsResult)(nil)).Elem()
}

func (o GetRegionsResultOutput) ToOutput(context.Context) pulumix.Output[*GetRegionsResult] {
	return pulumix.Output[*GetRegionsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetRegionsResultOutput) AllRegions() pulumix.Output[*bool] {
	return pulumix.Apply[*GetRegionsResult](o, func(v *GetRegionsResult) *bool { return v.AllRegions })
}

func (o GetRegionsResultOutput) Filters() pulumix.GArrayOutput[GetRegionsFilter, GetRegionsFilterOutput] {
	value := pulumix.Apply[*GetRegionsResult](o, func(v *GetRegionsResult) []GetRegionsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetRegionsFilter, GetRegionsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetRegionsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetRegionsResult](o, func(v *GetRegionsResult) string { return v.Id })
}

func (o GetRegionsResultOutput) Names() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetRegionsResult](o, func(v *GetRegionsResult) []string { return v.Names })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
