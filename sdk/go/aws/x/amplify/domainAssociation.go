// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amplify Domain Association resource.
type DomainAssociation struct {
	pulumi.CustomResourceState

	// Unique ID for an Amplify app.
	AppId pulumix.Output[string] `pulumi:"appId"`
	// ARN for the domain association.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The DNS record for certificate verification.
	CertificateVerificationDnsRecord pulumix.Output[string] `pulumi:"certificateVerificationDnsRecord"`
	// Domain name for the domain association.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain pulumix.Output[*bool] `pulumi:"enableAutoSubDomain"`
	// Setting for the subdomain. Documented below.
	SubDomains pulumix.GArrayOutput[DomainAssociationSubDomain, DomainAssociationSubDomainOutput] `pulumi:"subDomains"`
	// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
	WaitForVerification pulumix.Output[*bool] `pulumi:"waitForVerification"`
}

// NewDomainAssociation registers a new resource with the given unique name, arguments, and options.
func NewDomainAssociation(ctx *pulumi.Context,
	name string, args *DomainAssociationArgs, opts ...pulumi.ResourceOption) (*DomainAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.SubDomains == nil {
		return nil, errors.New("invalid value for required argument 'SubDomains'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainAssociation
	err := ctx.RegisterResource("aws:amplify/domainAssociation:DomainAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainAssociation gets an existing DomainAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainAssociationState, opts ...pulumi.ResourceOption) (*DomainAssociation, error) {
	var resource DomainAssociation
	err := ctx.ReadResource("aws:amplify/domainAssociation:DomainAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainAssociation resources.
type domainAssociationState struct {
	// Unique ID for an Amplify app.
	AppId *string `pulumi:"appId"`
	// ARN for the domain association.
	Arn *string `pulumi:"arn"`
	// The DNS record for certificate verification.
	CertificateVerificationDnsRecord *string `pulumi:"certificateVerificationDnsRecord"`
	// Domain name for the domain association.
	DomainName *string `pulumi:"domainName"`
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain *bool `pulumi:"enableAutoSubDomain"`
	// Setting for the subdomain. Documented below.
	SubDomains []DomainAssociationSubDomain `pulumi:"subDomains"`
	// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
	WaitForVerification *bool `pulumi:"waitForVerification"`
}

type DomainAssociationState struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[*string]
	// ARN for the domain association.
	Arn pulumix.Input[*string]
	// The DNS record for certificate verification.
	CertificateVerificationDnsRecord pulumix.Input[*string]
	// Domain name for the domain association.
	DomainName pulumix.Input[*string]
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain pulumix.Input[*bool]
	// Setting for the subdomain. Documented below.
	SubDomains pulumix.Input[[]*DomainAssociationSubDomainArgs]
	// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
	WaitForVerification pulumix.Input[*bool]
}

func (DomainAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainAssociationState)(nil)).Elem()
}

type domainAssociationArgs struct {
	// Unique ID for an Amplify app.
	AppId string `pulumi:"appId"`
	// Domain name for the domain association.
	DomainName string `pulumi:"domainName"`
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain *bool `pulumi:"enableAutoSubDomain"`
	// Setting for the subdomain. Documented below.
	SubDomains []DomainAssociationSubDomain `pulumi:"subDomains"`
	// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
	WaitForVerification *bool `pulumi:"waitForVerification"`
}

// The set of arguments for constructing a DomainAssociation resource.
type DomainAssociationArgs struct {
	// Unique ID for an Amplify app.
	AppId pulumix.Input[string]
	// Domain name for the domain association.
	DomainName pulumix.Input[string]
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain pulumix.Input[*bool]
	// Setting for the subdomain. Documented below.
	SubDomains pulumix.Input[[]*DomainAssociationSubDomainArgs]
	// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
	WaitForVerification pulumix.Input[*bool]
}

func (DomainAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainAssociationArgs)(nil)).Elem()
}

type DomainAssociationOutput struct{ *pulumi.OutputState }

func (DomainAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAssociation)(nil)).Elem()
}

func (o DomainAssociationOutput) ToDomainAssociationOutput() DomainAssociationOutput {
	return o
}

func (o DomainAssociationOutput) ToDomainAssociationOutputWithContext(ctx context.Context) DomainAssociationOutput {
	return o
}

func (o DomainAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAssociation] {
	return pulumix.Output[DomainAssociation]{
		OutputState: o.OutputState,
	}
}

// Unique ID for an Amplify app.
func (o DomainAssociationOutput) AppId() pulumix.Output[string] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.Output[string] { return v.AppId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN for the domain association.
func (o DomainAssociationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The DNS record for certificate verification.
func (o DomainAssociationOutput) CertificateVerificationDnsRecord() pulumix.Output[string] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.Output[string] { return v.CertificateVerificationDnsRecord })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Domain name for the domain association.
func (o DomainAssociationOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Enables the automated creation of subdomains for branches.
func (o DomainAssociationOutput) EnableAutoSubDomain() pulumix.Output[*bool] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.Output[*bool] { return v.EnableAutoSubDomain })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Setting for the subdomain. Documented below.
func (o DomainAssociationOutput) SubDomains() pulumix.GArrayOutput[DomainAssociationSubDomain, DomainAssociationSubDomainOutput] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.GArrayOutput[DomainAssociationSubDomain, DomainAssociationSubDomainOutput] {
		return v.SubDomains
	})
	unwrapped := pulumix.Flatten[[]DomainAssociationSubDomain, pulumix.GArrayOutput[DomainAssociationSubDomain, DomainAssociationSubDomainOutput]](value)
	return pulumix.GArrayOutput[DomainAssociationSubDomain, DomainAssociationSubDomainOutput]{OutputState: unwrapped.OutputState}
}

// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
func (o DomainAssociationOutput) WaitForVerification() pulumix.Output[*bool] {
	value := pulumix.Apply[DomainAssociation](o, func(v DomainAssociation) pulumix.Output[*bool] { return v.WaitForVerification })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainAssociationOutput{})
}
