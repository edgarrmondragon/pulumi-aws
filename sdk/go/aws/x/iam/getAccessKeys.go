// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about IAM access keys of a
// specific IAM user.
func GetAccessKeys(ctx *pulumi.Context, args *GetAccessKeysArgs, opts ...pulumi.InvokeOption) (*GetAccessKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAccessKeysResult
	err := ctx.Invoke("aws:iam/getAccessKeys:getAccessKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessKeys.
type GetAccessKeysArgs struct {
	// Name of the IAM user associated with the access keys.
	User string `pulumi:"user"`
}

// A collection of values returned by getAccessKeys.
type GetAccessKeysResult struct {
	// List of the IAM access keys associated with the specified user. See below.
	AccessKeys []GetAccessKeysAccessKey `pulumi:"accessKeys"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	User string `pulumi:"user"`
}

func GetAccessKeysOutput(ctx *pulumi.Context, args GetAccessKeysOutputArgs, opts ...pulumi.InvokeOption) GetAccessKeysResultOutput {
	outputResult := pulumix.ApplyErr[*GetAccessKeysArgs](args.ToOutput(), func(plainArgs *GetAccessKeysArgs) (*GetAccessKeysResult, error) {
		return GetAccessKeys(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetAccessKeysResultOutput, *GetAccessKeysResult](outputResult)
}

// A collection of arguments for invoking getAccessKeys.
type GetAccessKeysOutputArgs struct {
	// Name of the IAM user associated with the access keys.
	User pulumix.Input[string] `pulumi:"user"`
}

func (args GetAccessKeysOutputArgs) ToOutput() pulumix.Output[*GetAccessKeysArgs] {
	allArgs := pulumix.All(
		args.User.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetAccessKeysArgs {
		return &GetAccessKeysArgs{
			User: resolvedArgs[0].(string),
		}
	})
}

type GetAccessKeysResultOutput struct{ *pulumi.OutputState }

func (GetAccessKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysResult)(nil)).Elem()
}

func (o GetAccessKeysResultOutput) ToOutput(context.Context) pulumix.Output[*GetAccessKeysResult] {
	return pulumix.Output[*GetAccessKeysResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAccessKeysResultOutput) AccessKeys() pulumix.GArrayOutput[GetAccessKeysAccessKey, GetAccessKeysAccessKeyOutput] {
	value := pulumix.Apply[*GetAccessKeysResult](o, func(v *GetAccessKeysResult) []GetAccessKeysAccessKey { return v.AccessKeys })
	return pulumix.GArrayOutput[GetAccessKeysAccessKey, GetAccessKeysAccessKeyOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetAccessKeysResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetAccessKeysResult](o, func(v *GetAccessKeysResult) string { return v.Id })
}

func (o GetAccessKeysResultOutput) User() pulumix.Output[string] {
	return pulumix.Apply[*GetAccessKeysResult](o, func(v *GetAccessKeysResult) string { return v.User })
}
