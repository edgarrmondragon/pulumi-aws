// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Network Firewall Rule Group Resource
type RuleGroup struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that identifies the rule group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
	Capacity pulumix.Output[int] `pulumi:"capacity"`
	// A friendly description of the rule group.
	Description pulumix.Output[*string] `pulumi:"description"`
	// KMS encryption configuration settings. See Encryption Configuration below for details.
	EncryptionConfiguration pulumix.GPtrOutput[RuleGroupEncryptionConfiguration, RuleGroupEncryptionConfigurationOutput] `pulumi:"encryptionConfiguration"`
	// A friendly name of the rule group.
	Name pulumix.Output[string] `pulumi:"name"`
	// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
	RuleGroup pulumix.GPtrOutput[RuleGroupRuleGroup, RuleGroupRuleGroupOutput] `pulumi:"ruleGroup"`
	// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `ruleGroup` is specified.
	Rules pulumix.Output[*string] `pulumi:"rules"`
	// A map of key:value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
	Type pulumix.Output[string] `pulumi:"type"`
	// A string token used when updating the rule group.
	UpdateToken pulumix.Output[string] `pulumi:"updateToken"`
}

// NewRuleGroup registers a new resource with the given unique name, arguments, and options.
func NewRuleGroup(ctx *pulumi.Context,
	name string, args *RuleGroupArgs, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleGroup
	err := ctx.RegisterResource("aws:networkfirewall/ruleGroup:RuleGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleGroup gets an existing RuleGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleGroupState, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	var resource RuleGroup
	err := ctx.ReadResource("aws:networkfirewall/ruleGroup:RuleGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleGroup resources.
type ruleGroupState struct {
	// The Amazon Resource Name (ARN) that identifies the rule group.
	Arn *string `pulumi:"arn"`
	// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
	Capacity *int `pulumi:"capacity"`
	// A friendly description of the rule group.
	Description *string `pulumi:"description"`
	// KMS encryption configuration settings. See Encryption Configuration below for details.
	EncryptionConfiguration *RuleGroupEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// A friendly name of the rule group.
	Name *string `pulumi:"name"`
	// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
	RuleGroup *RuleGroupRuleGroup `pulumi:"ruleGroup"`
	// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `ruleGroup` is specified.
	Rules *string `pulumi:"rules"`
	// A map of key:value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
	Type *string `pulumi:"type"`
	// A string token used when updating the rule group.
	UpdateToken *string `pulumi:"updateToken"`
}

type RuleGroupState struct {
	// The Amazon Resource Name (ARN) that identifies the rule group.
	Arn pulumix.Input[*string]
	// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
	Capacity pulumix.Input[*int]
	// A friendly description of the rule group.
	Description pulumix.Input[*string]
	// KMS encryption configuration settings. See Encryption Configuration below for details.
	EncryptionConfiguration pulumix.Input[*RuleGroupEncryptionConfigurationArgs]
	// A friendly name of the rule group.
	Name pulumix.Input[*string]
	// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
	RuleGroup pulumix.Input[*RuleGroupRuleGroupArgs]
	// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `ruleGroup` is specified.
	Rules pulumix.Input[*string]
	// A map of key:value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
	Type pulumix.Input[*string]
	// A string token used when updating the rule group.
	UpdateToken pulumix.Input[*string]
}

func (RuleGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupState)(nil)).Elem()
}

type ruleGroupArgs struct {
	// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
	Capacity int `pulumi:"capacity"`
	// A friendly description of the rule group.
	Description *string `pulumi:"description"`
	// KMS encryption configuration settings. See Encryption Configuration below for details.
	EncryptionConfiguration *RuleGroupEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// A friendly name of the rule group.
	Name *string `pulumi:"name"`
	// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
	RuleGroup *RuleGroupRuleGroup `pulumi:"ruleGroup"`
	// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `ruleGroup` is specified.
	Rules *string `pulumi:"rules"`
	// A map of key:value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a RuleGroup resource.
type RuleGroupArgs struct {
	// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
	Capacity pulumix.Input[int]
	// A friendly description of the rule group.
	Description pulumix.Input[*string]
	// KMS encryption configuration settings. See Encryption Configuration below for details.
	EncryptionConfiguration pulumix.Input[*RuleGroupEncryptionConfigurationArgs]
	// A friendly name of the rule group.
	Name pulumix.Input[*string]
	// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
	RuleGroup pulumix.Input[*RuleGroupRuleGroupArgs]
	// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `ruleGroup` is specified.
	Rules pulumix.Input[*string]
	// A map of key:value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
	Type pulumix.Input[string]
}

func (RuleGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupArgs)(nil)).Elem()
}

type RuleGroupOutput struct{ *pulumi.OutputState }

func (RuleGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroup)(nil)).Elem()
}

func (o RuleGroupOutput) ToRuleGroupOutput() RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToRuleGroupOutputWithContext(ctx context.Context) RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToOutput(ctx context.Context) pulumix.Output[RuleGroup] {
	return pulumix.Output[RuleGroup]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) that identifies the rule group.
func (o RuleGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
func (o RuleGroupOutput) Capacity() pulumix.Output[int] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[int] { return v.Capacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A friendly description of the rule group.
func (o RuleGroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// KMS encryption configuration settings. See Encryption Configuration below for details.
func (o RuleGroupOutput) EncryptionConfiguration() pulumix.GPtrOutput[RuleGroupEncryptionConfiguration, RuleGroupEncryptionConfigurationOutput] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.GPtrOutput[RuleGroupEncryptionConfiguration, RuleGroupEncryptionConfigurationOutput] {
		return v.EncryptionConfiguration
	})
	unwrapped := pulumix.Flatten[*RuleGroupEncryptionConfiguration, pulumix.GPtrOutput[RuleGroupEncryptionConfiguration, RuleGroupEncryptionConfigurationOutput]](value)
	return pulumix.GPtrOutput[RuleGroupEncryptionConfiguration, RuleGroupEncryptionConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// A friendly name of the rule group.
func (o RuleGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
func (o RuleGroupOutput) RuleGroup() pulumix.GPtrOutput[RuleGroupRuleGroup, RuleGroupRuleGroupOutput] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.GPtrOutput[RuleGroupRuleGroup, RuleGroupRuleGroupOutput] { return v.RuleGroup })
	unwrapped := pulumix.Flatten[*RuleGroupRuleGroup, pulumix.GPtrOutput[RuleGroupRuleGroup, RuleGroupRuleGroupOutput]](value)
	return pulumix.GPtrOutput[RuleGroupRuleGroup, RuleGroupRuleGroupOutput]{OutputState: unwrapped.OutputState}
}

// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `ruleGroup` is specified.
func (o RuleGroupOutput) Rules() pulumix.Output[*string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[*string] { return v.Rules })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of key:value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RuleGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RuleGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
func (o RuleGroupOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A string token used when updating the rule group.
func (o RuleGroupOutput) UpdateToken() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.UpdateToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RuleGroupOutput{})
}
