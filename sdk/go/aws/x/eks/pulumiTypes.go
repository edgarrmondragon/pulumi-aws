// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterCertificateAuthority struct {
	// Base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data *string `pulumi:"data"`
}

type ClusterCertificateAuthorityArgs struct {
	// Base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data pulumix.Input[*string] `pulumi:"data"`
}

func (ClusterCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateAuthority)(nil)).Elem()
}

func (i ClusterCertificateAuthorityArgs) ToClusterCertificateAuthorityOutput() ClusterCertificateAuthorityOutput {
	return i.ToClusterCertificateAuthorityOutputWithContext(context.Background())
}

func (i ClusterCertificateAuthorityArgs) ToClusterCertificateAuthorityOutputWithContext(ctx context.Context) ClusterCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateAuthorityOutput)
}

func (i *ClusterCertificateAuthorityArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCertificateAuthorityArgs] {
	return pulumix.Val(i)
}

type ClusterCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ClusterCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateAuthority)(nil)).Elem()
}

func (o ClusterCertificateAuthorityOutput) ToClusterCertificateAuthorityOutput() ClusterCertificateAuthorityOutput {
	return o
}

func (o ClusterCertificateAuthorityOutput) ToClusterCertificateAuthorityOutputWithContext(ctx context.Context) ClusterCertificateAuthorityOutput {
	return o
}

func (o ClusterCertificateAuthorityOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCertificateAuthority] {
	return pulumix.Output[ClusterCertificateAuthority]{
		OutputState: o.OutputState,
	}
}

// Base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
func (o ClusterCertificateAuthorityOutput) Data() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCertificateAuthority](o, func(v ClusterCertificateAuthority) *string { return v.Data })
}

type ClusterEncryptionConfig struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider ClusterEncryptionConfigProvider `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`.
	Resources []string `pulumi:"resources"`
}

type ClusterEncryptionConfigArgs struct {
	// Configuration block with provider for encryption. Detailed below.
	Provider pulumix.Input[*ClusterEncryptionConfigProviderArgs] `pulumi:"provider"`
	// List of strings with resources to be encrypted. Valid values: `secrets`.
	Resources pulumix.Input[[]string] `pulumi:"resources"`
}

func (ClusterEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return i.ToClusterEncryptionConfigOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigOutput)
}

func (i *ClusterEncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionConfigArgs] {
	return pulumix.Val(i)
}

type ClusterEncryptionConfigOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionConfig] {
	return pulumix.Output[ClusterEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration block with provider for encryption. Detailed below.
func (o ClusterEncryptionConfigOutput) Provider() pulumix.GPtrOutput[ClusterEncryptionConfigProvider, ClusterEncryptionConfigProviderOutput] {
	value := pulumix.Apply[ClusterEncryptionConfig](o, func(v ClusterEncryptionConfig) ClusterEncryptionConfigProvider { return v.Provider })
	return pulumix.GPtrOutput[ClusterEncryptionConfigProvider, ClusterEncryptionConfigProviderOutput]{OutputState: value.OutputState}
}

// List of strings with resources to be encrypted. Valid values: `secrets`.
func (o ClusterEncryptionConfigOutput) Resources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterEncryptionConfig](o, func(v ClusterEncryptionConfig) []string { return v.Resources })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClusterEncryptionConfigProvider struct {
	// ARN of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn string `pulumi:"keyArn"`
}

type ClusterEncryptionConfigProviderArgs struct {
	// ARN of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
	KeyArn pulumix.Input[string] `pulumi:"keyArn"`
}

func (ClusterEncryptionConfigProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigProvider)(nil)).Elem()
}

func (i ClusterEncryptionConfigProviderArgs) ToClusterEncryptionConfigProviderOutput() ClusterEncryptionConfigProviderOutput {
	return i.ToClusterEncryptionConfigProviderOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigProviderArgs) ToClusterEncryptionConfigProviderOutputWithContext(ctx context.Context) ClusterEncryptionConfigProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigProviderOutput)
}

func (i *ClusterEncryptionConfigProviderArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionConfigProviderArgs] {
	return pulumix.Val(i)
}

type ClusterEncryptionConfigProviderOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfigProvider)(nil)).Elem()
}

func (o ClusterEncryptionConfigProviderOutput) ToClusterEncryptionConfigProviderOutput() ClusterEncryptionConfigProviderOutput {
	return o
}

func (o ClusterEncryptionConfigProviderOutput) ToClusterEncryptionConfigProviderOutputWithContext(ctx context.Context) ClusterEncryptionConfigProviderOutput {
	return o
}

func (o ClusterEncryptionConfigProviderOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionConfigProvider] {
	return pulumix.Output[ClusterEncryptionConfigProvider]{
		OutputState: o.OutputState,
	}
}

// ARN of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
func (o ClusterEncryptionConfigProviderOutput) KeyArn() pulumix.Output[string] {
	return pulumix.Apply[ClusterEncryptionConfigProvider](o, func(v ClusterEncryptionConfigProvider) string { return v.KeyArn })
}

type ClusterIdentity struct {
	// Nested block containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster. Detailed below.
	Oidcs []ClusterIdentityOidc `pulumi:"oidcs"`
}

type ClusterIdentityArgs struct {
	// Nested block containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster. Detailed below.
	Oidcs pulumix.Input[[]*ClusterIdentityOidcArgs] `pulumi:"oidcs"`
}

func (ClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentity)(nil)).Elem()
}

func (i ClusterIdentityArgs) ToClusterIdentityOutput() ClusterIdentityOutput {
	return i.ToClusterIdentityOutputWithContext(context.Background())
}

func (i ClusterIdentityArgs) ToClusterIdentityOutputWithContext(ctx context.Context) ClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOutput)
}

func (i *ClusterIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterIdentityArgs] {
	return pulumix.Val(i)
}

type ClusterIdentityOutput struct{ *pulumi.OutputState }

func (ClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentity)(nil)).Elem()
}

func (o ClusterIdentityOutput) ToClusterIdentityOutput() ClusterIdentityOutput {
	return o
}

func (o ClusterIdentityOutput) ToClusterIdentityOutputWithContext(ctx context.Context) ClusterIdentityOutput {
	return o
}

func (o ClusterIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterIdentity] {
	return pulumix.Output[ClusterIdentity]{
		OutputState: o.OutputState,
	}
}

// Nested block containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster. Detailed below.
func (o ClusterIdentityOutput) Oidcs() pulumix.GArrayOutput[ClusterIdentityOidc, ClusterIdentityOidcOutput] {
	value := pulumix.Apply[ClusterIdentity](o, func(v ClusterIdentity) []ClusterIdentityOidc { return v.Oidcs })
	return pulumix.GArrayOutput[ClusterIdentityOidc, ClusterIdentityOidcOutput]{OutputState: value.OutputState}
}

type ClusterIdentityOidc struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer *string `pulumi:"issuer"`
}

type ClusterIdentityOidcArgs struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer pulumix.Input[*string] `pulumi:"issuer"`
}

func (ClusterIdentityOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityOidc)(nil)).Elem()
}

func (i ClusterIdentityOidcArgs) ToClusterIdentityOidcOutput() ClusterIdentityOidcOutput {
	return i.ToClusterIdentityOidcOutputWithContext(context.Background())
}

func (i ClusterIdentityOidcArgs) ToClusterIdentityOidcOutputWithContext(ctx context.Context) ClusterIdentityOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOidcOutput)
}

func (i *ClusterIdentityOidcArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterIdentityOidcArgs] {
	return pulumix.Val(i)
}

type ClusterIdentityOidcOutput struct{ *pulumi.OutputState }

func (ClusterIdentityOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityOidc)(nil)).Elem()
}

func (o ClusterIdentityOidcOutput) ToClusterIdentityOidcOutput() ClusterIdentityOidcOutput {
	return o
}

func (o ClusterIdentityOidcOutput) ToClusterIdentityOidcOutputWithContext(ctx context.Context) ClusterIdentityOidcOutput {
	return o
}

func (o ClusterIdentityOidcOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterIdentityOidc] {
	return pulumix.Output[ClusterIdentityOidc]{
		OutputState: o.OutputState,
	}
}

// Issuer URL for the OpenID Connect identity provider.
func (o ClusterIdentityOidcOutput) Issuer() pulumix.Output[*string] {
	return pulumix.Apply[ClusterIdentityOidc](o, func(v ClusterIdentityOidc) *string { return v.Issuer })
}

type ClusterKubernetesNetworkConfig struct {
	// The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
	IpFamily *string `pulumi:"ipFamily"`
	// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
	//
	// * Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
	//
	// * Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.
	//
	// * Between /24 and /12.
	ServiceIpv4Cidr *string `pulumi:"serviceIpv4Cidr"`
	ServiceIpv6Cidr *string `pulumi:"serviceIpv6Cidr"`
}

type ClusterKubernetesNetworkConfigArgs struct {
	// The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
	IpFamily pulumix.Input[*string] `pulumi:"ipFamily"`
	// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
	//
	// * Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
	//
	// * Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.
	//
	// * Between /24 and /12.
	ServiceIpv4Cidr pulumix.Input[*string] `pulumi:"serviceIpv4Cidr"`
	ServiceIpv6Cidr pulumix.Input[*string] `pulumi:"serviceIpv6Cidr"`
}

func (ClusterKubernetesNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (i ClusterKubernetesNetworkConfigArgs) ToClusterKubernetesNetworkConfigOutput() ClusterKubernetesNetworkConfigOutput {
	return i.ToClusterKubernetesNetworkConfigOutputWithContext(context.Background())
}

func (i ClusterKubernetesNetworkConfigArgs) ToClusterKubernetesNetworkConfigOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubernetesNetworkConfigOutput)
}

func (i *ClusterKubernetesNetworkConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterKubernetesNetworkConfigArgs] {
	return pulumix.Val(i)
}

type ClusterKubernetesNetworkConfigOutput struct{ *pulumi.OutputState }

func (ClusterKubernetesNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (o ClusterKubernetesNetworkConfigOutput) ToClusterKubernetesNetworkConfigOutput() ClusterKubernetesNetworkConfigOutput {
	return o
}

func (o ClusterKubernetesNetworkConfigOutput) ToClusterKubernetesNetworkConfigOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigOutput {
	return o
}

func (o ClusterKubernetesNetworkConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterKubernetesNetworkConfig] {
	return pulumix.Output[ClusterKubernetesNetworkConfig]{
		OutputState: o.OutputState,
	}
}

// The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
func (o ClusterKubernetesNetworkConfigOutput) IpFamily() pulumix.Output[*string] {
	return pulumix.Apply[ClusterKubernetesNetworkConfig](o, func(v ClusterKubernetesNetworkConfig) *string { return v.IpFamily })
}

// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
//
// * Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
//
// * Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.
//
// * Between /24 and /12.
func (o ClusterKubernetesNetworkConfigOutput) ServiceIpv4Cidr() pulumix.Output[*string] {
	return pulumix.Apply[ClusterKubernetesNetworkConfig](o, func(v ClusterKubernetesNetworkConfig) *string { return v.ServiceIpv4Cidr })
}

func (o ClusterKubernetesNetworkConfigOutput) ServiceIpv6Cidr() pulumix.Output[*string] {
	return pulumix.Apply[ClusterKubernetesNetworkConfig](o, func(v ClusterKubernetesNetworkConfig) *string { return v.ServiceIpv6Cidr })
}

type ClusterOutpostConfig struct {
	// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. Choose an instance type based on the number of nodes that your cluster will have. If your cluster will have:
	//
	// * 1–20 nodes, then we recommend specifying a large instance type.
	//
	// * 21–100 nodes, then we recommend specifying an xlarge instance type.
	//
	// * 101–250 nodes, then we recommend specifying a 2xlarge instance type.
	//
	// For a list of the available Amazon EC2 instance types, see Compute and storage in AWS Outposts rack features  The control plane is not automatically scaled by Amazon EKS.
	ControlPlaneInstanceType string `pulumi:"controlPlaneInstanceType"`
	// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
	// The `controlPlanePlacement` configuration block supports the following arguments:
	ControlPlanePlacement *ClusterOutpostConfigControlPlanePlacement `pulumi:"controlPlanePlacement"`
	// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. This argument is a list of arns, but only a single Outpost ARN is supported currently.
	OutpostArns []string `pulumi:"outpostArns"`
}

type ClusterOutpostConfigArgs struct {
	// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. Choose an instance type based on the number of nodes that your cluster will have. If your cluster will have:
	//
	// * 1–20 nodes, then we recommend specifying a large instance type.
	//
	// * 21–100 nodes, then we recommend specifying an xlarge instance type.
	//
	// * 101–250 nodes, then we recommend specifying a 2xlarge instance type.
	//
	// For a list of the available Amazon EC2 instance types, see Compute and storage in AWS Outposts rack features  The control plane is not automatically scaled by Amazon EKS.
	ControlPlaneInstanceType pulumix.Input[string] `pulumi:"controlPlaneInstanceType"`
	// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
	// The `controlPlanePlacement` configuration block supports the following arguments:
	ControlPlanePlacement pulumix.Input[*ClusterOutpostConfigControlPlanePlacementArgs] `pulumi:"controlPlanePlacement"`
	// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. This argument is a list of arns, but only a single Outpost ARN is supported currently.
	OutpostArns pulumix.Input[[]string] `pulumi:"outpostArns"`
}

func (ClusterOutpostConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutpostConfig)(nil)).Elem()
}

func (i ClusterOutpostConfigArgs) ToClusterOutpostConfigOutput() ClusterOutpostConfigOutput {
	return i.ToClusterOutpostConfigOutputWithContext(context.Background())
}

func (i ClusterOutpostConfigArgs) ToClusterOutpostConfigOutputWithContext(ctx context.Context) ClusterOutpostConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutpostConfigOutput)
}

func (i *ClusterOutpostConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterOutpostConfigArgs] {
	return pulumix.Val(i)
}

type ClusterOutpostConfigOutput struct{ *pulumi.OutputState }

func (ClusterOutpostConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutpostConfig)(nil)).Elem()
}

func (o ClusterOutpostConfigOutput) ToClusterOutpostConfigOutput() ClusterOutpostConfigOutput {
	return o
}

func (o ClusterOutpostConfigOutput) ToClusterOutpostConfigOutputWithContext(ctx context.Context) ClusterOutpostConfigOutput {
	return o
}

func (o ClusterOutpostConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOutpostConfig] {
	return pulumix.Output[ClusterOutpostConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. Choose an instance type based on the number of nodes that your cluster will have. If your cluster will have:
//
// * 1–20 nodes, then we recommend specifying a large instance type.
//
// * 21–100 nodes, then we recommend specifying an xlarge instance type.
//
// * 101–250 nodes, then we recommend specifying a 2xlarge instance type.
//
// For a list of the available Amazon EC2 instance types, see Compute and storage in AWS Outposts rack features  The control plane is not automatically scaled by Amazon EKS.
func (o ClusterOutpostConfigOutput) ControlPlaneInstanceType() pulumix.Output[string] {
	return pulumix.Apply[ClusterOutpostConfig](o, func(v ClusterOutpostConfig) string { return v.ControlPlaneInstanceType })
}

// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
// The `controlPlanePlacement` configuration block supports the following arguments:
func (o ClusterOutpostConfigOutput) ControlPlanePlacement() pulumix.GPtrOutput[ClusterOutpostConfigControlPlanePlacement, ClusterOutpostConfigControlPlanePlacementOutput] {
	value := pulumix.Apply[ClusterOutpostConfig](o, func(v ClusterOutpostConfig) *ClusterOutpostConfigControlPlanePlacement {
		return v.ControlPlanePlacement
	})
	return pulumix.GPtrOutput[ClusterOutpostConfigControlPlanePlacement, ClusterOutpostConfigControlPlanePlacementOutput]{OutputState: value.OutputState}
}

// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. This argument is a list of arns, but only a single Outpost ARN is supported currently.
func (o ClusterOutpostConfigOutput) OutpostArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterOutpostConfig](o, func(v ClusterOutpostConfig) []string { return v.OutpostArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ClusterOutpostConfigControlPlanePlacement struct {
	// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
	GroupName string `pulumi:"groupName"`
}

type ClusterOutpostConfigControlPlanePlacementArgs struct {
	// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
	GroupName pulumix.Input[string] `pulumi:"groupName"`
}

func (ClusterOutpostConfigControlPlanePlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutpostConfigControlPlanePlacement)(nil)).Elem()
}

func (i ClusterOutpostConfigControlPlanePlacementArgs) ToClusterOutpostConfigControlPlanePlacementOutput() ClusterOutpostConfigControlPlanePlacementOutput {
	return i.ToClusterOutpostConfigControlPlanePlacementOutputWithContext(context.Background())
}

func (i ClusterOutpostConfigControlPlanePlacementArgs) ToClusterOutpostConfigControlPlanePlacementOutputWithContext(ctx context.Context) ClusterOutpostConfigControlPlanePlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutpostConfigControlPlanePlacementOutput)
}

func (i *ClusterOutpostConfigControlPlanePlacementArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterOutpostConfigControlPlanePlacementArgs] {
	return pulumix.Val(i)
}

type ClusterOutpostConfigControlPlanePlacementOutput struct{ *pulumi.OutputState }

func (ClusterOutpostConfigControlPlanePlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutpostConfigControlPlanePlacement)(nil)).Elem()
}

func (o ClusterOutpostConfigControlPlanePlacementOutput) ToClusterOutpostConfigControlPlanePlacementOutput() ClusterOutpostConfigControlPlanePlacementOutput {
	return o
}

func (o ClusterOutpostConfigControlPlanePlacementOutput) ToClusterOutpostConfigControlPlanePlacementOutputWithContext(ctx context.Context) ClusterOutpostConfigControlPlanePlacementOutput {
	return o
}

func (o ClusterOutpostConfigControlPlanePlacementOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOutpostConfigControlPlanePlacement] {
	return pulumix.Output[ClusterOutpostConfigControlPlanePlacement]{
		OutputState: o.OutputState,
	}
}

// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
func (o ClusterOutpostConfigControlPlanePlacementOutput) GroupName() pulumix.Output[string] {
	return pulumix.Apply[ClusterOutpostConfigControlPlanePlacement](o, func(v ClusterOutpostConfigControlPlanePlacement) string { return v.GroupName })
}

type ClusterVpcConfig struct {
	// Cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
	ClusterSecurityGroupId *string `pulumi:"clusterSecurityGroupId"`
	// Whether the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess *bool `pulumi:"endpointPrivateAccess"`
	// Whether the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess *bool `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. The provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC associated with your cluster.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterVpcConfigArgs struct {
	// Cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
	ClusterSecurityGroupId pulumix.Input[*string] `pulumi:"clusterSecurityGroupId"`
	// Whether the Amazon EKS private API server endpoint is enabled. Default is `false`.
	EndpointPrivateAccess pulumix.Input[*bool] `pulumi:"endpointPrivateAccess"`
	// Whether the Amazon EKS public API server endpoint is enabled. Default is `true`.
	EndpointPublicAccess pulumix.Input[*bool] `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. The provider will only perform drift detection of its value when present in a configuration.
	PublicAccessCidrs pulumix.Input[[]string] `pulumi:"publicAccessCidrs"`
	// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// ID of the VPC associated with your cluster.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (ClusterVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfig)(nil)).Elem()
}

func (i ClusterVpcConfigArgs) ToClusterVpcConfigOutput() ClusterVpcConfigOutput {
	return i.ToClusterVpcConfigOutputWithContext(context.Background())
}

func (i ClusterVpcConfigArgs) ToClusterVpcConfigOutputWithContext(ctx context.Context) ClusterVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConfigOutput)
}

func (i *ClusterVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConfigArgs] {
	return pulumix.Val(i)
}

type ClusterVpcConfigOutput struct{ *pulumi.OutputState }

func (ClusterVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConfig)(nil)).Elem()
}

func (o ClusterVpcConfigOutput) ToClusterVpcConfigOutput() ClusterVpcConfigOutput {
	return o
}

func (o ClusterVpcConfigOutput) ToClusterVpcConfigOutputWithContext(ctx context.Context) ClusterVpcConfigOutput {
	return o
}

func (o ClusterVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConfig] {
	return pulumix.Output[ClusterVpcConfig]{
		OutputState: o.OutputState,
	}
}

// Cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
func (o ClusterVpcConfigOutput) ClusterSecurityGroupId() pulumix.Output[*string] {
	return pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) *string { return v.ClusterSecurityGroupId })
}

// Whether the Amazon EKS private API server endpoint is enabled. Default is `false`.
func (o ClusterVpcConfigOutput) EndpointPrivateAccess() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) *bool { return v.EndpointPrivateAccess })
}

// Whether the Amazon EKS public API server endpoint is enabled. Default is `true`.
func (o ClusterVpcConfigOutput) EndpointPublicAccess() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) *bool { return v.EndpointPublicAccess })
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. The provider will only perform drift detection of its value when present in a configuration.
func (o ClusterVpcConfigOutput) PublicAccessCidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) []string { return v.PublicAccessCidrs })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
func (o ClusterVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ID of the VPC associated with your cluster.
func (o ClusterVpcConfigOutput) VpcId() pulumix.Output[*string] {
	return pulumix.Apply[ClusterVpcConfig](o, func(v ClusterVpcConfig) *string { return v.VpcId })
}

type FargateProfileSelector struct {
	// Key-value map of Kubernetes labels for selection.
	Labels map[string]string `pulumi:"labels"`
	// Kubernetes namespace for selection.
	//
	// The following arguments are optional:
	Namespace string `pulumi:"namespace"`
}

type FargateProfileSelectorArgs struct {
	// Key-value map of Kubernetes labels for selection.
	Labels pulumix.Input[map[string]string] `pulumi:"labels"`
	// Kubernetes namespace for selection.
	//
	// The following arguments are optional:
	Namespace pulumix.Input[string] `pulumi:"namespace"`
}

func (FargateProfileSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return i.ToFargateProfileSelectorOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorOutput)
}

func (i *FargateProfileSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[*FargateProfileSelectorArgs] {
	return pulumix.Val(i)
}

type FargateProfileSelectorOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return o
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return o
}

func (o FargateProfileSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[FargateProfileSelector] {
	return pulumix.Output[FargateProfileSelector]{
		OutputState: o.OutputState,
	}
}

// Key-value map of Kubernetes labels for selection.
func (o FargateProfileSelectorOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[FargateProfileSelector](o, func(v FargateProfileSelector) map[string]string { return v.Labels })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Kubernetes namespace for selection.
//
// The following arguments are optional:
func (o FargateProfileSelectorOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[FargateProfileSelector](o, func(v FargateProfileSelector) string { return v.Namespace })
}

type IdentityProviderConfigOidc struct {
	// Client ID for the OpenID Connect identity provider.
	ClientId string `pulumi:"clientId"`
	// The JWT claim that the provider will use to return groups.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// A prefix that is prepended to group claims e.g., `oidc:`.
	GroupsPrefix *string `pulumi:"groupsPrefix"`
	// The name of the identity provider config.
	IdentityProviderConfigName string `pulumi:"identityProviderConfigName"`
	// Issuer URL for the OpenID Connect identity provider.
	IssuerUrl string `pulumi:"issuerUrl"`
	// The key value pairs that describe required claims in the identity token.
	RequiredClaims map[string]string `pulumi:"requiredClaims"`
	// The JWT claim that the provider will use as the username.
	UsernameClaim *string `pulumi:"usernameClaim"`
	// A prefix that is prepended to username claims.
	UsernamePrefix *string `pulumi:"usernamePrefix"`
}

type IdentityProviderConfigOidcArgs struct {
	// Client ID for the OpenID Connect identity provider.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The JWT claim that the provider will use to return groups.
	GroupsClaim pulumix.Input[*string] `pulumi:"groupsClaim"`
	// A prefix that is prepended to group claims e.g., `oidc:`.
	GroupsPrefix pulumix.Input[*string] `pulumi:"groupsPrefix"`
	// The name of the identity provider config.
	IdentityProviderConfigName pulumix.Input[string] `pulumi:"identityProviderConfigName"`
	// Issuer URL for the OpenID Connect identity provider.
	IssuerUrl pulumix.Input[string] `pulumi:"issuerUrl"`
	// The key value pairs that describe required claims in the identity token.
	RequiredClaims pulumix.Input[map[string]string] `pulumi:"requiredClaims"`
	// The JWT claim that the provider will use as the username.
	UsernameClaim pulumix.Input[*string] `pulumi:"usernameClaim"`
	// A prefix that is prepended to username claims.
	UsernamePrefix pulumix.Input[*string] `pulumi:"usernamePrefix"`
}

func (IdentityProviderConfigOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderConfigOidc)(nil)).Elem()
}

func (i IdentityProviderConfigOidcArgs) ToIdentityProviderConfigOidcOutput() IdentityProviderConfigOidcOutput {
	return i.ToIdentityProviderConfigOidcOutputWithContext(context.Background())
}

func (i IdentityProviderConfigOidcArgs) ToIdentityProviderConfigOidcOutputWithContext(ctx context.Context) IdentityProviderConfigOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConfigOidcOutput)
}

func (i *IdentityProviderConfigOidcArgs) ToOutput(ctx context.Context) pulumix.Output[*IdentityProviderConfigOidcArgs] {
	return pulumix.Val(i)
}

type IdentityProviderConfigOidcOutput struct{ *pulumi.OutputState }

func (IdentityProviderConfigOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderConfigOidc)(nil)).Elem()
}

func (o IdentityProviderConfigOidcOutput) ToIdentityProviderConfigOidcOutput() IdentityProviderConfigOidcOutput {
	return o
}

func (o IdentityProviderConfigOidcOutput) ToIdentityProviderConfigOidcOutputWithContext(ctx context.Context) IdentityProviderConfigOidcOutput {
	return o
}

func (o IdentityProviderConfigOidcOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityProviderConfigOidc] {
	return pulumix.Output[IdentityProviderConfigOidc]{
		OutputState: o.OutputState,
	}
}

// Client ID for the OpenID Connect identity provider.
func (o IdentityProviderConfigOidcOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) string { return v.ClientId })
}

// The JWT claim that the provider will use to return groups.
func (o IdentityProviderConfigOidcOutput) GroupsClaim() pulumix.Output[*string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) *string { return v.GroupsClaim })
}

// A prefix that is prepended to group claims e.g., `oidc:`.
func (o IdentityProviderConfigOidcOutput) GroupsPrefix() pulumix.Output[*string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) *string { return v.GroupsPrefix })
}

// The name of the identity provider config.
func (o IdentityProviderConfigOidcOutput) IdentityProviderConfigName() pulumix.Output[string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) string { return v.IdentityProviderConfigName })
}

// Issuer URL for the OpenID Connect identity provider.
func (o IdentityProviderConfigOidcOutput) IssuerUrl() pulumix.Output[string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) string { return v.IssuerUrl })
}

// The key value pairs that describe required claims in the identity token.
func (o IdentityProviderConfigOidcOutput) RequiredClaims() pulumix.MapOutput[string] {
	value := pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) map[string]string { return v.RequiredClaims })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The JWT claim that the provider will use as the username.
func (o IdentityProviderConfigOidcOutput) UsernameClaim() pulumix.Output[*string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) *string { return v.UsernameClaim })
}

// A prefix that is prepended to username claims.
func (o IdentityProviderConfigOidcOutput) UsernamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[IdentityProviderConfigOidc](o, func(v IdentityProviderConfigOidc) *string { return v.UsernamePrefix })
}

type NodeGroupLaunchTemplate struct {
	// Identifier of the EC2 Launch Template. Conflicts with `name`.
	Id *string `pulumi:"id"`
	// Name of the EC2 Launch Template. Conflicts with `id`.
	Name *string `pulumi:"name"`
	// EC2 Launch Template version number. While the API accepts values like `$Default` and `$Latest`, the API will convert the value to the associated version number (e.g., `1`) on read and the provider will show a difference on next plan. Using the `defaultVersion` or `latestVersion` attribute of the `ec2.LaunchTemplate` resource or data source is recommended for this argument.
	Version string `pulumi:"version"`
}

type NodeGroupLaunchTemplateArgs struct {
	// Identifier of the EC2 Launch Template. Conflicts with `name`.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Name of the EC2 Launch Template. Conflicts with `id`.
	Name pulumix.Input[*string] `pulumi:"name"`
	// EC2 Launch Template version number. While the API accepts values like `$Default` and `$Latest`, the API will convert the value to the associated version number (e.g., `1`) on read and the provider will show a difference on next plan. Using the `defaultVersion` or `latestVersion` attribute of the `ec2.LaunchTemplate` resource or data source is recommended for this argument.
	Version pulumix.Input[string] `pulumi:"version"`
}

func (NodeGroupLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupLaunchTemplate)(nil)).Elem()
}

func (i NodeGroupLaunchTemplateArgs) ToNodeGroupLaunchTemplateOutput() NodeGroupLaunchTemplateOutput {
	return i.ToNodeGroupLaunchTemplateOutputWithContext(context.Background())
}

func (i NodeGroupLaunchTemplateArgs) ToNodeGroupLaunchTemplateOutputWithContext(ctx context.Context) NodeGroupLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupLaunchTemplateOutput)
}

func (i *NodeGroupLaunchTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupLaunchTemplateArgs] {
	return pulumix.Val(i)
}

type NodeGroupLaunchTemplateOutput struct{ *pulumi.OutputState }

func (NodeGroupLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupLaunchTemplate)(nil)).Elem()
}

func (o NodeGroupLaunchTemplateOutput) ToNodeGroupLaunchTemplateOutput() NodeGroupLaunchTemplateOutput {
	return o
}

func (o NodeGroupLaunchTemplateOutput) ToNodeGroupLaunchTemplateOutputWithContext(ctx context.Context) NodeGroupLaunchTemplateOutput {
	return o
}

func (o NodeGroupLaunchTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupLaunchTemplate] {
	return pulumix.Output[NodeGroupLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

// Identifier of the EC2 Launch Template. Conflicts with `name`.
func (o NodeGroupLaunchTemplateOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[NodeGroupLaunchTemplate](o, func(v NodeGroupLaunchTemplate) *string { return v.Id })
}

// Name of the EC2 Launch Template. Conflicts with `id`.
func (o NodeGroupLaunchTemplateOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[NodeGroupLaunchTemplate](o, func(v NodeGroupLaunchTemplate) *string { return v.Name })
}

// EC2 Launch Template version number. While the API accepts values like `$Default` and `$Latest`, the API will convert the value to the associated version number (e.g., `1`) on read and the provider will show a difference on next plan. Using the `defaultVersion` or `latestVersion` attribute of the `ec2.LaunchTemplate` resource or data source is recommended for this argument.
func (o NodeGroupLaunchTemplateOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[NodeGroupLaunchTemplate](o, func(v NodeGroupLaunchTemplate) string { return v.Version })
}

type NodeGroupRemoteAccess struct {
	// EC2 Key Pair name that provides access for remote communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, either port 3389 for Windows, or port 22 for all other operating systems is opened on the worker nodes to the Internet (0.0.0.0/0). For Windows nodes, this will allow you to use RDP, for all others this allows you to SSH into the worker nodes.
	Ec2SshKey *string `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds []string `pulumi:"sourceSecurityGroupIds"`
}

type NodeGroupRemoteAccessArgs struct {
	// EC2 Key Pair name that provides access for remote communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, either port 3389 for Windows, or port 22 for all other operating systems is opened on the worker nodes to the Internet (0.0.0.0/0). For Windows nodes, this will allow you to use RDP, for all others this allows you to SSH into the worker nodes.
	Ec2SshKey pulumix.Input[*string] `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
	SourceSecurityGroupIds pulumix.Input[[]string] `pulumi:"sourceSecurityGroupIds"`
}

func (NodeGroupRemoteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccess)(nil)).Elem()
}

func (i NodeGroupRemoteAccessArgs) ToNodeGroupRemoteAccessOutput() NodeGroupRemoteAccessOutput {
	return i.ToNodeGroupRemoteAccessOutputWithContext(context.Background())
}

func (i NodeGroupRemoteAccessArgs) ToNodeGroupRemoteAccessOutputWithContext(ctx context.Context) NodeGroupRemoteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupRemoteAccessOutput)
}

func (i *NodeGroupRemoteAccessArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupRemoteAccessArgs] {
	return pulumix.Val(i)
}

type NodeGroupRemoteAccessOutput struct{ *pulumi.OutputState }

func (NodeGroupRemoteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupRemoteAccess)(nil)).Elem()
}

func (o NodeGroupRemoteAccessOutput) ToNodeGroupRemoteAccessOutput() NodeGroupRemoteAccessOutput {
	return o
}

func (o NodeGroupRemoteAccessOutput) ToNodeGroupRemoteAccessOutputWithContext(ctx context.Context) NodeGroupRemoteAccessOutput {
	return o
}

func (o NodeGroupRemoteAccessOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupRemoteAccess] {
	return pulumix.Output[NodeGroupRemoteAccess]{
		OutputState: o.OutputState,
	}
}

// EC2 Key Pair name that provides access for remote communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, either port 3389 for Windows, or port 22 for all other operating systems is opened on the worker nodes to the Internet (0.0.0.0/0). For Windows nodes, this will allow you to use RDP, for all others this allows you to SSH into the worker nodes.
func (o NodeGroupRemoteAccessOutput) Ec2SshKey() pulumix.Output[*string] {
	return pulumix.Apply[NodeGroupRemoteAccess](o, func(v NodeGroupRemoteAccess) *string { return v.Ec2SshKey })
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
func (o NodeGroupRemoteAccessOutput) SourceSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NodeGroupRemoteAccess](o, func(v NodeGroupRemoteAccess) []string { return v.SourceSecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type NodeGroupResource struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups []NodeGroupResourceAutoscalingGroup `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId *string `pulumi:"remoteAccessSecurityGroupId"`
}

type NodeGroupResourceArgs struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups pulumix.Input[[]*NodeGroupResourceAutoscalingGroupArgs] `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId pulumix.Input[*string] `pulumi:"remoteAccessSecurityGroupId"`
}

func (NodeGroupResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResource)(nil)).Elem()
}

func (i NodeGroupResourceArgs) ToNodeGroupResourceOutput() NodeGroupResourceOutput {
	return i.ToNodeGroupResourceOutputWithContext(context.Background())
}

func (i NodeGroupResourceArgs) ToNodeGroupResourceOutputWithContext(ctx context.Context) NodeGroupResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceOutput)
}

func (i *NodeGroupResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupResourceArgs] {
	return pulumix.Val(i)
}

type NodeGroupResourceOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResource)(nil)).Elem()
}

func (o NodeGroupResourceOutput) ToNodeGroupResourceOutput() NodeGroupResourceOutput {
	return o
}

func (o NodeGroupResourceOutput) ToNodeGroupResourceOutputWithContext(ctx context.Context) NodeGroupResourceOutput {
	return o
}

func (o NodeGroupResourceOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupResource] {
	return pulumix.Output[NodeGroupResource]{
		OutputState: o.OutputState,
	}
}

// List of objects containing information about AutoScaling Groups.
func (o NodeGroupResourceOutput) AutoscalingGroups() pulumix.GArrayOutput[NodeGroupResourceAutoscalingGroup, NodeGroupResourceAutoscalingGroupOutput] {
	value := pulumix.Apply[NodeGroupResource](o, func(v NodeGroupResource) []NodeGroupResourceAutoscalingGroup { return v.AutoscalingGroups })
	return pulumix.GArrayOutput[NodeGroupResourceAutoscalingGroup, NodeGroupResourceAutoscalingGroupOutput]{OutputState: value.OutputState}
}

// Identifier of the remote access EC2 Security Group.
func (o NodeGroupResourceOutput) RemoteAccessSecurityGroupId() pulumix.Output[*string] {
	return pulumix.Apply[NodeGroupResource](o, func(v NodeGroupResource) *string { return v.RemoteAccessSecurityGroupId })
}

type NodeGroupResourceAutoscalingGroup struct {
	// Name of the EC2 Launch Template. Conflicts with `id`.
	Name *string `pulumi:"name"`
}

type NodeGroupResourceAutoscalingGroupArgs struct {
	// Name of the EC2 Launch Template. Conflicts with `id`.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (NodeGroupResourceAutoscalingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (i NodeGroupResourceAutoscalingGroupArgs) ToNodeGroupResourceAutoscalingGroupOutput() NodeGroupResourceAutoscalingGroupOutput {
	return i.ToNodeGroupResourceAutoscalingGroupOutputWithContext(context.Background())
}

func (i NodeGroupResourceAutoscalingGroupArgs) ToNodeGroupResourceAutoscalingGroupOutputWithContext(ctx context.Context) NodeGroupResourceAutoscalingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupResourceAutoscalingGroupOutput)
}

func (i *NodeGroupResourceAutoscalingGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupResourceAutoscalingGroupArgs] {
	return pulumix.Val(i)
}

type NodeGroupResourceAutoscalingGroupOutput struct{ *pulumi.OutputState }

func (NodeGroupResourceAutoscalingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (o NodeGroupResourceAutoscalingGroupOutput) ToNodeGroupResourceAutoscalingGroupOutput() NodeGroupResourceAutoscalingGroupOutput {
	return o
}

func (o NodeGroupResourceAutoscalingGroupOutput) ToNodeGroupResourceAutoscalingGroupOutputWithContext(ctx context.Context) NodeGroupResourceAutoscalingGroupOutput {
	return o
}

func (o NodeGroupResourceAutoscalingGroupOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupResourceAutoscalingGroup] {
	return pulumix.Output[NodeGroupResourceAutoscalingGroup]{
		OutputState: o.OutputState,
	}
}

// Name of the EC2 Launch Template. Conflicts with `id`.
func (o NodeGroupResourceAutoscalingGroupOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[NodeGroupResourceAutoscalingGroup](o, func(v NodeGroupResourceAutoscalingGroup) *string { return v.Name })
}

type NodeGroupScalingConfig struct {
	// Desired number of worker nodes.
	DesiredSize int `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize int `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize int `pulumi:"minSize"`
}

type NodeGroupScalingConfigArgs struct {
	// Desired number of worker nodes.
	DesiredSize pulumix.Input[int] `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize pulumix.Input[int] `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize pulumix.Input[int] `pulumi:"minSize"`
}

func (NodeGroupScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfig)(nil)).Elem()
}

func (i NodeGroupScalingConfigArgs) ToNodeGroupScalingConfigOutput() NodeGroupScalingConfigOutput {
	return i.ToNodeGroupScalingConfigOutputWithContext(context.Background())
}

func (i NodeGroupScalingConfigArgs) ToNodeGroupScalingConfigOutputWithContext(ctx context.Context) NodeGroupScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupScalingConfigOutput)
}

func (i *NodeGroupScalingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupScalingConfigArgs] {
	return pulumix.Val(i)
}

type NodeGroupScalingConfigOutput struct{ *pulumi.OutputState }

func (NodeGroupScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupScalingConfig)(nil)).Elem()
}

func (o NodeGroupScalingConfigOutput) ToNodeGroupScalingConfigOutput() NodeGroupScalingConfigOutput {
	return o
}

func (o NodeGroupScalingConfigOutput) ToNodeGroupScalingConfigOutputWithContext(ctx context.Context) NodeGroupScalingConfigOutput {
	return o
}

func (o NodeGroupScalingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupScalingConfig] {
	return pulumix.Output[NodeGroupScalingConfig]{
		OutputState: o.OutputState,
	}
}

// Desired number of worker nodes.
func (o NodeGroupScalingConfigOutput) DesiredSize() pulumix.Output[int] {
	return pulumix.Apply[NodeGroupScalingConfig](o, func(v NodeGroupScalingConfig) int { return v.DesiredSize })
}

// Maximum number of worker nodes.
func (o NodeGroupScalingConfigOutput) MaxSize() pulumix.Output[int] {
	return pulumix.Apply[NodeGroupScalingConfig](o, func(v NodeGroupScalingConfig) int { return v.MaxSize })
}

// Minimum number of worker nodes.
func (o NodeGroupScalingConfigOutput) MinSize() pulumix.Output[int] {
	return pulumix.Apply[NodeGroupScalingConfig](o, func(v NodeGroupScalingConfig) int { return v.MinSize })
}

type NodeGroupTaint struct {
	// The effect of the taint. Valid values: `NO_SCHEDULE`, `NO_EXECUTE`, `PREFER_NO_SCHEDULE`.
	Effect string `pulumi:"effect"`
	// The key of the taint. Maximum length of 63.
	Key string `pulumi:"key"`
	// The value of the taint. Maximum length of 63.
	Value *string `pulumi:"value"`
}

type NodeGroupTaintArgs struct {
	// The effect of the taint. Valid values: `NO_SCHEDULE`, `NO_EXECUTE`, `PREFER_NO_SCHEDULE`.
	Effect pulumix.Input[string] `pulumi:"effect"`
	// The key of the taint. Maximum length of 63.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value of the taint. Maximum length of 63.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (NodeGroupTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupTaint)(nil)).Elem()
}

func (i NodeGroupTaintArgs) ToNodeGroupTaintOutput() NodeGroupTaintOutput {
	return i.ToNodeGroupTaintOutputWithContext(context.Background())
}

func (i NodeGroupTaintArgs) ToNodeGroupTaintOutputWithContext(ctx context.Context) NodeGroupTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupTaintOutput)
}

func (i *NodeGroupTaintArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupTaintArgs] {
	return pulumix.Val(i)
}

type NodeGroupTaintOutput struct{ *pulumi.OutputState }

func (NodeGroupTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupTaint)(nil)).Elem()
}

func (o NodeGroupTaintOutput) ToNodeGroupTaintOutput() NodeGroupTaintOutput {
	return o
}

func (o NodeGroupTaintOutput) ToNodeGroupTaintOutputWithContext(ctx context.Context) NodeGroupTaintOutput {
	return o
}

func (o NodeGroupTaintOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupTaint] {
	return pulumix.Output[NodeGroupTaint]{
		OutputState: o.OutputState,
	}
}

// The effect of the taint. Valid values: `NO_SCHEDULE`, `NO_EXECUTE`, `PREFER_NO_SCHEDULE`.
func (o NodeGroupTaintOutput) Effect() pulumix.Output[string] {
	return pulumix.Apply[NodeGroupTaint](o, func(v NodeGroupTaint) string { return v.Effect })
}

// The key of the taint. Maximum length of 63.
func (o NodeGroupTaintOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[NodeGroupTaint](o, func(v NodeGroupTaint) string { return v.Key })
}

// The value of the taint. Maximum length of 63.
func (o NodeGroupTaintOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[NodeGroupTaint](o, func(v NodeGroupTaint) *string { return v.Value })
}

type NodeGroupUpdateConfig struct {
	// Desired max number of unavailable worker nodes during node group update.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
	// Desired max percentage of unavailable worker nodes during node group update.
	MaxUnavailablePercentage *int `pulumi:"maxUnavailablePercentage"`
}

type NodeGroupUpdateConfigArgs struct {
	// Desired max number of unavailable worker nodes during node group update.
	MaxUnavailable pulumix.Input[*int] `pulumi:"maxUnavailable"`
	// Desired max percentage of unavailable worker nodes during node group update.
	MaxUnavailablePercentage pulumix.Input[*int] `pulumi:"maxUnavailablePercentage"`
}

func (NodeGroupUpdateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupUpdateConfig)(nil)).Elem()
}

func (i NodeGroupUpdateConfigArgs) ToNodeGroupUpdateConfigOutput() NodeGroupUpdateConfigOutput {
	return i.ToNodeGroupUpdateConfigOutputWithContext(context.Background())
}

func (i NodeGroupUpdateConfigArgs) ToNodeGroupUpdateConfigOutputWithContext(ctx context.Context) NodeGroupUpdateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupUpdateConfigOutput)
}

func (i *NodeGroupUpdateConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*NodeGroupUpdateConfigArgs] {
	return pulumix.Val(i)
}

type NodeGroupUpdateConfigOutput struct{ *pulumi.OutputState }

func (NodeGroupUpdateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupUpdateConfig)(nil)).Elem()
}

func (o NodeGroupUpdateConfigOutput) ToNodeGroupUpdateConfigOutput() NodeGroupUpdateConfigOutput {
	return o
}

func (o NodeGroupUpdateConfigOutput) ToNodeGroupUpdateConfigOutputWithContext(ctx context.Context) NodeGroupUpdateConfigOutput {
	return o
}

func (o NodeGroupUpdateConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NodeGroupUpdateConfig] {
	return pulumix.Output[NodeGroupUpdateConfig]{
		OutputState: o.OutputState,
	}
}

// Desired max number of unavailable worker nodes during node group update.
func (o NodeGroupUpdateConfigOutput) MaxUnavailable() pulumix.Output[*int] {
	return pulumix.Apply[NodeGroupUpdateConfig](o, func(v NodeGroupUpdateConfig) *int { return v.MaxUnavailable })
}

// Desired max percentage of unavailable worker nodes during node group update.
func (o NodeGroupUpdateConfigOutput) MaxUnavailablePercentage() pulumix.Output[*int] {
	return pulumix.Apply[NodeGroupUpdateConfig](o, func(v NodeGroupUpdateConfig) *int { return v.MaxUnavailablePercentage })
}

type GetClusterCertificateAuthority struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data string `pulumi:"data"`
}

type GetClusterCertificateAuthorityArgs struct {
	// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
	Data pulumix.Input[string] `pulumi:"data"`
}

func (GetClusterCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateAuthority)(nil)).Elem()
}

func (i GetClusterCertificateAuthorityArgs) ToGetClusterCertificateAuthorityOutput() GetClusterCertificateAuthorityOutput {
	return i.ToGetClusterCertificateAuthorityOutputWithContext(context.Background())
}

func (i GetClusterCertificateAuthorityArgs) ToGetClusterCertificateAuthorityOutputWithContext(ctx context.Context) GetClusterCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateAuthorityOutput)
}

func (i *GetClusterCertificateAuthorityArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterCertificateAuthorityArgs] {
	return pulumix.Val(i)
}

type GetClusterCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateAuthority)(nil)).Elem()
}

func (o GetClusterCertificateAuthorityOutput) ToGetClusterCertificateAuthorityOutput() GetClusterCertificateAuthorityOutput {
	return o
}

func (o GetClusterCertificateAuthorityOutput) ToGetClusterCertificateAuthorityOutputWithContext(ctx context.Context) GetClusterCertificateAuthorityOutput {
	return o
}

func (o GetClusterCertificateAuthorityOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterCertificateAuthority] {
	return pulumix.Output[GetClusterCertificateAuthority]{
		OutputState: o.OutputState,
	}
}

// The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
func (o GetClusterCertificateAuthorityOutput) Data() pulumix.Output[string] {
	return pulumix.Apply[GetClusterCertificateAuthority](o, func(v GetClusterCertificateAuthority) string { return v.Data })
}

type GetClusterIdentity struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs []GetClusterIdentityOidc `pulumi:"oidcs"`
}

type GetClusterIdentityArgs struct {
	// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
	Oidcs pulumix.Input[[]*GetClusterIdentityOidcArgs] `pulumi:"oidcs"`
}

func (GetClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentity)(nil)).Elem()
}

func (i GetClusterIdentityArgs) ToGetClusterIdentityOutput() GetClusterIdentityOutput {
	return i.ToGetClusterIdentityOutputWithContext(context.Background())
}

func (i GetClusterIdentityArgs) ToGetClusterIdentityOutputWithContext(ctx context.Context) GetClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterIdentityOutput)
}

func (i *GetClusterIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterIdentityArgs] {
	return pulumix.Val(i)
}

type GetClusterIdentityOutput struct{ *pulumi.OutputState }

func (GetClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentity)(nil)).Elem()
}

func (o GetClusterIdentityOutput) ToGetClusterIdentityOutput() GetClusterIdentityOutput {
	return o
}

func (o GetClusterIdentityOutput) ToGetClusterIdentityOutputWithContext(ctx context.Context) GetClusterIdentityOutput {
	return o
}

func (o GetClusterIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterIdentity] {
	return pulumix.Output[GetClusterIdentity]{
		OutputState: o.OutputState,
	}
}

// Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
func (o GetClusterIdentityOutput) Oidcs() pulumix.GArrayOutput[GetClusterIdentityOidc, GetClusterIdentityOidcOutput] {
	value := pulumix.Apply[GetClusterIdentity](o, func(v GetClusterIdentity) []GetClusterIdentityOidc { return v.Oidcs })
	return pulumix.GArrayOutput[GetClusterIdentityOidc, GetClusterIdentityOidcOutput]{OutputState: value.OutputState}
}

type GetClusterIdentityOidc struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer string `pulumi:"issuer"`
}

type GetClusterIdentityOidcArgs struct {
	// Issuer URL for the OpenID Connect identity provider.
	Issuer pulumix.Input[string] `pulumi:"issuer"`
}

func (GetClusterIdentityOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentityOidc)(nil)).Elem()
}

func (i GetClusterIdentityOidcArgs) ToGetClusterIdentityOidcOutput() GetClusterIdentityOidcOutput {
	return i.ToGetClusterIdentityOidcOutputWithContext(context.Background())
}

func (i GetClusterIdentityOidcArgs) ToGetClusterIdentityOidcOutputWithContext(ctx context.Context) GetClusterIdentityOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterIdentityOidcOutput)
}

func (i *GetClusterIdentityOidcArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterIdentityOidcArgs] {
	return pulumix.Val(i)
}

type GetClusterIdentityOidcOutput struct{ *pulumi.OutputState }

func (GetClusterIdentityOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterIdentityOidc)(nil)).Elem()
}

func (o GetClusterIdentityOidcOutput) ToGetClusterIdentityOidcOutput() GetClusterIdentityOidcOutput {
	return o
}

func (o GetClusterIdentityOidcOutput) ToGetClusterIdentityOidcOutputWithContext(ctx context.Context) GetClusterIdentityOidcOutput {
	return o
}

func (o GetClusterIdentityOidcOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterIdentityOidc] {
	return pulumix.Output[GetClusterIdentityOidc]{
		OutputState: o.OutputState,
	}
}

// Issuer URL for the OpenID Connect identity provider.
func (o GetClusterIdentityOidcOutput) Issuer() pulumix.Output[string] {
	return pulumix.Apply[GetClusterIdentityOidc](o, func(v GetClusterIdentityOidc) string { return v.Issuer })
}

type GetClusterKubernetesNetworkConfig struct {
	// `ipv4` or `ipv6`.
	IpFamily string `pulumi:"ipFamily"`
	// The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv4` was specified when the cluster was created.
	ServiceIpv4Cidr string `pulumi:"serviceIpv4Cidr"`
	// The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv6` was specified when the cluster was created. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
	ServiceIpv6Cidr string `pulumi:"serviceIpv6Cidr"`
}

type GetClusterKubernetesNetworkConfigArgs struct {
	// `ipv4` or `ipv6`.
	IpFamily pulumix.Input[string] `pulumi:"ipFamily"`
	// The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv4` was specified when the cluster was created.
	ServiceIpv4Cidr pulumix.Input[string] `pulumi:"serviceIpv4Cidr"`
	// The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv6` was specified when the cluster was created. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
	ServiceIpv6Cidr pulumix.Input[string] `pulumi:"serviceIpv6Cidr"`
}

func (GetClusterKubernetesNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (i GetClusterKubernetesNetworkConfigArgs) ToGetClusterKubernetesNetworkConfigOutput() GetClusterKubernetesNetworkConfigOutput {
	return i.ToGetClusterKubernetesNetworkConfigOutputWithContext(context.Background())
}

func (i GetClusterKubernetesNetworkConfigArgs) ToGetClusterKubernetesNetworkConfigOutputWithContext(ctx context.Context) GetClusterKubernetesNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterKubernetesNetworkConfigOutput)
}

func (i *GetClusterKubernetesNetworkConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterKubernetesNetworkConfigArgs] {
	return pulumix.Val(i)
}

type GetClusterKubernetesNetworkConfigOutput struct{ *pulumi.OutputState }

func (GetClusterKubernetesNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (o GetClusterKubernetesNetworkConfigOutput) ToGetClusterKubernetesNetworkConfigOutput() GetClusterKubernetesNetworkConfigOutput {
	return o
}

func (o GetClusterKubernetesNetworkConfigOutput) ToGetClusterKubernetesNetworkConfigOutputWithContext(ctx context.Context) GetClusterKubernetesNetworkConfigOutput {
	return o
}

func (o GetClusterKubernetesNetworkConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterKubernetesNetworkConfig] {
	return pulumix.Output[GetClusterKubernetesNetworkConfig]{
		OutputState: o.OutputState,
	}
}

// `ipv4` or `ipv6`.
func (o GetClusterKubernetesNetworkConfigOutput) IpFamily() pulumix.Output[string] {
	return pulumix.Apply[GetClusterKubernetesNetworkConfig](o, func(v GetClusterKubernetesNetworkConfig) string { return v.IpFamily })
}

// The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv4` was specified when the cluster was created.
func (o GetClusterKubernetesNetworkConfigOutput) ServiceIpv4Cidr() pulumix.Output[string] {
	return pulumix.Apply[GetClusterKubernetesNetworkConfig](o, func(v GetClusterKubernetesNetworkConfig) string { return v.ServiceIpv4Cidr })
}

// The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv6` was specified when the cluster was created. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
func (o GetClusterKubernetesNetworkConfigOutput) ServiceIpv6Cidr() pulumix.Output[string] {
	return pulumix.Apply[GetClusterKubernetesNetworkConfig](o, func(v GetClusterKubernetesNetworkConfig) string { return v.ServiceIpv6Cidr })
}

type GetClusterOutpostConfig struct {
	// The Amazon EC2 instance type for all Kubernetes control plane instances.
	ControlPlaneInstanceType string `pulumi:"controlPlaneInstanceType"`
	// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
	ControlPlanePlacements []GetClusterOutpostConfigControlPlanePlacement `pulumi:"controlPlanePlacements"`
	// List of ARNs of the Outposts hosting the EKS cluster. Only a single ARN is supported currently.
	OutpostArns []string `pulumi:"outpostArns"`
}

type GetClusterOutpostConfigArgs struct {
	// The Amazon EC2 instance type for all Kubernetes control plane instances.
	ControlPlaneInstanceType pulumix.Input[string] `pulumi:"controlPlaneInstanceType"`
	// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
	ControlPlanePlacements pulumix.Input[[]*GetClusterOutpostConfigControlPlanePlacementArgs] `pulumi:"controlPlanePlacements"`
	// List of ARNs of the Outposts hosting the EKS cluster. Only a single ARN is supported currently.
	OutpostArns pulumix.Input[[]string] `pulumi:"outpostArns"`
}

func (GetClusterOutpostConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterOutpostConfig)(nil)).Elem()
}

func (i GetClusterOutpostConfigArgs) ToGetClusterOutpostConfigOutput() GetClusterOutpostConfigOutput {
	return i.ToGetClusterOutpostConfigOutputWithContext(context.Background())
}

func (i GetClusterOutpostConfigArgs) ToGetClusterOutpostConfigOutputWithContext(ctx context.Context) GetClusterOutpostConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterOutpostConfigOutput)
}

func (i *GetClusterOutpostConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterOutpostConfigArgs] {
	return pulumix.Val(i)
}

type GetClusterOutpostConfigOutput struct{ *pulumi.OutputState }

func (GetClusterOutpostConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterOutpostConfig)(nil)).Elem()
}

func (o GetClusterOutpostConfigOutput) ToGetClusterOutpostConfigOutput() GetClusterOutpostConfigOutput {
	return o
}

func (o GetClusterOutpostConfigOutput) ToGetClusterOutpostConfigOutputWithContext(ctx context.Context) GetClusterOutpostConfigOutput {
	return o
}

func (o GetClusterOutpostConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterOutpostConfig] {
	return pulumix.Output[GetClusterOutpostConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon EC2 instance type for all Kubernetes control plane instances.
func (o GetClusterOutpostConfigOutput) ControlPlaneInstanceType() pulumix.Output[string] {
	return pulumix.Apply[GetClusterOutpostConfig](o, func(v GetClusterOutpostConfig) string { return v.ControlPlaneInstanceType })
}

// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
func (o GetClusterOutpostConfigOutput) ControlPlanePlacements() pulumix.GArrayOutput[GetClusterOutpostConfigControlPlanePlacement, GetClusterOutpostConfigControlPlanePlacementOutput] {
	value := pulumix.Apply[GetClusterOutpostConfig](o, func(v GetClusterOutpostConfig) []GetClusterOutpostConfigControlPlanePlacement {
		return v.ControlPlanePlacements
	})
	return pulumix.GArrayOutput[GetClusterOutpostConfigControlPlanePlacement, GetClusterOutpostConfigControlPlanePlacementOutput]{OutputState: value.OutputState}
}

// List of ARNs of the Outposts hosting the EKS cluster. Only a single ARN is supported currently.
func (o GetClusterOutpostConfigOutput) OutpostArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetClusterOutpostConfig](o, func(v GetClusterOutpostConfig) []string { return v.OutpostArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetClusterOutpostConfigControlPlanePlacement struct {
	// The name of the placement group for the Kubernetes control plane instances.
	GroupName string `pulumi:"groupName"`
}

type GetClusterOutpostConfigControlPlanePlacementArgs struct {
	// The name of the placement group for the Kubernetes control plane instances.
	GroupName pulumix.Input[string] `pulumi:"groupName"`
}

func (GetClusterOutpostConfigControlPlanePlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterOutpostConfigControlPlanePlacement)(nil)).Elem()
}

func (i GetClusterOutpostConfigControlPlanePlacementArgs) ToGetClusterOutpostConfigControlPlanePlacementOutput() GetClusterOutpostConfigControlPlanePlacementOutput {
	return i.ToGetClusterOutpostConfigControlPlanePlacementOutputWithContext(context.Background())
}

func (i GetClusterOutpostConfigControlPlanePlacementArgs) ToGetClusterOutpostConfigControlPlanePlacementOutputWithContext(ctx context.Context) GetClusterOutpostConfigControlPlanePlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterOutpostConfigControlPlanePlacementOutput)
}

func (i *GetClusterOutpostConfigControlPlanePlacementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterOutpostConfigControlPlanePlacementArgs] {
	return pulumix.Val(i)
}

type GetClusterOutpostConfigControlPlanePlacementOutput struct{ *pulumi.OutputState }

func (GetClusterOutpostConfigControlPlanePlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterOutpostConfigControlPlanePlacement)(nil)).Elem()
}

func (o GetClusterOutpostConfigControlPlanePlacementOutput) ToGetClusterOutpostConfigControlPlanePlacementOutput() GetClusterOutpostConfigControlPlanePlacementOutput {
	return o
}

func (o GetClusterOutpostConfigControlPlanePlacementOutput) ToGetClusterOutpostConfigControlPlanePlacementOutputWithContext(ctx context.Context) GetClusterOutpostConfigControlPlanePlacementOutput {
	return o
}

func (o GetClusterOutpostConfigControlPlanePlacementOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterOutpostConfigControlPlanePlacement] {
	return pulumix.Output[GetClusterOutpostConfigControlPlanePlacement]{
		OutputState: o.OutputState,
	}
}

// The name of the placement group for the Kubernetes control plane instances.
func (o GetClusterOutpostConfigControlPlanePlacementOutput) GroupName() pulumix.Output[string] {
	return pulumix.Apply[GetClusterOutpostConfigControlPlanePlacement](o, func(v GetClusterOutpostConfigControlPlanePlacement) string { return v.GroupName })
}

type GetClusterVpcConfig struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId string `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
	EndpointPrivateAccess bool `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
	EndpointPublicAccess bool `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// List of security group IDs
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of subnet IDs
	SubnetIds []string `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId string `pulumi:"vpcId"`
}

type GetClusterVpcConfigArgs struct {
	// The cluster security group that was created by Amazon EKS for the cluster.
	ClusterSecurityGroupId pulumix.Input[string] `pulumi:"clusterSecurityGroupId"`
	// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
	EndpointPrivateAccess pulumix.Input[bool] `pulumi:"endpointPrivateAccess"`
	// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
	EndpointPublicAccess pulumix.Input[bool] `pulumi:"endpointPublicAccess"`
	// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
	PublicAccessCidrs pulumix.Input[[]string] `pulumi:"publicAccessCidrs"`
	// List of security group IDs
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// List of subnet IDs
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The VPC associated with your cluster.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (GetClusterVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterVpcConfig)(nil)).Elem()
}

func (i GetClusterVpcConfigArgs) ToGetClusterVpcConfigOutput() GetClusterVpcConfigOutput {
	return i.ToGetClusterVpcConfigOutputWithContext(context.Background())
}

func (i GetClusterVpcConfigArgs) ToGetClusterVpcConfigOutputWithContext(ctx context.Context) GetClusterVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterVpcConfigOutput)
}

func (i *GetClusterVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterVpcConfigArgs] {
	return pulumix.Val(i)
}

type GetClusterVpcConfigOutput struct{ *pulumi.OutputState }

func (GetClusterVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterVpcConfig)(nil)).Elem()
}

func (o GetClusterVpcConfigOutput) ToGetClusterVpcConfigOutput() GetClusterVpcConfigOutput {
	return o
}

func (o GetClusterVpcConfigOutput) ToGetClusterVpcConfigOutputWithContext(ctx context.Context) GetClusterVpcConfigOutput {
	return o
}

func (o GetClusterVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterVpcConfig] {
	return pulumix.Output[GetClusterVpcConfig]{
		OutputState: o.OutputState,
	}
}

// The cluster security group that was created by Amazon EKS for the cluster.
func (o GetClusterVpcConfigOutput) ClusterSecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) string { return v.ClusterSecurityGroupId })
}

// Indicates whether or not the Amazon EKS private API server endpoint is enabled.
func (o GetClusterVpcConfigOutput) EndpointPrivateAccess() pulumix.Output[bool] {
	return pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) bool { return v.EndpointPrivateAccess })
}

// Indicates whether or not the Amazon EKS public API server endpoint is enabled.
func (o GetClusterVpcConfigOutput) EndpointPublicAccess() pulumix.Output[bool] {
	return pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) bool { return v.EndpointPublicAccess })
}

// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
func (o GetClusterVpcConfigOutput) PublicAccessCidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) []string { return v.PublicAccessCidrs })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of security group IDs
func (o GetClusterVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of subnet IDs
func (o GetClusterVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The VPC associated with your cluster.
func (o GetClusterVpcConfigOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetClusterVpcConfig](o, func(v GetClusterVpcConfig) string { return v.VpcId })
}

type GetNodeGroupLaunchTemplate struct {
	// The ID of the launch template.
	Id string `pulumi:"id"`
	// Name of the AutoScaling Group.
	Name string `pulumi:"name"`
	// Kubernetes version.
	Version string `pulumi:"version"`
}

type GetNodeGroupLaunchTemplateArgs struct {
	// The ID of the launch template.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the AutoScaling Group.
	Name pulumix.Input[string] `pulumi:"name"`
	// Kubernetes version.
	Version pulumix.Input[string] `pulumi:"version"`
}

func (GetNodeGroupLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupLaunchTemplate)(nil)).Elem()
}

func (i GetNodeGroupLaunchTemplateArgs) ToGetNodeGroupLaunchTemplateOutput() GetNodeGroupLaunchTemplateOutput {
	return i.ToGetNodeGroupLaunchTemplateOutputWithContext(context.Background())
}

func (i GetNodeGroupLaunchTemplateArgs) ToGetNodeGroupLaunchTemplateOutputWithContext(ctx context.Context) GetNodeGroupLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeGroupLaunchTemplateOutput)
}

func (i *GetNodeGroupLaunchTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetNodeGroupLaunchTemplateArgs] {
	return pulumix.Val(i)
}

type GetNodeGroupLaunchTemplateOutput struct{ *pulumi.OutputState }

func (GetNodeGroupLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupLaunchTemplate)(nil)).Elem()
}

func (o GetNodeGroupLaunchTemplateOutput) ToGetNodeGroupLaunchTemplateOutput() GetNodeGroupLaunchTemplateOutput {
	return o
}

func (o GetNodeGroupLaunchTemplateOutput) ToGetNodeGroupLaunchTemplateOutputWithContext(ctx context.Context) GetNodeGroupLaunchTemplateOutput {
	return o
}

func (o GetNodeGroupLaunchTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[GetNodeGroupLaunchTemplate] {
	return pulumix.Output[GetNodeGroupLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

// The ID of the launch template.
func (o GetNodeGroupLaunchTemplateOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupLaunchTemplate](o, func(v GetNodeGroupLaunchTemplate) string { return v.Id })
}

// Name of the AutoScaling Group.
func (o GetNodeGroupLaunchTemplateOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupLaunchTemplate](o, func(v GetNodeGroupLaunchTemplate) string { return v.Name })
}

// Kubernetes version.
func (o GetNodeGroupLaunchTemplateOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupLaunchTemplate](o, func(v GetNodeGroupLaunchTemplate) string { return v.Version })
}

type GetNodeGroupRemoteAccess struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group.
	Ec2SshKey string `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes.
	SourceSecurityGroupIds []string `pulumi:"sourceSecurityGroupIds"`
}

type GetNodeGroupRemoteAccessArgs struct {
	// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group.
	Ec2SshKey pulumix.Input[string] `pulumi:"ec2SshKey"`
	// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes.
	SourceSecurityGroupIds pulumix.Input[[]string] `pulumi:"sourceSecurityGroupIds"`
}

func (GetNodeGroupRemoteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupRemoteAccess)(nil)).Elem()
}

func (i GetNodeGroupRemoteAccessArgs) ToGetNodeGroupRemoteAccessOutput() GetNodeGroupRemoteAccessOutput {
	return i.ToGetNodeGroupRemoteAccessOutputWithContext(context.Background())
}

func (i GetNodeGroupRemoteAccessArgs) ToGetNodeGroupRemoteAccessOutputWithContext(ctx context.Context) GetNodeGroupRemoteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeGroupRemoteAccessOutput)
}

func (i *GetNodeGroupRemoteAccessArgs) ToOutput(ctx context.Context) pulumix.Output[*GetNodeGroupRemoteAccessArgs] {
	return pulumix.Val(i)
}

type GetNodeGroupRemoteAccessOutput struct{ *pulumi.OutputState }

func (GetNodeGroupRemoteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupRemoteAccess)(nil)).Elem()
}

func (o GetNodeGroupRemoteAccessOutput) ToGetNodeGroupRemoteAccessOutput() GetNodeGroupRemoteAccessOutput {
	return o
}

func (o GetNodeGroupRemoteAccessOutput) ToGetNodeGroupRemoteAccessOutputWithContext(ctx context.Context) GetNodeGroupRemoteAccessOutput {
	return o
}

func (o GetNodeGroupRemoteAccessOutput) ToOutput(ctx context.Context) pulumix.Output[GetNodeGroupRemoteAccess] {
	return pulumix.Output[GetNodeGroupRemoteAccess]{
		OutputState: o.OutputState,
	}
}

// EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group.
func (o GetNodeGroupRemoteAccessOutput) Ec2SshKey() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupRemoteAccess](o, func(v GetNodeGroupRemoteAccess) string { return v.Ec2SshKey })
}

// Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes.
func (o GetNodeGroupRemoteAccessOutput) SourceSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetNodeGroupRemoteAccess](o, func(v GetNodeGroupRemoteAccess) []string { return v.SourceSecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetNodeGroupResource struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups []GetNodeGroupResourceAutoscalingGroup `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId string `pulumi:"remoteAccessSecurityGroupId"`
}

type GetNodeGroupResourceArgs struct {
	// List of objects containing information about AutoScaling Groups.
	AutoscalingGroups pulumix.Input[[]*GetNodeGroupResourceAutoscalingGroupArgs] `pulumi:"autoscalingGroups"`
	// Identifier of the remote access EC2 Security Group.
	RemoteAccessSecurityGroupId pulumix.Input[string] `pulumi:"remoteAccessSecurityGroupId"`
}

func (GetNodeGroupResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupResource)(nil)).Elem()
}

func (i GetNodeGroupResourceArgs) ToGetNodeGroupResourceOutput() GetNodeGroupResourceOutput {
	return i.ToGetNodeGroupResourceOutputWithContext(context.Background())
}

func (i GetNodeGroupResourceArgs) ToGetNodeGroupResourceOutputWithContext(ctx context.Context) GetNodeGroupResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeGroupResourceOutput)
}

func (i *GetNodeGroupResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetNodeGroupResourceArgs] {
	return pulumix.Val(i)
}

type GetNodeGroupResourceOutput struct{ *pulumi.OutputState }

func (GetNodeGroupResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupResource)(nil)).Elem()
}

func (o GetNodeGroupResourceOutput) ToGetNodeGroupResourceOutput() GetNodeGroupResourceOutput {
	return o
}

func (o GetNodeGroupResourceOutput) ToGetNodeGroupResourceOutputWithContext(ctx context.Context) GetNodeGroupResourceOutput {
	return o
}

func (o GetNodeGroupResourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetNodeGroupResource] {
	return pulumix.Output[GetNodeGroupResource]{
		OutputState: o.OutputState,
	}
}

// List of objects containing information about AutoScaling Groups.
func (o GetNodeGroupResourceOutput) AutoscalingGroups() pulumix.GArrayOutput[GetNodeGroupResourceAutoscalingGroup, GetNodeGroupResourceAutoscalingGroupOutput] {
	value := pulumix.Apply[GetNodeGroupResource](o, func(v GetNodeGroupResource) []GetNodeGroupResourceAutoscalingGroup { return v.AutoscalingGroups })
	return pulumix.GArrayOutput[GetNodeGroupResourceAutoscalingGroup, GetNodeGroupResourceAutoscalingGroupOutput]{OutputState: value.OutputState}
}

// Identifier of the remote access EC2 Security Group.
func (o GetNodeGroupResourceOutput) RemoteAccessSecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupResource](o, func(v GetNodeGroupResource) string { return v.RemoteAccessSecurityGroupId })
}

type GetNodeGroupResourceAutoscalingGroup struct {
	// Name of the AutoScaling Group.
	Name string `pulumi:"name"`
}

type GetNodeGroupResourceAutoscalingGroupArgs struct {
	// Name of the AutoScaling Group.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetNodeGroupResourceAutoscalingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (i GetNodeGroupResourceAutoscalingGroupArgs) ToGetNodeGroupResourceAutoscalingGroupOutput() GetNodeGroupResourceAutoscalingGroupOutput {
	return i.ToGetNodeGroupResourceAutoscalingGroupOutputWithContext(context.Background())
}

func (i GetNodeGroupResourceAutoscalingGroupArgs) ToGetNodeGroupResourceAutoscalingGroupOutputWithContext(ctx context.Context) GetNodeGroupResourceAutoscalingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeGroupResourceAutoscalingGroupOutput)
}

func (i *GetNodeGroupResourceAutoscalingGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*GetNodeGroupResourceAutoscalingGroupArgs] {
	return pulumix.Val(i)
}

type GetNodeGroupResourceAutoscalingGroupOutput struct{ *pulumi.OutputState }

func (GetNodeGroupResourceAutoscalingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupResourceAutoscalingGroup)(nil)).Elem()
}

func (o GetNodeGroupResourceAutoscalingGroupOutput) ToGetNodeGroupResourceAutoscalingGroupOutput() GetNodeGroupResourceAutoscalingGroupOutput {
	return o
}

func (o GetNodeGroupResourceAutoscalingGroupOutput) ToGetNodeGroupResourceAutoscalingGroupOutputWithContext(ctx context.Context) GetNodeGroupResourceAutoscalingGroupOutput {
	return o
}

func (o GetNodeGroupResourceAutoscalingGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetNodeGroupResourceAutoscalingGroup] {
	return pulumix.Output[GetNodeGroupResourceAutoscalingGroup]{
		OutputState: o.OutputState,
	}
}

// Name of the AutoScaling Group.
func (o GetNodeGroupResourceAutoscalingGroupOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupResourceAutoscalingGroup](o, func(v GetNodeGroupResourceAutoscalingGroup) string { return v.Name })
}

type GetNodeGroupScalingConfig struct {
	// Desired number of worker nodes.
	DesiredSize int `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize int `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize int `pulumi:"minSize"`
}

type GetNodeGroupScalingConfigArgs struct {
	// Desired number of worker nodes.
	DesiredSize pulumix.Input[int] `pulumi:"desiredSize"`
	// Maximum number of worker nodes.
	MaxSize pulumix.Input[int] `pulumi:"maxSize"`
	// Minimum number of worker nodes.
	MinSize pulumix.Input[int] `pulumi:"minSize"`
}

func (GetNodeGroupScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupScalingConfig)(nil)).Elem()
}

func (i GetNodeGroupScalingConfigArgs) ToGetNodeGroupScalingConfigOutput() GetNodeGroupScalingConfigOutput {
	return i.ToGetNodeGroupScalingConfigOutputWithContext(context.Background())
}

func (i GetNodeGroupScalingConfigArgs) ToGetNodeGroupScalingConfigOutputWithContext(ctx context.Context) GetNodeGroupScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeGroupScalingConfigOutput)
}

func (i *GetNodeGroupScalingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetNodeGroupScalingConfigArgs] {
	return pulumix.Val(i)
}

type GetNodeGroupScalingConfigOutput struct{ *pulumi.OutputState }

func (GetNodeGroupScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupScalingConfig)(nil)).Elem()
}

func (o GetNodeGroupScalingConfigOutput) ToGetNodeGroupScalingConfigOutput() GetNodeGroupScalingConfigOutput {
	return o
}

func (o GetNodeGroupScalingConfigOutput) ToGetNodeGroupScalingConfigOutputWithContext(ctx context.Context) GetNodeGroupScalingConfigOutput {
	return o
}

func (o GetNodeGroupScalingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetNodeGroupScalingConfig] {
	return pulumix.Output[GetNodeGroupScalingConfig]{
		OutputState: o.OutputState,
	}
}

// Desired number of worker nodes.
func (o GetNodeGroupScalingConfigOutput) DesiredSize() pulumix.Output[int] {
	return pulumix.Apply[GetNodeGroupScalingConfig](o, func(v GetNodeGroupScalingConfig) int { return v.DesiredSize })
}

// Maximum number of worker nodes.
func (o GetNodeGroupScalingConfigOutput) MaxSize() pulumix.Output[int] {
	return pulumix.Apply[GetNodeGroupScalingConfig](o, func(v GetNodeGroupScalingConfig) int { return v.MaxSize })
}

// Minimum number of worker nodes.
func (o GetNodeGroupScalingConfigOutput) MinSize() pulumix.Output[int] {
	return pulumix.Apply[GetNodeGroupScalingConfig](o, func(v GetNodeGroupScalingConfig) int { return v.MinSize })
}

type GetNodeGroupTaint struct {
	// The effect of the taint.
	Effect string `pulumi:"effect"`
	// The key of the taint.
	Key string `pulumi:"key"`
	// The value of the taint.
	Value string `pulumi:"value"`
}

type GetNodeGroupTaintArgs struct {
	// The effect of the taint.
	Effect pulumix.Input[string] `pulumi:"effect"`
	// The key of the taint.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value of the taint.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetNodeGroupTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupTaint)(nil)).Elem()
}

func (i GetNodeGroupTaintArgs) ToGetNodeGroupTaintOutput() GetNodeGroupTaintOutput {
	return i.ToGetNodeGroupTaintOutputWithContext(context.Background())
}

func (i GetNodeGroupTaintArgs) ToGetNodeGroupTaintOutputWithContext(ctx context.Context) GetNodeGroupTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeGroupTaintOutput)
}

func (i *GetNodeGroupTaintArgs) ToOutput(ctx context.Context) pulumix.Output[*GetNodeGroupTaintArgs] {
	return pulumix.Val(i)
}

type GetNodeGroupTaintOutput struct{ *pulumi.OutputState }

func (GetNodeGroupTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeGroupTaint)(nil)).Elem()
}

func (o GetNodeGroupTaintOutput) ToGetNodeGroupTaintOutput() GetNodeGroupTaintOutput {
	return o
}

func (o GetNodeGroupTaintOutput) ToGetNodeGroupTaintOutputWithContext(ctx context.Context) GetNodeGroupTaintOutput {
	return o
}

func (o GetNodeGroupTaintOutput) ToOutput(ctx context.Context) pulumix.Output[GetNodeGroupTaint] {
	return pulumix.Output[GetNodeGroupTaint]{
		OutputState: o.OutputState,
	}
}

// The effect of the taint.
func (o GetNodeGroupTaintOutput) Effect() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupTaint](o, func(v GetNodeGroupTaint) string { return v.Effect })
}

// The key of the taint.
func (o GetNodeGroupTaintOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupTaint](o, func(v GetNodeGroupTaint) string { return v.Key })
}

// The value of the taint.
func (o GetNodeGroupTaintOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetNodeGroupTaint](o, func(v GetNodeGroupTaint) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(ClusterCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigProviderOutput{})
	pulumi.RegisterOutputType(ClusterIdentityOutput{})
	pulumi.RegisterOutputType(ClusterIdentityOidcOutput{})
	pulumi.RegisterOutputType(ClusterKubernetesNetworkConfigOutput{})
	pulumi.RegisterOutputType(ClusterOutpostConfigOutput{})
	pulumi.RegisterOutputType(ClusterOutpostConfigControlPlanePlacementOutput{})
	pulumi.RegisterOutputType(ClusterVpcConfigOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorOutput{})
	pulumi.RegisterOutputType(IdentityProviderConfigOidcOutput{})
	pulumi.RegisterOutputType(NodeGroupLaunchTemplateOutput{})
	pulumi.RegisterOutputType(NodeGroupRemoteAccessOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceOutput{})
	pulumi.RegisterOutputType(NodeGroupResourceAutoscalingGroupOutput{})
	pulumi.RegisterOutputType(NodeGroupScalingConfigOutput{})
	pulumi.RegisterOutputType(NodeGroupTaintOutput{})
	pulumi.RegisterOutputType(NodeGroupUpdateConfigOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(GetClusterIdentityOutput{})
	pulumi.RegisterOutputType(GetClusterIdentityOidcOutput{})
	pulumi.RegisterOutputType(GetClusterKubernetesNetworkConfigOutput{})
	pulumi.RegisterOutputType(GetClusterOutpostConfigOutput{})
	pulumi.RegisterOutputType(GetClusterOutpostConfigControlPlanePlacementOutput{})
	pulumi.RegisterOutputType(GetClusterVpcConfigOutput{})
	pulumi.RegisterOutputType(GetNodeGroupLaunchTemplateOutput{})
	pulumi.RegisterOutputType(GetNodeGroupRemoteAccessOutput{})
	pulumi.RegisterOutputType(GetNodeGroupResourceOutput{})
	pulumi.RegisterOutputType(GetNodeGroupResourceAutoscalingGroupOutput{})
	pulumi.RegisterOutputType(GetNodeGroupScalingConfigOutput{})
	pulumi.RegisterOutputType(GetNodeGroupTaintOutput{})
}
