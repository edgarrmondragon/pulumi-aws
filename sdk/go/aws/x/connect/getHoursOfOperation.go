// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Hours of Operation.
func LookupHoursOfOperation(ctx *pulumi.Context, args *LookupHoursOfOperationArgs, opts ...pulumi.InvokeOption) (*LookupHoursOfOperationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHoursOfOperationResult
	err := ctx.Invoke("aws:connect/getHoursOfOperation:getHoursOfOperation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHoursOfOperation.
type LookupHoursOfOperationArgs struct {
	// Returns information on a specific Hours of Operation by hours of operation id
	HoursOfOperationId *string `pulumi:"hoursOfOperationId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Hours of Operation by name
	Name *string `pulumi:"name"`
	// Map of tags to assign to the Hours of Operation.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getHoursOfOperation.
type LookupHoursOfOperationResult struct {
	// ARN of the Hours of Operation.
	Arn string `pulumi:"arn"`
	// Configuration information for the hours of operation: day, start time, and end time . Config blocks are documented below. Config blocks are documented below.
	Configs []GetHoursOfOperationConfig `pulumi:"configs"`
	// Description of the Hours of Operation.
	Description string `pulumi:"description"`
	// The identifier for the hours of operation.
	HoursOfOperationId string `pulumi:"hoursOfOperationId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the hosting Amazon Connect Instance.
	InstanceId string `pulumi:"instanceId"`
	// Name of the Hours of Operation.
	Name string `pulumi:"name"`
	// Map of tags to assign to the Hours of Operation.
	Tags map[string]string `pulumi:"tags"`
	// Time zone of the Hours of Operation.
	TimeZone string `pulumi:"timeZone"`
}

func LookupHoursOfOperationOutput(ctx *pulumi.Context, args LookupHoursOfOperationOutputArgs, opts ...pulumi.InvokeOption) LookupHoursOfOperationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupHoursOfOperationArgs](args.ToOutput(), func(plainArgs *LookupHoursOfOperationArgs) (*LookupHoursOfOperationResult, error) {
		return LookupHoursOfOperation(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupHoursOfOperationResultOutput, *LookupHoursOfOperationResult](outputResult)
}

// A collection of arguments for invoking getHoursOfOperation.
type LookupHoursOfOperationOutputArgs struct {
	// Returns information on a specific Hours of Operation by hours of operation id
	HoursOfOperationId pulumix.Input[*string] `pulumi:"hoursOfOperationId"`
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Hours of Operation by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of tags to assign to the Hours of Operation.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupHoursOfOperationOutputArgs) ToOutput() pulumix.Output[*LookupHoursOfOperationArgs] {
	allArgs := pulumix.All(
		args.HoursOfOperationId.ToOutput(context.Background()).AsAny(),
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupHoursOfOperationArgs {
		return &LookupHoursOfOperationArgs{
			HoursOfOperationId: resolvedArgs[0].(*string),
			InstanceId:         resolvedArgs[1].(string),
			Name:               resolvedArgs[2].(*string),
			Tags:               resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupHoursOfOperationResultOutput struct{ *pulumi.OutputState }

func (LookupHoursOfOperationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHoursOfOperationResult)(nil)).Elem()
}

func (o LookupHoursOfOperationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupHoursOfOperationResult] {
	return pulumix.Output[*LookupHoursOfOperationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupHoursOfOperationResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.Arn })
}

func (o LookupHoursOfOperationResultOutput) Configs() pulumix.GArrayOutput[GetHoursOfOperationConfig, GetHoursOfOperationConfigOutput] {
	value := pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) []GetHoursOfOperationConfig { return v.Configs })
	return pulumix.GArrayOutput[GetHoursOfOperationConfig, GetHoursOfOperationConfigOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupHoursOfOperationResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.Description })
}

func (o LookupHoursOfOperationResultOutput) HoursOfOperationId() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.HoursOfOperationId })
}

func (o LookupHoursOfOperationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.Id })
}

func (o LookupHoursOfOperationResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.InstanceId })
}

func (o LookupHoursOfOperationResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.Name })
}

func (o LookupHoursOfOperationResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupHoursOfOperationResultOutput) TimeZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupHoursOfOperationResult](o, func(v *LookupHoursOfOperationResult) string { return v.TimeZone })
}
