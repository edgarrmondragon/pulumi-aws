// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **Note:** There is only a single policy allowed per AWS account. An existing policy will be lost when using this resource as an effect of this limitation.
//
// Manages Password Policy for the AWS Account.
// See more about [Account Password Policy](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html)
// in the official AWS docs.
type AccountPasswordPolicy struct {
	pulumi.CustomResourceState

	// Whether to allow users to change their own password
	AllowUsersToChangePassword pulumix.Output[*bool] `pulumi:"allowUsersToChangePassword"`
	// Indicates whether passwords in the account expire. Returns `true` if `maxPasswordAge` contains a value greater than `0`. Returns `false` if it is `0` or _not present_.
	ExpirePasswords pulumix.Output[bool] `pulumi:"expirePasswords"`
	// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
	HardExpiry pulumix.Output[bool] `pulumi:"hardExpiry"`
	// The number of days that an user password is valid.
	MaxPasswordAge pulumix.Output[int] `pulumi:"maxPasswordAge"`
	// Minimum length to require for user passwords.
	MinimumPasswordLength pulumix.Output[*int] `pulumi:"minimumPasswordLength"`
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention pulumix.Output[int] `pulumi:"passwordReusePrevention"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumix.Output[bool] `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers pulumix.Output[bool] `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols pulumix.Output[bool] `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumix.Output[bool] `pulumi:"requireUppercaseCharacters"`
}

// NewAccountPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccountPasswordPolicy(ctx *pulumi.Context,
	name string, args *AccountPasswordPolicyArgs, opts ...pulumi.ResourceOption) (*AccountPasswordPolicy, error) {
	if args == nil {
		args = &AccountPasswordPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountPasswordPolicy
	err := ctx.RegisterResource("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPasswordPolicy gets an existing AccountPasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPasswordPolicyState, opts ...pulumi.ResourceOption) (*AccountPasswordPolicy, error) {
	var resource AccountPasswordPolicy
	err := ctx.ReadResource("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPasswordPolicy resources.
type accountPasswordPolicyState struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword *bool `pulumi:"allowUsersToChangePassword"`
	// Indicates whether passwords in the account expire. Returns `true` if `maxPasswordAge` contains a value greater than `0`. Returns `false` if it is `0` or _not present_.
	ExpirePasswords *bool `pulumi:"expirePasswords"`
	// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
	HardExpiry *bool `pulumi:"hardExpiry"`
	// The number of days that an user password is valid.
	MaxPasswordAge *int `pulumi:"maxPasswordAge"`
	// Minimum length to require for user passwords.
	MinimumPasswordLength *int `pulumi:"minimumPasswordLength"`
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention *int `pulumi:"passwordReusePrevention"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters *bool `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers *bool `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols *bool `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters *bool `pulumi:"requireUppercaseCharacters"`
}

type AccountPasswordPolicyState struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword pulumix.Input[*bool]
	// Indicates whether passwords in the account expire. Returns `true` if `maxPasswordAge` contains a value greater than `0`. Returns `false` if it is `0` or _not present_.
	ExpirePasswords pulumix.Input[*bool]
	// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
	HardExpiry pulumix.Input[*bool]
	// The number of days that an user password is valid.
	MaxPasswordAge pulumix.Input[*int]
	// Minimum length to require for user passwords.
	MinimumPasswordLength pulumix.Input[*int]
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention pulumix.Input[*int]
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumix.Input[*bool]
	// Whether to require numbers for user passwords.
	RequireNumbers pulumix.Input[*bool]
	// Whether to require symbols for user passwords.
	RequireSymbols pulumix.Input[*bool]
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumix.Input[*bool]
}

func (AccountPasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPasswordPolicyState)(nil)).Elem()
}

type accountPasswordPolicyArgs struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword *bool `pulumi:"allowUsersToChangePassword"`
	// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
	HardExpiry *bool `pulumi:"hardExpiry"`
	// The number of days that an user password is valid.
	MaxPasswordAge *int `pulumi:"maxPasswordAge"`
	// Minimum length to require for user passwords.
	MinimumPasswordLength *int `pulumi:"minimumPasswordLength"`
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention *int `pulumi:"passwordReusePrevention"`
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters *bool `pulumi:"requireLowercaseCharacters"`
	// Whether to require numbers for user passwords.
	RequireNumbers *bool `pulumi:"requireNumbers"`
	// Whether to require symbols for user passwords.
	RequireSymbols *bool `pulumi:"requireSymbols"`
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters *bool `pulumi:"requireUppercaseCharacters"`
}

// The set of arguments for constructing a AccountPasswordPolicy resource.
type AccountPasswordPolicyArgs struct {
	// Whether to allow users to change their own password
	AllowUsersToChangePassword pulumix.Input[*bool]
	// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
	HardExpiry pulumix.Input[*bool]
	// The number of days that an user password is valid.
	MaxPasswordAge pulumix.Input[*int]
	// Minimum length to require for user passwords.
	MinimumPasswordLength pulumix.Input[*int]
	// The number of previous passwords that users are prevented from reusing.
	PasswordReusePrevention pulumix.Input[*int]
	// Whether to require lowercase characters for user passwords.
	RequireLowercaseCharacters pulumix.Input[*bool]
	// Whether to require numbers for user passwords.
	RequireNumbers pulumix.Input[*bool]
	// Whether to require symbols for user passwords.
	RequireSymbols pulumix.Input[*bool]
	// Whether to require uppercase characters for user passwords.
	RequireUppercaseCharacters pulumix.Input[*bool]
}

func (AccountPasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPasswordPolicyArgs)(nil)).Elem()
}

type AccountPasswordPolicyOutput struct{ *pulumi.OutputState }

func (AccountPasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPasswordPolicy)(nil)).Elem()
}

func (o AccountPasswordPolicyOutput) ToAccountPasswordPolicyOutput() AccountPasswordPolicyOutput {
	return o
}

func (o AccountPasswordPolicyOutput) ToAccountPasswordPolicyOutputWithContext(ctx context.Context) AccountPasswordPolicyOutput {
	return o
}

func (o AccountPasswordPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AccountPasswordPolicy] {
	return pulumix.Output[AccountPasswordPolicy]{
		OutputState: o.OutputState,
	}
}

// Whether to allow users to change their own password
func (o AccountPasswordPolicyOutput) AllowUsersToChangePassword() pulumix.Output[*bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[*bool] { return v.AllowUsersToChangePassword })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Indicates whether passwords in the account expire. Returns `true` if `maxPasswordAge` contains a value greater than `0`. Returns `false` if it is `0` or _not present_.
func (o AccountPasswordPolicyOutput) ExpirePasswords() pulumix.Output[bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[bool] { return v.ExpirePasswords })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
func (o AccountPasswordPolicyOutput) HardExpiry() pulumix.Output[bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[bool] { return v.HardExpiry })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The number of days that an user password is valid.
func (o AccountPasswordPolicyOutput) MaxPasswordAge() pulumix.Output[int] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[int] { return v.MaxPasswordAge })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Minimum length to require for user passwords.
func (o AccountPasswordPolicyOutput) MinimumPasswordLength() pulumix.Output[*int] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[*int] { return v.MinimumPasswordLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The number of previous passwords that users are prevented from reusing.
func (o AccountPasswordPolicyOutput) PasswordReusePrevention() pulumix.Output[int] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[int] { return v.PasswordReusePrevention })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Whether to require lowercase characters for user passwords.
func (o AccountPasswordPolicyOutput) RequireLowercaseCharacters() pulumix.Output[bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[bool] { return v.RequireLowercaseCharacters })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Whether to require numbers for user passwords.
func (o AccountPasswordPolicyOutput) RequireNumbers() pulumix.Output[bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[bool] { return v.RequireNumbers })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Whether to require symbols for user passwords.
func (o AccountPasswordPolicyOutput) RequireSymbols() pulumix.Output[bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[bool] { return v.RequireSymbols })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Whether to require uppercase characters for user passwords.
func (o AccountPasswordPolicyOutput) RequireUppercaseCharacters() pulumix.Output[bool] {
	value := pulumix.Apply[AccountPasswordPolicy](o, func(v AccountPasswordPolicy) pulumix.Output[bool] { return v.RequireUppercaseCharacters })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func init() {
	pulumi.RegisterOutputType(AccountPasswordPolicyOutput{})
}
