// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RecordAlias struct {
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
	EvaluateTargetHealth bool `pulumi:"evaluateTargetHealth"`
	// DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
	Name string `pulumi:"name"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
	ZoneId string `pulumi:"zoneId"`
}

type RecordAliasArgs struct {
	// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
	EvaluateTargetHealth pulumix.Input[bool] `pulumi:"evaluateTargetHealth"`
	// DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
	Name pulumix.Input[string] `pulumi:"name"`
	// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
	ZoneId pulumix.Input[string] `pulumi:"zoneId"`
}

func (RecordAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (i RecordAliasArgs) ToRecordAliasOutput() RecordAliasOutput {
	return i.ToRecordAliasOutputWithContext(context.Background())
}

func (i RecordAliasArgs) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAliasOutput)
}

func (i *RecordAliasArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordAliasArgs] {
	return pulumix.Val(i)
}

type RecordAliasOutput struct{ *pulumi.OutputState }

func (RecordAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAlias)(nil)).Elem()
}

func (o RecordAliasOutput) ToRecordAliasOutput() RecordAliasOutput {
	return o
}

func (o RecordAliasOutput) ToRecordAliasOutputWithContext(ctx context.Context) RecordAliasOutput {
	return o
}

func (o RecordAliasOutput) ToOutput(ctx context.Context) pulumix.Output[RecordAlias] {
	return pulumix.Output[RecordAlias]{
		OutputState: o.OutputState,
	}
}

// Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
func (o RecordAliasOutput) EvaluateTargetHealth() pulumix.Output[bool] {
	return pulumix.Apply[RecordAlias](o, func(v RecordAlias) bool { return v.EvaluateTargetHealth })
}

// DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
func (o RecordAliasOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RecordAlias](o, func(v RecordAlias) string { return v.Name })
}

// Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
func (o RecordAliasOutput) ZoneId() pulumix.Output[string] {
	return pulumix.Apply[RecordAlias](o, func(v RecordAlias) string { return v.ZoneId })
}

type RecordCidrRoutingPolicy struct {
	// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
	CollectionId string `pulumi:"collectionId"`
	// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
	LocationName string `pulumi:"locationName"`
}

type RecordCidrRoutingPolicyArgs struct {
	// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
	CollectionId pulumix.Input[string] `pulumi:"collectionId"`
	// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
	LocationName pulumix.Input[string] `pulumi:"locationName"`
}

func (RecordCidrRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordCidrRoutingPolicy)(nil)).Elem()
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput {
	return i.ToRecordCidrRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordCidrRoutingPolicyArgs) ToRecordCidrRoutingPolicyOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordCidrRoutingPolicyOutput)
}

func (i *RecordCidrRoutingPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordCidrRoutingPolicyArgs] {
	return pulumix.Val(i)
}

type RecordCidrRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordCidrRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordCidrRoutingPolicy)(nil)).Elem()
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyOutput() RecordCidrRoutingPolicyOutput {
	return o
}

func (o RecordCidrRoutingPolicyOutput) ToRecordCidrRoutingPolicyOutputWithContext(ctx context.Context) RecordCidrRoutingPolicyOutput {
	return o
}

func (o RecordCidrRoutingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RecordCidrRoutingPolicy] {
	return pulumix.Output[RecordCidrRoutingPolicy]{
		OutputState: o.OutputState,
	}
}

// The CIDR collection ID. See the `route53.CidrCollection` resource for more details.
func (o RecordCidrRoutingPolicyOutput) CollectionId() pulumix.Output[string] {
	return pulumix.Apply[RecordCidrRoutingPolicy](o, func(v RecordCidrRoutingPolicy) string { return v.CollectionId })
}

// The CIDR collection location name. See the `route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
func (o RecordCidrRoutingPolicyOutput) LocationName() pulumix.Output[string] {
	return pulumix.Apply[RecordCidrRoutingPolicy](o, func(v RecordCidrRoutingPolicy) string { return v.LocationName })
}

type RecordFailoverRoutingPolicy struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type string `pulumi:"type"`
}

type RecordFailoverRoutingPolicyArgs struct {
	// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
	Type pulumix.Input[string] `pulumi:"type"`
}

func (RecordFailoverRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return i.ToRecordFailoverRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordFailoverRoutingPolicyArgs) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFailoverRoutingPolicyOutput)
}

func (i *RecordFailoverRoutingPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordFailoverRoutingPolicyArgs] {
	return pulumix.Val(i)
}

type RecordFailoverRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordFailoverRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFailoverRoutingPolicy)(nil)).Elem()
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutput() RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) ToRecordFailoverRoutingPolicyOutputWithContext(ctx context.Context) RecordFailoverRoutingPolicyOutput {
	return o
}

func (o RecordFailoverRoutingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RecordFailoverRoutingPolicy] {
	return pulumix.Output[RecordFailoverRoutingPolicy]{
		OutputState: o.OutputState,
	}
}

// `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
func (o RecordFailoverRoutingPolicyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[RecordFailoverRoutingPolicy](o, func(v RecordFailoverRoutingPolicy) string { return v.Type })
}

type RecordGeolocationRoutingPolicy struct {
	// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
	Continent *string `pulumi:"continent"`
	// A two-character country code or `*` to indicate a default resource record set.
	Country *string `pulumi:"country"`
	// A subdivision code for a country.
	Subdivision *string `pulumi:"subdivision"`
}

type RecordGeolocationRoutingPolicyArgs struct {
	// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
	Continent pulumix.Input[*string] `pulumi:"continent"`
	// A two-character country code or `*` to indicate a default resource record set.
	Country pulumix.Input[*string] `pulumi:"country"`
	// A subdivision code for a country.
	Subdivision pulumix.Input[*string] `pulumi:"subdivision"`
}

func (RecordGeolocationRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return i.ToRecordGeolocationRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordGeolocationRoutingPolicyArgs) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeolocationRoutingPolicyOutput)
}

func (i *RecordGeolocationRoutingPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordGeolocationRoutingPolicyArgs] {
	return pulumix.Val(i)
}

type RecordGeolocationRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordGeolocationRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeolocationRoutingPolicy)(nil)).Elem()
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutput() RecordGeolocationRoutingPolicyOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyOutput) ToRecordGeolocationRoutingPolicyOutputWithContext(ctx context.Context) RecordGeolocationRoutingPolicyOutput {
	return o
}

func (o RecordGeolocationRoutingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RecordGeolocationRoutingPolicy] {
	return pulumix.Output[RecordGeolocationRoutingPolicy]{
		OutputState: o.OutputState,
	}
}

// A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
func (o RecordGeolocationRoutingPolicyOutput) Continent() pulumix.Output[*string] {
	return pulumix.Apply[RecordGeolocationRoutingPolicy](o, func(v RecordGeolocationRoutingPolicy) *string { return v.Continent })
}

// A two-character country code or `*` to indicate a default resource record set.
func (o RecordGeolocationRoutingPolicyOutput) Country() pulumix.Output[*string] {
	return pulumix.Apply[RecordGeolocationRoutingPolicy](o, func(v RecordGeolocationRoutingPolicy) *string { return v.Country })
}

// A subdivision code for a country.
func (o RecordGeolocationRoutingPolicyOutput) Subdivision() pulumix.Output[*string] {
	return pulumix.Apply[RecordGeolocationRoutingPolicy](o, func(v RecordGeolocationRoutingPolicy) *string { return v.Subdivision })
}

type RecordLatencyRoutingPolicy struct {
	// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
	Region string `pulumi:"region"`
}

type RecordLatencyRoutingPolicyArgs struct {
	// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
	Region pulumix.Input[string] `pulumi:"region"`
}

func (RecordLatencyRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return i.ToRecordLatencyRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordLatencyRoutingPolicyArgs) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordLatencyRoutingPolicyOutput)
}

func (i *RecordLatencyRoutingPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordLatencyRoutingPolicyArgs] {
	return pulumix.Val(i)
}

type RecordLatencyRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordLatencyRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordLatencyRoutingPolicy)(nil)).Elem()
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutput() RecordLatencyRoutingPolicyOutput {
	return o
}

func (o RecordLatencyRoutingPolicyOutput) ToRecordLatencyRoutingPolicyOutputWithContext(ctx context.Context) RecordLatencyRoutingPolicyOutput {
	return o
}

func (o RecordLatencyRoutingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RecordLatencyRoutingPolicy] {
	return pulumix.Output[RecordLatencyRoutingPolicy]{
		OutputState: o.OutputState,
	}
}

// An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
func (o RecordLatencyRoutingPolicyOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[RecordLatencyRoutingPolicy](o, func(v RecordLatencyRoutingPolicy) string { return v.Region })
}

type RecordWeightedRoutingPolicy struct {
	// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
	Weight int `pulumi:"weight"`
}

type RecordWeightedRoutingPolicyArgs struct {
	// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
	Weight pulumix.Input[int] `pulumi:"weight"`
}

func (RecordWeightedRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return i.ToRecordWeightedRoutingPolicyOutputWithContext(context.Background())
}

func (i RecordWeightedRoutingPolicyArgs) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedRoutingPolicyOutput)
}

func (i *RecordWeightedRoutingPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordWeightedRoutingPolicyArgs] {
	return pulumix.Val(i)
}

type RecordWeightedRoutingPolicyOutput struct{ *pulumi.OutputState }

func (RecordWeightedRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeightedRoutingPolicy)(nil)).Elem()
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutput() RecordWeightedRoutingPolicyOutput {
	return o
}

func (o RecordWeightedRoutingPolicyOutput) ToRecordWeightedRoutingPolicyOutputWithContext(ctx context.Context) RecordWeightedRoutingPolicyOutput {
	return o
}

func (o RecordWeightedRoutingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RecordWeightedRoutingPolicy] {
	return pulumix.Output[RecordWeightedRoutingPolicy]{
		OutputState: o.OutputState,
	}
}

// A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
func (o RecordWeightedRoutingPolicyOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[RecordWeightedRoutingPolicy](o, func(v RecordWeightedRoutingPolicy) int { return v.Weight })
}

type ResolverEndpointIpAddress struct {
	// The IP address in the subnet that you want to use for DNS queries.
	Ip   *string `pulumi:"ip"`
	IpId *string `pulumi:"ipId"`
	// The ID of the subnet that contains the IP address.
	SubnetId string `pulumi:"subnetId"`
}

type ResolverEndpointIpAddressArgs struct {
	// The IP address in the subnet that you want to use for DNS queries.
	Ip   pulumix.Input[*string] `pulumi:"ip"`
	IpId pulumix.Input[*string] `pulumi:"ipId"`
	// The ID of the subnet that contains the IP address.
	SubnetId pulumix.Input[string] `pulumi:"subnetId"`
}

func (ResolverEndpointIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return i.ToResolverEndpointIpAddressOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressArgs) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressOutput)
}

func (i *ResolverEndpointIpAddressArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverEndpointIpAddressArgs] {
	return pulumix.Val(i)
}

type ResolverEndpointIpAddressOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddress)(nil)).Elem()
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutput() ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) ToResolverEndpointIpAddressOutputWithContext(ctx context.Context) ResolverEndpointIpAddressOutput {
	return o
}

func (o ResolverEndpointIpAddressOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverEndpointIpAddress] {
	return pulumix.Output[ResolverEndpointIpAddress]{
		OutputState: o.OutputState,
	}
}

// The IP address in the subnet that you want to use for DNS queries.
func (o ResolverEndpointIpAddressOutput) Ip() pulumix.Output[*string] {
	return pulumix.Apply[ResolverEndpointIpAddress](o, func(v ResolverEndpointIpAddress) *string { return v.Ip })
}

func (o ResolverEndpointIpAddressOutput) IpId() pulumix.Output[*string] {
	return pulumix.Apply[ResolverEndpointIpAddress](o, func(v ResolverEndpointIpAddress) *string { return v.IpId })
}

// The ID of the subnet that contains the IP address.
func (o ResolverEndpointIpAddressOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[ResolverEndpointIpAddress](o, func(v ResolverEndpointIpAddress) string { return v.SubnetId })
}

type ResolverRuleTargetIp struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip string `pulumi:"ip"`
	// The port at `ip` that you want to forward DNS queries to. Default value is `53`
	Port *int `pulumi:"port"`
}

type ResolverRuleTargetIpArgs struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip pulumix.Input[string] `pulumi:"ip"`
	// The port at `ip` that you want to forward DNS queries to. Default value is `53`
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (ResolverRuleTargetIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return i.ToResolverRuleTargetIpOutputWithContext(context.Background())
}

func (i ResolverRuleTargetIpArgs) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetIpOutput)
}

func (i *ResolverRuleTargetIpArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverRuleTargetIpArgs] {
	return pulumix.Val(i)
}

type ResolverRuleTargetIpOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetIp)(nil)).Elem()
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutput() ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) ToResolverRuleTargetIpOutputWithContext(ctx context.Context) ResolverRuleTargetIpOutput {
	return o
}

func (o ResolverRuleTargetIpOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverRuleTargetIp] {
	return pulumix.Output[ResolverRuleTargetIp]{
		OutputState: o.OutputState,
	}
}

// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
func (o ResolverRuleTargetIpOutput) Ip() pulumix.Output[string] {
	return pulumix.Apply[ResolverRuleTargetIp](o, func(v ResolverRuleTargetIp) string { return v.Ip })
}

// The port at `ip` that you want to forward DNS queries to. Default value is `53`
func (o ResolverRuleTargetIpOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[ResolverRuleTargetIp](o, func(v ResolverRuleTargetIp) *int { return v.Port })
}

type ZoneVpc struct {
	// ID of the VPC to associate.
	VpcId string `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion *string `pulumi:"vpcRegion"`
}

type ZoneVpcArgs struct {
	// ID of the VPC to associate.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
	// Region of the VPC to associate. Defaults to AWS provider region.
	VpcRegion pulumix.Input[*string] `pulumi:"vpcRegion"`
}

func (ZoneVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (i ZoneVpcArgs) ToZoneVpcOutput() ZoneVpcOutput {
	return i.ToZoneVpcOutputWithContext(context.Background())
}

func (i ZoneVpcArgs) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneVpcOutput)
}

func (i *ZoneVpcArgs) ToOutput(ctx context.Context) pulumix.Output[*ZoneVpcArgs] {
	return pulumix.Val(i)
}

type ZoneVpcOutput struct{ *pulumi.OutputState }

func (ZoneVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneVpc)(nil)).Elem()
}

func (o ZoneVpcOutput) ToZoneVpcOutput() ZoneVpcOutput {
	return o
}

func (o ZoneVpcOutput) ToZoneVpcOutputWithContext(ctx context.Context) ZoneVpcOutput {
	return o
}

func (o ZoneVpcOutput) ToOutput(ctx context.Context) pulumix.Output[ZoneVpc] {
	return pulumix.Output[ZoneVpc]{
		OutputState: o.OutputState,
	}
}

// ID of the VPC to associate.
func (o ZoneVpcOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[ZoneVpc](o, func(v ZoneVpc) string { return v.VpcId })
}

// Region of the VPC to associate. Defaults to AWS provider region.
func (o ZoneVpcOutput) VpcRegion() pulumix.Output[*string] {
	return pulumix.Apply[ZoneVpc](o, func(v ZoneVpc) *string { return v.VpcRegion })
}

type GetQueryLogConfigFilter struct {
	// The name of the query logging configuration.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetQueryLogConfigFilterArgs struct {
	// The name of the query logging configuration.
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetQueryLogConfigFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigFilter)(nil)).Elem()
}

func (i GetQueryLogConfigFilterArgs) ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput {
	return i.ToGetQueryLogConfigFilterOutputWithContext(context.Background())
}

func (i GetQueryLogConfigFilterArgs) ToGetQueryLogConfigFilterOutputWithContext(ctx context.Context) GetQueryLogConfigFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryLogConfigFilterOutput)
}

func (i *GetQueryLogConfigFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetQueryLogConfigFilterArgs] {
	return pulumix.Val(i)
}

type GetQueryLogConfigFilterOutput struct{ *pulumi.OutputState }

func (GetQueryLogConfigFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryLogConfigFilter)(nil)).Elem()
}

func (o GetQueryLogConfigFilterOutput) ToGetQueryLogConfigFilterOutput() GetQueryLogConfigFilterOutput {
	return o
}

func (o GetQueryLogConfigFilterOutput) ToGetQueryLogConfigFilterOutputWithContext(ctx context.Context) GetQueryLogConfigFilterOutput {
	return o
}

func (o GetQueryLogConfigFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetQueryLogConfigFilter] {
	return pulumix.Output[GetQueryLogConfigFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the query logging configuration.
func (o GetQueryLogConfigFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetQueryLogConfigFilter](o, func(v GetQueryLogConfigFilter) string { return v.Name })
}

func (o GetQueryLogConfigFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetQueryLogConfigFilter](o, func(v GetQueryLogConfigFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetResolverEndpointFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetResolverEndpointFilterArgs struct {
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetResolverEndpointFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointFilter)(nil)).Elem()
}

func (i GetResolverEndpointFilterArgs) ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput {
	return i.ToGetResolverEndpointFilterOutputWithContext(context.Background())
}

func (i GetResolverEndpointFilterArgs) ToGetResolverEndpointFilterOutputWithContext(ctx context.Context) GetResolverEndpointFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointFilterOutput)
}

func (i *GetResolverEndpointFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResolverEndpointFilterArgs] {
	return pulumix.Val(i)
}

type GetResolverEndpointFilterOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointFilter)(nil)).Elem()
}

func (o GetResolverEndpointFilterOutput) ToGetResolverEndpointFilterOutput() GetResolverEndpointFilterOutput {
	return o
}

func (o GetResolverEndpointFilterOutput) ToGetResolverEndpointFilterOutputWithContext(ctx context.Context) GetResolverEndpointFilterOutput {
	return o
}

func (o GetResolverEndpointFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetResolverEndpointFilter] {
	return pulumix.Output[GetResolverEndpointFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetResolverEndpointFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetResolverEndpointFilter](o, func(v GetResolverEndpointFilter) string { return v.Name })
}

func (o GetResolverEndpointFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetResolverEndpointFilter](o, func(v GetResolverEndpointFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetResolverFirewallRulesFirewallRule struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action string `pulumi:"action"`
	// The DNS record's type.
	BlockOverrideDnsType string `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain string `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
	BlockOverrideTtl int `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request.
	BlockResponse string `pulumi:"blockResponse"`
	// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
	CreationTime string `pulumi:"creationTime"`
	// A unique string defined by you to identify the request.
	CreatorRequestId string `pulumi:"creatorRequestId"`
	// The ID of the domain list that's used in the rule.
	FirewallDomainListId string `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId string `pulumi:"firewallRuleGroupId"`
	// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
	ModificationTime string `pulumi:"modificationTime"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority int `pulumi:"priority"`
}

type GetResolverFirewallRulesFirewallRuleArgs struct {
	// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
	Action pulumix.Input[string] `pulumi:"action"`
	// The DNS record's type.
	BlockOverrideDnsType pulumix.Input[string] `pulumi:"blockOverrideDnsType"`
	// The custom DNS record to send back in response to the query.
	BlockOverrideDomain pulumix.Input[string] `pulumi:"blockOverrideDomain"`
	// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
	BlockOverrideTtl pulumix.Input[int] `pulumi:"blockOverrideTtl"`
	// The way that you want DNS Firewall to block the request.
	BlockResponse pulumix.Input[string] `pulumi:"blockResponse"`
	// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
	CreationTime pulumix.Input[string] `pulumi:"creationTime"`
	// A unique string defined by you to identify the request.
	CreatorRequestId pulumix.Input[string] `pulumi:"creatorRequestId"`
	// The ID of the domain list that's used in the rule.
	FirewallDomainListId pulumix.Input[string] `pulumi:"firewallDomainListId"`
	// The unique identifier of the firewall rule group that you want to retrieve the rules for.
	FirewallRuleGroupId pulumix.Input[string] `pulumi:"firewallRuleGroupId"`
	// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
	ModificationTime pulumix.Input[string] `pulumi:"modificationTime"`
	// The name of the rule.
	Name pulumix.Input[string] `pulumi:"name"`
	// The setting that determines the processing order of the rules in a rule group.
	Priority pulumix.Input[int] `pulumi:"priority"`
}

func (GetResolverFirewallRulesFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (i GetResolverFirewallRulesFirewallRuleArgs) ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput {
	return i.ToGetResolverFirewallRulesFirewallRuleOutputWithContext(context.Background())
}

func (i GetResolverFirewallRulesFirewallRuleArgs) ToGetResolverFirewallRulesFirewallRuleOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverFirewallRulesFirewallRuleOutput)
}

func (i *GetResolverFirewallRulesFirewallRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetResolverFirewallRulesFirewallRuleArgs] {
	return pulumix.Val(i)
}

type GetResolverFirewallRulesFirewallRuleOutput struct{ *pulumi.OutputState }

func (GetResolverFirewallRulesFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverFirewallRulesFirewallRule)(nil)).Elem()
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToGetResolverFirewallRulesFirewallRuleOutput() GetResolverFirewallRulesFirewallRuleOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToGetResolverFirewallRulesFirewallRuleOutputWithContext(ctx context.Context) GetResolverFirewallRulesFirewallRuleOutput {
	return o
}

func (o GetResolverFirewallRulesFirewallRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetResolverFirewallRulesFirewallRule] {
	return pulumix.Output[GetResolverFirewallRulesFirewallRule]{
		OutputState: o.OutputState,
	}
}

// The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
func (o GetResolverFirewallRulesFirewallRuleOutput) Action() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.Action })
}

// The DNS record's type.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideDnsType() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockOverrideDnsType })
}

// The custom DNS record to send back in response to the query.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideDomain() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockOverrideDomain })
}

// The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockOverrideTtl() pulumix.Output[int] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) int { return v.BlockOverrideTtl })
}

// The way that you want DNS Firewall to block the request.
func (o GetResolverFirewallRulesFirewallRuleOutput) BlockResponse() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.BlockResponse })
}

// The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
func (o GetResolverFirewallRulesFirewallRuleOutput) CreationTime() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.CreationTime })
}

// A unique string defined by you to identify the request.
func (o GetResolverFirewallRulesFirewallRuleOutput) CreatorRequestId() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.CreatorRequestId })
}

// The ID of the domain list that's used in the rule.
func (o GetResolverFirewallRulesFirewallRuleOutput) FirewallDomainListId() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.FirewallDomainListId })
}

// The unique identifier of the firewall rule group that you want to retrieve the rules for.
func (o GetResolverFirewallRulesFirewallRuleOutput) FirewallRuleGroupId() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.FirewallRuleGroupId })
}

// The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
func (o GetResolverFirewallRulesFirewallRuleOutput) ModificationTime() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.ModificationTime })
}

// The name of the rule.
func (o GetResolverFirewallRulesFirewallRuleOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) string { return v.Name })
}

// The setting that determines the processing order of the rules in a rule group.
func (o GetResolverFirewallRulesFirewallRuleOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[GetResolverFirewallRulesFirewallRule](o, func(v GetResolverFirewallRulesFirewallRule) int { return v.Priority })
}

type GetTrafficPolicyDocumentEndpoint struct {
	// ID of an endpoint you want to assign.
	Id string `pulumi:"id"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Region *string `pulumi:"region"`
	// Type of the endpoint. Valid values are `value` , `cloudfront` , `elastic-load-balancer`, `s3-website`
	Type *string `pulumi:"type"`
	// Value of the `type`.
	Value *string `pulumi:"value"`
}

type GetTrafficPolicyDocumentEndpointArgs struct {
	// ID of an endpoint you want to assign.
	Id pulumix.Input[string] `pulumi:"id"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Region pulumix.Input[*string] `pulumi:"region"`
	// Type of the endpoint. Valid values are `value` , `cloudfront` , `elastic-load-balancer`, `s3-website`
	Type pulumix.Input[*string] `pulumi:"type"`
	// Value of the `type`.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (GetTrafficPolicyDocumentEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentEndpointArgs) ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput {
	return i.ToGetTrafficPolicyDocumentEndpointOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentEndpointArgs) ToGetTrafficPolicyDocumentEndpointOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentEndpointOutput)
}

func (i *GetTrafficPolicyDocumentEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentEndpointArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentEndpointOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentEndpoint)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToGetTrafficPolicyDocumentEndpointOutput() GetTrafficPolicyDocumentEndpointOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToGetTrafficPolicyDocumentEndpointOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentEndpointOutput {
	return o
}

func (o GetTrafficPolicyDocumentEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentEndpoint] {
	return pulumix.Output[GetTrafficPolicyDocumentEndpoint]{
		OutputState: o.OutputState,
	}
}

// ID of an endpoint you want to assign.
func (o GetTrafficPolicyDocumentEndpointOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetTrafficPolicyDocumentEndpoint](o, func(v GetTrafficPolicyDocumentEndpoint) string { return v.Id })
}

// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
func (o GetTrafficPolicyDocumentEndpointOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentEndpoint](o, func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Region })
}

// Type of the endpoint. Valid values are `value` , `cloudfront` , `elastic-load-balancer`, `s3-website`
func (o GetTrafficPolicyDocumentEndpointOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentEndpoint](o, func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Type })
}

// Value of the `type`.
func (o GetTrafficPolicyDocumentEndpointOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentEndpoint](o, func(v GetTrafficPolicyDocumentEndpoint) *string { return v.Value })
}

type GetTrafficPolicyDocumentRule struct {
	// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
	GeoProximityLocations []GetTrafficPolicyDocumentRuleGeoProximityLocation `pulumi:"geoProximityLocations"`
	// ID of a rule you want to assign.
	Id string `pulumi:"id"`
	// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
	Items []GetTrafficPolicyDocumentRuleItem `pulumi:"items"`
	// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
	Locations []GetTrafficPolicyDocumentRuleLocation `pulumi:"locations"`
	// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
	Primary *GetTrafficPolicyDocumentRulePrimary `pulumi:"primary"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Regions []GetTrafficPolicyDocumentRuleRegion `pulumi:"regions"`
	// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
	Secondary *GetTrafficPolicyDocumentRuleSecondary `pulumi:"secondary"`
	// Type of the rule.
	Type *string `pulumi:"type"`
}

type GetTrafficPolicyDocumentRuleArgs struct {
	// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
	GeoProximityLocations pulumix.Input[[]*GetTrafficPolicyDocumentRuleGeoProximityLocationArgs] `pulumi:"geoProximityLocations"`
	// ID of a rule you want to assign.
	Id pulumix.Input[string] `pulumi:"id"`
	// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
	Items pulumix.Input[[]*GetTrafficPolicyDocumentRuleItemArgs] `pulumi:"items"`
	// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
	Locations pulumix.Input[[]*GetTrafficPolicyDocumentRuleLocationArgs] `pulumi:"locations"`
	// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
	Primary pulumix.Input[*GetTrafficPolicyDocumentRulePrimaryArgs] `pulumi:"primary"`
	// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
	Regions pulumix.Input[[]*GetTrafficPolicyDocumentRuleRegionArgs] `pulumi:"regions"`
	// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
	Secondary pulumix.Input[*GetTrafficPolicyDocumentRuleSecondaryArgs] `pulumi:"secondary"`
	// Type of the rule.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (GetTrafficPolicyDocumentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleArgs) ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput {
	return i.ToGetTrafficPolicyDocumentRuleOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleArgs) ToGetTrafficPolicyDocumentRuleOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleOutput)
}

func (i *GetTrafficPolicyDocumentRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRuleArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRuleOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRule)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleOutput) ToGetTrafficPolicyDocumentRuleOutput() GetTrafficPolicyDocumentRuleOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleOutput) ToGetTrafficPolicyDocumentRuleOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRule] {
	return pulumix.Output[GetTrafficPolicyDocumentRule]{
		OutputState: o.OutputState,
	}
}

// Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) GeoProximityLocations() pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleGeoProximityLocation, GetTrafficPolicyDocumentRuleGeoProximityLocationOutput] {
	value := pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleGeoProximityLocation {
		return v.GeoProximityLocations
	})
	return pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleGeoProximityLocation, GetTrafficPolicyDocumentRuleGeoProximityLocationOutput]{OutputState: value.OutputState}
}

// ID of a rule you want to assign.
func (o GetTrafficPolicyDocumentRuleOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) string { return v.Id })
}

// Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Items() pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleItem, GetTrafficPolicyDocumentRuleItemOutput] {
	value := pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleItem { return v.Items })
	return pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleItem, GetTrafficPolicyDocumentRuleItemOutput]{OutputState: value.OutputState}
}

// Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Locations() pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleLocation, GetTrafficPolicyDocumentRuleLocationOutput] {
	value := pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleLocation { return v.Locations })
	return pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleLocation, GetTrafficPolicyDocumentRuleLocationOutput]{OutputState: value.OutputState}
}

// Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Primary() pulumix.GPtrOutput[GetTrafficPolicyDocumentRulePrimary, GetTrafficPolicyDocumentRulePrimaryOutput] {
	value := pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) *GetTrafficPolicyDocumentRulePrimary { return v.Primary })
	return pulumix.GPtrOutput[GetTrafficPolicyDocumentRulePrimary, GetTrafficPolicyDocumentRulePrimaryOutput]{OutputState: value.OutputState}
}

// To route traffic to an Amazon S3 bucket that is configured as a website endpoint, specify the region in which you created the bucket for `region`.
func (o GetTrafficPolicyDocumentRuleOutput) Regions() pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleRegion, GetTrafficPolicyDocumentRuleRegionOutput] {
	value := pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) []GetTrafficPolicyDocumentRuleRegion { return v.Regions })
	return pulumix.GArrayOutput[GetTrafficPolicyDocumentRuleRegion, GetTrafficPolicyDocumentRuleRegionOutput]{OutputState: value.OutputState}
}

// Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
func (o GetTrafficPolicyDocumentRuleOutput) Secondary() pulumix.GPtrOutput[GetTrafficPolicyDocumentRuleSecondary, GetTrafficPolicyDocumentRuleSecondaryOutput] {
	value := pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) *GetTrafficPolicyDocumentRuleSecondary { return v.Secondary })
	return pulumix.GPtrOutput[GetTrafficPolicyDocumentRuleSecondary, GetTrafficPolicyDocumentRuleSecondaryOutput]{OutputState: value.OutputState}
}

// Type of the rule.
func (o GetTrafficPolicyDocumentRuleOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRule](o, func(v GetTrafficPolicyDocumentRule) *string { return v.Type })
}

type GetTrafficPolicyDocumentRuleGeoProximityLocation struct {
	// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
	Bias *string `pulumi:"bias"`
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
	Latitude *string `pulumi:"latitude"`
	// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
	Longitude *string `pulumi:"longitude"`
	// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
	Region *string `pulumi:"region"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationArgs struct {
	// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
	Bias pulumix.Input[*string] `pulumi:"bias"`
	// References to an endpoint.
	EndpointReference pulumix.Input[*string] `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumix.Input[*bool] `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
	// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
	Latitude pulumix.Input[*string] `pulumi:"latitude"`
	// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
	Longitude pulumix.Input[*string] `pulumi:"longitude"`
	// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
	Region pulumix.Input[*string] `pulumi:"region"`
	// References to a rule.
	RuleReference pulumix.Input[*string] `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return i.ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput)
}

func (i *GetTrafficPolicyDocumentRuleGeoProximityLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRuleGeoProximityLocationArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRuleGeoProximityLocationOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleGeoProximityLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutput() GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToGetTrafficPolicyDocumentRuleGeoProximityLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleGeoProximityLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRuleGeoProximityLocation] {
	return pulumix.Output[GetTrafficPolicyDocumentRuleGeoProximityLocation]{
		OutputState: o.OutputState,
	}
}

// Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Bias() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Bias })
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) EndpointReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.EndpointReference })
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) EvaluateTargetHealth() pulumix.Output[*bool] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *bool { return v.EvaluateTargetHealth })
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.HealthCheck })
}

// Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Latitude() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Latitude })
}

// Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Longitude() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Longitude })
}

// If your endpoint is an AWS resource, specify the AWS Region that you created the resource in.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.Region })
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleGeoProximityLocationOutput) RuleReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleGeoProximityLocation](o, func(v GetTrafficPolicyDocumentRuleGeoProximityLocation) *string { return v.RuleReference })
}

type GetTrafficPolicyDocumentRuleItem struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
}

type GetTrafficPolicyDocumentRuleItemArgs struct {
	// References to an endpoint.
	EndpointReference pulumix.Input[*string] `pulumi:"endpointReference"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
}

func (GetTrafficPolicyDocumentRuleItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleItemArgs) ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput {
	return i.ToGetTrafficPolicyDocumentRuleItemOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleItemArgs) ToGetTrafficPolicyDocumentRuleItemOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleItemOutput)
}

func (i *GetTrafficPolicyDocumentRuleItemArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRuleItemArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRuleItemOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleItem)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToGetTrafficPolicyDocumentRuleItemOutput() GetTrafficPolicyDocumentRuleItemOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToGetTrafficPolicyDocumentRuleItemOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleItemOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleItemOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRuleItem] {
	return pulumix.Output[GetTrafficPolicyDocumentRuleItem]{
		OutputState: o.OutputState,
	}
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleItemOutput) EndpointReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleItem](o, func(v GetTrafficPolicyDocumentRuleItem) *string { return v.EndpointReference })
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleItemOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleItem](o, func(v GetTrafficPolicyDocumentRuleItem) *string { return v.HealthCheck })
}

type GetTrafficPolicyDocumentRuleLocation struct {
	// Value of a continent.
	Continent *string `pulumi:"continent"`
	// Value of a country.
	Country *string `pulumi:"country"`
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Indicates whether this set of values represents the default location.
	IsDefault *bool `pulumi:"isDefault"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
	// Value of a subdivision.
	Subdivision *string `pulumi:"subdivision"`
}

type GetTrafficPolicyDocumentRuleLocationArgs struct {
	// Value of a continent.
	Continent pulumix.Input[*string] `pulumi:"continent"`
	// Value of a country.
	Country pulumix.Input[*string] `pulumi:"country"`
	// References to an endpoint.
	EndpointReference pulumix.Input[*string] `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumix.Input[*bool] `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
	// Indicates whether this set of values represents the default location.
	IsDefault pulumix.Input[*bool] `pulumi:"isDefault"`
	// References to a rule.
	RuleReference pulumix.Input[*string] `pulumi:"ruleReference"`
	// Value of a subdivision.
	Subdivision pulumix.Input[*string] `pulumi:"subdivision"`
}

func (GetTrafficPolicyDocumentRuleLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleLocationArgs) ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput {
	return i.ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleLocationArgs) ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleLocationOutput)
}

func (i *GetTrafficPolicyDocumentRuleLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRuleLocationArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRuleLocationOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleLocation)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToGetTrafficPolicyDocumentRuleLocationOutput() GetTrafficPolicyDocumentRuleLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToGetTrafficPolicyDocumentRuleLocationOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleLocationOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleLocationOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRuleLocation] {
	return pulumix.Output[GetTrafficPolicyDocumentRuleLocation]{
		OutputState: o.OutputState,
	}
}

// Value of a continent.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Continent() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Continent })
}

// Value of a country.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Country() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Country })
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleLocationOutput) EndpointReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.EndpointReference })
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleLocationOutput) EvaluateTargetHealth() pulumix.Output[*bool] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *bool { return v.EvaluateTargetHealth })
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleLocationOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.HealthCheck })
}

// Indicates whether this set of values represents the default location.
func (o GetTrafficPolicyDocumentRuleLocationOutput) IsDefault() pulumix.Output[*bool] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *bool { return v.IsDefault })
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleLocationOutput) RuleReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.RuleReference })
}

// Value of a subdivision.
func (o GetTrafficPolicyDocumentRuleLocationOutput) Subdivision() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleLocation](o, func(v GetTrafficPolicyDocumentRuleLocation) *string { return v.Subdivision })
}

type GetTrafficPolicyDocumentRulePrimary struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

type GetTrafficPolicyDocumentRulePrimaryArgs struct {
	// References to an endpoint.
	EndpointReference pulumix.Input[*string] `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumix.Input[*bool] `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference pulumix.Input[*string] `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRulePrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput {
	return i.ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRulePrimaryArgs) ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRulePrimaryOutput)
}

func (i *GetTrafficPolicyDocumentRulePrimaryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRulePrimaryArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRulePrimaryOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRulePrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRulePrimary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryOutput() GetTrafficPolicyDocumentRulePrimaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToGetTrafficPolicyDocumentRulePrimaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRulePrimaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRulePrimaryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRulePrimary] {
	return pulumix.Output[GetTrafficPolicyDocumentRulePrimary]{
		OutputState: o.OutputState,
	}
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) EndpointReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRulePrimary](o, func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.EndpointReference })
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) EvaluateTargetHealth() pulumix.Output[*bool] {
	return pulumix.Apply[GetTrafficPolicyDocumentRulePrimary](o, func(v GetTrafficPolicyDocumentRulePrimary) *bool { return v.EvaluateTargetHealth })
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRulePrimary](o, func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.HealthCheck })
}

// References to a rule.
func (o GetTrafficPolicyDocumentRulePrimaryOutput) RuleReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRulePrimary](o, func(v GetTrafficPolicyDocumentRulePrimary) *string { return v.RuleReference })
}

type GetTrafficPolicyDocumentRuleRegion struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// Region code for the AWS Region that you created the resource in.
	Region *string `pulumi:"region"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

type GetTrafficPolicyDocumentRuleRegionArgs struct {
	// References to an endpoint.
	EndpointReference pulumix.Input[*string] `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumix.Input[*bool] `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
	// Region code for the AWS Region that you created the resource in.
	Region pulumix.Input[*string] `pulumi:"region"`
	// References to a rule.
	RuleReference pulumix.Input[*string] `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleRegionArgs) ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput {
	return i.ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleRegionArgs) ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleRegionOutput)
}

func (i *GetTrafficPolicyDocumentRuleRegionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRuleRegionArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRuleRegionOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleRegion)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToGetTrafficPolicyDocumentRuleRegionOutput() GetTrafficPolicyDocumentRuleRegionOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToGetTrafficPolicyDocumentRuleRegionOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleRegionOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRuleRegion] {
	return pulumix.Output[GetTrafficPolicyDocumentRuleRegion]{
		OutputState: o.OutputState,
	}
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleRegionOutput) EndpointReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleRegion](o, func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.EndpointReference })
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleRegionOutput) EvaluateTargetHealth() pulumix.Output[*bool] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleRegion](o, func(v GetTrafficPolicyDocumentRuleRegion) *bool { return v.EvaluateTargetHealth })
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleRegionOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleRegion](o, func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.HealthCheck })
}

// Region code for the AWS Region that you created the resource in.
func (o GetTrafficPolicyDocumentRuleRegionOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleRegion](o, func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.Region })
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleRegionOutput) RuleReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleRegion](o, func(v GetTrafficPolicyDocumentRuleRegion) *string { return v.RuleReference })
}

type GetTrafficPolicyDocumentRuleSecondary struct {
	// References to an endpoint.
	EndpointReference *string `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth *bool `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck *string `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference *string `pulumi:"ruleReference"`
}

type GetTrafficPolicyDocumentRuleSecondaryArgs struct {
	// References to an endpoint.
	EndpointReference pulumix.Input[*string] `pulumi:"endpointReference"`
	// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
	EvaluateTargetHealth pulumix.Input[*bool] `pulumi:"evaluateTargetHealth"`
	// If you want to associate a health check with the endpoint or rule.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
	// References to a rule.
	RuleReference pulumix.Input[*string] `pulumi:"ruleReference"`
}

func (GetTrafficPolicyDocumentRuleSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return i.ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(context.Background())
}

func (i GetTrafficPolicyDocumentRuleSecondaryArgs) ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTrafficPolicyDocumentRuleSecondaryOutput)
}

func (i *GetTrafficPolicyDocumentRuleSecondaryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTrafficPolicyDocumentRuleSecondaryArgs] {
	return pulumix.Val(i)
}

type GetTrafficPolicyDocumentRuleSecondaryOutput struct{ *pulumi.OutputState }

func (GetTrafficPolicyDocumentRuleSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficPolicyDocumentRuleSecondary)(nil)).Elem()
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryOutput() GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToGetTrafficPolicyDocumentRuleSecondaryOutputWithContext(ctx context.Context) GetTrafficPolicyDocumentRuleSecondaryOutput {
	return o
}

func (o GetTrafficPolicyDocumentRuleSecondaryOutput) ToOutput(ctx context.Context) pulumix.Output[GetTrafficPolicyDocumentRuleSecondary] {
	return pulumix.Output[GetTrafficPolicyDocumentRuleSecondary]{
		OutputState: o.OutputState,
	}
}

// References to an endpoint.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) EndpointReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleSecondary](o, func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.EndpointReference })
}

// Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) EvaluateTargetHealth() pulumix.Output[*bool] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleSecondary](o, func(v GetTrafficPolicyDocumentRuleSecondary) *bool { return v.EvaluateTargetHealth })
}

// If you want to associate a health check with the endpoint or rule.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleSecondary](o, func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.HealthCheck })
}

// References to a rule.
func (o GetTrafficPolicyDocumentRuleSecondaryOutput) RuleReference() pulumix.Output[*string] {
	return pulumix.Apply[GetTrafficPolicyDocumentRuleSecondary](o, func(v GetTrafficPolicyDocumentRuleSecondary) *string { return v.RuleReference })
}

func init() {
	pulumi.RegisterOutputType(RecordAliasOutput{})
	pulumi.RegisterOutputType(RecordCidrRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordFailoverRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordGeolocationRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordLatencyRoutingPolicyOutput{})
	pulumi.RegisterOutputType(RecordWeightedRoutingPolicyOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetIpOutput{})
	pulumi.RegisterOutputType(ZoneVpcOutput{})
	pulumi.RegisterOutputType(GetQueryLogConfigFilterOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointFilterOutput{})
	pulumi.RegisterOutputType(GetResolverFirewallRulesFirewallRuleOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentEndpointOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleGeoProximityLocationOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleItemOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleLocationOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRulePrimaryOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleRegionOutput{})
	pulumi.RegisterOutputType(GetTrafficPolicyDocumentRuleSecondaryOutput{})
}
