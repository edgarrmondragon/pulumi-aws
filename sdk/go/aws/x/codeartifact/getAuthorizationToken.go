// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The CodeArtifact Authorization Token data source generates a temporary authentication token for accessing repositories in a CodeArtifact domain.
func GetAuthorizationToken(ctx *pulumi.Context, args *GetAuthorizationTokenArgs, opts ...pulumi.InvokeOption) (*GetAuthorizationTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAuthorizationTokenResult
	err := ctx.Invoke("aws:codeartifact/getAuthorizationToken:getAuthorizationToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthorizationToken.
type GetAuthorizationTokenArgs struct {
	// Name of the domain that is in scope for the generated authorization token.
	Domain string `pulumi:"domain"`
	// Account number of the AWS account that owns the domain.
	DomainOwner *string `pulumi:"domainOwner"`
	// Time, in seconds, that the generated authorization token is valid. Valid values are `0` and between `900` and `43200`.
	DurationSeconds *int `pulumi:"durationSeconds"`
}

// A collection of values returned by getAuthorizationToken.
type GetAuthorizationTokenResult struct {
	// Temporary authorization token.
	AuthorizationToken string `pulumi:"authorizationToken"`
	Domain             string `pulumi:"domain"`
	DomainOwner        string `pulumi:"domainOwner"`
	DurationSeconds    *int   `pulumi:"durationSeconds"`
	// Time in UTC RFC3339 format when the authorization token expires.
	Expiration string `pulumi:"expiration"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetAuthorizationTokenOutput(ctx *pulumi.Context, args GetAuthorizationTokenOutputArgs, opts ...pulumi.InvokeOption) GetAuthorizationTokenResultOutput {
	outputResult := pulumix.ApplyErr[*GetAuthorizationTokenArgs](args.ToOutput(), func(plainArgs *GetAuthorizationTokenArgs) (*GetAuthorizationTokenResult, error) {
		return GetAuthorizationToken(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetAuthorizationTokenResultOutput, *GetAuthorizationTokenResult](outputResult)
}

// A collection of arguments for invoking getAuthorizationToken.
type GetAuthorizationTokenOutputArgs struct {
	// Name of the domain that is in scope for the generated authorization token.
	Domain pulumix.Input[string] `pulumi:"domain"`
	// Account number of the AWS account that owns the domain.
	DomainOwner pulumix.Input[*string] `pulumi:"domainOwner"`
	// Time, in seconds, that the generated authorization token is valid. Valid values are `0` and between `900` and `43200`.
	DurationSeconds pulumix.Input[*int] `pulumi:"durationSeconds"`
}

func (args GetAuthorizationTokenOutputArgs) ToOutput() pulumix.Output[*GetAuthorizationTokenArgs] {
	allArgs := pulumix.All(
		args.Domain.ToOutput(context.Background()).AsAny(),
		args.DomainOwner.ToOutput(context.Background()).AsAny(),
		args.DurationSeconds.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetAuthorizationTokenArgs {
		return &GetAuthorizationTokenArgs{
			Domain:          resolvedArgs[0].(string),
			DomainOwner:     resolvedArgs[1].(*string),
			DurationSeconds: resolvedArgs[2].(*int),
		}
	})
}

type GetAuthorizationTokenResultOutput struct{ *pulumi.OutputState }

func (GetAuthorizationTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthorizationTokenResult)(nil)).Elem()
}

func (o GetAuthorizationTokenResultOutput) ToOutput(context.Context) pulumix.Output[*GetAuthorizationTokenResult] {
	return pulumix.Output[*GetAuthorizationTokenResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAuthorizationTokenResultOutput) AuthorizationToken() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.AuthorizationToken })
}

func (o GetAuthorizationTokenResultOutput) Domain() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.Domain })
}

func (o GetAuthorizationTokenResultOutput) DomainOwner() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.DomainOwner })
}

func (o GetAuthorizationTokenResultOutput) DurationSeconds() pulumix.Output[*int] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) *int { return v.DurationSeconds })
}

func (o GetAuthorizationTokenResultOutput) Expiration() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.Expiration })
}

func (o GetAuthorizationTokenResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetAuthorizationTokenResult](o, func(v *GetAuthorizationTokenResult) string { return v.Id })
}
