// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARN of an AWS Transfer Server for use in other
// resources.
func LookupServer(ctx *pulumi.Context, args *LookupServerArgs, opts ...pulumi.InvokeOption) (*LookupServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerResult
	err := ctx.Invoke("aws:transfer/getServer:getServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServer.
type LookupServerArgs struct {
	// ID for an SFTP server.
	ServerId string `pulumi:"serverId"`
}

// A collection of values returned by getServer.
type LookupServerResult struct {
	// ARN of Transfer Server.
	Arn string `pulumi:"arn"`
	// ARN of any certificate.
	Certificate string `pulumi:"certificate"`
	// The domain of the storage system that is used for file transfers.
	Domain string `pulumi:"domain"`
	// Endpoint of the Transfer Server (e.g., `s-12345678.server.transfer.REGION.amazonaws.com`).
	Endpoint string `pulumi:"endpoint"`
	// Type of endpoint that the server is connected to.
	EndpointType string `pulumi:"endpointType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
	IdentityProviderType string `pulumi:"identityProviderType"`
	// ARN of the IAM role used to authenticate the user account with an `identityProviderType` of `API_GATEWAY`.
	InvocationRole string `pulumi:"invocationRole"`
	// ARN of an IAM role that allows the service to write your SFTP usersâ€™ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
	LoggingRole string `pulumi:"loggingRole"`
	// File transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint.
	Protocols []string `pulumi:"protocols"`
	// The name of the security policy that is attached to the server.
	SecurityPolicyName string `pulumi:"securityPolicyName"`
	ServerId           string `pulumi:"serverId"`
	// A set of ARNs of destinations that will receive structured logs from the transfer server such as CloudWatch Log Group ARNs.
	StructuredLogDestinations []string `pulumi:"structuredLogDestinations"`
	// URL of the service endpoint used to authenticate users with an `identityProviderType` of `API_GATEWAY`.
	Url string `pulumi:"url"`
}

func LookupServerOutput(ctx *pulumi.Context, args LookupServerOutputArgs, opts ...pulumi.InvokeOption) LookupServerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServerArgs](args.ToOutput(), func(plainArgs *LookupServerArgs) (*LookupServerResult, error) {
		return LookupServer(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServerResultOutput, *LookupServerResult](outputResult)
}

// A collection of arguments for invoking getServer.
type LookupServerOutputArgs struct {
	// ID for an SFTP server.
	ServerId pulumix.Input[string] `pulumi:"serverId"`
}

func (args LookupServerOutputArgs) ToOutput() pulumix.Output[*LookupServerArgs] {
	allArgs := pulumix.All(
		args.ServerId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServerArgs {
		return &LookupServerArgs{
			ServerId: resolvedArgs[0].(string),
		}
	})
}

type LookupServerResultOutput struct{ *pulumi.OutputState }

func (LookupServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerResult)(nil)).Elem()
}

func (o LookupServerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServerResult] {
	return pulumix.Output[*LookupServerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.Arn })
}

func (o LookupServerResultOutput) Certificate() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.Certificate })
}

func (o LookupServerResultOutput) Domain() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.Domain })
}

func (o LookupServerResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.Endpoint })
}

func (o LookupServerResultOutput) EndpointType() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.EndpointType })
}

func (o LookupServerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.Id })
}

func (o LookupServerResultOutput) IdentityProviderType() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.IdentityProviderType })
}

func (o LookupServerResultOutput) InvocationRole() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.InvocationRole })
}

func (o LookupServerResultOutput) LoggingRole() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.LoggingRole })
}

func (o LookupServerResultOutput) Protocols() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) []string { return v.Protocols })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServerResultOutput) SecurityPolicyName() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.SecurityPolicyName })
}

func (o LookupServerResultOutput) ServerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.ServerId })
}

func (o LookupServerResultOutput) StructuredLogDestinations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) []string { return v.StructuredLogDestinations })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServerResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupServerResult](o, func(v *LookupServerResult) string { return v.Url })
}
