// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppFlow flow resource.
type Flow struct {
	pulumi.CustomResourceState

	// Flow's ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the flow you want to create.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs pulumix.GArrayOutput[FlowDestinationFlowConfig, FlowDestinationFlowConfigOutput] `pulumi:"destinationFlowConfigs"`
	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn pulumix.Output[string] `pulumi:"kmsArn"`
	// Name of the flow.
	Name pulumix.Output[string] `pulumi:"name"`
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig pulumix.GPtrOutput[FlowSourceFlowConfig, FlowSourceFlowConfigOutput] `pulumi:"sourceFlowConfig"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks pulumix.GArrayOutput[FlowTask, FlowTaskOutput] `pulumi:"tasks"`
	// A Trigger that determine how and when the flow runs.
	TriggerConfig pulumix.GPtrOutput[FlowTriggerConfig, FlowTriggerConfigOutput] `pulumi:"triggerConfig"`
}

// NewFlow registers a new resource with the given unique name, arguments, and options.
func NewFlow(ctx *pulumi.Context,
	name string, args *FlowArgs, opts ...pulumi.ResourceOption) (*Flow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationFlowConfigs == nil {
		return nil, errors.New("invalid value for required argument 'DestinationFlowConfigs'")
	}
	if args.SourceFlowConfig == nil {
		return nil, errors.New("invalid value for required argument 'SourceFlowConfig'")
	}
	if args.Tasks == nil {
		return nil, errors.New("invalid value for required argument 'Tasks'")
	}
	if args.TriggerConfig == nil {
		return nil, errors.New("invalid value for required argument 'TriggerConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Flow
	err := ctx.RegisterResource("aws:appflow/flow:Flow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlow gets an existing Flow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowState, opts ...pulumi.ResourceOption) (*Flow, error) {
	var resource Flow
	err := ctx.ReadResource("aws:appflow/flow:Flow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Flow resources.
type flowState struct {
	// Flow's ARN.
	Arn *string `pulumi:"arn"`
	// Description of the flow you want to create.
	Description *string `pulumi:"description"`
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs []FlowDestinationFlowConfig `pulumi:"destinationFlowConfigs"`
	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn *string `pulumi:"kmsArn"`
	// Name of the flow.
	Name *string `pulumi:"name"`
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig *FlowSourceFlowConfig `pulumi:"sourceFlowConfig"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks []FlowTask `pulumi:"tasks"`
	// A Trigger that determine how and when the flow runs.
	TriggerConfig *FlowTriggerConfig `pulumi:"triggerConfig"`
}

type FlowState struct {
	// Flow's ARN.
	Arn pulumix.Input[*string]
	// Description of the flow you want to create.
	Description pulumix.Input[*string]
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs pulumix.Input[[]*FlowDestinationFlowConfigArgs]
	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn pulumix.Input[*string]
	// Name of the flow.
	Name pulumix.Input[*string]
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig pulumix.Input[*FlowSourceFlowConfigArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks pulumix.Input[[]*FlowTaskArgs]
	// A Trigger that determine how and when the flow runs.
	TriggerConfig pulumix.Input[*FlowTriggerConfigArgs]
}

func (FlowState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowState)(nil)).Elem()
}

type flowArgs struct {
	// Description of the flow you want to create.
	Description *string `pulumi:"description"`
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs []FlowDestinationFlowConfig `pulumi:"destinationFlowConfigs"`
	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn *string `pulumi:"kmsArn"`
	// Name of the flow.
	Name *string `pulumi:"name"`
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig FlowSourceFlowConfig `pulumi:"sourceFlowConfig"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks []FlowTask `pulumi:"tasks"`
	// A Trigger that determine how and when the flow runs.
	TriggerConfig FlowTriggerConfig `pulumi:"triggerConfig"`
}

// The set of arguments for constructing a Flow resource.
type FlowArgs struct {
	// Description of the flow you want to create.
	Description pulumix.Input[*string]
	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	DestinationFlowConfigs pulumix.Input[[]*FlowDestinationFlowConfigArgs]
	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	KmsArn pulumix.Input[*string]
	// Name of the flow.
	Name pulumix.Input[*string]
	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	SourceFlowConfig pulumix.Input[*FlowSourceFlowConfigArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	Tasks pulumix.Input[[]*FlowTaskArgs]
	// A Trigger that determine how and when the flow runs.
	TriggerConfig pulumix.Input[*FlowTriggerConfigArgs]
}

func (FlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowArgs)(nil)).Elem()
}

type FlowOutput struct{ *pulumi.OutputState }

func (FlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Flow)(nil)).Elem()
}

func (o FlowOutput) ToFlowOutput() FlowOutput {
	return o
}

func (o FlowOutput) ToFlowOutputWithContext(ctx context.Context) FlowOutput {
	return o
}

func (o FlowOutput) ToOutput(ctx context.Context) pulumix.Output[Flow] {
	return pulumix.Output[Flow]{
		OutputState: o.OutputState,
	}
}

// Flow's ARN.
func (o FlowOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the flow you want to create.
func (o FlowOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
func (o FlowOutput) DestinationFlowConfigs() pulumix.GArrayOutput[FlowDestinationFlowConfig, FlowDestinationFlowConfigOutput] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.GArrayOutput[FlowDestinationFlowConfig, FlowDestinationFlowConfigOutput] {
		return v.DestinationFlowConfigs
	})
	unwrapped := pulumix.Flatten[[]FlowDestinationFlowConfig, pulumix.GArrayOutput[FlowDestinationFlowConfig, FlowDestinationFlowConfigOutput]](value)
	return pulumix.GArrayOutput[FlowDestinationFlowConfig, FlowDestinationFlowConfigOutput]{OutputState: unwrapped.OutputState}
}

// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
func (o FlowOutput) KmsArn() pulumix.Output[string] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.Output[string] { return v.KmsArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the flow.
func (o FlowOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
func (o FlowOutput) SourceFlowConfig() pulumix.GPtrOutput[FlowSourceFlowConfig, FlowSourceFlowConfigOutput] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.GPtrOutput[FlowSourceFlowConfig, FlowSourceFlowConfigOutput] {
		return v.SourceFlowConfig
	})
	unwrapped := pulumix.Flatten[*FlowSourceFlowConfig, pulumix.GPtrOutput[FlowSourceFlowConfig, FlowSourceFlowConfigOutput]](value)
	return pulumix.GPtrOutput[FlowSourceFlowConfig, FlowSourceFlowConfigOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FlowOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FlowOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A Task that Amazon AppFlow performs while transferring the data in the flow run.
func (o FlowOutput) Tasks() pulumix.GArrayOutput[FlowTask, FlowTaskOutput] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.GArrayOutput[FlowTask, FlowTaskOutput] { return v.Tasks })
	unwrapped := pulumix.Flatten[[]FlowTask, pulumix.GArrayOutput[FlowTask, FlowTaskOutput]](value)
	return pulumix.GArrayOutput[FlowTask, FlowTaskOutput]{OutputState: unwrapped.OutputState}
}

// A Trigger that determine how and when the flow runs.
func (o FlowOutput) TriggerConfig() pulumix.GPtrOutput[FlowTriggerConfig, FlowTriggerConfigOutput] {
	value := pulumix.Apply[Flow](o, func(v Flow) pulumix.GPtrOutput[FlowTriggerConfig, FlowTriggerConfigOutput] { return v.TriggerConfig })
	unwrapped := pulumix.Flatten[*FlowTriggerConfig, pulumix.GPtrOutput[FlowTriggerConfig, FlowTriggerConfigOutput]](value)
	return pulumix.GPtrOutput[FlowTriggerConfig, FlowTriggerConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FlowOutput{})
}
