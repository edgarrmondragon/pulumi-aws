// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route 53 Resolver config resource.
type ResolverConfig struct {
	pulumi.CustomResourceState

	// Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
	AutodefinedReverseFlag pulumix.Output[string] `pulumi:"autodefinedReverseFlag"`
	// The AWS account ID of the owner of the VPC that this resolver configuration applies to.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// The ID of the VPC that the configuration is for.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
}

// NewResolverConfig registers a new resource with the given unique name, arguments, and options.
func NewResolverConfig(ctx *pulumi.Context,
	name string, args *ResolverConfigArgs, opts ...pulumi.ResourceOption) (*ResolverConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutodefinedReverseFlag == nil {
		return nil, errors.New("invalid value for required argument 'AutodefinedReverseFlag'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverConfig
	err := ctx.RegisterResource("aws:route53/resolverConfig:ResolverConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverConfig gets an existing ResolverConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverConfigState, opts ...pulumi.ResourceOption) (*ResolverConfig, error) {
	var resource ResolverConfig
	err := ctx.ReadResource("aws:route53/resolverConfig:ResolverConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverConfig resources.
type resolverConfigState struct {
	// Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
	AutodefinedReverseFlag *string `pulumi:"autodefinedReverseFlag"`
	// The AWS account ID of the owner of the VPC that this resolver configuration applies to.
	OwnerId *string `pulumi:"ownerId"`
	// The ID of the VPC that the configuration is for.
	ResourceId *string `pulumi:"resourceId"`
}

type ResolverConfigState struct {
	// Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
	AutodefinedReverseFlag pulumix.Input[*string]
	// The AWS account ID of the owner of the VPC that this resolver configuration applies to.
	OwnerId pulumix.Input[*string]
	// The ID of the VPC that the configuration is for.
	ResourceId pulumix.Input[*string]
}

func (ResolverConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverConfigState)(nil)).Elem()
}

type resolverConfigArgs struct {
	// Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
	AutodefinedReverseFlag string `pulumi:"autodefinedReverseFlag"`
	// The ID of the VPC that the configuration is for.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResolverConfig resource.
type ResolverConfigArgs struct {
	// Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
	AutodefinedReverseFlag pulumix.Input[string]
	// The ID of the VPC that the configuration is for.
	ResourceId pulumix.Input[string]
}

func (ResolverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverConfigArgs)(nil)).Elem()
}

type ResolverConfigOutput struct{ *pulumi.OutputState }

func (ResolverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverConfig)(nil)).Elem()
}

func (o ResolverConfigOutput) ToResolverConfigOutput() ResolverConfigOutput {
	return o
}

func (o ResolverConfigOutput) ToResolverConfigOutputWithContext(ctx context.Context) ResolverConfigOutput {
	return o
}

func (o ResolverConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverConfig] {
	return pulumix.Output[ResolverConfig]{
		OutputState: o.OutputState,
	}
}

// Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.
func (o ResolverConfigOutput) AutodefinedReverseFlag() pulumix.Output[string] {
	value := pulumix.Apply[ResolverConfig](o, func(v ResolverConfig) pulumix.Output[string] { return v.AutodefinedReverseFlag })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the owner of the VPC that this resolver configuration applies to.
func (o ResolverConfigOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverConfig](o, func(v ResolverConfig) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the VPC that the configuration is for.
func (o ResolverConfigOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[ResolverConfig](o, func(v ResolverConfig) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResolverConfigOutput{})
}
