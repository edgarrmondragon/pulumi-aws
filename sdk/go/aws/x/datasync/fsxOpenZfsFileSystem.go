// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS DataSync FSx OpenZfs Location.
type FsxOpenZfsFileSystem struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The time that the FSx for openzfs location was created.
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// The Amazon Resource Name (ARN) for the FSx for OpenZfs file system.
	FsxFilesystemArn pulumix.Output[string] `pulumi:"fsxFilesystemArn"`
	// The type of protocol that DataSync uses to access your file system. See below.
	Protocol pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocol, FsxOpenZfsFileSystemProtocolOutput] `pulumi:"protocol"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for openzfs file system.
	SecurityGroupArns pulumix.ArrayOutput[string] `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination. Must start with `/fsx`.
	Subdirectory pulumix.Output[string] `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The URL of the FSx for openzfs location that was described.
	Uri pulumix.Output[string] `pulumi:"uri"`
}

// NewFsxOpenZfsFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFsxOpenZfsFileSystem(ctx *pulumi.Context,
	name string, args *FsxOpenZfsFileSystemArgs, opts ...pulumi.ResourceOption) (*FsxOpenZfsFileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsxFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'FsxFilesystemArn'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FsxOpenZfsFileSystem
	err := ctx.RegisterResource("aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFsxOpenZfsFileSystem gets an existing FsxOpenZfsFileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFsxOpenZfsFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FsxOpenZfsFileSystemState, opts ...pulumi.ResourceOption) (*FsxOpenZfsFileSystem, error) {
	var resource FsxOpenZfsFileSystem
	err := ctx.ReadResource("aws:datasync/fsxOpenZfsFileSystem:FsxOpenZfsFileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FsxOpenZfsFileSystem resources.
type fsxOpenZfsFileSystemState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// The time that the FSx for openzfs location was created.
	CreationTime *string `pulumi:"creationTime"`
	// The Amazon Resource Name (ARN) for the FSx for OpenZfs file system.
	FsxFilesystemArn *string `pulumi:"fsxFilesystemArn"`
	// The type of protocol that DataSync uses to access your file system. See below.
	Protocol *FsxOpenZfsFileSystemProtocol `pulumi:"protocol"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for openzfs file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination. Must start with `/fsx`.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The URL of the FSx for openzfs location that was described.
	Uri *string `pulumi:"uri"`
}

type FsxOpenZfsFileSystemState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Input[*string]
	// The time that the FSx for openzfs location was created.
	CreationTime pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the FSx for OpenZfs file system.
	FsxFilesystemArn pulumix.Input[*string]
	// The type of protocol that DataSync uses to access your file system. See below.
	Protocol pulumix.Input[*FsxOpenZfsFileSystemProtocolArgs]
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for openzfs file system.
	SecurityGroupArns pulumix.Input[[]string]
	// Subdirectory to perform actions as source or destination. Must start with `/fsx`.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The URL of the FSx for openzfs location that was described.
	Uri pulumix.Input[*string]
}

func (FsxOpenZfsFileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fsxOpenZfsFileSystemState)(nil)).Elem()
}

type fsxOpenZfsFileSystemArgs struct {
	// The Amazon Resource Name (ARN) for the FSx for OpenZfs file system.
	FsxFilesystemArn string `pulumi:"fsxFilesystemArn"`
	// The type of protocol that DataSync uses to access your file system. See below.
	Protocol FsxOpenZfsFileSystemProtocol `pulumi:"protocol"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for openzfs file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination. Must start with `/fsx`.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FsxOpenZfsFileSystem resource.
type FsxOpenZfsFileSystemArgs struct {
	// The Amazon Resource Name (ARN) for the FSx for OpenZfs file system.
	FsxFilesystemArn pulumix.Input[string]
	// The type of protocol that DataSync uses to access your file system. See below.
	Protocol pulumix.Input[*FsxOpenZfsFileSystemProtocolArgs]
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for openzfs file system.
	SecurityGroupArns pulumix.Input[[]string]
	// Subdirectory to perform actions as source or destination. Must start with `/fsx`.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (FsxOpenZfsFileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fsxOpenZfsFileSystemArgs)(nil)).Elem()
}

type FsxOpenZfsFileSystemOutput struct{ *pulumi.OutputState }

func (FsxOpenZfsFileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FsxOpenZfsFileSystem)(nil)).Elem()
}

func (o FsxOpenZfsFileSystemOutput) ToFsxOpenZfsFileSystemOutput() FsxOpenZfsFileSystemOutput {
	return o
}

func (o FsxOpenZfsFileSystemOutput) ToFsxOpenZfsFileSystemOutputWithContext(ctx context.Context) FsxOpenZfsFileSystemOutput {
	return o
}

func (o FsxOpenZfsFileSystemOutput) ToOutput(ctx context.Context) pulumix.Output[FsxOpenZfsFileSystem] {
	return pulumix.Output[FsxOpenZfsFileSystem]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o FsxOpenZfsFileSystemOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The time that the FSx for openzfs location was created.
func (o FsxOpenZfsFileSystemOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) for the FSx for OpenZfs file system.
func (o FsxOpenZfsFileSystemOutput) FsxFilesystemArn() pulumix.Output[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.Output[string] { return v.FsxFilesystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of protocol that DataSync uses to access your file system. See below.
func (o FsxOpenZfsFileSystemOutput) Protocol() pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocol, FsxOpenZfsFileSystemProtocolOutput] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocol, FsxOpenZfsFileSystemProtocolOutput] {
		return v.Protocol
	})
	unwrapped := pulumix.Flatten[*FsxOpenZfsFileSystemProtocol, pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocol, FsxOpenZfsFileSystemProtocolOutput]](value)
	return pulumix.GPtrOutput[FsxOpenZfsFileSystemProtocol, FsxOpenZfsFileSystemProtocolOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for openzfs file system.
func (o FsxOpenZfsFileSystemOutput) SecurityGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.ArrayOutput[string] { return v.SecurityGroupArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Subdirectory to perform actions as source or destination. Must start with `/fsx`.
func (o FsxOpenZfsFileSystemOutput) Subdirectory() pulumix.Output[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.Output[string] { return v.Subdirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value pairs of resource tags to assign to the DataSync Location. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FsxOpenZfsFileSystemOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FsxOpenZfsFileSystemOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The URL of the FSx for openzfs location that was described.
func (o FsxOpenZfsFileSystemOutput) Uri() pulumix.Output[string] {
	value := pulumix.Apply[FsxOpenZfsFileSystem](o, func(v FsxOpenZfsFileSystem) pulumix.Output[string] { return v.Uri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(FsxOpenZfsFileSystemOutput{})
}
