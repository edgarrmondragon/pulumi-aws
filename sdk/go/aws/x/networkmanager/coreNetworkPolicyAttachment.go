// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Core Network Policy Attachment resource. This puts a Core Network Policy to an existing Core Network and executes the change set, which deploys changes globally based on the policy submitted (Sets the policy to `LIVE`).
//
// > **NOTE:** Deleting this resource will not delete the current policy defined in this resource. Deleting this resource will also not revert the current `LIVE` policy to the previous version.
type CoreNetworkPolicyAttachment struct {
	pulumi.CustomResourceState

	// The ID of the core network that a policy will be attached to and made `LIVE`.
	CoreNetworkId pulumix.Output[string] `pulumi:"coreNetworkId"`
	// Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `LATEST` and `LIVE` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.
	PolicyDocument pulumix.Output[string] `pulumi:"policyDocument"`
	// Current state of a core network.
	State pulumix.Output[string] `pulumi:"state"`
}

// NewCoreNetworkPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewCoreNetworkPolicyAttachment(ctx *pulumi.Context,
	name string, args *CoreNetworkPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*CoreNetworkPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoreNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'CoreNetworkId'")
	}
	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CoreNetworkPolicyAttachment
	err := ctx.RegisterResource("aws:networkmanager/coreNetworkPolicyAttachment:CoreNetworkPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreNetworkPolicyAttachment gets an existing CoreNetworkPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreNetworkPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreNetworkPolicyAttachmentState, opts ...pulumi.ResourceOption) (*CoreNetworkPolicyAttachment, error) {
	var resource CoreNetworkPolicyAttachment
	err := ctx.ReadResource("aws:networkmanager/coreNetworkPolicyAttachment:CoreNetworkPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreNetworkPolicyAttachment resources.
type coreNetworkPolicyAttachmentState struct {
	// The ID of the core network that a policy will be attached to and made `LIVE`.
	CoreNetworkId *string `pulumi:"coreNetworkId"`
	// Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `LATEST` and `LIVE` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.
	PolicyDocument *string `pulumi:"policyDocument"`
	// Current state of a core network.
	State *string `pulumi:"state"`
}

type CoreNetworkPolicyAttachmentState struct {
	// The ID of the core network that a policy will be attached to and made `LIVE`.
	CoreNetworkId pulumix.Input[*string]
	// Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `LATEST` and `LIVE` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.
	PolicyDocument pulumix.Input[*string]
	// Current state of a core network.
	State pulumix.Input[*string]
}

func (CoreNetworkPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreNetworkPolicyAttachmentState)(nil)).Elem()
}

type coreNetworkPolicyAttachmentArgs struct {
	// The ID of the core network that a policy will be attached to and made `LIVE`.
	CoreNetworkId string `pulumi:"coreNetworkId"`
	// Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `LATEST` and `LIVE` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.
	PolicyDocument string `pulumi:"policyDocument"`
}

// The set of arguments for constructing a CoreNetworkPolicyAttachment resource.
type CoreNetworkPolicyAttachmentArgs struct {
	// The ID of the core network that a policy will be attached to and made `LIVE`.
	CoreNetworkId pulumix.Input[string]
	// Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `LATEST` and `LIVE` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.
	PolicyDocument pulumix.Input[string]
}

func (CoreNetworkPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreNetworkPolicyAttachmentArgs)(nil)).Elem()
}

type CoreNetworkPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (CoreNetworkPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreNetworkPolicyAttachment)(nil)).Elem()
}

func (o CoreNetworkPolicyAttachmentOutput) ToCoreNetworkPolicyAttachmentOutput() CoreNetworkPolicyAttachmentOutput {
	return o
}

func (o CoreNetworkPolicyAttachmentOutput) ToCoreNetworkPolicyAttachmentOutputWithContext(ctx context.Context) CoreNetworkPolicyAttachmentOutput {
	return o
}

func (o CoreNetworkPolicyAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[CoreNetworkPolicyAttachment] {
	return pulumix.Output[CoreNetworkPolicyAttachment]{
		OutputState: o.OutputState,
	}
}

// The ID of the core network that a policy will be attached to and made `LIVE`.
func (o CoreNetworkPolicyAttachmentOutput) CoreNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[CoreNetworkPolicyAttachment](o, func(v CoreNetworkPolicyAttachment) pulumix.Output[string] { return v.CoreNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `LATEST` and `LIVE` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.
func (o CoreNetworkPolicyAttachmentOutput) PolicyDocument() pulumix.Output[string] {
	value := pulumix.Apply[CoreNetworkPolicyAttachment](o, func(v CoreNetworkPolicyAttachment) pulumix.Output[string] { return v.PolicyDocument })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Current state of a core network.
func (o CoreNetworkPolicyAttachmentOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[CoreNetworkPolicyAttachment](o, func(v CoreNetworkPolicyAttachment) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CoreNetworkPolicyAttachmentOutput{})
}
