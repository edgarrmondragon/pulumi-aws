// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECR Repository data source allows the ARN, Repository URI and Registry ID to be retrieved for an ECR repository.
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryResult
	err := ctx.Invoke("aws:ecr/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	// Name of the ECR Repository.
	Name string `pulumi:"name"`
	// Registry ID where the repository was created.
	RegistryId *string `pulumi:"registryId"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	// Full ARN of the repository.
	Arn string `pulumi:"arn"`
	// Encryption configuration for the repository. See Encryption Configuration below.
	EncryptionConfigurations []GetRepositoryEncryptionConfiguration `pulumi:"encryptionConfigurations"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Configuration block that defines image scanning configuration for the repository. See Image Scanning Configuration below.
	ImageScanningConfigurations []GetRepositoryImageScanningConfiguration `pulumi:"imageScanningConfigurations"`
	// The tag mutability setting for the repository.
	ImageTagMutability string `pulumi:"imageTagMutability"`
	// List of image tags associated with the most recently pushed image in the repository.
	MostRecentImageTags []string `pulumi:"mostRecentImageTags"`
	Name                string   `pulumi:"name"`
	RegistryId          string   `pulumi:"registryId"`
	// URL of the repository (in the form `aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName`).
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRepositoryArgs](args.ToOutput(), func(plainArgs *LookupRepositoryArgs) (*LookupRepositoryResult, error) {
		return LookupRepository(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRepositoryResultOutput, *LookupRepositoryResult](outputResult)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	// Name of the ECR Repository.
	Name pulumix.Input[string] `pulumi:"name"`
	// Registry ID where the repository was created.
	RegistryId pulumix.Input[*string] `pulumi:"registryId"`
	// Map of tags assigned to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupRepositoryOutputArgs) ToOutput() pulumix.Output[*LookupRepositoryArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.RegistryId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRepositoryArgs {
		return &LookupRepositoryArgs{
			Name:       resolvedArgs[0].(string),
			RegistryId: resolvedArgs[1].(*string),
			Tags:       resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRepositoryResult] {
	return pulumix.Output[*LookupRepositoryResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRepositoryResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.Arn })
}

func (o LookupRepositoryResultOutput) EncryptionConfigurations() pulumix.GArrayOutput[GetRepositoryEncryptionConfiguration, GetRepositoryEncryptionConfigurationOutput] {
	value := pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) []GetRepositoryEncryptionConfiguration {
		return v.EncryptionConfigurations
	})
	return pulumix.GArrayOutput[GetRepositoryEncryptionConfiguration, GetRepositoryEncryptionConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRepositoryResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.Id })
}

func (o LookupRepositoryResultOutput) ImageScanningConfigurations() pulumix.GArrayOutput[GetRepositoryImageScanningConfiguration, GetRepositoryImageScanningConfigurationOutput] {
	value := pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) []GetRepositoryImageScanningConfiguration {
		return v.ImageScanningConfigurations
	})
	return pulumix.GArrayOutput[GetRepositoryImageScanningConfiguration, GetRepositoryImageScanningConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRepositoryResultOutput) ImageTagMutability() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.ImageTagMutability })
}

func (o LookupRepositoryResultOutput) MostRecentImageTags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) []string { return v.MostRecentImageTags })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupRepositoryResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.Name })
}

func (o LookupRepositoryResultOutput) RegistryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.RegistryId })
}

func (o LookupRepositoryResultOutput) RepositoryUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) string { return v.RepositoryUrl })
}

func (o LookupRepositoryResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupRepositoryResult](o, func(v *LookupRepositoryResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
