// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to retrieve information about a Service Catalog product.
//
// > **NOTE:** A "provisioning artifact" is also known as a "version," and a "distributor" is also known as a "vendor."
func LookupProduct(ctx *pulumi.Context, args *LookupProductArgs, opts ...pulumi.InvokeOption) (*LookupProductResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProductResult
	err := ctx.Invoke("aws:servicecatalog/getProduct:getProduct", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProduct.
type LookupProductArgs struct {
	// Language code. Valid values are `en` (English), `jp` (Japanese), `zh` (Chinese). The default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// ID of the product.
	//
	// The following arguments are optional:
	Id string `pulumi:"id"`
	// Tags applied to the product.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getProduct.
type LookupProductResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// ARN of the product.
	Arn string `pulumi:"arn"`
	// Time when the product was created.
	CreatedTime string `pulumi:"createdTime"`
	// Description of the product.
	Description string `pulumi:"description"`
	// Vendor of the product.
	Distributor string `pulumi:"distributor"`
	// Whether the product has a default path.
	HasDefaultPath bool   `pulumi:"hasDefaultPath"`
	Id             string `pulumi:"id"`
	// Name of the product.
	Name string `pulumi:"name"`
	// Owner of the product.
	Owner string `pulumi:"owner"`
	// Status of the product.
	Status string `pulumi:"status"`
	// Field that provides support information about the product.
	SupportDescription string `pulumi:"supportDescription"`
	// Contact email for product support.
	SupportEmail string `pulumi:"supportEmail"`
	// Contact URL for product support.
	SupportUrl string `pulumi:"supportUrl"`
	// Tags applied to the product.
	Tags map[string]string `pulumi:"tags"`
	// Type of product.
	Type string `pulumi:"type"`
}

func LookupProductOutput(ctx *pulumi.Context, args LookupProductOutputArgs, opts ...pulumi.InvokeOption) LookupProductResultOutput {
	outputResult := pulumix.ApplyErr[*LookupProductArgs](args.ToOutput(), func(plainArgs *LookupProductArgs) (*LookupProductResult, error) {
		return LookupProduct(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupProductResultOutput, *LookupProductResult](outputResult)
}

// A collection of arguments for invoking getProduct.
type LookupProductOutputArgs struct {
	// Language code. Valid values are `en` (English), `jp` (Japanese), `zh` (Chinese). The default value is `en`.
	AcceptLanguage pulumix.Input[*string] `pulumi:"acceptLanguage"`
	// ID of the product.
	//
	// The following arguments are optional:
	Id pulumix.Input[string] `pulumi:"id"`
	// Tags applied to the product.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupProductOutputArgs) ToOutput() pulumix.Output[*LookupProductArgs] {
	allArgs := pulumix.All(
		args.AcceptLanguage.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupProductArgs {
		return &LookupProductArgs{
			AcceptLanguage: resolvedArgs[0].(*string),
			Id:             resolvedArgs[1].(string),
			Tags:           resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupProductResultOutput struct{ *pulumi.OutputState }

func (LookupProductResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProductResult)(nil)).Elem()
}

func (o LookupProductResultOutput) ToOutput(context.Context) pulumix.Output[*LookupProductResult] {
	return pulumix.Output[*LookupProductResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupProductResultOutput) AcceptLanguage() pulumix.Output[*string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) *string { return v.AcceptLanguage })
}

func (o LookupProductResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Arn })
}

func (o LookupProductResultOutput) CreatedTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.CreatedTime })
}

func (o LookupProductResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Description })
}

func (o LookupProductResultOutput) Distributor() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Distributor })
}

func (o LookupProductResultOutput) HasDefaultPath() pulumix.Output[bool] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) bool { return v.HasDefaultPath })
}

func (o LookupProductResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Id })
}

func (o LookupProductResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Name })
}

func (o LookupProductResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Owner })
}

func (o LookupProductResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Status })
}

func (o LookupProductResultOutput) SupportDescription() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.SupportDescription })
}

func (o LookupProductResultOutput) SupportEmail() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.SupportEmail })
}

func (o LookupProductResultOutput) SupportUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.SupportUrl })
}

func (o LookupProductResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupProductResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupProductResult](o, func(v *LookupProductResult) string { return v.Type })
}
