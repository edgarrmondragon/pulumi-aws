// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a list of Elastic IPs in a region.
func GetEips(ctx *pulumi.Context, args *GetEipsArgs, opts ...pulumi.InvokeOption) (*GetEipsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEipsResult
	err := ctx.Invoke("aws:ec2/getEips:getEips", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEips.
type GetEipsArgs struct {
	// Custom filter block as described below.
	Filters []GetEipsFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired Elastic IPs.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getEips.
type GetEipsResult struct {
	// List of all the allocation IDs for address for use with EC2-VPC.
	AllocationIds []string        `pulumi:"allocationIds"`
	Filters       []GetEipsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all the Elastic IP addresses.
	PublicIps []string          `pulumi:"publicIps"`
	Tags      map[string]string `pulumi:"tags"`
}

func GetEipsOutput(ctx *pulumi.Context, args GetEipsOutputArgs, opts ...pulumi.InvokeOption) GetEipsResultOutput {
	outputResult := pulumix.ApplyErr[*GetEipsArgs](args.ToOutput(), func(plainArgs *GetEipsArgs) (*GetEipsResult, error) {
		return GetEips(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetEipsResultOutput, *GetEipsResult](outputResult)
}

// A collection of arguments for invoking getEips.
type GetEipsOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetEipsFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired Elastic IPs.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetEipsOutputArgs) ToOutput() pulumix.Output[*GetEipsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetEipsArgs {
		return &GetEipsArgs{
			Filters: resolvedArgs[0].([]GetEipsFilter),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type GetEipsResultOutput struct{ *pulumi.OutputState }

func (GetEipsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsResult)(nil)).Elem()
}

func (o GetEipsResultOutput) ToOutput(context.Context) pulumix.Output[*GetEipsResult] {
	return pulumix.Output[*GetEipsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetEipsResultOutput) AllocationIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetEipsResult](o, func(v *GetEipsResult) []string { return v.AllocationIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetEipsResultOutput) Filters() pulumix.GArrayOutput[GetEipsFilter, GetEipsFilterOutput] {
	value := pulumix.Apply[*GetEipsResult](o, func(v *GetEipsResult) []GetEipsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetEipsFilter, GetEipsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetEipsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetEipsResult](o, func(v *GetEipsResult) string { return v.Id })
}

func (o GetEipsResultOutput) PublicIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetEipsResult](o, func(v *GetEipsResult) []string { return v.PublicIps })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetEipsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetEipsResult](o, func(v *GetEipsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
