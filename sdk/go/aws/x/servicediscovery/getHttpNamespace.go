// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupHttpNamespace(ctx *pulumi.Context, args *LookupHttpNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupHttpNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHttpNamespaceResult
	err := ctx.Invoke("aws:servicediscovery/getHttpNamespace:getHttpNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHttpNamespace.
type LookupHttpNamespaceArgs struct {
	// Name of the http namespace.
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getHttpNamespace.
type LookupHttpNamespaceResult struct {
	// ARN that Amazon Route 53 assigns to the namespace when you create it.
	Arn string `pulumi:"arn"`
	// Description that you specify for the namespace when you create it.
	Description string `pulumi:"description"`
	// Name of an HTTP namespace.
	HttpName string `pulumi:"httpName"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupHttpNamespaceOutput(ctx *pulumi.Context, args LookupHttpNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupHttpNamespaceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupHttpNamespaceArgs](args.ToOutput(), func(plainArgs *LookupHttpNamespaceArgs) (*LookupHttpNamespaceResult, error) {
		return LookupHttpNamespace(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupHttpNamespaceResultOutput, *LookupHttpNamespaceResult](outputResult)
}

// A collection of arguments for invoking getHttpNamespace.
type LookupHttpNamespaceOutputArgs struct {
	// Name of the http namespace.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupHttpNamespaceOutputArgs) ToOutput() pulumix.Output[*LookupHttpNamespaceArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupHttpNamespaceArgs {
		return &LookupHttpNamespaceArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupHttpNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupHttpNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHttpNamespaceResult)(nil)).Elem()
}

func (o LookupHttpNamespaceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupHttpNamespaceResult] {
	return pulumix.Output[*LookupHttpNamespaceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupHttpNamespaceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupHttpNamespaceResult](o, func(v *LookupHttpNamespaceResult) string { return v.Arn })
}

func (o LookupHttpNamespaceResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupHttpNamespaceResult](o, func(v *LookupHttpNamespaceResult) string { return v.Description })
}

func (o LookupHttpNamespaceResultOutput) HttpName() pulumix.Output[string] {
	return pulumix.Apply[*LookupHttpNamespaceResult](o, func(v *LookupHttpNamespaceResult) string { return v.HttpName })
}

func (o LookupHttpNamespaceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupHttpNamespaceResult](o, func(v *LookupHttpNamespaceResult) string { return v.Id })
}

func (o LookupHttpNamespaceResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupHttpNamespaceResult](o, func(v *LookupHttpNamespaceResult) string { return v.Name })
}

func (o LookupHttpNamespaceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupHttpNamespaceResult](o, func(v *LookupHttpNamespaceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
