// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.SecurityGroup` provides details about a specific Security Group.
//
// This resource can prove useful when a module accepts a Security Group id as
// an input variable and needs to, for example, determine the id of the
// VPC that the security group belongs to.
func LookupSecurityGroup(ctx *pulumi.Context, args *LookupSecurityGroupArgs, opts ...pulumi.InvokeOption) (*LookupSecurityGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecurityGroupResult
	err := ctx.Invoke("aws:ec2/getSecurityGroup:getSecurityGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityGroup.
type LookupSecurityGroupArgs struct {
	// Custom filter block as described below.
	Filters []GetSecurityGroupFilter `pulumi:"filters"`
	// Id of the specific security group to retrieve.
	Id *string `pulumi:"id"`
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
	Name *string `pulumi:"name"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired security group.
	Tags map[string]string `pulumi:"tags"`
	// Id of the VPC that the desired security group belongs to.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getSecurityGroup.
type LookupSecurityGroupResult struct {
	// Computed ARN of the security group.
	Arn string `pulumi:"arn"`
	// Description of the security group.
	Description string                   `pulumi:"description"`
	Filters     []GetSecurityGroupFilter `pulumi:"filters"`
	Id          string                   `pulumi:"id"`
	Name        string                   `pulumi:"name"`
	Tags        map[string]string        `pulumi:"tags"`
	VpcId       string                   `pulumi:"vpcId"`
}

func LookupSecurityGroupOutput(ctx *pulumi.Context, args LookupSecurityGroupOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSecurityGroupArgs](args.ToOutput(), func(plainArgs *LookupSecurityGroupArgs) (*LookupSecurityGroupResult, error) {
		return LookupSecurityGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSecurityGroupResultOutput, *LookupSecurityGroupResult](outputResult)
}

// A collection of arguments for invoking getSecurityGroup.
type LookupSecurityGroupOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetSecurityGroupFilterArgs] `pulumi:"filters"`
	// Id of the specific security group to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Name of the field to filter by, as defined by
	// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired security group.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Id of the VPC that the desired security group belongs to.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args LookupSecurityGroupOutputArgs) ToOutput() pulumix.Output[*LookupSecurityGroupArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSecurityGroupArgs {
		return &LookupSecurityGroupArgs{
			Filters: resolvedArgs[0].([]GetSecurityGroupFilter),
			Id:      resolvedArgs[1].(*string),
			Name:    resolvedArgs[2].(*string),
			Tags:    resolvedArgs[3].(map[string]string),
			VpcId:   resolvedArgs[4].(*string),
		}
	})
}

type LookupSecurityGroupResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGroupResult)(nil)).Elem()
}

func (o LookupSecurityGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSecurityGroupResult] {
	return pulumix.Output[*LookupSecurityGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSecurityGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) string { return v.Arn })
}

func (o LookupSecurityGroupResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) string { return v.Description })
}

func (o LookupSecurityGroupResultOutput) Filters() pulumix.GArrayOutput[GetSecurityGroupFilter, GetSecurityGroupFilterOutput] {
	value := pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) []GetSecurityGroupFilter { return v.Filters })
	return pulumix.GArrayOutput[GetSecurityGroupFilter, GetSecurityGroupFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSecurityGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) string { return v.Id })
}

func (o LookupSecurityGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) string { return v.Name })
}

func (o LookupSecurityGroupResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSecurityGroupResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecurityGroupResult](o, func(v *LookupSecurityGroupResult) string { return v.VpcId })
}
