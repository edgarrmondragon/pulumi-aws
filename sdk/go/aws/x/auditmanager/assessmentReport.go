// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Assessment Report.
type AssessmentReport struct {
	pulumi.CustomResourceState

	// Unique identifier of the assessment to create the report from.
	//
	// The following arguments are optional:
	AssessmentId pulumix.Output[string] `pulumi:"assessmentId"`
	// Name of the user who created the assessment report.
	Author pulumix.Output[string] `pulumi:"author"`
	// Description of the assessment report.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the assessment report.
	Name pulumix.Output[string] `pulumi:"name"`
	// Current status of the specified assessment report. Valid values are `COMPLETE`, `IN_PROGRESS`, and `FAILED`.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewAssessmentReport registers a new resource with the given unique name, arguments, and options.
func NewAssessmentReport(ctx *pulumi.Context,
	name string, args *AssessmentReportArgs, opts ...pulumi.ResourceOption) (*AssessmentReport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'AssessmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssessmentReport
	err := ctx.RegisterResource("aws:auditmanager/assessmentReport:AssessmentReport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentReport gets an existing AssessmentReport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentReportState, opts ...pulumi.ResourceOption) (*AssessmentReport, error) {
	var resource AssessmentReport
	err := ctx.ReadResource("aws:auditmanager/assessmentReport:AssessmentReport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentReport resources.
type assessmentReportState struct {
	// Unique identifier of the assessment to create the report from.
	//
	// The following arguments are optional:
	AssessmentId *string `pulumi:"assessmentId"`
	// Name of the user who created the assessment report.
	Author *string `pulumi:"author"`
	// Description of the assessment report.
	Description *string `pulumi:"description"`
	// Name of the assessment report.
	Name *string `pulumi:"name"`
	// Current status of the specified assessment report. Valid values are `COMPLETE`, `IN_PROGRESS`, and `FAILED`.
	Status *string `pulumi:"status"`
}

type AssessmentReportState struct {
	// Unique identifier of the assessment to create the report from.
	//
	// The following arguments are optional:
	AssessmentId pulumix.Input[*string]
	// Name of the user who created the assessment report.
	Author pulumix.Input[*string]
	// Description of the assessment report.
	Description pulumix.Input[*string]
	// Name of the assessment report.
	Name pulumix.Input[*string]
	// Current status of the specified assessment report. Valid values are `COMPLETE`, `IN_PROGRESS`, and `FAILED`.
	Status pulumix.Input[*string]
}

func (AssessmentReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentReportState)(nil)).Elem()
}

type assessmentReportArgs struct {
	// Unique identifier of the assessment to create the report from.
	//
	// The following arguments are optional:
	AssessmentId string `pulumi:"assessmentId"`
	// Description of the assessment report.
	Description *string `pulumi:"description"`
	// Name of the assessment report.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AssessmentReport resource.
type AssessmentReportArgs struct {
	// Unique identifier of the assessment to create the report from.
	//
	// The following arguments are optional:
	AssessmentId pulumix.Input[string]
	// Description of the assessment report.
	Description pulumix.Input[*string]
	// Name of the assessment report.
	Name pulumix.Input[*string]
}

func (AssessmentReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentReportArgs)(nil)).Elem()
}

type AssessmentReportOutput struct{ *pulumi.OutputState }

func (AssessmentReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentReport)(nil)).Elem()
}

func (o AssessmentReportOutput) ToAssessmentReportOutput() AssessmentReportOutput {
	return o
}

func (o AssessmentReportOutput) ToAssessmentReportOutputWithContext(ctx context.Context) AssessmentReportOutput {
	return o
}

func (o AssessmentReportOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentReport] {
	return pulumix.Output[AssessmentReport]{
		OutputState: o.OutputState,
	}
}

// Unique identifier of the assessment to create the report from.
//
// The following arguments are optional:
func (o AssessmentReportOutput) AssessmentId() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentReport](o, func(v AssessmentReport) pulumix.Output[string] { return v.AssessmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the user who created the assessment report.
func (o AssessmentReportOutput) Author() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentReport](o, func(v AssessmentReport) pulumix.Output[string] { return v.Author })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the assessment report.
func (o AssessmentReportOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[AssessmentReport](o, func(v AssessmentReport) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the assessment report.
func (o AssessmentReportOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentReport](o, func(v AssessmentReport) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Current status of the specified assessment report. Valid values are `COMPLETE`, `IN_PROGRESS`, and `FAILED`.
func (o AssessmentReportOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentReport](o, func(v AssessmentReport) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AssessmentReportOutput{})
}
