// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ScheduledAction struct {
	pulumi.CustomResourceState

	// The description of the scheduled action.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Whether to enable the scheduled action. Default is `true` .
	Enable pulumix.Output[*bool] `pulumi:"enable"`
	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	EndTime pulumix.Output[*string] `pulumi:"endTime"`
	// The IAM role to assume to run the scheduled action.
	IamRole pulumix.Output[string] `pulumi:"iamRole"`
	// The scheduled action name.
	Name pulumix.Output[string] `pulumi:"name"`
	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
	Schedule pulumix.Output[string] `pulumi:"schedule"`
	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime pulumix.Output[*string] `pulumi:"startTime"`
	// Target action. Documented below.
	TargetAction pulumix.GPtrOutput[ScheduledActionTargetAction, ScheduledActionTargetActionOutput] `pulumi:"targetAction"`
}

// NewScheduledAction registers a new resource with the given unique name, arguments, and options.
func NewScheduledAction(ctx *pulumi.Context,
	name string, args *ScheduledActionArgs, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IamRole == nil {
		return nil, errors.New("invalid value for required argument 'IamRole'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.TargetAction == nil {
		return nil, errors.New("invalid value for required argument 'TargetAction'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledAction
	err := ctx.RegisterResource("aws:redshift/scheduledAction:ScheduledAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledAction gets an existing ScheduledAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledActionState, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	var resource ScheduledAction
	err := ctx.ReadResource("aws:redshift/scheduledAction:ScheduledAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledAction resources.
type scheduledActionState struct {
	// The description of the scheduled action.
	Description *string `pulumi:"description"`
	// Whether to enable the scheduled action. Default is `true` .
	Enable *bool `pulumi:"enable"`
	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	EndTime *string `pulumi:"endTime"`
	// The IAM role to assume to run the scheduled action.
	IamRole *string `pulumi:"iamRole"`
	// The scheduled action name.
	Name *string `pulumi:"name"`
	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
	Schedule *string `pulumi:"schedule"`
	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime *string `pulumi:"startTime"`
	// Target action. Documented below.
	TargetAction *ScheduledActionTargetAction `pulumi:"targetAction"`
}

type ScheduledActionState struct {
	// The description of the scheduled action.
	Description pulumix.Input[*string]
	// Whether to enable the scheduled action. Default is `true` .
	Enable pulumix.Input[*bool]
	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	EndTime pulumix.Input[*string]
	// The IAM role to assume to run the scheduled action.
	IamRole pulumix.Input[*string]
	// The scheduled action name.
	Name pulumix.Input[*string]
	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
	Schedule pulumix.Input[*string]
	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime pulumix.Input[*string]
	// Target action. Documented below.
	TargetAction pulumix.Input[*ScheduledActionTargetActionArgs]
}

func (ScheduledActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionState)(nil)).Elem()
}

type scheduledActionArgs struct {
	// The description of the scheduled action.
	Description *string `pulumi:"description"`
	// Whether to enable the scheduled action. Default is `true` .
	Enable *bool `pulumi:"enable"`
	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	EndTime *string `pulumi:"endTime"`
	// The IAM role to assume to run the scheduled action.
	IamRole string `pulumi:"iamRole"`
	// The scheduled action name.
	Name *string `pulumi:"name"`
	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
	Schedule string `pulumi:"schedule"`
	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime *string `pulumi:"startTime"`
	// Target action. Documented below.
	TargetAction ScheduledActionTargetAction `pulumi:"targetAction"`
}

// The set of arguments for constructing a ScheduledAction resource.
type ScheduledActionArgs struct {
	// The description of the scheduled action.
	Description pulumix.Input[*string]
	// Whether to enable the scheduled action. Default is `true` .
	Enable pulumix.Input[*bool]
	// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	EndTime pulumix.Input[*string]
	// The IAM role to assume to run the scheduled action.
	IamRole pulumix.Input[string]
	// The scheduled action name.
	Name pulumix.Input[*string]
	// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
	Schedule pulumix.Input[string]
	// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime pulumix.Input[*string]
	// Target action. Documented below.
	TargetAction pulumix.Input[*ScheduledActionTargetActionArgs]
}

func (ScheduledActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionArgs)(nil)).Elem()
}

type ScheduledActionOutput struct{ *pulumi.OutputState }

func (ScheduledActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionOutput) ToScheduledActionOutput() ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledAction] {
	return pulumix.Output[ScheduledAction]{
		OutputState: o.OutputState,
	}
}

// The description of the scheduled action.
func (o ScheduledActionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to enable the scheduled action. Default is `true` .
func (o ScheduledActionOutput) Enable() pulumix.Output[*bool] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[*bool] { return v.Enable })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
func (o ScheduledActionOutput) EndTime() pulumix.Output[*string] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[*string] { return v.EndTime })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The IAM role to assume to run the scheduled action.
func (o ScheduledActionOutput) IamRole() pulumix.Output[string] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[string] { return v.IamRole })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The scheduled action name.
func (o ScheduledActionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
func (o ScheduledActionOutput) Schedule() pulumix.Output[string] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[string] { return v.Schedule })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
func (o ScheduledActionOutput) StartTime() pulumix.Output[*string] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.Output[*string] { return v.StartTime })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Target action. Documented below.
func (o ScheduledActionOutput) TargetAction() pulumix.GPtrOutput[ScheduledActionTargetAction, ScheduledActionTargetActionOutput] {
	value := pulumix.Apply[ScheduledAction](o, func(v ScheduledAction) pulumix.GPtrOutput[ScheduledActionTargetAction, ScheduledActionTargetActionOutput] {
		return v.TargetAction
	})
	unwrapped := pulumix.Flatten[*ScheduledActionTargetAction, pulumix.GPtrOutput[ScheduledActionTargetAction, ScheduledActionTargetActionOutput]](value)
	return pulumix.GPtrOutput[ScheduledActionTargetAction, ScheduledActionTargetActionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ScheduledActionOutput{})
}
