// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use the `awsPrefixListEntry` resource to manage a managed prefix list entry.
//
// > **NOTE:** Pulumi currently provides two resources for managing Managed Prefix Lists and Managed Prefix List Entries. The standalone resource, Managed Prefix List Entry, is used to manage a single entry. The Managed Prefix List resource is used to manage multiple entries defined in-line. It is important to note that you cannot use a Managed Prefix List with in-line rules in conjunction with any Managed Prefix List Entry resources. This will result in a conflict of entries and will cause the entries to be overwritten.
//
// > **NOTE:** To improve execution times on larger updates, it is recommended to use the inline `entry` block as part of the Managed Prefix List resource when creating a prefix list with more than 100 entries. You can find more information about the resource here.
type ManagedPrefixListEntry struct {
	pulumi.CustomResourceState

	// CIDR block of this entry.
	Cidr pulumix.Output[string] `pulumi:"cidr"`
	// Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
	Description pulumix.Output[*string] `pulumi:"description"`
	// CIDR block of this entry.
	PrefixListId pulumix.Output[string] `pulumi:"prefixListId"`
}

// NewManagedPrefixListEntry registers a new resource with the given unique name, arguments, and options.
func NewManagedPrefixListEntry(ctx *pulumi.Context,
	name string, args *ManagedPrefixListEntryArgs, opts ...pulumi.ResourceOption) (*ManagedPrefixListEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.PrefixListId == nil {
		return nil, errors.New("invalid value for required argument 'PrefixListId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedPrefixListEntry
	err := ctx.RegisterResource("aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedPrefixListEntry gets an existing ManagedPrefixListEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedPrefixListEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedPrefixListEntryState, opts ...pulumi.ResourceOption) (*ManagedPrefixListEntry, error) {
	var resource ManagedPrefixListEntry
	err := ctx.ReadResource("aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedPrefixListEntry resources.
type managedPrefixListEntryState struct {
	// CIDR block of this entry.
	Cidr *string `pulumi:"cidr"`
	// Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
	Description *string `pulumi:"description"`
	// CIDR block of this entry.
	PrefixListId *string `pulumi:"prefixListId"`
}

type ManagedPrefixListEntryState struct {
	// CIDR block of this entry.
	Cidr pulumix.Input[*string]
	// Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
	Description pulumix.Input[*string]
	// CIDR block of this entry.
	PrefixListId pulumix.Input[*string]
}

func (ManagedPrefixListEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListEntryState)(nil)).Elem()
}

type managedPrefixListEntryArgs struct {
	// CIDR block of this entry.
	Cidr string `pulumi:"cidr"`
	// Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
	Description *string `pulumi:"description"`
	// CIDR block of this entry.
	PrefixListId string `pulumi:"prefixListId"`
}

// The set of arguments for constructing a ManagedPrefixListEntry resource.
type ManagedPrefixListEntryArgs struct {
	// CIDR block of this entry.
	Cidr pulumix.Input[string]
	// Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
	Description pulumix.Input[*string]
	// CIDR block of this entry.
	PrefixListId pulumix.Input[string]
}

func (ManagedPrefixListEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrefixListEntryArgs)(nil)).Elem()
}

type ManagedPrefixListEntryOutput struct{ *pulumi.OutputState }

func (ManagedPrefixListEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrefixListEntry)(nil)).Elem()
}

func (o ManagedPrefixListEntryOutput) ToManagedPrefixListEntryOutput() ManagedPrefixListEntryOutput {
	return o
}

func (o ManagedPrefixListEntryOutput) ToManagedPrefixListEntryOutputWithContext(ctx context.Context) ManagedPrefixListEntryOutput {
	return o
}

func (o ManagedPrefixListEntryOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedPrefixListEntry] {
	return pulumix.Output[ManagedPrefixListEntry]{
		OutputState: o.OutputState,
	}
}

// CIDR block of this entry.
func (o ManagedPrefixListEntryOutput) Cidr() pulumix.Output[string] {
	value := pulumix.Apply[ManagedPrefixListEntry](o, func(v ManagedPrefixListEntry) pulumix.Output[string] { return v.Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
func (o ManagedPrefixListEntryOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ManagedPrefixListEntry](o, func(v ManagedPrefixListEntry) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// CIDR block of this entry.
func (o ManagedPrefixListEntryOutput) PrefixListId() pulumix.Output[string] {
	value := pulumix.Apply[ManagedPrefixListEntry](o, func(v ManagedPrefixListEntry) pulumix.Output[string] { return v.PrefixListId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ManagedPrefixListEntryOutput{})
}
