// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func GetExport(ctx *pulumi.Context, args *GetExportArgs, opts ...pulumi.InvokeOption) (*GetExportResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetExportResult
	err := ctx.Invoke("aws:apigateway/getExport:getExport", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExport.
type GetExportArgs struct {
	// Content-type of the export. Valid values are `application/json` and `application/yaml` are supported for `exportType` `ofoas30` and `swagger`.
	Accepts *string `pulumi:"accepts"`
	// Type of export. Acceptable values are `oas30` for OpenAPI 3.0.x and `swagger` for Swagger/OpenAPI 2.0.
	ExportType string `pulumi:"exportType"`
	// Key-value map of query string parameters that specify properties of the export. the following parameters are supported: `extensions='integrations'` or `extensions='apigateway'` will export the API with x-amazon-apigateway-integration extensions. `extensions='authorizers'` will export the API with x-amazon-apigateway-authorizer extensions.
	Parameters map[string]string `pulumi:"parameters"`
	// Identifier of the associated REST API.
	RestApiId string `pulumi:"restApiId"`
	// Name of the Stage that will be exported.
	StageName string `pulumi:"stageName"`
}

// A collection of values returned by getExport.
type GetExportResult struct {
	Accepts *string `pulumi:"accepts"`
	// API Spec.
	Body string `pulumi:"body"`
	// Content-disposition header value in the HTTP response.
	ContentDisposition string `pulumi:"contentDisposition"`
	// Content-type header value in the HTTP response.
	ContentType string `pulumi:"contentType"`
	ExportType  string `pulumi:"exportType"`
	// The provider-assigned unique ID for this managed resource.
	Id         string            `pulumi:"id"`
	Parameters map[string]string `pulumi:"parameters"`
	RestApiId  string            `pulumi:"restApiId"`
	StageName  string            `pulumi:"stageName"`
}

func GetExportOutput(ctx *pulumi.Context, args GetExportOutputArgs, opts ...pulumi.InvokeOption) GetExportResultOutput {
	outputResult := pulumix.ApplyErr[*GetExportArgs](args.ToOutput(), func(plainArgs *GetExportArgs) (*GetExportResult, error) {
		return GetExport(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetExportResultOutput, *GetExportResult](outputResult)
}

// A collection of arguments for invoking getExport.
type GetExportOutputArgs struct {
	// Content-type of the export. Valid values are `application/json` and `application/yaml` are supported for `exportType` `ofoas30` and `swagger`.
	Accepts pulumix.Input[*string] `pulumi:"accepts"`
	// Type of export. Acceptable values are `oas30` for OpenAPI 3.0.x and `swagger` for Swagger/OpenAPI 2.0.
	ExportType pulumix.Input[string] `pulumi:"exportType"`
	// Key-value map of query string parameters that specify properties of the export. the following parameters are supported: `extensions='integrations'` or `extensions='apigateway'` will export the API with x-amazon-apigateway-integration extensions. `extensions='authorizers'` will export the API with x-amazon-apigateway-authorizer extensions.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Identifier of the associated REST API.
	RestApiId pulumix.Input[string] `pulumi:"restApiId"`
	// Name of the Stage that will be exported.
	StageName pulumix.Input[string] `pulumi:"stageName"`
}

func (args GetExportOutputArgs) ToOutput() pulumix.Output[*GetExportArgs] {
	allArgs := pulumix.All(
		args.Accepts.ToOutput(context.Background()).AsAny(),
		args.ExportType.ToOutput(context.Background()).AsAny(),
		args.Parameters.ToOutput(context.Background()).AsAny(),
		args.RestApiId.ToOutput(context.Background()).AsAny(),
		args.StageName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetExportArgs {
		return &GetExportArgs{
			Accepts:    resolvedArgs[0].(*string),
			ExportType: resolvedArgs[1].(string),
			Parameters: resolvedArgs[2].(map[string]string),
			RestApiId:  resolvedArgs[3].(string),
			StageName:  resolvedArgs[4].(string),
		}
	})
}

type GetExportResultOutput struct{ *pulumi.OutputState }

func (GetExportResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExportResult)(nil)).Elem()
}

func (o GetExportResultOutput) ToOutput(context.Context) pulumix.Output[*GetExportResult] {
	return pulumix.Output[*GetExportResult]{
		OutputState: o.OutputState,
	}
}

func (o GetExportResultOutput) Accepts() pulumix.Output[*string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) *string { return v.Accepts })
}

func (o GetExportResultOutput) Body() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.Body })
}

func (o GetExportResultOutput) ContentDisposition() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.ContentDisposition })
}

func (o GetExportResultOutput) ContentType() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.ContentType })
}

func (o GetExportResultOutput) ExportType() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.ExportType })
}

func (o GetExportResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.Id })
}

func (o GetExportResultOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetExportResultOutput) RestApiId() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.RestApiId })
}

func (o GetExportResultOutput) StageName() pulumix.Output[string] {
	return pulumix.Apply[*GetExportResult](o, func(v *GetExportResult) string { return v.StageName })
}
