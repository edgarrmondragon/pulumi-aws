// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Load Balancer resource, also known as a "Classic
// Load Balancer" after the release of
// Application/Network Load Balancers.
//
// > **NOTE on ELB Instances and ELB Attachments:** This provider currently
// provides both a standalone ELB Attachment resource
// (describing an instance attached to an ELB), and an ELB resource with
// `instances` defined in-line. At this time you cannot use an ELB with in-line
// instances in conjunction with a ELB Attachment resources. Doing so will cause a
// conflict and will overwrite attachments.
type LoadBalancer struct {
	pulumi.CustomResourceState

	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput] `pulumi:"accessLogs"`
	// The ARN of the ELB
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The AZ's to serve traffic in.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining pulumix.Output[*bool] `pulumi:"connectionDraining"`
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout pulumix.Output[*int] `pulumi:"connectionDrainingTimeout"`
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing pulumix.Output[*bool] `pulumi:"crossZoneLoadBalancing"`
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode pulumix.Output[*string] `pulumi:"desyncMitigationMode"`
	// The DNS name of the ELB
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// A healthCheck block. Health Check documented below.
	HealthCheck pulumix.GPtrOutput[LoadBalancerHealthCheck, LoadBalancerHealthCheckOutput] `pulumi:"healthCheck"`
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout pulumix.Output[*int] `pulumi:"idleTimeout"`
	// A list of instance ids to place in the ELB pool.
	Instances pulumix.ArrayOutput[string] `pulumi:"instances"`
	// If true, ELB will be an internal ELB.
	Internal pulumix.Output[bool] `pulumi:"internal"`
	// A list of listener blocks. Listeners documented below.
	Listeners pulumix.GArrayOutput[LoadBalancerListener, LoadBalancerListenerOutput] `pulumi:"listeners"`
	// The name of the ELB. By default generated by this provider.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup pulumix.Output[string] `pulumi:"sourceSecurityGroup"`
	// The ID of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Only available on ELBs launched in a VPC.
	SourceSecurityGroupId pulumix.Output[string] `pulumi:"sourceSecurityGroupId"`
	// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
	Subnets pulumix.ArrayOutput[string] `pulumi:"subnets"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Exactly one of `availabilityZones` or `subnets` must be specified: this
	// determines if the ELB exists in a VPC or in EC2-classic.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
	ZoneId pulumix.Output[string] `pulumi:"zoneId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Listeners == nil {
		return nil, errors.New("invalid value for required argument 'Listeners'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/loadBalancer:LoadBalancer"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("aws:elb/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("aws:elb/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs *LoadBalancerAccessLogs `pulumi:"accessLogs"`
	// The ARN of the ELB
	Arn *string `pulumi:"arn"`
	// The AZ's to serve traffic in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining *bool `pulumi:"connectionDraining"`
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout *int `pulumi:"connectionDrainingTimeout"`
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing *bool `pulumi:"crossZoneLoadBalancing"`
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode *string `pulumi:"desyncMitigationMode"`
	// The DNS name of the ELB
	DnsName *string `pulumi:"dnsName"`
	// A healthCheck block. Health Check documented below.
	HealthCheck *LoadBalancerHealthCheck `pulumi:"healthCheck"`
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout *int `pulumi:"idleTimeout"`
	// A list of instance ids to place in the ELB pool.
	Instances []string `pulumi:"instances"`
	// If true, ELB will be an internal ELB.
	Internal *bool `pulumi:"internal"`
	// A list of listener blocks. Listeners documented below.
	Listeners []LoadBalancerListener `pulumi:"listeners"`
	// The name of the ELB. By default generated by this provider.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups []string `pulumi:"securityGroups"`
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup *string `pulumi:"sourceSecurityGroup"`
	// The ID of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Only available on ELBs launched in a VPC.
	SourceSecurityGroupId *string `pulumi:"sourceSecurityGroupId"`
	// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
	Subnets []string `pulumi:"subnets"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Exactly one of `availabilityZones` or `subnets` must be specified: this
	// determines if the ELB exists in a VPC or in EC2-classic.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
	ZoneId *string `pulumi:"zoneId"`
}

type LoadBalancerState struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumix.Input[*LoadBalancerAccessLogsArgs]
	// The ARN of the ELB
	Arn pulumix.Input[*string]
	// The AZ's to serve traffic in.
	AvailabilityZones pulumix.Input[[]string]
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining pulumix.Input[*bool]
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout pulumix.Input[*int]
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing pulumix.Input[*bool]
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode pulumix.Input[*string]
	// The DNS name of the ELB
	DnsName pulumix.Input[*string]
	// A healthCheck block. Health Check documented below.
	HealthCheck pulumix.Input[*LoadBalancerHealthCheckArgs]
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout pulumix.Input[*int]
	// A list of instance ids to place in the ELB pool.
	Instances pulumix.Input[[]string]
	// If true, ELB will be an internal ELB.
	Internal pulumix.Input[*bool]
	// A list of listener blocks. Listeners documented below.
	Listeners pulumix.Input[[]*LoadBalancerListenerArgs]
	// The name of the ELB. By default generated by this provider.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups pulumix.Input[[]string]
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup pulumix.Input[*string]
	// The ID of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Only available on ELBs launched in a VPC.
	SourceSecurityGroupId pulumix.Input[*string]
	// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
	Subnets pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Exactly one of `availabilityZones` or `subnets` must be specified: this
	// determines if the ELB exists in a VPC or in EC2-classic.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
	ZoneId pulumix.Input[*string]
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs *LoadBalancerAccessLogs `pulumi:"accessLogs"`
	// The AZ's to serve traffic in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining *bool `pulumi:"connectionDraining"`
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout *int `pulumi:"connectionDrainingTimeout"`
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing *bool `pulumi:"crossZoneLoadBalancing"`
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode *string `pulumi:"desyncMitigationMode"`
	// A healthCheck block. Health Check documented below.
	HealthCheck *LoadBalancerHealthCheck `pulumi:"healthCheck"`
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout *int `pulumi:"idleTimeout"`
	// A list of instance ids to place in the ELB pool.
	Instances []string `pulumi:"instances"`
	// If true, ELB will be an internal ELB.
	Internal *bool `pulumi:"internal"`
	// A list of listener blocks. Listeners documented below.
	Listeners []LoadBalancerListener `pulumi:"listeners"`
	// The name of the ELB. By default generated by this provider.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups []string `pulumi:"securityGroups"`
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup *string `pulumi:"sourceSecurityGroup"`
	// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
	Subnets []string `pulumi:"subnets"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Exactly one of `availabilityZones` or `subnets` must be specified: this
	// determines if the ELB exists in a VPC or in EC2-classic.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumix.Input[*LoadBalancerAccessLogsArgs]
	// The AZ's to serve traffic in.
	AvailabilityZones pulumix.Input[[]string]
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining pulumix.Input[*bool]
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout pulumix.Input[*int]
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing pulumix.Input[*bool]
	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
	DesyncMitigationMode pulumix.Input[*string]
	// A healthCheck block. Health Check documented below.
	HealthCheck pulumix.Input[*LoadBalancerHealthCheckArgs]
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout pulumix.Input[*int]
	// A list of instance ids to place in the ELB pool.
	Instances pulumix.Input[[]string]
	// If true, ELB will be an internal ELB.
	Internal pulumix.Input[*bool]
	// A list of listener blocks. Listeners documented below.
	Listeners pulumix.Input[[]*LoadBalancerListenerArgs]
	// The name of the ELB. By default generated by this provider.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups pulumix.Input[[]string]
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup pulumix.Input[*string]
	// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
	Subnets pulumix.Input[[]string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// Exactly one of `availabilityZones` or `subnets` must be specified: this
	// determines if the ELB exists in a VPC or in EC2-classic.
	Tags pulumix.Input[map[string]string]
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancer] {
	return pulumix.Output[LoadBalancer]{
		OutputState: o.OutputState,
	}
}

// An Access Logs block. Access Logs documented below.
func (o LoadBalancerOutput) AccessLogs() pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput] {
		return v.AccessLogs
	})
	unwrapped := pulumix.Flatten[*LoadBalancerAccessLogs, pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput]](value)
	return pulumix.GPtrOutput[LoadBalancerAccessLogs, LoadBalancerAccessLogsOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the ELB
func (o LoadBalancerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AZ's to serve traffic in.
func (o LoadBalancerOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Boolean to enable connection draining. Default: `false`
func (o LoadBalancerOutput) ConnectionDraining() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.ConnectionDraining })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The time in seconds to allow for connections to drain. Default: `300`
func (o LoadBalancerOutput) ConnectionDrainingTimeout() pulumix.Output[*int] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*int] { return v.ConnectionDrainingTimeout })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Enable cross-zone load balancing. Default: `true`
func (o LoadBalancerOutput) CrossZoneLoadBalancing() pulumix.Output[*bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*bool] { return v.CrossZoneLoadBalancing })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
func (o LoadBalancerOutput) DesyncMitigationMode() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.DesyncMitigationMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The DNS name of the ELB
func (o LoadBalancerOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A healthCheck block. Health Check documented below.
func (o LoadBalancerOutput) HealthCheck() pulumix.GPtrOutput[LoadBalancerHealthCheck, LoadBalancerHealthCheckOutput] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.GPtrOutput[LoadBalancerHealthCheck, LoadBalancerHealthCheckOutput] {
		return v.HealthCheck
	})
	unwrapped := pulumix.Flatten[*LoadBalancerHealthCheck, pulumix.GPtrOutput[LoadBalancerHealthCheck, LoadBalancerHealthCheckOutput]](value)
	return pulumix.GPtrOutput[LoadBalancerHealthCheck, LoadBalancerHealthCheckOutput]{OutputState: unwrapped.OutputState}
}

// The time in seconds that the connection is allowed to be idle. Default: `60`
func (o LoadBalancerOutput) IdleTimeout() pulumix.Output[*int] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*int] { return v.IdleTimeout })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// A list of instance ids to place in the ELB pool.
func (o LoadBalancerOutput) Instances() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.ArrayOutput[string] { return v.Instances })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// If true, ELB will be an internal ELB.
func (o LoadBalancerOutput) Internal() pulumix.Output[bool] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[bool] { return v.Internal })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// A list of listener blocks. Listeners documented below.
func (o LoadBalancerOutput) Listeners() pulumix.GArrayOutput[LoadBalancerListener, LoadBalancerListenerOutput] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.GArrayOutput[LoadBalancerListener, LoadBalancerListenerOutput] {
		return v.Listeners
	})
	unwrapped := pulumix.Flatten[[]LoadBalancerListener, pulumix.GArrayOutput[LoadBalancerListener, LoadBalancerListenerOutput]](value)
	return pulumix.GArrayOutput[LoadBalancerListener, LoadBalancerListenerOutput]{OutputState: unwrapped.OutputState}
}

// The name of the ELB. By default generated by this provider.
func (o LoadBalancerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (o LoadBalancerOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of security group IDs to assign to the ELB.
// Only valid if creating an ELB within a VPC
func (o LoadBalancerOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the security group that you can use as
// part of your inbound rules for your load balancer's back-end application
// instances. Use this for Classic or Default VPC only.
func (o LoadBalancerOutput) SourceSecurityGroup() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.SourceSecurityGroup })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the security group that you can use as
// part of your inbound rules for your load balancer's back-end application
// instances. Only available on ELBs launched in a VPC.
func (o LoadBalancerOutput) SourceSecurityGroupId() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.SourceSecurityGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
func (o LoadBalancerOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.ArrayOutput[string] { return v.Subnets })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// Exactly one of `availabilityZones` or `subnets` must be specified: this
// determines if the ELB exists in a VPC or in EC2-classic.
func (o LoadBalancerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LoadBalancerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
func (o LoadBalancerOutput) ZoneId() pulumix.Output[string] {
	value := pulumix.Apply[LoadBalancer](o, func(v LoadBalancer) pulumix.Output[string] { return v.ZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerOutput{})
}
