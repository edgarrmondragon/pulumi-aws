// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ContactChannelDeliveryAddress struct {
	// Details to engage this contact channel. The expected format depends on the contact channel type and is described in the [`ContactChannelAddress` section of the SSM Contacts API Reference](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_SSMContacts_ContactChannelAddress.html).
	SimpleAddress string `pulumi:"simpleAddress"`
}

type ContactChannelDeliveryAddressArgs struct {
	// Details to engage this contact channel. The expected format depends on the contact channel type and is described in the [`ContactChannelAddress` section of the SSM Contacts API Reference](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_SSMContacts_ContactChannelAddress.html).
	SimpleAddress pulumix.Input[string] `pulumi:"simpleAddress"`
}

func (ContactChannelDeliveryAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactChannelDeliveryAddress)(nil)).Elem()
}

func (i ContactChannelDeliveryAddressArgs) ToContactChannelDeliveryAddressOutput() ContactChannelDeliveryAddressOutput {
	return i.ToContactChannelDeliveryAddressOutputWithContext(context.Background())
}

func (i ContactChannelDeliveryAddressArgs) ToContactChannelDeliveryAddressOutputWithContext(ctx context.Context) ContactChannelDeliveryAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelDeliveryAddressOutput)
}

func (i *ContactChannelDeliveryAddressArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactChannelDeliveryAddressArgs] {
	return pulumix.Val(i)
}

type ContactChannelDeliveryAddressOutput struct{ *pulumi.OutputState }

func (ContactChannelDeliveryAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactChannelDeliveryAddress)(nil)).Elem()
}

func (o ContactChannelDeliveryAddressOutput) ToContactChannelDeliveryAddressOutput() ContactChannelDeliveryAddressOutput {
	return o
}

func (o ContactChannelDeliveryAddressOutput) ToContactChannelDeliveryAddressOutputWithContext(ctx context.Context) ContactChannelDeliveryAddressOutput {
	return o
}

func (o ContactChannelDeliveryAddressOutput) ToOutput(ctx context.Context) pulumix.Output[ContactChannelDeliveryAddress] {
	return pulumix.Output[ContactChannelDeliveryAddress]{
		OutputState: o.OutputState,
	}
}

// Details to engage this contact channel. The expected format depends on the contact channel type and is described in the [`ContactChannelAddress` section of the SSM Contacts API Reference](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_SSMContacts_ContactChannelAddress.html).
func (o ContactChannelDeliveryAddressOutput) SimpleAddress() pulumix.Output[string] {
	return pulumix.Apply[ContactChannelDeliveryAddress](o, func(v ContactChannelDeliveryAddress) string { return v.SimpleAddress })
}

type PlanStage struct {
	DurationInMinutes int               `pulumi:"durationInMinutes"`
	Targets           []PlanStageTarget `pulumi:"targets"`
}

type PlanStageArgs struct {
	DurationInMinutes pulumix.Input[int]                    `pulumi:"durationInMinutes"`
	Targets           pulumix.Input[[]*PlanStageTargetArgs] `pulumi:"targets"`
}

func (PlanStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStage)(nil)).Elem()
}

func (i PlanStageArgs) ToPlanStageOutput() PlanStageOutput {
	return i.ToPlanStageOutputWithContext(context.Background())
}

func (i PlanStageArgs) ToPlanStageOutputWithContext(ctx context.Context) PlanStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStageOutput)
}

func (i *PlanStageArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanStageArgs] {
	return pulumix.Val(i)
}

type PlanStageOutput struct{ *pulumi.OutputState }

func (PlanStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStage)(nil)).Elem()
}

func (o PlanStageOutput) ToPlanStageOutput() PlanStageOutput {
	return o
}

func (o PlanStageOutput) ToPlanStageOutputWithContext(ctx context.Context) PlanStageOutput {
	return o
}

func (o PlanStageOutput) ToOutput(ctx context.Context) pulumix.Output[PlanStage] {
	return pulumix.Output[PlanStage]{
		OutputState: o.OutputState,
	}
}

func (o PlanStageOutput) DurationInMinutes() pulumix.Output[int] {
	return pulumix.Apply[PlanStage](o, func(v PlanStage) int { return v.DurationInMinutes })
}

func (o PlanStageOutput) Targets() pulumix.GArrayOutput[PlanStageTarget, PlanStageTargetOutput] {
	value := pulumix.Apply[PlanStage](o, func(v PlanStage) []PlanStageTarget { return v.Targets })
	return pulumix.GArrayOutput[PlanStageTarget, PlanStageTargetOutput]{OutputState: value.OutputState}
}

type PlanStageTarget struct {
	ChannelTargetInfo *PlanStageTargetChannelTargetInfo `pulumi:"channelTargetInfo"`
	ContactTargetInfo *PlanStageTargetContactTargetInfo `pulumi:"contactTargetInfo"`
}

type PlanStageTargetArgs struct {
	ChannelTargetInfo pulumix.Input[*PlanStageTargetChannelTargetInfoArgs] `pulumi:"channelTargetInfo"`
	ContactTargetInfo pulumix.Input[*PlanStageTargetContactTargetInfoArgs] `pulumi:"contactTargetInfo"`
}

func (PlanStageTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStageTarget)(nil)).Elem()
}

func (i PlanStageTargetArgs) ToPlanStageTargetOutput() PlanStageTargetOutput {
	return i.ToPlanStageTargetOutputWithContext(context.Background())
}

func (i PlanStageTargetArgs) ToPlanStageTargetOutputWithContext(ctx context.Context) PlanStageTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStageTargetOutput)
}

func (i *PlanStageTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanStageTargetArgs] {
	return pulumix.Val(i)
}

type PlanStageTargetOutput struct{ *pulumi.OutputState }

func (PlanStageTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStageTarget)(nil)).Elem()
}

func (o PlanStageTargetOutput) ToPlanStageTargetOutput() PlanStageTargetOutput {
	return o
}

func (o PlanStageTargetOutput) ToPlanStageTargetOutputWithContext(ctx context.Context) PlanStageTargetOutput {
	return o
}

func (o PlanStageTargetOutput) ToOutput(ctx context.Context) pulumix.Output[PlanStageTarget] {
	return pulumix.Output[PlanStageTarget]{
		OutputState: o.OutputState,
	}
}

func (o PlanStageTargetOutput) ChannelTargetInfo() pulumix.GPtrOutput[PlanStageTargetChannelTargetInfo, PlanStageTargetChannelTargetInfoOutput] {
	value := pulumix.Apply[PlanStageTarget](o, func(v PlanStageTarget) *PlanStageTargetChannelTargetInfo { return v.ChannelTargetInfo })
	return pulumix.GPtrOutput[PlanStageTargetChannelTargetInfo, PlanStageTargetChannelTargetInfoOutput]{OutputState: value.OutputState}
}

func (o PlanStageTargetOutput) ContactTargetInfo() pulumix.GPtrOutput[PlanStageTargetContactTargetInfo, PlanStageTargetContactTargetInfoOutput] {
	value := pulumix.Apply[PlanStageTarget](o, func(v PlanStageTarget) *PlanStageTargetContactTargetInfo { return v.ContactTargetInfo })
	return pulumix.GPtrOutput[PlanStageTargetContactTargetInfo, PlanStageTargetContactTargetInfoOutput]{OutputState: value.OutputState}
}

type PlanStageTargetChannelTargetInfo struct {
	ContactChannelId       string `pulumi:"contactChannelId"`
	RetryIntervalInMinutes *int   `pulumi:"retryIntervalInMinutes"`
}

type PlanStageTargetChannelTargetInfoArgs struct {
	ContactChannelId       pulumix.Input[string] `pulumi:"contactChannelId"`
	RetryIntervalInMinutes pulumix.Input[*int]   `pulumi:"retryIntervalInMinutes"`
}

func (PlanStageTargetChannelTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStageTargetChannelTargetInfo)(nil)).Elem()
}

func (i PlanStageTargetChannelTargetInfoArgs) ToPlanStageTargetChannelTargetInfoOutput() PlanStageTargetChannelTargetInfoOutput {
	return i.ToPlanStageTargetChannelTargetInfoOutputWithContext(context.Background())
}

func (i PlanStageTargetChannelTargetInfoArgs) ToPlanStageTargetChannelTargetInfoOutputWithContext(ctx context.Context) PlanStageTargetChannelTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStageTargetChannelTargetInfoOutput)
}

func (i *PlanStageTargetChannelTargetInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanStageTargetChannelTargetInfoArgs] {
	return pulumix.Val(i)
}

type PlanStageTargetChannelTargetInfoOutput struct{ *pulumi.OutputState }

func (PlanStageTargetChannelTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStageTargetChannelTargetInfo)(nil)).Elem()
}

func (o PlanStageTargetChannelTargetInfoOutput) ToPlanStageTargetChannelTargetInfoOutput() PlanStageTargetChannelTargetInfoOutput {
	return o
}

func (o PlanStageTargetChannelTargetInfoOutput) ToPlanStageTargetChannelTargetInfoOutputWithContext(ctx context.Context) PlanStageTargetChannelTargetInfoOutput {
	return o
}

func (o PlanStageTargetChannelTargetInfoOutput) ToOutput(ctx context.Context) pulumix.Output[PlanStageTargetChannelTargetInfo] {
	return pulumix.Output[PlanStageTargetChannelTargetInfo]{
		OutputState: o.OutputState,
	}
}

func (o PlanStageTargetChannelTargetInfoOutput) ContactChannelId() pulumix.Output[string] {
	return pulumix.Apply[PlanStageTargetChannelTargetInfo](o, func(v PlanStageTargetChannelTargetInfo) string { return v.ContactChannelId })
}

func (o PlanStageTargetChannelTargetInfoOutput) RetryIntervalInMinutes() pulumix.Output[*int] {
	return pulumix.Apply[PlanStageTargetChannelTargetInfo](o, func(v PlanStageTargetChannelTargetInfo) *int { return v.RetryIntervalInMinutes })
}

type PlanStageTargetContactTargetInfo struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId   *string `pulumi:"contactId"`
	IsEssential bool    `pulumi:"isEssential"`
}

type PlanStageTargetContactTargetInfoArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId   pulumix.Input[*string] `pulumi:"contactId"`
	IsEssential pulumix.Input[bool]    `pulumi:"isEssential"`
}

func (PlanStageTargetContactTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStageTargetContactTargetInfo)(nil)).Elem()
}

func (i PlanStageTargetContactTargetInfoArgs) ToPlanStageTargetContactTargetInfoOutput() PlanStageTargetContactTargetInfoOutput {
	return i.ToPlanStageTargetContactTargetInfoOutputWithContext(context.Background())
}

func (i PlanStageTargetContactTargetInfoArgs) ToPlanStageTargetContactTargetInfoOutputWithContext(ctx context.Context) PlanStageTargetContactTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStageTargetContactTargetInfoOutput)
}

func (i *PlanStageTargetContactTargetInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanStageTargetContactTargetInfoArgs] {
	return pulumix.Val(i)
}

type PlanStageTargetContactTargetInfoOutput struct{ *pulumi.OutputState }

func (PlanStageTargetContactTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStageTargetContactTargetInfo)(nil)).Elem()
}

func (o PlanStageTargetContactTargetInfoOutput) ToPlanStageTargetContactTargetInfoOutput() PlanStageTargetContactTargetInfoOutput {
	return o
}

func (o PlanStageTargetContactTargetInfoOutput) ToPlanStageTargetContactTargetInfoOutputWithContext(ctx context.Context) PlanStageTargetContactTargetInfoOutput {
	return o
}

func (o PlanStageTargetContactTargetInfoOutput) ToOutput(ctx context.Context) pulumix.Output[PlanStageTargetContactTargetInfo] {
	return pulumix.Output[PlanStageTargetContactTargetInfo]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the contact or escalation plan.
func (o PlanStageTargetContactTargetInfoOutput) ContactId() pulumix.Output[*string] {
	return pulumix.Apply[PlanStageTargetContactTargetInfo](o, func(v PlanStageTargetContactTargetInfo) *string { return v.ContactId })
}

func (o PlanStageTargetContactTargetInfoOutput) IsEssential() pulumix.Output[bool] {
	return pulumix.Apply[PlanStageTargetContactTargetInfo](o, func(v PlanStageTargetContactTargetInfo) bool { return v.IsEssential })
}

type GetContactChannelDeliveryAddress struct {
	SimpleAddress string `pulumi:"simpleAddress"`
}

type GetContactChannelDeliveryAddressArgs struct {
	SimpleAddress pulumix.Input[string] `pulumi:"simpleAddress"`
}

func (GetContactChannelDeliveryAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContactChannelDeliveryAddress)(nil)).Elem()
}

func (i GetContactChannelDeliveryAddressArgs) ToGetContactChannelDeliveryAddressOutput() GetContactChannelDeliveryAddressOutput {
	return i.ToGetContactChannelDeliveryAddressOutputWithContext(context.Background())
}

func (i GetContactChannelDeliveryAddressArgs) ToGetContactChannelDeliveryAddressOutputWithContext(ctx context.Context) GetContactChannelDeliveryAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContactChannelDeliveryAddressOutput)
}

func (i *GetContactChannelDeliveryAddressArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContactChannelDeliveryAddressArgs] {
	return pulumix.Val(i)
}

type GetContactChannelDeliveryAddressOutput struct{ *pulumi.OutputState }

func (GetContactChannelDeliveryAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContactChannelDeliveryAddress)(nil)).Elem()
}

func (o GetContactChannelDeliveryAddressOutput) ToGetContactChannelDeliveryAddressOutput() GetContactChannelDeliveryAddressOutput {
	return o
}

func (o GetContactChannelDeliveryAddressOutput) ToGetContactChannelDeliveryAddressOutputWithContext(ctx context.Context) GetContactChannelDeliveryAddressOutput {
	return o
}

func (o GetContactChannelDeliveryAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetContactChannelDeliveryAddress] {
	return pulumix.Output[GetContactChannelDeliveryAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetContactChannelDeliveryAddressOutput) SimpleAddress() pulumix.Output[string] {
	return pulumix.Apply[GetContactChannelDeliveryAddress](o, func(v GetContactChannelDeliveryAddress) string { return v.SimpleAddress })
}

type GetPlanStage struct {
	DurationInMinutes int                  `pulumi:"durationInMinutes"`
	Targets           []GetPlanStageTarget `pulumi:"targets"`
}

type GetPlanStageArgs struct {
	DurationInMinutes pulumix.Input[int]                       `pulumi:"durationInMinutes"`
	Targets           pulumix.Input[[]*GetPlanStageTargetArgs] `pulumi:"targets"`
}

func (GetPlanStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStage)(nil)).Elem()
}

func (i GetPlanStageArgs) ToGetPlanStageOutput() GetPlanStageOutput {
	return i.ToGetPlanStageOutputWithContext(context.Background())
}

func (i GetPlanStageArgs) ToGetPlanStageOutputWithContext(ctx context.Context) GetPlanStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlanStageOutput)
}

func (i *GetPlanStageArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPlanStageArgs] {
	return pulumix.Val(i)
}

type GetPlanStageOutput struct{ *pulumi.OutputState }

func (GetPlanStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStage)(nil)).Elem()
}

func (o GetPlanStageOutput) ToGetPlanStageOutput() GetPlanStageOutput {
	return o
}

func (o GetPlanStageOutput) ToGetPlanStageOutputWithContext(ctx context.Context) GetPlanStageOutput {
	return o
}

func (o GetPlanStageOutput) ToOutput(ctx context.Context) pulumix.Output[GetPlanStage] {
	return pulumix.Output[GetPlanStage]{
		OutputState: o.OutputState,
	}
}

func (o GetPlanStageOutput) DurationInMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetPlanStage](o, func(v GetPlanStage) int { return v.DurationInMinutes })
}

func (o GetPlanStageOutput) Targets() pulumix.GArrayOutput[GetPlanStageTarget, GetPlanStageTargetOutput] {
	value := pulumix.Apply[GetPlanStage](o, func(v GetPlanStage) []GetPlanStageTarget { return v.Targets })
	return pulumix.GArrayOutput[GetPlanStageTarget, GetPlanStageTargetOutput]{OutputState: value.OutputState}
}

type GetPlanStageTarget struct {
	ChannelTargetInfos []GetPlanStageTargetChannelTargetInfo `pulumi:"channelTargetInfos"`
	ContactTargetInfos []GetPlanStageTargetContactTargetInfo `pulumi:"contactTargetInfos"`
}

type GetPlanStageTargetArgs struct {
	ChannelTargetInfos pulumix.Input[[]*GetPlanStageTargetChannelTargetInfoArgs] `pulumi:"channelTargetInfos"`
	ContactTargetInfos pulumix.Input[[]*GetPlanStageTargetContactTargetInfoArgs] `pulumi:"contactTargetInfos"`
}

func (GetPlanStageTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStageTarget)(nil)).Elem()
}

func (i GetPlanStageTargetArgs) ToGetPlanStageTargetOutput() GetPlanStageTargetOutput {
	return i.ToGetPlanStageTargetOutputWithContext(context.Background())
}

func (i GetPlanStageTargetArgs) ToGetPlanStageTargetOutputWithContext(ctx context.Context) GetPlanStageTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlanStageTargetOutput)
}

func (i *GetPlanStageTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPlanStageTargetArgs] {
	return pulumix.Val(i)
}

type GetPlanStageTargetOutput struct{ *pulumi.OutputState }

func (GetPlanStageTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStageTarget)(nil)).Elem()
}

func (o GetPlanStageTargetOutput) ToGetPlanStageTargetOutput() GetPlanStageTargetOutput {
	return o
}

func (o GetPlanStageTargetOutput) ToGetPlanStageTargetOutputWithContext(ctx context.Context) GetPlanStageTargetOutput {
	return o
}

func (o GetPlanStageTargetOutput) ToOutput(ctx context.Context) pulumix.Output[GetPlanStageTarget] {
	return pulumix.Output[GetPlanStageTarget]{
		OutputState: o.OutputState,
	}
}

func (o GetPlanStageTargetOutput) ChannelTargetInfos() pulumix.GArrayOutput[GetPlanStageTargetChannelTargetInfo, GetPlanStageTargetChannelTargetInfoOutput] {
	value := pulumix.Apply[GetPlanStageTarget](o, func(v GetPlanStageTarget) []GetPlanStageTargetChannelTargetInfo { return v.ChannelTargetInfos })
	return pulumix.GArrayOutput[GetPlanStageTargetChannelTargetInfo, GetPlanStageTargetChannelTargetInfoOutput]{OutputState: value.OutputState}
}

func (o GetPlanStageTargetOutput) ContactTargetInfos() pulumix.GArrayOutput[GetPlanStageTargetContactTargetInfo, GetPlanStageTargetContactTargetInfoOutput] {
	value := pulumix.Apply[GetPlanStageTarget](o, func(v GetPlanStageTarget) []GetPlanStageTargetContactTargetInfo { return v.ContactTargetInfos })
	return pulumix.GArrayOutput[GetPlanStageTargetContactTargetInfo, GetPlanStageTargetContactTargetInfoOutput]{OutputState: value.OutputState}
}

type GetPlanStageTargetChannelTargetInfo struct {
	ContactChannelId       string `pulumi:"contactChannelId"`
	RetryIntervalInMinutes int    `pulumi:"retryIntervalInMinutes"`
}

type GetPlanStageTargetChannelTargetInfoArgs struct {
	ContactChannelId       pulumix.Input[string] `pulumi:"contactChannelId"`
	RetryIntervalInMinutes pulumix.Input[int]    `pulumi:"retryIntervalInMinutes"`
}

func (GetPlanStageTargetChannelTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStageTargetChannelTargetInfo)(nil)).Elem()
}

func (i GetPlanStageTargetChannelTargetInfoArgs) ToGetPlanStageTargetChannelTargetInfoOutput() GetPlanStageTargetChannelTargetInfoOutput {
	return i.ToGetPlanStageTargetChannelTargetInfoOutputWithContext(context.Background())
}

func (i GetPlanStageTargetChannelTargetInfoArgs) ToGetPlanStageTargetChannelTargetInfoOutputWithContext(ctx context.Context) GetPlanStageTargetChannelTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlanStageTargetChannelTargetInfoOutput)
}

func (i *GetPlanStageTargetChannelTargetInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPlanStageTargetChannelTargetInfoArgs] {
	return pulumix.Val(i)
}

type GetPlanStageTargetChannelTargetInfoOutput struct{ *pulumi.OutputState }

func (GetPlanStageTargetChannelTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStageTargetChannelTargetInfo)(nil)).Elem()
}

func (o GetPlanStageTargetChannelTargetInfoOutput) ToGetPlanStageTargetChannelTargetInfoOutput() GetPlanStageTargetChannelTargetInfoOutput {
	return o
}

func (o GetPlanStageTargetChannelTargetInfoOutput) ToGetPlanStageTargetChannelTargetInfoOutputWithContext(ctx context.Context) GetPlanStageTargetChannelTargetInfoOutput {
	return o
}

func (o GetPlanStageTargetChannelTargetInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetPlanStageTargetChannelTargetInfo] {
	return pulumix.Output[GetPlanStageTargetChannelTargetInfo]{
		OutputState: o.OutputState,
	}
}

func (o GetPlanStageTargetChannelTargetInfoOutput) ContactChannelId() pulumix.Output[string] {
	return pulumix.Apply[GetPlanStageTargetChannelTargetInfo](o, func(v GetPlanStageTargetChannelTargetInfo) string { return v.ContactChannelId })
}

func (o GetPlanStageTargetChannelTargetInfoOutput) RetryIntervalInMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetPlanStageTargetChannelTargetInfo](o, func(v GetPlanStageTargetChannelTargetInfo) int { return v.RetryIntervalInMinutes })
}

type GetPlanStageTargetContactTargetInfo struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId   string `pulumi:"contactId"`
	IsEssential bool   `pulumi:"isEssential"`
}

type GetPlanStageTargetContactTargetInfoArgs struct {
	// The Amazon Resource Name (ARN) of the contact or escalation plan.
	ContactId   pulumix.Input[string] `pulumi:"contactId"`
	IsEssential pulumix.Input[bool]   `pulumi:"isEssential"`
}

func (GetPlanStageTargetContactTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStageTargetContactTargetInfo)(nil)).Elem()
}

func (i GetPlanStageTargetContactTargetInfoArgs) ToGetPlanStageTargetContactTargetInfoOutput() GetPlanStageTargetContactTargetInfoOutput {
	return i.ToGetPlanStageTargetContactTargetInfoOutputWithContext(context.Background())
}

func (i GetPlanStageTargetContactTargetInfoArgs) ToGetPlanStageTargetContactTargetInfoOutputWithContext(ctx context.Context) GetPlanStageTargetContactTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlanStageTargetContactTargetInfoOutput)
}

func (i *GetPlanStageTargetContactTargetInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPlanStageTargetContactTargetInfoArgs] {
	return pulumix.Val(i)
}

type GetPlanStageTargetContactTargetInfoOutput struct{ *pulumi.OutputState }

func (GetPlanStageTargetContactTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlanStageTargetContactTargetInfo)(nil)).Elem()
}

func (o GetPlanStageTargetContactTargetInfoOutput) ToGetPlanStageTargetContactTargetInfoOutput() GetPlanStageTargetContactTargetInfoOutput {
	return o
}

func (o GetPlanStageTargetContactTargetInfoOutput) ToGetPlanStageTargetContactTargetInfoOutputWithContext(ctx context.Context) GetPlanStageTargetContactTargetInfoOutput {
	return o
}

func (o GetPlanStageTargetContactTargetInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetPlanStageTargetContactTargetInfo] {
	return pulumix.Output[GetPlanStageTargetContactTargetInfo]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the contact or escalation plan.
func (o GetPlanStageTargetContactTargetInfoOutput) ContactId() pulumix.Output[string] {
	return pulumix.Apply[GetPlanStageTargetContactTargetInfo](o, func(v GetPlanStageTargetContactTargetInfo) string { return v.ContactId })
}

func (o GetPlanStageTargetContactTargetInfoOutput) IsEssential() pulumix.Output[bool] {
	return pulumix.Apply[GetPlanStageTargetContactTargetInfo](o, func(v GetPlanStageTargetContactTargetInfo) bool { return v.IsEssential })
}

func init() {
	pulumi.RegisterOutputType(ContactChannelDeliveryAddressOutput{})
	pulumi.RegisterOutputType(PlanStageOutput{})
	pulumi.RegisterOutputType(PlanStageTargetOutput{})
	pulumi.RegisterOutputType(PlanStageTargetChannelTargetInfoOutput{})
	pulumi.RegisterOutputType(PlanStageTargetContactTargetInfoOutput{})
	pulumi.RegisterOutputType(GetContactChannelDeliveryAddressOutput{})
	pulumi.RegisterOutputType(GetPlanStageOutput{})
	pulumi.RegisterOutputType(GetPlanStageTargetOutput{})
	pulumi.RegisterOutputType(GetPlanStageTargetChannelTargetInfoOutput{})
	pulumi.RegisterOutputType(GetPlanStageTargetContactTargetInfoOutput{})
}
