// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Image Builder Infrastructure Configuration.
type InfrastructureConfiguration struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Date when the configuration was created.
	DateCreated pulumix.Output[string] `pulumi:"dateCreated"`
	// Date when the configuration was updated.
	DateUpdated pulumix.Output[string] `pulumi:"dateUpdated"`
	// Description for the configuration.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	InstanceMetadataOptions pulumix.GPtrOutput[InfrastructureConfigurationInstanceMetadataOptions, InfrastructureConfigurationInstanceMetadataOptionsOutput] `pulumi:"instanceMetadataOptions"`
	// Name of IAM Instance Profile.
	InstanceProfileName pulumix.Output[string] `pulumi:"instanceProfileName"`
	// Set of EC2 Instance Types.
	InstanceTypes pulumix.ArrayOutput[string] `pulumi:"instanceTypes"`
	// Name of EC2 Key Pair.
	KeyPair pulumix.Output[*string] `pulumi:"keyPair"`
	// Configuration block with logging settings. Detailed below.
	Logging pulumix.GPtrOutput[InfrastructureConfigurationLogging, InfrastructureConfigurationLoggingOutput] `pulumi:"logging"`
	// Name for the configuration.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	ResourceTags pulumix.MapOutput[string] `pulumi:"resourceTags"`
	// Set of EC2 Security Group identifiers.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// Amazon Resource Name (ARN) of SNS Topic.
	SnsTopicArn pulumix.Output[*string] `pulumi:"snsTopicArn"`
	// EC2 Subnet identifier. Also requires `securityGroupIds` argument.
	SubnetId pulumix.Output[*string] `pulumi:"subnetId"`
	// Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
	TerminateInstanceOnFailure pulumix.Output[*bool] `pulumi:"terminateInstanceOnFailure"`
}

// NewInfrastructureConfiguration registers a new resource with the given unique name, arguments, and options.
func NewInfrastructureConfiguration(ctx *pulumi.Context,
	name string, args *InfrastructureConfigurationArgs, opts ...pulumi.ResourceOption) (*InfrastructureConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceProfileName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceProfileName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfrastructureConfiguration
	err := ctx.RegisterResource("aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfrastructureConfiguration gets an existing InfrastructureConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfrastructureConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfrastructureConfigurationState, opts ...pulumi.ResourceOption) (*InfrastructureConfiguration, error) {
	var resource InfrastructureConfiguration
	err := ctx.ReadResource("aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfrastructureConfiguration resources.
type infrastructureConfigurationState struct {
	// Amazon Resource Name (ARN) of the configuration.
	Arn *string `pulumi:"arn"`
	// Date when the configuration was created.
	DateCreated *string `pulumi:"dateCreated"`
	// Date when the configuration was updated.
	DateUpdated *string `pulumi:"dateUpdated"`
	// Description for the configuration.
	Description *string `pulumi:"description"`
	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	InstanceMetadataOptions *InfrastructureConfigurationInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// Name of IAM Instance Profile.
	InstanceProfileName *string `pulumi:"instanceProfileName"`
	// Set of EC2 Instance Types.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// Name of EC2 Key Pair.
	KeyPair *string `pulumi:"keyPair"`
	// Configuration block with logging settings. Detailed below.
	Logging *InfrastructureConfigurationLogging `pulumi:"logging"`
	// Name for the configuration.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	ResourceTags map[string]string `pulumi:"resourceTags"`
	// Set of EC2 Security Group identifiers.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Amazon Resource Name (ARN) of SNS Topic.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// EC2 Subnet identifier. Also requires `securityGroupIds` argument.
	SubnetId *string `pulumi:"subnetId"`
	// Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
	TerminateInstanceOnFailure *bool `pulumi:"terminateInstanceOnFailure"`
}

type InfrastructureConfigurationState struct {
	// Amazon Resource Name (ARN) of the configuration.
	Arn pulumix.Input[*string]
	// Date when the configuration was created.
	DateCreated pulumix.Input[*string]
	// Date when the configuration was updated.
	DateUpdated pulumix.Input[*string]
	// Description for the configuration.
	Description pulumix.Input[*string]
	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	InstanceMetadataOptions pulumix.Input[*InfrastructureConfigurationInstanceMetadataOptionsArgs]
	// Name of IAM Instance Profile.
	InstanceProfileName pulumix.Input[*string]
	// Set of EC2 Instance Types.
	InstanceTypes pulumix.Input[[]string]
	// Name of EC2 Key Pair.
	KeyPair pulumix.Input[*string]
	// Configuration block with logging settings. Detailed below.
	Logging pulumix.Input[*InfrastructureConfigurationLoggingArgs]
	// Name for the configuration.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	ResourceTags pulumix.Input[map[string]string]
	// Set of EC2 Security Group identifiers.
	SecurityGroupIds pulumix.Input[[]string]
	// Amazon Resource Name (ARN) of SNS Topic.
	SnsTopicArn pulumix.Input[*string]
	// EC2 Subnet identifier. Also requires `securityGroupIds` argument.
	SubnetId pulumix.Input[*string]
	// Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
	TerminateInstanceOnFailure pulumix.Input[*bool]
}

func (InfrastructureConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureConfigurationState)(nil)).Elem()
}

type infrastructureConfigurationArgs struct {
	// Description for the configuration.
	Description *string `pulumi:"description"`
	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	InstanceMetadataOptions *InfrastructureConfigurationInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// Name of IAM Instance Profile.
	InstanceProfileName string `pulumi:"instanceProfileName"`
	// Set of EC2 Instance Types.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// Name of EC2 Key Pair.
	KeyPair *string `pulumi:"keyPair"`
	// Configuration block with logging settings. Detailed below.
	Logging *InfrastructureConfigurationLogging `pulumi:"logging"`
	// Name for the configuration.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	ResourceTags map[string]string `pulumi:"resourceTags"`
	// Set of EC2 Security Group identifiers.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Amazon Resource Name (ARN) of SNS Topic.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// EC2 Subnet identifier. Also requires `securityGroupIds` argument.
	SubnetId *string `pulumi:"subnetId"`
	// Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
	TerminateInstanceOnFailure *bool `pulumi:"terminateInstanceOnFailure"`
}

// The set of arguments for constructing a InfrastructureConfiguration resource.
type InfrastructureConfigurationArgs struct {
	// Description for the configuration.
	Description pulumix.Input[*string]
	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	InstanceMetadataOptions pulumix.Input[*InfrastructureConfigurationInstanceMetadataOptionsArgs]
	// Name of IAM Instance Profile.
	InstanceProfileName pulumix.Input[string]
	// Set of EC2 Instance Types.
	InstanceTypes pulumix.Input[[]string]
	// Name of EC2 Key Pair.
	KeyPair pulumix.Input[*string]
	// Configuration block with logging settings. Detailed below.
	Logging pulumix.Input[*InfrastructureConfigurationLoggingArgs]
	// Name for the configuration.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	ResourceTags pulumix.Input[map[string]string]
	// Set of EC2 Security Group identifiers.
	SecurityGroupIds pulumix.Input[[]string]
	// Amazon Resource Name (ARN) of SNS Topic.
	SnsTopicArn pulumix.Input[*string]
	// EC2 Subnet identifier. Also requires `securityGroupIds` argument.
	SubnetId pulumix.Input[*string]
	// Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
	TerminateInstanceOnFailure pulumix.Input[*bool]
}

func (InfrastructureConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureConfigurationArgs)(nil)).Elem()
}

type InfrastructureConfigurationOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfiguration)(nil)).Elem()
}

func (o InfrastructureConfigurationOutput) ToInfrastructureConfigurationOutput() InfrastructureConfigurationOutput {
	return o
}

func (o InfrastructureConfigurationOutput) ToInfrastructureConfigurationOutputWithContext(ctx context.Context) InfrastructureConfigurationOutput {
	return o
}

func (o InfrastructureConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfiguration] {
	return pulumix.Output[InfrastructureConfiguration]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the configuration.
func (o InfrastructureConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date when the configuration was created.
func (o InfrastructureConfigurationOutput) DateCreated() pulumix.Output[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[string] { return v.DateCreated })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date when the configuration was updated.
func (o InfrastructureConfigurationOutput) DateUpdated() pulumix.Output[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[string] { return v.DateUpdated })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description for the configuration.
func (o InfrastructureConfigurationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
func (o InfrastructureConfigurationOutput) InstanceMetadataOptions() pulumix.GPtrOutput[InfrastructureConfigurationInstanceMetadataOptions, InfrastructureConfigurationInstanceMetadataOptionsOutput] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.GPtrOutput[InfrastructureConfigurationInstanceMetadataOptions, InfrastructureConfigurationInstanceMetadataOptionsOutput] {
		return v.InstanceMetadataOptions
	})
	unwrapped := pulumix.Flatten[*InfrastructureConfigurationInstanceMetadataOptions, pulumix.GPtrOutput[InfrastructureConfigurationInstanceMetadataOptions, InfrastructureConfigurationInstanceMetadataOptionsOutput]](value)
	return pulumix.GPtrOutput[InfrastructureConfigurationInstanceMetadataOptions, InfrastructureConfigurationInstanceMetadataOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Name of IAM Instance Profile.
func (o InfrastructureConfigurationOutput) InstanceProfileName() pulumix.Output[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[string] { return v.InstanceProfileName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of EC2 Instance Types.
func (o InfrastructureConfigurationOutput) InstanceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.ArrayOutput[string] { return v.InstanceTypes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of EC2 Key Pair.
func (o InfrastructureConfigurationOutput) KeyPair() pulumix.Output[*string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[*string] { return v.KeyPair })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block with logging settings. Detailed below.
func (o InfrastructureConfigurationOutput) Logging() pulumix.GPtrOutput[InfrastructureConfigurationLogging, InfrastructureConfigurationLoggingOutput] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.GPtrOutput[InfrastructureConfigurationLogging, InfrastructureConfigurationLoggingOutput] {
		return v.Logging
	})
	unwrapped := pulumix.Flatten[*InfrastructureConfigurationLogging, pulumix.GPtrOutput[InfrastructureConfigurationLogging, InfrastructureConfigurationLoggingOutput]](value)
	return pulumix.GPtrOutput[InfrastructureConfigurationLogging, InfrastructureConfigurationLoggingOutput]{OutputState: unwrapped.OutputState}
}

// Name for the configuration.
//
// The following arguments are optional:
func (o InfrastructureConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags to assign to infrastructure created by the configuration.
func (o InfrastructureConfigurationOutput) ResourceTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.MapOutput[string] { return v.ResourceTags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Set of EC2 Security Group identifiers.
func (o InfrastructureConfigurationOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Amazon Resource Name (ARN) of SNS Topic.
func (o InfrastructureConfigurationOutput) SnsTopicArn() pulumix.Output[*string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[*string] { return v.SnsTopicArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// EC2 Subnet identifier. Also requires `securityGroupIds` argument.
func (o InfrastructureConfigurationOutput) SubnetId() pulumix.Output[*string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[*string] { return v.SubnetId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags to assign to the configuration. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o InfrastructureConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o InfrastructureConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.
func (o InfrastructureConfigurationOutput) TerminateInstanceOnFailure() pulumix.Output[*bool] {
	value := pulumix.Apply[InfrastructureConfiguration](o, func(v InfrastructureConfiguration) pulumix.Output[*bool] { return v.TerminateInstanceOnFailure })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(InfrastructureConfigurationOutput{})
}
