// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM role.
//
// > **NOTE:** If policies are attached to the role via the `iam.PolicyAttachment` resource and you are modifying the role `name` or `path`, the `forceDetachPolicies` argument must be set to `true` and applied before attempting the operation otherwise you will encounter a `DeleteConflict` error. The `iam.RolePolicyAttachment` resource (recommended) does not have this requirement.
//
// > **NOTE:** If you use this resource's `managedPolicyArns` argument or `inlinePolicy` configuration blocks, this resource will take over exclusive management of the role's respective policy types (e.g., both policy types if both arguments are used). These arguments are incompatible with other ways of managing a role's policies, such as `iam.PolicyAttachment`, `iam.RolePolicyAttachment`, and `iam.RolePolicy`. If you attempt to manage a role's policies by multiple means, you will get resource cycling and/or errors.
type Role struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) specifying the role.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Policy that grants an entity permission to assume the role.
	//
	// > **NOTE:** The `assumeRolePolicy` is very similar to but slightly different than a standard IAM policy and cannot use an `iam.Policy` resource.  However, it _can_ use an `iam.getPolicyDocument` data source. See the example above of how this works.
	//
	// The following arguments are optional:
	AssumeRolePolicy pulumix.Output[string] `pulumi:"assumeRolePolicy"`
	// Creation date of the IAM role.
	CreateDate pulumix.Output[string] `pulumi:"createDate"`
	// Description of the role.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies pulumix.Output[*bool] `pulumi:"forceDetachPolicies"`
	// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inlinePolicy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
	InlinePolicies    pulumix.GArrayOutput[RoleInlinePolicy, RoleInlinePolicyOutput] `pulumi:"inlinePolicies"`
	ManagedPolicyArns pulumix.ArrayOutput[string]                                    `pulumi:"managedPolicyArns"`
	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration pulumix.Output[*int] `pulumi:"maxSessionDuration"`
	// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path pulumix.Output[*string] `pulumi:"path"`
	// ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary pulumix.Output[*string] `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM role. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Stable and unique string identifying the role.
	UniqueId pulumix.Output[string] `pulumi:"uniqueId"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssumeRolePolicy == nil {
		return nil, errors.New("invalid value for required argument 'AssumeRolePolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("aws:iam/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("aws:iam/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// Amazon Resource Name (ARN) specifying the role.
	Arn *string `pulumi:"arn"`
	// Policy that grants an entity permission to assume the role.
	//
	// > **NOTE:** The `assumeRolePolicy` is very similar to but slightly different than a standard IAM policy and cannot use an `iam.Policy` resource.  However, it _can_ use an `iam.getPolicyDocument` data source. See the example above of how this works.
	//
	// The following arguments are optional:
	AssumeRolePolicy interface{} `pulumi:"assumeRolePolicy"`
	// Creation date of the IAM role.
	CreateDate *string `pulumi:"createDate"`
	// Description of the role.
	Description *string `pulumi:"description"`
	// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies *bool `pulumi:"forceDetachPolicies"`
	// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inlinePolicy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
	InlinePolicies    []RoleInlinePolicy `pulumi:"inlinePolicies"`
	ManagedPolicyArns []string           `pulumi:"managedPolicyArns"`
	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Name *string `pulumi:"name"`
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path *string `pulumi:"path"`
	// ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary *string `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM role. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Stable and unique string identifying the role.
	UniqueId *string `pulumi:"uniqueId"`
}

type RoleState struct {
	// Amazon Resource Name (ARN) specifying the role.
	Arn pulumix.Input[*string]
	// Policy that grants an entity permission to assume the role.
	//
	// > **NOTE:** The `assumeRolePolicy` is very similar to but slightly different than a standard IAM policy and cannot use an `iam.Policy` resource.  However, it _can_ use an `iam.getPolicyDocument` data source. See the example above of how this works.
	//
	// The following arguments are optional:
	AssumeRolePolicy pulumix.Input[*any]
	// Creation date of the IAM role.
	CreateDate pulumix.Input[*string]
	// Description of the role.
	Description pulumix.Input[*string]
	// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies pulumix.Input[*bool]
	// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inlinePolicy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
	InlinePolicies    pulumix.Input[[]*RoleInlinePolicyArgs]
	ManagedPolicyArns pulumix.Input[[]string]
	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration pulumix.Input[*int]
	// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Name pulumix.Input[*string]
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path pulumix.Input[*string]
	// ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary pulumix.Input[*string]
	// Key-value mapping of tags for the IAM role. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Stable and unique string identifying the role.
	UniqueId pulumix.Input[*string]
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// Policy that grants an entity permission to assume the role.
	//
	// > **NOTE:** The `assumeRolePolicy` is very similar to but slightly different than a standard IAM policy and cannot use an `iam.Policy` resource.  However, it _can_ use an `iam.getPolicyDocument` data source. See the example above of how this works.
	//
	// The following arguments are optional:
	AssumeRolePolicy interface{} `pulumi:"assumeRolePolicy"`
	// Description of the role.
	Description *string `pulumi:"description"`
	// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies *bool `pulumi:"forceDetachPolicies"`
	// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inlinePolicy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
	InlinePolicies    []RoleInlinePolicy `pulumi:"inlinePolicies"`
	ManagedPolicyArns []string           `pulumi:"managedPolicyArns"`
	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration *int `pulumi:"maxSessionDuration"`
	// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Name *string `pulumi:"name"`
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path *string `pulumi:"path"`
	// ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary *string `pulumi:"permissionsBoundary"`
	// Key-value mapping of tags for the IAM role. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// Policy that grants an entity permission to assume the role.
	//
	// > **NOTE:** The `assumeRolePolicy` is very similar to but slightly different than a standard IAM policy and cannot use an `iam.Policy` resource.  However, it _can_ use an `iam.getPolicyDocument` data source. See the example above of how this works.
	//
	// The following arguments are optional:
	AssumeRolePolicy pulumix.Input[any]
	// Description of the role.
	Description pulumix.Input[*string]
	// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
	ForceDetachPolicies pulumix.Input[*bool]
	// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inlinePolicy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
	InlinePolicies    pulumix.Input[[]*RoleInlinePolicyArgs]
	ManagedPolicyArns pulumix.Input[[]string]
	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	MaxSessionDuration pulumix.Input[*int]
	// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Name pulumix.Input[*string]
	// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
	Path pulumix.Input[*string]
	// ARN of the policy that is used to set the permissions boundary for the role.
	PermissionsBoundary pulumix.Input[*string]
	// Key-value mapping of tags for the IAM role. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func (o RoleOutput) ToOutput(ctx context.Context) pulumix.Output[Role] {
	return pulumix.Output[Role]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) specifying the role.
func (o RoleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Policy that grants an entity permission to assume the role.
//
// > **NOTE:** The `assumeRolePolicy` is very similar to but slightly different than a standard IAM policy and cannot use an `iam.Policy` resource.  However, it _can_ use an `iam.getPolicyDocument` data source. See the example above of how this works.
//
// The following arguments are optional:
func (o RoleOutput) AssumeRolePolicy() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.AssumeRolePolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creation date of the IAM role.
func (o RoleOutput) CreateDate() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.CreateDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the role.
func (o RoleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
func (o RoleOutput) ForceDetachPolicies() pulumix.Output[*bool] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*bool] { return v.ForceDetachPolicies })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inlinePolicy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
func (o RoleOutput) InlinePolicies() pulumix.GArrayOutput[RoleInlinePolicy, RoleInlinePolicyOutput] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.GArrayOutput[RoleInlinePolicy, RoleInlinePolicyOutput] { return v.InlinePolicies })
	unwrapped := pulumix.Flatten[[]RoleInlinePolicy, pulumix.GArrayOutput[RoleInlinePolicy, RoleInlinePolicyOutput]](value)
	return pulumix.GArrayOutput[RoleInlinePolicy, RoleInlinePolicyOutput]{OutputState: unwrapped.OutputState}
}

func (o RoleOutput) ManagedPolicyArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.ArrayOutput[string] { return v.ManagedPolicyArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
func (o RoleOutput) MaxSessionDuration() pulumix.Output[*int] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*int] { return v.MaxSessionDuration })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
func (o RoleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
func (o RoleOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
func (o RoleOutput) Path() pulumix.Output[*string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*string] { return v.Path })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the policy that is used to set the permissions boundary for the role.
func (o RoleOutput) PermissionsBoundary() pulumix.Output[*string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*string] { return v.PermissionsBoundary })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value mapping of tags for the IAM role. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RoleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RoleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Stable and unique string identifying the role.
func (o RoleOutput) UniqueId() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.UniqueId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RoleOutput{})
}
