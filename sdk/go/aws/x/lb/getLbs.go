// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get a list of Load Balancer ARNs matching the specified criteria. Useful for passing to other
// resources.
func GetLbs(ctx *pulumi.Context, args *GetLbsArgs, opts ...pulumi.InvokeOption) (*GetLbsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLbsResult
	err := ctx.Invoke("aws:lb/getLbs:getLbs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbs.
type GetLbsArgs struct {
	// Map of tags, each pair of which must exactly match
	// a pair on the desired Load Balancers.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLbs.
type GetLbsResult struct {
	// Set of Load Balancer ARNs.
	Arns []string `pulumi:"arns"`
	// The provider-assigned unique ID for this managed resource.
	Id   string            `pulumi:"id"`
	Tags map[string]string `pulumi:"tags"`
}

func GetLbsOutput(ctx *pulumi.Context, args GetLbsOutputArgs, opts ...pulumi.InvokeOption) GetLbsResultOutput {
	outputResult := pulumix.ApplyErr[*GetLbsArgs](args.ToOutput(), func(plainArgs *GetLbsArgs) (*GetLbsResult, error) {
		return GetLbs(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLbsResultOutput, *GetLbsResult](outputResult)
}

// A collection of arguments for invoking getLbs.
type GetLbsOutputArgs struct {
	// Map of tags, each pair of which must exactly match
	// a pair on the desired Load Balancers.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetLbsOutputArgs) ToOutput() pulumix.Output[*GetLbsArgs] {
	allArgs := pulumix.All(
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLbsArgs {
		return &GetLbsArgs{
			Tags: resolvedArgs[0].(map[string]string),
		}
	})
}

type GetLbsResultOutput struct{ *pulumi.OutputState }

func (GetLbsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbsResult)(nil)).Elem()
}

func (o GetLbsResultOutput) ToOutput(context.Context) pulumix.Output[*GetLbsResult] {
	return pulumix.Output[*GetLbsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLbsResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLbsResult](o, func(v *GetLbsResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLbsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLbsResult](o, func(v *GetLbsResult) string { return v.Id })
}

func (o GetLbsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetLbsResult](o, func(v *GetLbsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
