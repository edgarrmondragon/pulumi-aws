// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ContainerRecipeComponent struct {
	// Amazon Resource Name (ARN) of the Image Builder Component to associate.
	ComponentArn string `pulumi:"componentArn"`
	// Configuration block(s) for parameters to configure the component. Detailed below.
	Parameters []ContainerRecipeComponentParameter `pulumi:"parameters"`
}

type ContainerRecipeComponentArgs struct {
	// Amazon Resource Name (ARN) of the Image Builder Component to associate.
	ComponentArn pulumix.Input[string] `pulumi:"componentArn"`
	// Configuration block(s) for parameters to configure the component. Detailed below.
	Parameters pulumix.Input[[]*ContainerRecipeComponentParameterArgs] `pulumi:"parameters"`
}

func (ContainerRecipeComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponent)(nil)).Elem()
}

func (i ContainerRecipeComponentArgs) ToContainerRecipeComponentOutput() ContainerRecipeComponentOutput {
	return i.ToContainerRecipeComponentOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentArgs) ToContainerRecipeComponentOutputWithContext(ctx context.Context) ContainerRecipeComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentOutput)
}

func (i *ContainerRecipeComponentArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeComponentArgs] {
	return pulumix.Val(i)
}

type ContainerRecipeComponentOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponent)(nil)).Elem()
}

func (o ContainerRecipeComponentOutput) ToContainerRecipeComponentOutput() ContainerRecipeComponentOutput {
	return o
}

func (o ContainerRecipeComponentOutput) ToContainerRecipeComponentOutputWithContext(ctx context.Context) ContainerRecipeComponentOutput {
	return o
}

func (o ContainerRecipeComponentOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeComponent] {
	return pulumix.Output[ContainerRecipeComponent]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Image Builder Component to associate.
func (o ContainerRecipeComponentOutput) ComponentArn() pulumix.Output[string] {
	return pulumix.Apply[ContainerRecipeComponent](o, func(v ContainerRecipeComponent) string { return v.ComponentArn })
}

// Configuration block(s) for parameters to configure the component. Detailed below.
func (o ContainerRecipeComponentOutput) Parameters() pulumix.GArrayOutput[ContainerRecipeComponentParameter, ContainerRecipeComponentParameterOutput] {
	value := pulumix.Apply[ContainerRecipeComponent](o, func(v ContainerRecipeComponent) []ContainerRecipeComponentParameter { return v.Parameters })
	return pulumix.GArrayOutput[ContainerRecipeComponentParameter, ContainerRecipeComponentParameterOutput]{OutputState: value.OutputState}
}

type ContainerRecipeComponentParameter struct {
	// The name of the component parameter.
	Name string `pulumi:"name"`
	// The value for the named component parameter.
	Value string `pulumi:"value"`
}

type ContainerRecipeComponentParameterArgs struct {
	// The name of the component parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value for the named component parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ContainerRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentParameter)(nil)).Elem()
}

func (i ContainerRecipeComponentParameterArgs) ToContainerRecipeComponentParameterOutput() ContainerRecipeComponentParameterOutput {
	return i.ToContainerRecipeComponentParameterOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentParameterArgs) ToContainerRecipeComponentParameterOutputWithContext(ctx context.Context) ContainerRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentParameterOutput)
}

func (i *ContainerRecipeComponentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeComponentParameterArgs] {
	return pulumix.Val(i)
}

type ContainerRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentParameter)(nil)).Elem()
}

func (o ContainerRecipeComponentParameterOutput) ToContainerRecipeComponentParameterOutput() ContainerRecipeComponentParameterOutput {
	return o
}

func (o ContainerRecipeComponentParameterOutput) ToContainerRecipeComponentParameterOutputWithContext(ctx context.Context) ContainerRecipeComponentParameterOutput {
	return o
}

func (o ContainerRecipeComponentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeComponentParameter] {
	return pulumix.Output[ContainerRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the component parameter.
func (o ContainerRecipeComponentParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ContainerRecipeComponentParameter](o, func(v ContainerRecipeComponentParameter) string { return v.Name })
}

// The value for the named component parameter.
func (o ContainerRecipeComponentParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ContainerRecipeComponentParameter](o, func(v ContainerRecipeComponentParameter) string { return v.Value })
}

type ContainerRecipeInstanceConfiguration struct {
	// Configuration block(s) with block device mappings for the container recipe. Detailed below.
	BlockDeviceMappings []ContainerRecipeInstanceConfigurationBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	Image *string `pulumi:"image"`
}

type ContainerRecipeInstanceConfigurationArgs struct {
	// Configuration block(s) with block device mappings for the container recipe. Detailed below.
	BlockDeviceMappings pulumix.Input[[]*ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs] `pulumi:"blockDeviceMappings"`
	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	Image pulumix.Input[*string] `pulumi:"image"`
}

func (ContainerRecipeInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput {
	return i.ToContainerRecipeInstanceConfigurationOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationOutput)
}

func (i *ContainerRecipeInstanceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeInstanceConfigurationArgs] {
	return pulumix.Val(i)
}

type ContainerRecipeInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceConfiguration] {
	return pulumix.Output[ContainerRecipeInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Configuration block(s) with block device mappings for the container recipe. Detailed below.
func (o ContainerRecipeInstanceConfigurationOutput) BlockDeviceMappings() pulumix.GArrayOutput[ContainerRecipeInstanceConfigurationBlockDeviceMapping, ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput] {
	value := pulumix.Apply[ContainerRecipeInstanceConfiguration](o, func(v ContainerRecipeInstanceConfiguration) []ContainerRecipeInstanceConfigurationBlockDeviceMapping {
		return v.BlockDeviceMappings
	})
	return pulumix.GArrayOutput[ContainerRecipeInstanceConfigurationBlockDeviceMapping, ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput]{OutputState: value.OutputState}
}

// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
func (o ContainerRecipeInstanceConfigurationOutput) Image() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfiguration](o, func(v ContainerRecipeInstanceConfiguration) *string { return v.Image })
}

type ContainerRecipeInstanceConfigurationBlockDeviceMapping struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName *string `pulumi:"deviceName"`
	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	Ebs *ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs `pulumi:"ebs"`
	// Set to `true` to remove a mapping from the parent image.
	NoDevice *bool `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName *string `pulumi:"virtualName"`
}

type ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName pulumix.Input[*string] `pulumi:"deviceName"`
	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	Ebs pulumix.Input[*ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs] `pulumi:"ebs"`
	// Set to `true` to remove a mapping from the parent image.
	NoDevice pulumix.Input[*bool] `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName pulumix.Input[*string] `pulumi:"virtualName"`
}

func (ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfigurationBlockDeviceMapping)(nil)).Elem()
}

func (i ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ToContainerRecipeInstanceConfigurationBlockDeviceMappingOutput() ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return i.ToContainerRecipeInstanceConfigurationBlockDeviceMappingOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ToContainerRecipeInstanceConfigurationBlockDeviceMappingOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput)
}

func (i *ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeInstanceConfigurationBlockDeviceMappingArgs] {
	return pulumix.Val(i)
}

type ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfigurationBlockDeviceMapping)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ToContainerRecipeInstanceConfigurationBlockDeviceMappingOutput() ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ToContainerRecipeInstanceConfigurationBlockDeviceMappingOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceConfigurationBlockDeviceMapping] {
	return pulumix.Output[ContainerRecipeInstanceConfigurationBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) DeviceName() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMapping) *string { return v.DeviceName })
}

// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) Ebs() pulumix.GPtrOutput[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs, ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput] {
	value := pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMapping) *ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs {
		return v.Ebs
	})
	return pulumix.GPtrOutput[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs, ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput]{OutputState: value.OutputState}
}

// Set to `true` to remove a mapping from the parent image.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) NoDevice() pulumix.Output[*bool] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMapping) *bool { return v.NoDevice })
}

// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) VirtualName() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMapping) *string { return v.VirtualName })
}

type ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination *string `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted *string `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops *int `pulumi:"iops"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput *int `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize *int `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType *string `pulumi:"volumeType"`
}

type ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination pulumix.Input[*string] `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted pulumix.Input[*string] `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId pulumix.Input[*string] `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput pulumix.Input[*int] `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize pulumix.Input[*int] `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType pulumix.Input[*string] `pulumi:"volumeType"`
}

func (ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs)(nil)).Elem()
}

func (i ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs) ToContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput() ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput {
	return i.ToContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs) ToContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput)
}

func (i *ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsArgs] {
	return pulumix.Val(i)
}

type ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) ToContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput() ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) ToContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs] {
	return pulumix.Output[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs]{
		OutputState: o.OutputState,
	}
}

// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) DeleteOnTermination() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *string {
		return v.DeleteOnTermination
	})
}

// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) Encrypted() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *string { return v.Encrypted })
}

// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *int { return v.Iops })
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *string { return v.KmsKeyId })
}

// Identifier of the EC2 Volume Snapshot.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) SnapshotId() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *string { return v.SnapshotId })
}

// For GP3 volumes only. The throughput in MiB/s that the volume supports.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) Throughput() pulumix.Output[*int] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *int { return v.Throughput })
}

// Size of the volume, in GiB.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) VolumeSize() pulumix.Output[*int] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *int { return v.VolumeSize })
}

// Type of the volume. For example, `gp2` or `io2`.
func (o ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput) VolumeType() pulumix.Output[*string] {
	return pulumix.Apply[ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs](o, func(v ContainerRecipeInstanceConfigurationBlockDeviceMappingEbs) *string { return v.VolumeType })
}

type ContainerRecipeTargetRepository struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName string `pulumi:"repositoryName"`
	// The service in which this image is registered. Valid values: `ECR`.
	Service string `pulumi:"service"`
}

type ContainerRecipeTargetRepositoryArgs struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
	// The service in which this image is registered. Valid values: `ECR`.
	Service pulumix.Input[string] `pulumi:"service"`
}

func (ContainerRecipeTargetRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeTargetRepository)(nil)).Elem()
}

func (i ContainerRecipeTargetRepositoryArgs) ToContainerRecipeTargetRepositoryOutput() ContainerRecipeTargetRepositoryOutput {
	return i.ToContainerRecipeTargetRepositoryOutputWithContext(context.Background())
}

func (i ContainerRecipeTargetRepositoryArgs) ToContainerRecipeTargetRepositoryOutputWithContext(ctx context.Context) ContainerRecipeTargetRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetRepositoryOutput)
}

func (i *ContainerRecipeTargetRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeTargetRepositoryArgs] {
	return pulumix.Val(i)
}

type ContainerRecipeTargetRepositoryOutput struct{ *pulumi.OutputState }

func (ContainerRecipeTargetRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeTargetRepository)(nil)).Elem()
}

func (o ContainerRecipeTargetRepositoryOutput) ToContainerRecipeTargetRepositoryOutput() ContainerRecipeTargetRepositoryOutput {
	return o
}

func (o ContainerRecipeTargetRepositoryOutput) ToContainerRecipeTargetRepositoryOutputWithContext(ctx context.Context) ContainerRecipeTargetRepositoryOutput {
	return o
}

func (o ContainerRecipeTargetRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeTargetRepository] {
	return pulumix.Output[ContainerRecipeTargetRepository]{
		OutputState: o.OutputState,
	}
}

// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
func (o ContainerRecipeTargetRepositoryOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[ContainerRecipeTargetRepository](o, func(v ContainerRecipeTargetRepository) string { return v.RepositoryName })
}

// The service in which this image is registered. Valid values: `ECR`.
func (o ContainerRecipeTargetRepositoryOutput) Service() pulumix.Output[string] {
	return pulumix.Apply[ContainerRecipeTargetRepository](o, func(v ContainerRecipeTargetRepository) string { return v.Service })
}

type DistributionConfigurationDistribution struct {
	// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
	AmiDistributionConfiguration *DistributionConfigurationDistributionAmiDistributionConfiguration `pulumi:"amiDistributionConfiguration"`
	// Configuration block with container distribution settings. Detailed below.
	ContainerDistributionConfiguration *DistributionConfigurationDistributionContainerDistributionConfiguration `pulumi:"containerDistributionConfiguration"`
	// Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
	FastLaunchConfigurations []DistributionConfigurationDistributionFastLaunchConfiguration `pulumi:"fastLaunchConfigurations"`
	// Set of launch template configuration settings that apply to image distribution. Detailed below.
	LaunchTemplateConfigurations []DistributionConfigurationDistributionLaunchTemplateConfiguration `pulumi:"launchTemplateConfigurations"`
	// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
	LicenseConfigurationArns []string `pulumi:"licenseConfigurationArns"`
	// AWS Region for the distribution.
	//
	// The following arguments are optional:
	Region string `pulumi:"region"`
}

type DistributionConfigurationDistributionArgs struct {
	// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
	AmiDistributionConfiguration pulumix.Input[*DistributionConfigurationDistributionAmiDistributionConfigurationArgs] `pulumi:"amiDistributionConfiguration"`
	// Configuration block with container distribution settings. Detailed below.
	ContainerDistributionConfiguration pulumix.Input[*DistributionConfigurationDistributionContainerDistributionConfigurationArgs] `pulumi:"containerDistributionConfiguration"`
	// Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
	FastLaunchConfigurations pulumix.Input[[]*DistributionConfigurationDistributionFastLaunchConfigurationArgs] `pulumi:"fastLaunchConfigurations"`
	// Set of launch template configuration settings that apply to image distribution. Detailed below.
	LaunchTemplateConfigurations pulumix.Input[[]*DistributionConfigurationDistributionLaunchTemplateConfigurationArgs] `pulumi:"launchTemplateConfigurations"`
	// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
	LicenseConfigurationArns pulumix.Input[[]string] `pulumi:"licenseConfigurationArns"`
	// AWS Region for the distribution.
	//
	// The following arguments are optional:
	Region pulumix.Input[string] `pulumi:"region"`
}

func (DistributionConfigurationDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistribution)(nil)).Elem()
}

func (i DistributionConfigurationDistributionArgs) ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput {
	return i.ToDistributionConfigurationDistributionOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionArgs) ToDistributionConfigurationDistributionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionOutput)
}

func (i *DistributionConfigurationDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistribution)(nil)).Elem()
}

func (o DistributionConfigurationDistributionOutput) ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput {
	return o
}

func (o DistributionConfigurationDistributionOutput) ToDistributionConfigurationDistributionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionOutput {
	return o
}

func (o DistributionConfigurationDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistribution] {
	return pulumix.Output[DistributionConfigurationDistribution]{
		OutputState: o.OutputState,
	}
}

// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
func (o DistributionConfigurationDistributionOutput) AmiDistributionConfiguration() pulumix.GPtrOutput[DistributionConfigurationDistributionAmiDistributionConfiguration, DistributionConfigurationDistributionAmiDistributionConfigurationOutput] {
	value := pulumix.Apply[DistributionConfigurationDistribution](o, func(v DistributionConfigurationDistribution) *DistributionConfigurationDistributionAmiDistributionConfiguration {
		return v.AmiDistributionConfiguration
	})
	return pulumix.GPtrOutput[DistributionConfigurationDistributionAmiDistributionConfiguration, DistributionConfigurationDistributionAmiDistributionConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration block with container distribution settings. Detailed below.
func (o DistributionConfigurationDistributionOutput) ContainerDistributionConfiguration() pulumix.GPtrOutput[DistributionConfigurationDistributionContainerDistributionConfiguration, DistributionConfigurationDistributionContainerDistributionConfigurationOutput] {
	value := pulumix.Apply[DistributionConfigurationDistribution](o, func(v DistributionConfigurationDistribution) *DistributionConfigurationDistributionContainerDistributionConfiguration {
		return v.ContainerDistributionConfiguration
	})
	return pulumix.GPtrOutput[DistributionConfigurationDistributionContainerDistributionConfiguration, DistributionConfigurationDistributionContainerDistributionConfigurationOutput]{OutputState: value.OutputState}
}

// Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
func (o DistributionConfigurationDistributionOutput) FastLaunchConfigurations() pulumix.GArrayOutput[DistributionConfigurationDistributionFastLaunchConfiguration, DistributionConfigurationDistributionFastLaunchConfigurationOutput] {
	value := pulumix.Apply[DistributionConfigurationDistribution](o, func(v DistributionConfigurationDistribution) []DistributionConfigurationDistributionFastLaunchConfiguration {
		return v.FastLaunchConfigurations
	})
	return pulumix.GArrayOutput[DistributionConfigurationDistributionFastLaunchConfiguration, DistributionConfigurationDistributionFastLaunchConfigurationOutput]{OutputState: value.OutputState}
}

// Set of launch template configuration settings that apply to image distribution. Detailed below.
func (o DistributionConfigurationDistributionOutput) LaunchTemplateConfigurations() pulumix.GArrayOutput[DistributionConfigurationDistributionLaunchTemplateConfiguration, DistributionConfigurationDistributionLaunchTemplateConfigurationOutput] {
	value := pulumix.Apply[DistributionConfigurationDistribution](o, func(v DistributionConfigurationDistribution) []DistributionConfigurationDistributionLaunchTemplateConfiguration {
		return v.LaunchTemplateConfigurations
	})
	return pulumix.GArrayOutput[DistributionConfigurationDistributionLaunchTemplateConfiguration, DistributionConfigurationDistributionLaunchTemplateConfigurationOutput]{OutputState: value.OutputState}
}

// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
func (o DistributionConfigurationDistributionOutput) LicenseConfigurationArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistribution](o, func(v DistributionConfigurationDistribution) []string { return v.LicenseConfigurationArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// AWS Region for the distribution.
//
// The following arguments are optional:
func (o DistributionConfigurationDistributionOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[DistributionConfigurationDistribution](o, func(v DistributionConfigurationDistribution) string { return v.Region })
}

type DistributionConfigurationDistributionAmiDistributionConfiguration struct {
	// Key-value map of tags to apply to the distributed AMI.
	AmiTags map[string]string `pulumi:"amiTags"`
	// Description to apply to the distributed AMI.
	Description *string `pulumi:"description"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
	LaunchPermission *DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission `pulumi:"launchPermission"`
	// Name to apply to the distributed AMI.
	Name *string `pulumi:"name"`
	// Set of AWS Account identifiers to distribute the AMI.
	TargetAccountIds []string `pulumi:"targetAccountIds"`
}

type DistributionConfigurationDistributionAmiDistributionConfigurationArgs struct {
	// Key-value map of tags to apply to the distributed AMI.
	AmiTags pulumix.Input[map[string]string] `pulumi:"amiTags"`
	// Description to apply to the distributed AMI.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
	LaunchPermission pulumix.Input[*DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs] `pulumi:"launchPermission"`
	// Name to apply to the distributed AMI.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Set of AWS Account identifiers to distribute the AMI.
	TargetAccountIds pulumix.Input[[]string] `pulumi:"targetAccountIds"`
}

func (DistributionConfigurationDistributionAmiDistributionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationOutput() DistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationOutput)
}

func (i *DistributionConfigurationDistributionAmiDistributionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionAmiDistributionConfigurationArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionAmiDistributionConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionAmiDistributionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationOutput() DistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionAmiDistributionConfiguration] {
	return pulumix.Output[DistributionConfigurationDistributionAmiDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Key-value map of tags to apply to the distributed AMI.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) AmiTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v DistributionConfigurationDistributionAmiDistributionConfiguration) map[string]string {
		return v.AmiTags
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Description to apply to the distributed AMI.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v DistributionConfigurationDistributionAmiDistributionConfiguration) *string {
		return v.Description
	})
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v DistributionConfigurationDistributionAmiDistributionConfiguration) *string { return v.KmsKeyId })
}

// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) LaunchPermission() pulumix.GPtrOutput[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission, DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v DistributionConfigurationDistributionAmiDistributionConfiguration) *DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission {
		return v.LaunchPermission
	})
	return pulumix.GPtrOutput[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission, DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput]{OutputState: value.OutputState}
}

// Name to apply to the distributed AMI.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v DistributionConfigurationDistributionAmiDistributionConfiguration) *string { return v.Name })
}

// Set of AWS Account identifiers to distribute the AMI.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationOutput) TargetAccountIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v DistributionConfigurationDistributionAmiDistributionConfiguration) []string {
		return v.TargetAccountIds
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission struct {
	// Set of AWS Organization ARNs to assign.
	OrganizationArns []string `pulumi:"organizationArns"`
	// Set of AWS Organizational Unit ARNs to assign.
	OrganizationalUnitArns []string `pulumi:"organizationalUnitArns"`
	// Set of EC2 launch permission user groups to assign. Use `all` to distribute a public AMI.
	UserGroups []string `pulumi:"userGroups"`
	// Set of AWS Account identifiers to assign.
	UserIds []string `pulumi:"userIds"`
}

type DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs struct {
	// Set of AWS Organization ARNs to assign.
	OrganizationArns pulumix.Input[[]string] `pulumi:"organizationArns"`
	// Set of AWS Organizational Unit ARNs to assign.
	OrganizationalUnitArns pulumix.Input[[]string] `pulumi:"organizationalUnitArns"`
	// Set of EC2 launch permission user groups to assign. Use `all` to distribute a public AMI.
	UserGroups pulumix.Input[[]string] `pulumi:"userGroups"`
	// Set of AWS Account identifiers to assign.
	UserIds pulumix.Input[[]string] `pulumi:"userIds"`
}

func (DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission)(nil)).Elem()
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput() DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput)
}

func (i *DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission)(nil)).Elem()
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput() DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission] {
	return pulumix.Output[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission]{
		OutputState: o.OutputState,
	}
}

// Set of AWS Organization ARNs to assign.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) OrganizationArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.OrganizationArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of AWS Organizational Unit ARNs to assign.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) OrganizationalUnitArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.OrganizationalUnitArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of EC2 launch permission user groups to assign. Use `all` to distribute a public AMI.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) UserGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.UserGroups
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of AWS Account identifiers to assign.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) UserIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.UserIds
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DistributionConfigurationDistributionContainerDistributionConfiguration struct {
	// Set of tags that are attached to the container distribution configuration.
	ContainerTags []string `pulumi:"containerTags"`
	// Description of the container distribution configuration.
	Description *string `pulumi:"description"`
	// Configuration block with the destination repository for the container distribution configuration.
	TargetRepository DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository `pulumi:"targetRepository"`
}

type DistributionConfigurationDistributionContainerDistributionConfigurationArgs struct {
	// Set of tags that are attached to the container distribution configuration.
	ContainerTags pulumix.Input[[]string] `pulumi:"containerTags"`
	// Description of the container distribution configuration.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Configuration block with the destination repository for the container distribution configuration.
	TargetRepository pulumix.Input[*DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs] `pulumi:"targetRepository"`
}

func (DistributionConfigurationDistributionContainerDistributionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionContainerDistributionConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationOutput() DistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return i.ToDistributionConfigurationDistributionContainerDistributionConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionContainerDistributionConfigurationOutput)
}

func (i *DistributionConfigurationDistributionContainerDistributionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionContainerDistributionConfigurationArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionContainerDistributionConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionContainerDistributionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionContainerDistributionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationOutput() DistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionContainerDistributionConfiguration] {
	return pulumix.Output[DistributionConfigurationDistributionContainerDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Set of tags that are attached to the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationOutput) ContainerTags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionConfigurationDistributionContainerDistributionConfiguration](o, func(v DistributionConfigurationDistributionContainerDistributionConfiguration) []string {
		return v.ContainerTags
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Description of the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionContainerDistributionConfiguration](o, func(v DistributionConfigurationDistributionContainerDistributionConfiguration) *string {
		return v.Description
	})
}

// Configuration block with the destination repository for the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationOutput) TargetRepository() pulumix.GPtrOutput[DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository, DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput] {
	value := pulumix.Apply[DistributionConfigurationDistributionContainerDistributionConfiguration](o, func(v DistributionConfigurationDistributionContainerDistributionConfiguration) DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository {
		return v.TargetRepository
	})
	return pulumix.GPtrOutput[DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository, DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput]{OutputState: value.OutputState}
}

type DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName string `pulumi:"repositoryName"`
	// The service in which this image is registered. Valid values: `ECR`.
	Service string `pulumi:"service"`
}

type DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
	// The service in which this image is registered. Valid values: `ECR`.
	Service pulumix.Input[string] `pulumi:"service"`
}

func (DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository)(nil)).Elem()
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput() DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return i.ToDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput)
}

func (i *DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository)(nil)).Elem()
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput() DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository] {
	return pulumix.Output[DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository]{
		OutputState: o.OutputState,
	}
}

// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository](o, func(v DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository) string {
		return v.RepositoryName
	})
}

// The service in which this image is registered. Valid values: `ECR`.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) Service() pulumix.Output[string] {
	return pulumix.Apply[DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository](o, func(v DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository) string {
		return v.Service
	})
}

type DistributionConfigurationDistributionFastLaunchConfiguration struct {
	// The owner account ID for the fast-launch enabled Windows AMI.
	AccountId string `pulumi:"accountId"`
	// A Boolean that represents the current state of faster launching for the Windows AMI. Set to `true` to start using Windows faster launching, or `false` to stop using it.
	Enabled bool `pulumi:"enabled"`
	// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
	LaunchTemplate *DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate `pulumi:"launchTemplate"`
	// The maximum number of parallel instances that are launched for creating resources.
	MaxParallelLaunches *int `pulumi:"maxParallelLaunches"`
	// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
	SnapshotConfiguration *DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration `pulumi:"snapshotConfiguration"`
}

type DistributionConfigurationDistributionFastLaunchConfigurationArgs struct {
	// The owner account ID for the fast-launch enabled Windows AMI.
	AccountId pulumix.Input[string] `pulumi:"accountId"`
	// A Boolean that represents the current state of faster launching for the Windows AMI. Set to `true` to start using Windows faster launching, or `false` to stop using it.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
	LaunchTemplate pulumix.Input[*DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs] `pulumi:"launchTemplate"`
	// The maximum number of parallel instances that are launched for creating resources.
	MaxParallelLaunches pulumix.Input[*int] `pulumi:"maxParallelLaunches"`
	// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
	SnapshotConfiguration pulumix.Input[*DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs] `pulumi:"snapshotConfiguration"`
}

func (DistributionConfigurationDistributionFastLaunchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionFastLaunchConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationDistributionFastLaunchConfigurationArgs) ToDistributionConfigurationDistributionFastLaunchConfigurationOutput() DistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return i.ToDistributionConfigurationDistributionFastLaunchConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionFastLaunchConfigurationArgs) ToDistributionConfigurationDistributionFastLaunchConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionFastLaunchConfigurationOutput)
}

func (i *DistributionConfigurationDistributionFastLaunchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionFastLaunchConfigurationArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionFastLaunchConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionFastLaunchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionFastLaunchConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) ToDistributionConfigurationDistributionFastLaunchConfigurationOutput() DistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) ToDistributionConfigurationDistributionFastLaunchConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionFastLaunchConfiguration] {
	return pulumix.Output[DistributionConfigurationDistributionFastLaunchConfiguration]{
		OutputState: o.OutputState,
	}
}

// The owner account ID for the fast-launch enabled Windows AMI.
func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfiguration](o, func(v DistributionConfigurationDistributionFastLaunchConfiguration) string { return v.AccountId })
}

// A Boolean that represents the current state of faster launching for the Windows AMI. Set to `true` to start using Windows faster launching, or `false` to stop using it.
func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfiguration](o, func(v DistributionConfigurationDistributionFastLaunchConfiguration) bool { return v.Enabled })
}

// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) LaunchTemplate() pulumix.GPtrOutput[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate, DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput] {
	value := pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfiguration](o, func(v DistributionConfigurationDistributionFastLaunchConfiguration) *DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate {
		return v.LaunchTemplate
	})
	return pulumix.GPtrOutput[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate, DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput]{OutputState: value.OutputState}
}

// The maximum number of parallel instances that are launched for creating resources.
func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) MaxParallelLaunches() pulumix.Output[*int] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfiguration](o, func(v DistributionConfigurationDistributionFastLaunchConfiguration) *int {
		return v.MaxParallelLaunches
	})
}

// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
func (o DistributionConfigurationDistributionFastLaunchConfigurationOutput) SnapshotConfiguration() pulumix.GPtrOutput[DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration, DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput] {
	value := pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfiguration](o, func(v DistributionConfigurationDistributionFastLaunchConfiguration) *DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration {
		return v.SnapshotConfiguration
	})
	return pulumix.GPtrOutput[DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration, DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput]{OutputState: value.OutputState}
}

type DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate struct {
	// The ID of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// The name of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateName *string `pulumi:"launchTemplateName"`
	// The version of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateVersion *string `pulumi:"launchTemplateVersion"`
}

type DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs struct {
	// The ID of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateId pulumix.Input[*string] `pulumi:"launchTemplateId"`
	// The name of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateName pulumix.Input[*string] `pulumi:"launchTemplateName"`
	// The version of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateVersion pulumix.Input[*string] `pulumi:"launchTemplateVersion"`
}

func (DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate)(nil)).Elem()
}

func (i DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ToDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput() DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return i.ToDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ToDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutputWithContext(ctx context.Context) DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput)
}

func (i *DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate)(nil)).Elem()
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ToDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput() DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return o
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ToDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutputWithContext(ctx context.Context) DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return o
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate] {
	return pulumix.Output[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

// The ID of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) LaunchTemplateId() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate](o, func(v DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate) *string {
		return v.LaunchTemplateId
	})
}

// The name of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) LaunchTemplateName() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate](o, func(v DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate) *string {
		return v.LaunchTemplateName
	})
}

// The version of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) LaunchTemplateVersion() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate](o, func(v DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate) *string {
		return v.LaunchTemplateVersion
	})
}

type DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration struct {
	// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
	TargetResourceCount *int `pulumi:"targetResourceCount"`
}

type DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs struct {
	// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
	TargetResourceCount pulumix.Input[*int] `pulumi:"targetResourceCount"`
}

func (DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ToDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput() DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return i.ToDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ToDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput)
}

func (i *DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ToDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput() DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ToDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration] {
	return pulumix.Output[DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration]{
		OutputState: o.OutputState,
	}
}

// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
func (o DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) TargetResourceCount() pulumix.Output[*int] {
	return pulumix.Apply[DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration](o, func(v DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration) *int {
		return v.TargetResourceCount
	})
}

type DistributionConfigurationDistributionLaunchTemplateConfiguration struct {
	// The account ID that this configuration applies to.
	AccountId *string `pulumi:"accountId"`
	// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to `true`.
	Default *bool `pulumi:"default"`
	// The ID of the Amazon EC2 launch template to use.
	LaunchTemplateId string `pulumi:"launchTemplateId"`
}

type DistributionConfigurationDistributionLaunchTemplateConfigurationArgs struct {
	// The account ID that this configuration applies to.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to `true`.
	Default pulumix.Input[*bool] `pulumi:"default"`
	// The ID of the Amazon EC2 launch template to use.
	LaunchTemplateId pulumix.Input[string] `pulumi:"launchTemplateId"`
}

func (DistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionLaunchTemplateConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ToDistributionConfigurationDistributionLaunchTemplateConfigurationOutput() DistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return i.ToDistributionConfigurationDistributionLaunchTemplateConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ToDistributionConfigurationDistributionLaunchTemplateConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionLaunchTemplateConfigurationOutput)
}

func (i *DistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationDistributionLaunchTemplateConfigurationArgs] {
	return pulumix.Val(i)
}

type DistributionConfigurationDistributionLaunchTemplateConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionLaunchTemplateConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ToDistributionConfigurationDistributionLaunchTemplateConfigurationOutput() DistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ToDistributionConfigurationDistributionLaunchTemplateConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return o
}

func (o DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistributionLaunchTemplateConfiguration] {
	return pulumix.Output[DistributionConfigurationDistributionLaunchTemplateConfiguration]{
		OutputState: o.OutputState,
	}
}

// The account ID that this configuration applies to.
func (o DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[DistributionConfigurationDistributionLaunchTemplateConfiguration](o, func(v DistributionConfigurationDistributionLaunchTemplateConfiguration) *string { return v.AccountId })
}

// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to `true`.
func (o DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) Default() pulumix.Output[*bool] {
	return pulumix.Apply[DistributionConfigurationDistributionLaunchTemplateConfiguration](o, func(v DistributionConfigurationDistributionLaunchTemplateConfiguration) *bool { return v.Default })
}

// The ID of the Amazon EC2 launch template to use.
func (o DistributionConfigurationDistributionLaunchTemplateConfigurationOutput) LaunchTemplateId() pulumix.Output[string] {
	return pulumix.Apply[DistributionConfigurationDistributionLaunchTemplateConfiguration](o, func(v DistributionConfigurationDistributionLaunchTemplateConfiguration) string {
		return v.LaunchTemplateId
	})
}

type ImageImageTestsConfiguration struct {
	// Whether image tests are enabled. Defaults to `true`.
	ImageTestsEnabled *bool `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
	TimeoutMinutes *int `pulumi:"timeoutMinutes"`
}

type ImageImageTestsConfigurationArgs struct {
	// Whether image tests are enabled. Defaults to `true`.
	ImageTestsEnabled pulumix.Input[*bool] `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
	TimeoutMinutes pulumix.Input[*int] `pulumi:"timeoutMinutes"`
}

func (ImageImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageImageTestsConfiguration)(nil)).Elem()
}

func (i ImageImageTestsConfigurationArgs) ToImageImageTestsConfigurationOutput() ImageImageTestsConfigurationOutput {
	return i.ToImageImageTestsConfigurationOutputWithContext(context.Background())
}

func (i ImageImageTestsConfigurationArgs) ToImageImageTestsConfigurationOutputWithContext(ctx context.Context) ImageImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImageTestsConfigurationOutput)
}

func (i *ImageImageTestsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageImageTestsConfigurationArgs] {
	return pulumix.Val(i)
}

type ImageImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (ImageImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageImageTestsConfiguration)(nil)).Elem()
}

func (o ImageImageTestsConfigurationOutput) ToImageImageTestsConfigurationOutput() ImageImageTestsConfigurationOutput {
	return o
}

func (o ImageImageTestsConfigurationOutput) ToImageImageTestsConfigurationOutputWithContext(ctx context.Context) ImageImageTestsConfigurationOutput {
	return o
}

func (o ImageImageTestsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageImageTestsConfiguration] {
	return pulumix.Output[ImageImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether image tests are enabled. Defaults to `true`.
func (o ImageImageTestsConfigurationOutput) ImageTestsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[ImageImageTestsConfiguration](o, func(v ImageImageTestsConfiguration) *bool { return v.ImageTestsEnabled })
}

// Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
func (o ImageImageTestsConfigurationOutput) TimeoutMinutes() pulumix.Output[*int] {
	return pulumix.Apply[ImageImageTestsConfiguration](o, func(v ImageImageTestsConfiguration) *int { return v.TimeoutMinutes })
}

type ImageOutputResource struct {
	// Set of objects with each Amazon Machine Image (AMI) created.
	Amis []ImageOutputResourceAmi `pulumi:"amis"`
	// Set of objects with each container image created and stored in the output repository.
	Containers []ImageOutputResourceContainer `pulumi:"containers"`
}

type ImageOutputResourceArgs struct {
	// Set of objects with each Amazon Machine Image (AMI) created.
	Amis pulumix.Input[[]*ImageOutputResourceAmiArgs] `pulumi:"amis"`
	// Set of objects with each container image created and stored in the output repository.
	Containers pulumix.Input[[]*ImageOutputResourceContainerArgs] `pulumi:"containers"`
}

func (ImageOutputResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOutputResource)(nil)).Elem()
}

func (i ImageOutputResourceArgs) ToImageOutputResourceOutput() ImageOutputResourceOutput {
	return i.ToImageOutputResourceOutputWithContext(context.Background())
}

func (i ImageOutputResourceArgs) ToImageOutputResourceOutputWithContext(ctx context.Context) ImageOutputResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutputResourceOutput)
}

func (i *ImageOutputResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageOutputResourceArgs] {
	return pulumix.Val(i)
}

type ImageOutputResourceOutput struct{ *pulumi.OutputState }

func (ImageOutputResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOutputResource)(nil)).Elem()
}

func (o ImageOutputResourceOutput) ToImageOutputResourceOutput() ImageOutputResourceOutput {
	return o
}

func (o ImageOutputResourceOutput) ToImageOutputResourceOutputWithContext(ctx context.Context) ImageOutputResourceOutput {
	return o
}

func (o ImageOutputResourceOutput) ToOutput(ctx context.Context) pulumix.Output[ImageOutputResource] {
	return pulumix.Output[ImageOutputResource]{
		OutputState: o.OutputState,
	}
}

// Set of objects with each Amazon Machine Image (AMI) created.
func (o ImageOutputResourceOutput) Amis() pulumix.GArrayOutput[ImageOutputResourceAmi, ImageOutputResourceAmiOutput] {
	value := pulumix.Apply[ImageOutputResource](o, func(v ImageOutputResource) []ImageOutputResourceAmi { return v.Amis })
	return pulumix.GArrayOutput[ImageOutputResourceAmi, ImageOutputResourceAmiOutput]{OutputState: value.OutputState}
}

// Set of objects with each container image created and stored in the output repository.
func (o ImageOutputResourceOutput) Containers() pulumix.GArrayOutput[ImageOutputResourceContainer, ImageOutputResourceContainerOutput] {
	value := pulumix.Apply[ImageOutputResource](o, func(v ImageOutputResource) []ImageOutputResourceContainer { return v.Containers })
	return pulumix.GArrayOutput[ImageOutputResourceContainer, ImageOutputResourceContainerOutput]{OutputState: value.OutputState}
}

type ImageOutputResourceAmi struct {
	// Account identifier of the AMI.
	AccountId *string `pulumi:"accountId"`
	// Description of the AMI.
	Description *string `pulumi:"description"`
	// Identifier of the AMI.
	Image *string `pulumi:"image"`
	// Name of the AMI.
	Name *string `pulumi:"name"`
	// Region of the container image.
	Region *string `pulumi:"region"`
}

type ImageOutputResourceAmiArgs struct {
	// Account identifier of the AMI.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// Description of the AMI.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Identifier of the AMI.
	Image pulumix.Input[*string] `pulumi:"image"`
	// Name of the AMI.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Region of the container image.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (ImageOutputResourceAmiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOutputResourceAmi)(nil)).Elem()
}

func (i ImageOutputResourceAmiArgs) ToImageOutputResourceAmiOutput() ImageOutputResourceAmiOutput {
	return i.ToImageOutputResourceAmiOutputWithContext(context.Background())
}

func (i ImageOutputResourceAmiArgs) ToImageOutputResourceAmiOutputWithContext(ctx context.Context) ImageOutputResourceAmiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutputResourceAmiOutput)
}

func (i *ImageOutputResourceAmiArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageOutputResourceAmiArgs] {
	return pulumix.Val(i)
}

type ImageOutputResourceAmiOutput struct{ *pulumi.OutputState }

func (ImageOutputResourceAmiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOutputResourceAmi)(nil)).Elem()
}

func (o ImageOutputResourceAmiOutput) ToImageOutputResourceAmiOutput() ImageOutputResourceAmiOutput {
	return o
}

func (o ImageOutputResourceAmiOutput) ToImageOutputResourceAmiOutputWithContext(ctx context.Context) ImageOutputResourceAmiOutput {
	return o
}

func (o ImageOutputResourceAmiOutput) ToOutput(ctx context.Context) pulumix.Output[ImageOutputResourceAmi] {
	return pulumix.Output[ImageOutputResourceAmi]{
		OutputState: o.OutputState,
	}
}

// Account identifier of the AMI.
func (o ImageOutputResourceAmiOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[ImageOutputResourceAmi](o, func(v ImageOutputResourceAmi) *string { return v.AccountId })
}

// Description of the AMI.
func (o ImageOutputResourceAmiOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ImageOutputResourceAmi](o, func(v ImageOutputResourceAmi) *string { return v.Description })
}

// Identifier of the AMI.
func (o ImageOutputResourceAmiOutput) Image() pulumix.Output[*string] {
	return pulumix.Apply[ImageOutputResourceAmi](o, func(v ImageOutputResourceAmi) *string { return v.Image })
}

// Name of the AMI.
func (o ImageOutputResourceAmiOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ImageOutputResourceAmi](o, func(v ImageOutputResourceAmi) *string { return v.Name })
}

// Region of the container image.
func (o ImageOutputResourceAmiOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[ImageOutputResourceAmi](o, func(v ImageOutputResourceAmi) *string { return v.Region })
}

type ImageOutputResourceContainer struct {
	// Set of URIs for created containers.
	ImageUris []string `pulumi:"imageUris"`
	// Region of the container image.
	Region *string `pulumi:"region"`
}

type ImageOutputResourceContainerArgs struct {
	// Set of URIs for created containers.
	ImageUris pulumix.Input[[]string] `pulumi:"imageUris"`
	// Region of the container image.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (ImageOutputResourceContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOutputResourceContainer)(nil)).Elem()
}

func (i ImageOutputResourceContainerArgs) ToImageOutputResourceContainerOutput() ImageOutputResourceContainerOutput {
	return i.ToImageOutputResourceContainerOutputWithContext(context.Background())
}

func (i ImageOutputResourceContainerArgs) ToImageOutputResourceContainerOutputWithContext(ctx context.Context) ImageOutputResourceContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutputResourceContainerOutput)
}

func (i *ImageOutputResourceContainerArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageOutputResourceContainerArgs] {
	return pulumix.Val(i)
}

type ImageOutputResourceContainerOutput struct{ *pulumi.OutputState }

func (ImageOutputResourceContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOutputResourceContainer)(nil)).Elem()
}

func (o ImageOutputResourceContainerOutput) ToImageOutputResourceContainerOutput() ImageOutputResourceContainerOutput {
	return o
}

func (o ImageOutputResourceContainerOutput) ToImageOutputResourceContainerOutputWithContext(ctx context.Context) ImageOutputResourceContainerOutput {
	return o
}

func (o ImageOutputResourceContainerOutput) ToOutput(ctx context.Context) pulumix.Output[ImageOutputResourceContainer] {
	return pulumix.Output[ImageOutputResourceContainer]{
		OutputState: o.OutputState,
	}
}

// Set of URIs for created containers.
func (o ImageOutputResourceContainerOutput) ImageUris() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ImageOutputResourceContainer](o, func(v ImageOutputResourceContainer) []string { return v.ImageUris })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Region of the container image.
func (o ImageOutputResourceContainerOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[ImageOutputResourceContainer](o, func(v ImageOutputResourceContainer) *string { return v.Region })
}

type ImagePipelineImageScanningConfiguration struct {
	// Configuration block with ECR configuration for image scanning. Detailed below.
	EcrConfiguration *ImagePipelineImageScanningConfigurationEcrConfiguration `pulumi:"ecrConfiguration"`
	// Whether image scans are enabled. Defaults to `false`.
	ImageScanningEnabled *bool `pulumi:"imageScanningEnabled"`
}

type ImagePipelineImageScanningConfigurationArgs struct {
	// Configuration block with ECR configuration for image scanning. Detailed below.
	EcrConfiguration pulumix.Input[*ImagePipelineImageScanningConfigurationEcrConfigurationArgs] `pulumi:"ecrConfiguration"`
	// Whether image scans are enabled. Defaults to `false`.
	ImageScanningEnabled pulumix.Input[*bool] `pulumi:"imageScanningEnabled"`
}

func (ImagePipelineImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (i ImagePipelineImageScanningConfigurationArgs) ToImagePipelineImageScanningConfigurationOutput() ImagePipelineImageScanningConfigurationOutput {
	return i.ToImagePipelineImageScanningConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineImageScanningConfigurationArgs) ToImagePipelineImageScanningConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageScanningConfigurationOutput)
}

func (i *ImagePipelineImageScanningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageScanningConfigurationArgs] {
	return pulumix.Val(i)
}

type ImagePipelineImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageScanningConfigurationOutput) ToImagePipelineImageScanningConfigurationOutput() ImagePipelineImageScanningConfigurationOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationOutput) ToImagePipelineImageScanningConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageScanningConfiguration] {
	return pulumix.Output[ImagePipelineImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Configuration block with ECR configuration for image scanning. Detailed below.
func (o ImagePipelineImageScanningConfigurationOutput) EcrConfiguration() pulumix.GPtrOutput[ImagePipelineImageScanningConfigurationEcrConfiguration, ImagePipelineImageScanningConfigurationEcrConfigurationOutput] {
	value := pulumix.Apply[ImagePipelineImageScanningConfiguration](o, func(v ImagePipelineImageScanningConfiguration) *ImagePipelineImageScanningConfigurationEcrConfiguration {
		return v.EcrConfiguration
	})
	return pulumix.GPtrOutput[ImagePipelineImageScanningConfigurationEcrConfiguration, ImagePipelineImageScanningConfigurationEcrConfigurationOutput]{OutputState: value.OutputState}
}

// Whether image scans are enabled. Defaults to `false`.
func (o ImagePipelineImageScanningConfigurationOutput) ImageScanningEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[ImagePipelineImageScanningConfiguration](o, func(v ImagePipelineImageScanningConfiguration) *bool { return v.ImageScanningEnabled })
}

type ImagePipelineImageScanningConfigurationEcrConfiguration struct {
	ContainerTags []string `pulumi:"containerTags"`
	// The name of the repository to scan
	RepositoryName *string `pulumi:"repositoryName"`
}

type ImagePipelineImageScanningConfigurationEcrConfigurationArgs struct {
	ContainerTags pulumix.Input[[]string] `pulumi:"containerTags"`
	// The name of the repository to scan
	RepositoryName pulumix.Input[*string] `pulumi:"repositoryName"`
}

func (ImagePipelineImageScanningConfigurationEcrConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageScanningConfigurationEcrConfiguration)(nil)).Elem()
}

func (i ImagePipelineImageScanningConfigurationEcrConfigurationArgs) ToImagePipelineImageScanningConfigurationEcrConfigurationOutput() ImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return i.ToImagePipelineImageScanningConfigurationEcrConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineImageScanningConfigurationEcrConfigurationArgs) ToImagePipelineImageScanningConfigurationEcrConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageScanningConfigurationEcrConfigurationOutput)
}

func (i *ImagePipelineImageScanningConfigurationEcrConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageScanningConfigurationEcrConfigurationArgs] {
	return pulumix.Val(i)
}

type ImagePipelineImageScanningConfigurationEcrConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageScanningConfigurationEcrConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageScanningConfigurationEcrConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageScanningConfigurationEcrConfigurationOutput) ToImagePipelineImageScanningConfigurationEcrConfigurationOutput() ImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationEcrConfigurationOutput) ToImagePipelineImageScanningConfigurationEcrConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationEcrConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageScanningConfigurationEcrConfiguration] {
	return pulumix.Output[ImagePipelineImageScanningConfigurationEcrConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineImageScanningConfigurationEcrConfigurationOutput) ContainerTags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ImagePipelineImageScanningConfigurationEcrConfiguration](o, func(v ImagePipelineImageScanningConfigurationEcrConfiguration) []string { return v.ContainerTags })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name of the repository to scan
func (o ImagePipelineImageScanningConfigurationEcrConfigurationOutput) RepositoryName() pulumix.Output[*string] {
	return pulumix.Apply[ImagePipelineImageScanningConfigurationEcrConfiguration](o, func(v ImagePipelineImageScanningConfigurationEcrConfiguration) *string { return v.RepositoryName })
}

type ImagePipelineImageTestsConfiguration struct {
	// Whether image tests are enabled. Defaults to `true`.
	ImageTestsEnabled *bool `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
	TimeoutMinutes *int `pulumi:"timeoutMinutes"`
}

type ImagePipelineImageTestsConfigurationArgs struct {
	// Whether image tests are enabled. Defaults to `true`.
	ImageTestsEnabled pulumix.Input[*bool] `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
	TimeoutMinutes pulumix.Input[*int] `pulumi:"timeoutMinutes"`
}

func (ImagePipelineImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput {
	return i.ToImagePipelineImageTestsConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationOutput)
}

func (i *ImagePipelineImageTestsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageTestsConfigurationArgs] {
	return pulumix.Val(i)
}

type ImagePipelineImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageTestsConfiguration] {
	return pulumix.Output[ImagePipelineImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether image tests are enabled. Defaults to `true`.
func (o ImagePipelineImageTestsConfigurationOutput) ImageTestsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[ImagePipelineImageTestsConfiguration](o, func(v ImagePipelineImageTestsConfiguration) *bool { return v.ImageTestsEnabled })
}

// Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
func (o ImagePipelineImageTestsConfigurationOutput) TimeoutMinutes() pulumix.Output[*int] {
	return pulumix.Apply[ImagePipelineImageTestsConfiguration](o, func(v ImagePipelineImageTestsConfiguration) *int { return v.TimeoutMinutes })
}

type ImagePipelineSchedule struct {
	// Condition when the pipeline should trigger a new image build. Valid values are `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE` and `EXPRESSION_MATCH_ONLY`. Defaults to `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`.
	PipelineExecutionStartCondition *string `pulumi:"pipelineExecutionStartCondition"`
	// Cron expression of how often the pipeline start condition is evaluated. For example, `cron(0 0 * * ? *)` is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as `cron(0 0 * * *)`, must be updated to the six field syntax. For more information, see the [Image Builder User Guide](https://docs.aws.amazon.com/imagebuilder/latest/userguide/cron-expressions.html).
	//
	// The following arguments are optional:
	ScheduleExpression string `pulumi:"scheduleExpression"`
	// The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the [IANA timezone format](https://www.joda.org/joda-time/timezones.html). If not specified this defaults to UTC.
	Timezone *string `pulumi:"timezone"`
}

type ImagePipelineScheduleArgs struct {
	// Condition when the pipeline should trigger a new image build. Valid values are `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE` and `EXPRESSION_MATCH_ONLY`. Defaults to `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`.
	PipelineExecutionStartCondition pulumix.Input[*string] `pulumi:"pipelineExecutionStartCondition"`
	// Cron expression of how often the pipeline start condition is evaluated. For example, `cron(0 0 * * ? *)` is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as `cron(0 0 * * *)`, must be updated to the six field syntax. For more information, see the [Image Builder User Guide](https://docs.aws.amazon.com/imagebuilder/latest/userguide/cron-expressions.html).
	//
	// The following arguments are optional:
	ScheduleExpression pulumix.Input[string] `pulumi:"scheduleExpression"`
	// The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the [IANA timezone format](https://www.joda.org/joda-time/timezones.html). If not specified this defaults to UTC.
	Timezone pulumix.Input[*string] `pulumi:"timezone"`
}

func (ImagePipelineScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineSchedule)(nil)).Elem()
}

func (i ImagePipelineScheduleArgs) ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput {
	return i.ToImagePipelineScheduleOutputWithContext(context.Background())
}

func (i ImagePipelineScheduleArgs) ToImagePipelineScheduleOutputWithContext(ctx context.Context) ImagePipelineScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineScheduleOutput)
}

func (i *ImagePipelineScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineScheduleArgs] {
	return pulumix.Val(i)
}

type ImagePipelineScheduleOutput struct{ *pulumi.OutputState }

func (ImagePipelineScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineSchedule)(nil)).Elem()
}

func (o ImagePipelineScheduleOutput) ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput {
	return o
}

func (o ImagePipelineScheduleOutput) ToImagePipelineScheduleOutputWithContext(ctx context.Context) ImagePipelineScheduleOutput {
	return o
}

func (o ImagePipelineScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineSchedule] {
	return pulumix.Output[ImagePipelineSchedule]{
		OutputState: o.OutputState,
	}
}

// Condition when the pipeline should trigger a new image build. Valid values are `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE` and `EXPRESSION_MATCH_ONLY`. Defaults to `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`.
func (o ImagePipelineScheduleOutput) PipelineExecutionStartCondition() pulumix.Output[*string] {
	return pulumix.Apply[ImagePipelineSchedule](o, func(v ImagePipelineSchedule) *string { return v.PipelineExecutionStartCondition })
}

// Cron expression of how often the pipeline start condition is evaluated. For example, `cron(0 0 * * ? *)` is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as `cron(0 0 * * *)`, must be updated to the six field syntax. For more information, see the [Image Builder User Guide](https://docs.aws.amazon.com/imagebuilder/latest/userguide/cron-expressions.html).
//
// The following arguments are optional:
func (o ImagePipelineScheduleOutput) ScheduleExpression() pulumix.Output[string] {
	return pulumix.Apply[ImagePipelineSchedule](o, func(v ImagePipelineSchedule) string { return v.ScheduleExpression })
}

// The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the [IANA timezone format](https://www.joda.org/joda-time/timezones.html). If not specified this defaults to UTC.
func (o ImagePipelineScheduleOutput) Timezone() pulumix.Output[*string] {
	return pulumix.Apply[ImagePipelineSchedule](o, func(v ImagePipelineSchedule) *string { return v.Timezone })
}

type ImageRecipeBlockDeviceMapping struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName *string `pulumi:"deviceName"`
	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	Ebs *ImageRecipeBlockDeviceMappingEbs `pulumi:"ebs"`
	// Set to `true` to remove a mapping from the parent image.
	NoDevice *bool `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName *string `pulumi:"virtualName"`
}

type ImageRecipeBlockDeviceMappingArgs struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName pulumix.Input[*string] `pulumi:"deviceName"`
	// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
	Ebs pulumix.Input[*ImageRecipeBlockDeviceMappingEbsArgs] `pulumi:"ebs"`
	// Set to `true` to remove a mapping from the parent image.
	NoDevice pulumix.Input[*bool] `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName pulumix.Input[*string] `pulumi:"virtualName"`
}

func (ImageRecipeBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeBlockDeviceMapping)(nil)).Elem()
}

func (i ImageRecipeBlockDeviceMappingArgs) ToImageRecipeBlockDeviceMappingOutput() ImageRecipeBlockDeviceMappingOutput {
	return i.ToImageRecipeBlockDeviceMappingOutputWithContext(context.Background())
}

func (i ImageRecipeBlockDeviceMappingArgs) ToImageRecipeBlockDeviceMappingOutputWithContext(ctx context.Context) ImageRecipeBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeBlockDeviceMappingOutput)
}

func (i *ImageRecipeBlockDeviceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeBlockDeviceMappingArgs] {
	return pulumix.Val(i)
}

type ImageRecipeBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (ImageRecipeBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeBlockDeviceMapping)(nil)).Elem()
}

func (o ImageRecipeBlockDeviceMappingOutput) ToImageRecipeBlockDeviceMappingOutput() ImageRecipeBlockDeviceMappingOutput {
	return o
}

func (o ImageRecipeBlockDeviceMappingOutput) ToImageRecipeBlockDeviceMappingOutputWithContext(ctx context.Context) ImageRecipeBlockDeviceMappingOutput {
	return o
}

func (o ImageRecipeBlockDeviceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeBlockDeviceMapping] {
	return pulumix.Output[ImageRecipeBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
func (o ImageRecipeBlockDeviceMappingOutput) DeviceName() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMapping](o, func(v ImageRecipeBlockDeviceMapping) *string { return v.DeviceName })
}

// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
func (o ImageRecipeBlockDeviceMappingOutput) Ebs() pulumix.GPtrOutput[ImageRecipeBlockDeviceMappingEbs, ImageRecipeBlockDeviceMappingEbsOutput] {
	value := pulumix.Apply[ImageRecipeBlockDeviceMapping](o, func(v ImageRecipeBlockDeviceMapping) *ImageRecipeBlockDeviceMappingEbs { return v.Ebs })
	return pulumix.GPtrOutput[ImageRecipeBlockDeviceMappingEbs, ImageRecipeBlockDeviceMappingEbsOutput]{OutputState: value.OutputState}
}

// Set to `true` to remove a mapping from the parent image.
func (o ImageRecipeBlockDeviceMappingOutput) NoDevice() pulumix.Output[*bool] {
	return pulumix.Apply[ImageRecipeBlockDeviceMapping](o, func(v ImageRecipeBlockDeviceMapping) *bool { return v.NoDevice })
}

// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
func (o ImageRecipeBlockDeviceMappingOutput) VirtualName() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMapping](o, func(v ImageRecipeBlockDeviceMapping) *string { return v.VirtualName })
}

type ImageRecipeBlockDeviceMappingEbs struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination *string `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted *string `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops *int `pulumi:"iops"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput *int `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize *int `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType *string `pulumi:"volumeType"`
}

type ImageRecipeBlockDeviceMappingEbsArgs struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination pulumix.Input[*string] `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted pulumix.Input[*string] `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId pulumix.Input[*string] `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput pulumix.Input[*int] `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize pulumix.Input[*int] `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType pulumix.Input[*string] `pulumi:"volumeType"`
}

func (ImageRecipeBlockDeviceMappingEbsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeBlockDeviceMappingEbs)(nil)).Elem()
}

func (i ImageRecipeBlockDeviceMappingEbsArgs) ToImageRecipeBlockDeviceMappingEbsOutput() ImageRecipeBlockDeviceMappingEbsOutput {
	return i.ToImageRecipeBlockDeviceMappingEbsOutputWithContext(context.Background())
}

func (i ImageRecipeBlockDeviceMappingEbsArgs) ToImageRecipeBlockDeviceMappingEbsOutputWithContext(ctx context.Context) ImageRecipeBlockDeviceMappingEbsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeBlockDeviceMappingEbsOutput)
}

func (i *ImageRecipeBlockDeviceMappingEbsArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeBlockDeviceMappingEbsArgs] {
	return pulumix.Val(i)
}

type ImageRecipeBlockDeviceMappingEbsOutput struct{ *pulumi.OutputState }

func (ImageRecipeBlockDeviceMappingEbsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeBlockDeviceMappingEbs)(nil)).Elem()
}

func (o ImageRecipeBlockDeviceMappingEbsOutput) ToImageRecipeBlockDeviceMappingEbsOutput() ImageRecipeBlockDeviceMappingEbsOutput {
	return o
}

func (o ImageRecipeBlockDeviceMappingEbsOutput) ToImageRecipeBlockDeviceMappingEbsOutputWithContext(ctx context.Context) ImageRecipeBlockDeviceMappingEbsOutput {
	return o
}

func (o ImageRecipeBlockDeviceMappingEbsOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeBlockDeviceMappingEbs] {
	return pulumix.Output[ImageRecipeBlockDeviceMappingEbs]{
		OutputState: o.OutputState,
	}
}

// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
func (o ImageRecipeBlockDeviceMappingEbsOutput) DeleteOnTermination() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *string { return v.DeleteOnTermination })
}

// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
func (o ImageRecipeBlockDeviceMappingEbsOutput) Encrypted() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *string { return v.Encrypted })
}

// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
func (o ImageRecipeBlockDeviceMappingEbsOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *int { return v.Iops })
}

// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
func (o ImageRecipeBlockDeviceMappingEbsOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *string { return v.KmsKeyId })
}

// Identifier of the EC2 Volume Snapshot.
func (o ImageRecipeBlockDeviceMappingEbsOutput) SnapshotId() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *string { return v.SnapshotId })
}

// For GP3 volumes only. The throughput in MiB/s that the volume supports.
func (o ImageRecipeBlockDeviceMappingEbsOutput) Throughput() pulumix.Output[*int] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *int { return v.Throughput })
}

// Size of the volume, in GiB.
func (o ImageRecipeBlockDeviceMappingEbsOutput) VolumeSize() pulumix.Output[*int] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *int { return v.VolumeSize })
}

// Type of the volume. For example, `gp2` or `io2`.
func (o ImageRecipeBlockDeviceMappingEbsOutput) VolumeType() pulumix.Output[*string] {
	return pulumix.Apply[ImageRecipeBlockDeviceMappingEbs](o, func(v ImageRecipeBlockDeviceMappingEbs) *string { return v.VolumeType })
}

type ImageRecipeComponent struct {
	// Amazon Resource Name (ARN) of the Image Builder Component to associate.
	ComponentArn string `pulumi:"componentArn"`
	// Configuration block(s) for parameters to configure the component. Detailed below.
	Parameters []ImageRecipeComponentParameter `pulumi:"parameters"`
}

type ImageRecipeComponentArgs struct {
	// Amazon Resource Name (ARN) of the Image Builder Component to associate.
	ComponentArn pulumix.Input[string] `pulumi:"componentArn"`
	// Configuration block(s) for parameters to configure the component. Detailed below.
	Parameters pulumix.Input[[]*ImageRecipeComponentParameterArgs] `pulumi:"parameters"`
}

func (ImageRecipeComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponent)(nil)).Elem()
}

func (i ImageRecipeComponentArgs) ToImageRecipeComponentOutput() ImageRecipeComponentOutput {
	return i.ToImageRecipeComponentOutputWithContext(context.Background())
}

func (i ImageRecipeComponentArgs) ToImageRecipeComponentOutputWithContext(ctx context.Context) ImageRecipeComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentOutput)
}

func (i *ImageRecipeComponentArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeComponentArgs] {
	return pulumix.Val(i)
}

type ImageRecipeComponentOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponent)(nil)).Elem()
}

func (o ImageRecipeComponentOutput) ToImageRecipeComponentOutput() ImageRecipeComponentOutput {
	return o
}

func (o ImageRecipeComponentOutput) ToImageRecipeComponentOutputWithContext(ctx context.Context) ImageRecipeComponentOutput {
	return o
}

func (o ImageRecipeComponentOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeComponent] {
	return pulumix.Output[ImageRecipeComponent]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Image Builder Component to associate.
func (o ImageRecipeComponentOutput) ComponentArn() pulumix.Output[string] {
	return pulumix.Apply[ImageRecipeComponent](o, func(v ImageRecipeComponent) string { return v.ComponentArn })
}

// Configuration block(s) for parameters to configure the component. Detailed below.
func (o ImageRecipeComponentOutput) Parameters() pulumix.GArrayOutput[ImageRecipeComponentParameter, ImageRecipeComponentParameterOutput] {
	value := pulumix.Apply[ImageRecipeComponent](o, func(v ImageRecipeComponent) []ImageRecipeComponentParameter { return v.Parameters })
	return pulumix.GArrayOutput[ImageRecipeComponentParameter, ImageRecipeComponentParameterOutput]{OutputState: value.OutputState}
}

type ImageRecipeComponentParameter struct {
	// The name of the component parameter.
	Name string `pulumi:"name"`
	// The value for the named component parameter.
	Value string `pulumi:"value"`
}

type ImageRecipeComponentParameterArgs struct {
	// The name of the component parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value for the named component parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ImageRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentParameter)(nil)).Elem()
}

func (i ImageRecipeComponentParameterArgs) ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput {
	return i.ToImageRecipeComponentParameterOutputWithContext(context.Background())
}

func (i ImageRecipeComponentParameterArgs) ToImageRecipeComponentParameterOutputWithContext(ctx context.Context) ImageRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentParameterOutput)
}

func (i *ImageRecipeComponentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeComponentParameterArgs] {
	return pulumix.Val(i)
}

type ImageRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentParameter)(nil)).Elem()
}

func (o ImageRecipeComponentParameterOutput) ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput {
	return o
}

func (o ImageRecipeComponentParameterOutput) ToImageRecipeComponentParameterOutputWithContext(ctx context.Context) ImageRecipeComponentParameterOutput {
	return o
}

func (o ImageRecipeComponentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeComponentParameter] {
	return pulumix.Output[ImageRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the component parameter.
func (o ImageRecipeComponentParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ImageRecipeComponentParameter](o, func(v ImageRecipeComponentParameter) string { return v.Name })
}

// The value for the named component parameter.
func (o ImageRecipeComponentParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ImageRecipeComponentParameter](o, func(v ImageRecipeComponentParameter) string { return v.Value })
}

type ImageRecipeSystemsManagerAgent struct {
	// Whether to remove the Systems Manager Agent after the image has been built. Defaults to `false`.
	UninstallAfterBuild bool `pulumi:"uninstallAfterBuild"`
}

type ImageRecipeSystemsManagerAgentArgs struct {
	// Whether to remove the Systems Manager Agent after the image has been built. Defaults to `false`.
	UninstallAfterBuild pulumix.Input[bool] `pulumi:"uninstallAfterBuild"`
}

func (ImageRecipeSystemsManagerAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput {
	return i.ToImageRecipeSystemsManagerAgentOutputWithContext(context.Background())
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentOutput)
}

func (i *ImageRecipeSystemsManagerAgentArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeSystemsManagerAgentArgs] {
	return pulumix.Val(i)
}

type ImageRecipeSystemsManagerAgentOutput struct{ *pulumi.OutputState }

func (ImageRecipeSystemsManagerAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeSystemsManagerAgent] {
	return pulumix.Output[ImageRecipeSystemsManagerAgent]{
		OutputState: o.OutputState,
	}
}

// Whether to remove the Systems Manager Agent after the image has been built. Defaults to `false`.
func (o ImageRecipeSystemsManagerAgentOutput) UninstallAfterBuild() pulumix.Output[bool] {
	return pulumix.Apply[ImageRecipeSystemsManagerAgent](o, func(v ImageRecipeSystemsManagerAgent) bool { return v.UninstallAfterBuild })
}

type InfrastructureConfigurationInstanceMetadataOptions struct {
	// The number of hops that an instance can traverse to reach its destonation.
	HttpPutResponseHopLimit *int `pulumi:"httpPutResponseHopLimit"`
	// Whether a signed token is required for instance metadata retrieval requests. Valid values: `required`, `optional`.
	HttpTokens *string `pulumi:"httpTokens"`
}

type InfrastructureConfigurationInstanceMetadataOptionsArgs struct {
	// The number of hops that an instance can traverse to reach its destonation.
	HttpPutResponseHopLimit pulumix.Input[*int] `pulumi:"httpPutResponseHopLimit"`
	// Whether a signed token is required for instance metadata retrieval requests. Valid values: `required`, `optional`.
	HttpTokens pulumix.Input[*string] `pulumi:"httpTokens"`
}

func (InfrastructureConfigurationInstanceMetadataOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationInstanceMetadataOptions)(nil)).Elem()
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToInfrastructureConfigurationInstanceMetadataOptionsOutput() InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return i.ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationInstanceMetadataOptionsOutput)
}

func (i *InfrastructureConfigurationInstanceMetadataOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationInstanceMetadataOptionsArgs] {
	return pulumix.Val(i)
}

type InfrastructureConfigurationInstanceMetadataOptionsOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationInstanceMetadataOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationInstanceMetadataOptions)(nil)).Elem()
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToInfrastructureConfigurationInstanceMetadataOptionsOutput() InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return o
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return o
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationInstanceMetadataOptions] {
	return pulumix.Output[InfrastructureConfigurationInstanceMetadataOptions]{
		OutputState: o.OutputState,
	}
}

// The number of hops that an instance can traverse to reach its destonation.
func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) HttpPutResponseHopLimit() pulumix.Output[*int] {
	return pulumix.Apply[InfrastructureConfigurationInstanceMetadataOptions](o, func(v InfrastructureConfigurationInstanceMetadataOptions) *int { return v.HttpPutResponseHopLimit })
}

// Whether a signed token is required for instance metadata retrieval requests. Valid values: `required`, `optional`.
func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) HttpTokens() pulumix.Output[*string] {
	return pulumix.Apply[InfrastructureConfigurationInstanceMetadataOptions](o, func(v InfrastructureConfigurationInstanceMetadataOptions) *string { return v.HttpTokens })
}

type InfrastructureConfigurationLogging struct {
	// Configuration block with S3 logging settings. Detailed below.
	S3Logs InfrastructureConfigurationLoggingS3Logs `pulumi:"s3Logs"`
}

type InfrastructureConfigurationLoggingArgs struct {
	// Configuration block with S3 logging settings. Detailed below.
	S3Logs pulumix.Input[*InfrastructureConfigurationLoggingS3LogsArgs] `pulumi:"s3Logs"`
}

func (InfrastructureConfigurationLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLogging)(nil)).Elem()
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput {
	return i.ToInfrastructureConfigurationLoggingOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingOutput)
}

func (i *InfrastructureConfigurationLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationLoggingArgs] {
	return pulumix.Val(i)
}

type InfrastructureConfigurationLoggingOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLogging)(nil)).Elem()
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput {
	return o
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingOutput {
	return o
}

func (o InfrastructureConfigurationLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationLogging] {
	return pulumix.Output[InfrastructureConfigurationLogging]{
		OutputState: o.OutputState,
	}
}

// Configuration block with S3 logging settings. Detailed below.
func (o InfrastructureConfigurationLoggingOutput) S3Logs() pulumix.GPtrOutput[InfrastructureConfigurationLoggingS3Logs, InfrastructureConfigurationLoggingS3LogsOutput] {
	value := pulumix.Apply[InfrastructureConfigurationLogging](o, func(v InfrastructureConfigurationLogging) InfrastructureConfigurationLoggingS3Logs { return v.S3Logs })
	return pulumix.GPtrOutput[InfrastructureConfigurationLoggingS3Logs, InfrastructureConfigurationLoggingS3LogsOutput]{OutputState: value.OutputState}
}

type InfrastructureConfigurationLoggingS3Logs struct {
	// Name of the S3 Bucket.
	//
	// The following arguments are optional:
	S3BucketName string `pulumi:"s3BucketName"`
	// Prefix to use for S3 logs. Defaults to `/`.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

type InfrastructureConfigurationLoggingS3LogsArgs struct {
	// Name of the S3 Bucket.
	//
	// The following arguments are optional:
	S3BucketName pulumix.Input[string] `pulumi:"s3BucketName"`
	// Prefix to use for S3 logs. Defaults to `/`.
	S3KeyPrefix pulumix.Input[*string] `pulumi:"s3KeyPrefix"`
}

func (InfrastructureConfigurationLoggingS3LogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLoggingS3Logs)(nil)).Elem()
}

func (i InfrastructureConfigurationLoggingS3LogsArgs) ToInfrastructureConfigurationLoggingS3LogsOutput() InfrastructureConfigurationLoggingS3LogsOutput {
	return i.ToInfrastructureConfigurationLoggingS3LogsOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationLoggingS3LogsArgs) ToInfrastructureConfigurationLoggingS3LogsOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingS3LogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingS3LogsOutput)
}

func (i *InfrastructureConfigurationLoggingS3LogsArgs) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationLoggingS3LogsArgs] {
	return pulumix.Val(i)
}

type InfrastructureConfigurationLoggingS3LogsOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationLoggingS3LogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLoggingS3Logs)(nil)).Elem()
}

func (o InfrastructureConfigurationLoggingS3LogsOutput) ToInfrastructureConfigurationLoggingS3LogsOutput() InfrastructureConfigurationLoggingS3LogsOutput {
	return o
}

func (o InfrastructureConfigurationLoggingS3LogsOutput) ToInfrastructureConfigurationLoggingS3LogsOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingS3LogsOutput {
	return o
}

func (o InfrastructureConfigurationLoggingS3LogsOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationLoggingS3Logs] {
	return pulumix.Output[InfrastructureConfigurationLoggingS3Logs]{
		OutputState: o.OutputState,
	}
}

// Name of the S3 Bucket.
//
// The following arguments are optional:
func (o InfrastructureConfigurationLoggingS3LogsOutput) S3BucketName() pulumix.Output[string] {
	return pulumix.Apply[InfrastructureConfigurationLoggingS3Logs](o, func(v InfrastructureConfigurationLoggingS3Logs) string { return v.S3BucketName })
}

// Prefix to use for S3 logs. Defaults to `/`.
func (o InfrastructureConfigurationLoggingS3LogsOutput) S3KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[InfrastructureConfigurationLoggingS3Logs](o, func(v InfrastructureConfigurationLoggingS3Logs) *string { return v.S3KeyPrefix })
}

type GetComponentsFilter struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListComponents API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListComponents.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetComponentsFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListComponents API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListComponents.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetComponentsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComponentsFilter)(nil)).Elem()
}

func (i GetComponentsFilterArgs) ToGetComponentsFilterOutput() GetComponentsFilterOutput {
	return i.ToGetComponentsFilterOutputWithContext(context.Background())
}

func (i GetComponentsFilterArgs) ToGetComponentsFilterOutputWithContext(ctx context.Context) GetComponentsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetComponentsFilterOutput)
}

func (i *GetComponentsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetComponentsFilterArgs] {
	return pulumix.Val(i)
}

type GetComponentsFilterOutput struct{ *pulumi.OutputState }

func (GetComponentsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComponentsFilter)(nil)).Elem()
}

func (o GetComponentsFilterOutput) ToGetComponentsFilterOutput() GetComponentsFilterOutput {
	return o
}

func (o GetComponentsFilterOutput) ToGetComponentsFilterOutputWithContext(ctx context.Context) GetComponentsFilterOutput {
	return o
}

func (o GetComponentsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetComponentsFilter] {
	return pulumix.Output[GetComponentsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Image Builder ListComponents API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListComponents.html).
func (o GetComponentsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetComponentsFilter](o, func(v GetComponentsFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetComponentsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetComponentsFilter](o, func(v GetComponentsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetContainerRecipeComponent struct {
	// ARN of the Image Builder Component.
	ComponentArn string `pulumi:"componentArn"`
	// Set of parameters that are used to configure the component.
	Parameters []GetContainerRecipeComponentParameter `pulumi:"parameters"`
}

type GetContainerRecipeComponentArgs struct {
	// ARN of the Image Builder Component.
	ComponentArn pulumix.Input[string] `pulumi:"componentArn"`
	// Set of parameters that are used to configure the component.
	Parameters pulumix.Input[[]*GetContainerRecipeComponentParameterArgs] `pulumi:"parameters"`
}

func (GetContainerRecipeComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeComponent)(nil)).Elem()
}

func (i GetContainerRecipeComponentArgs) ToGetContainerRecipeComponentOutput() GetContainerRecipeComponentOutput {
	return i.ToGetContainerRecipeComponentOutputWithContext(context.Background())
}

func (i GetContainerRecipeComponentArgs) ToGetContainerRecipeComponentOutputWithContext(ctx context.Context) GetContainerRecipeComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipeComponentOutput)
}

func (i *GetContainerRecipeComponentArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipeComponentArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipeComponentOutput struct{ *pulumi.OutputState }

func (GetContainerRecipeComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeComponent)(nil)).Elem()
}

func (o GetContainerRecipeComponentOutput) ToGetContainerRecipeComponentOutput() GetContainerRecipeComponentOutput {
	return o
}

func (o GetContainerRecipeComponentOutput) ToGetContainerRecipeComponentOutputWithContext(ctx context.Context) GetContainerRecipeComponentOutput {
	return o
}

func (o GetContainerRecipeComponentOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipeComponent] {
	return pulumix.Output[GetContainerRecipeComponent]{
		OutputState: o.OutputState,
	}
}

// ARN of the Image Builder Component.
func (o GetContainerRecipeComponentOutput) ComponentArn() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeComponent](o, func(v GetContainerRecipeComponent) string { return v.ComponentArn })
}

// Set of parameters that are used to configure the component.
func (o GetContainerRecipeComponentOutput) Parameters() pulumix.GArrayOutput[GetContainerRecipeComponentParameter, GetContainerRecipeComponentParameterOutput] {
	value := pulumix.Apply[GetContainerRecipeComponent](o, func(v GetContainerRecipeComponent) []GetContainerRecipeComponentParameter { return v.Parameters })
	return pulumix.GArrayOutput[GetContainerRecipeComponentParameter, GetContainerRecipeComponentParameterOutput]{OutputState: value.OutputState}
}

type GetContainerRecipeComponentParameter struct {
	// Name of the container recipe.
	Name string `pulumi:"name"`
	// Value of the component parameter.
	Value string `pulumi:"value"`
}

type GetContainerRecipeComponentParameterArgs struct {
	// Name of the container recipe.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value of the component parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetContainerRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeComponentParameter)(nil)).Elem()
}

func (i GetContainerRecipeComponentParameterArgs) ToGetContainerRecipeComponentParameterOutput() GetContainerRecipeComponentParameterOutput {
	return i.ToGetContainerRecipeComponentParameterOutputWithContext(context.Background())
}

func (i GetContainerRecipeComponentParameterArgs) ToGetContainerRecipeComponentParameterOutputWithContext(ctx context.Context) GetContainerRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipeComponentParameterOutput)
}

func (i *GetContainerRecipeComponentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipeComponentParameterArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (GetContainerRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeComponentParameter)(nil)).Elem()
}

func (o GetContainerRecipeComponentParameterOutput) ToGetContainerRecipeComponentParameterOutput() GetContainerRecipeComponentParameterOutput {
	return o
}

func (o GetContainerRecipeComponentParameterOutput) ToGetContainerRecipeComponentParameterOutputWithContext(ctx context.Context) GetContainerRecipeComponentParameterOutput {
	return o
}

func (o GetContainerRecipeComponentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipeComponentParameter] {
	return pulumix.Output[GetContainerRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

// Name of the container recipe.
func (o GetContainerRecipeComponentParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeComponentParameter](o, func(v GetContainerRecipeComponentParameter) string { return v.Name })
}

// Value of the component parameter.
func (o GetContainerRecipeComponentParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeComponentParameter](o, func(v GetContainerRecipeComponentParameter) string { return v.Value })
}

type GetContainerRecipeInstanceConfiguration struct {
	// Set of objects with block device mappings for the instance configuration.
	BlockDeviceMappings []GetContainerRecipeInstanceConfigurationBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// AMI ID of the base image for container build and test instance.
	Image string `pulumi:"image"`
}

type GetContainerRecipeInstanceConfigurationArgs struct {
	// Set of objects with block device mappings for the instance configuration.
	BlockDeviceMappings pulumix.Input[[]*GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs] `pulumi:"blockDeviceMappings"`
	// AMI ID of the base image for container build and test instance.
	Image pulumix.Input[string] `pulumi:"image"`
}

func (GetContainerRecipeInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (i GetContainerRecipeInstanceConfigurationArgs) ToGetContainerRecipeInstanceConfigurationOutput() GetContainerRecipeInstanceConfigurationOutput {
	return i.ToGetContainerRecipeInstanceConfigurationOutputWithContext(context.Background())
}

func (i GetContainerRecipeInstanceConfigurationArgs) ToGetContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) GetContainerRecipeInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipeInstanceConfigurationOutput)
}

func (i *GetContainerRecipeInstanceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipeInstanceConfigurationArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipeInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (GetContainerRecipeInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (o GetContainerRecipeInstanceConfigurationOutput) ToGetContainerRecipeInstanceConfigurationOutput() GetContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o GetContainerRecipeInstanceConfigurationOutput) ToGetContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) GetContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o GetContainerRecipeInstanceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipeInstanceConfiguration] {
	return pulumix.Output[GetContainerRecipeInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Set of objects with block device mappings for the instance configuration.
func (o GetContainerRecipeInstanceConfigurationOutput) BlockDeviceMappings() pulumix.GArrayOutput[GetContainerRecipeInstanceConfigurationBlockDeviceMapping, GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput] {
	value := pulumix.Apply[GetContainerRecipeInstanceConfiguration](o, func(v GetContainerRecipeInstanceConfiguration) []GetContainerRecipeInstanceConfigurationBlockDeviceMapping {
		return v.BlockDeviceMappings
	})
	return pulumix.GArrayOutput[GetContainerRecipeInstanceConfigurationBlockDeviceMapping, GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput]{OutputState: value.OutputState}
}

// AMI ID of the base image for container build and test instance.
func (o GetContainerRecipeInstanceConfigurationOutput) Image() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfiguration](o, func(v GetContainerRecipeInstanceConfiguration) string { return v.Image })
}

type GetContainerRecipeInstanceConfigurationBlockDeviceMapping struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName string `pulumi:"deviceName"`
	// Single list of object with Elastic Block Storage (EBS) block device mapping settings.
	Ebs []GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb `pulumi:"ebs"`
	// Whether to remove a mapping from the parent image.
	NoDevice string `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName string `pulumi:"virtualName"`
}

type GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName pulumix.Input[string] `pulumi:"deviceName"`
	// Single list of object with Elastic Block Storage (EBS) block device mapping settings.
	Ebs pulumix.Input[[]*GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs] `pulumi:"ebs"`
	// Whether to remove a mapping from the parent image.
	NoDevice pulumix.Input[string] `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName pulumix.Input[string] `pulumi:"virtualName"`
}

func (GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeInstanceConfigurationBlockDeviceMapping)(nil)).Elem()
}

func (i GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput() GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return i.ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingOutputWithContext(context.Background())
}

func (i GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingOutputWithContext(ctx context.Context) GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput)
}

func (i *GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipeInstanceConfigurationBlockDeviceMappingArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeInstanceConfigurationBlockDeviceMapping)(nil)).Elem()
}

func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput() GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return o
}

func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingOutputWithContext(ctx context.Context) GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput {
	return o
}

func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipeInstanceConfigurationBlockDeviceMapping] {
	return pulumix.Output[GetContainerRecipeInstanceConfigurationBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) DeviceName() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMapping) string { return v.DeviceName })
}

// Single list of object with Elastic Block Storage (EBS) block device mapping settings.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) Ebs() pulumix.GArrayOutput[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb, GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput] {
	value := pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMapping) []GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb {
		return v.Ebs
	})
	return pulumix.GArrayOutput[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb, GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput]{OutputState: value.OutputState}
}

// Whether to remove a mapping from the parent image.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) NoDevice() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMapping) string { return v.NoDevice })
}

// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput) VirtualName() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMapping](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMapping) string { return v.VirtualName })
}

type GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted bool `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops int `pulumi:"iops"`
	// KMS key used to encrypt the container image.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput int `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize int `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType string `pulumi:"volumeType"`
}

type GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination pulumix.Input[bool] `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted pulumix.Input[bool] `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops pulumix.Input[int] `pulumi:"iops"`
	// KMS key used to encrypt the container image.
	KmsKeyId pulumix.Input[string] `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId pulumix.Input[string] `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput pulumix.Input[int] `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize pulumix.Input[int] `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType pulumix.Input[string] `pulumi:"volumeType"`
}

func (GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb)(nil)).Elem()
}

func (i GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput() GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput {
	return i.ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutputWithContext(context.Background())
}

func (i GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutputWithContext(ctx context.Context) GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput)
}

func (i *GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput struct{ *pulumi.OutputState }

func (GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb)(nil)).Elem()
}

func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput() GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput {
	return o
}

func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) ToGetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutputWithContext(ctx context.Context) GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput {
	return o
}

func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb] {
	return pulumix.Output[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb]{
		OutputState: o.OutputState,
	}
}

// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) DeleteOnTermination() pulumix.Output[bool] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) bool { return v.DeleteOnTermination })
}

// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) bool { return v.Encrypted })
}

// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) Iops() pulumix.Output[int] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) int { return v.Iops })
}

// KMS key used to encrypt the container image.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) string { return v.KmsKeyId })
}

// Identifier of the EC2 Volume Snapshot.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) SnapshotId() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) string { return v.SnapshotId })
}

// For GP3 volumes only. The throughput in MiB/s that the volume supports.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) Throughput() pulumix.Output[int] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) int { return v.Throughput })
}

// Size of the volume, in GiB.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) VolumeSize() pulumix.Output[int] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) int { return v.VolumeSize })
}

// Type of the volume. For example, `gp2` or `io2`.
func (o GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput) VolumeType() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb](o, func(v GetContainerRecipeInstanceConfigurationBlockDeviceMappingEb) string { return v.VolumeType })
}

type GetContainerRecipeTargetRepository struct {
	// Name of the container repository where the output container image is stored. The name is prefixed by the repository location.
	RepositoryName string `pulumi:"repositoryName"`
	// Service in which this image is registered.
	Service string `pulumi:"service"`
}

type GetContainerRecipeTargetRepositoryArgs struct {
	// Name of the container repository where the output container image is stored. The name is prefixed by the repository location.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
	// Service in which this image is registered.
	Service pulumix.Input[string] `pulumi:"service"`
}

func (GetContainerRecipeTargetRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeTargetRepository)(nil)).Elem()
}

func (i GetContainerRecipeTargetRepositoryArgs) ToGetContainerRecipeTargetRepositoryOutput() GetContainerRecipeTargetRepositoryOutput {
	return i.ToGetContainerRecipeTargetRepositoryOutputWithContext(context.Background())
}

func (i GetContainerRecipeTargetRepositoryArgs) ToGetContainerRecipeTargetRepositoryOutputWithContext(ctx context.Context) GetContainerRecipeTargetRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipeTargetRepositoryOutput)
}

func (i *GetContainerRecipeTargetRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipeTargetRepositoryArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipeTargetRepositoryOutput struct{ *pulumi.OutputState }

func (GetContainerRecipeTargetRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipeTargetRepository)(nil)).Elem()
}

func (o GetContainerRecipeTargetRepositoryOutput) ToGetContainerRecipeTargetRepositoryOutput() GetContainerRecipeTargetRepositoryOutput {
	return o
}

func (o GetContainerRecipeTargetRepositoryOutput) ToGetContainerRecipeTargetRepositoryOutputWithContext(ctx context.Context) GetContainerRecipeTargetRepositoryOutput {
	return o
}

func (o GetContainerRecipeTargetRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipeTargetRepository] {
	return pulumix.Output[GetContainerRecipeTargetRepository]{
		OutputState: o.OutputState,
	}
}

// Name of the container repository where the output container image is stored. The name is prefixed by the repository location.
func (o GetContainerRecipeTargetRepositoryOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeTargetRepository](o, func(v GetContainerRecipeTargetRepository) string { return v.RepositoryName })
}

// Service in which this image is registered.
func (o GetContainerRecipeTargetRepositoryOutput) Service() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipeTargetRepository](o, func(v GetContainerRecipeTargetRepository) string { return v.Service })
}

type GetContainerRecipesFilter struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListContainerRecipes API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListContainerRecipes.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetContainerRecipesFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListContainerRecipes API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListContainerRecipes.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetContainerRecipesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipesFilter)(nil)).Elem()
}

func (i GetContainerRecipesFilterArgs) ToGetContainerRecipesFilterOutput() GetContainerRecipesFilterOutput {
	return i.ToGetContainerRecipesFilterOutputWithContext(context.Background())
}

func (i GetContainerRecipesFilterArgs) ToGetContainerRecipesFilterOutputWithContext(ctx context.Context) GetContainerRecipesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerRecipesFilterOutput)
}

func (i *GetContainerRecipesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetContainerRecipesFilterArgs] {
	return pulumix.Val(i)
}

type GetContainerRecipesFilterOutput struct{ *pulumi.OutputState }

func (GetContainerRecipesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRecipesFilter)(nil)).Elem()
}

func (o GetContainerRecipesFilterOutput) ToGetContainerRecipesFilterOutput() GetContainerRecipesFilterOutput {
	return o
}

func (o GetContainerRecipesFilterOutput) ToGetContainerRecipesFilterOutputWithContext(ctx context.Context) GetContainerRecipesFilterOutput {
	return o
}

func (o GetContainerRecipesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetContainerRecipesFilter] {
	return pulumix.Output[GetContainerRecipesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Image Builder ListContainerRecipes API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListContainerRecipes.html).
func (o GetContainerRecipesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetContainerRecipesFilter](o, func(v GetContainerRecipesFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetContainerRecipesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetContainerRecipesFilter](o, func(v GetContainerRecipesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDistributionConfigurationDistribution struct {
	// Nested list of AMI distribution configuration.
	AmiDistributionConfigurations []GetDistributionConfigurationDistributionAmiDistributionConfiguration `pulumi:"amiDistributionConfigurations"`
	// Nested list of container distribution configurations.
	ContainerDistributionConfigurations []GetDistributionConfigurationDistributionContainerDistributionConfiguration `pulumi:"containerDistributionConfigurations"`
	// Nested list of Windows faster-launching configurations to use for AMI distribution.
	FastLaunchConfigurations []GetDistributionConfigurationDistributionFastLaunchConfiguration `pulumi:"fastLaunchConfigurations"`
	// Nested list of launch template configurations.
	LaunchTemplateConfigurations []GetDistributionConfigurationDistributionLaunchTemplateConfiguration `pulumi:"launchTemplateConfigurations"`
	// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
	LicenseConfigurationArns []string `pulumi:"licenseConfigurationArns"`
	// AWS Region of distribution.
	Region string `pulumi:"region"`
}

type GetDistributionConfigurationDistributionArgs struct {
	// Nested list of AMI distribution configuration.
	AmiDistributionConfigurations pulumix.Input[[]*GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs] `pulumi:"amiDistributionConfigurations"`
	// Nested list of container distribution configurations.
	ContainerDistributionConfigurations pulumix.Input[[]*GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs] `pulumi:"containerDistributionConfigurations"`
	// Nested list of Windows faster-launching configurations to use for AMI distribution.
	FastLaunchConfigurations pulumix.Input[[]*GetDistributionConfigurationDistributionFastLaunchConfigurationArgs] `pulumi:"fastLaunchConfigurations"`
	// Nested list of launch template configurations.
	LaunchTemplateConfigurations pulumix.Input[[]*GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs] `pulumi:"launchTemplateConfigurations"`
	// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
	LicenseConfigurationArns pulumix.Input[[]string] `pulumi:"licenseConfigurationArns"`
	// AWS Region of distribution.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (GetDistributionConfigurationDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistribution)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionArgs) ToGetDistributionConfigurationDistributionOutput() GetDistributionConfigurationDistributionOutput {
	return i.ToGetDistributionConfigurationDistributionOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionArgs) ToGetDistributionConfigurationDistributionOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionOutput)
}

func (i *GetDistributionConfigurationDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistribution)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionOutput) ToGetDistributionConfigurationDistributionOutput() GetDistributionConfigurationDistributionOutput {
	return o
}

func (o GetDistributionConfigurationDistributionOutput) ToGetDistributionConfigurationDistributionOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionOutput {
	return o
}

func (o GetDistributionConfigurationDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistribution] {
	return pulumix.Output[GetDistributionConfigurationDistribution]{
		OutputState: o.OutputState,
	}
}

// Nested list of AMI distribution configuration.
func (o GetDistributionConfigurationDistributionOutput) AmiDistributionConfigurations() pulumix.GArrayOutput[GetDistributionConfigurationDistributionAmiDistributionConfiguration, GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistribution](o, func(v GetDistributionConfigurationDistribution) []GetDistributionConfigurationDistributionAmiDistributionConfiguration {
		return v.AmiDistributionConfigurations
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionAmiDistributionConfiguration, GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput]{OutputState: value.OutputState}
}

// Nested list of container distribution configurations.
func (o GetDistributionConfigurationDistributionOutput) ContainerDistributionConfigurations() pulumix.GArrayOutput[GetDistributionConfigurationDistributionContainerDistributionConfiguration, GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistribution](o, func(v GetDistributionConfigurationDistribution) []GetDistributionConfigurationDistributionContainerDistributionConfiguration {
		return v.ContainerDistributionConfigurations
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionContainerDistributionConfiguration, GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput]{OutputState: value.OutputState}
}

// Nested list of Windows faster-launching configurations to use for AMI distribution.
func (o GetDistributionConfigurationDistributionOutput) FastLaunchConfigurations() pulumix.GArrayOutput[GetDistributionConfigurationDistributionFastLaunchConfiguration, GetDistributionConfigurationDistributionFastLaunchConfigurationOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistribution](o, func(v GetDistributionConfigurationDistribution) []GetDistributionConfigurationDistributionFastLaunchConfiguration {
		return v.FastLaunchConfigurations
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionFastLaunchConfiguration, GetDistributionConfigurationDistributionFastLaunchConfigurationOutput]{OutputState: value.OutputState}
}

// Nested list of launch template configurations.
func (o GetDistributionConfigurationDistributionOutput) LaunchTemplateConfigurations() pulumix.GArrayOutput[GetDistributionConfigurationDistributionLaunchTemplateConfiguration, GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistribution](o, func(v GetDistributionConfigurationDistribution) []GetDistributionConfigurationDistributionLaunchTemplateConfiguration {
		return v.LaunchTemplateConfigurations
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionLaunchTemplateConfiguration, GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput]{OutputState: value.OutputState}
}

// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
func (o GetDistributionConfigurationDistributionOutput) LicenseConfigurationArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistribution](o, func(v GetDistributionConfigurationDistribution) []string { return v.LicenseConfigurationArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// AWS Region of distribution.
func (o GetDistributionConfigurationDistributionOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistribution](o, func(v GetDistributionConfigurationDistribution) string { return v.Region })
}

type GetDistributionConfigurationDistributionAmiDistributionConfiguration struct {
	// Key-value map of tags to apply to distributed AMI.
	AmiTags map[string]string `pulumi:"amiTags"`
	// Description of the container distribution configuration.
	Description string `pulumi:"description"`
	// ARN of Key Management Service (KMS) Key to encrypt AMI.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Nested list of EC2 launch permissions.
	LaunchPermissions []GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission `pulumi:"launchPermissions"`
	// Name of the distribution configuration.
	Name string `pulumi:"name"`
	// Set of target AWS Account identifiers.
	TargetAccountIds []string `pulumi:"targetAccountIds"`
}

type GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs struct {
	// Key-value map of tags to apply to distributed AMI.
	AmiTags pulumix.Input[map[string]string] `pulumi:"amiTags"`
	// Description of the container distribution configuration.
	Description pulumix.Input[string] `pulumi:"description"`
	// ARN of Key Management Service (KMS) Key to encrypt AMI.
	KmsKeyId pulumix.Input[string] `pulumi:"kmsKeyId"`
	// Nested list of EC2 launch permissions.
	LaunchPermissions pulumix.Input[[]*GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs] `pulumi:"launchPermissions"`
	// Name of the distribution configuration.
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of target AWS Account identifiers.
	TargetAccountIds pulumix.Input[[]string] `pulumi:"targetAccountIds"`
}

func (GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionAmiDistributionConfiguration)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationOutput() GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return i.ToGetDistributionConfigurationDistributionAmiDistributionConfigurationOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput)
}

func (i *GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionAmiDistributionConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionAmiDistributionConfiguration)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationOutput() GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionAmiDistributionConfiguration] {
	return pulumix.Output[GetDistributionConfigurationDistributionAmiDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Key-value map of tags to apply to distributed AMI.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) AmiTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfiguration) map[string]string {
		return v.AmiTags
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Description of the container distribution configuration.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfiguration) string {
		return v.Description
	})
}

// ARN of Key Management Service (KMS) Key to encrypt AMI.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfiguration) string { return v.KmsKeyId })
}

// Nested list of EC2 launch permissions.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) LaunchPermissions() pulumix.GArrayOutput[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission, GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfiguration) []GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission {
		return v.LaunchPermissions
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission, GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput]{OutputState: value.OutputState}
}

// Name of the distribution configuration.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfiguration) string { return v.Name })
}

// Set of target AWS Account identifiers.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput) TargetAccountIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfiguration) []string {
		return v.TargetAccountIds
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission struct {
	// Set of AWS Organization ARNs.
	OrganizationArns []string `pulumi:"organizationArns"`
	// Set of AWS Organizational Unit ARNs.
	OrganizationalUnitArns []string `pulumi:"organizationalUnitArns"`
	// Set of EC2 launch permission user groups.
	UserGroups []string `pulumi:"userGroups"`
	// Set of AWS Account identifiers.
	UserIds []string `pulumi:"userIds"`
}

type GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs struct {
	// Set of AWS Organization ARNs.
	OrganizationArns pulumix.Input[[]string] `pulumi:"organizationArns"`
	// Set of AWS Organizational Unit ARNs.
	OrganizationalUnitArns pulumix.Input[[]string] `pulumi:"organizationalUnitArns"`
	// Set of EC2 launch permission user groups.
	UserGroups pulumix.Input[[]string] `pulumi:"userGroups"`
	// Set of AWS Account identifiers.
	UserIds pulumix.Input[[]string] `pulumi:"userIds"`
}

func (GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput() GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return i.ToGetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput)
}

func (i *GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput() GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return o
}

func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ToGetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput {
	return o
}

func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission] {
	return pulumix.Output[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission]{
		OutputState: o.OutputState,
	}
}

// Set of AWS Organization ARNs.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) OrganizationArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.OrganizationArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of AWS Organizational Unit ARNs.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) OrganizationalUnitArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.OrganizationalUnitArns
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of EC2 launch permission user groups.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) UserGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.UserGroups
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of AWS Account identifiers.
func (o GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput) UserIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission](o, func(v GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission) []string {
		return v.UserIds
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDistributionConfigurationDistributionContainerDistributionConfiguration struct {
	// Set of tags that are attached to the container distribution configuration.
	ContainerTags []string `pulumi:"containerTags"`
	// Description of the container distribution configuration.
	Description string `pulumi:"description"`
	// Set of destination repositories for the container distribution configuration.
	TargetRepositories []GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository `pulumi:"targetRepositories"`
}

type GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs struct {
	// Set of tags that are attached to the container distribution configuration.
	ContainerTags pulumix.Input[[]string] `pulumi:"containerTags"`
	// Description of the container distribution configuration.
	Description pulumix.Input[string] `pulumi:"description"`
	// Set of destination repositories for the container distribution configuration.
	TargetRepositories pulumix.Input[[]*GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs] `pulumi:"targetRepositories"`
}

func (GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionContainerDistributionConfiguration)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationOutput() GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return i.ToGetDistributionConfigurationDistributionContainerDistributionConfigurationOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput)
}

func (i *GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionContainerDistributionConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionContainerDistributionConfiguration)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationOutput() GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionContainerDistributionConfiguration] {
	return pulumix.Output[GetDistributionConfigurationDistributionContainerDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Set of tags that are attached to the container distribution configuration.
func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) ContainerTags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionContainerDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionContainerDistributionConfiguration) []string {
		return v.ContainerTags
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Description of the container distribution configuration.
func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionContainerDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionContainerDistributionConfiguration) string {
		return v.Description
	})
}

// Set of destination repositories for the container distribution configuration.
func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput) TargetRepositories() pulumix.GArrayOutput[GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository, GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionContainerDistributionConfiguration](o, func(v GetDistributionConfigurationDistributionContainerDistributionConfiguration) []GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository {
		return v.TargetRepositories
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository, GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput]{OutputState: value.OutputState}
}

type GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository struct {
	// Name of the container repository where the output container image is stored.
	RepositoryName string `pulumi:"repositoryName"`
	// Service in which the image is registered.
	Service string `pulumi:"service"`
}

type GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs struct {
	// Name of the container repository where the output container image is stored.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
	// Service in which the image is registered.
	Service pulumix.Input[string] `pulumi:"service"`
}

func (GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput() GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return i.ToGetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput)
}

func (i *GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput() GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return o
}

func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ToGetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput {
	return o
}

func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository] {
	return pulumix.Output[GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository]{
		OutputState: o.OutputState,
	}
}

// Name of the container repository where the output container image is stored.
func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository](o, func(v GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository) string {
		return v.RepositoryName
	})
}

// Service in which the image is registered.
func (o GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput) Service() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository](o, func(v GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepository) string {
		return v.Service
	})
}

type GetDistributionConfigurationDistributionFastLaunchConfiguration struct {
	// The account ID that this configuration applies to.
	AccountId string `pulumi:"accountId"`
	// A Boolean that represents the current state of faster launching for the Windows AMI.
	Enabled bool `pulumi:"enabled"`
	// Nested list of launch templates that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
	LaunchTemplates []GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate `pulumi:"launchTemplates"`
	// The maximum number of parallel instances that are launched for creating resources.
	MaxParallelLaunches int `pulumi:"maxParallelLaunches"`
	// Nested list of configurations for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
	SnapshotConfigurations []GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration `pulumi:"snapshotConfigurations"`
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationArgs struct {
	// The account ID that this configuration applies to.
	AccountId pulumix.Input[string] `pulumi:"accountId"`
	// A Boolean that represents the current state of faster launching for the Windows AMI.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Nested list of launch templates that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
	LaunchTemplates pulumix.Input[[]*GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs] `pulumi:"launchTemplates"`
	// The maximum number of parallel instances that are launched for creating resources.
	MaxParallelLaunches pulumix.Input[int] `pulumi:"maxParallelLaunches"`
	// Nested list of configurations for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
	SnapshotConfigurations pulumix.Input[[]*GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs] `pulumi:"snapshotConfigurations"`
}

func (GetDistributionConfigurationDistributionFastLaunchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionFastLaunchConfiguration)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionFastLaunchConfigurationArgs) ToGetDistributionConfigurationDistributionFastLaunchConfigurationOutput() GetDistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return i.ToGetDistributionConfigurationDistributionFastLaunchConfigurationOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionFastLaunchConfigurationArgs) ToGetDistributionConfigurationDistributionFastLaunchConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionFastLaunchConfigurationOutput)
}

func (i *GetDistributionConfigurationDistributionFastLaunchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionFastLaunchConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionFastLaunchConfiguration)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) ToGetDistributionConfigurationDistributionFastLaunchConfigurationOutput() GetDistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) ToGetDistributionConfigurationDistributionFastLaunchConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionFastLaunchConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionFastLaunchConfiguration] {
	return pulumix.Output[GetDistributionConfigurationDistributionFastLaunchConfiguration]{
		OutputState: o.OutputState,
	}
}

// The account ID that this configuration applies to.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfiguration](o, func(v GetDistributionConfigurationDistributionFastLaunchConfiguration) string { return v.AccountId })
}

// A Boolean that represents the current state of faster launching for the Windows AMI.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfiguration](o, func(v GetDistributionConfigurationDistributionFastLaunchConfiguration) bool { return v.Enabled })
}

// Nested list of launch templates that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) LaunchTemplates() pulumix.GArrayOutput[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate, GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfiguration](o, func(v GetDistributionConfigurationDistributionFastLaunchConfiguration) []GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate {
		return v.LaunchTemplates
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate, GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput]{OutputState: value.OutputState}
}

// The maximum number of parallel instances that are launched for creating resources.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) MaxParallelLaunches() pulumix.Output[int] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfiguration](o, func(v GetDistributionConfigurationDistributionFastLaunchConfiguration) int {
		return v.MaxParallelLaunches
	})
}

// Nested list of configurations for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationOutput) SnapshotConfigurations() pulumix.GArrayOutput[GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration, GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput] {
	value := pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfiguration](o, func(v GetDistributionConfigurationDistributionFastLaunchConfiguration) []GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration {
		return v.SnapshotConfigurations
	})
	return pulumix.GArrayOutput[GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration, GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput]{OutputState: value.OutputState}
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate struct {
	// ID of the Amazon EC2 launch template.
	LaunchTemplateId string `pulumi:"launchTemplateId"`
	// The name of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateName string `pulumi:"launchTemplateName"`
	// The version of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateVersion string `pulumi:"launchTemplateVersion"`
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs struct {
	// ID of the Amazon EC2 launch template.
	LaunchTemplateId pulumix.Input[string] `pulumi:"launchTemplateId"`
	// The name of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateName pulumix.Input[string] `pulumi:"launchTemplateName"`
	// The version of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateVersion pulumix.Input[string] `pulumi:"launchTemplateVersion"`
}

func (GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ToGetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput() GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return i.ToGetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ToGetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput)
}

func (i *GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ToGetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput() GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return o
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ToGetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput {
	return o
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate] {
	return pulumix.Output[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate]{
		OutputState: o.OutputState,
	}
}

// ID of the Amazon EC2 launch template.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) LaunchTemplateId() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate](o, func(v GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate) string {
		return v.LaunchTemplateId
	})
}

// The name of the launch template to use for faster launching for a Windows AMI.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) LaunchTemplateName() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate](o, func(v GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate) string {
		return v.LaunchTemplateName
	})
}

// The version of the launch template to use for faster launching for a Windows AMI.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput) LaunchTemplateVersion() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate](o, func(v GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplate) string {
		return v.LaunchTemplateVersion
	})
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration struct {
	// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
	TargetResourceCount int `pulumi:"targetResourceCount"`
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs struct {
	// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
	TargetResourceCount pulumix.Input[int] `pulumi:"targetResourceCount"`
}

func (GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ToGetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput() GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return i.ToGetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ToGetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput)
}

func (i *GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ToGetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput() GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ToGetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration] {
	return pulumix.Output[GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration]{
		OutputState: o.OutputState,
	}
}

// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
func (o GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput) TargetResourceCount() pulumix.Output[int] {
	return pulumix.Apply[GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration](o, func(v GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfiguration) int {
		return v.TargetResourceCount
	})
}

type GetDistributionConfigurationDistributionLaunchTemplateConfiguration struct {
	// The account ID that this configuration applies to.
	AccountId string `pulumi:"accountId"`
	// Whether the specified Amazon EC2 launch template is set as the default launch template.
	Default bool `pulumi:"default"`
	// ID of the Amazon EC2 launch template.
	LaunchTemplateId string `pulumi:"launchTemplateId"`
}

type GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs struct {
	// The account ID that this configuration applies to.
	AccountId pulumix.Input[string] `pulumi:"accountId"`
	// Whether the specified Amazon EC2 launch template is set as the default launch template.
	Default pulumix.Input[bool] `pulumi:"default"`
	// ID of the Amazon EC2 launch template.
	LaunchTemplateId pulumix.Input[string] `pulumi:"launchTemplateId"`
}

func (GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionLaunchTemplateConfiguration)(nil)).Elem()
}

func (i GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ToGetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput() GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return i.ToGetDistributionConfigurationDistributionLaunchTemplateConfigurationOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ToGetDistributionConfigurationDistributionLaunchTemplateConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput)
}

func (i *GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationDistributionLaunchTemplateConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationDistributionLaunchTemplateConfiguration)(nil)).Elem()
}

func (o GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ToGetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput() GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ToGetDistributionConfigurationDistributionLaunchTemplateConfigurationOutputWithContext(ctx context.Context) GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput {
	return o
}

func (o GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationDistributionLaunchTemplateConfiguration] {
	return pulumix.Output[GetDistributionConfigurationDistributionLaunchTemplateConfiguration]{
		OutputState: o.OutputState,
	}
}

// The account ID that this configuration applies to.
func (o GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionLaunchTemplateConfiguration](o, func(v GetDistributionConfigurationDistributionLaunchTemplateConfiguration) string { return v.AccountId })
}

// Whether the specified Amazon EC2 launch template is set as the default launch template.
func (o GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) Default() pulumix.Output[bool] {
	return pulumix.Apply[GetDistributionConfigurationDistributionLaunchTemplateConfiguration](o, func(v GetDistributionConfigurationDistributionLaunchTemplateConfiguration) bool { return v.Default })
}

// ID of the Amazon EC2 launch template.
func (o GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput) LaunchTemplateId() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationDistributionLaunchTemplateConfiguration](o, func(v GetDistributionConfigurationDistributionLaunchTemplateConfiguration) string {
		return v.LaunchTemplateId
	})
}

type GetDistributionConfigurationsFilter struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListDistributionConfigurations API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListDistributionConfigurations.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetDistributionConfigurationsFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListDistributionConfigurations API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListDistributionConfigurations.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetDistributionConfigurationsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationsFilter)(nil)).Elem()
}

func (i GetDistributionConfigurationsFilterArgs) ToGetDistributionConfigurationsFilterOutput() GetDistributionConfigurationsFilterOutput {
	return i.ToGetDistributionConfigurationsFilterOutputWithContext(context.Background())
}

func (i GetDistributionConfigurationsFilterArgs) ToGetDistributionConfigurationsFilterOutputWithContext(ctx context.Context) GetDistributionConfigurationsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDistributionConfigurationsFilterOutput)
}

func (i *GetDistributionConfigurationsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDistributionConfigurationsFilterArgs] {
	return pulumix.Val(i)
}

type GetDistributionConfigurationsFilterOutput struct{ *pulumi.OutputState }

func (GetDistributionConfigurationsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDistributionConfigurationsFilter)(nil)).Elem()
}

func (o GetDistributionConfigurationsFilterOutput) ToGetDistributionConfigurationsFilterOutput() GetDistributionConfigurationsFilterOutput {
	return o
}

func (o GetDistributionConfigurationsFilterOutput) ToGetDistributionConfigurationsFilterOutputWithContext(ctx context.Context) GetDistributionConfigurationsFilterOutput {
	return o
}

func (o GetDistributionConfigurationsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetDistributionConfigurationsFilter] {
	return pulumix.Output[GetDistributionConfigurationsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Image Builder ListDistributionConfigurations API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListDistributionConfigurations.html).
func (o GetDistributionConfigurationsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDistributionConfigurationsFilter](o, func(v GetDistributionConfigurationsFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetDistributionConfigurationsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDistributionConfigurationsFilter](o, func(v GetDistributionConfigurationsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetImageImageTestsConfiguration struct {
	// Whether image tests are enabled.
	ImageTestsEnabled bool `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out.
	TimeoutMinutes int `pulumi:"timeoutMinutes"`
}

type GetImageImageTestsConfigurationArgs struct {
	// Whether image tests are enabled.
	ImageTestsEnabled pulumix.Input[bool] `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out.
	TimeoutMinutes pulumix.Input[int] `pulumi:"timeoutMinutes"`
}

func (GetImageImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageImageTestsConfiguration)(nil)).Elem()
}

func (i GetImageImageTestsConfigurationArgs) ToGetImageImageTestsConfigurationOutput() GetImageImageTestsConfigurationOutput {
	return i.ToGetImageImageTestsConfigurationOutputWithContext(context.Background())
}

func (i GetImageImageTestsConfigurationArgs) ToGetImageImageTestsConfigurationOutputWithContext(ctx context.Context) GetImageImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageImageTestsConfigurationOutput)
}

func (i *GetImageImageTestsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageImageTestsConfigurationArgs] {
	return pulumix.Val(i)
}

type GetImageImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (GetImageImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageImageTestsConfiguration)(nil)).Elem()
}

func (o GetImageImageTestsConfigurationOutput) ToGetImageImageTestsConfigurationOutput() GetImageImageTestsConfigurationOutput {
	return o
}

func (o GetImageImageTestsConfigurationOutput) ToGetImageImageTestsConfigurationOutputWithContext(ctx context.Context) GetImageImageTestsConfigurationOutput {
	return o
}

func (o GetImageImageTestsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageImageTestsConfiguration] {
	return pulumix.Output[GetImageImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether image tests are enabled.
func (o GetImageImageTestsConfigurationOutput) ImageTestsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetImageImageTestsConfiguration](o, func(v GetImageImageTestsConfiguration) bool { return v.ImageTestsEnabled })
}

// Number of minutes before image tests time out.
func (o GetImageImageTestsConfigurationOutput) TimeoutMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetImageImageTestsConfiguration](o, func(v GetImageImageTestsConfiguration) int { return v.TimeoutMinutes })
}

type GetImageOutputResource struct {
	// Set of objects with each Amazon Machine Image (AMI) created.
	Amis []GetImageOutputResourceAmi `pulumi:"amis"`
	// Set of objects with each container image created and stored in the output repository.
	Containers []GetImageOutputResourceContainer `pulumi:"containers"`
}

type GetImageOutputResourceArgs struct {
	// Set of objects with each Amazon Machine Image (AMI) created.
	Amis pulumix.Input[[]*GetImageOutputResourceAmiArgs] `pulumi:"amis"`
	// Set of objects with each container image created and stored in the output repository.
	Containers pulumix.Input[[]*GetImageOutputResourceContainerArgs] `pulumi:"containers"`
}

func (GetImageOutputResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageOutputResource)(nil)).Elem()
}

func (i GetImageOutputResourceArgs) ToGetImageOutputResourceOutput() GetImageOutputResourceOutput {
	return i.ToGetImageOutputResourceOutputWithContext(context.Background())
}

func (i GetImageOutputResourceArgs) ToGetImageOutputResourceOutputWithContext(ctx context.Context) GetImageOutputResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageOutputResourceOutput)
}

func (i *GetImageOutputResourceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageOutputResourceArgs] {
	return pulumix.Val(i)
}

type GetImageOutputResourceOutput struct{ *pulumi.OutputState }

func (GetImageOutputResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageOutputResource)(nil)).Elem()
}

func (o GetImageOutputResourceOutput) ToGetImageOutputResourceOutput() GetImageOutputResourceOutput {
	return o
}

func (o GetImageOutputResourceOutput) ToGetImageOutputResourceOutputWithContext(ctx context.Context) GetImageOutputResourceOutput {
	return o
}

func (o GetImageOutputResourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageOutputResource] {
	return pulumix.Output[GetImageOutputResource]{
		OutputState: o.OutputState,
	}
}

// Set of objects with each Amazon Machine Image (AMI) created.
func (o GetImageOutputResourceOutput) Amis() pulumix.GArrayOutput[GetImageOutputResourceAmi, GetImageOutputResourceAmiOutput] {
	value := pulumix.Apply[GetImageOutputResource](o, func(v GetImageOutputResource) []GetImageOutputResourceAmi { return v.Amis })
	return pulumix.GArrayOutput[GetImageOutputResourceAmi, GetImageOutputResourceAmiOutput]{OutputState: value.OutputState}
}

// Set of objects with each container image created and stored in the output repository.
func (o GetImageOutputResourceOutput) Containers() pulumix.GArrayOutput[GetImageOutputResourceContainer, GetImageOutputResourceContainerOutput] {
	value := pulumix.Apply[GetImageOutputResource](o, func(v GetImageOutputResource) []GetImageOutputResourceContainer { return v.Containers })
	return pulumix.GArrayOutput[GetImageOutputResourceContainer, GetImageOutputResourceContainerOutput]{OutputState: value.OutputState}
}

type GetImageOutputResourceAmi struct {
	// Account identifier of the AMI.
	AccountId string `pulumi:"accountId"`
	// Description of the AMI.
	Description string `pulumi:"description"`
	// Identifier of the AMI.
	Image string `pulumi:"image"`
	// Name of the AMI.
	Name string `pulumi:"name"`
	// Region of the container image.
	Region string `pulumi:"region"`
}

type GetImageOutputResourceAmiArgs struct {
	// Account identifier of the AMI.
	AccountId pulumix.Input[string] `pulumi:"accountId"`
	// Description of the AMI.
	Description pulumix.Input[string] `pulumi:"description"`
	// Identifier of the AMI.
	Image pulumix.Input[string] `pulumi:"image"`
	// Name of the AMI.
	Name pulumix.Input[string] `pulumi:"name"`
	// Region of the container image.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (GetImageOutputResourceAmiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageOutputResourceAmi)(nil)).Elem()
}

func (i GetImageOutputResourceAmiArgs) ToGetImageOutputResourceAmiOutput() GetImageOutputResourceAmiOutput {
	return i.ToGetImageOutputResourceAmiOutputWithContext(context.Background())
}

func (i GetImageOutputResourceAmiArgs) ToGetImageOutputResourceAmiOutputWithContext(ctx context.Context) GetImageOutputResourceAmiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageOutputResourceAmiOutput)
}

func (i *GetImageOutputResourceAmiArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageOutputResourceAmiArgs] {
	return pulumix.Val(i)
}

type GetImageOutputResourceAmiOutput struct{ *pulumi.OutputState }

func (GetImageOutputResourceAmiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageOutputResourceAmi)(nil)).Elem()
}

func (o GetImageOutputResourceAmiOutput) ToGetImageOutputResourceAmiOutput() GetImageOutputResourceAmiOutput {
	return o
}

func (o GetImageOutputResourceAmiOutput) ToGetImageOutputResourceAmiOutputWithContext(ctx context.Context) GetImageOutputResourceAmiOutput {
	return o
}

func (o GetImageOutputResourceAmiOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageOutputResourceAmi] {
	return pulumix.Output[GetImageOutputResourceAmi]{
		OutputState: o.OutputState,
	}
}

// Account identifier of the AMI.
func (o GetImageOutputResourceAmiOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[GetImageOutputResourceAmi](o, func(v GetImageOutputResourceAmi) string { return v.AccountId })
}

// Description of the AMI.
func (o GetImageOutputResourceAmiOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetImageOutputResourceAmi](o, func(v GetImageOutputResourceAmi) string { return v.Description })
}

// Identifier of the AMI.
func (o GetImageOutputResourceAmiOutput) Image() pulumix.Output[string] {
	return pulumix.Apply[GetImageOutputResourceAmi](o, func(v GetImageOutputResourceAmi) string { return v.Image })
}

// Name of the AMI.
func (o GetImageOutputResourceAmiOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetImageOutputResourceAmi](o, func(v GetImageOutputResourceAmi) string { return v.Name })
}

// Region of the container image.
func (o GetImageOutputResourceAmiOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[GetImageOutputResourceAmi](o, func(v GetImageOutputResourceAmi) string { return v.Region })
}

type GetImageOutputResourceContainer struct {
	// Set of URIs for created containers.
	ImageUris []string `pulumi:"imageUris"`
	// Region of the container image.
	Region string `pulumi:"region"`
}

type GetImageOutputResourceContainerArgs struct {
	// Set of URIs for created containers.
	ImageUris pulumix.Input[[]string] `pulumi:"imageUris"`
	// Region of the container image.
	Region pulumix.Input[string] `pulumi:"region"`
}

func (GetImageOutputResourceContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageOutputResourceContainer)(nil)).Elem()
}

func (i GetImageOutputResourceContainerArgs) ToGetImageOutputResourceContainerOutput() GetImageOutputResourceContainerOutput {
	return i.ToGetImageOutputResourceContainerOutputWithContext(context.Background())
}

func (i GetImageOutputResourceContainerArgs) ToGetImageOutputResourceContainerOutputWithContext(ctx context.Context) GetImageOutputResourceContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageOutputResourceContainerOutput)
}

func (i *GetImageOutputResourceContainerArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageOutputResourceContainerArgs] {
	return pulumix.Val(i)
}

type GetImageOutputResourceContainerOutput struct{ *pulumi.OutputState }

func (GetImageOutputResourceContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageOutputResourceContainer)(nil)).Elem()
}

func (o GetImageOutputResourceContainerOutput) ToGetImageOutputResourceContainerOutput() GetImageOutputResourceContainerOutput {
	return o
}

func (o GetImageOutputResourceContainerOutput) ToGetImageOutputResourceContainerOutputWithContext(ctx context.Context) GetImageOutputResourceContainerOutput {
	return o
}

func (o GetImageOutputResourceContainerOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageOutputResourceContainer] {
	return pulumix.Output[GetImageOutputResourceContainer]{
		OutputState: o.OutputState,
	}
}

// Set of URIs for created containers.
func (o GetImageOutputResourceContainerOutput) ImageUris() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetImageOutputResourceContainer](o, func(v GetImageOutputResourceContainer) []string { return v.ImageUris })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Region of the container image.
func (o GetImageOutputResourceContainerOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[GetImageOutputResourceContainer](o, func(v GetImageOutputResourceContainer) string { return v.Region })
}

type GetImagePipelineImageScanningConfiguration struct {
	// List if an object with ecr configuration for image scanning
	EcrConfigurations []GetImagePipelineImageScanningConfigurationEcrConfiguration `pulumi:"ecrConfigurations"`
	// Whether image scanning is enabled.
	ImageScanningEnabled bool `pulumi:"imageScanningEnabled"`
}

type GetImagePipelineImageScanningConfigurationArgs struct {
	// List if an object with ecr configuration for image scanning
	EcrConfigurations pulumix.Input[[]*GetImagePipelineImageScanningConfigurationEcrConfigurationArgs] `pulumi:"ecrConfigurations"`
	// Whether image scanning is enabled.
	ImageScanningEnabled pulumix.Input[bool] `pulumi:"imageScanningEnabled"`
}

func (GetImagePipelineImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (i GetImagePipelineImageScanningConfigurationArgs) ToGetImagePipelineImageScanningConfigurationOutput() GetImagePipelineImageScanningConfigurationOutput {
	return i.ToGetImagePipelineImageScanningConfigurationOutputWithContext(context.Background())
}

func (i GetImagePipelineImageScanningConfigurationArgs) ToGetImagePipelineImageScanningConfigurationOutputWithContext(ctx context.Context) GetImagePipelineImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagePipelineImageScanningConfigurationOutput)
}

func (i *GetImagePipelineImageScanningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImagePipelineImageScanningConfigurationArgs] {
	return pulumix.Val(i)
}

type GetImagePipelineImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (GetImagePipelineImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (o GetImagePipelineImageScanningConfigurationOutput) ToGetImagePipelineImageScanningConfigurationOutput() GetImagePipelineImageScanningConfigurationOutput {
	return o
}

func (o GetImagePipelineImageScanningConfigurationOutput) ToGetImagePipelineImageScanningConfigurationOutputWithContext(ctx context.Context) GetImagePipelineImageScanningConfigurationOutput {
	return o
}

func (o GetImagePipelineImageScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetImagePipelineImageScanningConfiguration] {
	return pulumix.Output[GetImagePipelineImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// List if an object with ecr configuration for image scanning
func (o GetImagePipelineImageScanningConfigurationOutput) EcrConfigurations() pulumix.GArrayOutput[GetImagePipelineImageScanningConfigurationEcrConfiguration, GetImagePipelineImageScanningConfigurationEcrConfigurationOutput] {
	value := pulumix.Apply[GetImagePipelineImageScanningConfiguration](o, func(v GetImagePipelineImageScanningConfiguration) []GetImagePipelineImageScanningConfigurationEcrConfiguration {
		return v.EcrConfigurations
	})
	return pulumix.GArrayOutput[GetImagePipelineImageScanningConfigurationEcrConfiguration, GetImagePipelineImageScanningConfigurationEcrConfigurationOutput]{OutputState: value.OutputState}
}

// Whether image scanning is enabled.
func (o GetImagePipelineImageScanningConfigurationOutput) ImageScanningEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetImagePipelineImageScanningConfiguration](o, func(v GetImagePipelineImageScanningConfiguration) bool { return v.ImageScanningEnabled })
}

type GetImagePipelineImageScanningConfigurationEcrConfiguration struct {
	// Tags that are added to the output containers that are scanned
	ContainerTags []string `pulumi:"containerTags"`
	// The name of the container repository that Amazon Inspector scans
	RepositoryName string `pulumi:"repositoryName"`
}

type GetImagePipelineImageScanningConfigurationEcrConfigurationArgs struct {
	// Tags that are added to the output containers that are scanned
	ContainerTags pulumix.Input[[]string] `pulumi:"containerTags"`
	// The name of the container repository that Amazon Inspector scans
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (GetImagePipelineImageScanningConfigurationEcrConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineImageScanningConfigurationEcrConfiguration)(nil)).Elem()
}

func (i GetImagePipelineImageScanningConfigurationEcrConfigurationArgs) ToGetImagePipelineImageScanningConfigurationEcrConfigurationOutput() GetImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return i.ToGetImagePipelineImageScanningConfigurationEcrConfigurationOutputWithContext(context.Background())
}

func (i GetImagePipelineImageScanningConfigurationEcrConfigurationArgs) ToGetImagePipelineImageScanningConfigurationEcrConfigurationOutputWithContext(ctx context.Context) GetImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagePipelineImageScanningConfigurationEcrConfigurationOutput)
}

func (i *GetImagePipelineImageScanningConfigurationEcrConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImagePipelineImageScanningConfigurationEcrConfigurationArgs] {
	return pulumix.Val(i)
}

type GetImagePipelineImageScanningConfigurationEcrConfigurationOutput struct{ *pulumi.OutputState }

func (GetImagePipelineImageScanningConfigurationEcrConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineImageScanningConfigurationEcrConfiguration)(nil)).Elem()
}

func (o GetImagePipelineImageScanningConfigurationEcrConfigurationOutput) ToGetImagePipelineImageScanningConfigurationEcrConfigurationOutput() GetImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return o
}

func (o GetImagePipelineImageScanningConfigurationEcrConfigurationOutput) ToGetImagePipelineImageScanningConfigurationEcrConfigurationOutputWithContext(ctx context.Context) GetImagePipelineImageScanningConfigurationEcrConfigurationOutput {
	return o
}

func (o GetImagePipelineImageScanningConfigurationEcrConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetImagePipelineImageScanningConfigurationEcrConfiguration] {
	return pulumix.Output[GetImagePipelineImageScanningConfigurationEcrConfiguration]{
		OutputState: o.OutputState,
	}
}

// Tags that are added to the output containers that are scanned
func (o GetImagePipelineImageScanningConfigurationEcrConfigurationOutput) ContainerTags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetImagePipelineImageScanningConfigurationEcrConfiguration](o, func(v GetImagePipelineImageScanningConfigurationEcrConfiguration) []string { return v.ContainerTags })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name of the container repository that Amazon Inspector scans
func (o GetImagePipelineImageScanningConfigurationEcrConfigurationOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[GetImagePipelineImageScanningConfigurationEcrConfiguration](o, func(v GetImagePipelineImageScanningConfigurationEcrConfiguration) string { return v.RepositoryName })
}

type GetImagePipelineImageTestsConfiguration struct {
	// Whether image tests are enabled.
	ImageTestsEnabled bool `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out.
	TimeoutMinutes int `pulumi:"timeoutMinutes"`
}

type GetImagePipelineImageTestsConfigurationArgs struct {
	// Whether image tests are enabled.
	ImageTestsEnabled pulumix.Input[bool] `pulumi:"imageTestsEnabled"`
	// Number of minutes before image tests time out.
	TimeoutMinutes pulumix.Input[int] `pulumi:"timeoutMinutes"`
}

func (GetImagePipelineImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (i GetImagePipelineImageTestsConfigurationArgs) ToGetImagePipelineImageTestsConfigurationOutput() GetImagePipelineImageTestsConfigurationOutput {
	return i.ToGetImagePipelineImageTestsConfigurationOutputWithContext(context.Background())
}

func (i GetImagePipelineImageTestsConfigurationArgs) ToGetImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) GetImagePipelineImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagePipelineImageTestsConfigurationOutput)
}

func (i *GetImagePipelineImageTestsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImagePipelineImageTestsConfigurationArgs] {
	return pulumix.Val(i)
}

type GetImagePipelineImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (GetImagePipelineImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (o GetImagePipelineImageTestsConfigurationOutput) ToGetImagePipelineImageTestsConfigurationOutput() GetImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o GetImagePipelineImageTestsConfigurationOutput) ToGetImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) GetImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o GetImagePipelineImageTestsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetImagePipelineImageTestsConfiguration] {
	return pulumix.Output[GetImagePipelineImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether image tests are enabled.
func (o GetImagePipelineImageTestsConfigurationOutput) ImageTestsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[GetImagePipelineImageTestsConfiguration](o, func(v GetImagePipelineImageTestsConfiguration) bool { return v.ImageTestsEnabled })
}

// Number of minutes before image tests time out.
func (o GetImagePipelineImageTestsConfigurationOutput) TimeoutMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetImagePipelineImageTestsConfiguration](o, func(v GetImagePipelineImageTestsConfiguration) int { return v.TimeoutMinutes })
}

type GetImagePipelineSchedule struct {
	// Condition when the pipeline should trigger a new image build.
	PipelineExecutionStartCondition string `pulumi:"pipelineExecutionStartCondition"`
	// Cron expression of how often the pipeline start condition is evaluated.
	ScheduleExpression string `pulumi:"scheduleExpression"`
}

type GetImagePipelineScheduleArgs struct {
	// Condition when the pipeline should trigger a new image build.
	PipelineExecutionStartCondition pulumix.Input[string] `pulumi:"pipelineExecutionStartCondition"`
	// Cron expression of how often the pipeline start condition is evaluated.
	ScheduleExpression pulumix.Input[string] `pulumi:"scheduleExpression"`
}

func (GetImagePipelineScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineSchedule)(nil)).Elem()
}

func (i GetImagePipelineScheduleArgs) ToGetImagePipelineScheduleOutput() GetImagePipelineScheduleOutput {
	return i.ToGetImagePipelineScheduleOutputWithContext(context.Background())
}

func (i GetImagePipelineScheduleArgs) ToGetImagePipelineScheduleOutputWithContext(ctx context.Context) GetImagePipelineScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagePipelineScheduleOutput)
}

func (i *GetImagePipelineScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImagePipelineScheduleArgs] {
	return pulumix.Val(i)
}

type GetImagePipelineScheduleOutput struct{ *pulumi.OutputState }

func (GetImagePipelineScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelineSchedule)(nil)).Elem()
}

func (o GetImagePipelineScheduleOutput) ToGetImagePipelineScheduleOutput() GetImagePipelineScheduleOutput {
	return o
}

func (o GetImagePipelineScheduleOutput) ToGetImagePipelineScheduleOutputWithContext(ctx context.Context) GetImagePipelineScheduleOutput {
	return o
}

func (o GetImagePipelineScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[GetImagePipelineSchedule] {
	return pulumix.Output[GetImagePipelineSchedule]{
		OutputState: o.OutputState,
	}
}

// Condition when the pipeline should trigger a new image build.
func (o GetImagePipelineScheduleOutput) PipelineExecutionStartCondition() pulumix.Output[string] {
	return pulumix.Apply[GetImagePipelineSchedule](o, func(v GetImagePipelineSchedule) string { return v.PipelineExecutionStartCondition })
}

// Cron expression of how often the pipeline start condition is evaluated.
func (o GetImagePipelineScheduleOutput) ScheduleExpression() pulumix.Output[string] {
	return pulumix.Apply[GetImagePipelineSchedule](o, func(v GetImagePipelineSchedule) string { return v.ScheduleExpression })
}

type GetImagePipelinesFilter struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListImagePipelines API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListImagePipelines.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetImagePipelinesFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListImagePipelines API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListImagePipelines.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetImagePipelinesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelinesFilter)(nil)).Elem()
}

func (i GetImagePipelinesFilterArgs) ToGetImagePipelinesFilterOutput() GetImagePipelinesFilterOutput {
	return i.ToGetImagePipelinesFilterOutputWithContext(context.Background())
}

func (i GetImagePipelinesFilterArgs) ToGetImagePipelinesFilterOutputWithContext(ctx context.Context) GetImagePipelinesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagePipelinesFilterOutput)
}

func (i *GetImagePipelinesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImagePipelinesFilterArgs] {
	return pulumix.Val(i)
}

type GetImagePipelinesFilterOutput struct{ *pulumi.OutputState }

func (GetImagePipelinesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelinesFilter)(nil)).Elem()
}

func (o GetImagePipelinesFilterOutput) ToGetImagePipelinesFilterOutput() GetImagePipelinesFilterOutput {
	return o
}

func (o GetImagePipelinesFilterOutput) ToGetImagePipelinesFilterOutputWithContext(ctx context.Context) GetImagePipelinesFilterOutput {
	return o
}

func (o GetImagePipelinesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetImagePipelinesFilter] {
	return pulumix.Output[GetImagePipelinesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Image Builder ListImagePipelines API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListImagePipelines.html).
func (o GetImagePipelinesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetImagePipelinesFilter](o, func(v GetImagePipelinesFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetImagePipelinesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetImagePipelinesFilter](o, func(v GetImagePipelinesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetImageRecipeBlockDeviceMapping struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName string `pulumi:"deviceName"`
	// Single list of object with Elastic Block Storage (EBS) block device mapping settings.
	Ebs []GetImageRecipeBlockDeviceMappingEb `pulumi:"ebs"`
	// Whether to remove a mapping from the parent image.
	NoDevice string `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName string `pulumi:"virtualName"`
}

type GetImageRecipeBlockDeviceMappingArgs struct {
	// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
	DeviceName pulumix.Input[string] `pulumi:"deviceName"`
	// Single list of object with Elastic Block Storage (EBS) block device mapping settings.
	Ebs pulumix.Input[[]*GetImageRecipeBlockDeviceMappingEbArgs] `pulumi:"ebs"`
	// Whether to remove a mapping from the parent image.
	NoDevice pulumix.Input[string] `pulumi:"noDevice"`
	// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
	VirtualName pulumix.Input[string] `pulumi:"virtualName"`
}

func (GetImageRecipeBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeBlockDeviceMapping)(nil)).Elem()
}

func (i GetImageRecipeBlockDeviceMappingArgs) ToGetImageRecipeBlockDeviceMappingOutput() GetImageRecipeBlockDeviceMappingOutput {
	return i.ToGetImageRecipeBlockDeviceMappingOutputWithContext(context.Background())
}

func (i GetImageRecipeBlockDeviceMappingArgs) ToGetImageRecipeBlockDeviceMappingOutputWithContext(ctx context.Context) GetImageRecipeBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageRecipeBlockDeviceMappingOutput)
}

func (i *GetImageRecipeBlockDeviceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageRecipeBlockDeviceMappingArgs] {
	return pulumix.Val(i)
}

type GetImageRecipeBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (GetImageRecipeBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeBlockDeviceMapping)(nil)).Elem()
}

func (o GetImageRecipeBlockDeviceMappingOutput) ToGetImageRecipeBlockDeviceMappingOutput() GetImageRecipeBlockDeviceMappingOutput {
	return o
}

func (o GetImageRecipeBlockDeviceMappingOutput) ToGetImageRecipeBlockDeviceMappingOutputWithContext(ctx context.Context) GetImageRecipeBlockDeviceMappingOutput {
	return o
}

func (o GetImageRecipeBlockDeviceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageRecipeBlockDeviceMapping] {
	return pulumix.Output[GetImageRecipeBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

// Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
func (o GetImageRecipeBlockDeviceMappingOutput) DeviceName() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMapping](o, func(v GetImageRecipeBlockDeviceMapping) string { return v.DeviceName })
}

// Single list of object with Elastic Block Storage (EBS) block device mapping settings.
func (o GetImageRecipeBlockDeviceMappingOutput) Ebs() pulumix.GArrayOutput[GetImageRecipeBlockDeviceMappingEb, GetImageRecipeBlockDeviceMappingEbOutput] {
	value := pulumix.Apply[GetImageRecipeBlockDeviceMapping](o, func(v GetImageRecipeBlockDeviceMapping) []GetImageRecipeBlockDeviceMappingEb { return v.Ebs })
	return pulumix.GArrayOutput[GetImageRecipeBlockDeviceMappingEb, GetImageRecipeBlockDeviceMappingEbOutput]{OutputState: value.OutputState}
}

// Whether to remove a mapping from the parent image.
func (o GetImageRecipeBlockDeviceMappingOutput) NoDevice() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMapping](o, func(v GetImageRecipeBlockDeviceMapping) string { return v.NoDevice })
}

// Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
func (o GetImageRecipeBlockDeviceMappingOutput) VirtualName() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMapping](o, func(v GetImageRecipeBlockDeviceMapping) string { return v.VirtualName })
}

type GetImageRecipeBlockDeviceMappingEb struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted bool `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops int `pulumi:"iops"`
	// ARN of the Key Management Service (KMS) Key for encryption.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput int `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize int `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType string `pulumi:"volumeType"`
}

type GetImageRecipeBlockDeviceMappingEbArgs struct {
	// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
	DeleteOnTermination pulumix.Input[bool] `pulumi:"deleteOnTermination"`
	// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
	Encrypted pulumix.Input[bool] `pulumi:"encrypted"`
	// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
	Iops pulumix.Input[int] `pulumi:"iops"`
	// ARN of the Key Management Service (KMS) Key for encryption.
	KmsKeyId pulumix.Input[string] `pulumi:"kmsKeyId"`
	// Identifier of the EC2 Volume Snapshot.
	SnapshotId pulumix.Input[string] `pulumi:"snapshotId"`
	// For GP3 volumes only. The throughput in MiB/s that the volume supports.
	Throughput pulumix.Input[int] `pulumi:"throughput"`
	// Size of the volume, in GiB.
	VolumeSize pulumix.Input[int] `pulumi:"volumeSize"`
	// Type of the volume. For example, `gp2` or `io2`.
	VolumeType pulumix.Input[string] `pulumi:"volumeType"`
}

func (GetImageRecipeBlockDeviceMappingEbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeBlockDeviceMappingEb)(nil)).Elem()
}

func (i GetImageRecipeBlockDeviceMappingEbArgs) ToGetImageRecipeBlockDeviceMappingEbOutput() GetImageRecipeBlockDeviceMappingEbOutput {
	return i.ToGetImageRecipeBlockDeviceMappingEbOutputWithContext(context.Background())
}

func (i GetImageRecipeBlockDeviceMappingEbArgs) ToGetImageRecipeBlockDeviceMappingEbOutputWithContext(ctx context.Context) GetImageRecipeBlockDeviceMappingEbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageRecipeBlockDeviceMappingEbOutput)
}

func (i *GetImageRecipeBlockDeviceMappingEbArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageRecipeBlockDeviceMappingEbArgs] {
	return pulumix.Val(i)
}

type GetImageRecipeBlockDeviceMappingEbOutput struct{ *pulumi.OutputState }

func (GetImageRecipeBlockDeviceMappingEbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeBlockDeviceMappingEb)(nil)).Elem()
}

func (o GetImageRecipeBlockDeviceMappingEbOutput) ToGetImageRecipeBlockDeviceMappingEbOutput() GetImageRecipeBlockDeviceMappingEbOutput {
	return o
}

func (o GetImageRecipeBlockDeviceMappingEbOutput) ToGetImageRecipeBlockDeviceMappingEbOutputWithContext(ctx context.Context) GetImageRecipeBlockDeviceMappingEbOutput {
	return o
}

func (o GetImageRecipeBlockDeviceMappingEbOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageRecipeBlockDeviceMappingEb] {
	return pulumix.Output[GetImageRecipeBlockDeviceMappingEb]{
		OutputState: o.OutputState,
	}
}

// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
func (o GetImageRecipeBlockDeviceMappingEbOutput) DeleteOnTermination() pulumix.Output[bool] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) bool { return v.DeleteOnTermination })
}

// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
func (o GetImageRecipeBlockDeviceMappingEbOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) bool { return v.Encrypted })
}

// Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
func (o GetImageRecipeBlockDeviceMappingEbOutput) Iops() pulumix.Output[int] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) int { return v.Iops })
}

// ARN of the Key Management Service (KMS) Key for encryption.
func (o GetImageRecipeBlockDeviceMappingEbOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) string { return v.KmsKeyId })
}

// Identifier of the EC2 Volume Snapshot.
func (o GetImageRecipeBlockDeviceMappingEbOutput) SnapshotId() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) string { return v.SnapshotId })
}

// For GP3 volumes only. The throughput in MiB/s that the volume supports.
func (o GetImageRecipeBlockDeviceMappingEbOutput) Throughput() pulumix.Output[int] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) int { return v.Throughput })
}

// Size of the volume, in GiB.
func (o GetImageRecipeBlockDeviceMappingEbOutput) VolumeSize() pulumix.Output[int] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) int { return v.VolumeSize })
}

// Type of the volume. For example, `gp2` or `io2`.
func (o GetImageRecipeBlockDeviceMappingEbOutput) VolumeType() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeBlockDeviceMappingEb](o, func(v GetImageRecipeBlockDeviceMappingEb) string { return v.VolumeType })
}

type GetImageRecipeComponent struct {
	// ARN of the Image Builder Component.
	ComponentArn string `pulumi:"componentArn"`
	// Set of parameters that are used to configure the component.
	Parameters []GetImageRecipeComponentParameter `pulumi:"parameters"`
}

type GetImageRecipeComponentArgs struct {
	// ARN of the Image Builder Component.
	ComponentArn pulumix.Input[string] `pulumi:"componentArn"`
	// Set of parameters that are used to configure the component.
	Parameters pulumix.Input[[]*GetImageRecipeComponentParameterArgs] `pulumi:"parameters"`
}

func (GetImageRecipeComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeComponent)(nil)).Elem()
}

func (i GetImageRecipeComponentArgs) ToGetImageRecipeComponentOutput() GetImageRecipeComponentOutput {
	return i.ToGetImageRecipeComponentOutputWithContext(context.Background())
}

func (i GetImageRecipeComponentArgs) ToGetImageRecipeComponentOutputWithContext(ctx context.Context) GetImageRecipeComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageRecipeComponentOutput)
}

func (i *GetImageRecipeComponentArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageRecipeComponentArgs] {
	return pulumix.Val(i)
}

type GetImageRecipeComponentOutput struct{ *pulumi.OutputState }

func (GetImageRecipeComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeComponent)(nil)).Elem()
}

func (o GetImageRecipeComponentOutput) ToGetImageRecipeComponentOutput() GetImageRecipeComponentOutput {
	return o
}

func (o GetImageRecipeComponentOutput) ToGetImageRecipeComponentOutputWithContext(ctx context.Context) GetImageRecipeComponentOutput {
	return o
}

func (o GetImageRecipeComponentOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageRecipeComponent] {
	return pulumix.Output[GetImageRecipeComponent]{
		OutputState: o.OutputState,
	}
}

// ARN of the Image Builder Component.
func (o GetImageRecipeComponentOutput) ComponentArn() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeComponent](o, func(v GetImageRecipeComponent) string { return v.ComponentArn })
}

// Set of parameters that are used to configure the component.
func (o GetImageRecipeComponentOutput) Parameters() pulumix.GArrayOutput[GetImageRecipeComponentParameter, GetImageRecipeComponentParameterOutput] {
	value := pulumix.Apply[GetImageRecipeComponent](o, func(v GetImageRecipeComponent) []GetImageRecipeComponentParameter { return v.Parameters })
	return pulumix.GArrayOutput[GetImageRecipeComponentParameter, GetImageRecipeComponentParameterOutput]{OutputState: value.OutputState}
}

type GetImageRecipeComponentParameter struct {
	// Name of the image recipe.
	Name string `pulumi:"name"`
	// Value of the component parameter.
	Value string `pulumi:"value"`
}

type GetImageRecipeComponentParameterArgs struct {
	// Name of the image recipe.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value of the component parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetImageRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeComponentParameter)(nil)).Elem()
}

func (i GetImageRecipeComponentParameterArgs) ToGetImageRecipeComponentParameterOutput() GetImageRecipeComponentParameterOutput {
	return i.ToGetImageRecipeComponentParameterOutputWithContext(context.Background())
}

func (i GetImageRecipeComponentParameterArgs) ToGetImageRecipeComponentParameterOutputWithContext(ctx context.Context) GetImageRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageRecipeComponentParameterOutput)
}

func (i *GetImageRecipeComponentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageRecipeComponentParameterArgs] {
	return pulumix.Val(i)
}

type GetImageRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (GetImageRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipeComponentParameter)(nil)).Elem()
}

func (o GetImageRecipeComponentParameterOutput) ToGetImageRecipeComponentParameterOutput() GetImageRecipeComponentParameterOutput {
	return o
}

func (o GetImageRecipeComponentParameterOutput) ToGetImageRecipeComponentParameterOutputWithContext(ctx context.Context) GetImageRecipeComponentParameterOutput {
	return o
}

func (o GetImageRecipeComponentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageRecipeComponentParameter] {
	return pulumix.Output[GetImageRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

// Name of the image recipe.
func (o GetImageRecipeComponentParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeComponentParameter](o, func(v GetImageRecipeComponentParameter) string { return v.Name })
}

// Value of the component parameter.
func (o GetImageRecipeComponentParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipeComponentParameter](o, func(v GetImageRecipeComponentParameter) string { return v.Value })
}

type GetImageRecipesFilter struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListImageRecipes API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListImageRecipes.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetImageRecipesFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListImageRecipes API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListImageRecipes.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetImageRecipesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipesFilter)(nil)).Elem()
}

func (i GetImageRecipesFilterArgs) ToGetImageRecipesFilterOutput() GetImageRecipesFilterOutput {
	return i.ToGetImageRecipesFilterOutputWithContext(context.Background())
}

func (i GetImageRecipesFilterArgs) ToGetImageRecipesFilterOutputWithContext(ctx context.Context) GetImageRecipesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageRecipesFilterOutput)
}

func (i *GetImageRecipesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetImageRecipesFilterArgs] {
	return pulumix.Val(i)
}

type GetImageRecipesFilterOutput struct{ *pulumi.OutputState }

func (GetImageRecipesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageRecipesFilter)(nil)).Elem()
}

func (o GetImageRecipesFilterOutput) ToGetImageRecipesFilterOutput() GetImageRecipesFilterOutput {
	return o
}

func (o GetImageRecipesFilterOutput) ToGetImageRecipesFilterOutputWithContext(ctx context.Context) GetImageRecipesFilterOutput {
	return o
}

func (o GetImageRecipesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetImageRecipesFilter] {
	return pulumix.Output[GetImageRecipesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Image Builder ListImageRecipes API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListImageRecipes.html).
func (o GetImageRecipesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetImageRecipesFilter](o, func(v GetImageRecipesFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetImageRecipesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetImageRecipesFilter](o, func(v GetImageRecipesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetInfrastructureConfigurationInstanceMetadataOption struct {
	// Number of hops that an instance can traverse to reach its destonation.
	HttpPutResponseHopLimit int `pulumi:"httpPutResponseHopLimit"`
	// Whether a signed token is required for instance metadata retrieval requests.
	HttpTokens string `pulumi:"httpTokens"`
}

type GetInfrastructureConfigurationInstanceMetadataOptionArgs struct {
	// Number of hops that an instance can traverse to reach its destonation.
	HttpPutResponseHopLimit pulumix.Input[int] `pulumi:"httpPutResponseHopLimit"`
	// Whether a signed token is required for instance metadata retrieval requests.
	HttpTokens pulumix.Input[string] `pulumi:"httpTokens"`
}

func (GetInfrastructureConfigurationInstanceMetadataOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationInstanceMetadataOption)(nil)).Elem()
}

func (i GetInfrastructureConfigurationInstanceMetadataOptionArgs) ToGetInfrastructureConfigurationInstanceMetadataOptionOutput() GetInfrastructureConfigurationInstanceMetadataOptionOutput {
	return i.ToGetInfrastructureConfigurationInstanceMetadataOptionOutputWithContext(context.Background())
}

func (i GetInfrastructureConfigurationInstanceMetadataOptionArgs) ToGetInfrastructureConfigurationInstanceMetadataOptionOutputWithContext(ctx context.Context) GetInfrastructureConfigurationInstanceMetadataOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInfrastructureConfigurationInstanceMetadataOptionOutput)
}

func (i *GetInfrastructureConfigurationInstanceMetadataOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInfrastructureConfigurationInstanceMetadataOptionArgs] {
	return pulumix.Val(i)
}

type GetInfrastructureConfigurationInstanceMetadataOptionOutput struct{ *pulumi.OutputState }

func (GetInfrastructureConfigurationInstanceMetadataOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationInstanceMetadataOption)(nil)).Elem()
}

func (o GetInfrastructureConfigurationInstanceMetadataOptionOutput) ToGetInfrastructureConfigurationInstanceMetadataOptionOutput() GetInfrastructureConfigurationInstanceMetadataOptionOutput {
	return o
}

func (o GetInfrastructureConfigurationInstanceMetadataOptionOutput) ToGetInfrastructureConfigurationInstanceMetadataOptionOutputWithContext(ctx context.Context) GetInfrastructureConfigurationInstanceMetadataOptionOutput {
	return o
}

func (o GetInfrastructureConfigurationInstanceMetadataOptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetInfrastructureConfigurationInstanceMetadataOption] {
	return pulumix.Output[GetInfrastructureConfigurationInstanceMetadataOption]{
		OutputState: o.OutputState,
	}
}

// Number of hops that an instance can traverse to reach its destonation.
func (o GetInfrastructureConfigurationInstanceMetadataOptionOutput) HttpPutResponseHopLimit() pulumix.Output[int] {
	return pulumix.Apply[GetInfrastructureConfigurationInstanceMetadataOption](o, func(v GetInfrastructureConfigurationInstanceMetadataOption) int { return v.HttpPutResponseHopLimit })
}

// Whether a signed token is required for instance metadata retrieval requests.
func (o GetInfrastructureConfigurationInstanceMetadataOptionOutput) HttpTokens() pulumix.Output[string] {
	return pulumix.Apply[GetInfrastructureConfigurationInstanceMetadataOption](o, func(v GetInfrastructureConfigurationInstanceMetadataOption) string { return v.HttpTokens })
}

type GetInfrastructureConfigurationLogging struct {
	// Nested list of S3 logs settings.
	S3Logs []GetInfrastructureConfigurationLoggingS3Log `pulumi:"s3Logs"`
}

type GetInfrastructureConfigurationLoggingArgs struct {
	// Nested list of S3 logs settings.
	S3Logs pulumix.Input[[]*GetInfrastructureConfigurationLoggingS3LogArgs] `pulumi:"s3Logs"`
}

func (GetInfrastructureConfigurationLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationLogging)(nil)).Elem()
}

func (i GetInfrastructureConfigurationLoggingArgs) ToGetInfrastructureConfigurationLoggingOutput() GetInfrastructureConfigurationLoggingOutput {
	return i.ToGetInfrastructureConfigurationLoggingOutputWithContext(context.Background())
}

func (i GetInfrastructureConfigurationLoggingArgs) ToGetInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) GetInfrastructureConfigurationLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInfrastructureConfigurationLoggingOutput)
}

func (i *GetInfrastructureConfigurationLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInfrastructureConfigurationLoggingArgs] {
	return pulumix.Val(i)
}

type GetInfrastructureConfigurationLoggingOutput struct{ *pulumi.OutputState }

func (GetInfrastructureConfigurationLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationLogging)(nil)).Elem()
}

func (o GetInfrastructureConfigurationLoggingOutput) ToGetInfrastructureConfigurationLoggingOutput() GetInfrastructureConfigurationLoggingOutput {
	return o
}

func (o GetInfrastructureConfigurationLoggingOutput) ToGetInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) GetInfrastructureConfigurationLoggingOutput {
	return o
}

func (o GetInfrastructureConfigurationLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[GetInfrastructureConfigurationLogging] {
	return pulumix.Output[GetInfrastructureConfigurationLogging]{
		OutputState: o.OutputState,
	}
}

// Nested list of S3 logs settings.
func (o GetInfrastructureConfigurationLoggingOutput) S3Logs() pulumix.GArrayOutput[GetInfrastructureConfigurationLoggingS3Log, GetInfrastructureConfigurationLoggingS3LogOutput] {
	value := pulumix.Apply[GetInfrastructureConfigurationLogging](o, func(v GetInfrastructureConfigurationLogging) []GetInfrastructureConfigurationLoggingS3Log {
		return v.S3Logs
	})
	return pulumix.GArrayOutput[GetInfrastructureConfigurationLoggingS3Log, GetInfrastructureConfigurationLoggingS3LogOutput]{OutputState: value.OutputState}
}

type GetInfrastructureConfigurationLoggingS3Log struct {
	// Name of the S3 Bucket for logging.
	S3BucketName string `pulumi:"s3BucketName"`
	// Key prefix for S3 Bucket logging.
	S3KeyPrefix string `pulumi:"s3KeyPrefix"`
}

type GetInfrastructureConfigurationLoggingS3LogArgs struct {
	// Name of the S3 Bucket for logging.
	S3BucketName pulumix.Input[string] `pulumi:"s3BucketName"`
	// Key prefix for S3 Bucket logging.
	S3KeyPrefix pulumix.Input[string] `pulumi:"s3KeyPrefix"`
}

func (GetInfrastructureConfigurationLoggingS3LogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationLoggingS3Log)(nil)).Elem()
}

func (i GetInfrastructureConfigurationLoggingS3LogArgs) ToGetInfrastructureConfigurationLoggingS3LogOutput() GetInfrastructureConfigurationLoggingS3LogOutput {
	return i.ToGetInfrastructureConfigurationLoggingS3LogOutputWithContext(context.Background())
}

func (i GetInfrastructureConfigurationLoggingS3LogArgs) ToGetInfrastructureConfigurationLoggingS3LogOutputWithContext(ctx context.Context) GetInfrastructureConfigurationLoggingS3LogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInfrastructureConfigurationLoggingS3LogOutput)
}

func (i *GetInfrastructureConfigurationLoggingS3LogArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInfrastructureConfigurationLoggingS3LogArgs] {
	return pulumix.Val(i)
}

type GetInfrastructureConfigurationLoggingS3LogOutput struct{ *pulumi.OutputState }

func (GetInfrastructureConfigurationLoggingS3LogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationLoggingS3Log)(nil)).Elem()
}

func (o GetInfrastructureConfigurationLoggingS3LogOutput) ToGetInfrastructureConfigurationLoggingS3LogOutput() GetInfrastructureConfigurationLoggingS3LogOutput {
	return o
}

func (o GetInfrastructureConfigurationLoggingS3LogOutput) ToGetInfrastructureConfigurationLoggingS3LogOutputWithContext(ctx context.Context) GetInfrastructureConfigurationLoggingS3LogOutput {
	return o
}

func (o GetInfrastructureConfigurationLoggingS3LogOutput) ToOutput(ctx context.Context) pulumix.Output[GetInfrastructureConfigurationLoggingS3Log] {
	return pulumix.Output[GetInfrastructureConfigurationLoggingS3Log]{
		OutputState: o.OutputState,
	}
}

// Name of the S3 Bucket for logging.
func (o GetInfrastructureConfigurationLoggingS3LogOutput) S3BucketName() pulumix.Output[string] {
	return pulumix.Apply[GetInfrastructureConfigurationLoggingS3Log](o, func(v GetInfrastructureConfigurationLoggingS3Log) string { return v.S3BucketName })
}

// Key prefix for S3 Bucket logging.
func (o GetInfrastructureConfigurationLoggingS3LogOutput) S3KeyPrefix() pulumix.Output[string] {
	return pulumix.Apply[GetInfrastructureConfigurationLoggingS3Log](o, func(v GetInfrastructureConfigurationLoggingS3Log) string { return v.S3KeyPrefix })
}

type GetInfrastructureConfigurationsFilter struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListInfrastructureConfigurations API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListInfrastructureConfigurations.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetInfrastructureConfigurationsFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Image Builder ListInfrastructureConfigurations API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListInfrastructureConfigurations.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetInfrastructureConfigurationsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationsFilter)(nil)).Elem()
}

func (i GetInfrastructureConfigurationsFilterArgs) ToGetInfrastructureConfigurationsFilterOutput() GetInfrastructureConfigurationsFilterOutput {
	return i.ToGetInfrastructureConfigurationsFilterOutputWithContext(context.Background())
}

func (i GetInfrastructureConfigurationsFilterArgs) ToGetInfrastructureConfigurationsFilterOutputWithContext(ctx context.Context) GetInfrastructureConfigurationsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInfrastructureConfigurationsFilterOutput)
}

func (i *GetInfrastructureConfigurationsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInfrastructureConfigurationsFilterArgs] {
	return pulumix.Val(i)
}

type GetInfrastructureConfigurationsFilterOutput struct{ *pulumi.OutputState }

func (GetInfrastructureConfigurationsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInfrastructureConfigurationsFilter)(nil)).Elem()
}

func (o GetInfrastructureConfigurationsFilterOutput) ToGetInfrastructureConfigurationsFilterOutput() GetInfrastructureConfigurationsFilterOutput {
	return o
}

func (o GetInfrastructureConfigurationsFilterOutput) ToGetInfrastructureConfigurationsFilterOutputWithContext(ctx context.Context) GetInfrastructureConfigurationsFilterOutput {
	return o
}

func (o GetInfrastructureConfigurationsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetInfrastructureConfigurationsFilter] {
	return pulumix.Output[GetInfrastructureConfigurationsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Image Builder ListInfrastructureConfigurations API Reference](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_ListInfrastructureConfigurations.html).
func (o GetInfrastructureConfigurationsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetInfrastructureConfigurationsFilter](o, func(v GetInfrastructureConfigurationsFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetInfrastructureConfigurationsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetInfrastructureConfigurationsFilter](o, func(v GetInfrastructureConfigurationsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ContainerRecipeComponentOutput{})
	pulumi.RegisterOutputType(ContainerRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationBlockDeviceMappingEbsOutput{})
	pulumi.RegisterOutputType(ContainerRecipeTargetRepositoryOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionAmiDistributionConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionContainerDistributionConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionFastLaunchConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionLaunchTemplateConfigurationOutput{})
	pulumi.RegisterOutputType(ImageImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(ImageOutputResourceOutput{})
	pulumi.RegisterOutputType(ImageOutputResourceAmiOutput{})
	pulumi.RegisterOutputType(ImageOutputResourceContainerOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageScanningConfigurationEcrConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineScheduleOutput{})
	pulumi.RegisterOutputType(ImageRecipeBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(ImageRecipeBlockDeviceMappingEbsOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(ImageRecipeSystemsManagerAgentOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationInstanceMetadataOptionsOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationLoggingOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationLoggingS3LogsOutput{})
	pulumi.RegisterOutputType(GetComponentsFilterOutput{})
	pulumi.RegisterOutputType(GetContainerRecipeComponentOutput{})
	pulumi.RegisterOutputType(GetContainerRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(GetContainerRecipeInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(GetContainerRecipeInstanceConfigurationBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(GetContainerRecipeInstanceConfigurationBlockDeviceMappingEbOutput{})
	pulumi.RegisterOutputType(GetContainerRecipeTargetRepositoryOutput{})
	pulumi.RegisterOutputType(GetContainerRecipesFilterOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionAmiDistributionConfigurationOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermissionOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionContainerDistributionConfigurationOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionContainerDistributionConfigurationTargetRepositoryOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionFastLaunchConfigurationOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionFastLaunchConfigurationLaunchTemplateOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionFastLaunchConfigurationSnapshotConfigurationOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationDistributionLaunchTemplateConfigurationOutput{})
	pulumi.RegisterOutputType(GetDistributionConfigurationsFilterOutput{})
	pulumi.RegisterOutputType(GetImageImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(GetImageOutputResourceOutput{})
	pulumi.RegisterOutputType(GetImageOutputResourceAmiOutput{})
	pulumi.RegisterOutputType(GetImageOutputResourceContainerOutput{})
	pulumi.RegisterOutputType(GetImagePipelineImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(GetImagePipelineImageScanningConfigurationEcrConfigurationOutput{})
	pulumi.RegisterOutputType(GetImagePipelineImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(GetImagePipelineScheduleOutput{})
	pulumi.RegisterOutputType(GetImagePipelinesFilterOutput{})
	pulumi.RegisterOutputType(GetImageRecipeBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(GetImageRecipeBlockDeviceMappingEbOutput{})
	pulumi.RegisterOutputType(GetImageRecipeComponentOutput{})
	pulumi.RegisterOutputType(GetImageRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(GetImageRecipesFilterOutput{})
	pulumi.RegisterOutputType(GetInfrastructureConfigurationInstanceMetadataOptionOutput{})
	pulumi.RegisterOutputType(GetInfrastructureConfigurationLoggingOutput{})
	pulumi.RegisterOutputType(GetInfrastructureConfigurationLoggingS3LogOutput{})
	pulumi.RegisterOutputType(GetInfrastructureConfigurationsFilterOutput{})
}
