// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides redshift serverless temporary credentials for a workgroup.
func GetCredentials(ctx *pulumi.Context, args *GetCredentialsArgs, opts ...pulumi.InvokeOption) (*GetCredentialsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCredentialsResult
	err := ctx.Invoke("aws:redshiftserverless/getCredentials:getCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCredentials.
type GetCredentialsArgs struct {
	// The name of the database to get temporary authorization to log on to.
	DbName *string `pulumi:"dbName"`
	// The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.
	DurationSeconds *int `pulumi:"durationSeconds"`
	// The name of the workgroup associated with the database.
	WorkgroupName string `pulumi:"workgroupName"`
}

// A collection of values returned by getCredentials.
type GetCredentialsResult struct {
	DbName *string `pulumi:"dbName"`
	// Temporary password that authorizes the user name returned by `dbUser` to log on to the database `dbName`.
	DbPassword string `pulumi:"dbPassword"`
	// A database user name that is authorized to log on to the database `dbName` using the password `dbPassword` . If the specified `dbUser` exists in the database, the new user name has the same database privileges as the user named in `dbUser` . By default, the user is added to PUBLIC. the user doesn't exist in the database.
	DbUser          string `pulumi:"dbUser"`
	DurationSeconds *int   `pulumi:"durationSeconds"`
	// Date and time the password in `dbPassword` expires.
	Expiration string `pulumi:"expiration"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	WorkgroupName string `pulumi:"workgroupName"`
}

func GetCredentialsOutput(ctx *pulumi.Context, args GetCredentialsOutputArgs, opts ...pulumi.InvokeOption) GetCredentialsResultOutput {
	outputResult := pulumix.ApplyErr[*GetCredentialsArgs](args.ToOutput(), func(plainArgs *GetCredentialsArgs) (*GetCredentialsResult, error) {
		return GetCredentials(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetCredentialsResultOutput, *GetCredentialsResult](outputResult)
}

// A collection of arguments for invoking getCredentials.
type GetCredentialsOutputArgs struct {
	// The name of the database to get temporary authorization to log on to.
	DbName pulumix.Input[*string] `pulumi:"dbName"`
	// The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.
	DurationSeconds pulumix.Input[*int] `pulumi:"durationSeconds"`
	// The name of the workgroup associated with the database.
	WorkgroupName pulumix.Input[string] `pulumi:"workgroupName"`
}

func (args GetCredentialsOutputArgs) ToOutput() pulumix.Output[*GetCredentialsArgs] {
	allArgs := pulumix.All(
		args.DbName.ToOutput(context.Background()).AsAny(),
		args.DurationSeconds.ToOutput(context.Background()).AsAny(),
		args.WorkgroupName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetCredentialsArgs {
		return &GetCredentialsArgs{
			DbName:          resolvedArgs[0].(*string),
			DurationSeconds: resolvedArgs[1].(*int),
			WorkgroupName:   resolvedArgs[2].(string),
		}
	})
}

type GetCredentialsResultOutput struct{ *pulumi.OutputState }

func (GetCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCredentialsResult)(nil)).Elem()
}

func (o GetCredentialsResultOutput) ToOutput(context.Context) pulumix.Output[*GetCredentialsResult] {
	return pulumix.Output[*GetCredentialsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetCredentialsResultOutput) DbName() pulumix.Output[*string] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) *string { return v.DbName })
}

func (o GetCredentialsResultOutput) DbPassword() pulumix.Output[string] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) string { return v.DbPassword })
}

func (o GetCredentialsResultOutput) DbUser() pulumix.Output[string] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) string { return v.DbUser })
}

func (o GetCredentialsResultOutput) DurationSeconds() pulumix.Output[*int] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) *int { return v.DurationSeconds })
}

func (o GetCredentialsResultOutput) Expiration() pulumix.Output[string] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) string { return v.Expiration })
}

func (o GetCredentialsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) string { return v.Id })
}

func (o GetCredentialsResultOutput) WorkgroupName() pulumix.Output[string] {
	return pulumix.Apply[*GetCredentialsResult](o, func(v *GetCredentialsResult) string { return v.WorkgroupName })
}
