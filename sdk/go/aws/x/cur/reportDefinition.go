// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cur

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Cost and Usage Report Definitions.
//
// > *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
type ReportDefinition struct {
	pulumi.CustomResourceState

	// A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and reportVersioning must be `OVERWRITE_REPORT`.
	AdditionalArtifacts pulumix.ArrayOutput[string] `pulumi:"additionalArtifacts"`
	// A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
	AdditionalSchemaElements pulumix.ArrayOutput[string] `pulumi:"additionalSchemaElements"`
	// The Amazon Resource Name (ARN) specifying the cur report.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
	Compression pulumix.Output[string] `pulumi:"compression"`
	// Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
	Format pulumix.Output[string] `pulumi:"format"`
	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	RefreshClosedReports pulumix.Output[*bool] `pulumi:"refreshClosedReports"`
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName pulumix.Output[string] `pulumi:"reportName"`
	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
	ReportVersioning pulumix.Output[*string] `pulumi:"reportVersioning"`
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket pulumix.Output[string] `pulumi:"s3Bucket"`
	// Report path prefix. Limited to 256 characters.
	S3Prefix pulumix.Output[*string] `pulumi:"s3Prefix"`
	// Region of the existing S3 bucket to hold generated reports.
	S3Region pulumix.Output[string] `pulumi:"s3Region"`
	// The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
	TimeUnit pulumix.Output[string] `pulumi:"timeUnit"`
}

// NewReportDefinition registers a new resource with the given unique name, arguments, and options.
func NewReportDefinition(ctx *pulumi.Context,
	name string, args *ReportDefinitionArgs, opts ...pulumi.ResourceOption) (*ReportDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdditionalSchemaElements == nil {
		return nil, errors.New("invalid value for required argument 'AdditionalSchemaElements'")
	}
	if args.Compression == nil {
		return nil, errors.New("invalid value for required argument 'Compression'")
	}
	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.ReportName == nil {
		return nil, errors.New("invalid value for required argument 'ReportName'")
	}
	if args.S3Bucket == nil {
		return nil, errors.New("invalid value for required argument 'S3Bucket'")
	}
	if args.S3Region == nil {
		return nil, errors.New("invalid value for required argument 'S3Region'")
	}
	if args.TimeUnit == nil {
		return nil, errors.New("invalid value for required argument 'TimeUnit'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReportDefinition
	err := ctx.RegisterResource("aws:cur/reportDefinition:ReportDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportDefinition gets an existing ReportDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportDefinitionState, opts ...pulumi.ResourceOption) (*ReportDefinition, error) {
	var resource ReportDefinition
	err := ctx.ReadResource("aws:cur/reportDefinition:ReportDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportDefinition resources.
type reportDefinitionState struct {
	// A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and reportVersioning must be `OVERWRITE_REPORT`.
	AdditionalArtifacts []string `pulumi:"additionalArtifacts"`
	// A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
	AdditionalSchemaElements []string `pulumi:"additionalSchemaElements"`
	// The Amazon Resource Name (ARN) specifying the cur report.
	Arn *string `pulumi:"arn"`
	// Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
	Compression *string `pulumi:"compression"`
	// Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
	Format *string `pulumi:"format"`
	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	RefreshClosedReports *bool `pulumi:"refreshClosedReports"`
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName *string `pulumi:"reportName"`
	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
	ReportVersioning *string `pulumi:"reportVersioning"`
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket *string `pulumi:"s3Bucket"`
	// Report path prefix. Limited to 256 characters.
	S3Prefix *string `pulumi:"s3Prefix"`
	// Region of the existing S3 bucket to hold generated reports.
	S3Region *string `pulumi:"s3Region"`
	// The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
	TimeUnit *string `pulumi:"timeUnit"`
}

type ReportDefinitionState struct {
	// A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and reportVersioning must be `OVERWRITE_REPORT`.
	AdditionalArtifacts pulumix.Input[[]string]
	// A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
	AdditionalSchemaElements pulumix.Input[[]string]
	// The Amazon Resource Name (ARN) specifying the cur report.
	Arn pulumix.Input[*string]
	// Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
	Compression pulumix.Input[*string]
	// Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
	Format pulumix.Input[*string]
	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	RefreshClosedReports pulumix.Input[*bool]
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName pulumix.Input[*string]
	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
	ReportVersioning pulumix.Input[*string]
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket pulumix.Input[*string]
	// Report path prefix. Limited to 256 characters.
	S3Prefix pulumix.Input[*string]
	// Region of the existing S3 bucket to hold generated reports.
	S3Region pulumix.Input[*string]
	// The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
	TimeUnit pulumix.Input[*string]
}

func (ReportDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDefinitionState)(nil)).Elem()
}

type reportDefinitionArgs struct {
	// A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and reportVersioning must be `OVERWRITE_REPORT`.
	AdditionalArtifacts []string `pulumi:"additionalArtifacts"`
	// A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
	AdditionalSchemaElements []string `pulumi:"additionalSchemaElements"`
	// Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
	Compression string `pulumi:"compression"`
	// Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
	Format string `pulumi:"format"`
	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	RefreshClosedReports *bool `pulumi:"refreshClosedReports"`
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName string `pulumi:"reportName"`
	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
	ReportVersioning *string `pulumi:"reportVersioning"`
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket string `pulumi:"s3Bucket"`
	// Report path prefix. Limited to 256 characters.
	S3Prefix *string `pulumi:"s3Prefix"`
	// Region of the existing S3 bucket to hold generated reports.
	S3Region string `pulumi:"s3Region"`
	// The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
	TimeUnit string `pulumi:"timeUnit"`
}

// The set of arguments for constructing a ReportDefinition resource.
type ReportDefinitionArgs struct {
	// A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and reportVersioning must be `OVERWRITE_REPORT`.
	AdditionalArtifacts pulumix.Input[[]string]
	// A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
	AdditionalSchemaElements pulumix.Input[[]string]
	// Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
	Compression pulumix.Input[string]
	// Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
	Format pulumix.Input[string]
	// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
	RefreshClosedReports pulumix.Input[*bool]
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName pulumix.Input[string]
	// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
	ReportVersioning pulumix.Input[*string]
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket pulumix.Input[string]
	// Report path prefix. Limited to 256 characters.
	S3Prefix pulumix.Input[*string]
	// Region of the existing S3 bucket to hold generated reports.
	S3Region pulumix.Input[string]
	// The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
	TimeUnit pulumix.Input[string]
}

func (ReportDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportDefinitionArgs)(nil)).Elem()
}

type ReportDefinitionOutput struct{ *pulumi.OutputState }

func (ReportDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinition)(nil)).Elem()
}

func (o ReportDefinitionOutput) ToReportDefinitionOutput() ReportDefinitionOutput {
	return o
}

func (o ReportDefinitionOutput) ToReportDefinitionOutputWithContext(ctx context.Context) ReportDefinitionOutput {
	return o
}

func (o ReportDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[ReportDefinition] {
	return pulumix.Output[ReportDefinition]{
		OutputState: o.OutputState,
	}
}

// A list of additional artifacts. Valid values are: `REDSHIFT`, `QUICKSIGHT`, `ATHENA`. When ATHENA exists within additional_artifacts, no other artifact type can be declared and reportVersioning must be `OVERWRITE_REPORT`.
func (o ReportDefinitionOutput) AdditionalArtifacts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.ArrayOutput[string] { return v.AdditionalArtifacts })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A list of schema elements. Valid values are: `RESOURCES`, `SPLIT_COST_ALLOCATION_DATA`.
func (o ReportDefinitionOutput) AdditionalSchemaElements() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.ArrayOutput[string] { return v.AdditionalSchemaElements })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) specifying the cur report.
func (o ReportDefinitionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Compression format for report. Valid values are: `GZIP`, `ZIP`, `Parquet`. If `Parquet` is used, then format must also be `Parquet`.
func (o ReportDefinitionOutput) Compression() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.Compression })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Format for report. Valid values are: `textORcsv`, `Parquet`. If `Parquet` is used, then Compression must also be `Parquet`.
func (o ReportDefinitionOutput) Format() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.Format })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
func (o ReportDefinitionOutput) RefreshClosedReports() pulumix.Output[*bool] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[*bool] { return v.RefreshClosedReports })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
func (o ReportDefinitionOutput) ReportName() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.ReportName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: `CREATE_NEW_REPORT` and `OVERWRITE_REPORT`.
func (o ReportDefinitionOutput) ReportVersioning() pulumix.Output[*string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[*string] { return v.ReportVersioning })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the existing S3 bucket to hold generated reports.
func (o ReportDefinitionOutput) S3Bucket() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.S3Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Report path prefix. Limited to 256 characters.
func (o ReportDefinitionOutput) S3Prefix() pulumix.Output[*string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[*string] { return v.S3Prefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Region of the existing S3 bucket to hold generated reports.
func (o ReportDefinitionOutput) S3Region() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.S3Region })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The frequency on which report data are measured and displayed.  Valid values are: `DAILY`, `HOURLY`, `MONTHLY`.
func (o ReportDefinitionOutput) TimeUnit() pulumix.Output[string] {
	value := pulumix.Apply[ReportDefinition](o, func(v ReportDefinition) pulumix.Output[string] { return v.TimeUnit })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ReportDefinitionOutput{})
}
