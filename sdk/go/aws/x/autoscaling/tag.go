// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an individual Autoscaling Group (ASG) tag. This resource should only be used in cases where ASGs are created outside the provider (e.g., ASGs implicitly created by EKS Node Groups).
//
// > **NOTE:** This tagging resource should not be combined with the resource for managing the parent resource. For example, using `autoscaling.Group` and `autoscaling.Tag` to manage tags of the same ASG will cause a perpetual difference where the `autoscaling.Group` resource will try to remove the tag being added by the `autoscaling.Tag` resource.
//
// > **NOTE:** This tagging resource does not use the provider `ignoreTags` configuration.
type Tag struct {
	pulumi.CustomResourceState

	// Name of the Autoscaling Group to apply the tag to.
	AutoscalingGroupName pulumix.Output[string] `pulumi:"autoscalingGroupName"`
	// Tag to create. The `tag` block is documented below.
	Tag pulumix.GPtrOutput[TagTag, TagTagOutput] `pulumi:"tag"`
}

// NewTag registers a new resource with the given unique name, arguments, and options.
func NewTag(ctx *pulumi.Context,
	name string, args *TagArgs, opts ...pulumi.ResourceOption) (*Tag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	if args.Tag == nil {
		return nil, errors.New("invalid value for required argument 'Tag'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tag
	err := ctx.RegisterResource("aws:autoscaling/tag:Tag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTag gets an existing Tag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagState, opts ...pulumi.ResourceOption) (*Tag, error) {
	var resource Tag
	err := ctx.ReadResource("aws:autoscaling/tag:Tag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tag resources.
type tagState struct {
	// Name of the Autoscaling Group to apply the tag to.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// Tag to create. The `tag` block is documented below.
	Tag *TagTag `pulumi:"tag"`
}

type TagState struct {
	// Name of the Autoscaling Group to apply the tag to.
	AutoscalingGroupName pulumix.Input[*string]
	// Tag to create. The `tag` block is documented below.
	Tag pulumix.Input[*TagTagArgs]
}

func (TagState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagState)(nil)).Elem()
}

type tagArgs struct {
	// Name of the Autoscaling Group to apply the tag to.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// Tag to create. The `tag` block is documented below.
	Tag TagTag `pulumi:"tag"`
}

// The set of arguments for constructing a Tag resource.
type TagArgs struct {
	// Name of the Autoscaling Group to apply the tag to.
	AutoscalingGroupName pulumix.Input[string]
	// Tag to create. The `tag` block is documented below.
	Tag pulumix.Input[*TagTagArgs]
}

func (TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagArgs)(nil)).Elem()
}

type TagOutput struct{ *pulumi.OutputState }

func (TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tag)(nil)).Elem()
}

func (o TagOutput) ToTagOutput() TagOutput {
	return o
}

func (o TagOutput) ToTagOutputWithContext(ctx context.Context) TagOutput {
	return o
}

func (o TagOutput) ToOutput(ctx context.Context) pulumix.Output[Tag] {
	return pulumix.Output[Tag]{
		OutputState: o.OutputState,
	}
}

// Name of the Autoscaling Group to apply the tag to.
func (o TagOutput) AutoscalingGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.Output[string] { return v.AutoscalingGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tag to create. The `tag` block is documented below.
func (o TagOutput) Tag() pulumix.GPtrOutput[TagTag, TagTagOutput] {
	value := pulumix.Apply[Tag](o, func(v Tag) pulumix.GPtrOutput[TagTag, TagTagOutput] { return v.Tag })
	unwrapped := pulumix.Flatten[*TagTag, pulumix.GPtrOutput[TagTag, TagTagOutput]](value)
	return pulumix.GPtrOutput[TagTag, TagTagOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TagOutput{})
}
