// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Location Service Place Index.
type PlaceIndex struct {
	pulumi.CustomResourceState

	// The timestamp for when the place index resource was created in ISO 8601 format.
	CreateTime pulumix.Output[string] `pulumi:"createTime"`
	// Specifies the geospatial data provider for the new place index.
	DataSource pulumix.Output[string] `pulumi:"dataSource"`
	// Configuration block with the data storage option chosen for requesting Places. Detailed below.
	DataSourceConfiguration pulumix.GPtrOutput[PlaceIndexDataSourceConfiguration, PlaceIndexDataSourceConfigurationOutput] `pulumi:"dataSourceConfiguration"`
	// The optional description for the place index resource.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the place index resource. Used to specify a resource across AWS.
	IndexArn pulumix.Output[string] `pulumi:"indexArn"`
	// The name of the place index resource.
	//
	// The following arguments are optional:
	IndexName pulumix.Output[string] `pulumi:"indexName"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The timestamp for when the place index resource was last update in ISO 8601.
	UpdateTime pulumix.Output[string] `pulumi:"updateTime"`
}

// NewPlaceIndex registers a new resource with the given unique name, arguments, and options.
func NewPlaceIndex(ctx *pulumi.Context,
	name string, args *PlaceIndexArgs, opts ...pulumi.ResourceOption) (*PlaceIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	if args.IndexName == nil {
		return nil, errors.New("invalid value for required argument 'IndexName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlaceIndex
	err := ctx.RegisterResource("aws:location/placeIndex:PlaceIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaceIndex gets an existing PlaceIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaceIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaceIndexState, opts ...pulumi.ResourceOption) (*PlaceIndex, error) {
	var resource PlaceIndex
	err := ctx.ReadResource("aws:location/placeIndex:PlaceIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaceIndex resources.
type placeIndexState struct {
	// The timestamp for when the place index resource was created in ISO 8601 format.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the geospatial data provider for the new place index.
	DataSource *string `pulumi:"dataSource"`
	// Configuration block with the data storage option chosen for requesting Places. Detailed below.
	DataSourceConfiguration *PlaceIndexDataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	// The optional description for the place index resource.
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) for the place index resource. Used to specify a resource across AWS.
	IndexArn *string `pulumi:"indexArn"`
	// The name of the place index resource.
	//
	// The following arguments are optional:
	IndexName *string `pulumi:"indexName"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The timestamp for when the place index resource was last update in ISO 8601.
	UpdateTime *string `pulumi:"updateTime"`
}

type PlaceIndexState struct {
	// The timestamp for when the place index resource was created in ISO 8601 format.
	CreateTime pulumix.Input[*string]
	// Specifies the geospatial data provider for the new place index.
	DataSource pulumix.Input[*string]
	// Configuration block with the data storage option chosen for requesting Places. Detailed below.
	DataSourceConfiguration pulumix.Input[*PlaceIndexDataSourceConfigurationArgs]
	// The optional description for the place index resource.
	Description pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the place index resource. Used to specify a resource across AWS.
	IndexArn pulumix.Input[*string]
	// The name of the place index resource.
	//
	// The following arguments are optional:
	IndexName pulumix.Input[*string]
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The timestamp for when the place index resource was last update in ISO 8601.
	UpdateTime pulumix.Input[*string]
}

func (PlaceIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*placeIndexState)(nil)).Elem()
}

type placeIndexArgs struct {
	// Specifies the geospatial data provider for the new place index.
	DataSource string `pulumi:"dataSource"`
	// Configuration block with the data storage option chosen for requesting Places. Detailed below.
	DataSourceConfiguration *PlaceIndexDataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	// The optional description for the place index resource.
	Description *string `pulumi:"description"`
	// The name of the place index resource.
	//
	// The following arguments are optional:
	IndexName string `pulumi:"indexName"`
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PlaceIndex resource.
type PlaceIndexArgs struct {
	// Specifies the geospatial data provider for the new place index.
	DataSource pulumix.Input[string]
	// Configuration block with the data storage option chosen for requesting Places. Detailed below.
	DataSourceConfiguration pulumix.Input[*PlaceIndexDataSourceConfigurationArgs]
	// The optional description for the place index resource.
	Description pulumix.Input[*string]
	// The name of the place index resource.
	//
	// The following arguments are optional:
	IndexName pulumix.Input[string]
	// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PlaceIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*placeIndexArgs)(nil)).Elem()
}

type PlaceIndexOutput struct{ *pulumi.OutputState }

func (PlaceIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndex)(nil)).Elem()
}

func (o PlaceIndexOutput) ToPlaceIndexOutput() PlaceIndexOutput {
	return o
}

func (o PlaceIndexOutput) ToPlaceIndexOutputWithContext(ctx context.Context) PlaceIndexOutput {
	return o
}

func (o PlaceIndexOutput) ToOutput(ctx context.Context) pulumix.Output[PlaceIndex] {
	return pulumix.Output[PlaceIndex]{
		OutputState: o.OutputState,
	}
}

// The timestamp for when the place index resource was created in ISO 8601 format.
func (o PlaceIndexOutput) CreateTime() pulumix.Output[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.Output[string] { return v.CreateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the geospatial data provider for the new place index.
func (o PlaceIndexOutput) DataSource() pulumix.Output[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.Output[string] { return v.DataSource })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block with the data storage option chosen for requesting Places. Detailed below.
func (o PlaceIndexOutput) DataSourceConfiguration() pulumix.GPtrOutput[PlaceIndexDataSourceConfiguration, PlaceIndexDataSourceConfigurationOutput] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.GPtrOutput[PlaceIndexDataSourceConfiguration, PlaceIndexDataSourceConfigurationOutput] {
		return v.DataSourceConfiguration
	})
	unwrapped := pulumix.Flatten[*PlaceIndexDataSourceConfiguration, pulumix.GPtrOutput[PlaceIndexDataSourceConfiguration, PlaceIndexDataSourceConfigurationOutput]](value)
	return pulumix.GPtrOutput[PlaceIndexDataSourceConfiguration, PlaceIndexDataSourceConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The optional description for the place index resource.
func (o PlaceIndexOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name (ARN) for the place index resource. Used to specify a resource across AWS.
func (o PlaceIndexOutput) IndexArn() pulumix.Output[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.Output[string] { return v.IndexArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the place index resource.
//
// The following arguments are optional:
func (o PlaceIndexOutput) IndexName() pulumix.Output[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.Output[string] { return v.IndexName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value tags for the place index. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PlaceIndexOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PlaceIndexOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The timestamp for when the place index resource was last update in ISO 8601.
func (o PlaceIndexOutput) UpdateTime() pulumix.Output[string] {
	value := pulumix.Apply[PlaceIndex](o, func(v PlaceIndex) pulumix.Output[string] { return v.UpdateTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PlaceIndexOutput{})
}
