// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage the [default AWS DHCP Options Set](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html#AmazonDNS)
// in the current region.
//
// Each AWS region comes with a default set of DHCP options.
// **This is an advanced resource**, and has special caveats to be aware of when
// using it. Please read this document in its entirety before using this resource.
//
// The `ec2.DefaultVpcDhcpOptions` behaves differently from normal resources, in that
// this provider does not _create_ this resource, but instead "adopts" it
// into management.
type DefaultVpcDhcpOptions struct {
	pulumi.CustomResourceState

	// The ARN of the DHCP Options Set.
	Arn               pulumix.Output[string] `pulumi:"arn"`
	DomainName        pulumix.Output[string] `pulumi:"domainName"`
	DomainNameServers pulumix.Output[string] `pulumi:"domainNameServers"`
	// List of NETBIOS name servers.
	NetbiosNameServers pulumix.Output[string] `pulumi:"netbiosNameServers"`
	// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType pulumix.Output[string] `pulumi:"netbiosNodeType"`
	NtpServers      pulumix.Output[string] `pulumi:"ntpServers"`
	// The ID of the AWS account that owns the DHCP options set.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// A map of tags to assign to the resource.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewDefaultVpcDhcpOptions registers a new resource with the given unique name, arguments, and options.
func NewDefaultVpcDhcpOptions(ctx *pulumi.Context,
	name string, args *DefaultVpcDhcpOptionsArgs, opts ...pulumi.ResourceOption) (*DefaultVpcDhcpOptions, error) {
	if args == nil {
		args = &DefaultVpcDhcpOptionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultVpcDhcpOptions
	err := ctx.RegisterResource("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultVpcDhcpOptions gets an existing DefaultVpcDhcpOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultVpcDhcpOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultVpcDhcpOptionsState, opts ...pulumi.ResourceOption) (*DefaultVpcDhcpOptions, error) {
	var resource DefaultVpcDhcpOptions
	err := ctx.ReadResource("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultVpcDhcpOptions resources.
type defaultVpcDhcpOptionsState struct {
	// The ARN of the DHCP Options Set.
	Arn               *string `pulumi:"arn"`
	DomainName        *string `pulumi:"domainName"`
	DomainNameServers *string `pulumi:"domainNameServers"`
	// List of NETBIOS name servers.
	NetbiosNameServers *string `pulumi:"netbiosNameServers"`
	// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType *string `pulumi:"netbiosNodeType"`
	NtpServers      *string `pulumi:"ntpServers"`
	// The ID of the AWS account that owns the DHCP options set.
	OwnerId *string `pulumi:"ownerId"`
	// A map of tags to assign to the resource.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DefaultVpcDhcpOptionsState struct {
	// The ARN of the DHCP Options Set.
	Arn               pulumix.Input[*string]
	DomainName        pulumix.Input[*string]
	DomainNameServers pulumix.Input[*string]
	// List of NETBIOS name servers.
	NetbiosNameServers pulumix.Input[*string]
	// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType pulumix.Input[*string]
	NtpServers      pulumix.Input[*string]
	// The ID of the AWS account that owns the DHCP options set.
	OwnerId pulumix.Input[*string]
	// A map of tags to assign to the resource.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (DefaultVpcDhcpOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultVpcDhcpOptionsState)(nil)).Elem()
}

type defaultVpcDhcpOptionsArgs struct {
	// The ID of the AWS account that owns the DHCP options set.
	OwnerId *string `pulumi:"ownerId"`
	// A map of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultVpcDhcpOptions resource.
type DefaultVpcDhcpOptionsArgs struct {
	// The ID of the AWS account that owns the DHCP options set.
	OwnerId pulumix.Input[*string]
	// A map of tags to assign to the resource.
	Tags pulumix.Input[map[string]string]
}

func (DefaultVpcDhcpOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultVpcDhcpOptionsArgs)(nil)).Elem()
}

type DefaultVpcDhcpOptionsOutput struct{ *pulumi.OutputState }

func (DefaultVpcDhcpOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultVpcDhcpOptions)(nil)).Elem()
}

func (o DefaultVpcDhcpOptionsOutput) ToDefaultVpcDhcpOptionsOutput() DefaultVpcDhcpOptionsOutput {
	return o
}

func (o DefaultVpcDhcpOptionsOutput) ToDefaultVpcDhcpOptionsOutputWithContext(ctx context.Context) DefaultVpcDhcpOptionsOutput {
	return o
}

func (o DefaultVpcDhcpOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[DefaultVpcDhcpOptions] {
	return pulumix.Output[DefaultVpcDhcpOptions]{
		OutputState: o.OutputState,
	}
}

// The ARN of the DHCP Options Set.
func (o DefaultVpcDhcpOptionsOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultVpcDhcpOptionsOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultVpcDhcpOptionsOutput) DomainNameServers() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.DomainNameServers })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of NETBIOS name servers.
func (o DefaultVpcDhcpOptionsOutput) NetbiosNameServers() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.NetbiosNameServers })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
func (o DefaultVpcDhcpOptionsOutput) NetbiosNodeType() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.NetbiosNodeType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DefaultVpcDhcpOptionsOutput) NtpServers() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.NtpServers })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the AWS account that owns the DHCP options set.
func (o DefaultVpcDhcpOptionsOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource.
func (o DefaultVpcDhcpOptionsOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o DefaultVpcDhcpOptionsOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DefaultVpcDhcpOptions](o, func(v DefaultVpcDhcpOptions) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DefaultVpcDhcpOptionsOutput{})
}
