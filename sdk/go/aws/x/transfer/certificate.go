// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a AWS Transfer AS2 Certificate resource.
type Certificate struct {
	pulumi.CustomResourceState

	// An date when the certificate becomes active
	ActiveDate pulumix.Output[string] `pulumi:"activeDate"`
	// The ARN of the certificate
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The valid certificate file required for the transfer.
	Certificate pulumix.Output[string] `pulumi:"certificate"`
	// The optional list of certificate that make up the chain for the certificate that is being imported.
	CertificateChain pulumix.Output[*string] `pulumi:"certificateChain"`
	// The unique identifier for the AS2 certificate
	CertificateId pulumix.Output[string] `pulumi:"certificateId"`
	// A short description that helps identify the certificate.
	Description pulumix.Output[*string] `pulumi:"description"`
	// An date when the certificate becomes inactive
	InactiveDate pulumix.Output[string] `pulumi:"inactiveDate"`
	// The private key associated with the certificate being imported.
	PrivateKey pulumix.Output[*string] `pulumi:"privateKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
	Usage pulumix.Output[string] `pulumi:"usage"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.Usage == nil {
		return nil, errors.New("invalid value for required argument 'Usage'")
	}
	if args.Certificate != nil {
		untypedSecretValue := pulumi.ToSecret(args.Certificate.ToOutput(ctx.Context()).Untyped())
		args.Certificate = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	if args.CertificateChain != nil {
		untypedSecretValue := pulumi.ToSecret(args.CertificateChain.ToOutput(ctx.Context()).Untyped())
		args.CertificateChain = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.PrivateKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.PrivateKey.ToOutput(ctx.Context()).Untyped())
		args.PrivateKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"certificate",
		"certificateChain",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("aws:transfer/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:transfer/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// An date when the certificate becomes active
	ActiveDate *string `pulumi:"activeDate"`
	// The ARN of the certificate
	Arn *string `pulumi:"arn"`
	// The valid certificate file required for the transfer.
	Certificate *string `pulumi:"certificate"`
	// The optional list of certificate that make up the chain for the certificate that is being imported.
	CertificateChain *string `pulumi:"certificateChain"`
	// The unique identifier for the AS2 certificate
	CertificateId *string `pulumi:"certificateId"`
	// A short description that helps identify the certificate.
	Description *string `pulumi:"description"`
	// An date when the certificate becomes inactive
	InactiveDate *string `pulumi:"inactiveDate"`
	// The private key associated with the certificate being imported.
	PrivateKey *string `pulumi:"privateKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
	Usage *string `pulumi:"usage"`
}

type CertificateState struct {
	// An date when the certificate becomes active
	ActiveDate pulumix.Input[*string]
	// The ARN of the certificate
	Arn pulumix.Input[*string]
	// The valid certificate file required for the transfer.
	Certificate pulumix.Input[*string]
	// The optional list of certificate that make up the chain for the certificate that is being imported.
	CertificateChain pulumix.Input[*string]
	// The unique identifier for the AS2 certificate
	CertificateId pulumix.Input[*string]
	// A short description that helps identify the certificate.
	Description pulumix.Input[*string]
	// An date when the certificate becomes inactive
	InactiveDate pulumix.Input[*string]
	// The private key associated with the certificate being imported.
	PrivateKey pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
	Usage pulumix.Input[*string]
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// The valid certificate file required for the transfer.
	Certificate string `pulumi:"certificate"`
	// The optional list of certificate that make up the chain for the certificate that is being imported.
	CertificateChain *string `pulumi:"certificateChain"`
	// A short description that helps identify the certificate.
	Description *string `pulumi:"description"`
	// The private key associated with the certificate being imported.
	PrivateKey *string `pulumi:"privateKey"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
	Usage string `pulumi:"usage"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The valid certificate file required for the transfer.
	Certificate pulumix.Input[string]
	// The optional list of certificate that make up the chain for the certificate that is being imported.
	CertificateChain pulumix.Input[*string]
	// A short description that helps identify the certificate.
	Description pulumix.Input[*string]
	// The private key associated with the certificate being imported.
	PrivateKey pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
	Usage pulumix.Input[string]
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToOutput(ctx context.Context) pulumix.Output[Certificate] {
	return pulumix.Output[Certificate]{
		OutputState: o.OutputState,
	}
}

// An date when the certificate becomes active
func (o CertificateOutput) ActiveDate() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.ActiveDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the certificate
func (o CertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The valid certificate file required for the transfer.
func (o CertificateOutput) Certificate() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Certificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The optional list of certificate that make up the chain for the certificate that is being imported.
func (o CertificateOutput) CertificateChain() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CertificateChain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The unique identifier for the AS2 certificate
func (o CertificateOutput) CertificateId() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificateId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A short description that helps identify the certificate.
func (o CertificateOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// An date when the certificate becomes inactive
func (o CertificateOutput) InactiveDate() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.InactiveDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The private key associated with the certificate being imported.
func (o CertificateOutput) PrivateKey() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.PrivateKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CertificateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o CertificateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
func (o CertificateOutput) Usage() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Usage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
