// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecommit

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates a CodeCommit Approval Rule Template with a Repository.
type ApprovalRuleTemplateAssociation struct {
	pulumi.CustomResourceState

	// The name for the approval rule template.
	ApprovalRuleTemplateName pulumix.Output[string] `pulumi:"approvalRuleTemplateName"`
	// The name of the repository that you want to associate with the template.
	RepositoryName pulumix.Output[string] `pulumi:"repositoryName"`
}

// NewApprovalRuleTemplateAssociation registers a new resource with the given unique name, arguments, and options.
func NewApprovalRuleTemplateAssociation(ctx *pulumi.Context,
	name string, args *ApprovalRuleTemplateAssociationArgs, opts ...pulumi.ResourceOption) (*ApprovalRuleTemplateAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApprovalRuleTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'ApprovalRuleTemplateName'")
	}
	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApprovalRuleTemplateAssociation
	err := ctx.RegisterResource("aws:codecommit/approvalRuleTemplateAssociation:ApprovalRuleTemplateAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApprovalRuleTemplateAssociation gets an existing ApprovalRuleTemplateAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApprovalRuleTemplateAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApprovalRuleTemplateAssociationState, opts ...pulumi.ResourceOption) (*ApprovalRuleTemplateAssociation, error) {
	var resource ApprovalRuleTemplateAssociation
	err := ctx.ReadResource("aws:codecommit/approvalRuleTemplateAssociation:ApprovalRuleTemplateAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApprovalRuleTemplateAssociation resources.
type approvalRuleTemplateAssociationState struct {
	// The name for the approval rule template.
	ApprovalRuleTemplateName *string `pulumi:"approvalRuleTemplateName"`
	// The name of the repository that you want to associate with the template.
	RepositoryName *string `pulumi:"repositoryName"`
}

type ApprovalRuleTemplateAssociationState struct {
	// The name for the approval rule template.
	ApprovalRuleTemplateName pulumix.Input[*string]
	// The name of the repository that you want to associate with the template.
	RepositoryName pulumix.Input[*string]
}

func (ApprovalRuleTemplateAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*approvalRuleTemplateAssociationState)(nil)).Elem()
}

type approvalRuleTemplateAssociationArgs struct {
	// The name for the approval rule template.
	ApprovalRuleTemplateName string `pulumi:"approvalRuleTemplateName"`
	// The name of the repository that you want to associate with the template.
	RepositoryName string `pulumi:"repositoryName"`
}

// The set of arguments for constructing a ApprovalRuleTemplateAssociation resource.
type ApprovalRuleTemplateAssociationArgs struct {
	// The name for the approval rule template.
	ApprovalRuleTemplateName pulumix.Input[string]
	// The name of the repository that you want to associate with the template.
	RepositoryName pulumix.Input[string]
}

func (ApprovalRuleTemplateAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*approvalRuleTemplateAssociationArgs)(nil)).Elem()
}

type ApprovalRuleTemplateAssociationOutput struct{ *pulumi.OutputState }

func (ApprovalRuleTemplateAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalRuleTemplateAssociation)(nil)).Elem()
}

func (o ApprovalRuleTemplateAssociationOutput) ToApprovalRuleTemplateAssociationOutput() ApprovalRuleTemplateAssociationOutput {
	return o
}

func (o ApprovalRuleTemplateAssociationOutput) ToApprovalRuleTemplateAssociationOutputWithContext(ctx context.Context) ApprovalRuleTemplateAssociationOutput {
	return o
}

func (o ApprovalRuleTemplateAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[ApprovalRuleTemplateAssociation] {
	return pulumix.Output[ApprovalRuleTemplateAssociation]{
		OutputState: o.OutputState,
	}
}

// The name for the approval rule template.
func (o ApprovalRuleTemplateAssociationOutput) ApprovalRuleTemplateName() pulumix.Output[string] {
	value := pulumix.Apply[ApprovalRuleTemplateAssociation](o, func(v ApprovalRuleTemplateAssociation) pulumix.Output[string] { return v.ApprovalRuleTemplateName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the repository that you want to associate with the template.
func (o ApprovalRuleTemplateAssociationOutput) RepositoryName() pulumix.Output[string] {
	value := pulumix.Apply[ApprovalRuleTemplateAssociation](o, func(v ApprovalRuleTemplateAssociation) pulumix.Output[string] { return v.RepositoryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ApprovalRuleTemplateAssociationOutput{})
}
