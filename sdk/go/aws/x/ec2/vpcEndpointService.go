// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a VPC Endpoint Service resource.
// Service consumers can create an _Interface_ VPC Endpoint to connect to the service.
//
// > **NOTE on VPC Endpoint Services and VPC Endpoint Service Allowed Principals:** This provider provides
// both a standalone VPC Endpoint Service Allowed Principal resource
// and a VPC Endpoint Service resource with an `allowedPrincipals` attribute. Do not use the same principal ARN in both
// a VPC Endpoint Service resource and a VPC Endpoint Service Allowed Principal resource. Doing so will cause a conflict
// and will overwrite the association.
type VpcEndpointService struct {
	pulumi.CustomResourceState

	// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
	AcceptanceRequired pulumix.Output[bool] `pulumi:"acceptanceRequired"`
	// The ARNs of one or more principals allowed to discover the endpoint service.
	AllowedPrincipals pulumix.ArrayOutput[string] `pulumi:"allowedPrincipals"`
	// The Amazon Resource Name (ARN) of the VPC endpoint service.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A set of Availability Zones in which the service is available.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// A set of DNS names for the service.
	BaseEndpointDnsNames pulumix.ArrayOutput[string] `pulumi:"baseEndpointDnsNames"`
	// Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
	GatewayLoadBalancerArns pulumix.ArrayOutput[string] `pulumi:"gatewayLoadBalancerArns"`
	// Whether or not the service manages its VPC endpoints - `true` or `false`.
	ManagesVpcEndpoints pulumix.Output[bool] `pulumi:"managesVpcEndpoints"`
	// Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
	NetworkLoadBalancerArns pulumix.ArrayOutput[string] `pulumi:"networkLoadBalancerArns"`
	// The private DNS name for the service.
	PrivateDnsName pulumix.Output[string] `pulumi:"privateDnsName"`
	// List of objects containing information about the endpoint service private DNS name configuration.
	PrivateDnsNameConfigurations pulumix.GArrayOutput[VpcEndpointServicePrivateDnsNameConfiguration, VpcEndpointServicePrivateDnsNameConfigurationOutput] `pulumi:"privateDnsNameConfigurations"`
	// The service name.
	ServiceName pulumix.Output[string] `pulumi:"serviceName"`
	// The service type, `Gateway` or `Interface`.
	ServiceType pulumix.Output[string] `pulumi:"serviceType"`
	// Verification state of the VPC endpoint service. Consumers of the endpoint service can use the private name only when the state is `verified`.
	State pulumix.Output[string] `pulumi:"state"`
	// The supported IP address types. The possible values are `ipv4` and `ipv6`.
	SupportedIpAddressTypes pulumix.ArrayOutput[string] `pulumi:"supportedIpAddressTypes"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVpcEndpointService registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpointService(ctx *pulumi.Context,
	name string, args *VpcEndpointServiceArgs, opts ...pulumi.ResourceOption) (*VpcEndpointService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptanceRequired == nil {
		return nil, errors.New("invalid value for required argument 'AcceptanceRequired'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpointService
	err := ctx.RegisterResource("aws:ec2/vpcEndpointService:VpcEndpointService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpointService gets an existing VpcEndpointService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpointService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointServiceState, opts ...pulumi.ResourceOption) (*VpcEndpointService, error) {
	var resource VpcEndpointService
	err := ctx.ReadResource("aws:ec2/vpcEndpointService:VpcEndpointService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpointService resources.
type vpcEndpointServiceState struct {
	// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
	AcceptanceRequired *bool `pulumi:"acceptanceRequired"`
	// The ARNs of one or more principals allowed to discover the endpoint service.
	AllowedPrincipals []string `pulumi:"allowedPrincipals"`
	// The Amazon Resource Name (ARN) of the VPC endpoint service.
	Arn *string `pulumi:"arn"`
	// A set of Availability Zones in which the service is available.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// A set of DNS names for the service.
	BaseEndpointDnsNames []string `pulumi:"baseEndpointDnsNames"`
	// Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
	GatewayLoadBalancerArns []string `pulumi:"gatewayLoadBalancerArns"`
	// Whether or not the service manages its VPC endpoints - `true` or `false`.
	ManagesVpcEndpoints *bool `pulumi:"managesVpcEndpoints"`
	// Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
	NetworkLoadBalancerArns []string `pulumi:"networkLoadBalancerArns"`
	// The private DNS name for the service.
	PrivateDnsName *string `pulumi:"privateDnsName"`
	// List of objects containing information about the endpoint service private DNS name configuration.
	PrivateDnsNameConfigurations []VpcEndpointServicePrivateDnsNameConfiguration `pulumi:"privateDnsNameConfigurations"`
	// The service name.
	ServiceName *string `pulumi:"serviceName"`
	// The service type, `Gateway` or `Interface`.
	ServiceType *string `pulumi:"serviceType"`
	// Verification state of the VPC endpoint service. Consumers of the endpoint service can use the private name only when the state is `verified`.
	State *string `pulumi:"state"`
	// The supported IP address types. The possible values are `ipv4` and `ipv6`.
	SupportedIpAddressTypes []string `pulumi:"supportedIpAddressTypes"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VpcEndpointServiceState struct {
	// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
	AcceptanceRequired pulumix.Input[*bool]
	// The ARNs of one or more principals allowed to discover the endpoint service.
	AllowedPrincipals pulumix.Input[[]string]
	// The Amazon Resource Name (ARN) of the VPC endpoint service.
	Arn pulumix.Input[*string]
	// A set of Availability Zones in which the service is available.
	AvailabilityZones pulumix.Input[[]string]
	// A set of DNS names for the service.
	BaseEndpointDnsNames pulumix.Input[[]string]
	// Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
	GatewayLoadBalancerArns pulumix.Input[[]string]
	// Whether or not the service manages its VPC endpoints - `true` or `false`.
	ManagesVpcEndpoints pulumix.Input[*bool]
	// Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
	NetworkLoadBalancerArns pulumix.Input[[]string]
	// The private DNS name for the service.
	PrivateDnsName pulumix.Input[*string]
	// List of objects containing information about the endpoint service private DNS name configuration.
	PrivateDnsNameConfigurations pulumix.Input[[]*VpcEndpointServicePrivateDnsNameConfigurationArgs]
	// The service name.
	ServiceName pulumix.Input[*string]
	// The service type, `Gateway` or `Interface`.
	ServiceType pulumix.Input[*string]
	// Verification state of the VPC endpoint service. Consumers of the endpoint service can use the private name only when the state is `verified`.
	State pulumix.Input[*string]
	// The supported IP address types. The possible values are `ipv4` and `ipv6`.
	SupportedIpAddressTypes pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VpcEndpointServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointServiceState)(nil)).Elem()
}

type vpcEndpointServiceArgs struct {
	// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
	AcceptanceRequired bool `pulumi:"acceptanceRequired"`
	// The ARNs of one or more principals allowed to discover the endpoint service.
	AllowedPrincipals []string `pulumi:"allowedPrincipals"`
	// Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
	GatewayLoadBalancerArns []string `pulumi:"gatewayLoadBalancerArns"`
	// Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
	NetworkLoadBalancerArns []string `pulumi:"networkLoadBalancerArns"`
	// The private DNS name for the service.
	PrivateDnsName *string `pulumi:"privateDnsName"`
	// The supported IP address types. The possible values are `ipv4` and `ipv6`.
	SupportedIpAddressTypes []string `pulumi:"supportedIpAddressTypes"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VpcEndpointService resource.
type VpcEndpointServiceArgs struct {
	// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
	AcceptanceRequired pulumix.Input[bool]
	// The ARNs of one or more principals allowed to discover the endpoint service.
	AllowedPrincipals pulumix.Input[[]string]
	// Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
	GatewayLoadBalancerArns pulumix.Input[[]string]
	// Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
	NetworkLoadBalancerArns pulumix.Input[[]string]
	// The private DNS name for the service.
	PrivateDnsName pulumix.Input[*string]
	// The supported IP address types. The possible values are `ipv4` and `ipv6`.
	SupportedIpAddressTypes pulumix.Input[[]string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VpcEndpointServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointServiceArgs)(nil)).Elem()
}

type VpcEndpointServiceOutput struct{ *pulumi.OutputState }

func (VpcEndpointServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointService)(nil)).Elem()
}

func (o VpcEndpointServiceOutput) ToVpcEndpointServiceOutput() VpcEndpointServiceOutput {
	return o
}

func (o VpcEndpointServiceOutput) ToVpcEndpointServiceOutputWithContext(ctx context.Context) VpcEndpointServiceOutput {
	return o
}

func (o VpcEndpointServiceOutput) ToOutput(ctx context.Context) pulumix.Output[VpcEndpointService] {
	return pulumix.Output[VpcEndpointService]{
		OutputState: o.OutputState,
	}
}

// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
func (o VpcEndpointServiceOutput) AcceptanceRequired() pulumix.Output[bool] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[bool] { return v.AcceptanceRequired })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The ARNs of one or more principals allowed to discover the endpoint service.
func (o VpcEndpointServiceOutput) AllowedPrincipals() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.ArrayOutput[string] { return v.AllowedPrincipals })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the VPC endpoint service.
func (o VpcEndpointServiceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A set of Availability Zones in which the service is available.
func (o VpcEndpointServiceOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A set of DNS names for the service.
func (o VpcEndpointServiceOutput) BaseEndpointDnsNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.ArrayOutput[string] { return v.BaseEndpointDnsNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Amazon Resource Names (ARNs) of one or more Gateway Load Balancers for the endpoint service.
func (o VpcEndpointServiceOutput) GatewayLoadBalancerArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.ArrayOutput[string] { return v.GatewayLoadBalancerArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether or not the service manages its VPC endpoints - `true` or `false`.
func (o VpcEndpointServiceOutput) ManagesVpcEndpoints() pulumix.Output[bool] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[bool] { return v.ManagesVpcEndpoints })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Amazon Resource Names (ARNs) of one or more Network Load Balancers for the endpoint service.
func (o VpcEndpointServiceOutput) NetworkLoadBalancerArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.ArrayOutput[string] { return v.NetworkLoadBalancerArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The private DNS name for the service.
func (o VpcEndpointServiceOutput) PrivateDnsName() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[string] { return v.PrivateDnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of objects containing information about the endpoint service private DNS name configuration.
func (o VpcEndpointServiceOutput) PrivateDnsNameConfigurations() pulumix.GArrayOutput[VpcEndpointServicePrivateDnsNameConfiguration, VpcEndpointServicePrivateDnsNameConfigurationOutput] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.GArrayOutput[VpcEndpointServicePrivateDnsNameConfiguration, VpcEndpointServicePrivateDnsNameConfigurationOutput] {
		return v.PrivateDnsNameConfigurations
	})
	unwrapped := pulumix.Flatten[[]VpcEndpointServicePrivateDnsNameConfiguration, pulumix.GArrayOutput[VpcEndpointServicePrivateDnsNameConfiguration, VpcEndpointServicePrivateDnsNameConfigurationOutput]](value)
	return pulumix.GArrayOutput[VpcEndpointServicePrivateDnsNameConfiguration, VpcEndpointServicePrivateDnsNameConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The service name.
func (o VpcEndpointServiceOutput) ServiceName() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[string] { return v.ServiceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The service type, `Gateway` or `Interface`.
func (o VpcEndpointServiceOutput) ServiceType() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[string] { return v.ServiceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Verification state of the VPC endpoint service. Consumers of the endpoint service can use the private name only when the state is `verified`.
func (o VpcEndpointServiceOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The supported IP address types. The possible values are `ipv4` and `ipv6`.
func (o VpcEndpointServiceOutput) SupportedIpAddressTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.ArrayOutput[string] { return v.SupportedIpAddressTypes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcEndpointServiceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcEndpointServiceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcEndpointService](o, func(v VpcEndpointService) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointServiceOutput{})
}
