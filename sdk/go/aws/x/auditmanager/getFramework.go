// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS Audit Manager Framework.
func LookupFramework(ctx *pulumi.Context, args *LookupFrameworkArgs, opts ...pulumi.InvokeOption) (*LookupFrameworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFrameworkResult
	err := ctx.Invoke("aws:auditmanager/getFramework:getFramework", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFramework.
type LookupFrameworkArgs struct {
	ControlSets   []GetFrameworkControlSet `pulumi:"controlSets"`
	FrameworkType string                   `pulumi:"frameworkType"`
	// Name of the framework.
	Name string `pulumi:"name"`
}

// A collection of values returned by getFramework.
type LookupFrameworkResult struct {
	Arn            string                   `pulumi:"arn"`
	ComplianceType string                   `pulumi:"complianceType"`
	ControlSets    []GetFrameworkControlSet `pulumi:"controlSets"`
	Description    string                   `pulumi:"description"`
	FrameworkType  string                   `pulumi:"frameworkType"`
	Id             string                   `pulumi:"id"`
	Name           string                   `pulumi:"name"`
	Tags           map[string]string        `pulumi:"tags"`
}

func LookupFrameworkOutput(ctx *pulumi.Context, args LookupFrameworkOutputArgs, opts ...pulumi.InvokeOption) LookupFrameworkResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFrameworkArgs](args.ToOutput(), func(plainArgs *LookupFrameworkArgs) (*LookupFrameworkResult, error) {
		return LookupFramework(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFrameworkResultOutput, *LookupFrameworkResult](outputResult)
}

// A collection of arguments for invoking getFramework.
type LookupFrameworkOutputArgs struct {
	ControlSets   pulumix.Input[[]*GetFrameworkControlSetArgs] `pulumi:"controlSets"`
	FrameworkType pulumix.Input[string]                        `pulumi:"frameworkType"`
	// Name of the framework.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupFrameworkOutputArgs) ToOutput() pulumix.Output[*LookupFrameworkArgs] {
	allArgs := pulumix.All(
		args.ControlSets.ToOutput(context.Background()).AsAny(),
		args.FrameworkType.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFrameworkArgs {
		return &LookupFrameworkArgs{
			ControlSets:   resolvedArgs[0].([]GetFrameworkControlSet),
			FrameworkType: resolvedArgs[1].(string),
			Name:          resolvedArgs[2].(string),
		}
	})
}

type LookupFrameworkResultOutput struct{ *pulumi.OutputState }

func (LookupFrameworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFrameworkResult)(nil)).Elem()
}

func (o LookupFrameworkResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFrameworkResult] {
	return pulumix.Output[*LookupFrameworkResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFrameworkResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Arn })
}

func (o LookupFrameworkResultOutput) ComplianceType() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.ComplianceType })
}

func (o LookupFrameworkResultOutput) ControlSets() pulumix.GArrayOutput[GetFrameworkControlSet, GetFrameworkControlSetOutput] {
	value := pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) []GetFrameworkControlSet { return v.ControlSets })
	return pulumix.GArrayOutput[GetFrameworkControlSet, GetFrameworkControlSetOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFrameworkResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Description })
}

func (o LookupFrameworkResultOutput) FrameworkType() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.FrameworkType })
}

func (o LookupFrameworkResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Id })
}

func (o LookupFrameworkResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) string { return v.Name })
}

func (o LookupFrameworkResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupFrameworkResult](o, func(v *LookupFrameworkResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
