// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS DataSync FSx Windows Location.
type LocationFsxWindows struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The time that the FSx for Windows location was created.
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// The name of the Windows domain that the FSx for Windows server belongs to.
	Domain pulumix.Output[*string] `pulumi:"domain"`
	// The Amazon Resource Name (ARN) for the FSx for Windows file system.
	FsxFilesystemArn pulumix.Output[string] `pulumi:"fsxFilesystemArn"`
	// The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
	Password pulumix.Output[string] `pulumi:"password"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
	SecurityGroupArns pulumix.ArrayOutput[string] `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination.
	Subdirectory pulumix.Output[string] `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The URL of the FSx for Windows location that was described.
	Uri pulumix.Output[string] `pulumi:"uri"`
	// The user who has the permissions to access files and folders in the FSx for Windows file system.
	User pulumix.Output[string] `pulumi:"user"`
}

// NewLocationFsxWindows registers a new resource with the given unique name, arguments, and options.
func NewLocationFsxWindows(ctx *pulumi.Context,
	name string, args *LocationFsxWindowsArgs, opts ...pulumi.ResourceOption) (*LocationFsxWindows, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsxFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'FsxFilesystemArn'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationFsxWindows
	err := ctx.RegisterResource("aws:datasync/locationFsxWindows:LocationFsxWindows", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationFsxWindows gets an existing LocationFsxWindows resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationFsxWindows(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationFsxWindowsState, opts ...pulumi.ResourceOption) (*LocationFsxWindows, error) {
	var resource LocationFsxWindows
	err := ctx.ReadResource("aws:datasync/locationFsxWindows:LocationFsxWindows", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationFsxWindows resources.
type locationFsxWindowsState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn *string `pulumi:"arn"`
	// The time that the FSx for Windows location was created.
	CreationTime *string `pulumi:"creationTime"`
	// The name of the Windows domain that the FSx for Windows server belongs to.
	Domain *string `pulumi:"domain"`
	// The Amazon Resource Name (ARN) for the FSx for Windows file system.
	FsxFilesystemArn *string `pulumi:"fsxFilesystemArn"`
	// The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
	Password *string `pulumi:"password"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The URL of the FSx for Windows location that was described.
	Uri *string `pulumi:"uri"`
	// The user who has the permissions to access files and folders in the FSx for Windows file system.
	User *string `pulumi:"user"`
}

type LocationFsxWindowsState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumix.Input[*string]
	// The time that the FSx for Windows location was created.
	CreationTime pulumix.Input[*string]
	// The name of the Windows domain that the FSx for Windows server belongs to.
	Domain pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the FSx for Windows file system.
	FsxFilesystemArn pulumix.Input[*string]
	// The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
	Password pulumix.Input[*string]
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
	SecurityGroupArns pulumix.Input[[]string]
	// Subdirectory to perform actions as source or destination.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The URL of the FSx for Windows location that was described.
	Uri pulumix.Input[*string]
	// The user who has the permissions to access files and folders in the FSx for Windows file system.
	User pulumix.Input[*string]
}

func (LocationFsxWindowsState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxWindowsState)(nil)).Elem()
}

type locationFsxWindowsArgs struct {
	// The name of the Windows domain that the FSx for Windows server belongs to.
	Domain *string `pulumi:"domain"`
	// The Amazon Resource Name (ARN) for the FSx for Windows file system.
	FsxFilesystemArn string `pulumi:"fsxFilesystemArn"`
	// The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
	Password string `pulumi:"password"`
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// Subdirectory to perform actions as source or destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The user who has the permissions to access files and folders in the FSx for Windows file system.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a LocationFsxWindows resource.
type LocationFsxWindowsArgs struct {
	// The name of the Windows domain that the FSx for Windows server belongs to.
	Domain pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the FSx for Windows file system.
	FsxFilesystemArn pulumix.Input[string]
	// The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
	Password pulumix.Input[string]
	// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
	SecurityGroupArns pulumix.Input[[]string]
	// Subdirectory to perform actions as source or destination.
	Subdirectory pulumix.Input[*string]
	// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The user who has the permissions to access files and folders in the FSx for Windows file system.
	User pulumix.Input[string]
}

func (LocationFsxWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFsxWindowsArgs)(nil)).Elem()
}

type LocationFsxWindowsOutput struct{ *pulumi.OutputState }

func (LocationFsxWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFsxWindows)(nil)).Elem()
}

func (o LocationFsxWindowsOutput) ToLocationFsxWindowsOutput() LocationFsxWindowsOutput {
	return o
}

func (o LocationFsxWindowsOutput) ToLocationFsxWindowsOutputWithContext(ctx context.Context) LocationFsxWindowsOutput {
	return o
}

func (o LocationFsxWindowsOutput) ToOutput(ctx context.Context) pulumix.Output[LocationFsxWindows] {
	return pulumix.Output[LocationFsxWindows]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the DataSync Location.
func (o LocationFsxWindowsOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The time that the FSx for Windows location was created.
func (o LocationFsxWindowsOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Windows domain that the FSx for Windows server belongs to.
func (o LocationFsxWindowsOutput) Domain() pulumix.Output[*string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[*string] { return v.Domain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name (ARN) for the FSx for Windows file system.
func (o LocationFsxWindowsOutput) FsxFilesystemArn() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.FsxFilesystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The password of the user who has the permissions to access files and folders in the FSx for Windows file system.
func (o LocationFsxWindowsOutput) Password() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.Password })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Names (ARNs) of the security groups that are to use to configure the FSx for Windows file system.
func (o LocationFsxWindowsOutput) SecurityGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.ArrayOutput[string] { return v.SecurityGroupArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Subdirectory to perform actions as source or destination.
func (o LocationFsxWindowsOutput) Subdirectory() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.Subdirectory })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value pairs of resource tags to assign to the DataSync Location. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LocationFsxWindowsOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LocationFsxWindowsOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The URL of the FSx for Windows location that was described.
func (o LocationFsxWindowsOutput) Uri() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.Uri })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user who has the permissions to access files and folders in the FSx for Windows file system.
func (o LocationFsxWindowsOutput) User() pulumix.Output[string] {
	value := pulumix.Apply[LocationFsxWindows](o, func(v LocationFsxWindows) pulumix.Output[string] { return v.User })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LocationFsxWindowsOutput{})
}
