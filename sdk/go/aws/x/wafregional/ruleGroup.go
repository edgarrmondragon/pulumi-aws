// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wafregional

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a WAF Regional Rule Group Resource
type RuleGroup struct {
	pulumi.CustomResourceState

	// A list of activated rules, see below
	ActivatedRules pulumix.GArrayOutput[RuleGroupActivatedRule, RuleGroupActivatedRuleOutput] `pulumi:"activatedRules"`
	// The ARN of the WAF Regional Rule Group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A friendly name for the metrics from the rule group
	MetricName pulumix.Output[string] `pulumi:"metricName"`
	// A friendly name of the rule group
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRuleGroup registers a new resource with the given unique name, arguments, and options.
func NewRuleGroup(ctx *pulumi.Context,
	name string, args *RuleGroupArgs, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleGroup
	err := ctx.RegisterResource("aws:wafregional/ruleGroup:RuleGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleGroup gets an existing RuleGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleGroupState, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	var resource RuleGroup
	err := ctx.ReadResource("aws:wafregional/ruleGroup:RuleGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleGroup resources.
type ruleGroupState struct {
	// A list of activated rules, see below
	ActivatedRules []RuleGroupActivatedRule `pulumi:"activatedRules"`
	// The ARN of the WAF Regional Rule Group.
	Arn *string `pulumi:"arn"`
	// A friendly name for the metrics from the rule group
	MetricName *string `pulumi:"metricName"`
	// A friendly name of the rule group
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RuleGroupState struct {
	// A list of activated rules, see below
	ActivatedRules pulumix.Input[[]*RuleGroupActivatedRuleArgs]
	// The ARN of the WAF Regional Rule Group.
	Arn pulumix.Input[*string]
	// A friendly name for the metrics from the rule group
	MetricName pulumix.Input[*string]
	// A friendly name of the rule group
	Name pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RuleGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupState)(nil)).Elem()
}

type ruleGroupArgs struct {
	// A list of activated rules, see below
	ActivatedRules []RuleGroupActivatedRule `pulumi:"activatedRules"`
	// A friendly name for the metrics from the rule group
	MetricName string `pulumi:"metricName"`
	// A friendly name of the rule group
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RuleGroup resource.
type RuleGroupArgs struct {
	// A list of activated rules, see below
	ActivatedRules pulumix.Input[[]*RuleGroupActivatedRuleArgs]
	// A friendly name for the metrics from the rule group
	MetricName pulumix.Input[string]
	// A friendly name of the rule group
	Name pulumix.Input[*string]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RuleGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupArgs)(nil)).Elem()
}

type RuleGroupOutput struct{ *pulumi.OutputState }

func (RuleGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroup)(nil)).Elem()
}

func (o RuleGroupOutput) ToRuleGroupOutput() RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToRuleGroupOutputWithContext(ctx context.Context) RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToOutput(ctx context.Context) pulumix.Output[RuleGroup] {
	return pulumix.Output[RuleGroup]{
		OutputState: o.OutputState,
	}
}

// A list of activated rules, see below
func (o RuleGroupOutput) ActivatedRules() pulumix.GArrayOutput[RuleGroupActivatedRule, RuleGroupActivatedRuleOutput] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.GArrayOutput[RuleGroupActivatedRule, RuleGroupActivatedRuleOutput] {
		return v.ActivatedRules
	})
	unwrapped := pulumix.Flatten[[]RuleGroupActivatedRule, pulumix.GArrayOutput[RuleGroupActivatedRule, RuleGroupActivatedRuleOutput]](value)
	return pulumix.GArrayOutput[RuleGroupActivatedRule, RuleGroupActivatedRuleOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the WAF Regional Rule Group.
func (o RuleGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A friendly name for the metrics from the rule group
func (o RuleGroupOutput) MetricName() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.MetricName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A friendly name of the rule group
func (o RuleGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RuleGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RuleGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RuleGroupOutput{})
}
