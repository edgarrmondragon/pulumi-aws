// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage a VPC's default network ACL. This resource can manage the default network ACL of the default or a non-default VPC.
//
// > **NOTE:** This is an advanced resource with special caveats. Please read this document in its entirety before using this resource. The `ec2.DefaultNetworkAcl` behaves differently from normal resources. This provider does not _create_ this resource but instead attempts to "adopt" it into management.
//
// Every VPC has a default network ACL that can be managed but not destroyed. When the provider first adopts the Default Network ACL, it **immediately removes all rules in the ACL**. It then proceeds to create any rules specified in the configuration. This step is required so that only the rules specified in the configuration are created.
//
// This resource treats its inline rules as absolute; only the rules defined inline are created, and any additions/removals external to this resource will result in diffs being shown. For these reasons, this resource is incompatible with the `ec2.NetworkAclRule` resource.
//
// For more information about Network ACLs, see the AWS Documentation on [Network ACLs][aws-network-acls].
type DefaultNetworkAcl struct {
	pulumi.CustomResourceState

	// ARN of the Default Network ACL
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	//
	// The following arguments are optional:
	DefaultNetworkAclId pulumix.Output[string] `pulumi:"defaultNetworkAclId"`
	// Configuration block for an egress rule. Detailed below.
	Egress pulumix.GArrayOutput[DefaultNetworkAclEgress, DefaultNetworkAclEgressOutput] `pulumi:"egress"`
	// Configuration block for an ingress rule. Detailed below.
	Ingress pulumix.GArrayOutput[DefaultNetworkAclIngress, DefaultNetworkAclIngressOutput] `pulumi:"ingress"`
	// ID of the AWS account that owns the Default Network ACL
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// ID of the associated VPC
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewDefaultNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewDefaultNetworkAcl(ctx *pulumi.Context,
	name string, args *DefaultNetworkAclArgs, opts ...pulumi.ResourceOption) (*DefaultNetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultNetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'DefaultNetworkAclId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultNetworkAcl
	err := ctx.RegisterResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultNetworkAcl gets an existing DefaultNetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultNetworkAclState, opts ...pulumi.ResourceOption) (*DefaultNetworkAcl, error) {
	var resource DefaultNetworkAcl
	err := ctx.ReadResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultNetworkAcl resources.
type defaultNetworkAclState struct {
	// ARN of the Default Network ACL
	Arn *string `pulumi:"arn"`
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	//
	// The following arguments are optional:
	DefaultNetworkAclId *string `pulumi:"defaultNetworkAclId"`
	// Configuration block for an egress rule. Detailed below.
	Egress []DefaultNetworkAclEgress `pulumi:"egress"`
	// Configuration block for an ingress rule. Detailed below.
	Ingress []DefaultNetworkAclIngress `pulumi:"ingress"`
	// ID of the AWS account that owns the Default Network ACL
	OwnerId *string `pulumi:"ownerId"`
	// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// ID of the associated VPC
	VpcId *string `pulumi:"vpcId"`
}

type DefaultNetworkAclState struct {
	// ARN of the Default Network ACL
	Arn pulumix.Input[*string]
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	//
	// The following arguments are optional:
	DefaultNetworkAclId pulumix.Input[*string]
	// Configuration block for an egress rule. Detailed below.
	Egress pulumix.Input[[]*DefaultNetworkAclEgressArgs]
	// Configuration block for an ingress rule. Detailed below.
	Ingress pulumix.Input[[]*DefaultNetworkAclIngressArgs]
	// ID of the AWS account that owns the Default Network ACL
	OwnerId pulumix.Input[*string]
	// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
	SubnetIds pulumix.Input[[]string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// ID of the associated VPC
	VpcId pulumix.Input[*string]
}

func (DefaultNetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultNetworkAclState)(nil)).Elem()
}

type defaultNetworkAclArgs struct {
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	//
	// The following arguments are optional:
	DefaultNetworkAclId string `pulumi:"defaultNetworkAclId"`
	// Configuration block for an egress rule. Detailed below.
	Egress []DefaultNetworkAclEgress `pulumi:"egress"`
	// Configuration block for an ingress rule. Detailed below.
	Ingress []DefaultNetworkAclIngress `pulumi:"ingress"`
	// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DefaultNetworkAcl resource.
type DefaultNetworkAclArgs struct {
	// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	//
	// The following arguments are optional:
	DefaultNetworkAclId pulumix.Input[string]
	// Configuration block for an egress rule. Detailed below.
	Egress pulumix.Input[[]*DefaultNetworkAclEgressArgs]
	// Configuration block for an ingress rule. Detailed below.
	Ingress pulumix.Input[[]*DefaultNetworkAclIngressArgs]
	// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
	SubnetIds pulumix.Input[[]string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (DefaultNetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultNetworkAclArgs)(nil)).Elem()
}

type DefaultNetworkAclOutput struct{ *pulumi.OutputState }

func (DefaultNetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultNetworkAcl)(nil)).Elem()
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclOutput() DefaultNetworkAclOutput {
	return o
}

func (o DefaultNetworkAclOutput) ToDefaultNetworkAclOutputWithContext(ctx context.Context) DefaultNetworkAclOutput {
	return o
}

func (o DefaultNetworkAclOutput) ToOutput(ctx context.Context) pulumix.Output[DefaultNetworkAcl] {
	return pulumix.Output[DefaultNetworkAcl]{
		OutputState: o.OutputState,
	}
}

// ARN of the Default Network ACL
func (o DefaultNetworkAclOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Network ACL ID to manage. This attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
//
// The following arguments are optional:
func (o DefaultNetworkAclOutput) DefaultNetworkAclId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.Output[string] { return v.DefaultNetworkAclId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for an egress rule. Detailed below.
func (o DefaultNetworkAclOutput) Egress() pulumix.GArrayOutput[DefaultNetworkAclEgress, DefaultNetworkAclEgressOutput] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.GArrayOutput[DefaultNetworkAclEgress, DefaultNetworkAclEgressOutput] {
		return v.Egress
	})
	unwrapped := pulumix.Flatten[[]DefaultNetworkAclEgress, pulumix.GArrayOutput[DefaultNetworkAclEgress, DefaultNetworkAclEgressOutput]](value)
	return pulumix.GArrayOutput[DefaultNetworkAclEgress, DefaultNetworkAclEgressOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for an ingress rule. Detailed below.
func (o DefaultNetworkAclOutput) Ingress() pulumix.GArrayOutput[DefaultNetworkAclIngress, DefaultNetworkAclIngressOutput] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.GArrayOutput[DefaultNetworkAclIngress, DefaultNetworkAclIngressOutput] {
		return v.Ingress
	})
	unwrapped := pulumix.Flatten[[]DefaultNetworkAclIngress, pulumix.GArrayOutput[DefaultNetworkAclIngress, DefaultNetworkAclIngressOutput]](value)
	return pulumix.GArrayOutput[DefaultNetworkAclIngress, DefaultNetworkAclIngressOutput]{OutputState: unwrapped.OutputState}
}

// ID of the AWS account that owns the Default Network ACL
func (o DefaultNetworkAclOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
func (o DefaultNetworkAclOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DefaultNetworkAclOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DefaultNetworkAclOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// ID of the associated VPC
func (o DefaultNetworkAclOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[DefaultNetworkAcl](o, func(v DefaultNetworkAcl) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DefaultNetworkAclOutput{})
}
