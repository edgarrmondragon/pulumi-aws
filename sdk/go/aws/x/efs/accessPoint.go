// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic File System (EFS) access point.
type AccessPoint struct {
	pulumi.CustomResourceState

	// ARN of the access point.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ARN of the file system.
	FileSystemArn pulumix.Output[string] `pulumi:"fileSystemArn"`
	// ID of the file system for which the access point is intended.
	FileSystemId pulumix.Output[string] `pulumi:"fileSystemId"`
	OwnerId      pulumix.Output[string] `pulumi:"ownerId"`
	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	PosixUser pulumix.GPtrOutput[AccessPointPosixUser, AccessPointPosixUserOutput] `pulumi:"posixUser"`
	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	RootDirectory pulumix.GPtrOutput[AccessPointRootDirectory, AccessPointRootDirectoryOutput] `pulumi:"rootDirectory"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewAccessPoint(ctx *pulumi.Context,
	name string, args *AccessPointArgs, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPoint
	err := ctx.RegisterResource("aws:efs/accessPoint:AccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPoint gets an existing AccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPointState, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	var resource AccessPoint
	err := ctx.ReadResource("aws:efs/accessPoint:AccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPoint resources.
type accessPointState struct {
	// ARN of the access point.
	Arn *string `pulumi:"arn"`
	// ARN of the file system.
	FileSystemArn *string `pulumi:"fileSystemArn"`
	// ID of the file system for which the access point is intended.
	FileSystemId *string `pulumi:"fileSystemId"`
	OwnerId      *string `pulumi:"ownerId"`
	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	PosixUser *AccessPointPosixUser `pulumi:"posixUser"`
	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	RootDirectory *AccessPointRootDirectory `pulumi:"rootDirectory"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type AccessPointState struct {
	// ARN of the access point.
	Arn pulumix.Input[*string]
	// ARN of the file system.
	FileSystemArn pulumix.Input[*string]
	// ID of the file system for which the access point is intended.
	FileSystemId pulumix.Input[*string]
	OwnerId      pulumix.Input[*string]
	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	PosixUser pulumix.Input[*AccessPointPosixUserArgs]
	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	RootDirectory pulumix.Input[*AccessPointRootDirectoryArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (AccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointState)(nil)).Elem()
}

type accessPointArgs struct {
	// ID of the file system for which the access point is intended.
	FileSystemId string `pulumi:"fileSystemId"`
	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	PosixUser *AccessPointPosixUser `pulumi:"posixUser"`
	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	RootDirectory *AccessPointRootDirectory `pulumi:"rootDirectory"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AccessPoint resource.
type AccessPointArgs struct {
	// ID of the file system for which the access point is intended.
	FileSystemId pulumix.Input[string]
	// Operating system user and group applied to all file system requests made using the access point. Detailed below.
	PosixUser pulumix.Input[*AccessPointPosixUserArgs]
	// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
	RootDirectory pulumix.Input[*AccessPointRootDirectoryArgs]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (AccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointArgs)(nil)).Elem()
}

type AccessPointOutput struct{ *pulumi.OutputState }

func (AccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPoint)(nil)).Elem()
}

func (o AccessPointOutput) ToAccessPointOutput() AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPoint] {
	return pulumix.Output[AccessPoint]{
		OutputState: o.OutputState,
	}
}

// ARN of the access point.
func (o AccessPointOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the file system.
func (o AccessPointOutput) FileSystemArn() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.FileSystemArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the file system for which the access point is intended.
func (o AccessPointOutput) FileSystemId() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.FileSystemId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o AccessPointOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Operating system user and group applied to all file system requests made using the access point. Detailed below.
func (o AccessPointOutput) PosixUser() pulumix.GPtrOutput[AccessPointPosixUser, AccessPointPosixUserOutput] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.GPtrOutput[AccessPointPosixUser, AccessPointPosixUserOutput] {
		return v.PosixUser
	})
	unwrapped := pulumix.Flatten[*AccessPointPosixUser, pulumix.GPtrOutput[AccessPointPosixUser, AccessPointPosixUserOutput]](value)
	return pulumix.GPtrOutput[AccessPointPosixUser, AccessPointPosixUserOutput]{OutputState: unwrapped.OutputState}
}

// Directory on the Amazon EFS file system that the access point provides access to. Detailed below.
func (o AccessPointOutput) RootDirectory() pulumix.GPtrOutput[AccessPointRootDirectory, AccessPointRootDirectoryOutput] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.GPtrOutput[AccessPointRootDirectory, AccessPointRootDirectoryOutput] {
		return v.RootDirectory
	})
	unwrapped := pulumix.Flatten[*AccessPointRootDirectory, pulumix.GPtrOutput[AccessPointRootDirectory, AccessPointRootDirectoryOutput]](value)
	return pulumix.GPtrOutput[AccessPointRootDirectory, AccessPointRootDirectoryOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o AccessPointOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AccessPointOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AccessPointOutput{})
}
