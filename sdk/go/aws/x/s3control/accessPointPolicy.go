// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an S3 Access Point resource policy.
//
// > **NOTE on Access Points and Access Point Policies:** The provider provides both a standalone Access Point Policy resource and an Access Point resource with a resource policy defined in-line. You cannot use an Access Point with in-line resource policy in conjunction with an Access Point Policy resource. Doing so will cause a conflict of policies and will overwrite the access point's resource policy.
type AccessPointPolicy struct {
	pulumi.CustomResourceState

	// The ARN of the access point that you want to associate with the specified policy.
	AccessPointArn pulumix.Output[string] `pulumi:"accessPointArn"`
	// Indicates whether this access point currently has a policy that allows public access.
	HasPublicAccessPolicy pulumix.Output[bool] `pulumi:"hasPublicAccessPolicy"`
	// The policy that you want to apply to the specified access point.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewAccessPointPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessPointPolicy(ctx *pulumi.Context,
	name string, args *AccessPointPolicyArgs, opts ...pulumi.ResourceOption) (*AccessPointPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPointArn == nil {
		return nil, errors.New("invalid value for required argument 'AccessPointArn'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPointPolicy
	err := ctx.RegisterResource("aws:s3control/accessPointPolicy:AccessPointPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPointPolicy gets an existing AccessPointPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPointPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPointPolicyState, opts ...pulumi.ResourceOption) (*AccessPointPolicy, error) {
	var resource AccessPointPolicy
	err := ctx.ReadResource("aws:s3control/accessPointPolicy:AccessPointPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPointPolicy resources.
type accessPointPolicyState struct {
	// The ARN of the access point that you want to associate with the specified policy.
	AccessPointArn *string `pulumi:"accessPointArn"`
	// Indicates whether this access point currently has a policy that allows public access.
	HasPublicAccessPolicy *bool `pulumi:"hasPublicAccessPolicy"`
	// The policy that you want to apply to the specified access point.
	Policy *string `pulumi:"policy"`
}

type AccessPointPolicyState struct {
	// The ARN of the access point that you want to associate with the specified policy.
	AccessPointArn pulumix.Input[*string]
	// Indicates whether this access point currently has a policy that allows public access.
	HasPublicAccessPolicy pulumix.Input[*bool]
	// The policy that you want to apply to the specified access point.
	Policy pulumix.Input[*string]
}

func (AccessPointPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointPolicyState)(nil)).Elem()
}

type accessPointPolicyArgs struct {
	// The ARN of the access point that you want to associate with the specified policy.
	AccessPointArn string `pulumi:"accessPointArn"`
	// The policy that you want to apply to the specified access point.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a AccessPointPolicy resource.
type AccessPointPolicyArgs struct {
	// The ARN of the access point that you want to associate with the specified policy.
	AccessPointArn pulumix.Input[string]
	// The policy that you want to apply to the specified access point.
	Policy pulumix.Input[string]
}

func (AccessPointPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointPolicyArgs)(nil)).Elem()
}

type AccessPointPolicyOutput struct{ *pulumi.OutputState }

func (AccessPointPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPolicy)(nil)).Elem()
}

func (o AccessPointPolicyOutput) ToAccessPointPolicyOutput() AccessPointPolicyOutput {
	return o
}

func (o AccessPointPolicyOutput) ToAccessPointPolicyOutputWithContext(ctx context.Context) AccessPointPolicyOutput {
	return o
}

func (o AccessPointPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointPolicy] {
	return pulumix.Output[AccessPointPolicy]{
		OutputState: o.OutputState,
	}
}

// The ARN of the access point that you want to associate with the specified policy.
func (o AccessPointPolicyOutput) AccessPointArn() pulumix.Output[string] {
	value := pulumix.Apply[AccessPointPolicy](o, func(v AccessPointPolicy) pulumix.Output[string] { return v.AccessPointArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether this access point currently has a policy that allows public access.
func (o AccessPointPolicyOutput) HasPublicAccessPolicy() pulumix.Output[bool] {
	value := pulumix.Apply[AccessPointPolicy](o, func(v AccessPointPolicy) pulumix.Output[bool] { return v.HasPublicAccessPolicy })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The policy that you want to apply to the specified access point.
func (o AccessPointPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[AccessPointPolicy](o, func(v AccessPointPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AccessPointPolicyOutput{})
}
