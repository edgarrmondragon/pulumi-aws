// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Kinesis Analytics Application resource. Kinesis Analytics is a managed service that
// allows processing and analyzing streaming data using standard SQL.
//
// For more details, see the [Amazon Kinesis Analytics Documentation](https://docs.aws.amazon.com/kinesisanalytics/latest/dev/what-is.html).
//
// > **Note:** To manage Amazon Kinesis Data Analytics for Apache Flink applications, use the `kinesisanalyticsv2.Application` resource.
type AnalyticsApplication struct {
	pulumi.CustomResourceState

	// The ARN of the Kinesis Analytics Appliation.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	CloudwatchLoggingOptions pulumix.GPtrOutput[AnalyticsApplicationCloudwatchLoggingOptions, AnalyticsApplicationCloudwatchLoggingOptionsOutput] `pulumi:"cloudwatchLoggingOptions"`
	// SQL Code to transform input data, and generate output.
	Code pulumix.Output[*string] `pulumi:"code"`
	// The Timestamp when the application version was created.
	CreateTimestamp pulumix.Output[string] `pulumi:"createTimestamp"`
	// Description of the application.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Input configuration of the application. See Inputs below for more details.
	Inputs pulumix.GPtrOutput[AnalyticsApplicationInputs, AnalyticsApplicationInputsOutput] `pulumi:"inputs"`
	// The Timestamp when the application was last updated.
	LastUpdateTimestamp pulumix.Output[string] `pulumi:"lastUpdateTimestamp"`
	// Name of the Kinesis Analytics Application.
	Name pulumix.Output[string] `pulumi:"name"`
	// Output destination configuration of the application. See Outputs below for more details.
	Outputs pulumix.GArrayOutput[AnalyticsApplicationOutputType, AnalyticsApplicationOutputTypeOutput] `pulumi:"outputs"`
	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	ReferenceDataSources pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSources, AnalyticsApplicationReferenceDataSourcesOutput] `pulumi:"referenceDataSources"`
	// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `startingPosition` must be configured.
	// To modify an application's starting position, first stop the application by setting `startApplication = false`, then update `startingPosition` and set `startApplication = true`.
	StartApplication pulumix.Output[*bool] `pulumi:"startApplication"`
	// The Status of the application.
	Status pulumix.Output[string] `pulumi:"status"`
	// Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Version of the application.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewAnalyticsApplication registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsApplication(ctx *pulumi.Context,
	name string, args *AnalyticsApplicationArgs, opts ...pulumi.ResourceOption) (*AnalyticsApplication, error) {
	if args == nil {
		args = &AnalyticsApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnalyticsApplication
	err := ctx.RegisterResource("aws:kinesis/analyticsApplication:AnalyticsApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsApplication gets an existing AnalyticsApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsApplicationState, opts ...pulumi.ResourceOption) (*AnalyticsApplication, error) {
	var resource AnalyticsApplication
	err := ctx.ReadResource("aws:kinesis/analyticsApplication:AnalyticsApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsApplication resources.
type analyticsApplicationState struct {
	// The ARN of the Kinesis Analytics Appliation.
	Arn *string `pulumi:"arn"`
	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	CloudwatchLoggingOptions *AnalyticsApplicationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// SQL Code to transform input data, and generate output.
	Code *string `pulumi:"code"`
	// The Timestamp when the application version was created.
	CreateTimestamp *string `pulumi:"createTimestamp"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// Input configuration of the application. See Inputs below for more details.
	Inputs *AnalyticsApplicationInputs `pulumi:"inputs"`
	// The Timestamp when the application was last updated.
	LastUpdateTimestamp *string `pulumi:"lastUpdateTimestamp"`
	// Name of the Kinesis Analytics Application.
	Name *string `pulumi:"name"`
	// Output destination configuration of the application. See Outputs below for more details.
	Outputs []AnalyticsApplicationOutputType `pulumi:"outputs"`
	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	ReferenceDataSources *AnalyticsApplicationReferenceDataSources `pulumi:"referenceDataSources"`
	// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `startingPosition` must be configured.
	// To modify an application's starting position, first stop the application by setting `startApplication = false`, then update `startingPosition` and set `startApplication = true`.
	StartApplication *bool `pulumi:"startApplication"`
	// The Status of the application.
	Status *string `pulumi:"status"`
	// Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Version of the application.
	Version *int `pulumi:"version"`
}

type AnalyticsApplicationState struct {
	// The ARN of the Kinesis Analytics Appliation.
	Arn pulumix.Input[*string]
	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	CloudwatchLoggingOptions pulumix.Input[*AnalyticsApplicationCloudwatchLoggingOptionsArgs]
	// SQL Code to transform input data, and generate output.
	Code pulumix.Input[*string]
	// The Timestamp when the application version was created.
	CreateTimestamp pulumix.Input[*string]
	// Description of the application.
	Description pulumix.Input[*string]
	// Input configuration of the application. See Inputs below for more details.
	Inputs pulumix.Input[*AnalyticsApplicationInputsArgs]
	// The Timestamp when the application was last updated.
	LastUpdateTimestamp pulumix.Input[*string]
	// Name of the Kinesis Analytics Application.
	Name pulumix.Input[*string]
	// Output destination configuration of the application. See Outputs below for more details.
	Outputs pulumix.Input[[]*AnalyticsApplicationOutputTypeArgs]
	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	ReferenceDataSources pulumix.Input[*AnalyticsApplicationReferenceDataSourcesArgs]
	// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `startingPosition` must be configured.
	// To modify an application's starting position, first stop the application by setting `startApplication = false`, then update `startingPosition` and set `startApplication = true`.
	StartApplication pulumix.Input[*bool]
	// The Status of the application.
	Status pulumix.Input[*string]
	// Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The Version of the application.
	Version pulumix.Input[*int]
}

func (AnalyticsApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsApplicationState)(nil)).Elem()
}

type analyticsApplicationArgs struct {
	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	CloudwatchLoggingOptions *AnalyticsApplicationCloudwatchLoggingOptions `pulumi:"cloudwatchLoggingOptions"`
	// SQL Code to transform input data, and generate output.
	Code *string `pulumi:"code"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// Input configuration of the application. See Inputs below for more details.
	Inputs *AnalyticsApplicationInputs `pulumi:"inputs"`
	// Name of the Kinesis Analytics Application.
	Name *string `pulumi:"name"`
	// Output destination configuration of the application. See Outputs below for more details.
	Outputs []AnalyticsApplicationOutputType `pulumi:"outputs"`
	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	ReferenceDataSources *AnalyticsApplicationReferenceDataSources `pulumi:"referenceDataSources"`
	// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `startingPosition` must be configured.
	// To modify an application's starting position, first stop the application by setting `startApplication = false`, then update `startingPosition` and set `startApplication = true`.
	StartApplication *bool `pulumi:"startApplication"`
	// Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AnalyticsApplication resource.
type AnalyticsApplicationArgs struct {
	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	CloudwatchLoggingOptions pulumix.Input[*AnalyticsApplicationCloudwatchLoggingOptionsArgs]
	// SQL Code to transform input data, and generate output.
	Code pulumix.Input[*string]
	// Description of the application.
	Description pulumix.Input[*string]
	// Input configuration of the application. See Inputs below for more details.
	Inputs pulumix.Input[*AnalyticsApplicationInputsArgs]
	// Name of the Kinesis Analytics Application.
	Name pulumix.Input[*string]
	// Output destination configuration of the application. See Outputs below for more details.
	Outputs pulumix.Input[[]*AnalyticsApplicationOutputTypeArgs]
	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	ReferenceDataSources pulumix.Input[*AnalyticsApplicationReferenceDataSourcesArgs]
	// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `startingPosition` must be configured.
	// To modify an application's starting position, first stop the application by setting `startApplication = false`, then update `startingPosition` and set `startApplication = true`.
	StartApplication pulumix.Input[*bool]
	// Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (AnalyticsApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsApplicationArgs)(nil)).Elem()
}

type AnalyticsApplicationOutput struct{ *pulumi.OutputState }

func (AnalyticsApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsApplication)(nil)).Elem()
}

func (o AnalyticsApplicationOutput) ToAnalyticsApplicationOutput() AnalyticsApplicationOutput {
	return o
}

func (o AnalyticsApplicationOutput) ToAnalyticsApplicationOutputWithContext(ctx context.Context) AnalyticsApplicationOutput {
	return o
}

func (o AnalyticsApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsApplication] {
	return pulumix.Output[AnalyticsApplication]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Kinesis Analytics Appliation.
func (o AnalyticsApplicationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The CloudWatch log stream options to monitor application errors.
// See CloudWatch Logging Options below for more details.
func (o AnalyticsApplicationOutput) CloudwatchLoggingOptions() pulumix.GPtrOutput[AnalyticsApplicationCloudwatchLoggingOptions, AnalyticsApplicationCloudwatchLoggingOptionsOutput] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.GPtrOutput[AnalyticsApplicationCloudwatchLoggingOptions, AnalyticsApplicationCloudwatchLoggingOptionsOutput] {
		return v.CloudwatchLoggingOptions
	})
	unwrapped := pulumix.Flatten[*AnalyticsApplicationCloudwatchLoggingOptions, pulumix.GPtrOutput[AnalyticsApplicationCloudwatchLoggingOptions, AnalyticsApplicationCloudwatchLoggingOptionsOutput]](value)
	return pulumix.GPtrOutput[AnalyticsApplicationCloudwatchLoggingOptions, AnalyticsApplicationCloudwatchLoggingOptionsOutput]{OutputState: unwrapped.OutputState}
}

// SQL Code to transform input data, and generate output.
func (o AnalyticsApplicationOutput) Code() pulumix.Output[*string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[*string] { return v.Code })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Timestamp when the application version was created.
func (o AnalyticsApplicationOutput) CreateTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[string] { return v.CreateTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the application.
func (o AnalyticsApplicationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Input configuration of the application. See Inputs below for more details.
func (o AnalyticsApplicationOutput) Inputs() pulumix.GPtrOutput[AnalyticsApplicationInputs, AnalyticsApplicationInputsOutput] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.GPtrOutput[AnalyticsApplicationInputs, AnalyticsApplicationInputsOutput] {
		return v.Inputs
	})
	unwrapped := pulumix.Flatten[*AnalyticsApplicationInputs, pulumix.GPtrOutput[AnalyticsApplicationInputs, AnalyticsApplicationInputsOutput]](value)
	return pulumix.GPtrOutput[AnalyticsApplicationInputs, AnalyticsApplicationInputsOutput]{OutputState: unwrapped.OutputState}
}

// The Timestamp when the application was last updated.
func (o AnalyticsApplicationOutput) LastUpdateTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[string] { return v.LastUpdateTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the Kinesis Analytics Application.
func (o AnalyticsApplicationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Output destination configuration of the application. See Outputs below for more details.
func (o AnalyticsApplicationOutput) Outputs() pulumix.GArrayOutput[AnalyticsApplicationOutputType, AnalyticsApplicationOutputTypeOutput] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.GArrayOutput[AnalyticsApplicationOutputType, AnalyticsApplicationOutputTypeOutput] {
		return v.Outputs
	})
	unwrapped := pulumix.Flatten[[]AnalyticsApplicationOutputType, pulumix.GArrayOutput[AnalyticsApplicationOutputType, AnalyticsApplicationOutputTypeOutput]](value)
	return pulumix.GArrayOutput[AnalyticsApplicationOutputType, AnalyticsApplicationOutputTypeOutput]{OutputState: unwrapped.OutputState}
}

// An S3 Reference Data Source for the application.
// See Reference Data Sources below for more details.
func (o AnalyticsApplicationOutput) ReferenceDataSources() pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSources, AnalyticsApplicationReferenceDataSourcesOutput] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSources, AnalyticsApplicationReferenceDataSourcesOutput] {
		return v.ReferenceDataSources
	})
	unwrapped := pulumix.Flatten[*AnalyticsApplicationReferenceDataSources, pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSources, AnalyticsApplicationReferenceDataSourcesOutput]](value)
	return pulumix.GPtrOutput[AnalyticsApplicationReferenceDataSources, AnalyticsApplicationReferenceDataSourcesOutput]{OutputState: unwrapped.OutputState}
}

// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined `startingPosition` must be configured.
// To modify an application's starting position, first stop the application by setting `startApplication = false`, then update `startingPosition` and set `startApplication = true`.
func (o AnalyticsApplicationOutput) StartApplication() pulumix.Output[*bool] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[*bool] { return v.StartApplication })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Status of the application.
func (o AnalyticsApplicationOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of tags for the Kinesis Analytics Application. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AnalyticsApplicationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AnalyticsApplicationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Version of the application.
func (o AnalyticsApplicationOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[AnalyticsApplication](o, func(v AnalyticsApplication) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsApplicationOutput{})
}
