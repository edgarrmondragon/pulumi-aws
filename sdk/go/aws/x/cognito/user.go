// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito User Resource.
type User struct {
	pulumi.CustomResourceState

	// A map that contains user attributes and attribute values to be set for the user.
	Attributes pulumix.MapOutput[string] `pulumi:"attributes"`
	// A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the `clientMetadata` value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	ClientMetadata pulumix.MapOutput[string] `pulumi:"clientMetadata"`
	CreationDate   pulumix.Output[string]    `pulumi:"creationDate"`
	// A list of mediums to the welcome message will be sent through. Allowed values are `EMAIL` and `SMS`. If it's provided, make sure you have also specified `email` attribute for the `EMAIL` medium and `phoneNumber` for the `SMS`. More than one value can be specified. Amazon Cognito does not store the `desiredDeliveryMediums` value. Defaults to `["SMS"]`.
	DesiredDeliveryMediums pulumix.ArrayOutput[string] `pulumi:"desiredDeliveryMediums"`
	// Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the `enabled` value. The behavior can be changed with `messageAction` argument. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// If this parameter is set to True and the `phoneNumber` or `email` address specified in the `attributes` parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the `forceAliasCreation` value. Defaults to `false`.
	ForceAliasCreation pulumix.Output[*bool]  `pulumi:"forceAliasCreation"`
	LastModifiedDate   pulumix.Output[string] `pulumi:"lastModifiedDate"`
	// Set to `RESEND` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to `SUPPRESS` to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the `messageAction` value.
	MessageAction   pulumix.Output[*string]     `pulumi:"messageAction"`
	MfaSettingLists pulumix.ArrayOutput[string] `pulumi:"mfaSettingLists"`
	// The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only `temporaryPassword` value. You can suppress sending the welcome message with the `messageAction` argument. Amazon Cognito does not store the `password` value. Conflicts with `temporaryPassword`.
	Password            pulumix.Output[*string] `pulumi:"password"`
	PreferredMfaSetting pulumix.Output[string]  `pulumi:"preferredMfaSetting"`
	// current user status.
	Status pulumix.Output[string] `pulumi:"status"`
	// unique user id that is never reassignable to another user.
	Sub pulumix.Output[string] `pulumi:"sub"`
	// The user's temporary password. Conflicts with `password`.
	TemporaryPassword pulumix.Output[*string] `pulumi:"temporaryPassword"`
	// The user pool ID for the user pool where the user will be created.
	UserPoolId pulumix.Output[string] `pulumi:"userPoolId"`
	// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
	//
	// The following arguments are optional:
	Username pulumix.Output[string] `pulumi:"username"`
	// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the `validationData` value. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	//
	// > **NOTE:** Clearing `password` or `temporaryPassword` does not reset user's password in Cognito.
	ValidationData pulumix.MapOutput[string] `pulumi:"validationData"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.TemporaryPassword != nil {
		untypedSecretValue := pulumi.ToSecret(args.TemporaryPassword.ToOutput(ctx.Context()).Untyped())
		args.TemporaryPassword = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"temporaryPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("aws:cognito/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:cognito/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// A map that contains user attributes and attribute values to be set for the user.
	Attributes map[string]string `pulumi:"attributes"`
	// A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the `clientMetadata` value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	ClientMetadata map[string]string `pulumi:"clientMetadata"`
	CreationDate   *string           `pulumi:"creationDate"`
	// A list of mediums to the welcome message will be sent through. Allowed values are `EMAIL` and `SMS`. If it's provided, make sure you have also specified `email` attribute for the `EMAIL` medium and `phoneNumber` for the `SMS`. More than one value can be specified. Amazon Cognito does not store the `desiredDeliveryMediums` value. Defaults to `["SMS"]`.
	DesiredDeliveryMediums []string `pulumi:"desiredDeliveryMediums"`
	// Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the `enabled` value. The behavior can be changed with `messageAction` argument. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// If this parameter is set to True and the `phoneNumber` or `email` address specified in the `attributes` parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the `forceAliasCreation` value. Defaults to `false`.
	ForceAliasCreation *bool   `pulumi:"forceAliasCreation"`
	LastModifiedDate   *string `pulumi:"lastModifiedDate"`
	// Set to `RESEND` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to `SUPPRESS` to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the `messageAction` value.
	MessageAction   *string  `pulumi:"messageAction"`
	MfaSettingLists []string `pulumi:"mfaSettingLists"`
	// The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only `temporaryPassword` value. You can suppress sending the welcome message with the `messageAction` argument. Amazon Cognito does not store the `password` value. Conflicts with `temporaryPassword`.
	Password            *string `pulumi:"password"`
	PreferredMfaSetting *string `pulumi:"preferredMfaSetting"`
	// current user status.
	Status *string `pulumi:"status"`
	// unique user id that is never reassignable to another user.
	Sub *string `pulumi:"sub"`
	// The user's temporary password. Conflicts with `password`.
	TemporaryPassword *string `pulumi:"temporaryPassword"`
	// The user pool ID for the user pool where the user will be created.
	UserPoolId *string `pulumi:"userPoolId"`
	// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
	//
	// The following arguments are optional:
	Username *string `pulumi:"username"`
	// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the `validationData` value. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	//
	// > **NOTE:** Clearing `password` or `temporaryPassword` does not reset user's password in Cognito.
	ValidationData map[string]string `pulumi:"validationData"`
}

type UserState struct {
	// A map that contains user attributes and attribute values to be set for the user.
	Attributes pulumix.Input[map[string]string]
	// A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the `clientMetadata` value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	ClientMetadata pulumix.Input[map[string]string]
	CreationDate   pulumix.Input[*string]
	// A list of mediums to the welcome message will be sent through. Allowed values are `EMAIL` and `SMS`. If it's provided, make sure you have also specified `email` attribute for the `EMAIL` medium and `phoneNumber` for the `SMS`. More than one value can be specified. Amazon Cognito does not store the `desiredDeliveryMediums` value. Defaults to `["SMS"]`.
	DesiredDeliveryMediums pulumix.Input[[]string]
	// Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the `enabled` value. The behavior can be changed with `messageAction` argument. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// If this parameter is set to True and the `phoneNumber` or `email` address specified in the `attributes` parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the `forceAliasCreation` value. Defaults to `false`.
	ForceAliasCreation pulumix.Input[*bool]
	LastModifiedDate   pulumix.Input[*string]
	// Set to `RESEND` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to `SUPPRESS` to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the `messageAction` value.
	MessageAction   pulumix.Input[*string]
	MfaSettingLists pulumix.Input[[]string]
	// The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only `temporaryPassword` value. You can suppress sending the welcome message with the `messageAction` argument. Amazon Cognito does not store the `password` value. Conflicts with `temporaryPassword`.
	Password            pulumix.Input[*string]
	PreferredMfaSetting pulumix.Input[*string]
	// current user status.
	Status pulumix.Input[*string]
	// unique user id that is never reassignable to another user.
	Sub pulumix.Input[*string]
	// The user's temporary password. Conflicts with `password`.
	TemporaryPassword pulumix.Input[*string]
	// The user pool ID for the user pool where the user will be created.
	UserPoolId pulumix.Input[*string]
	// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
	//
	// The following arguments are optional:
	Username pulumix.Input[*string]
	// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the `validationData` value. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	//
	// > **NOTE:** Clearing `password` or `temporaryPassword` does not reset user's password in Cognito.
	ValidationData pulumix.Input[map[string]string]
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// A map that contains user attributes and attribute values to be set for the user.
	Attributes map[string]string `pulumi:"attributes"`
	// A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the `clientMetadata` value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	ClientMetadata map[string]string `pulumi:"clientMetadata"`
	// A list of mediums to the welcome message will be sent through. Allowed values are `EMAIL` and `SMS`. If it's provided, make sure you have also specified `email` attribute for the `EMAIL` medium and `phoneNumber` for the `SMS`. More than one value can be specified. Amazon Cognito does not store the `desiredDeliveryMediums` value. Defaults to `["SMS"]`.
	DesiredDeliveryMediums []string `pulumi:"desiredDeliveryMediums"`
	// Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the `enabled` value. The behavior can be changed with `messageAction` argument. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// If this parameter is set to True and the `phoneNumber` or `email` address specified in the `attributes` parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the `forceAliasCreation` value. Defaults to `false`.
	ForceAliasCreation *bool `pulumi:"forceAliasCreation"`
	// Set to `RESEND` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to `SUPPRESS` to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the `messageAction` value.
	MessageAction *string `pulumi:"messageAction"`
	// The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only `temporaryPassword` value. You can suppress sending the welcome message with the `messageAction` argument. Amazon Cognito does not store the `password` value. Conflicts with `temporaryPassword`.
	Password *string `pulumi:"password"`
	// The user's temporary password. Conflicts with `password`.
	TemporaryPassword *string `pulumi:"temporaryPassword"`
	// The user pool ID for the user pool where the user will be created.
	UserPoolId string `pulumi:"userPoolId"`
	// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
	//
	// The following arguments are optional:
	Username string `pulumi:"username"`
	// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the `validationData` value. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	//
	// > **NOTE:** Clearing `password` or `temporaryPassword` does not reset user's password in Cognito.
	ValidationData map[string]string `pulumi:"validationData"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// A map that contains user attributes and attribute values to be set for the user.
	Attributes pulumix.Input[map[string]string]
	// A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the `clientMetadata` value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	ClientMetadata pulumix.Input[map[string]string]
	// A list of mediums to the welcome message will be sent through. Allowed values are `EMAIL` and `SMS`. If it's provided, make sure you have also specified `email` attribute for the `EMAIL` medium and `phoneNumber` for the `SMS`. More than one value can be specified. Amazon Cognito does not store the `desiredDeliveryMediums` value. Defaults to `["SMS"]`.
	DesiredDeliveryMediums pulumix.Input[[]string]
	// Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the `enabled` value. The behavior can be changed with `messageAction` argument. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// If this parameter is set to True and the `phoneNumber` or `email` address specified in the `attributes` parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the `forceAliasCreation` value. Defaults to `false`.
	ForceAliasCreation pulumix.Input[*bool]
	// Set to `RESEND` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to `SUPPRESS` to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the `messageAction` value.
	MessageAction pulumix.Input[*string]
	// The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only `temporaryPassword` value. You can suppress sending the welcome message with the `messageAction` argument. Amazon Cognito does not store the `password` value. Conflicts with `temporaryPassword`.
	Password pulumix.Input[*string]
	// The user's temporary password. Conflicts with `password`.
	TemporaryPassword pulumix.Input[*string]
	// The user pool ID for the user pool where the user will be created.
	UserPoolId pulumix.Input[string]
	// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
	//
	// The following arguments are optional:
	Username pulumix.Input[string]
	// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the `validationData` value. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
	//
	// > **NOTE:** Clearing `password` or `temporaryPassword` does not reset user's password in Cognito.
	ValidationData pulumix.Input[map[string]string]
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ToOutput(ctx context.Context) pulumix.Output[User] {
	return pulumix.Output[User]{
		OutputState: o.OutputState,
	}
}

// A map that contains user attributes and attribute values to be set for the user.
func (o UserOutput) Attributes() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.Attributes })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the `clientMetadata` value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
func (o UserOutput) ClientMetadata() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.ClientMetadata })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o UserOutput) CreationDate() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.CreationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of mediums to the welcome message will be sent through. Allowed values are `EMAIL` and `SMS`. If it's provided, make sure you have also specified `email` attribute for the `EMAIL` medium and `phoneNumber` for the `SMS`. More than one value can be specified. Amazon Cognito does not store the `desiredDeliveryMediums` value. Defaults to `["SMS"]`.
func (o UserOutput) DesiredDeliveryMediums() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.ArrayOutput[string] { return v.DesiredDeliveryMediums })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the `enabled` value. The behavior can be changed with `messageAction` argument. Defaults to `true`.
func (o UserOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// If this parameter is set to True and the `phoneNumber` or `email` address specified in the `attributes` parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the `forceAliasCreation` value. Defaults to `false`.
func (o UserOutput) ForceAliasCreation() pulumix.Output[*bool] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*bool] { return v.ForceAliasCreation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o UserOutput) LastModifiedDate() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.LastModifiedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set to `RESEND` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to `SUPPRESS` to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the `messageAction` value.
func (o UserOutput) MessageAction() pulumix.Output[*string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*string] { return v.MessageAction })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o UserOutput) MfaSettingLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.ArrayOutput[string] { return v.MfaSettingLists })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only `temporaryPassword` value. You can suppress sending the welcome message with the `messageAction` argument. Amazon Cognito does not store the `password` value. Conflicts with `temporaryPassword`.
func (o UserOutput) Password() pulumix.Output[*string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*string] { return v.Password })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o UserOutput) PreferredMfaSetting() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.PreferredMfaSetting })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// current user status.
func (o UserOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// unique user id that is never reassignable to another user.
func (o UserOutput) Sub() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Sub })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user's temporary password. Conflicts with `password`.
func (o UserOutput) TemporaryPassword() pulumix.Output[*string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*string] { return v.TemporaryPassword })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The user pool ID for the user pool where the user will be created.
func (o UserOutput) UserPoolId() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.UserPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.
//
// The following arguments are optional:
func (o UserOutput) Username() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Username })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the `validationData` value. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).
//
// > **NOTE:** Clearing `password` or `temporaryPassword` does not reset user's password in Cognito.
func (o UserOutput) ValidationData() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.ValidationData })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
