// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type TableCapacitySpecification struct {
	// The throughput capacity specified for read operations defined in read capacity units (RCUs).
	ReadCapacityUnits *int `pulumi:"readCapacityUnits"`
	// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
	ThroughputMode *string `pulumi:"throughputMode"`
	// The throughput capacity specified for write operations defined in write capacity units (WCUs).
	WriteCapacityUnits *int `pulumi:"writeCapacityUnits"`
}

type TableCapacitySpecificationArgs struct {
	// The throughput capacity specified for read operations defined in read capacity units (RCUs).
	ReadCapacityUnits pulumix.Input[*int] `pulumi:"readCapacityUnits"`
	// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
	ThroughputMode pulumix.Input[*string] `pulumi:"throughputMode"`
	// The throughput capacity specified for write operations defined in write capacity units (WCUs).
	WriteCapacityUnits pulumix.Input[*int] `pulumi:"writeCapacityUnits"`
}

func (TableCapacitySpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableCapacitySpecification)(nil)).Elem()
}

func (i TableCapacitySpecificationArgs) ToTableCapacitySpecificationOutput() TableCapacitySpecificationOutput {
	return i.ToTableCapacitySpecificationOutputWithContext(context.Background())
}

func (i TableCapacitySpecificationArgs) ToTableCapacitySpecificationOutputWithContext(ctx context.Context) TableCapacitySpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCapacitySpecificationOutput)
}

func (i *TableCapacitySpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*TableCapacitySpecificationArgs] {
	return pulumix.Val(i)
}

type TableCapacitySpecificationOutput struct{ *pulumi.OutputState }

func (TableCapacitySpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableCapacitySpecification)(nil)).Elem()
}

func (o TableCapacitySpecificationOutput) ToTableCapacitySpecificationOutput() TableCapacitySpecificationOutput {
	return o
}

func (o TableCapacitySpecificationOutput) ToTableCapacitySpecificationOutputWithContext(ctx context.Context) TableCapacitySpecificationOutput {
	return o
}

func (o TableCapacitySpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[TableCapacitySpecification] {
	return pulumix.Output[TableCapacitySpecification]{
		OutputState: o.OutputState,
	}
}

// The throughput capacity specified for read operations defined in read capacity units (RCUs).
func (o TableCapacitySpecificationOutput) ReadCapacityUnits() pulumix.Output[*int] {
	return pulumix.Apply[TableCapacitySpecification](o, func(v TableCapacitySpecification) *int { return v.ReadCapacityUnits })
}

// The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
func (o TableCapacitySpecificationOutput) ThroughputMode() pulumix.Output[*string] {
	return pulumix.Apply[TableCapacitySpecification](o, func(v TableCapacitySpecification) *string { return v.ThroughputMode })
}

// The throughput capacity specified for write operations defined in write capacity units (WCUs).
func (o TableCapacitySpecificationOutput) WriteCapacityUnits() pulumix.Output[*int] {
	return pulumix.Apply[TableCapacitySpecification](o, func(v TableCapacitySpecification) *int { return v.WriteCapacityUnits })
}

type TableClientSideTimestamps struct {
	// Shows how to enable client-side timestamps settings for the specified table. Valid values: `ENABLED`.
	Status string `pulumi:"status"`
}

type TableClientSideTimestampsArgs struct {
	// Shows how to enable client-side timestamps settings for the specified table. Valid values: `ENABLED`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (TableClientSideTimestampsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableClientSideTimestamps)(nil)).Elem()
}

func (i TableClientSideTimestampsArgs) ToTableClientSideTimestampsOutput() TableClientSideTimestampsOutput {
	return i.ToTableClientSideTimestampsOutputWithContext(context.Background())
}

func (i TableClientSideTimestampsArgs) ToTableClientSideTimestampsOutputWithContext(ctx context.Context) TableClientSideTimestampsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableClientSideTimestampsOutput)
}

func (i *TableClientSideTimestampsArgs) ToOutput(ctx context.Context) pulumix.Output[*TableClientSideTimestampsArgs] {
	return pulumix.Val(i)
}

type TableClientSideTimestampsOutput struct{ *pulumi.OutputState }

func (TableClientSideTimestampsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableClientSideTimestamps)(nil)).Elem()
}

func (o TableClientSideTimestampsOutput) ToTableClientSideTimestampsOutput() TableClientSideTimestampsOutput {
	return o
}

func (o TableClientSideTimestampsOutput) ToTableClientSideTimestampsOutputWithContext(ctx context.Context) TableClientSideTimestampsOutput {
	return o
}

func (o TableClientSideTimestampsOutput) ToOutput(ctx context.Context) pulumix.Output[TableClientSideTimestamps] {
	return pulumix.Output[TableClientSideTimestamps]{
		OutputState: o.OutputState,
	}
}

// Shows how to enable client-side timestamps settings for the specified table. Valid values: `ENABLED`.
func (o TableClientSideTimestampsOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[TableClientSideTimestamps](o, func(v TableClientSideTimestamps) string { return v.Status })
}

type TableComment struct {
	// A description of the table.
	Message *string `pulumi:"message"`
}

type TableCommentArgs struct {
	// A description of the table.
	Message pulumix.Input[*string] `pulumi:"message"`
}

func (TableCommentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableComment)(nil)).Elem()
}

func (i TableCommentArgs) ToTableCommentOutput() TableCommentOutput {
	return i.ToTableCommentOutputWithContext(context.Background())
}

func (i TableCommentArgs) ToTableCommentOutputWithContext(ctx context.Context) TableCommentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCommentOutput)
}

func (i *TableCommentArgs) ToOutput(ctx context.Context) pulumix.Output[*TableCommentArgs] {
	return pulumix.Val(i)
}

type TableCommentOutput struct{ *pulumi.OutputState }

func (TableCommentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableComment)(nil)).Elem()
}

func (o TableCommentOutput) ToTableCommentOutput() TableCommentOutput {
	return o
}

func (o TableCommentOutput) ToTableCommentOutputWithContext(ctx context.Context) TableCommentOutput {
	return o
}

func (o TableCommentOutput) ToOutput(ctx context.Context) pulumix.Output[TableComment] {
	return pulumix.Output[TableComment]{
		OutputState: o.OutputState,
	}
}

// A description of the table.
func (o TableCommentOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[TableComment](o, func(v TableComment) *string { return v.Message })
}

type TableEncryptionSpecification struct {
	// The Amazon Resource Name (ARN) of the customer managed KMS key.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
	Type *string `pulumi:"type"`
}

type TableEncryptionSpecificationArgs struct {
	// The Amazon Resource Name (ARN) of the customer managed KMS key.
	KmsKeyIdentifier pulumix.Input[*string] `pulumi:"kmsKeyIdentifier"`
	// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (TableEncryptionSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionSpecification)(nil)).Elem()
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput {
	return i.ToTableEncryptionSpecificationOutputWithContext(context.Background())
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationOutputWithContext(ctx context.Context) TableEncryptionSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationOutput)
}

func (i *TableEncryptionSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[*TableEncryptionSpecificationArgs] {
	return pulumix.Val(i)
}

type TableEncryptionSpecificationOutput struct{ *pulumi.OutputState }

func (TableEncryptionSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionSpecification)(nil)).Elem()
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput {
	return o
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationOutputWithContext(ctx context.Context) TableEncryptionSpecificationOutput {
	return o
}

func (o TableEncryptionSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[TableEncryptionSpecification] {
	return pulumix.Output[TableEncryptionSpecification]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the customer managed KMS key.
func (o TableEncryptionSpecificationOutput) KmsKeyIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[TableEncryptionSpecification](o, func(v TableEncryptionSpecification) *string { return v.KmsKeyIdentifier })
}

// The encryption option specified for the table. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_MANAGED_KMS_KEY`. The default value is `AWS_OWNED_KMS_KEY`.
func (o TableEncryptionSpecificationOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[TableEncryptionSpecification](o, func(v TableEncryptionSpecification) *string { return v.Type })
}

type TablePointInTimeRecovery struct {
	// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
	Status *string `pulumi:"status"`
}

type TablePointInTimeRecoveryArgs struct {
	// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (TablePointInTimeRecoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return i.ToTablePointInTimeRecoveryOutputWithContext(context.Background())
}

func (i TablePointInTimeRecoveryArgs) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePointInTimeRecoveryOutput)
}

func (i *TablePointInTimeRecoveryArgs) ToOutput(ctx context.Context) pulumix.Output[*TablePointInTimeRecoveryArgs] {
	return pulumix.Val(i)
}

type TablePointInTimeRecoveryOutput struct{ *pulumi.OutputState }

func (TablePointInTimeRecoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePointInTimeRecovery)(nil)).Elem()
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutput() TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToTablePointInTimeRecoveryOutputWithContext(ctx context.Context) TablePointInTimeRecoveryOutput {
	return o
}

func (o TablePointInTimeRecoveryOutput) ToOutput(ctx context.Context) pulumix.Output[TablePointInTimeRecovery] {
	return pulumix.Output[TablePointInTimeRecovery]{
		OutputState: o.OutputState,
	}
}

// Valid values: `ENABLED`, `DISABLED`. The default value is `DISABLED`.
func (o TablePointInTimeRecoveryOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[TablePointInTimeRecovery](o, func(v TablePointInTimeRecovery) *string { return v.Status })
}

type TableSchemaDefinition struct {
	// The columns that are part of the clustering key of the table.
	ClusteringKeys []TableSchemaDefinitionClusteringKey `pulumi:"clusteringKeys"`
	// The regular columns of the table.
	Columns []TableSchemaDefinitionColumn `pulumi:"columns"`
	// The columns that are part of the partition key of the table .
	PartitionKeys []TableSchemaDefinitionPartitionKey `pulumi:"partitionKeys"`
	// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
	StaticColumns []TableSchemaDefinitionStaticColumn `pulumi:"staticColumns"`
}

type TableSchemaDefinitionArgs struct {
	// The columns that are part of the clustering key of the table.
	ClusteringKeys pulumix.Input[[]*TableSchemaDefinitionClusteringKeyArgs] `pulumi:"clusteringKeys"`
	// The regular columns of the table.
	Columns pulumix.Input[[]*TableSchemaDefinitionColumnArgs] `pulumi:"columns"`
	// The columns that are part of the partition key of the table .
	PartitionKeys pulumix.Input[[]*TableSchemaDefinitionPartitionKeyArgs] `pulumi:"partitionKeys"`
	// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
	StaticColumns pulumix.Input[[]*TableSchemaDefinitionStaticColumnArgs] `pulumi:"staticColumns"`
}

func (TableSchemaDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinition)(nil)).Elem()
}

func (i TableSchemaDefinitionArgs) ToTableSchemaDefinitionOutput() TableSchemaDefinitionOutput {
	return i.ToTableSchemaDefinitionOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionArgs) ToTableSchemaDefinitionOutputWithContext(ctx context.Context) TableSchemaDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionOutput)
}

func (i *TableSchemaDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaDefinitionArgs] {
	return pulumix.Val(i)
}

type TableSchemaDefinitionOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinition)(nil)).Elem()
}

func (o TableSchemaDefinitionOutput) ToTableSchemaDefinitionOutput() TableSchemaDefinitionOutput {
	return o
}

func (o TableSchemaDefinitionOutput) ToTableSchemaDefinitionOutputWithContext(ctx context.Context) TableSchemaDefinitionOutput {
	return o
}

func (o TableSchemaDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaDefinition] {
	return pulumix.Output[TableSchemaDefinition]{
		OutputState: o.OutputState,
	}
}

// The columns that are part of the clustering key of the table.
func (o TableSchemaDefinitionOutput) ClusteringKeys() pulumix.GArrayOutput[TableSchemaDefinitionClusteringKey, TableSchemaDefinitionClusteringKeyOutput] {
	value := pulumix.Apply[TableSchemaDefinition](o, func(v TableSchemaDefinition) []TableSchemaDefinitionClusteringKey { return v.ClusteringKeys })
	return pulumix.GArrayOutput[TableSchemaDefinitionClusteringKey, TableSchemaDefinitionClusteringKeyOutput]{OutputState: value.OutputState}
}

// The regular columns of the table.
func (o TableSchemaDefinitionOutput) Columns() pulumix.GArrayOutput[TableSchemaDefinitionColumn, TableSchemaDefinitionColumnOutput] {
	value := pulumix.Apply[TableSchemaDefinition](o, func(v TableSchemaDefinition) []TableSchemaDefinitionColumn { return v.Columns })
	return pulumix.GArrayOutput[TableSchemaDefinitionColumn, TableSchemaDefinitionColumnOutput]{OutputState: value.OutputState}
}

// The columns that are part of the partition key of the table .
func (o TableSchemaDefinitionOutput) PartitionKeys() pulumix.GArrayOutput[TableSchemaDefinitionPartitionKey, TableSchemaDefinitionPartitionKeyOutput] {
	value := pulumix.Apply[TableSchemaDefinition](o, func(v TableSchemaDefinition) []TableSchemaDefinitionPartitionKey { return v.PartitionKeys })
	return pulumix.GArrayOutput[TableSchemaDefinitionPartitionKey, TableSchemaDefinitionPartitionKeyOutput]{OutputState: value.OutputState}
}

// The columns that have been defined as `STATIC`. Static columns store values that are shared by all rows in the same partition.
func (o TableSchemaDefinitionOutput) StaticColumns() pulumix.GArrayOutput[TableSchemaDefinitionStaticColumn, TableSchemaDefinitionStaticColumnOutput] {
	value := pulumix.Apply[TableSchemaDefinition](o, func(v TableSchemaDefinition) []TableSchemaDefinitionStaticColumn { return v.StaticColumns })
	return pulumix.GArrayOutput[TableSchemaDefinitionStaticColumn, TableSchemaDefinitionStaticColumnOutput]{OutputState: value.OutputState}
}

type TableSchemaDefinitionClusteringKey struct {
	// The name of the clustering key column.
	Name string `pulumi:"name"`
	// The order modifier. Valid values: `ASC`, `DESC`.
	OrderBy string `pulumi:"orderBy"`
}

type TableSchemaDefinitionClusteringKeyArgs struct {
	// The name of the clustering key column.
	Name pulumix.Input[string] `pulumi:"name"`
	// The order modifier. Valid values: `ASC`, `DESC`.
	OrderBy pulumix.Input[string] `pulumi:"orderBy"`
}

func (TableSchemaDefinitionClusteringKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionClusteringKey)(nil)).Elem()
}

func (i TableSchemaDefinitionClusteringKeyArgs) ToTableSchemaDefinitionClusteringKeyOutput() TableSchemaDefinitionClusteringKeyOutput {
	return i.ToTableSchemaDefinitionClusteringKeyOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionClusteringKeyArgs) ToTableSchemaDefinitionClusteringKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionClusteringKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionClusteringKeyOutput)
}

func (i *TableSchemaDefinitionClusteringKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaDefinitionClusteringKeyArgs] {
	return pulumix.Val(i)
}

type TableSchemaDefinitionClusteringKeyOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionClusteringKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionClusteringKey)(nil)).Elem()
}

func (o TableSchemaDefinitionClusteringKeyOutput) ToTableSchemaDefinitionClusteringKeyOutput() TableSchemaDefinitionClusteringKeyOutput {
	return o
}

func (o TableSchemaDefinitionClusteringKeyOutput) ToTableSchemaDefinitionClusteringKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionClusteringKeyOutput {
	return o
}

func (o TableSchemaDefinitionClusteringKeyOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaDefinitionClusteringKey] {
	return pulumix.Output[TableSchemaDefinitionClusteringKey]{
		OutputState: o.OutputState,
	}
}

// The name of the clustering key column.
func (o TableSchemaDefinitionClusteringKeyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaDefinitionClusteringKey](o, func(v TableSchemaDefinitionClusteringKey) string { return v.Name })
}

// The order modifier. Valid values: `ASC`, `DESC`.
func (o TableSchemaDefinitionClusteringKeyOutput) OrderBy() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaDefinitionClusteringKey](o, func(v TableSchemaDefinitionClusteringKey) string { return v.OrderBy })
}

type TableSchemaDefinitionColumn struct {
	// The name of the column.
	Name string `pulumi:"name"`
	// The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.
	Type string `pulumi:"type"`
}

type TableSchemaDefinitionColumnArgs struct {
	// The name of the column.
	Name pulumix.Input[string] `pulumi:"name"`
	// The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TableSchemaDefinitionColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionColumn)(nil)).Elem()
}

func (i TableSchemaDefinitionColumnArgs) ToTableSchemaDefinitionColumnOutput() TableSchemaDefinitionColumnOutput {
	return i.ToTableSchemaDefinitionColumnOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionColumnArgs) ToTableSchemaDefinitionColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionColumnOutput)
}

func (i *TableSchemaDefinitionColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaDefinitionColumnArgs] {
	return pulumix.Val(i)
}

type TableSchemaDefinitionColumnOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionColumn)(nil)).Elem()
}

func (o TableSchemaDefinitionColumnOutput) ToTableSchemaDefinitionColumnOutput() TableSchemaDefinitionColumnOutput {
	return o
}

func (o TableSchemaDefinitionColumnOutput) ToTableSchemaDefinitionColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionColumnOutput {
	return o
}

func (o TableSchemaDefinitionColumnOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaDefinitionColumn] {
	return pulumix.Output[TableSchemaDefinitionColumn]{
		OutputState: o.OutputState,
	}
}

// The name of the column.
func (o TableSchemaDefinitionColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaDefinitionColumn](o, func(v TableSchemaDefinitionColumn) string { return v.Name })
}

// The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.
func (o TableSchemaDefinitionColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaDefinitionColumn](o, func(v TableSchemaDefinitionColumn) string { return v.Type })
}

type TableSchemaDefinitionPartitionKey struct {
	// The name of the partition key column.
	Name string `pulumi:"name"`
}

type TableSchemaDefinitionPartitionKeyArgs struct {
	// The name of the partition key column.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (TableSchemaDefinitionPartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionPartitionKey)(nil)).Elem()
}

func (i TableSchemaDefinitionPartitionKeyArgs) ToTableSchemaDefinitionPartitionKeyOutput() TableSchemaDefinitionPartitionKeyOutput {
	return i.ToTableSchemaDefinitionPartitionKeyOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionPartitionKeyArgs) ToTableSchemaDefinitionPartitionKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionPartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionPartitionKeyOutput)
}

func (i *TableSchemaDefinitionPartitionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaDefinitionPartitionKeyArgs] {
	return pulumix.Val(i)
}

type TableSchemaDefinitionPartitionKeyOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionPartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionPartitionKey)(nil)).Elem()
}

func (o TableSchemaDefinitionPartitionKeyOutput) ToTableSchemaDefinitionPartitionKeyOutput() TableSchemaDefinitionPartitionKeyOutput {
	return o
}

func (o TableSchemaDefinitionPartitionKeyOutput) ToTableSchemaDefinitionPartitionKeyOutputWithContext(ctx context.Context) TableSchemaDefinitionPartitionKeyOutput {
	return o
}

func (o TableSchemaDefinitionPartitionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaDefinitionPartitionKey] {
	return pulumix.Output[TableSchemaDefinitionPartitionKey]{
		OutputState: o.OutputState,
	}
}

// The name of the partition key column.
func (o TableSchemaDefinitionPartitionKeyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaDefinitionPartitionKey](o, func(v TableSchemaDefinitionPartitionKey) string { return v.Name })
}

type TableSchemaDefinitionStaticColumn struct {
	// The name of the static column.
	Name string `pulumi:"name"`
}

type TableSchemaDefinitionStaticColumnArgs struct {
	// The name of the static column.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (TableSchemaDefinitionStaticColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionStaticColumn)(nil)).Elem()
}

func (i TableSchemaDefinitionStaticColumnArgs) ToTableSchemaDefinitionStaticColumnOutput() TableSchemaDefinitionStaticColumnOutput {
	return i.ToTableSchemaDefinitionStaticColumnOutputWithContext(context.Background())
}

func (i TableSchemaDefinitionStaticColumnArgs) ToTableSchemaDefinitionStaticColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionStaticColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaDefinitionStaticColumnOutput)
}

func (i *TableSchemaDefinitionStaticColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaDefinitionStaticColumnArgs] {
	return pulumix.Val(i)
}

type TableSchemaDefinitionStaticColumnOutput struct{ *pulumi.OutputState }

func (TableSchemaDefinitionStaticColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaDefinitionStaticColumn)(nil)).Elem()
}

func (o TableSchemaDefinitionStaticColumnOutput) ToTableSchemaDefinitionStaticColumnOutput() TableSchemaDefinitionStaticColumnOutput {
	return o
}

func (o TableSchemaDefinitionStaticColumnOutput) ToTableSchemaDefinitionStaticColumnOutputWithContext(ctx context.Context) TableSchemaDefinitionStaticColumnOutput {
	return o
}

func (o TableSchemaDefinitionStaticColumnOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaDefinitionStaticColumn] {
	return pulumix.Output[TableSchemaDefinitionStaticColumn]{
		OutputState: o.OutputState,
	}
}

// The name of the static column.
func (o TableSchemaDefinitionStaticColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TableSchemaDefinitionStaticColumn](o, func(v TableSchemaDefinitionStaticColumn) string { return v.Name })
}

type TableTtl struct {
	// Valid values: `ENABLED`.
	Status string `pulumi:"status"`
}

type TableTtlArgs struct {
	// Valid values: `ENABLED`.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (TableTtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (i TableTtlArgs) ToTableTtlOutput() TableTtlOutput {
	return i.ToTableTtlOutputWithContext(context.Background())
}

func (i TableTtlArgs) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTtlOutput)
}

func (i *TableTtlArgs) ToOutput(ctx context.Context) pulumix.Output[*TableTtlArgs] {
	return pulumix.Val(i)
}

type TableTtlOutput struct{ *pulumi.OutputState }

func (TableTtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTtl)(nil)).Elem()
}

func (o TableTtlOutput) ToTableTtlOutput() TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToTableTtlOutputWithContext(ctx context.Context) TableTtlOutput {
	return o
}

func (o TableTtlOutput) ToOutput(ctx context.Context) pulumix.Output[TableTtl] {
	return pulumix.Output[TableTtl]{
		OutputState: o.OutputState,
	}
}

// Valid values: `ENABLED`.
func (o TableTtlOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[TableTtl](o, func(v TableTtl) string { return v.Status })
}

func init() {
	pulumi.RegisterOutputType(TableCapacitySpecificationOutput{})
	pulumi.RegisterOutputType(TableClientSideTimestampsOutput{})
	pulumi.RegisterOutputType(TableCommentOutput{})
	pulumi.RegisterOutputType(TableEncryptionSpecificationOutput{})
	pulumi.RegisterOutputType(TablePointInTimeRecoveryOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionClusteringKeyOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionColumnOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionPartitionKeyOutput{})
	pulumi.RegisterOutputType(TableSchemaDefinitionStaticColumnOutput{})
	pulumi.RegisterOutputType(TableTtlOutput{})
}
