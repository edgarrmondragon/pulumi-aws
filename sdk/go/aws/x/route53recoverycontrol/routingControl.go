// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Route 53 Recovery Control Config Routing Control.
type RoutingControl struct {
	pulumi.CustomResourceState

	// ARN of the routing control.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ARN of the cluster in which this routing control will reside.
	ClusterArn pulumix.Output[string] `pulumi:"clusterArn"`
	// ARN of the control panel in which this routing control will reside.
	ControlPanelArn pulumix.Output[string] `pulumi:"controlPanelArn"`
	// The name describing the routing control.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewRoutingControl registers a new resource with the given unique name, arguments, and options.
func NewRoutingControl(ctx *pulumi.Context,
	name string, args *RoutingControlArgs, opts ...pulumi.ResourceOption) (*RoutingControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutingControl
	err := ctx.RegisterResource("aws:route53recoverycontrol/routingControl:RoutingControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingControl gets an existing RoutingControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingControlState, opts ...pulumi.ResourceOption) (*RoutingControl, error) {
	var resource RoutingControl
	err := ctx.ReadResource("aws:route53recoverycontrol/routingControl:RoutingControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingControl resources.
type routingControlState struct {
	// ARN of the routing control.
	Arn *string `pulumi:"arn"`
	// ARN of the cluster in which this routing control will reside.
	ClusterArn *string `pulumi:"clusterArn"`
	// ARN of the control panel in which this routing control will reside.
	ControlPanelArn *string `pulumi:"controlPanelArn"`
	// The name describing the routing control.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status *string `pulumi:"status"`
}

type RoutingControlState struct {
	// ARN of the routing control.
	Arn pulumix.Input[*string]
	// ARN of the cluster in which this routing control will reside.
	ClusterArn pulumix.Input[*string]
	// ARN of the control panel in which this routing control will reside.
	ControlPanelArn pulumix.Input[*string]
	// The name describing the routing control.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
	Status pulumix.Input[*string]
}

func (RoutingControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingControlState)(nil)).Elem()
}

type routingControlArgs struct {
	// ARN of the cluster in which this routing control will reside.
	ClusterArn string `pulumi:"clusterArn"`
	// ARN of the control panel in which this routing control will reside.
	ControlPanelArn *string `pulumi:"controlPanelArn"`
	// The name describing the routing control.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RoutingControl resource.
type RoutingControlArgs struct {
	// ARN of the cluster in which this routing control will reside.
	ClusterArn pulumix.Input[string]
	// ARN of the control panel in which this routing control will reside.
	ControlPanelArn pulumix.Input[*string]
	// The name describing the routing control.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
}

func (RoutingControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingControlArgs)(nil)).Elem()
}

type RoutingControlOutput struct{ *pulumi.OutputState }

func (RoutingControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingControl)(nil)).Elem()
}

func (o RoutingControlOutput) ToRoutingControlOutput() RoutingControlOutput {
	return o
}

func (o RoutingControlOutput) ToRoutingControlOutputWithContext(ctx context.Context) RoutingControlOutput {
	return o
}

func (o RoutingControlOutput) ToOutput(ctx context.Context) pulumix.Output[RoutingControl] {
	return pulumix.Output[RoutingControl]{
		OutputState: o.OutputState,
	}
}

// ARN of the routing control.
func (o RoutingControlOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RoutingControl](o, func(v RoutingControl) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the cluster in which this routing control will reside.
func (o RoutingControlOutput) ClusterArn() pulumix.Output[string] {
	value := pulumix.Apply[RoutingControl](o, func(v RoutingControl) pulumix.Output[string] { return v.ClusterArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the control panel in which this routing control will reside.
func (o RoutingControlOutput) ControlPanelArn() pulumix.Output[string] {
	value := pulumix.Apply[RoutingControl](o, func(v RoutingControl) pulumix.Output[string] { return v.ControlPanelArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name describing the routing control.
//
// The following arguments are optional:
func (o RoutingControlOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RoutingControl](o, func(v RoutingControl) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of routing control. `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
func (o RoutingControlOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[RoutingControl](o, func(v RoutingControl) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RoutingControlOutput{})
}
