// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ram.ResourceShare` Retrieve information about a RAM Resource Share.
func LookupResourceShare(ctx *pulumi.Context, args *LookupResourceShareArgs, opts ...pulumi.InvokeOption) (*LookupResourceShareResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourceShareResult
	err := ctx.Invoke("aws:ram/getResourceShare:getResourceShare", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourceShare.
type LookupResourceShareArgs struct {
	// Filter used to scope the list e.g., by tags. See [related docs] (https://docs.aws.amazon.com/ram/latest/APIReference/API_TagFilter.html).
	Filters []GetResourceShareFilter `pulumi:"filters"`
	// Name of the tag key to filter on.
	Name string `pulumi:"name"`
	// Owner of the resource share. Valid values are `SELF` or `OTHER-ACCOUNTS`.
	ResourceOwner string `pulumi:"resourceOwner"`
	// Specifies that you want to retrieve details of only those resource shares that have this status. Valid values are `PENDING`, `ACTIVE`, `FAILED`, `DELETING`, and `DELETED`.
	ResourceShareStatus *string `pulumi:"resourceShareStatus"`
	// Tags attached to the resource share.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getResourceShare.
type LookupResourceShareResult struct {
	// ARN of the resource share.
	Arn     string                   `pulumi:"arn"`
	Filters []GetResourceShareFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// ID of the AWS account that owns the resource share.
	OwningAccountId string `pulumi:"owningAccountId"`
	// A list of resource ARNs associated with the resource share.
	ResourceArns        []string `pulumi:"resourceArns"`
	ResourceOwner       string   `pulumi:"resourceOwner"`
	ResourceShareStatus *string  `pulumi:"resourceShareStatus"`
	// Status of the resource share.
	Status string `pulumi:"status"`
	// Tags attached to the resource share.
	Tags map[string]string `pulumi:"tags"`
}

func LookupResourceShareOutput(ctx *pulumi.Context, args LookupResourceShareOutputArgs, opts ...pulumi.InvokeOption) LookupResourceShareResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResourceShareArgs](args.ToOutput(), func(plainArgs *LookupResourceShareArgs) (*LookupResourceShareResult, error) {
		return LookupResourceShare(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResourceShareResultOutput, *LookupResourceShareResult](outputResult)
}

// A collection of arguments for invoking getResourceShare.
type LookupResourceShareOutputArgs struct {
	// Filter used to scope the list e.g., by tags. See [related docs] (https://docs.aws.amazon.com/ram/latest/APIReference/API_TagFilter.html).
	Filters pulumix.Input[[]*GetResourceShareFilterArgs] `pulumi:"filters"`
	// Name of the tag key to filter on.
	Name pulumix.Input[string] `pulumi:"name"`
	// Owner of the resource share. Valid values are `SELF` or `OTHER-ACCOUNTS`.
	ResourceOwner pulumix.Input[string] `pulumi:"resourceOwner"`
	// Specifies that you want to retrieve details of only those resource shares that have this status. Valid values are `PENDING`, `ACTIVE`, `FAILED`, `DELETING`, and `DELETED`.
	ResourceShareStatus pulumix.Input[*string] `pulumi:"resourceShareStatus"`
	// Tags attached to the resource share.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupResourceShareOutputArgs) ToOutput() pulumix.Output[*LookupResourceShareArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.ResourceOwner.ToOutput(context.Background()).AsAny(),
		args.ResourceShareStatus.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResourceShareArgs {
		return &LookupResourceShareArgs{
			Filters:             resolvedArgs[0].([]GetResourceShareFilter),
			Name:                resolvedArgs[1].(string),
			ResourceOwner:       resolvedArgs[2].(string),
			ResourceShareStatus: resolvedArgs[3].(*string),
			Tags:                resolvedArgs[4].(map[string]string),
		}
	})
}

type LookupResourceShareResultOutput struct{ *pulumi.OutputState }

func (LookupResourceShareResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceShareResult)(nil)).Elem()
}

func (o LookupResourceShareResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResourceShareResult] {
	return pulumix.Output[*LookupResourceShareResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResourceShareResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) string { return v.Arn })
}

func (o LookupResourceShareResultOutput) Filters() pulumix.GArrayOutput[GetResourceShareFilter, GetResourceShareFilterOutput] {
	value := pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) []GetResourceShareFilter { return v.Filters })
	return pulumix.GArrayOutput[GetResourceShareFilter, GetResourceShareFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupResourceShareResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) string { return v.Id })
}

func (o LookupResourceShareResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) string { return v.Name })
}

func (o LookupResourceShareResultOutput) OwningAccountId() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) string { return v.OwningAccountId })
}

func (o LookupResourceShareResultOutput) ResourceArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) []string { return v.ResourceArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupResourceShareResultOutput) ResourceOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) string { return v.ResourceOwner })
}

func (o LookupResourceShareResultOutput) ResourceShareStatus() pulumix.Output[*string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) *string { return v.ResourceShareStatus })
}

func (o LookupResourceShareResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) string { return v.Status })
}

func (o LookupResourceShareResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupResourceShareResult](o, func(v *LookupResourceShareResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
