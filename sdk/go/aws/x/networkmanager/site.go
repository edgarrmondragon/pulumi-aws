// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a site in a global network.
type Site struct {
	pulumi.CustomResourceState

	// Site Amazon Resource Name (ARN)
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the Site.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ID of the Global Network to create the site in.
	GlobalNetworkId pulumix.Output[string] `pulumi:"globalNetworkId"`
	// The site location as documented below.
	Location pulumix.GPtrOutput[SiteLocation, SiteLocationOutput] `pulumi:"location"`
	// Key-value tags for the Site. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSite registers a new resource with the given unique name, arguments, and options.
func NewSite(ctx *pulumi.Context,
	name string, args *SiteArgs, opts ...pulumi.ResourceOption) (*Site, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Site
	err := ctx.RegisterResource("aws:networkmanager/site:Site", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSite gets an existing Site resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteState, opts ...pulumi.ResourceOption) (*Site, error) {
	var resource Site
	err := ctx.ReadResource("aws:networkmanager/site:Site", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Site resources.
type siteState struct {
	// Site Amazon Resource Name (ARN)
	Arn *string `pulumi:"arn"`
	// Description of the Site.
	Description *string `pulumi:"description"`
	// The ID of the Global Network to create the site in.
	GlobalNetworkId *string `pulumi:"globalNetworkId"`
	// The site location as documented below.
	Location *SiteLocation `pulumi:"location"`
	// Key-value tags for the Site. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SiteState struct {
	// Site Amazon Resource Name (ARN)
	Arn pulumix.Input[*string]
	// Description of the Site.
	Description pulumix.Input[*string]
	// The ID of the Global Network to create the site in.
	GlobalNetworkId pulumix.Input[*string]
	// The site location as documented below.
	Location pulumix.Input[*SiteLocationArgs]
	// Key-value tags for the Site. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (SiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteState)(nil)).Elem()
}

type siteArgs struct {
	// Description of the Site.
	Description *string `pulumi:"description"`
	// The ID of the Global Network to create the site in.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The site location as documented below.
	Location *SiteLocation `pulumi:"location"`
	// Key-value tags for the Site. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Site resource.
type SiteArgs struct {
	// Description of the Site.
	Description pulumix.Input[*string]
	// The ID of the Global Network to create the site in.
	GlobalNetworkId pulumix.Input[string]
	// The site location as documented below.
	Location pulumix.Input[*SiteLocationArgs]
	// Key-value tags for the Site. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteArgs)(nil)).Elem()
}

type SiteOutput struct{ *pulumi.OutputState }

func (SiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Site)(nil)).Elem()
}

func (o SiteOutput) ToSiteOutput() SiteOutput {
	return o
}

func (o SiteOutput) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return o
}

func (o SiteOutput) ToOutput(ctx context.Context) pulumix.Output[Site] {
	return pulumix.Output[Site]{
		OutputState: o.OutputState,
	}
}

// Site Amazon Resource Name (ARN)
func (o SiteOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Site](o, func(v Site) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the Site.
func (o SiteOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Site](o, func(v Site) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the Global Network to create the site in.
func (o SiteOutput) GlobalNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[Site](o, func(v Site) pulumix.Output[string] { return v.GlobalNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The site location as documented below.
func (o SiteOutput) Location() pulumix.GPtrOutput[SiteLocation, SiteLocationOutput] {
	value := pulumix.Apply[Site](o, func(v Site) pulumix.GPtrOutput[SiteLocation, SiteLocationOutput] { return v.Location })
	unwrapped := pulumix.Flatten[*SiteLocation, pulumix.GPtrOutput[SiteLocation, SiteLocationOutput]](value)
	return pulumix.GPtrOutput[SiteLocation, SiteLocationOutput]{OutputState: unwrapped.OutputState}
}

// Key-value tags for the Site. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SiteOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Site](o, func(v Site) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SiteOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Site](o, func(v Site) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SiteOutput{})
}
