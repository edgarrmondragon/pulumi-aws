// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a WAF Geo Match Set Resource
type GeoMatchSet struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN)
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints pulumix.GArrayOutput[GeoMatchSetGeoMatchConstraint, GeoMatchSetGeoMatchConstraintOutput] `pulumi:"geoMatchConstraints"`
	// The name or description of the GeoMatchSet.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewGeoMatchSet registers a new resource with the given unique name, arguments, and options.
func NewGeoMatchSet(ctx *pulumi.Context,
	name string, args *GeoMatchSetArgs, opts ...pulumi.ResourceOption) (*GeoMatchSet, error) {
	if args == nil {
		args = &GeoMatchSetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GeoMatchSet
	err := ctx.RegisterResource("aws:waf/geoMatchSet:GeoMatchSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeoMatchSet gets an existing GeoMatchSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeoMatchSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeoMatchSetState, opts ...pulumi.ResourceOption) (*GeoMatchSet, error) {
	var resource GeoMatchSet
	err := ctx.ReadResource("aws:waf/geoMatchSet:GeoMatchSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeoMatchSet resources.
type geoMatchSetState struct {
	// Amazon Resource Name (ARN)
	Arn *string `pulumi:"arn"`
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints []GeoMatchSetGeoMatchConstraint `pulumi:"geoMatchConstraints"`
	// The name or description of the GeoMatchSet.
	Name *string `pulumi:"name"`
}

type GeoMatchSetState struct {
	// Amazon Resource Name (ARN)
	Arn pulumix.Input[*string]
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints pulumix.Input[[]*GeoMatchSetGeoMatchConstraintArgs]
	// The name or description of the GeoMatchSet.
	Name pulumix.Input[*string]
}

func (GeoMatchSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*geoMatchSetState)(nil)).Elem()
}

type geoMatchSetArgs struct {
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints []GeoMatchSetGeoMatchConstraint `pulumi:"geoMatchConstraints"`
	// The name or description of the GeoMatchSet.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a GeoMatchSet resource.
type GeoMatchSetArgs struct {
	// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
	GeoMatchConstraints pulumix.Input[[]*GeoMatchSetGeoMatchConstraintArgs]
	// The name or description of the GeoMatchSet.
	Name pulumix.Input[*string]
}

func (GeoMatchSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geoMatchSetArgs)(nil)).Elem()
}

type GeoMatchSetOutput struct{ *pulumi.OutputState }

func (GeoMatchSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoMatchSet)(nil)).Elem()
}

func (o GeoMatchSetOutput) ToGeoMatchSetOutput() GeoMatchSetOutput {
	return o
}

func (o GeoMatchSetOutput) ToGeoMatchSetOutputWithContext(ctx context.Context) GeoMatchSetOutput {
	return o
}

func (o GeoMatchSetOutput) ToOutput(ctx context.Context) pulumix.Output[GeoMatchSet] {
	return pulumix.Output[GeoMatchSet]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN)
func (o GeoMatchSetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GeoMatchSet](o, func(v GeoMatchSet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The GeoMatchConstraint objects which contain the country that you want AWS WAF to search for.
func (o GeoMatchSetOutput) GeoMatchConstraints() pulumix.GArrayOutput[GeoMatchSetGeoMatchConstraint, GeoMatchSetGeoMatchConstraintOutput] {
	value := pulumix.Apply[GeoMatchSet](o, func(v GeoMatchSet) pulumix.GArrayOutput[GeoMatchSetGeoMatchConstraint, GeoMatchSetGeoMatchConstraintOutput] {
		return v.GeoMatchConstraints
	})
	unwrapped := pulumix.Flatten[[]GeoMatchSetGeoMatchConstraint, pulumix.GArrayOutput[GeoMatchSetGeoMatchConstraint, GeoMatchSetGeoMatchConstraintOutput]](value)
	return pulumix.GArrayOutput[GeoMatchSetGeoMatchConstraint, GeoMatchSetGeoMatchConstraintOutput]{OutputState: unwrapped.OutputState}
}

// The name or description of the GeoMatchSet.
func (o GeoMatchSetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[GeoMatchSet](o, func(v GeoMatchSet) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(GeoMatchSetOutput{})
}
