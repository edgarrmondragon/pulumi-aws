// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ApplicationAppversionLifecycle struct {
	// Set to `true` to delete a version's source bundle from S3 when the application version is deleted.
	DeleteSourceFromS3 *bool `pulumi:"deleteSourceFromS3"`
	// The number of days to retain an application version ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
	MaxAgeInDays *int `pulumi:"maxAgeInDays"`
	// The maximum number of application versions to retain ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
	MaxCount *int `pulumi:"maxCount"`
	// The ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
	ServiceRole string `pulumi:"serviceRole"`
}

type ApplicationAppversionLifecycleArgs struct {
	// Set to `true` to delete a version's source bundle from S3 when the application version is deleted.
	DeleteSourceFromS3 pulumix.Input[*bool] `pulumi:"deleteSourceFromS3"`
	// The number of days to retain an application version ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
	MaxAgeInDays pulumix.Input[*int] `pulumi:"maxAgeInDays"`
	// The maximum number of application versions to retain ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
	MaxCount pulumix.Input[*int] `pulumi:"maxCount"`
	// The ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
	ServiceRole pulumix.Input[string] `pulumi:"serviceRole"`
}

func (ApplicationAppversionLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppversionLifecycle)(nil)).Elem()
}

func (i ApplicationAppversionLifecycleArgs) ToApplicationAppversionLifecycleOutput() ApplicationAppversionLifecycleOutput {
	return i.ToApplicationAppversionLifecycleOutputWithContext(context.Background())
}

func (i ApplicationAppversionLifecycleArgs) ToApplicationAppversionLifecycleOutputWithContext(ctx context.Context) ApplicationAppversionLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppversionLifecycleOutput)
}

func (i *ApplicationAppversionLifecycleArgs) ToOutput(ctx context.Context) pulumix.Output[*ApplicationAppversionLifecycleArgs] {
	return pulumix.Val(i)
}

type ApplicationAppversionLifecycleOutput struct{ *pulumi.OutputState }

func (ApplicationAppversionLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppversionLifecycle)(nil)).Elem()
}

func (o ApplicationAppversionLifecycleOutput) ToApplicationAppversionLifecycleOutput() ApplicationAppversionLifecycleOutput {
	return o
}

func (o ApplicationAppversionLifecycleOutput) ToApplicationAppversionLifecycleOutputWithContext(ctx context.Context) ApplicationAppversionLifecycleOutput {
	return o
}

func (o ApplicationAppversionLifecycleOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationAppversionLifecycle] {
	return pulumix.Output[ApplicationAppversionLifecycle]{
		OutputState: o.OutputState,
	}
}

// Set to `true` to delete a version's source bundle from S3 when the application version is deleted.
func (o ApplicationAppversionLifecycleOutput) DeleteSourceFromS3() pulumix.Output[*bool] {
	return pulumix.Apply[ApplicationAppversionLifecycle](o, func(v ApplicationAppversionLifecycle) *bool { return v.DeleteSourceFromS3 })
}

// The number of days to retain an application version ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
func (o ApplicationAppversionLifecycleOutput) MaxAgeInDays() pulumix.Output[*int] {
	return pulumix.Apply[ApplicationAppversionLifecycle](o, func(v ApplicationAppversionLifecycle) *int { return v.MaxAgeInDays })
}

// The maximum number of application versions to retain ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
func (o ApplicationAppversionLifecycleOutput) MaxCount() pulumix.Output[*int] {
	return pulumix.Apply[ApplicationAppversionLifecycle](o, func(v ApplicationAppversionLifecycle) *int { return v.MaxCount })
}

// The ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
func (o ApplicationAppversionLifecycleOutput) ServiceRole() pulumix.Output[string] {
	return pulumix.Apply[ApplicationAppversionLifecycle](o, func(v ApplicationAppversionLifecycle) string { return v.ServiceRole })
}

type ConfigurationTemplateSetting struct {
	// A unique name for this Template.
	Name      string  `pulumi:"name"`
	Namespace string  `pulumi:"namespace"`
	Resource  *string `pulumi:"resource"`
	Value     string  `pulumi:"value"`
}

type ConfigurationTemplateSettingArgs struct {
	// A unique name for this Template.
	Name      pulumix.Input[string]  `pulumi:"name"`
	Namespace pulumix.Input[string]  `pulumi:"namespace"`
	Resource  pulumix.Input[*string] `pulumi:"resource"`
	Value     pulumix.Input[string]  `pulumi:"value"`
}

func (ConfigurationTemplateSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationTemplateSetting)(nil)).Elem()
}

func (i ConfigurationTemplateSettingArgs) ToConfigurationTemplateSettingOutput() ConfigurationTemplateSettingOutput {
	return i.ToConfigurationTemplateSettingOutputWithContext(context.Background())
}

func (i ConfigurationTemplateSettingArgs) ToConfigurationTemplateSettingOutputWithContext(ctx context.Context) ConfigurationTemplateSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationTemplateSettingOutput)
}

func (i *ConfigurationTemplateSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationTemplateSettingArgs] {
	return pulumix.Val(i)
}

type ConfigurationTemplateSettingOutput struct{ *pulumi.OutputState }

func (ConfigurationTemplateSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationTemplateSetting)(nil)).Elem()
}

func (o ConfigurationTemplateSettingOutput) ToConfigurationTemplateSettingOutput() ConfigurationTemplateSettingOutput {
	return o
}

func (o ConfigurationTemplateSettingOutput) ToConfigurationTemplateSettingOutputWithContext(ctx context.Context) ConfigurationTemplateSettingOutput {
	return o
}

func (o ConfigurationTemplateSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationTemplateSetting] {
	return pulumix.Output[ConfigurationTemplateSetting]{
		OutputState: o.OutputState,
	}
}

// A unique name for this Template.
func (o ConfigurationTemplateSettingOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ConfigurationTemplateSetting](o, func(v ConfigurationTemplateSetting) string { return v.Name })
}

func (o ConfigurationTemplateSettingOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[ConfigurationTemplateSetting](o, func(v ConfigurationTemplateSetting) string { return v.Namespace })
}

func (o ConfigurationTemplateSettingOutput) Resource() pulumix.Output[*string] {
	return pulumix.Apply[ConfigurationTemplateSetting](o, func(v ConfigurationTemplateSetting) *string { return v.Resource })
}

func (o ConfigurationTemplateSettingOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ConfigurationTemplateSetting](o, func(v ConfigurationTemplateSetting) string { return v.Value })
}

type EnvironmentAllSetting struct {
	// A unique name for this Environment. This name is used
	// in the application URL
	Name      string  `pulumi:"name"`
	Namespace string  `pulumi:"namespace"`
	Resource  *string `pulumi:"resource"`
	Value     string  `pulumi:"value"`
}

type EnvironmentAllSettingArgs struct {
	// A unique name for this Environment. This name is used
	// in the application URL
	Name      pulumix.Input[string]  `pulumi:"name"`
	Namespace pulumix.Input[string]  `pulumi:"namespace"`
	Resource  pulumix.Input[*string] `pulumi:"resource"`
	Value     pulumix.Input[string]  `pulumi:"value"`
}

func (EnvironmentAllSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentAllSetting)(nil)).Elem()
}

func (i EnvironmentAllSettingArgs) ToEnvironmentAllSettingOutput() EnvironmentAllSettingOutput {
	return i.ToEnvironmentAllSettingOutputWithContext(context.Background())
}

func (i EnvironmentAllSettingArgs) ToEnvironmentAllSettingOutputWithContext(ctx context.Context) EnvironmentAllSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentAllSettingOutput)
}

func (i *EnvironmentAllSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentAllSettingArgs] {
	return pulumix.Val(i)
}

type EnvironmentAllSettingOutput struct{ *pulumi.OutputState }

func (EnvironmentAllSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentAllSetting)(nil)).Elem()
}

func (o EnvironmentAllSettingOutput) ToEnvironmentAllSettingOutput() EnvironmentAllSettingOutput {
	return o
}

func (o EnvironmentAllSettingOutput) ToEnvironmentAllSettingOutputWithContext(ctx context.Context) EnvironmentAllSettingOutput {
	return o
}

func (o EnvironmentAllSettingOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentAllSetting] {
	return pulumix.Output[EnvironmentAllSetting]{
		OutputState: o.OutputState,
	}
}

// A unique name for this Environment. This name is used
// in the application URL
func (o EnvironmentAllSettingOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentAllSetting](o, func(v EnvironmentAllSetting) string { return v.Name })
}

func (o EnvironmentAllSettingOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentAllSetting](o, func(v EnvironmentAllSetting) string { return v.Namespace })
}

func (o EnvironmentAllSettingOutput) Resource() pulumix.Output[*string] {
	return pulumix.Apply[EnvironmentAllSetting](o, func(v EnvironmentAllSetting) *string { return v.Resource })
}

func (o EnvironmentAllSettingOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentAllSetting](o, func(v EnvironmentAllSetting) string { return v.Value })
}

type EnvironmentSetting struct {
	// A unique name for this Environment. This name is used
	// in the application URL
	Name      string  `pulumi:"name"`
	Namespace string  `pulumi:"namespace"`
	Resource  *string `pulumi:"resource"`
	Value     string  `pulumi:"value"`
}

type EnvironmentSettingArgs struct {
	// A unique name for this Environment. This name is used
	// in the application URL
	Name      pulumix.Input[string]  `pulumi:"name"`
	Namespace pulumix.Input[string]  `pulumi:"namespace"`
	Resource  pulumix.Input[*string] `pulumi:"resource"`
	Value     pulumix.Input[string]  `pulumi:"value"`
}

func (EnvironmentSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSetting)(nil)).Elem()
}

func (i EnvironmentSettingArgs) ToEnvironmentSettingOutput() EnvironmentSettingOutput {
	return i.ToEnvironmentSettingOutputWithContext(context.Background())
}

func (i EnvironmentSettingArgs) ToEnvironmentSettingOutputWithContext(ctx context.Context) EnvironmentSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingOutput)
}

func (i *EnvironmentSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentSettingArgs] {
	return pulumix.Val(i)
}

type EnvironmentSettingOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSetting)(nil)).Elem()
}

func (o EnvironmentSettingOutput) ToEnvironmentSettingOutput() EnvironmentSettingOutput {
	return o
}

func (o EnvironmentSettingOutput) ToEnvironmentSettingOutputWithContext(ctx context.Context) EnvironmentSettingOutput {
	return o
}

func (o EnvironmentSettingOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentSetting] {
	return pulumix.Output[EnvironmentSetting]{
		OutputState: o.OutputState,
	}
}

// A unique name for this Environment. This name is used
// in the application URL
func (o EnvironmentSettingOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentSetting](o, func(v EnvironmentSetting) string { return v.Name })
}

func (o EnvironmentSettingOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentSetting](o, func(v EnvironmentSetting) string { return v.Namespace })
}

func (o EnvironmentSettingOutput) Resource() pulumix.Output[*string] {
	return pulumix.Apply[EnvironmentSetting](o, func(v EnvironmentSetting) *string { return v.Resource })
}

func (o EnvironmentSettingOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[EnvironmentSetting](o, func(v EnvironmentSetting) string { return v.Value })
}

type GetApplicationAppversionLifecycle struct {
	// Specifies whether delete a version's source bundle from S3 when the application version is deleted.
	DeleteSourceFromS3 bool `pulumi:"deleteSourceFromS3"`
	// Number of days to retain an application version.
	MaxAgeInDays int `pulumi:"maxAgeInDays"`
	// Maximum number of application versions to retain.
	MaxCount int `pulumi:"maxCount"`
	// ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
	ServiceRole string `pulumi:"serviceRole"`
}

type GetApplicationAppversionLifecycleArgs struct {
	// Specifies whether delete a version's source bundle from S3 when the application version is deleted.
	DeleteSourceFromS3 pulumix.Input[bool] `pulumi:"deleteSourceFromS3"`
	// Number of days to retain an application version.
	MaxAgeInDays pulumix.Input[int] `pulumi:"maxAgeInDays"`
	// Maximum number of application versions to retain.
	MaxCount pulumix.Input[int] `pulumi:"maxCount"`
	// ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
	ServiceRole pulumix.Input[string] `pulumi:"serviceRole"`
}

func (GetApplicationAppversionLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppversionLifecycle)(nil)).Elem()
}

func (i GetApplicationAppversionLifecycleArgs) ToGetApplicationAppversionLifecycleOutput() GetApplicationAppversionLifecycleOutput {
	return i.ToGetApplicationAppversionLifecycleOutputWithContext(context.Background())
}

func (i GetApplicationAppversionLifecycleArgs) ToGetApplicationAppversionLifecycleOutputWithContext(ctx context.Context) GetApplicationAppversionLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppversionLifecycleOutput)
}

func (i *GetApplicationAppversionLifecycleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetApplicationAppversionLifecycleArgs] {
	return pulumix.Val(i)
}

type GetApplicationAppversionLifecycleOutput struct{ *pulumi.OutputState }

func (GetApplicationAppversionLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppversionLifecycle)(nil)).Elem()
}

func (o GetApplicationAppversionLifecycleOutput) ToGetApplicationAppversionLifecycleOutput() GetApplicationAppversionLifecycleOutput {
	return o
}

func (o GetApplicationAppversionLifecycleOutput) ToGetApplicationAppversionLifecycleOutputWithContext(ctx context.Context) GetApplicationAppversionLifecycleOutput {
	return o
}

func (o GetApplicationAppversionLifecycleOutput) ToOutput(ctx context.Context) pulumix.Output[GetApplicationAppversionLifecycle] {
	return pulumix.Output[GetApplicationAppversionLifecycle]{
		OutputState: o.OutputState,
	}
}

// Specifies whether delete a version's source bundle from S3 when the application version is deleted.
func (o GetApplicationAppversionLifecycleOutput) DeleteSourceFromS3() pulumix.Output[bool] {
	return pulumix.Apply[GetApplicationAppversionLifecycle](o, func(v GetApplicationAppversionLifecycle) bool { return v.DeleteSourceFromS3 })
}

// Number of days to retain an application version.
func (o GetApplicationAppversionLifecycleOutput) MaxAgeInDays() pulumix.Output[int] {
	return pulumix.Apply[GetApplicationAppversionLifecycle](o, func(v GetApplicationAppversionLifecycle) int { return v.MaxAgeInDays })
}

// Maximum number of application versions to retain.
func (o GetApplicationAppversionLifecycleOutput) MaxCount() pulumix.Output[int] {
	return pulumix.Apply[GetApplicationAppversionLifecycle](o, func(v GetApplicationAppversionLifecycle) int { return v.MaxCount })
}

// ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
func (o GetApplicationAppversionLifecycleOutput) ServiceRole() pulumix.Output[string] {
	return pulumix.Apply[GetApplicationAppversionLifecycle](o, func(v GetApplicationAppversionLifecycle) string { return v.ServiceRole })
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppversionLifecycleOutput{})
	pulumi.RegisterOutputType(ConfigurationTemplateSettingOutput{})
	pulumi.RegisterOutputType(EnvironmentAllSettingOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingOutput{})
	pulumi.RegisterOutputType(GetApplicationAppversionLifecycleOutput{})
}
