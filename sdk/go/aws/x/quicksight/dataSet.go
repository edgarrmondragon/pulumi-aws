// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing a QuickSight Data Set.
type DataSet struct {
	pulumi.CustomResourceState

	// ARN of the dataset that contains permissions for RLS.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
	ColumnGroups pulumix.GArrayOutput[DataSetColumnGroup, DataSetColumnGroupOutput] `pulumi:"columnGroups"`
	// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
	ColumnLevelPermissionRules pulumix.GArrayOutput[DataSetColumnLevelPermissionRule, DataSetColumnLevelPermissionRuleOutput] `pulumi:"columnLevelPermissionRules"`
	// Identifier for the data set.
	DataSetId pulumix.Output[string] `pulumi:"dataSetId"`
	// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
	DataSetUsageConfiguration pulumix.GPtrOutput[DataSetDataSetUsageConfiguration, DataSetDataSetUsageConfigurationOutput] `pulumi:"dataSetUsageConfiguration"`
	// The folder that contains fields and nested subfolders for your dataset. See field_folders.
	FieldFolders pulumix.GArrayOutput[DataSetFieldFolder, DataSetFieldFolderOutput] `pulumi:"fieldFolders"`
	// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
	ImportMode pulumix.Output[string] `pulumi:"importMode"`
	// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
	LogicalTableMaps pulumix.GArrayOutput[DataSetLogicalTableMap, DataSetLogicalTableMapOutput] `pulumi:"logicalTableMaps"`
	// Display name for the dataset.
	Name          pulumix.Output[string]                                               `pulumi:"name"`
	OutputColumns pulumix.GArrayOutput[DataSetOutputColumn, DataSetOutputColumnOutput] `pulumi:"outputColumns"`
	// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
	Permissions pulumix.GArrayOutput[DataSetPermission, DataSetPermissionOutput] `pulumi:"permissions"`
	// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
	//
	// The following arguments are optional:
	PhysicalTableMaps pulumix.GArrayOutput[DataSetPhysicalTableMap, DataSetPhysicalTableMapOutput] `pulumi:"physicalTableMaps"`
	// The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
	RefreshProperties pulumix.GPtrOutput[DataSetRefreshProperties, DataSetRefreshPropertiesOutput] `pulumi:"refreshProperties"`
	// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
	RowLevelPermissionDataSet pulumix.GPtrOutput[DataSetRowLevelPermissionDataSet, DataSetRowLevelPermissionDataSetOutput] `pulumi:"rowLevelPermissionDataSet"`
	// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
	RowLevelPermissionTagConfiguration pulumix.GPtrOutput[DataSetRowLevelPermissionTagConfiguration, DataSetRowLevelPermissionTagConfigurationOutput] `pulumi:"rowLevelPermissionTagConfiguration"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewDataSet registers a new resource with the given unique name, arguments, and options.
func NewDataSet(ctx *pulumi.Context,
	name string, args *DataSetArgs, opts ...pulumi.ResourceOption) (*DataSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	if args.ImportMode == nil {
		return nil, errors.New("invalid value for required argument 'ImportMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSet
	err := ctx.RegisterResource("aws:quicksight/dataSet:DataSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSet gets an existing DataSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSetState, opts ...pulumi.ResourceOption) (*DataSet, error) {
	var resource DataSet
	err := ctx.ReadResource("aws:quicksight/dataSet:DataSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSet resources.
type dataSetState struct {
	// ARN of the dataset that contains permissions for RLS.
	Arn *string `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
	ColumnGroups []DataSetColumnGroup `pulumi:"columnGroups"`
	// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
	ColumnLevelPermissionRules []DataSetColumnLevelPermissionRule `pulumi:"columnLevelPermissionRules"`
	// Identifier for the data set.
	DataSetId *string `pulumi:"dataSetId"`
	// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
	DataSetUsageConfiguration *DataSetDataSetUsageConfiguration `pulumi:"dataSetUsageConfiguration"`
	// The folder that contains fields and nested subfolders for your dataset. See field_folders.
	FieldFolders []DataSetFieldFolder `pulumi:"fieldFolders"`
	// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
	ImportMode *string `pulumi:"importMode"`
	// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
	LogicalTableMaps []DataSetLogicalTableMap `pulumi:"logicalTableMaps"`
	// Display name for the dataset.
	Name          *string               `pulumi:"name"`
	OutputColumns []DataSetOutputColumn `pulumi:"outputColumns"`
	// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
	Permissions []DataSetPermission `pulumi:"permissions"`
	// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
	//
	// The following arguments are optional:
	PhysicalTableMaps []DataSetPhysicalTableMap `pulumi:"physicalTableMaps"`
	// The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
	RefreshProperties *DataSetRefreshProperties `pulumi:"refreshProperties"`
	// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
	RowLevelPermissionDataSet *DataSetRowLevelPermissionDataSet `pulumi:"rowLevelPermissionDataSet"`
	// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
	RowLevelPermissionTagConfiguration *DataSetRowLevelPermissionTagConfiguration `pulumi:"rowLevelPermissionTagConfiguration"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type DataSetState struct {
	// ARN of the dataset that contains permissions for RLS.
	Arn pulumix.Input[*string]
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
	ColumnGroups pulumix.Input[[]*DataSetColumnGroupArgs]
	// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
	ColumnLevelPermissionRules pulumix.Input[[]*DataSetColumnLevelPermissionRuleArgs]
	// Identifier for the data set.
	DataSetId pulumix.Input[*string]
	// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
	DataSetUsageConfiguration pulumix.Input[*DataSetDataSetUsageConfigurationArgs]
	// The folder that contains fields and nested subfolders for your dataset. See field_folders.
	FieldFolders pulumix.Input[[]*DataSetFieldFolderArgs]
	// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
	ImportMode pulumix.Input[*string]
	// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
	LogicalTableMaps pulumix.Input[[]*DataSetLogicalTableMapArgs]
	// Display name for the dataset.
	Name          pulumix.Input[*string]
	OutputColumns pulumix.Input[[]*DataSetOutputColumnArgs]
	// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
	Permissions pulumix.Input[[]*DataSetPermissionArgs]
	// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
	//
	// The following arguments are optional:
	PhysicalTableMaps pulumix.Input[[]*DataSetPhysicalTableMapArgs]
	// The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
	RefreshProperties pulumix.Input[*DataSetRefreshPropertiesArgs]
	// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
	RowLevelPermissionDataSet pulumix.Input[*DataSetRowLevelPermissionDataSetArgs]
	// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
	RowLevelPermissionTagConfiguration pulumix.Input[*DataSetRowLevelPermissionTagConfigurationArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (DataSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSetState)(nil)).Elem()
}

type dataSetArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
	ColumnGroups []DataSetColumnGroup `pulumi:"columnGroups"`
	// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
	ColumnLevelPermissionRules []DataSetColumnLevelPermissionRule `pulumi:"columnLevelPermissionRules"`
	// Identifier for the data set.
	DataSetId string `pulumi:"dataSetId"`
	// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
	DataSetUsageConfiguration *DataSetDataSetUsageConfiguration `pulumi:"dataSetUsageConfiguration"`
	// The folder that contains fields and nested subfolders for your dataset. See field_folders.
	FieldFolders []DataSetFieldFolder `pulumi:"fieldFolders"`
	// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
	ImportMode string `pulumi:"importMode"`
	// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
	LogicalTableMaps []DataSetLogicalTableMap `pulumi:"logicalTableMaps"`
	// Display name for the dataset.
	Name *string `pulumi:"name"`
	// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
	Permissions []DataSetPermission `pulumi:"permissions"`
	// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
	//
	// The following arguments are optional:
	PhysicalTableMaps []DataSetPhysicalTableMap `pulumi:"physicalTableMaps"`
	// The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
	RefreshProperties *DataSetRefreshProperties `pulumi:"refreshProperties"`
	// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
	RowLevelPermissionDataSet *DataSetRowLevelPermissionDataSet `pulumi:"rowLevelPermissionDataSet"`
	// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
	RowLevelPermissionTagConfiguration *DataSetRowLevelPermissionTagConfiguration `pulumi:"rowLevelPermissionTagConfiguration"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DataSet resource.
type DataSetArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
	ColumnGroups pulumix.Input[[]*DataSetColumnGroupArgs]
	// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
	ColumnLevelPermissionRules pulumix.Input[[]*DataSetColumnLevelPermissionRuleArgs]
	// Identifier for the data set.
	DataSetId pulumix.Input[string]
	// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
	DataSetUsageConfiguration pulumix.Input[*DataSetDataSetUsageConfigurationArgs]
	// The folder that contains fields and nested subfolders for your dataset. See field_folders.
	FieldFolders pulumix.Input[[]*DataSetFieldFolderArgs]
	// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
	ImportMode pulumix.Input[string]
	// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
	LogicalTableMaps pulumix.Input[[]*DataSetLogicalTableMapArgs]
	// Display name for the dataset.
	Name pulumix.Input[*string]
	// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
	Permissions pulumix.Input[[]*DataSetPermissionArgs]
	// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
	//
	// The following arguments are optional:
	PhysicalTableMaps pulumix.Input[[]*DataSetPhysicalTableMapArgs]
	// The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
	RefreshProperties pulumix.Input[*DataSetRefreshPropertiesArgs]
	// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
	RowLevelPermissionDataSet pulumix.Input[*DataSetRowLevelPermissionDataSetArgs]
	// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
	RowLevelPermissionTagConfiguration pulumix.Input[*DataSetRowLevelPermissionTagConfigurationArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (DataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSetArgs)(nil)).Elem()
}

type DataSetOutput struct{ *pulumi.OutputState }

func (DataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSet)(nil)).Elem()
}

func (o DataSetOutput) ToDataSetOutput() DataSetOutput {
	return o
}

func (o DataSetOutput) ToDataSetOutputWithContext(ctx context.Context) DataSetOutput {
	return o
}

func (o DataSetOutput) ToOutput(ctx context.Context) pulumix.Output[DataSet] {
	return pulumix.Output[DataSet]{
		OutputState: o.OutputState,
	}
}

// ARN of the dataset that contains permissions for RLS.
func (o DataSetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID.
func (o DataSetOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See column_groups.
func (o DataSetOutput) ColumnGroups() pulumix.GArrayOutput[DataSetColumnGroup, DataSetColumnGroupOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetColumnGroup, DataSetColumnGroupOutput] {
		return v.ColumnGroups
	})
	unwrapped := pulumix.Flatten[[]DataSetColumnGroup, pulumix.GArrayOutput[DataSetColumnGroup, DataSetColumnGroupOutput]](value)
	return pulumix.GArrayOutput[DataSetColumnGroup, DataSetColumnGroupOutput]{OutputState: unwrapped.OutputState}
}

// A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See column_level_permission_rules.
func (o DataSetOutput) ColumnLevelPermissionRules() pulumix.GArrayOutput[DataSetColumnLevelPermissionRule, DataSetColumnLevelPermissionRuleOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetColumnLevelPermissionRule, DataSetColumnLevelPermissionRuleOutput] {
		return v.ColumnLevelPermissionRules
	})
	unwrapped := pulumix.Flatten[[]DataSetColumnLevelPermissionRule, pulumix.GArrayOutput[DataSetColumnLevelPermissionRule, DataSetColumnLevelPermissionRuleOutput]](value)
	return pulumix.GArrayOutput[DataSetColumnLevelPermissionRule, DataSetColumnLevelPermissionRuleOutput]{OutputState: unwrapped.OutputState}
}

// Identifier for the data set.
func (o DataSetOutput) DataSetId() pulumix.Output[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.Output[string] { return v.DataSetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The usage configuration to apply to child datasets that reference this dataset as a source. See data_set_usage_configuration.
func (o DataSetOutput) DataSetUsageConfiguration() pulumix.GPtrOutput[DataSetDataSetUsageConfiguration, DataSetDataSetUsageConfigurationOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GPtrOutput[DataSetDataSetUsageConfiguration, DataSetDataSetUsageConfigurationOutput] {
		return v.DataSetUsageConfiguration
	})
	unwrapped := pulumix.Flatten[*DataSetDataSetUsageConfiguration, pulumix.GPtrOutput[DataSetDataSetUsageConfiguration, DataSetDataSetUsageConfigurationOutput]](value)
	return pulumix.GPtrOutput[DataSetDataSetUsageConfiguration, DataSetDataSetUsageConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The folder that contains fields and nested subfolders for your dataset. See field_folders.
func (o DataSetOutput) FieldFolders() pulumix.GArrayOutput[DataSetFieldFolder, DataSetFieldFolderOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetFieldFolder, DataSetFieldFolderOutput] {
		return v.FieldFolders
	})
	unwrapped := pulumix.Flatten[[]DataSetFieldFolder, pulumix.GArrayOutput[DataSetFieldFolder, DataSetFieldFolderOutput]](value)
	return pulumix.GArrayOutput[DataSetFieldFolder, DataSetFieldFolderOutput]{OutputState: unwrapped.OutputState}
}

// Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
func (o DataSetOutput) ImportMode() pulumix.Output[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.Output[string] { return v.ImportMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See logical_table_map.
func (o DataSetOutput) LogicalTableMaps() pulumix.GArrayOutput[DataSetLogicalTableMap, DataSetLogicalTableMapOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetLogicalTableMap, DataSetLogicalTableMapOutput] {
		return v.LogicalTableMaps
	})
	unwrapped := pulumix.Flatten[[]DataSetLogicalTableMap, pulumix.GArrayOutput[DataSetLogicalTableMap, DataSetLogicalTableMapOutput]](value)
	return pulumix.GArrayOutput[DataSetLogicalTableMap, DataSetLogicalTableMapOutput]{OutputState: unwrapped.OutputState}
}

// Display name for the dataset.
func (o DataSetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o DataSetOutput) OutputColumns() pulumix.GArrayOutput[DataSetOutputColumn, DataSetOutputColumnOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetOutputColumn, DataSetOutputColumnOutput] {
		return v.OutputColumns
	})
	unwrapped := pulumix.Flatten[[]DataSetOutputColumn, pulumix.GArrayOutput[DataSetOutputColumn, DataSetOutputColumnOutput]](value)
	return pulumix.GArrayOutput[DataSetOutputColumn, DataSetOutputColumnOutput]{OutputState: unwrapped.OutputState}
}

// A set of resource permissions on the data source. Maximum of 64 items. See permissions.
func (o DataSetOutput) Permissions() pulumix.GArrayOutput[DataSetPermission, DataSetPermissionOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetPermission, DataSetPermissionOutput] { return v.Permissions })
	unwrapped := pulumix.Flatten[[]DataSetPermission, pulumix.GArrayOutput[DataSetPermission, DataSetPermissionOutput]](value)
	return pulumix.GArrayOutput[DataSetPermission, DataSetPermissionOutput]{OutputState: unwrapped.OutputState}
}

// Declares the physical tables that are available in the underlying data sources. See physical_table_map.
//
// The following arguments are optional:
func (o DataSetOutput) PhysicalTableMaps() pulumix.GArrayOutput[DataSetPhysicalTableMap, DataSetPhysicalTableMapOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GArrayOutput[DataSetPhysicalTableMap, DataSetPhysicalTableMapOutput] {
		return v.PhysicalTableMaps
	})
	unwrapped := pulumix.Flatten[[]DataSetPhysicalTableMap, pulumix.GArrayOutput[DataSetPhysicalTableMap, DataSetPhysicalTableMapOutput]](value)
	return pulumix.GArrayOutput[DataSetPhysicalTableMap, DataSetPhysicalTableMapOutput]{OutputState: unwrapped.OutputState}
}

// The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See refresh_properties.
func (o DataSetOutput) RefreshProperties() pulumix.GPtrOutput[DataSetRefreshProperties, DataSetRefreshPropertiesOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GPtrOutput[DataSetRefreshProperties, DataSetRefreshPropertiesOutput] {
		return v.RefreshProperties
	})
	unwrapped := pulumix.Flatten[*DataSetRefreshProperties, pulumix.GPtrOutput[DataSetRefreshProperties, DataSetRefreshPropertiesOutput]](value)
	return pulumix.GPtrOutput[DataSetRefreshProperties, DataSetRefreshPropertiesOutput]{OutputState: unwrapped.OutputState}
}

// The row-level security configuration for the data that you want to create. See row_level_permission_data_set.
func (o DataSetOutput) RowLevelPermissionDataSet() pulumix.GPtrOutput[DataSetRowLevelPermissionDataSet, DataSetRowLevelPermissionDataSetOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GPtrOutput[DataSetRowLevelPermissionDataSet, DataSetRowLevelPermissionDataSetOutput] {
		return v.RowLevelPermissionDataSet
	})
	unwrapped := pulumix.Flatten[*DataSetRowLevelPermissionDataSet, pulumix.GPtrOutput[DataSetRowLevelPermissionDataSet, DataSetRowLevelPermissionDataSetOutput]](value)
	return pulumix.GPtrOutput[DataSetRowLevelPermissionDataSet, DataSetRowLevelPermissionDataSetOutput]{OutputState: unwrapped.OutputState}
}

// The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See row_level_permission_tag_configuration.
func (o DataSetOutput) RowLevelPermissionTagConfiguration() pulumix.GPtrOutput[DataSetRowLevelPermissionTagConfiguration, DataSetRowLevelPermissionTagConfigurationOutput] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.GPtrOutput[DataSetRowLevelPermissionTagConfiguration, DataSetRowLevelPermissionTagConfigurationOutput] {
		return v.RowLevelPermissionTagConfiguration
	})
	unwrapped := pulumix.Flatten[*DataSetRowLevelPermissionTagConfiguration, pulumix.GPtrOutput[DataSetRowLevelPermissionTagConfiguration, DataSetRowLevelPermissionTagConfigurationOutput]](value)
	return pulumix.GPtrOutput[DataSetRowLevelPermissionTagConfiguration, DataSetRowLevelPermissionTagConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DataSetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DataSetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[DataSet](o, func(v DataSet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DataSetOutput{})
}
