// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitystore

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get an Identity Store User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws:identitystore/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// A unique identifier for a user or group that is not the primary identifier. Conflicts with `userId`. Detailed below.
	AlternateIdentifier *GetUserAlternateIdentifier `pulumi:"alternateIdentifier"`
	// Identity Store ID associated with the Single Sign-On Instance.
	//
	// The following arguments are optional:
	IdentityStoreId string `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	//
	// > Exactly one of the above arguments must be provided.
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// List of details about the user's address.
	Addresses           []GetUserAddress            `pulumi:"addresses"`
	AlternateIdentifier *GetUserAlternateIdentifier `pulumi:"alternateIdentifier"`
	// The name that is typically displayed when the user is referenced.
	DisplayName string `pulumi:"displayName"`
	// List of details about the user's email.
	Emails []GetUserEmail `pulumi:"emails"`
	// List of identifiers issued to this resource by an external identity provider.
	ExternalIds []GetUserExternalId `pulumi:"externalIds"`
	// The provider-assigned unique ID for this managed resource.
	Id              string `pulumi:"id"`
	IdentityStoreId string `pulumi:"identityStoreId"`
	// The user's geographical region or location.
	Locale string `pulumi:"locale"`
	// Details about the user's full name.
	Names []GetUserName `pulumi:"names"`
	// An alternate name for the user.
	Nickname string `pulumi:"nickname"`
	// List of details about the user's phone number.
	PhoneNumbers []GetUserPhoneNumber `pulumi:"phoneNumbers"`
	// The preferred language of the user.
	PreferredLanguage string `pulumi:"preferredLanguage"`
	// An URL that may be associated with the user.
	ProfileUrl string `pulumi:"profileUrl"`
	// The user's time zone.
	Timezone string `pulumi:"timezone"`
	// The user's title.
	Title  string `pulumi:"title"`
	UserId string `pulumi:"userId"`
	// User's user name value.
	UserName string `pulumi:"userName"`
	// The user type.
	UserType string `pulumi:"userType"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserArgs](args.ToOutput(), func(plainArgs *LookupUserArgs) (*LookupUserResult, error) {
		return LookupUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserResultOutput, *LookupUserResult](outputResult)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// A unique identifier for a user or group that is not the primary identifier. Conflicts with `userId`. Detailed below.
	AlternateIdentifier pulumix.Input[*GetUserAlternateIdentifierArgs] `pulumi:"alternateIdentifier"`
	// Identity Store ID associated with the Single Sign-On Instance.
	//
	// The following arguments are optional:
	IdentityStoreId pulumix.Input[string] `pulumi:"identityStoreId"`
	// The identifier for a user in the Identity Store.
	//
	// > Exactly one of the above arguments must be provided.
	UserId pulumix.Input[*string] `pulumi:"userId"`
}

func (args LookupUserOutputArgs) ToOutput() pulumix.Output[*LookupUserArgs] {
	allArgs := pulumix.All(
		args.AlternateIdentifier.ToOutput(context.Background()).AsAny(),
		args.IdentityStoreId.ToOutput(context.Background()).AsAny(),
		args.UserId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserArgs {
		return &LookupUserArgs{
			AlternateIdentifier: resolvedArgs[0].(*GetUserAlternateIdentifier),
			IdentityStoreId:     resolvedArgs[1].(string),
			UserId:              resolvedArgs[2].(*string),
		}
	})
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserResult] {
	return pulumix.Output[*LookupUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserResultOutput) Addresses() pulumix.GArrayOutput[GetUserAddress, GetUserAddressOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserAddress { return v.Addresses })
	return pulumix.GArrayOutput[GetUserAddress, GetUserAddressOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) AlternateIdentifier() pulumix.GPtrOutput[GetUserAlternateIdentifier, GetUserAlternateIdentifierOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *GetUserAlternateIdentifier { return v.AlternateIdentifier })
	return pulumix.GPtrOutput[GetUserAlternateIdentifier, GetUserAlternateIdentifierOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) DisplayName() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.DisplayName })
}

func (o LookupUserResultOutput) Emails() pulumix.GArrayOutput[GetUserEmail, GetUserEmailOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserEmail { return v.Emails })
	return pulumix.GArrayOutput[GetUserEmail, GetUserEmailOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) ExternalIds() pulumix.GArrayOutput[GetUserExternalId, GetUserExternalIdOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserExternalId { return v.ExternalIds })
	return pulumix.GArrayOutput[GetUserExternalId, GetUserExternalIdOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Id })
}

func (o LookupUserResultOutput) IdentityStoreId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.IdentityStoreId })
}

func (o LookupUserResultOutput) Locale() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Locale })
}

func (o LookupUserResultOutput) Names() pulumix.GArrayOutput[GetUserName, GetUserNameOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserName { return v.Names })
	return pulumix.GArrayOutput[GetUserName, GetUserNameOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) Nickname() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Nickname })
}

func (o LookupUserResultOutput) PhoneNumbers() pulumix.GArrayOutput[GetUserPhoneNumber, GetUserPhoneNumberOutput] {
	value := pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) []GetUserPhoneNumber { return v.PhoneNumbers })
	return pulumix.GArrayOutput[GetUserPhoneNumber, GetUserPhoneNumberOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserResultOutput) PreferredLanguage() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.PreferredLanguage })
}

func (o LookupUserResultOutput) ProfileUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.ProfileUrl })
}

func (o LookupUserResultOutput) Timezone() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Timezone })
}

func (o LookupUserResultOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Title })
}

func (o LookupUserResultOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.UserId })
}

func (o LookupUserResultOutput) UserName() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.UserName })
}

func (o LookupUserResultOutput) UserType() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.UserType })
}
