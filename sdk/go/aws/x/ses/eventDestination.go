// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SES event destination
type EventDestination struct {
	pulumi.CustomResourceState

	// The SES event destination ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// CloudWatch destination for the events
	CloudwatchDestinations pulumix.GArrayOutput[EventDestinationCloudwatchDestination, EventDestinationCloudwatchDestinationOutput] `pulumi:"cloudwatchDestinations"`
	// The name of the configuration set
	ConfigurationSetName pulumix.Output[string] `pulumi:"configurationSetName"`
	// If true, the event destination will be enabled
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Send the events to a kinesis firehose destination
	KinesisDestination pulumix.GPtrOutput[EventDestinationKinesisDestination, EventDestinationKinesisDestinationOutput] `pulumi:"kinesisDestination"`
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes pulumix.ArrayOutput[string] `pulumi:"matchingTypes"`
	// The name of the event destination
	Name pulumix.Output[string] `pulumi:"name"`
	// Send the events to an SNS Topic destination
	//
	// > **NOTE:** You can specify `"cloudwatchDestination"` or `"kinesisDestination"` but not both
	SnsDestination pulumix.GPtrOutput[EventDestinationSnsDestination, EventDestinationSnsDestinationOutput] `pulumi:"snsDestination"`
}

// NewEventDestination registers a new resource with the given unique name, arguments, and options.
func NewEventDestination(ctx *pulumi.Context,
	name string, args *EventDestinationArgs, opts ...pulumi.ResourceOption) (*EventDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationSetName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationSetName'")
	}
	if args.MatchingTypes == nil {
		return nil, errors.New("invalid value for required argument 'MatchingTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventDestination
	err := ctx.RegisterResource("aws:ses/eventDestination:EventDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventDestination gets an existing EventDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventDestinationState, opts ...pulumi.ResourceOption) (*EventDestination, error) {
	var resource EventDestination
	err := ctx.ReadResource("aws:ses/eventDestination:EventDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventDestination resources.
type eventDestinationState struct {
	// The SES event destination ARN.
	Arn *string `pulumi:"arn"`
	// CloudWatch destination for the events
	CloudwatchDestinations []EventDestinationCloudwatchDestination `pulumi:"cloudwatchDestinations"`
	// The name of the configuration set
	ConfigurationSetName *string `pulumi:"configurationSetName"`
	// If true, the event destination will be enabled
	Enabled *bool `pulumi:"enabled"`
	// Send the events to a kinesis firehose destination
	KinesisDestination *EventDestinationKinesisDestination `pulumi:"kinesisDestination"`
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes []string `pulumi:"matchingTypes"`
	// The name of the event destination
	Name *string `pulumi:"name"`
	// Send the events to an SNS Topic destination
	//
	// > **NOTE:** You can specify `"cloudwatchDestination"` or `"kinesisDestination"` but not both
	SnsDestination *EventDestinationSnsDestination `pulumi:"snsDestination"`
}

type EventDestinationState struct {
	// The SES event destination ARN.
	Arn pulumix.Input[*string]
	// CloudWatch destination for the events
	CloudwatchDestinations pulumix.Input[[]*EventDestinationCloudwatchDestinationArgs]
	// The name of the configuration set
	ConfigurationSetName pulumix.Input[*string]
	// If true, the event destination will be enabled
	Enabled pulumix.Input[*bool]
	// Send the events to a kinesis firehose destination
	KinesisDestination pulumix.Input[*EventDestinationKinesisDestinationArgs]
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes pulumix.Input[[]string]
	// The name of the event destination
	Name pulumix.Input[*string]
	// Send the events to an SNS Topic destination
	//
	// > **NOTE:** You can specify `"cloudwatchDestination"` or `"kinesisDestination"` but not both
	SnsDestination pulumix.Input[*EventDestinationSnsDestinationArgs]
}

func (EventDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDestinationState)(nil)).Elem()
}

type eventDestinationArgs struct {
	// CloudWatch destination for the events
	CloudwatchDestinations []EventDestinationCloudwatchDestination `pulumi:"cloudwatchDestinations"`
	// The name of the configuration set
	ConfigurationSetName string `pulumi:"configurationSetName"`
	// If true, the event destination will be enabled
	Enabled *bool `pulumi:"enabled"`
	// Send the events to a kinesis firehose destination
	KinesisDestination *EventDestinationKinesisDestination `pulumi:"kinesisDestination"`
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes []string `pulumi:"matchingTypes"`
	// The name of the event destination
	Name *string `pulumi:"name"`
	// Send the events to an SNS Topic destination
	//
	// > **NOTE:** You can specify `"cloudwatchDestination"` or `"kinesisDestination"` but not both
	SnsDestination *EventDestinationSnsDestination `pulumi:"snsDestination"`
}

// The set of arguments for constructing a EventDestination resource.
type EventDestinationArgs struct {
	// CloudWatch destination for the events
	CloudwatchDestinations pulumix.Input[[]*EventDestinationCloudwatchDestinationArgs]
	// The name of the configuration set
	ConfigurationSetName pulumix.Input[string]
	// If true, the event destination will be enabled
	Enabled pulumix.Input[*bool]
	// Send the events to a kinesis firehose destination
	KinesisDestination pulumix.Input[*EventDestinationKinesisDestinationArgs]
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes pulumix.Input[[]string]
	// The name of the event destination
	Name pulumix.Input[*string]
	// Send the events to an SNS Topic destination
	//
	// > **NOTE:** You can specify `"cloudwatchDestination"` or `"kinesisDestination"` but not both
	SnsDestination pulumix.Input[*EventDestinationSnsDestinationArgs]
}

func (EventDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventDestinationArgs)(nil)).Elem()
}

type EventDestinationOutput struct{ *pulumi.OutputState }

func (EventDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDestination)(nil)).Elem()
}

func (o EventDestinationOutput) ToEventDestinationOutput() EventDestinationOutput {
	return o
}

func (o EventDestinationOutput) ToEventDestinationOutputWithContext(ctx context.Context) EventDestinationOutput {
	return o
}

func (o EventDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventDestination] {
	return pulumix.Output[EventDestination]{
		OutputState: o.OutputState,
	}
}

// The SES event destination ARN.
func (o EventDestinationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// CloudWatch destination for the events
func (o EventDestinationOutput) CloudwatchDestinations() pulumix.GArrayOutput[EventDestinationCloudwatchDestination, EventDestinationCloudwatchDestinationOutput] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.GArrayOutput[EventDestinationCloudwatchDestination, EventDestinationCloudwatchDestinationOutput] {
		return v.CloudwatchDestinations
	})
	unwrapped := pulumix.Flatten[[]EventDestinationCloudwatchDestination, pulumix.GArrayOutput[EventDestinationCloudwatchDestination, EventDestinationCloudwatchDestinationOutput]](value)
	return pulumix.GArrayOutput[EventDestinationCloudwatchDestination, EventDestinationCloudwatchDestinationOutput]{OutputState: unwrapped.OutputState}
}

// The name of the configuration set
func (o EventDestinationOutput) ConfigurationSetName() pulumix.Output[string] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.Output[string] { return v.ConfigurationSetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If true, the event destination will be enabled
func (o EventDestinationOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Send the events to a kinesis firehose destination
func (o EventDestinationOutput) KinesisDestination() pulumix.GPtrOutput[EventDestinationKinesisDestination, EventDestinationKinesisDestinationOutput] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.GPtrOutput[EventDestinationKinesisDestination, EventDestinationKinesisDestinationOutput] {
		return v.KinesisDestination
	})
	unwrapped := pulumix.Flatten[*EventDestinationKinesisDestination, pulumix.GPtrOutput[EventDestinationKinesisDestination, EventDestinationKinesisDestinationOutput]](value)
	return pulumix.GPtrOutput[EventDestinationKinesisDestination, EventDestinationKinesisDestinationOutput]{OutputState: unwrapped.OutputState}
}

// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
func (o EventDestinationOutput) MatchingTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.ArrayOutput[string] { return v.MatchingTypes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of the event destination
func (o EventDestinationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Send the events to an SNS Topic destination
//
// > **NOTE:** You can specify `"cloudwatchDestination"` or `"kinesisDestination"` but not both
func (o EventDestinationOutput) SnsDestination() pulumix.GPtrOutput[EventDestinationSnsDestination, EventDestinationSnsDestinationOutput] {
	value := pulumix.Apply[EventDestination](o, func(v EventDestination) pulumix.GPtrOutput[EventDestinationSnsDestination, EventDestinationSnsDestinationOutput] {
		return v.SnsDestination
	})
	unwrapped := pulumix.Flatten[*EventDestinationSnsDestination, pulumix.GPtrOutput[EventDestinationSnsDestination, EventDestinationSnsDestinationOutput]](value)
	return pulumix.GPtrOutput[EventDestinationSnsDestination, EventDestinationSnsDestinationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EventDestinationOutput{})
}
