// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an IAM role inline policy.
//
// > **NOTE:** For a given role, this resource is incompatible with using the `iam.Role` resource `inlinePolicy` argument. When using that argument and this resource, both will attempt to manage the role's inline policies and the provider will show a permanent difference.
type RolePolicy struct {
	pulumi.CustomResourceState

	// The name of the role policy. If omitted, this provider will
	// assign a random, unique name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[*string] `pulumi:"namePrefix"`
	// The inline policy document. This is a JSON formatted string. For more information about building IAM policy documents with the provider, see the AWS IAM Policy Document Guide
	Policy pulumix.Output[string] `pulumi:"policy"`
	// The name of the IAM role to attach to the policy.
	Role pulumix.Output[string] `pulumi:"role"`
}

// NewRolePolicy registers a new resource with the given unique name, arguments, and options.
func NewRolePolicy(ctx *pulumi.Context,
	name string, args *RolePolicyArgs, opts ...pulumi.ResourceOption) (*RolePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolePolicy
	err := ctx.RegisterResource("aws:iam/rolePolicy:RolePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePolicy gets an existing RolePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePolicyState, opts ...pulumi.ResourceOption) (*RolePolicy, error) {
	var resource RolePolicy
	err := ctx.ReadResource("aws:iam/rolePolicy:RolePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePolicy resources.
type rolePolicyState struct {
	// The name of the role policy. If omitted, this provider will
	// assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The inline policy document. This is a JSON formatted string. For more information about building IAM policy documents with the provider, see the AWS IAM Policy Document Guide
	Policy interface{} `pulumi:"policy"`
	// The name of the IAM role to attach to the policy.
	Role interface{} `pulumi:"role"`
}

type RolePolicyState struct {
	// The name of the role policy. If omitted, this provider will
	// assign a random, unique name.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The inline policy document. This is a JSON formatted string. For more information about building IAM policy documents with the provider, see the AWS IAM Policy Document Guide
	Policy pulumix.Input[*any]
	// The name of the IAM role to attach to the policy.
	Role pulumix.Input[*any]
}

func (RolePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyState)(nil)).Elem()
}

type rolePolicyArgs struct {
	// The name of the role policy. If omitted, this provider will
	// assign a random, unique name.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The inline policy document. This is a JSON formatted string. For more information about building IAM policy documents with the provider, see the AWS IAM Policy Document Guide
	Policy interface{} `pulumi:"policy"`
	// The name of the IAM role to attach to the policy.
	Role interface{} `pulumi:"role"`
}

// The set of arguments for constructing a RolePolicy resource.
type RolePolicyArgs struct {
	// The name of the role policy. If omitted, this provider will
	// assign a random, unique name.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The inline policy document. This is a JSON formatted string. For more information about building IAM policy documents with the provider, see the AWS IAM Policy Document Guide
	Policy pulumix.Input[any]
	// The name of the IAM role to attach to the policy.
	Role pulumix.Input[any]
}

func (RolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyArgs)(nil)).Elem()
}

type RolePolicyOutput struct{ *pulumi.OutputState }

func (RolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicy)(nil)).Elem()
}

func (o RolePolicyOutput) ToRolePolicyOutput() RolePolicyOutput {
	return o
}

func (o RolePolicyOutput) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return o
}

func (o RolePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RolePolicy] {
	return pulumix.Output[RolePolicy]{
		OutputState: o.OutputState,
	}
}

// The name of the role policy. If omitted, this provider will
// assign a random, unique name.
func (o RolePolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RolePolicy](o, func(v RolePolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (o RolePolicyOutput) NamePrefix() pulumix.Output[*string] {
	value := pulumix.Apply[RolePolicy](o, func(v RolePolicy) pulumix.Output[*string] { return v.NamePrefix })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The inline policy document. This is a JSON formatted string. For more information about building IAM policy documents with the provider, see the AWS IAM Policy Document Guide
func (o RolePolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[RolePolicy](o, func(v RolePolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the IAM role to attach to the policy.
func (o RolePolicyOutput) Role() pulumix.Output[string] {
	value := pulumix.Apply[RolePolicy](o, func(v RolePolicy) pulumix.Output[string] { return v.Role })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RolePolicyOutput{})
}
