// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3control

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details on a specific S3 Multi-Region Access Point.
func LookupMultiRegionAccessPoint(ctx *pulumi.Context, args *LookupMultiRegionAccessPointArgs, opts ...pulumi.InvokeOption) (*LookupMultiRegionAccessPointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMultiRegionAccessPointResult
	err := ctx.Invoke("aws:s3control/getMultiRegionAccessPoint:getMultiRegionAccessPoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMultiRegionAccessPoint.
type LookupMultiRegionAccessPointArgs struct {
	// The AWS account ID of the S3 Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// The name of the Multi-Region Access Point.
	Name string `pulumi:"name"`
}

// A collection of values returned by getMultiRegionAccessPoint.
type LookupMultiRegionAccessPointResult struct {
	AccountId string `pulumi:"accountId"`
	// The alias for the Multi-Region Access Point.
	Alias string `pulumi:"alias"`
	// Amazon Resource Name (ARN) of the Multi-Region Access Point.
	Arn string `pulumi:"arn"`
	// Timestamp when the resource has been created.
	CreatedAt string `pulumi:"createdAt"`
	// The DNS domain name of the S3 Multi-Region Access Point in the format _`alias`_.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on [Multi-Region Access Point Requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/MultiRegionAccessPointRequests.html).
	DomainName string `pulumi:"domainName"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Public Access Block of the Multi-Region Access Point. Detailed below.
	PublicAccessBlocks []GetMultiRegionAccessPointPublicAccessBlock `pulumi:"publicAccessBlocks"`
	// A collection of the regions and buckets associated with the Multi-Region Access Point.
	Regions []GetMultiRegionAccessPointRegion `pulumi:"regions"`
	// The current status of the Multi-Region Access Point.
	Status string `pulumi:"status"`
}

func LookupMultiRegionAccessPointOutput(ctx *pulumi.Context, args LookupMultiRegionAccessPointOutputArgs, opts ...pulumi.InvokeOption) LookupMultiRegionAccessPointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupMultiRegionAccessPointArgs](args.ToOutput(), func(plainArgs *LookupMultiRegionAccessPointArgs) (*LookupMultiRegionAccessPointResult, error) {
		return LookupMultiRegionAccessPoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupMultiRegionAccessPointResultOutput, *LookupMultiRegionAccessPointResult](outputResult)
}

// A collection of arguments for invoking getMultiRegionAccessPoint.
type LookupMultiRegionAccessPointOutputArgs struct {
	// The AWS account ID of the S3 Multi-Region Access Point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// The name of the Multi-Region Access Point.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupMultiRegionAccessPointOutputArgs) ToOutput() pulumix.Output[*LookupMultiRegionAccessPointArgs] {
	allArgs := pulumix.All(
		args.AccountId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupMultiRegionAccessPointArgs {
		return &LookupMultiRegionAccessPointArgs{
			AccountId: resolvedArgs[0].(*string),
			Name:      resolvedArgs[1].(string),
		}
	})
}

type LookupMultiRegionAccessPointResultOutput struct{ *pulumi.OutputState }

func (LookupMultiRegionAccessPointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultiRegionAccessPointResult)(nil)).Elem()
}

func (o LookupMultiRegionAccessPointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupMultiRegionAccessPointResult] {
	return pulumix.Output[*LookupMultiRegionAccessPointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupMultiRegionAccessPointResultOutput) AccountId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.AccountId })
}

func (o LookupMultiRegionAccessPointResultOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.Alias })
}

func (o LookupMultiRegionAccessPointResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.Arn })
}

func (o LookupMultiRegionAccessPointResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.CreatedAt })
}

func (o LookupMultiRegionAccessPointResultOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.DomainName })
}

func (o LookupMultiRegionAccessPointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.Id })
}

func (o LookupMultiRegionAccessPointResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.Name })
}

func (o LookupMultiRegionAccessPointResultOutput) PublicAccessBlocks() pulumix.GArrayOutput[GetMultiRegionAccessPointPublicAccessBlock, GetMultiRegionAccessPointPublicAccessBlockOutput] {
	value := pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) []GetMultiRegionAccessPointPublicAccessBlock {
		return v.PublicAccessBlocks
	})
	return pulumix.GArrayOutput[GetMultiRegionAccessPointPublicAccessBlock, GetMultiRegionAccessPointPublicAccessBlockOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMultiRegionAccessPointResultOutput) Regions() pulumix.GArrayOutput[GetMultiRegionAccessPointRegion, GetMultiRegionAccessPointRegionOutput] {
	value := pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) []GetMultiRegionAccessPointRegion { return v.Regions })
	return pulumix.GArrayOutput[GetMultiRegionAccessPointRegion, GetMultiRegionAccessPointRegionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMultiRegionAccessPointResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupMultiRegionAccessPointResult](o, func(v *LookupMultiRegionAccessPointResult) string { return v.Status })
}
