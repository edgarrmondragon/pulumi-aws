// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a connection.
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("aws:networkmanager/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	// ID of the specific connection to retrieve.
	ConnectionId string `pulumi:"connectionId"`
	// ID of the Global Network of the connection to retrieve.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// Key-value tags for the connection.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	// ARN of the connection.
	Arn string `pulumi:"arn"`
	// ID of the second device in the connection.
	ConnectedDeviceId string `pulumi:"connectedDeviceId"`
	// ID of the link for the second device.
	ConnectedLinkId string `pulumi:"connectedLinkId"`
	ConnectionId    string `pulumi:"connectionId"`
	// Description of the connection.
	Description string `pulumi:"description"`
	// ID of the first device in the connection.
	DeviceId        string `pulumi:"deviceId"`
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the link for the first device.
	LinkId string `pulumi:"linkId"`
	// Key-value tags for the connection.
	Tags map[string]string `pulumi:"tags"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectionArgs](args.ToOutput(), func(plainArgs *LookupConnectionArgs) (*LookupConnectionResult, error) {
		return LookupConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectionResultOutput, *LookupConnectionResult](outputResult)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	// ID of the specific connection to retrieve.
	ConnectionId pulumix.Input[string] `pulumi:"connectionId"`
	// ID of the Global Network of the connection to retrieve.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// Key-value tags for the connection.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupConnectionOutputArgs) ToOutput() pulumix.Output[*LookupConnectionArgs] {
	allArgs := pulumix.All(
		args.ConnectionId.ToOutput(context.Background()).AsAny(),
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectionArgs {
		return &LookupConnectionArgs{
			ConnectionId:    resolvedArgs[0].(string),
			GlobalNetworkId: resolvedArgs[1].(string),
			Tags:            resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectionResult] {
	return pulumix.Output[*LookupConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Arn })
}

func (o LookupConnectionResultOutput) ConnectedDeviceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ConnectedDeviceId })
}

func (o LookupConnectionResultOutput) ConnectedLinkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ConnectedLinkId })
}

func (o LookupConnectionResultOutput) ConnectionId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ConnectionId })
}

func (o LookupConnectionResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Description })
}

func (o LookupConnectionResultOutput) DeviceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.DeviceId })
}

func (o LookupConnectionResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.GlobalNetworkId })
}

func (o LookupConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Id })
}

func (o LookupConnectionResultOutput) LinkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.LinkId })
}

func (o LookupConnectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
