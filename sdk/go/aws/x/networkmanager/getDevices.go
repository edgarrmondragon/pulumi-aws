// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about devices.
func GetDevices(ctx *pulumi.Context, args *GetDevicesArgs, opts ...pulumi.InvokeOption) (*GetDevicesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDevicesResult
	err := ctx.Invoke("aws:networkmanager/getDevices:getDevices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDevices.
type GetDevicesArgs struct {
	// ID of the Global Network of the devices to retrieve.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// ID of the site of the devices to retrieve.
	SiteId *string `pulumi:"siteId"`
	// Restricts the list to the devices with these tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDevices.
type GetDevicesResult struct {
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IDs of the devices.
	Ids    []string          `pulumi:"ids"`
	SiteId *string           `pulumi:"siteId"`
	Tags   map[string]string `pulumi:"tags"`
}

func GetDevicesOutput(ctx *pulumi.Context, args GetDevicesOutputArgs, opts ...pulumi.InvokeOption) GetDevicesResultOutput {
	outputResult := pulumix.ApplyErr[*GetDevicesArgs](args.ToOutput(), func(plainArgs *GetDevicesArgs) (*GetDevicesResult, error) {
		return GetDevices(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetDevicesResultOutput, *GetDevicesResult](outputResult)
}

// A collection of arguments for invoking getDevices.
type GetDevicesOutputArgs struct {
	// ID of the Global Network of the devices to retrieve.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// ID of the site of the devices to retrieve.
	SiteId pulumix.Input[*string] `pulumi:"siteId"`
	// Restricts the list to the devices with these tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetDevicesOutputArgs) ToOutput() pulumix.Output[*GetDevicesArgs] {
	allArgs := pulumix.All(
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.SiteId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetDevicesArgs {
		return &GetDevicesArgs{
			GlobalNetworkId: resolvedArgs[0].(string),
			SiteId:          resolvedArgs[1].(*string),
			Tags:            resolvedArgs[2].(map[string]string),
		}
	})
}

type GetDevicesResultOutput struct{ *pulumi.OutputState }

func (GetDevicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevicesResult)(nil)).Elem()
}

func (o GetDevicesResultOutput) ToOutput(context.Context) pulumix.Output[*GetDevicesResult] {
	return pulumix.Output[*GetDevicesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetDevicesResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*GetDevicesResult](o, func(v *GetDevicesResult) string { return v.GlobalNetworkId })
}

func (o GetDevicesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetDevicesResult](o, func(v *GetDevicesResult) string { return v.Id })
}

func (o GetDevicesResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetDevicesResult](o, func(v *GetDevicesResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetDevicesResultOutput) SiteId() pulumix.Output[*string] {
	return pulumix.Apply[*GetDevicesResult](o, func(v *GetDevicesResult) *string { return v.SiteId })
}

func (o GetDevicesResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetDevicesResult](o, func(v *GetDevicesResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
