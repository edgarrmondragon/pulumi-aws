// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codecatalyst

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS CodeCatalyst Project.
type Project struct {
	pulumi.CustomResourceState

	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The friendly name of the project that will be displayed to users.
	//
	// The following arguments are optional:
	DisplayName pulumix.Output[string] `pulumi:"displayName"`
	// The name of the project in the space.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name of the space.
	SpaceName pulumix.Output[string] `pulumi:"spaceName"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.SpaceName == nil {
		return nil, errors.New("invalid value for required argument 'SpaceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("aws:codecatalyst/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws:codecatalyst/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description *string `pulumi:"description"`
	// The friendly name of the project that will be displayed to users.
	//
	// The following arguments are optional:
	DisplayName *string `pulumi:"displayName"`
	// The name of the project in the space.
	Name *string `pulumi:"name"`
	// The name of the space.
	SpaceName *string `pulumi:"spaceName"`
}

type ProjectState struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description pulumix.Input[*string]
	// The friendly name of the project that will be displayed to users.
	//
	// The following arguments are optional:
	DisplayName pulumix.Input[*string]
	// The name of the project in the space.
	Name pulumix.Input[*string]
	// The name of the space.
	SpaceName pulumix.Input[*string]
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description *string `pulumi:"description"`
	// The friendly name of the project that will be displayed to users.
	//
	// The following arguments are optional:
	DisplayName string `pulumi:"displayName"`
	// The name of the space.
	SpaceName string `pulumi:"spaceName"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
	Description pulumix.Input[*string]
	// The friendly name of the project that will be displayed to users.
	//
	// The following arguments are optional:
	DisplayName pulumix.Input[string]
	// The name of the space.
	SpaceName pulumix.Input[string]
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) ToOutput(ctx context.Context) pulumix.Output[Project] {
	return pulumix.Output[Project]{
		OutputState: o.OutputState,
	}
}

// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
func (o ProjectOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The friendly name of the project that will be displayed to users.
//
// The following arguments are optional:
func (o ProjectOutput) DisplayName() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.DisplayName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the project in the space.
func (o ProjectOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the space.
func (o ProjectOutput) SpaceName() pulumix.Output[string] {
	value := pulumix.Apply[Project](o, func(v Project) pulumix.Output[string] { return v.SpaceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ProjectOutput{})
}
