// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS MediaLive Multiplex.
type Multiplex struct {
	pulumi.CustomResourceState

	// ARN of the Multiplex.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A list of availability zones. You must specify exactly two.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// Multiplex settings. See Multiplex Settings for more details.
	MultiplexSettings pulumix.GPtrOutput[MultiplexMultiplexSettings, MultiplexMultiplexSettingsOutput] `pulumi:"multiplexSettings"`
	// name of Multiplex.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Whether to start the Multiplex. Defaults to `false`.
	StartMultiplex pulumix.Output[*bool] `pulumi:"startMultiplex"`
	// A map of tags to assign to the Multiplex. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewMultiplex registers a new resource with the given unique name, arguments, and options.
func NewMultiplex(ctx *pulumi.Context,
	name string, args *MultiplexArgs, opts ...pulumi.ResourceOption) (*Multiplex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Multiplex
	err := ctx.RegisterResource("aws:medialive/multiplex:Multiplex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiplex gets an existing Multiplex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiplex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiplexState, opts ...pulumi.ResourceOption) (*Multiplex, error) {
	var resource Multiplex
	err := ctx.ReadResource("aws:medialive/multiplex:Multiplex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Multiplex resources.
type multiplexState struct {
	// ARN of the Multiplex.
	Arn *string `pulumi:"arn"`
	// A list of availability zones. You must specify exactly two.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Multiplex settings. See Multiplex Settings for more details.
	MultiplexSettings *MultiplexMultiplexSettings `pulumi:"multiplexSettings"`
	// name of Multiplex.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Whether to start the Multiplex. Defaults to `false`.
	StartMultiplex *bool `pulumi:"startMultiplex"`
	// A map of tags to assign to the Multiplex. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type MultiplexState struct {
	// ARN of the Multiplex.
	Arn pulumix.Input[*string]
	// A list of availability zones. You must specify exactly two.
	AvailabilityZones pulumix.Input[[]string]
	// Multiplex settings. See Multiplex Settings for more details.
	MultiplexSettings pulumix.Input[*MultiplexMultiplexSettingsArgs]
	// name of Multiplex.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Whether to start the Multiplex. Defaults to `false`.
	StartMultiplex pulumix.Input[*bool]
	// A map of tags to assign to the Multiplex. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (MultiplexState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexState)(nil)).Elem()
}

type multiplexArgs struct {
	// A list of availability zones. You must specify exactly two.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Multiplex settings. See Multiplex Settings for more details.
	MultiplexSettings *MultiplexMultiplexSettings `pulumi:"multiplexSettings"`
	// name of Multiplex.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Whether to start the Multiplex. Defaults to `false`.
	StartMultiplex *bool `pulumi:"startMultiplex"`
	// A map of tags to assign to the Multiplex. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Multiplex resource.
type MultiplexArgs struct {
	// A list of availability zones. You must specify exactly two.
	AvailabilityZones pulumix.Input[[]string]
	// Multiplex settings. See Multiplex Settings for more details.
	MultiplexSettings pulumix.Input[*MultiplexMultiplexSettingsArgs]
	// name of Multiplex.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Whether to start the Multiplex. Defaults to `false`.
	StartMultiplex pulumix.Input[*bool]
	// A map of tags to assign to the Multiplex. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (MultiplexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexArgs)(nil)).Elem()
}

type MultiplexOutput struct{ *pulumi.OutputState }

func (MultiplexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Multiplex)(nil)).Elem()
}

func (o MultiplexOutput) ToMultiplexOutput() MultiplexOutput {
	return o
}

func (o MultiplexOutput) ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput {
	return o
}

func (o MultiplexOutput) ToOutput(ctx context.Context) pulumix.Output[Multiplex] {
	return pulumix.Output[Multiplex]{
		OutputState: o.OutputState,
	}
}

// ARN of the Multiplex.
func (o MultiplexOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of availability zones. You must specify exactly two.
func (o MultiplexOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Multiplex settings. See Multiplex Settings for more details.
func (o MultiplexOutput) MultiplexSettings() pulumix.GPtrOutput[MultiplexMultiplexSettings, MultiplexMultiplexSettingsOutput] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.GPtrOutput[MultiplexMultiplexSettings, MultiplexMultiplexSettingsOutput] {
		return v.MultiplexSettings
	})
	unwrapped := pulumix.Flatten[*MultiplexMultiplexSettings, pulumix.GPtrOutput[MultiplexMultiplexSettings, MultiplexMultiplexSettingsOutput]](value)
	return pulumix.GPtrOutput[MultiplexMultiplexSettings, MultiplexMultiplexSettingsOutput]{OutputState: unwrapped.OutputState}
}

// name of Multiplex.
//
// The following arguments are optional:
func (o MultiplexOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to start the Multiplex. Defaults to `false`.
func (o MultiplexOutput) StartMultiplex() pulumix.Output[*bool] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.Output[*bool] { return v.StartMultiplex })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A map of tags to assign to the Multiplex. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o MultiplexOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o MultiplexOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Multiplex](o, func(v Multiplex) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MultiplexOutput{})
}
