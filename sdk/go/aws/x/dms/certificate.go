// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DMS (Data Migration Service) certificate resource. DMS certificates can be created, deleted, and imported.
type Certificate struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumix.Output[string] `pulumi:"certificateArn"`
	// The certificate identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters and hyphens.
	CertificateId pulumix.Output[string] `pulumi:"certificateId"`
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem pulumix.Output[*string] `pulumi:"certificatePem"`
	// The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet pulumix.Output[*string] `pulumi:"certificateWallet"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.CertificatePem != nil {
		untypedSecretValue := pulumi.ToSecret(args.CertificatePem.ToOutput(ctx.Context()).Untyped())
		args.CertificatePem = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.CertificateWallet != nil {
		untypedSecretValue := pulumi.ToSecret(args.CertificateWallet.ToOutput(ctx.Context()).Untyped())
		args.CertificateWallet = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"certificatePem",
		"certificateWallet",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("aws:dms/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:dms/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// The certificate identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters and hyphens.
	CertificateId *string `pulumi:"certificateId"`
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem *string `pulumi:"certificatePem"`
	// The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet *string `pulumi:"certificateWallet"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type CertificateState struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumix.Input[*string]
	// The certificate identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters and hyphens.
	CertificateId pulumix.Input[*string]
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem pulumix.Input[*string]
	// The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// The certificate identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters and hyphens.
	CertificateId string `pulumi:"certificateId"`
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem *string `pulumi:"certificatePem"`
	// The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet *string `pulumi:"certificateWallet"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The certificate identifier.
	//
	// - Must contain from 1 to 255 alphanumeric characters and hyphens.
	CertificateId pulumix.Input[string]
	// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
	CertificatePem pulumix.Input[*string]
	// The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificatePem` or `certificateWallet` must be set.
	CertificateWallet pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToOutput(ctx context.Context) pulumix.Output[Certificate] {
	return pulumix.Output[Certificate]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for the certificate.
func (o CertificateOutput) CertificateArn() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificateArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The certificate identifier.
//
// - Must contain from 1 to 255 alphanumeric characters and hyphens.
func (o CertificateOutput) CertificateId() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificateId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The contents of the .pem X.509 certificate file for the certificate. Either `certificatePem` or `certificateWallet` must be set.
func (o CertificateOutput) CertificatePem() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CertificatePem })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The contents of the Oracle Wallet certificate for use with SSL, provided as a base64-encoded String. Either `certificatePem` or `certificateWallet` must be set.
func (o CertificateOutput) CertificateWallet() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CertificateWallet })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CertificateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CertificateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
