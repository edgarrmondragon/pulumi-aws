// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type TopicRuleDestination struct {
	pulumi.CustomResourceState

	// The ARN of the topic rule destination
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether or not to enable the destination. Default: `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Configuration of the virtual private cloud (VPC) connection. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/vpc-rule-action.html).
	VpcConfiguration pulumix.GPtrOutput[TopicRuleDestinationVpcConfiguration, TopicRuleDestinationVpcConfigurationOutput] `pulumi:"vpcConfiguration"`
}

// NewTopicRuleDestination registers a new resource with the given unique name, arguments, and options.
func NewTopicRuleDestination(ctx *pulumi.Context,
	name string, args *TopicRuleDestinationArgs, opts ...pulumi.ResourceOption) (*TopicRuleDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TopicRuleDestination
	err := ctx.RegisterResource("aws:iot/topicRuleDestination:TopicRuleDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicRuleDestination gets an existing TopicRuleDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRuleDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicRuleDestinationState, opts ...pulumi.ResourceOption) (*TopicRuleDestination, error) {
	var resource TopicRuleDestination
	err := ctx.ReadResource("aws:iot/topicRuleDestination:TopicRuleDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicRuleDestination resources.
type topicRuleDestinationState struct {
	// The ARN of the topic rule destination
	Arn *string `pulumi:"arn"`
	// Whether or not to enable the destination. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// Configuration of the virtual private cloud (VPC) connection. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/vpc-rule-action.html).
	VpcConfiguration *TopicRuleDestinationVpcConfiguration `pulumi:"vpcConfiguration"`
}

type TopicRuleDestinationState struct {
	// The ARN of the topic rule destination
	Arn pulumix.Input[*string]
	// Whether or not to enable the destination. Default: `true`.
	Enabled pulumix.Input[*bool]
	// Configuration of the virtual private cloud (VPC) connection. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/vpc-rule-action.html).
	VpcConfiguration pulumix.Input[*TopicRuleDestinationVpcConfigurationArgs]
}

func (TopicRuleDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleDestinationState)(nil)).Elem()
}

type topicRuleDestinationArgs struct {
	// Whether or not to enable the destination. Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// Configuration of the virtual private cloud (VPC) connection. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/vpc-rule-action.html).
	VpcConfiguration TopicRuleDestinationVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a TopicRuleDestination resource.
type TopicRuleDestinationArgs struct {
	// Whether or not to enable the destination. Default: `true`.
	Enabled pulumix.Input[*bool]
	// Configuration of the virtual private cloud (VPC) connection. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/vpc-rule-action.html).
	VpcConfiguration pulumix.Input[*TopicRuleDestinationVpcConfigurationArgs]
}

func (TopicRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleDestinationArgs)(nil)).Elem()
}

type TopicRuleDestinationOutput struct{ *pulumi.OutputState }

func (TopicRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDestination)(nil)).Elem()
}

func (o TopicRuleDestinationOutput) ToTopicRuleDestinationOutput() TopicRuleDestinationOutput {
	return o
}

func (o TopicRuleDestinationOutput) ToTopicRuleDestinationOutputWithContext(ctx context.Context) TopicRuleDestinationOutput {
	return o
}

func (o TopicRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleDestination] {
	return pulumix.Output[TopicRuleDestination]{
		OutputState: o.OutputState,
	}
}

// The ARN of the topic rule destination
func (o TopicRuleDestinationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TopicRuleDestination](o, func(v TopicRuleDestination) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether or not to enable the destination. Default: `true`.
func (o TopicRuleDestinationOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[TopicRuleDestination](o, func(v TopicRuleDestination) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Configuration of the virtual private cloud (VPC) connection. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/vpc-rule-action.html).
func (o TopicRuleDestinationOutput) VpcConfiguration() pulumix.GPtrOutput[TopicRuleDestinationVpcConfiguration, TopicRuleDestinationVpcConfigurationOutput] {
	value := pulumix.Apply[TopicRuleDestination](o, func(v TopicRuleDestination) pulumix.GPtrOutput[TopicRuleDestinationVpcConfiguration, TopicRuleDestinationVpcConfigurationOutput] {
		return v.VpcConfiguration
	})
	unwrapped := pulumix.Flatten[*TopicRuleDestinationVpcConfiguration, pulumix.GPtrOutput[TopicRuleDestinationVpcConfiguration, TopicRuleDestinationVpcConfigurationOutput]](value)
	return pulumix.GPtrOutput[TopicRuleDestinationVpcConfiguration, TopicRuleDestinationVpcConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TopicRuleDestinationOutput{})
}
