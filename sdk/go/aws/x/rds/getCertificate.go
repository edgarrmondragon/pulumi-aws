// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Information about an RDS Certificate.
func GetCertificate(ctx *pulumi.Context, args *GetCertificateArgs, opts ...pulumi.InvokeOption) (*GetCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCertificateResult
	err := ctx.Invoke("aws:rds/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type GetCertificateArgs struct {
	// Certificate identifier. For example, `rds-ca-2019`.
	Id *string `pulumi:"id"`
	// When enabled, returns the certificate with the latest `ValidTill`.
	LatestValidTill *bool `pulumi:"latestValidTill"`
}

// A collection of values returned by getCertificate.
type GetCertificateResult struct {
	// ARN of the certificate.
	Arn string `pulumi:"arn"`
	// Type of certificate. For example, `CA`.
	CertificateType string `pulumi:"certificateType"`
	// Boolean whether there is an override for the default certificate identifier.
	CustomerOverride bool `pulumi:"customerOverride"`
	// If there is an override for the default certificate identifier, when the override expires.
	CustomerOverrideValidTill string `pulumi:"customerOverrideValidTill"`
	Id                        string `pulumi:"id"`
	LatestValidTill           *bool  `pulumi:"latestValidTill"`
	// Thumbprint of the certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of certificate starting validity date.
	ValidFrom string `pulumi:"validFrom"`
	// [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of certificate ending validity date.
	ValidTill string `pulumi:"validTill"`
}

func GetCertificateOutput(ctx *pulumi.Context, args GetCertificateOutputArgs, opts ...pulumi.InvokeOption) GetCertificateResultOutput {
	outputResult := pulumix.ApplyErr[*GetCertificateArgs](args.ToOutput(), func(plainArgs *GetCertificateArgs) (*GetCertificateResult, error) {
		return GetCertificate(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetCertificateResultOutput, *GetCertificateResult](outputResult)
}

// A collection of arguments for invoking getCertificate.
type GetCertificateOutputArgs struct {
	// Certificate identifier. For example, `rds-ca-2019`.
	Id pulumix.Input[*string] `pulumi:"id"`
	// When enabled, returns the certificate with the latest `ValidTill`.
	LatestValidTill pulumix.Input[*bool] `pulumi:"latestValidTill"`
}

func (args GetCertificateOutputArgs) ToOutput() pulumix.Output[*GetCertificateArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.LatestValidTill.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetCertificateArgs {
		return &GetCertificateArgs{
			Id:              resolvedArgs[0].(*string),
			LatestValidTill: resolvedArgs[1].(*bool),
		}
	})
}

type GetCertificateResultOutput struct{ *pulumi.OutputState }

func (GetCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateResult)(nil)).Elem()
}

func (o GetCertificateResultOutput) ToOutput(context.Context) pulumix.Output[*GetCertificateResult] {
	return pulumix.Output[*GetCertificateResult]{
		OutputState: o.OutputState,
	}
}

func (o GetCertificateResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.Arn })
}

func (o GetCertificateResultOutput) CertificateType() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.CertificateType })
}

func (o GetCertificateResultOutput) CustomerOverride() pulumix.Output[bool] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) bool { return v.CustomerOverride })
}

func (o GetCertificateResultOutput) CustomerOverrideValidTill() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.CustomerOverrideValidTill })
}

func (o GetCertificateResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.Id })
}

func (o GetCertificateResultOutput) LatestValidTill() pulumix.Output[*bool] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) *bool { return v.LatestValidTill })
}

func (o GetCertificateResultOutput) Thumbprint() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.Thumbprint })
}

func (o GetCertificateResultOutput) ValidFrom() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.ValidFrom })
}

func (o GetCertificateResultOutput) ValidTill() pulumix.Output[string] {
	return pulumix.Apply[*GetCertificateResult](o, func(v *GetCertificateResult) string { return v.ValidTill })
}
