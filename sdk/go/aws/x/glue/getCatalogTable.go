// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about an AWS Glue Data Catalog Table.
func LookupCatalogTable(ctx *pulumi.Context, args *LookupCatalogTableArgs, opts ...pulumi.InvokeOption) (*LookupCatalogTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCatalogTableResult
	err := ctx.Invoke("aws:glue/getCatalogTable:getCatalogTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalogTable.
type LookupCatalogTableArgs struct {
	// ID of the Glue Catalog and database where the table metadata resides. If omitted, this defaults to the current AWS Account ID.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides.
	DatabaseName string `pulumi:"databaseName"`
	// Name of the table.
	Name string `pulumi:"name"`
	// The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with `transactionId`. Specified in RFC 3339 format, e.g. `2006-01-02T15:04:05Z07:00`.
	QueryAsOfTime *string `pulumi:"queryAsOfTime"`
	// The transaction ID at which to read the table contents.
	TransactionId *int `pulumi:"transactionId"`
}

// A collection of values returned by getCatalogTable.
type LookupCatalogTableResult struct {
	// The ARN of the Glue Table.
	Arn string `pulumi:"arn"`
	// ID of the Data Catalog in which the table resides.
	CatalogId string `pulumi:"catalogId"`
	// Name of the catalog database that contains the target table.
	DatabaseName string `pulumi:"databaseName"`
	// Description of the table.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the target table.
	Name string `pulumi:"name"`
	// Owner of the table.
	Owner string `pulumi:"owner"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Configuration block for a maximum of 3 partition indexes. See `partitionIndex` below.
	PartitionIndices []GetCatalogTablePartitionIndex `pulumi:"partitionIndices"`
	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See `partitionKeys` below.
	PartitionKeys []GetCatalogTablePartitionKey `pulumi:"partitionKeys"`
	QueryAsOfTime *string                       `pulumi:"queryAsOfTime"`
	// Retention time for this table.
	Retention int `pulumi:"retention"`
	// Configuration block for information about the physical storage of this table. For more information, refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor). See `storageDescriptor` below.
	StorageDescriptors []GetCatalogTableStorageDescriptor `pulumi:"storageDescriptors"`
	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as `ALTER TABLE` and `SHOW CREATE TABLE` will fail if this argument is empty.
	TableType string `pulumi:"tableType"`
	// Configuration block of a target table for resource linking. See `targetTable` below.
	TargetTables  []GetCatalogTableTargetTable `pulumi:"targetTables"`
	TransactionId *int                         `pulumi:"transactionId"`
	// If the table is a view, the expanded text of the view; otherwise null.
	ViewExpandedText string `pulumi:"viewExpandedText"`
	// If the table is a view, the original text of the view; otherwise null.
	ViewOriginalText string `pulumi:"viewOriginalText"`
}

func LookupCatalogTableOutput(ctx *pulumi.Context, args LookupCatalogTableOutputArgs, opts ...pulumi.InvokeOption) LookupCatalogTableResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCatalogTableArgs](args.ToOutput(), func(plainArgs *LookupCatalogTableArgs) (*LookupCatalogTableResult, error) {
		return LookupCatalogTable(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCatalogTableResultOutput, *LookupCatalogTableResult](outputResult)
}

// A collection of arguments for invoking getCatalogTable.
type LookupCatalogTableOutputArgs struct {
	// ID of the Glue Catalog and database where the table metadata resides. If omitted, this defaults to the current AWS Account ID.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the table.
	Name pulumix.Input[string] `pulumi:"name"`
	// The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with `transactionId`. Specified in RFC 3339 format, e.g. `2006-01-02T15:04:05Z07:00`.
	QueryAsOfTime pulumix.Input[*string] `pulumi:"queryAsOfTime"`
	// The transaction ID at which to read the table contents.
	TransactionId pulumix.Input[*int] `pulumi:"transactionId"`
}

func (args LookupCatalogTableOutputArgs) ToOutput() pulumix.Output[*LookupCatalogTableArgs] {
	allArgs := pulumix.All(
		args.CatalogId.ToOutput(context.Background()).AsAny(),
		args.DatabaseName.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.QueryAsOfTime.ToOutput(context.Background()).AsAny(),
		args.TransactionId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCatalogTableArgs {
		return &LookupCatalogTableArgs{
			CatalogId:     resolvedArgs[0].(*string),
			DatabaseName:  resolvedArgs[1].(string),
			Name:          resolvedArgs[2].(string),
			QueryAsOfTime: resolvedArgs[3].(*string),
			TransactionId: resolvedArgs[4].(*int),
		}
	})
}

type LookupCatalogTableResultOutput struct{ *pulumi.OutputState }

func (LookupCatalogTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogTableResult)(nil)).Elem()
}

func (o LookupCatalogTableResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCatalogTableResult] {
	return pulumix.Output[*LookupCatalogTableResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCatalogTableResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.Arn })
}

func (o LookupCatalogTableResultOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.CatalogId })
}

func (o LookupCatalogTableResultOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.DatabaseName })
}

func (o LookupCatalogTableResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.Description })
}

func (o LookupCatalogTableResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.Id })
}

func (o LookupCatalogTableResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.Name })
}

func (o LookupCatalogTableResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.Owner })
}

func (o LookupCatalogTableResultOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupCatalogTableResultOutput) PartitionIndices() pulumix.GArrayOutput[GetCatalogTablePartitionIndex, GetCatalogTablePartitionIndexOutput] {
	value := pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) []GetCatalogTablePartitionIndex { return v.PartitionIndices })
	return pulumix.GArrayOutput[GetCatalogTablePartitionIndex, GetCatalogTablePartitionIndexOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCatalogTableResultOutput) PartitionKeys() pulumix.GArrayOutput[GetCatalogTablePartitionKey, GetCatalogTablePartitionKeyOutput] {
	value := pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) []GetCatalogTablePartitionKey { return v.PartitionKeys })
	return pulumix.GArrayOutput[GetCatalogTablePartitionKey, GetCatalogTablePartitionKeyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCatalogTableResultOutput) QueryAsOfTime() pulumix.Output[*string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) *string { return v.QueryAsOfTime })
}

func (o LookupCatalogTableResultOutput) Retention() pulumix.Output[int] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) int { return v.Retention })
}

func (o LookupCatalogTableResultOutput) StorageDescriptors() pulumix.GArrayOutput[GetCatalogTableStorageDescriptor, GetCatalogTableStorageDescriptorOutput] {
	value := pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) []GetCatalogTableStorageDescriptor { return v.StorageDescriptors })
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptor, GetCatalogTableStorageDescriptorOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCatalogTableResultOutput) TableType() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.TableType })
}

func (o LookupCatalogTableResultOutput) TargetTables() pulumix.GArrayOutput[GetCatalogTableTargetTable, GetCatalogTableTargetTableOutput] {
	value := pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) []GetCatalogTableTargetTable { return v.TargetTables })
	return pulumix.GArrayOutput[GetCatalogTableTargetTable, GetCatalogTableTargetTableOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupCatalogTableResultOutput) TransactionId() pulumix.Output[*int] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) *int { return v.TransactionId })
}

func (o LookupCatalogTableResultOutput) ViewExpandedText() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.ViewExpandedText })
}

func (o LookupCatalogTableResultOutput) ViewOriginalText() pulumix.Output[string] {
	return pulumix.Apply[*LookupCatalogTableResult](o, func(v *LookupCatalogTableResult) string { return v.ViewOriginalText })
}
