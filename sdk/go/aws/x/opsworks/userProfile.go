// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks User Profile resource.
type UserProfile struct {
	pulumi.CustomResourceState

	// Whether users can specify their own SSH public key through the My Settings page
	AllowSelfManagement pulumix.Output[*bool] `pulumi:"allowSelfManagement"`
	// The users public key
	SshPublicKey pulumix.Output[*string] `pulumi:"sshPublicKey"`
	// The ssh username, with witch this user wants to log in
	SshUsername pulumix.Output[string] `pulumi:"sshUsername"`
	// The user's IAM ARN
	UserArn pulumix.Output[string] `pulumi:"userArn"`
}

// NewUserProfile registers a new resource with the given unique name, arguments, and options.
func NewUserProfile(ctx *pulumi.Context,
	name string, args *UserProfileArgs, opts ...pulumi.ResourceOption) (*UserProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SshUsername == nil {
		return nil, errors.New("invalid value for required argument 'SshUsername'")
	}
	if args.UserArn == nil {
		return nil, errors.New("invalid value for required argument 'UserArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserProfile
	err := ctx.RegisterResource("aws:opsworks/userProfile:UserProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserProfile gets an existing UserProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserProfileState, opts ...pulumi.ResourceOption) (*UserProfile, error) {
	var resource UserProfile
	err := ctx.ReadResource("aws:opsworks/userProfile:UserProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserProfile resources.
type userProfileState struct {
	// Whether users can specify their own SSH public key through the My Settings page
	AllowSelfManagement *bool `pulumi:"allowSelfManagement"`
	// The users public key
	SshPublicKey *string `pulumi:"sshPublicKey"`
	// The ssh username, with witch this user wants to log in
	SshUsername *string `pulumi:"sshUsername"`
	// The user's IAM ARN
	UserArn *string `pulumi:"userArn"`
}

type UserProfileState struct {
	// Whether users can specify their own SSH public key through the My Settings page
	AllowSelfManagement pulumix.Input[*bool]
	// The users public key
	SshPublicKey pulumix.Input[*string]
	// The ssh username, with witch this user wants to log in
	SshUsername pulumix.Input[*string]
	// The user's IAM ARN
	UserArn pulumix.Input[*string]
}

func (UserProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*userProfileState)(nil)).Elem()
}

type userProfileArgs struct {
	// Whether users can specify their own SSH public key through the My Settings page
	AllowSelfManagement *bool `pulumi:"allowSelfManagement"`
	// The users public key
	SshPublicKey *string `pulumi:"sshPublicKey"`
	// The ssh username, with witch this user wants to log in
	SshUsername string `pulumi:"sshUsername"`
	// The user's IAM ARN
	UserArn string `pulumi:"userArn"`
}

// The set of arguments for constructing a UserProfile resource.
type UserProfileArgs struct {
	// Whether users can specify their own SSH public key through the My Settings page
	AllowSelfManagement pulumix.Input[*bool]
	// The users public key
	SshPublicKey pulumix.Input[*string]
	// The ssh username, with witch this user wants to log in
	SshUsername pulumix.Input[string]
	// The user's IAM ARN
	UserArn pulumix.Input[string]
}

func (UserProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userProfileArgs)(nil)).Elem()
}

type UserProfileOutput struct{ *pulumi.OutputState }

func (UserProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProfile)(nil)).Elem()
}

func (o UserProfileOutput) ToUserProfileOutput() UserProfileOutput {
	return o
}

func (o UserProfileOutput) ToUserProfileOutputWithContext(ctx context.Context) UserProfileOutput {
	return o
}

func (o UserProfileOutput) ToOutput(ctx context.Context) pulumix.Output[UserProfile] {
	return pulumix.Output[UserProfile]{
		OutputState: o.OutputState,
	}
}

// Whether users can specify their own SSH public key through the My Settings page
func (o UserProfileOutput) AllowSelfManagement() pulumix.Output[*bool] {
	value := pulumix.Apply[UserProfile](o, func(v UserProfile) pulumix.Output[*bool] { return v.AllowSelfManagement })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The users public key
func (o UserProfileOutput) SshPublicKey() pulumix.Output[*string] {
	value := pulumix.Apply[UserProfile](o, func(v UserProfile) pulumix.Output[*string] { return v.SshPublicKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ssh username, with witch this user wants to log in
func (o UserProfileOutput) SshUsername() pulumix.Output[string] {
	value := pulumix.Apply[UserProfile](o, func(v UserProfile) pulumix.Output[string] { return v.SshUsername })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The user's IAM ARN
func (o UserProfileOutput) UserArn() pulumix.Output[string] {
	value := pulumix.Apply[UserProfile](o, func(v UserProfile) pulumix.Output[string] { return v.UserArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserProfileOutput{})
}
