// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qldb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to fetch information about a Quantum Ledger Database.
func LookupLedger(ctx *pulumi.Context, args *LookupLedgerArgs, opts ...pulumi.InvokeOption) (*LookupLedgerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLedgerResult
	err := ctx.Invoke("aws:qldb/getLedger:getLedger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLedger.
type LookupLedgerArgs struct {
	// Friendly name of the ledger to match.
	Name string            `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLedger.
type LookupLedgerResult struct {
	Arn                string `pulumi:"arn"`
	DeletionProtection bool   `pulumi:"deletionProtection"`
	// The provider-assigned unique ID for this managed resource.
	Id              string            `pulumi:"id"`
	KmsKey          string            `pulumi:"kmsKey"`
	Name            string            `pulumi:"name"`
	PermissionsMode string            `pulumi:"permissionsMode"`
	Tags            map[string]string `pulumi:"tags"`
}

func LookupLedgerOutput(ctx *pulumi.Context, args LookupLedgerOutputArgs, opts ...pulumi.InvokeOption) LookupLedgerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLedgerArgs](args.ToOutput(), func(plainArgs *LookupLedgerArgs) (*LookupLedgerResult, error) {
		return LookupLedger(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLedgerResultOutput, *LookupLedgerResult](outputResult)
}

// A collection of arguments for invoking getLedger.
type LookupLedgerOutputArgs struct {
	// Friendly name of the ledger to match.
	Name pulumix.Input[string]            `pulumi:"name"`
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupLedgerOutputArgs) ToOutput() pulumix.Output[*LookupLedgerArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLedgerArgs {
		return &LookupLedgerArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupLedgerResultOutput struct{ *pulumi.OutputState }

func (LookupLedgerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLedgerResult)(nil)).Elem()
}

func (o LookupLedgerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLedgerResult] {
	return pulumix.Output[*LookupLedgerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLedgerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) string { return v.Arn })
}

func (o LookupLedgerResultOutput) DeletionProtection() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) bool { return v.DeletionProtection })
}

func (o LookupLedgerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) string { return v.Id })
}

func (o LookupLedgerResultOutput) KmsKey() pulumix.Output[string] {
	return pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) string { return v.KmsKey })
}

func (o LookupLedgerResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) string { return v.Name })
}

func (o LookupLedgerResultOutput) PermissionsMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) string { return v.PermissionsMode })
}

func (o LookupLedgerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupLedgerResult](o, func(v *LookupLedgerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
