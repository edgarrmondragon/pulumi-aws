// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS Opensearch Outbound Connection.
type OutboundConnection struct {
	pulumi.CustomResourceState

	// Specifies the connection alias that will be used by the customer for this connection.
	ConnectionAlias pulumix.Output[string] `pulumi:"connectionAlias"`
	// Status of the connection request.
	ConnectionStatus pulumix.Output[string] `pulumi:"connectionStatus"`
	// Configuration block for the local Opensearch domain.
	LocalDomainInfo pulumix.GPtrOutput[OutboundConnectionLocalDomainInfo, OutboundConnectionLocalDomainInfoOutput] `pulumi:"localDomainInfo"`
	// Configuration block for the remote Opensearch domain.
	RemoteDomainInfo pulumix.GPtrOutput[OutboundConnectionRemoteDomainInfo, OutboundConnectionRemoteDomainInfoOutput] `pulumi:"remoteDomainInfo"`
}

// NewOutboundConnection registers a new resource with the given unique name, arguments, and options.
func NewOutboundConnection(ctx *pulumi.Context,
	name string, args *OutboundConnectionArgs, opts ...pulumi.ResourceOption) (*OutboundConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionAlias == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionAlias'")
	}
	if args.LocalDomainInfo == nil {
		return nil, errors.New("invalid value for required argument 'LocalDomainInfo'")
	}
	if args.RemoteDomainInfo == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDomainInfo'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutboundConnection
	err := ctx.RegisterResource("aws:opensearch/outboundConnection:OutboundConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutboundConnection gets an existing OutboundConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutboundConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutboundConnectionState, opts ...pulumi.ResourceOption) (*OutboundConnection, error) {
	var resource OutboundConnection
	err := ctx.ReadResource("aws:opensearch/outboundConnection:OutboundConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutboundConnection resources.
type outboundConnectionState struct {
	// Specifies the connection alias that will be used by the customer for this connection.
	ConnectionAlias *string `pulumi:"connectionAlias"`
	// Status of the connection request.
	ConnectionStatus *string `pulumi:"connectionStatus"`
	// Configuration block for the local Opensearch domain.
	LocalDomainInfo *OutboundConnectionLocalDomainInfo `pulumi:"localDomainInfo"`
	// Configuration block for the remote Opensearch domain.
	RemoteDomainInfo *OutboundConnectionRemoteDomainInfo `pulumi:"remoteDomainInfo"`
}

type OutboundConnectionState struct {
	// Specifies the connection alias that will be used by the customer for this connection.
	ConnectionAlias pulumix.Input[*string]
	// Status of the connection request.
	ConnectionStatus pulumix.Input[*string]
	// Configuration block for the local Opensearch domain.
	LocalDomainInfo pulumix.Input[*OutboundConnectionLocalDomainInfoArgs]
	// Configuration block for the remote Opensearch domain.
	RemoteDomainInfo pulumix.Input[*OutboundConnectionRemoteDomainInfoArgs]
}

func (OutboundConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*outboundConnectionState)(nil)).Elem()
}

type outboundConnectionArgs struct {
	// Specifies the connection alias that will be used by the customer for this connection.
	ConnectionAlias string `pulumi:"connectionAlias"`
	// Configuration block for the local Opensearch domain.
	LocalDomainInfo OutboundConnectionLocalDomainInfo `pulumi:"localDomainInfo"`
	// Configuration block for the remote Opensearch domain.
	RemoteDomainInfo OutboundConnectionRemoteDomainInfo `pulumi:"remoteDomainInfo"`
}

// The set of arguments for constructing a OutboundConnection resource.
type OutboundConnectionArgs struct {
	// Specifies the connection alias that will be used by the customer for this connection.
	ConnectionAlias pulumix.Input[string]
	// Configuration block for the local Opensearch domain.
	LocalDomainInfo pulumix.Input[*OutboundConnectionLocalDomainInfoArgs]
	// Configuration block for the remote Opensearch domain.
	RemoteDomainInfo pulumix.Input[*OutboundConnectionRemoteDomainInfoArgs]
}

func (OutboundConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outboundConnectionArgs)(nil)).Elem()
}

type OutboundConnectionOutput struct{ *pulumi.OutputState }

func (OutboundConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundConnection)(nil)).Elem()
}

func (o OutboundConnectionOutput) ToOutboundConnectionOutput() OutboundConnectionOutput {
	return o
}

func (o OutboundConnectionOutput) ToOutboundConnectionOutputWithContext(ctx context.Context) OutboundConnectionOutput {
	return o
}

func (o OutboundConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[OutboundConnection] {
	return pulumix.Output[OutboundConnection]{
		OutputState: o.OutputState,
	}
}

// Specifies the connection alias that will be used by the customer for this connection.
func (o OutboundConnectionOutput) ConnectionAlias() pulumix.Output[string] {
	value := pulumix.Apply[OutboundConnection](o, func(v OutboundConnection) pulumix.Output[string] { return v.ConnectionAlias })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the connection request.
func (o OutboundConnectionOutput) ConnectionStatus() pulumix.Output[string] {
	value := pulumix.Apply[OutboundConnection](o, func(v OutboundConnection) pulumix.Output[string] { return v.ConnectionStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the local Opensearch domain.
func (o OutboundConnectionOutput) LocalDomainInfo() pulumix.GPtrOutput[OutboundConnectionLocalDomainInfo, OutboundConnectionLocalDomainInfoOutput] {
	value := pulumix.Apply[OutboundConnection](o, func(v OutboundConnection) pulumix.GPtrOutput[OutboundConnectionLocalDomainInfo, OutboundConnectionLocalDomainInfoOutput] {
		return v.LocalDomainInfo
	})
	unwrapped := pulumix.Flatten[*OutboundConnectionLocalDomainInfo, pulumix.GPtrOutput[OutboundConnectionLocalDomainInfo, OutboundConnectionLocalDomainInfoOutput]](value)
	return pulumix.GPtrOutput[OutboundConnectionLocalDomainInfo, OutboundConnectionLocalDomainInfoOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the remote Opensearch domain.
func (o OutboundConnectionOutput) RemoteDomainInfo() pulumix.GPtrOutput[OutboundConnectionRemoteDomainInfo, OutboundConnectionRemoteDomainInfoOutput] {
	value := pulumix.Apply[OutboundConnection](o, func(v OutboundConnection) pulumix.GPtrOutput[OutboundConnectionRemoteDomainInfo, OutboundConnectionRemoteDomainInfoOutput] {
		return v.RemoteDomainInfo
	})
	unwrapped := pulumix.Flatten[*OutboundConnectionRemoteDomainInfo, pulumix.GPtrOutput[OutboundConnectionRemoteDomainInfo, OutboundConnectionRemoteDomainInfoOutput]](value)
	return pulumix.GPtrOutput[OutboundConnectionRemoteDomainInfo, OutboundConnectionRemoteDomainInfoOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(OutboundConnectionOutput{})
}
