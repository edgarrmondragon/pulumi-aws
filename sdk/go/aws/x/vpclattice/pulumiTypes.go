// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ListenerDefaultAction struct {
	FixedResponse *ListenerDefaultActionFixedResponse `pulumi:"fixedResponse"`
	// Route requests to one or more target groups. See Forward blocks below.
	//
	// > **NOTE:** You must specify exactly one of the following argument blocks: `fixedResponse` or `forward`.
	Forwards []ListenerDefaultActionForward `pulumi:"forwards"`
}

type ListenerDefaultActionArgs struct {
	FixedResponse pulumix.Input[*ListenerDefaultActionFixedResponseArgs] `pulumi:"fixedResponse"`
	// Route requests to one or more target groups. See Forward blocks below.
	//
	// > **NOTE:** You must specify exactly one of the following argument blocks: `fixedResponse` or `forward`.
	Forwards pulumix.Input[[]*ListenerDefaultActionForwardArgs] `pulumi:"forwards"`
}

func (ListenerDefaultActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultAction)(nil)).Elem()
}

func (i ListenerDefaultActionArgs) ToListenerDefaultActionOutput() ListenerDefaultActionOutput {
	return i.ToListenerDefaultActionOutputWithContext(context.Background())
}

func (i ListenerDefaultActionArgs) ToListenerDefaultActionOutputWithContext(ctx context.Context) ListenerDefaultActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionOutput)
}

func (i *ListenerDefaultActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultAction)(nil)).Elem()
}

func (o ListenerDefaultActionOutput) ToListenerDefaultActionOutput() ListenerDefaultActionOutput {
	return o
}

func (o ListenerDefaultActionOutput) ToListenerDefaultActionOutputWithContext(ctx context.Context) ListenerDefaultActionOutput {
	return o
}

func (o ListenerDefaultActionOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultAction] {
	return pulumix.Output[ListenerDefaultAction]{
		OutputState: o.OutputState,
	}
}

func (o ListenerDefaultActionOutput) FixedResponse() pulumix.GPtrOutput[ListenerDefaultActionFixedResponse, ListenerDefaultActionFixedResponseOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *ListenerDefaultActionFixedResponse { return v.FixedResponse })
	return pulumix.GPtrOutput[ListenerDefaultActionFixedResponse, ListenerDefaultActionFixedResponseOutput]{OutputState: value.OutputState}
}

// Route requests to one or more target groups. See Forward blocks below.
//
// > **NOTE:** You must specify exactly one of the following argument blocks: `fixedResponse` or `forward`.
func (o ListenerDefaultActionOutput) Forwards() pulumix.GArrayOutput[ListenerDefaultActionForward, ListenerDefaultActionForwardOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) []ListenerDefaultActionForward { return v.Forwards })
	return pulumix.GArrayOutput[ListenerDefaultActionForward, ListenerDefaultActionForwardOutput]{OutputState: value.OutputState}
}

type ListenerDefaultActionFixedResponse struct {
	// Custom HTTP status code to return, e.g. a 404 response code. See [Listeners](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html) in the AWS documentation for a list of supported codes.
	StatusCode int `pulumi:"statusCode"`
}

type ListenerDefaultActionFixedResponseArgs struct {
	// Custom HTTP status code to return, e.g. a 404 response code. See [Listeners](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html) in the AWS documentation for a list of supported codes.
	StatusCode pulumix.Input[int] `pulumi:"statusCode"`
}

func (ListenerDefaultActionFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (i ListenerDefaultActionFixedResponseArgs) ToListenerDefaultActionFixedResponseOutput() ListenerDefaultActionFixedResponseOutput {
	return i.ToListenerDefaultActionFixedResponseOutputWithContext(context.Background())
}

func (i ListenerDefaultActionFixedResponseArgs) ToListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) ListenerDefaultActionFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionFixedResponseOutput)
}

func (i *ListenerDefaultActionFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionFixedResponseArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionFixedResponseOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (o ListenerDefaultActionFixedResponseOutput) ToListenerDefaultActionFixedResponseOutput() ListenerDefaultActionFixedResponseOutput {
	return o
}

func (o ListenerDefaultActionFixedResponseOutput) ToListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) ListenerDefaultActionFixedResponseOutput {
	return o
}

func (o ListenerDefaultActionFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionFixedResponse] {
	return pulumix.Output[ListenerDefaultActionFixedResponse]{
		OutputState: o.OutputState,
	}
}

// Custom HTTP status code to return, e.g. a 404 response code. See [Listeners](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html) in the AWS documentation for a list of supported codes.
func (o ListenerDefaultActionFixedResponseOutput) StatusCode() pulumix.Output[int] {
	return pulumix.Apply[ListenerDefaultActionFixedResponse](o, func(v ListenerDefaultActionFixedResponse) int { return v.StatusCode })
}

type ListenerDefaultActionForward struct {
	// One or more target group blocks.
	TargetGroups []ListenerDefaultActionForwardTargetGroup `pulumi:"targetGroups"`
}

type ListenerDefaultActionForwardArgs struct {
	// One or more target group blocks.
	TargetGroups pulumix.Input[[]*ListenerDefaultActionForwardTargetGroupArgs] `pulumi:"targetGroups"`
}

func (ListenerDefaultActionForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForward)(nil)).Elem()
}

func (i ListenerDefaultActionForwardArgs) ToListenerDefaultActionForwardOutput() ListenerDefaultActionForwardOutput {
	return i.ToListenerDefaultActionForwardOutputWithContext(context.Background())
}

func (i ListenerDefaultActionForwardArgs) ToListenerDefaultActionForwardOutputWithContext(ctx context.Context) ListenerDefaultActionForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionForwardOutput)
}

func (i *ListenerDefaultActionForwardArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionForwardArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionForwardOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForward)(nil)).Elem()
}

func (o ListenerDefaultActionForwardOutput) ToListenerDefaultActionForwardOutput() ListenerDefaultActionForwardOutput {
	return o
}

func (o ListenerDefaultActionForwardOutput) ToListenerDefaultActionForwardOutputWithContext(ctx context.Context) ListenerDefaultActionForwardOutput {
	return o
}

func (o ListenerDefaultActionForwardOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionForward] {
	return pulumix.Output[ListenerDefaultActionForward]{
		OutputState: o.OutputState,
	}
}

// One or more target group blocks.
func (o ListenerDefaultActionForwardOutput) TargetGroups() pulumix.GArrayOutput[ListenerDefaultActionForwardTargetGroup, ListenerDefaultActionForwardTargetGroupOutput] {
	value := pulumix.Apply[ListenerDefaultActionForward](o, func(v ListenerDefaultActionForward) []ListenerDefaultActionForwardTargetGroup { return v.TargetGroups })
	return pulumix.GArrayOutput[ListenerDefaultActionForwardTargetGroup, ListenerDefaultActionForwardTargetGroupOutput]{OutputState: value.OutputState}
}

type ListenerDefaultActionForwardTargetGroup struct {
	// ID or Amazon Resource Name (ARN) of the target group.
	TargetGroupIdentifier *string `pulumi:"targetGroupIdentifier"`
	// Determines how requests are distributed to the target group. Only required if you specify multiple target groups for a forward action. For example, if you specify two target groups, one with a
	// weight of 10 and the other with a weight of 20, the target group with a weight of 20 receives twice as many requests as the other target group. See [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the AWS documentation for additional examples. Default: `100`.
	Weight *int `pulumi:"weight"`
}

type ListenerDefaultActionForwardTargetGroupArgs struct {
	// ID or Amazon Resource Name (ARN) of the target group.
	TargetGroupIdentifier pulumix.Input[*string] `pulumi:"targetGroupIdentifier"`
	// Determines how requests are distributed to the target group. Only required if you specify multiple target groups for a forward action. For example, if you specify two target groups, one with a
	// weight of 10 and the other with a weight of 20, the target group with a weight of 20 receives twice as many requests as the other target group. See [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the AWS documentation for additional examples. Default: `100`.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (ListenerDefaultActionForwardTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (i ListenerDefaultActionForwardTargetGroupArgs) ToListenerDefaultActionForwardTargetGroupOutput() ListenerDefaultActionForwardTargetGroupOutput {
	return i.ToListenerDefaultActionForwardTargetGroupOutputWithContext(context.Background())
}

func (i ListenerDefaultActionForwardTargetGroupArgs) ToListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerDefaultActionForwardTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionForwardTargetGroupOutput)
}

func (i *ListenerDefaultActionForwardTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionForwardTargetGroupArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionForwardTargetGroupOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionForwardTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (o ListenerDefaultActionForwardTargetGroupOutput) ToListenerDefaultActionForwardTargetGroupOutput() ListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o ListenerDefaultActionForwardTargetGroupOutput) ToListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o ListenerDefaultActionForwardTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionForwardTargetGroup] {
	return pulumix.Output[ListenerDefaultActionForwardTargetGroup]{
		OutputState: o.OutputState,
	}
}

// ID or Amazon Resource Name (ARN) of the target group.
func (o ListenerDefaultActionForwardTargetGroupOutput) TargetGroupIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionForwardTargetGroup](o, func(v ListenerDefaultActionForwardTargetGroup) *string { return v.TargetGroupIdentifier })
}

// Determines how requests are distributed to the target group. Only required if you specify multiple target groups for a forward action. For example, if you specify two target groups, one with a
// weight of 10 and the other with a weight of 20, the target group with a weight of 20 receives twice as many requests as the other target group. See [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the AWS documentation for additional examples. Default: `100`.
func (o ListenerDefaultActionForwardTargetGroupOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ListenerDefaultActionForwardTargetGroup](o, func(v ListenerDefaultActionForwardTargetGroup) *int { return v.Weight })
}

type ListenerRuleAction struct {
	// Describes the rule action that returns a custom HTTP response.
	FixedResponse *ListenerRuleActionFixedResponse `pulumi:"fixedResponse"`
	// The forward action. Traffic that matches the rule is forwarded to the specified target groups.
	Forward *ListenerRuleActionForward `pulumi:"forward"`
}

type ListenerRuleActionArgs struct {
	// Describes the rule action that returns a custom HTTP response.
	FixedResponse pulumix.Input[*ListenerRuleActionFixedResponseArgs] `pulumi:"fixedResponse"`
	// The forward action. Traffic that matches the rule is forwarded to the specified target groups.
	Forward pulumix.Input[*ListenerRuleActionForwardArgs] `pulumi:"forward"`
}

func (ListenerRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleAction)(nil)).Elem()
}

func (i ListenerRuleActionArgs) ToListenerRuleActionOutput() ListenerRuleActionOutput {
	return i.ToListenerRuleActionOutputWithContext(context.Background())
}

func (i ListenerRuleActionArgs) ToListenerRuleActionOutputWithContext(ctx context.Context) ListenerRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionOutput)
}

func (i *ListenerRuleActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleAction)(nil)).Elem()
}

func (o ListenerRuleActionOutput) ToListenerRuleActionOutput() ListenerRuleActionOutput {
	return o
}

func (o ListenerRuleActionOutput) ToListenerRuleActionOutputWithContext(ctx context.Context) ListenerRuleActionOutput {
	return o
}

func (o ListenerRuleActionOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleAction] {
	return pulumix.Output[ListenerRuleAction]{
		OutputState: o.OutputState,
	}
}

// Describes the rule action that returns a custom HTTP response.
func (o ListenerRuleActionOutput) FixedResponse() pulumix.GPtrOutput[ListenerRuleActionFixedResponse, ListenerRuleActionFixedResponseOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionFixedResponse { return v.FixedResponse })
	return pulumix.GPtrOutput[ListenerRuleActionFixedResponse, ListenerRuleActionFixedResponseOutput]{OutputState: value.OutputState}
}

// The forward action. Traffic that matches the rule is forwarded to the specified target groups.
func (o ListenerRuleActionOutput) Forward() pulumix.GPtrOutput[ListenerRuleActionForward, ListenerRuleActionForwardOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionForward { return v.Forward })
	return pulumix.GPtrOutput[ListenerRuleActionForward, ListenerRuleActionForwardOutput]{OutputState: value.OutputState}
}

type ListenerRuleActionFixedResponse struct {
	// The HTTP response code.
	StatusCode int `pulumi:"statusCode"`
}

type ListenerRuleActionFixedResponseArgs struct {
	// The HTTP response code.
	StatusCode pulumix.Input[int] `pulumi:"statusCode"`
}

func (ListenerRuleActionFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionFixedResponse)(nil)).Elem()
}

func (i ListenerRuleActionFixedResponseArgs) ToListenerRuleActionFixedResponseOutput() ListenerRuleActionFixedResponseOutput {
	return i.ToListenerRuleActionFixedResponseOutputWithContext(context.Background())
}

func (i ListenerRuleActionFixedResponseArgs) ToListenerRuleActionFixedResponseOutputWithContext(ctx context.Context) ListenerRuleActionFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionFixedResponseOutput)
}

func (i *ListenerRuleActionFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionFixedResponseArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionFixedResponseOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionFixedResponse)(nil)).Elem()
}

func (o ListenerRuleActionFixedResponseOutput) ToListenerRuleActionFixedResponseOutput() ListenerRuleActionFixedResponseOutput {
	return o
}

func (o ListenerRuleActionFixedResponseOutput) ToListenerRuleActionFixedResponseOutputWithContext(ctx context.Context) ListenerRuleActionFixedResponseOutput {
	return o
}

func (o ListenerRuleActionFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionFixedResponse] {
	return pulumix.Output[ListenerRuleActionFixedResponse]{
		OutputState: o.OutputState,
	}
}

// The HTTP response code.
func (o ListenerRuleActionFixedResponseOutput) StatusCode() pulumix.Output[int] {
	return pulumix.Apply[ListenerRuleActionFixedResponse](o, func(v ListenerRuleActionFixedResponse) int { return v.StatusCode })
}

type ListenerRuleActionForward struct {
	// The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.
	//
	// The default value is 1 with maximum number of 2. If only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.
	TargetGroups []ListenerRuleActionForwardTargetGroup `pulumi:"targetGroups"`
}

type ListenerRuleActionForwardArgs struct {
	// The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.
	//
	// The default value is 1 with maximum number of 2. If only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.
	TargetGroups pulumix.Input[[]*ListenerRuleActionForwardTargetGroupArgs] `pulumi:"targetGroups"`
}

func (ListenerRuleActionForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForward)(nil)).Elem()
}

func (i ListenerRuleActionForwardArgs) ToListenerRuleActionForwardOutput() ListenerRuleActionForwardOutput {
	return i.ToListenerRuleActionForwardOutputWithContext(context.Background())
}

func (i ListenerRuleActionForwardArgs) ToListenerRuleActionForwardOutputWithContext(ctx context.Context) ListenerRuleActionForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionForwardOutput)
}

func (i *ListenerRuleActionForwardArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionForwardArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionForwardOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForward)(nil)).Elem()
}

func (o ListenerRuleActionForwardOutput) ToListenerRuleActionForwardOutput() ListenerRuleActionForwardOutput {
	return o
}

func (o ListenerRuleActionForwardOutput) ToListenerRuleActionForwardOutputWithContext(ctx context.Context) ListenerRuleActionForwardOutput {
	return o
}

func (o ListenerRuleActionForwardOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionForward] {
	return pulumix.Output[ListenerRuleActionForward]{
		OutputState: o.OutputState,
	}
}

// The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.
//
// The default value is 1 with maximum number of 2. If only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.
func (o ListenerRuleActionForwardOutput) TargetGroups() pulumix.GArrayOutput[ListenerRuleActionForwardTargetGroup, ListenerRuleActionForwardTargetGroupOutput] {
	value := pulumix.Apply[ListenerRuleActionForward](o, func(v ListenerRuleActionForward) []ListenerRuleActionForwardTargetGroup { return v.TargetGroups })
	return pulumix.GArrayOutput[ListenerRuleActionForwardTargetGroup, ListenerRuleActionForwardTargetGroupOutput]{OutputState: value.OutputState}
}

type ListenerRuleActionForwardTargetGroup struct {
	TargetGroupIdentifier string `pulumi:"targetGroupIdentifier"`
	Weight                *int   `pulumi:"weight"`
}

type ListenerRuleActionForwardTargetGroupArgs struct {
	TargetGroupIdentifier pulumix.Input[string] `pulumi:"targetGroupIdentifier"`
	Weight                pulumix.Input[*int]   `pulumi:"weight"`
}

func (ListenerRuleActionForwardTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForwardTargetGroup)(nil)).Elem()
}

func (i ListenerRuleActionForwardTargetGroupArgs) ToListenerRuleActionForwardTargetGroupOutput() ListenerRuleActionForwardTargetGroupOutput {
	return i.ToListenerRuleActionForwardTargetGroupOutputWithContext(context.Background())
}

func (i ListenerRuleActionForwardTargetGroupArgs) ToListenerRuleActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerRuleActionForwardTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionForwardTargetGroupOutput)
}

func (i *ListenerRuleActionForwardTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionForwardTargetGroupArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionForwardTargetGroupOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionForwardTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForwardTargetGroup)(nil)).Elem()
}

func (o ListenerRuleActionForwardTargetGroupOutput) ToListenerRuleActionForwardTargetGroupOutput() ListenerRuleActionForwardTargetGroupOutput {
	return o
}

func (o ListenerRuleActionForwardTargetGroupOutput) ToListenerRuleActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerRuleActionForwardTargetGroupOutput {
	return o
}

func (o ListenerRuleActionForwardTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionForwardTargetGroup] {
	return pulumix.Output[ListenerRuleActionForwardTargetGroup]{
		OutputState: o.OutputState,
	}
}

func (o ListenerRuleActionForwardTargetGroupOutput) TargetGroupIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionForwardTargetGroup](o, func(v ListenerRuleActionForwardTargetGroup) string { return v.TargetGroupIdentifier })
}

func (o ListenerRuleActionForwardTargetGroupOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ListenerRuleActionForwardTargetGroup](o, func(v ListenerRuleActionForwardTargetGroup) *int { return v.Weight })
}

type ListenerRuleMatch struct {
	// The HTTP criteria that a rule must match.
	HttpMatch *ListenerRuleMatchHttpMatch `pulumi:"httpMatch"`
}

type ListenerRuleMatchArgs struct {
	// The HTTP criteria that a rule must match.
	HttpMatch pulumix.Input[*ListenerRuleMatchHttpMatchArgs] `pulumi:"httpMatch"`
}

func (ListenerRuleMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatch)(nil)).Elem()
}

func (i ListenerRuleMatchArgs) ToListenerRuleMatchOutput() ListenerRuleMatchOutput {
	return i.ToListenerRuleMatchOutputWithContext(context.Background())
}

func (i ListenerRuleMatchArgs) ToListenerRuleMatchOutputWithContext(ctx context.Context) ListenerRuleMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleMatchOutput)
}

func (i *ListenerRuleMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleMatchArgs] {
	return pulumix.Val(i)
}

type ListenerRuleMatchOutput struct{ *pulumi.OutputState }

func (ListenerRuleMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatch)(nil)).Elem()
}

func (o ListenerRuleMatchOutput) ToListenerRuleMatchOutput() ListenerRuleMatchOutput {
	return o
}

func (o ListenerRuleMatchOutput) ToListenerRuleMatchOutputWithContext(ctx context.Context) ListenerRuleMatchOutput {
	return o
}

func (o ListenerRuleMatchOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleMatch] {
	return pulumix.Output[ListenerRuleMatch]{
		OutputState: o.OutputState,
	}
}

// The HTTP criteria that a rule must match.
func (o ListenerRuleMatchOutput) HttpMatch() pulumix.GPtrOutput[ListenerRuleMatchHttpMatch, ListenerRuleMatchHttpMatchOutput] {
	value := pulumix.Apply[ListenerRuleMatch](o, func(v ListenerRuleMatch) *ListenerRuleMatchHttpMatch { return v.HttpMatch })
	return pulumix.GPtrOutput[ListenerRuleMatchHttpMatch, ListenerRuleMatchHttpMatchOutput]{OutputState: value.OutputState}
}

type ListenerRuleMatchHttpMatch struct {
	// The header matches. Matches incoming requests with rule based on request header value before applying rule action.
	HeaderMatches []ListenerRuleMatchHttpMatchHeaderMatch `pulumi:"headerMatches"`
	// The HTTP method type.
	Method *string `pulumi:"method"`
	// The path match.
	PathMatch *ListenerRuleMatchHttpMatchPathMatch `pulumi:"pathMatch"`
}

type ListenerRuleMatchHttpMatchArgs struct {
	// The header matches. Matches incoming requests with rule based on request header value before applying rule action.
	HeaderMatches pulumix.Input[[]*ListenerRuleMatchHttpMatchHeaderMatchArgs] `pulumi:"headerMatches"`
	// The HTTP method type.
	Method pulumix.Input[*string] `pulumi:"method"`
	// The path match.
	PathMatch pulumix.Input[*ListenerRuleMatchHttpMatchPathMatchArgs] `pulumi:"pathMatch"`
}

func (ListenerRuleMatchHttpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatch)(nil)).Elem()
}

func (i ListenerRuleMatchHttpMatchArgs) ToListenerRuleMatchHttpMatchOutput() ListenerRuleMatchHttpMatchOutput {
	return i.ToListenerRuleMatchHttpMatchOutputWithContext(context.Background())
}

func (i ListenerRuleMatchHttpMatchArgs) ToListenerRuleMatchHttpMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleMatchHttpMatchOutput)
}

func (i *ListenerRuleMatchHttpMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleMatchHttpMatchArgs] {
	return pulumix.Val(i)
}

type ListenerRuleMatchHttpMatchOutput struct{ *pulumi.OutputState }

func (ListenerRuleMatchHttpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatch)(nil)).Elem()
}

func (o ListenerRuleMatchHttpMatchOutput) ToListenerRuleMatchHttpMatchOutput() ListenerRuleMatchHttpMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchOutput) ToListenerRuleMatchHttpMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleMatchHttpMatch] {
	return pulumix.Output[ListenerRuleMatchHttpMatch]{
		OutputState: o.OutputState,
	}
}

// The header matches. Matches incoming requests with rule based on request header value before applying rule action.
func (o ListenerRuleMatchHttpMatchOutput) HeaderMatches() pulumix.GArrayOutput[ListenerRuleMatchHttpMatchHeaderMatch, ListenerRuleMatchHttpMatchHeaderMatchOutput] {
	value := pulumix.Apply[ListenerRuleMatchHttpMatch](o, func(v ListenerRuleMatchHttpMatch) []ListenerRuleMatchHttpMatchHeaderMatch { return v.HeaderMatches })
	return pulumix.GArrayOutput[ListenerRuleMatchHttpMatchHeaderMatch, ListenerRuleMatchHttpMatchHeaderMatchOutput]{OutputState: value.OutputState}
}

// The HTTP method type.
func (o ListenerRuleMatchHttpMatchOutput) Method() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatch](o, func(v ListenerRuleMatchHttpMatch) *string { return v.Method })
}

// The path match.
func (o ListenerRuleMatchHttpMatchOutput) PathMatch() pulumix.GPtrOutput[ListenerRuleMatchHttpMatchPathMatch, ListenerRuleMatchHttpMatchPathMatchOutput] {
	value := pulumix.Apply[ListenerRuleMatchHttpMatch](o, func(v ListenerRuleMatchHttpMatch) *ListenerRuleMatchHttpMatchPathMatch { return v.PathMatch })
	return pulumix.GPtrOutput[ListenerRuleMatchHttpMatchPathMatch, ListenerRuleMatchHttpMatchPathMatchOutput]{OutputState: value.OutputState}
}

type ListenerRuleMatchHttpMatchHeaderMatch struct {
	// Indicates whether the match is case sensitive. Defaults to false.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// The header match type.
	Match ListenerRuleMatchHttpMatchHeaderMatchMatch `pulumi:"match"`
	// The name of the header.
	Name string `pulumi:"name"`
}

type ListenerRuleMatchHttpMatchHeaderMatchArgs struct {
	// Indicates whether the match is case sensitive. Defaults to false.
	CaseSensitive pulumix.Input[*bool] `pulumi:"caseSensitive"`
	// The header match type.
	Match pulumix.Input[*ListenerRuleMatchHttpMatchHeaderMatchMatchArgs] `pulumi:"match"`
	// The name of the header.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (ListenerRuleMatchHttpMatchHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchHeaderMatch)(nil)).Elem()
}

func (i ListenerRuleMatchHttpMatchHeaderMatchArgs) ToListenerRuleMatchHttpMatchHeaderMatchOutput() ListenerRuleMatchHttpMatchHeaderMatchOutput {
	return i.ToListenerRuleMatchHttpMatchHeaderMatchOutputWithContext(context.Background())
}

func (i ListenerRuleMatchHttpMatchHeaderMatchArgs) ToListenerRuleMatchHttpMatchHeaderMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleMatchHttpMatchHeaderMatchOutput)
}

func (i *ListenerRuleMatchHttpMatchHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleMatchHttpMatchHeaderMatchArgs] {
	return pulumix.Val(i)
}

type ListenerRuleMatchHttpMatchHeaderMatchOutput struct{ *pulumi.OutputState }

func (ListenerRuleMatchHttpMatchHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchHeaderMatch)(nil)).Elem()
}

func (o ListenerRuleMatchHttpMatchHeaderMatchOutput) ToListenerRuleMatchHttpMatchHeaderMatchOutput() ListenerRuleMatchHttpMatchHeaderMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchHeaderMatchOutput) ToListenerRuleMatchHttpMatchHeaderMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchHeaderMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleMatchHttpMatchHeaderMatch] {
	return pulumix.Output[ListenerRuleMatchHttpMatchHeaderMatch]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the match is case sensitive. Defaults to false.
func (o ListenerRuleMatchHttpMatchHeaderMatchOutput) CaseSensitive() pulumix.Output[*bool] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchHeaderMatch](o, func(v ListenerRuleMatchHttpMatchHeaderMatch) *bool { return v.CaseSensitive })
}

// The header match type.
func (o ListenerRuleMatchHttpMatchHeaderMatchOutput) Match() pulumix.GPtrOutput[ListenerRuleMatchHttpMatchHeaderMatchMatch, ListenerRuleMatchHttpMatchHeaderMatchMatchOutput] {
	value := pulumix.Apply[ListenerRuleMatchHttpMatchHeaderMatch](o, func(v ListenerRuleMatchHttpMatchHeaderMatch) ListenerRuleMatchHttpMatchHeaderMatchMatch {
		return v.Match
	})
	return pulumix.GPtrOutput[ListenerRuleMatchHttpMatchHeaderMatchMatch, ListenerRuleMatchHttpMatchHeaderMatchMatchOutput]{OutputState: value.OutputState}
}

// The name of the header.
func (o ListenerRuleMatchHttpMatchHeaderMatchOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchHeaderMatch](o, func(v ListenerRuleMatchHttpMatchHeaderMatch) string { return v.Name })
}

type ListenerRuleMatchHttpMatchHeaderMatchMatch struct {
	// Specifies a contains type match.
	Contains *string `pulumi:"contains"`
	// Specifies an exact type match.
	Exact *string `pulumi:"exact"`
	// Specifies a prefix type match. Matches the value with the prefix.
	Prefix *string `pulumi:"prefix"`
}

type ListenerRuleMatchHttpMatchHeaderMatchMatchArgs struct {
	// Specifies a contains type match.
	Contains pulumix.Input[*string] `pulumi:"contains"`
	// Specifies an exact type match.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Specifies a prefix type match. Matches the value with the prefix.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (ListenerRuleMatchHttpMatchHeaderMatchMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchHeaderMatchMatch)(nil)).Elem()
}

func (i ListenerRuleMatchHttpMatchHeaderMatchMatchArgs) ToListenerRuleMatchHttpMatchHeaderMatchMatchOutput() ListenerRuleMatchHttpMatchHeaderMatchMatchOutput {
	return i.ToListenerRuleMatchHttpMatchHeaderMatchMatchOutputWithContext(context.Background())
}

func (i ListenerRuleMatchHttpMatchHeaderMatchMatchArgs) ToListenerRuleMatchHttpMatchHeaderMatchMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchHeaderMatchMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleMatchHttpMatchHeaderMatchMatchOutput)
}

func (i *ListenerRuleMatchHttpMatchHeaderMatchMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleMatchHttpMatchHeaderMatchMatchArgs] {
	return pulumix.Val(i)
}

type ListenerRuleMatchHttpMatchHeaderMatchMatchOutput struct{ *pulumi.OutputState }

func (ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchHeaderMatchMatch)(nil)).Elem()
}

func (o ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) ToListenerRuleMatchHttpMatchHeaderMatchMatchOutput() ListenerRuleMatchHttpMatchHeaderMatchMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) ToListenerRuleMatchHttpMatchHeaderMatchMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchHeaderMatchMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleMatchHttpMatchHeaderMatchMatch] {
	return pulumix.Output[ListenerRuleMatchHttpMatchHeaderMatchMatch]{
		OutputState: o.OutputState,
	}
}

// Specifies a contains type match.
func (o ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) Contains() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchHeaderMatchMatch](o, func(v ListenerRuleMatchHttpMatchHeaderMatchMatch) *string { return v.Contains })
}

// Specifies an exact type match.
func (o ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchHeaderMatchMatch](o, func(v ListenerRuleMatchHttpMatchHeaderMatchMatch) *string { return v.Exact })
}

// Specifies a prefix type match. Matches the value with the prefix.
func (o ListenerRuleMatchHttpMatchHeaderMatchMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchHeaderMatchMatch](o, func(v ListenerRuleMatchHttpMatchHeaderMatchMatch) *string { return v.Prefix })
}

type ListenerRuleMatchHttpMatchPathMatch struct {
	// Indicates whether the match is case sensitive. Defaults to false.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// The header match type.
	Match ListenerRuleMatchHttpMatchPathMatchMatch `pulumi:"match"`
}

type ListenerRuleMatchHttpMatchPathMatchArgs struct {
	// Indicates whether the match is case sensitive. Defaults to false.
	CaseSensitive pulumix.Input[*bool] `pulumi:"caseSensitive"`
	// The header match type.
	Match pulumix.Input[*ListenerRuleMatchHttpMatchPathMatchMatchArgs] `pulumi:"match"`
}

func (ListenerRuleMatchHttpMatchPathMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchPathMatch)(nil)).Elem()
}

func (i ListenerRuleMatchHttpMatchPathMatchArgs) ToListenerRuleMatchHttpMatchPathMatchOutput() ListenerRuleMatchHttpMatchPathMatchOutput {
	return i.ToListenerRuleMatchHttpMatchPathMatchOutputWithContext(context.Background())
}

func (i ListenerRuleMatchHttpMatchPathMatchArgs) ToListenerRuleMatchHttpMatchPathMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchPathMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleMatchHttpMatchPathMatchOutput)
}

func (i *ListenerRuleMatchHttpMatchPathMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleMatchHttpMatchPathMatchArgs] {
	return pulumix.Val(i)
}

type ListenerRuleMatchHttpMatchPathMatchOutput struct{ *pulumi.OutputState }

func (ListenerRuleMatchHttpMatchPathMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchPathMatch)(nil)).Elem()
}

func (o ListenerRuleMatchHttpMatchPathMatchOutput) ToListenerRuleMatchHttpMatchPathMatchOutput() ListenerRuleMatchHttpMatchPathMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchPathMatchOutput) ToListenerRuleMatchHttpMatchPathMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchPathMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchPathMatchOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleMatchHttpMatchPathMatch] {
	return pulumix.Output[ListenerRuleMatchHttpMatchPathMatch]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the match is case sensitive. Defaults to false.
func (o ListenerRuleMatchHttpMatchPathMatchOutput) CaseSensitive() pulumix.Output[*bool] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchPathMatch](o, func(v ListenerRuleMatchHttpMatchPathMatch) *bool { return v.CaseSensitive })
}

// The header match type.
func (o ListenerRuleMatchHttpMatchPathMatchOutput) Match() pulumix.GPtrOutput[ListenerRuleMatchHttpMatchPathMatchMatch, ListenerRuleMatchHttpMatchPathMatchMatchOutput] {
	value := pulumix.Apply[ListenerRuleMatchHttpMatchPathMatch](o, func(v ListenerRuleMatchHttpMatchPathMatch) ListenerRuleMatchHttpMatchPathMatchMatch { return v.Match })
	return pulumix.GPtrOutput[ListenerRuleMatchHttpMatchPathMatchMatch, ListenerRuleMatchHttpMatchPathMatchMatchOutput]{OutputState: value.OutputState}
}

type ListenerRuleMatchHttpMatchPathMatchMatch struct {
	// Specifies an exact type match.
	Exact *string `pulumi:"exact"`
	// Specifies a prefix type match. Matches the value with the prefix.
	Prefix *string `pulumi:"prefix"`
}

type ListenerRuleMatchHttpMatchPathMatchMatchArgs struct {
	// Specifies an exact type match.
	Exact pulumix.Input[*string] `pulumi:"exact"`
	// Specifies a prefix type match. Matches the value with the prefix.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (ListenerRuleMatchHttpMatchPathMatchMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchPathMatchMatch)(nil)).Elem()
}

func (i ListenerRuleMatchHttpMatchPathMatchMatchArgs) ToListenerRuleMatchHttpMatchPathMatchMatchOutput() ListenerRuleMatchHttpMatchPathMatchMatchOutput {
	return i.ToListenerRuleMatchHttpMatchPathMatchMatchOutputWithContext(context.Background())
}

func (i ListenerRuleMatchHttpMatchPathMatchMatchArgs) ToListenerRuleMatchHttpMatchPathMatchMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchPathMatchMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleMatchHttpMatchPathMatchMatchOutput)
}

func (i *ListenerRuleMatchHttpMatchPathMatchMatchArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleMatchHttpMatchPathMatchMatchArgs] {
	return pulumix.Val(i)
}

type ListenerRuleMatchHttpMatchPathMatchMatchOutput struct{ *pulumi.OutputState }

func (ListenerRuleMatchHttpMatchPathMatchMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleMatchHttpMatchPathMatchMatch)(nil)).Elem()
}

func (o ListenerRuleMatchHttpMatchPathMatchMatchOutput) ToListenerRuleMatchHttpMatchPathMatchMatchOutput() ListenerRuleMatchHttpMatchPathMatchMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchPathMatchMatchOutput) ToListenerRuleMatchHttpMatchPathMatchMatchOutputWithContext(ctx context.Context) ListenerRuleMatchHttpMatchPathMatchMatchOutput {
	return o
}

func (o ListenerRuleMatchHttpMatchPathMatchMatchOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleMatchHttpMatchPathMatchMatch] {
	return pulumix.Output[ListenerRuleMatchHttpMatchPathMatchMatch]{
		OutputState: o.OutputState,
	}
}

// Specifies an exact type match.
func (o ListenerRuleMatchHttpMatchPathMatchMatchOutput) Exact() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchPathMatchMatch](o, func(v ListenerRuleMatchHttpMatchPathMatchMatch) *string { return v.Exact })
}

// Specifies a prefix type match. Matches the value with the prefix.
func (o ListenerRuleMatchHttpMatchPathMatchMatchOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleMatchHttpMatchPathMatchMatch](o, func(v ListenerRuleMatchHttpMatchPathMatchMatch) *string { return v.Prefix })
}

type ServiceDnsEntry struct {
	DomainName   *string `pulumi:"domainName"`
	HostedZoneId *string `pulumi:"hostedZoneId"`
}

type ServiceDnsEntryArgs struct {
	DomainName   pulumix.Input[*string] `pulumi:"domainName"`
	HostedZoneId pulumix.Input[*string] `pulumi:"hostedZoneId"`
}

func (ServiceDnsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsEntry)(nil)).Elem()
}

func (i ServiceDnsEntryArgs) ToServiceDnsEntryOutput() ServiceDnsEntryOutput {
	return i.ToServiceDnsEntryOutputWithContext(context.Background())
}

func (i ServiceDnsEntryArgs) ToServiceDnsEntryOutputWithContext(ctx context.Context) ServiceDnsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDnsEntryOutput)
}

func (i *ServiceDnsEntryArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceDnsEntryArgs] {
	return pulumix.Val(i)
}

type ServiceDnsEntryOutput struct{ *pulumi.OutputState }

func (ServiceDnsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsEntry)(nil)).Elem()
}

func (o ServiceDnsEntryOutput) ToServiceDnsEntryOutput() ServiceDnsEntryOutput {
	return o
}

func (o ServiceDnsEntryOutput) ToServiceDnsEntryOutputWithContext(ctx context.Context) ServiceDnsEntryOutput {
	return o
}

func (o ServiceDnsEntryOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceDnsEntry] {
	return pulumix.Output[ServiceDnsEntry]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDnsEntryOutput) DomainName() pulumix.Output[*string] {
	return pulumix.Apply[ServiceDnsEntry](o, func(v ServiceDnsEntry) *string { return v.DomainName })
}

func (o ServiceDnsEntryOutput) HostedZoneId() pulumix.Output[*string] {
	return pulumix.Apply[ServiceDnsEntry](o, func(v ServiceDnsEntry) *string { return v.HostedZoneId })
}

type ServiceNetworkServiceAssociationDnsEntry struct {
	// The domain name of the service.
	DomainName *string `pulumi:"domainName"`
	// The ID of the hosted zone.
	HostedZoneId *string `pulumi:"hostedZoneId"`
}

type ServiceNetworkServiceAssociationDnsEntryArgs struct {
	// The domain name of the service.
	DomainName pulumix.Input[*string] `pulumi:"domainName"`
	// The ID of the hosted zone.
	HostedZoneId pulumix.Input[*string] `pulumi:"hostedZoneId"`
}

func (ServiceNetworkServiceAssociationDnsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkServiceAssociationDnsEntry)(nil)).Elem()
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToServiceNetworkServiceAssociationDnsEntryOutput() ServiceNetworkServiceAssociationDnsEntryOutput {
	return i.ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(context.Background())
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkServiceAssociationDnsEntryOutput)
}

func (i *ServiceNetworkServiceAssociationDnsEntryArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkServiceAssociationDnsEntryArgs] {
	return pulumix.Val(i)
}

type ServiceNetworkServiceAssociationDnsEntryOutput struct{ *pulumi.OutputState }

func (ServiceNetworkServiceAssociationDnsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkServiceAssociationDnsEntry)(nil)).Elem()
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToServiceNetworkServiceAssociationDnsEntryOutput() ServiceNetworkServiceAssociationDnsEntryOutput {
	return o
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryOutput {
	return o
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkServiceAssociationDnsEntry] {
	return pulumix.Output[ServiceNetworkServiceAssociationDnsEntry]{
		OutputState: o.OutputState,
	}
}

// The domain name of the service.
func (o ServiceNetworkServiceAssociationDnsEntryOutput) DomainName() pulumix.Output[*string] {
	return pulumix.Apply[ServiceNetworkServiceAssociationDnsEntry](o, func(v ServiceNetworkServiceAssociationDnsEntry) *string { return v.DomainName })
}

// The ID of the hosted zone.
func (o ServiceNetworkServiceAssociationDnsEntryOutput) HostedZoneId() pulumix.Output[*string] {
	return pulumix.Apply[ServiceNetworkServiceAssociationDnsEntry](o, func(v ServiceNetworkServiceAssociationDnsEntry) *string { return v.HostedZoneId })
}

type TargetGroupAttachmentTarget struct {
	// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
	Id string `pulumi:"id"`
	// The port on which the target is listening. For HTTP, the default is 80. For HTTPS, the default is 443.
	Port *int `pulumi:"port"`
}

type TargetGroupAttachmentTargetArgs struct {
	// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
	Id pulumix.Input[string] `pulumi:"id"`
	// The port on which the target is listening. For HTTP, the default is 80. For HTTPS, the default is 443.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (TargetGroupAttachmentTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupAttachmentTarget)(nil)).Elem()
}

func (i TargetGroupAttachmentTargetArgs) ToTargetGroupAttachmentTargetOutput() TargetGroupAttachmentTargetOutput {
	return i.ToTargetGroupAttachmentTargetOutputWithContext(context.Background())
}

func (i TargetGroupAttachmentTargetArgs) ToTargetGroupAttachmentTargetOutputWithContext(ctx context.Context) TargetGroupAttachmentTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupAttachmentTargetOutput)
}

func (i *TargetGroupAttachmentTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupAttachmentTargetArgs] {
	return pulumix.Val(i)
}

type TargetGroupAttachmentTargetOutput struct{ *pulumi.OutputState }

func (TargetGroupAttachmentTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupAttachmentTarget)(nil)).Elem()
}

func (o TargetGroupAttachmentTargetOutput) ToTargetGroupAttachmentTargetOutput() TargetGroupAttachmentTargetOutput {
	return o
}

func (o TargetGroupAttachmentTargetOutput) ToTargetGroupAttachmentTargetOutputWithContext(ctx context.Context) TargetGroupAttachmentTargetOutput {
	return o
}

func (o TargetGroupAttachmentTargetOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupAttachmentTarget] {
	return pulumix.Output[TargetGroupAttachmentTarget]{
		OutputState: o.OutputState,
	}
}

// The ID of the target. If the target type of the target group is INSTANCE, this is an instance ID. If the target type is IP , this is an IP address. If the target type is LAMBDA, this is the ARN of the Lambda function. If the target type is ALB, this is the ARN of the Application Load Balancer.
func (o TargetGroupAttachmentTargetOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[TargetGroupAttachmentTarget](o, func(v TargetGroupAttachmentTarget) string { return v.Id })
}

// The port on which the target is listening. For HTTP, the default is 80. For HTTPS, the default is 443.
func (o TargetGroupAttachmentTargetOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupAttachmentTarget](o, func(v TargetGroupAttachmentTarget) *int { return v.Port })
}

type TargetGroupConfig struct {
	// The health check configuration.
	HealthCheck *TargetGroupConfigHealthCheck `pulumi:"healthCheck"`
	// The type of IP address used for the target group. Valid values: `IPV4` | `IPV6`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The port on which the targets are listening.
	Port int `pulumi:"port"`
	// The protocol to use for routing traffic to the targets. Valid Values are `HTTP` | `HTTPS`
	Protocol string `pulumi:"protocol"`
	// The protocol version. Valid Values are `HTTP1` | `HTTP2` | `GRPC`. Default value is `HTTP1`.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The ID of the VPC.
	VpcIdentifier string `pulumi:"vpcIdentifier"`
}

type TargetGroupConfigArgs struct {
	// The health check configuration.
	HealthCheck pulumix.Input[*TargetGroupConfigHealthCheckArgs] `pulumi:"healthCheck"`
	// The type of IP address used for the target group. Valid values: `IPV4` | `IPV6`
	IpAddressType pulumix.Input[*string] `pulumi:"ipAddressType"`
	// The port on which the targets are listening.
	Port pulumix.Input[int] `pulumi:"port"`
	// The protocol to use for routing traffic to the targets. Valid Values are `HTTP` | `HTTPS`
	Protocol pulumix.Input[string] `pulumi:"protocol"`
	// The protocol version. Valid Values are `HTTP1` | `HTTP2` | `GRPC`. Default value is `HTTP1`.
	ProtocolVersion pulumix.Input[*string] `pulumi:"protocolVersion"`
	// The ID of the VPC.
	VpcIdentifier pulumix.Input[string] `pulumi:"vpcIdentifier"`
}

func (TargetGroupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfig)(nil)).Elem()
}

func (i TargetGroupConfigArgs) ToTargetGroupConfigOutput() TargetGroupConfigOutput {
	return i.ToTargetGroupConfigOutputWithContext(context.Background())
}

func (i TargetGroupConfigArgs) ToTargetGroupConfigOutputWithContext(ctx context.Context) TargetGroupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupConfigOutput)
}

func (i *TargetGroupConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupConfigArgs] {
	return pulumix.Val(i)
}

type TargetGroupConfigOutput struct{ *pulumi.OutputState }

func (TargetGroupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfig)(nil)).Elem()
}

func (o TargetGroupConfigOutput) ToTargetGroupConfigOutput() TargetGroupConfigOutput {
	return o
}

func (o TargetGroupConfigOutput) ToTargetGroupConfigOutputWithContext(ctx context.Context) TargetGroupConfigOutput {
	return o
}

func (o TargetGroupConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupConfig] {
	return pulumix.Output[TargetGroupConfig]{
		OutputState: o.OutputState,
	}
}

// The health check configuration.
func (o TargetGroupConfigOutput) HealthCheck() pulumix.GPtrOutput[TargetGroupConfigHealthCheck, TargetGroupConfigHealthCheckOutput] {
	value := pulumix.Apply[TargetGroupConfig](o, func(v TargetGroupConfig) *TargetGroupConfigHealthCheck { return v.HealthCheck })
	return pulumix.GPtrOutput[TargetGroupConfigHealthCheck, TargetGroupConfigHealthCheckOutput]{OutputState: value.OutputState}
}

// The type of IP address used for the target group. Valid values: `IPV4` | `IPV6`
func (o TargetGroupConfigOutput) IpAddressType() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupConfig](o, func(v TargetGroupConfig) *string { return v.IpAddressType })
}

// The port on which the targets are listening.
func (o TargetGroupConfigOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[TargetGroupConfig](o, func(v TargetGroupConfig) int { return v.Port })
}

// The protocol to use for routing traffic to the targets. Valid Values are `HTTP` | `HTTPS`
func (o TargetGroupConfigOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[TargetGroupConfig](o, func(v TargetGroupConfig) string { return v.Protocol })
}

// The protocol version. Valid Values are `HTTP1` | `HTTP2` | `GRPC`. Default value is `HTTP1`.
func (o TargetGroupConfigOutput) ProtocolVersion() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupConfig](o, func(v TargetGroupConfig) *string { return v.ProtocolVersion })
}

// The ID of the VPC.
func (o TargetGroupConfigOutput) VpcIdentifier() pulumix.Output[string] {
	return pulumix.Apply[TargetGroupConfig](o, func(v TargetGroupConfig) string { return v.VpcIdentifier })
}

type TargetGroupConfigHealthCheck struct {
	// Indicates whether health checking is enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
	HealthCheckIntervalSeconds *int `pulumi:"healthCheckIntervalSeconds"`
	// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
	// * ` healthyThresholdCount  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
	HealthCheckTimeoutSeconds *int `pulumi:"healthCheckTimeoutSeconds"`
	HealthyThresholdCount     *int `pulumi:"healthyThresholdCount"`
	// The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
	Matcher *TargetGroupConfigHealthCheckMatcher `pulumi:"matcher"`
	// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
	Path *string `pulumi:"path"`
	// The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
	Port *int `pulumi:"port"`
	// The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
	Protocol *string `pulumi:"protocol"`
	// The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
	UnhealthyThresholdCount *int `pulumi:"unhealthyThresholdCount"`
}

type TargetGroupConfigHealthCheckArgs struct {
	// Indicates whether health checking is enabled. Defaults to `true`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
	HealthCheckIntervalSeconds pulumix.Input[*int] `pulumi:"healthCheckIntervalSeconds"`
	// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
	// * ` healthyThresholdCount  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
	HealthCheckTimeoutSeconds pulumix.Input[*int] `pulumi:"healthCheckTimeoutSeconds"`
	HealthyThresholdCount     pulumix.Input[*int] `pulumi:"healthyThresholdCount"`
	// The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
	Matcher pulumix.Input[*TargetGroupConfigHealthCheckMatcherArgs] `pulumi:"matcher"`
	// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
	Path pulumix.Input[*string] `pulumi:"path"`
	// The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
	Port pulumix.Input[*int] `pulumi:"port"`
	// The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
	// The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
	ProtocolVersion pulumix.Input[*string] `pulumi:"protocolVersion"`
	// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
	UnhealthyThresholdCount pulumix.Input[*int] `pulumi:"unhealthyThresholdCount"`
}

func (TargetGroupConfigHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfigHealthCheck)(nil)).Elem()
}

func (i TargetGroupConfigHealthCheckArgs) ToTargetGroupConfigHealthCheckOutput() TargetGroupConfigHealthCheckOutput {
	return i.ToTargetGroupConfigHealthCheckOutputWithContext(context.Background())
}

func (i TargetGroupConfigHealthCheckArgs) ToTargetGroupConfigHealthCheckOutputWithContext(ctx context.Context) TargetGroupConfigHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupConfigHealthCheckOutput)
}

func (i *TargetGroupConfigHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupConfigHealthCheckArgs] {
	return pulumix.Val(i)
}

type TargetGroupConfigHealthCheckOutput struct{ *pulumi.OutputState }

func (TargetGroupConfigHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfigHealthCheck)(nil)).Elem()
}

func (o TargetGroupConfigHealthCheckOutput) ToTargetGroupConfigHealthCheckOutput() TargetGroupConfigHealthCheckOutput {
	return o
}

func (o TargetGroupConfigHealthCheckOutput) ToTargetGroupConfigHealthCheckOutputWithContext(ctx context.Context) TargetGroupConfigHealthCheckOutput {
	return o
}

func (o TargetGroupConfigHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupConfigHealthCheck] {
	return pulumix.Output[TargetGroupConfigHealthCheck]{
		OutputState: o.OutputState,
	}
}

// Indicates whether health checking is enabled. Defaults to `true`.
func (o TargetGroupConfigHealthCheckOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *bool { return v.Enabled })
}

// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
func (o TargetGroupConfigHealthCheckOutput) HealthCheckIntervalSeconds() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *int { return v.HealthCheckIntervalSeconds })
}

// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
// * ` healthyThresholdCount  ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
func (o TargetGroupConfigHealthCheckOutput) HealthCheckTimeoutSeconds() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *int { return v.HealthCheckTimeoutSeconds })
}

func (o TargetGroupConfigHealthCheckOutput) HealthyThresholdCount() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *int { return v.HealthyThresholdCount })
}

// The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
func (o TargetGroupConfigHealthCheckOutput) Matcher() pulumix.GPtrOutput[TargetGroupConfigHealthCheckMatcher, TargetGroupConfigHealthCheckMatcherOutput] {
	value := pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *TargetGroupConfigHealthCheckMatcher { return v.Matcher })
	return pulumix.GPtrOutput[TargetGroupConfigHealthCheckMatcher, TargetGroupConfigHealthCheckMatcherOutput]{OutputState: value.OutputState}
}

// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
func (o TargetGroupConfigHealthCheckOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *string { return v.Path })
}

// The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
func (o TargetGroupConfigHealthCheckOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *int { return v.Port })
}

// The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
func (o TargetGroupConfigHealthCheckOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *string { return v.Protocol })
}

// The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
func (o TargetGroupConfigHealthCheckOutput) ProtocolVersion() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *string { return v.ProtocolVersion })
}

// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
func (o TargetGroupConfigHealthCheckOutput) UnhealthyThresholdCount() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupConfigHealthCheck](o, func(v TargetGroupConfigHealthCheck) *int { return v.UnhealthyThresholdCount })
}

type TargetGroupConfigHealthCheckMatcher struct {
	// The HTTP codes to use when checking for a successful response from a target.
	Value *string `pulumi:"value"`
}

type TargetGroupConfigHealthCheckMatcherArgs struct {
	// The HTTP codes to use when checking for a successful response from a target.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (TargetGroupConfigHealthCheckMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfigHealthCheckMatcher)(nil)).Elem()
}

func (i TargetGroupConfigHealthCheckMatcherArgs) ToTargetGroupConfigHealthCheckMatcherOutput() TargetGroupConfigHealthCheckMatcherOutput {
	return i.ToTargetGroupConfigHealthCheckMatcherOutputWithContext(context.Background())
}

func (i TargetGroupConfigHealthCheckMatcherArgs) ToTargetGroupConfigHealthCheckMatcherOutputWithContext(ctx context.Context) TargetGroupConfigHealthCheckMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupConfigHealthCheckMatcherOutput)
}

func (i *TargetGroupConfigHealthCheckMatcherArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupConfigHealthCheckMatcherArgs] {
	return pulumix.Val(i)
}

type TargetGroupConfigHealthCheckMatcherOutput struct{ *pulumi.OutputState }

func (TargetGroupConfigHealthCheckMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfigHealthCheckMatcher)(nil)).Elem()
}

func (o TargetGroupConfigHealthCheckMatcherOutput) ToTargetGroupConfigHealthCheckMatcherOutput() TargetGroupConfigHealthCheckMatcherOutput {
	return o
}

func (o TargetGroupConfigHealthCheckMatcherOutput) ToTargetGroupConfigHealthCheckMatcherOutputWithContext(ctx context.Context) TargetGroupConfigHealthCheckMatcherOutput {
	return o
}

func (o TargetGroupConfigHealthCheckMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupConfigHealthCheckMatcher] {
	return pulumix.Output[TargetGroupConfigHealthCheckMatcher]{
		OutputState: o.OutputState,
	}
}

// The HTTP codes to use when checking for a successful response from a target.
func (o TargetGroupConfigHealthCheckMatcherOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupConfigHealthCheckMatcher](o, func(v TargetGroupConfigHealthCheckMatcher) *string { return v.Value })
}

type GetListenerDefaultAction struct {
	FixedResponses []GetListenerDefaultActionFixedResponse `pulumi:"fixedResponses"`
	Forwards       []GetListenerDefaultActionForward       `pulumi:"forwards"`
}

type GetListenerDefaultActionArgs struct {
	FixedResponses pulumix.Input[[]*GetListenerDefaultActionFixedResponseArgs] `pulumi:"fixedResponses"`
	Forwards       pulumix.Input[[]*GetListenerDefaultActionForwardArgs]       `pulumi:"forwards"`
}

func (GetListenerDefaultActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultAction)(nil)).Elem()
}

func (i GetListenerDefaultActionArgs) ToGetListenerDefaultActionOutput() GetListenerDefaultActionOutput {
	return i.ToGetListenerDefaultActionOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionArgs) ToGetListenerDefaultActionOutputWithContext(ctx context.Context) GetListenerDefaultActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionOutput)
}

func (i *GetListenerDefaultActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultAction)(nil)).Elem()
}

func (o GetListenerDefaultActionOutput) ToGetListenerDefaultActionOutput() GetListenerDefaultActionOutput {
	return o
}

func (o GetListenerDefaultActionOutput) ToGetListenerDefaultActionOutputWithContext(ctx context.Context) GetListenerDefaultActionOutput {
	return o
}

func (o GetListenerDefaultActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultAction] {
	return pulumix.Output[GetListenerDefaultAction]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionOutput) FixedResponses() pulumix.GArrayOutput[GetListenerDefaultActionFixedResponse, GetListenerDefaultActionFixedResponseOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionFixedResponse { return v.FixedResponses })
	return pulumix.GArrayOutput[GetListenerDefaultActionFixedResponse, GetListenerDefaultActionFixedResponseOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionOutput) Forwards() pulumix.GArrayOutput[GetListenerDefaultActionForward, GetListenerDefaultActionForwardOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionForward { return v.Forwards })
	return pulumix.GArrayOutput[GetListenerDefaultActionForward, GetListenerDefaultActionForwardOutput]{OutputState: value.OutputState}
}

type GetListenerDefaultActionFixedResponse struct {
	StatusCode int `pulumi:"statusCode"`
}

type GetListenerDefaultActionFixedResponseArgs struct {
	StatusCode pulumix.Input[int] `pulumi:"statusCode"`
}

func (GetListenerDefaultActionFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (i GetListenerDefaultActionFixedResponseArgs) ToGetListenerDefaultActionFixedResponseOutput() GetListenerDefaultActionFixedResponseOutput {
	return i.ToGetListenerDefaultActionFixedResponseOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionFixedResponseArgs) ToGetListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) GetListenerDefaultActionFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionFixedResponseOutput)
}

func (i *GetListenerDefaultActionFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionFixedResponseArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionFixedResponseOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (o GetListenerDefaultActionFixedResponseOutput) ToGetListenerDefaultActionFixedResponseOutput() GetListenerDefaultActionFixedResponseOutput {
	return o
}

func (o GetListenerDefaultActionFixedResponseOutput) ToGetListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) GetListenerDefaultActionFixedResponseOutput {
	return o
}

func (o GetListenerDefaultActionFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionFixedResponse] {
	return pulumix.Output[GetListenerDefaultActionFixedResponse]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionFixedResponseOutput) StatusCode() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultActionFixedResponse](o, func(v GetListenerDefaultActionFixedResponse) int { return v.StatusCode })
}

type GetListenerDefaultActionForward struct {
	TargetGroups []GetListenerDefaultActionForwardTargetGroup `pulumi:"targetGroups"`
}

type GetListenerDefaultActionForwardArgs struct {
	TargetGroups pulumix.Input[[]*GetListenerDefaultActionForwardTargetGroupArgs] `pulumi:"targetGroups"`
}

func (GetListenerDefaultActionForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForward)(nil)).Elem()
}

func (i GetListenerDefaultActionForwardArgs) ToGetListenerDefaultActionForwardOutput() GetListenerDefaultActionForwardOutput {
	return i.ToGetListenerDefaultActionForwardOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionForwardArgs) ToGetListenerDefaultActionForwardOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionForwardOutput)
}

func (i *GetListenerDefaultActionForwardArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionForwardArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionForwardOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForward)(nil)).Elem()
}

func (o GetListenerDefaultActionForwardOutput) ToGetListenerDefaultActionForwardOutput() GetListenerDefaultActionForwardOutput {
	return o
}

func (o GetListenerDefaultActionForwardOutput) ToGetListenerDefaultActionForwardOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardOutput {
	return o
}

func (o GetListenerDefaultActionForwardOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionForward] {
	return pulumix.Output[GetListenerDefaultActionForward]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionForwardOutput) TargetGroups() pulumix.GArrayOutput[GetListenerDefaultActionForwardTargetGroup, GetListenerDefaultActionForwardTargetGroupOutput] {
	value := pulumix.Apply[GetListenerDefaultActionForward](o, func(v GetListenerDefaultActionForward) []GetListenerDefaultActionForwardTargetGroup {
		return v.TargetGroups
	})
	return pulumix.GArrayOutput[GetListenerDefaultActionForwardTargetGroup, GetListenerDefaultActionForwardTargetGroupOutput]{OutputState: value.OutputState}
}

type GetListenerDefaultActionForwardTargetGroup struct {
	TargetGroupIdentifier string `pulumi:"targetGroupIdentifier"`
	Weight                int    `pulumi:"weight"`
}

type GetListenerDefaultActionForwardTargetGroupArgs struct {
	TargetGroupIdentifier pulumix.Input[string] `pulumi:"targetGroupIdentifier"`
	Weight                pulumix.Input[int]    `pulumi:"weight"`
}

func (GetListenerDefaultActionForwardTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (i GetListenerDefaultActionForwardTargetGroupArgs) ToGetListenerDefaultActionForwardTargetGroupOutput() GetListenerDefaultActionForwardTargetGroupOutput {
	return i.ToGetListenerDefaultActionForwardTargetGroupOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionForwardTargetGroupArgs) ToGetListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionForwardTargetGroupOutput)
}

func (i *GetListenerDefaultActionForwardTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionForwardTargetGroupArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionForwardTargetGroupOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionForwardTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) ToGetListenerDefaultActionForwardTargetGroupOutput() GetListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) ToGetListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionForwardTargetGroup] {
	return pulumix.Output[GetListenerDefaultActionForwardTargetGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) TargetGroupIdentifier() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionForwardTargetGroup](o, func(v GetListenerDefaultActionForwardTargetGroup) string { return v.TargetGroupIdentifier })
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultActionForwardTargetGroup](o, func(v GetListenerDefaultActionForwardTargetGroup) int { return v.Weight })
}

type GetServiceDnsEntry struct {
	DomainName   string `pulumi:"domainName"`
	HostedZoneId string `pulumi:"hostedZoneId"`
}

type GetServiceDnsEntryArgs struct {
	DomainName   pulumix.Input[string] `pulumi:"domainName"`
	HostedZoneId pulumix.Input[string] `pulumi:"hostedZoneId"`
}

func (GetServiceDnsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceDnsEntry)(nil)).Elem()
}

func (i GetServiceDnsEntryArgs) ToGetServiceDnsEntryOutput() GetServiceDnsEntryOutput {
	return i.ToGetServiceDnsEntryOutputWithContext(context.Background())
}

func (i GetServiceDnsEntryArgs) ToGetServiceDnsEntryOutputWithContext(ctx context.Context) GetServiceDnsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceDnsEntryOutput)
}

func (i *GetServiceDnsEntryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetServiceDnsEntryArgs] {
	return pulumix.Val(i)
}

type GetServiceDnsEntryOutput struct{ *pulumi.OutputState }

func (GetServiceDnsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceDnsEntry)(nil)).Elem()
}

func (o GetServiceDnsEntryOutput) ToGetServiceDnsEntryOutput() GetServiceDnsEntryOutput {
	return o
}

func (o GetServiceDnsEntryOutput) ToGetServiceDnsEntryOutputWithContext(ctx context.Context) GetServiceDnsEntryOutput {
	return o
}

func (o GetServiceDnsEntryOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceDnsEntry] {
	return pulumix.Output[GetServiceDnsEntry]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceDnsEntryOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[GetServiceDnsEntry](o, func(v GetServiceDnsEntry) string { return v.DomainName })
}

func (o GetServiceDnsEntryOutput) HostedZoneId() pulumix.Output[string] {
	return pulumix.Apply[GetServiceDnsEntry](o, func(v GetServiceDnsEntry) string { return v.HostedZoneId })
}

func init() {
	pulumi.RegisterOutputType(ListenerDefaultActionOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionFixedResponseOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionForwardOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionForwardTargetGroupOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionFixedResponseOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionForwardOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionForwardTargetGroupOutput{})
	pulumi.RegisterOutputType(ListenerRuleMatchOutput{})
	pulumi.RegisterOutputType(ListenerRuleMatchHttpMatchOutput{})
	pulumi.RegisterOutputType(ListenerRuleMatchHttpMatchHeaderMatchOutput{})
	pulumi.RegisterOutputType(ListenerRuleMatchHttpMatchHeaderMatchMatchOutput{})
	pulumi.RegisterOutputType(ListenerRuleMatchHttpMatchPathMatchOutput{})
	pulumi.RegisterOutputType(ListenerRuleMatchHttpMatchPathMatchMatchOutput{})
	pulumi.RegisterOutputType(ServiceDnsEntryOutput{})
	pulumi.RegisterOutputType(ServiceNetworkServiceAssociationDnsEntryOutput{})
	pulumi.RegisterOutputType(TargetGroupAttachmentTargetOutput{})
	pulumi.RegisterOutputType(TargetGroupConfigOutput{})
	pulumi.RegisterOutputType(TargetGroupConfigHealthCheckOutput{})
	pulumi.RegisterOutputType(TargetGroupConfigHealthCheckMatcherOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionFixedResponseOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionForwardOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionForwardTargetGroupOutput{})
	pulumi.RegisterOutputType(GetServiceDnsEntryOutput{})
}
