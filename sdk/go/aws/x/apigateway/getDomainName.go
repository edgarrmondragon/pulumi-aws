// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the custom domain name for use with AWS API Gateway.
func LookupDomainName(ctx *pulumi.Context, args *LookupDomainNameArgs, opts ...pulumi.InvokeOption) (*LookupDomainNameResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainNameResult
	err := ctx.Invoke("aws:apigateway/getDomainName:getDomainName", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainName.
type LookupDomainNameArgs struct {
	// Fully-qualified domain name to look up. If no domain name is found, an error will be returned.
	DomainName string `pulumi:"domainName"`
	// Key-value map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDomainName.
type LookupDomainNameResult struct {
	// ARN of the found custom domain name.
	Arn string `pulumi:"arn"`
	// ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
	CertificateArn string `pulumi:"certificateArn"`
	// Name of the certificate that is used by edge-optimized endpoint for this domain name.
	CertificateName string `pulumi:"certificateName"`
	// Upload date associated with the domain certificate.
	CertificateUploadDate string `pulumi:"certificateUploadDate"`
	// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
	CloudfrontDomainName string `pulumi:"cloudfrontDomainName"`
	// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
	CloudfrontZoneId string `pulumi:"cloudfrontZoneId"`
	DomainName       string `pulumi:"domainName"`
	// List of objects with the endpoint configuration of this domain name.
	EndpointConfigurations []GetDomainNameEndpointConfiguration `pulumi:"endpointConfigurations"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN for an AWS-managed certificate that is used for validating the regional domain name.
	RegionalCertificateArn string `pulumi:"regionalCertificateArn"`
	// User-friendly name of the certificate that is used by regional endpoint for this domain name.
	RegionalCertificateName string `pulumi:"regionalCertificateName"`
	// Hostname for the custom domain's regional endpoint.
	RegionalDomainName string `pulumi:"regionalDomainName"`
	// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
	RegionalZoneId string `pulumi:"regionalZoneId"`
	// Security policy for the domain name.
	SecurityPolicy string `pulumi:"securityPolicy"`
	// Key-value map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupDomainNameOutput(ctx *pulumi.Context, args LookupDomainNameOutputArgs, opts ...pulumi.InvokeOption) LookupDomainNameResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDomainNameArgs](args.ToOutput(), func(plainArgs *LookupDomainNameArgs) (*LookupDomainNameResult, error) {
		return LookupDomainName(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDomainNameResultOutput, *LookupDomainNameResult](outputResult)
}

// A collection of arguments for invoking getDomainName.
type LookupDomainNameOutputArgs struct {
	// Fully-qualified domain name to look up. If no domain name is found, an error will be returned.
	DomainName pulumix.Input[string] `pulumi:"domainName"`
	// Key-value map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDomainNameOutputArgs) ToOutput() pulumix.Output[*LookupDomainNameArgs] {
	allArgs := pulumix.All(
		args.DomainName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDomainNameArgs {
		return &LookupDomainNameArgs{
			DomainName: resolvedArgs[0].(string),
			Tags:       resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupDomainNameResultOutput struct{ *pulumi.OutputState }

func (LookupDomainNameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainNameResult)(nil)).Elem()
}

func (o LookupDomainNameResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDomainNameResult] {
	return pulumix.Output[*LookupDomainNameResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDomainNameResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.Arn })
}

func (o LookupDomainNameResultOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.CertificateArn })
}

func (o LookupDomainNameResultOutput) CertificateName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.CertificateName })
}

func (o LookupDomainNameResultOutput) CertificateUploadDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.CertificateUploadDate })
}

func (o LookupDomainNameResultOutput) CloudfrontDomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.CloudfrontDomainName })
}

func (o LookupDomainNameResultOutput) CloudfrontZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.CloudfrontZoneId })
}

func (o LookupDomainNameResultOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.DomainName })
}

func (o LookupDomainNameResultOutput) EndpointConfigurations() pulumix.GArrayOutput[GetDomainNameEndpointConfiguration, GetDomainNameEndpointConfigurationOutput] {
	value := pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) []GetDomainNameEndpointConfiguration { return v.EndpointConfigurations })
	return pulumix.GArrayOutput[GetDomainNameEndpointConfiguration, GetDomainNameEndpointConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDomainNameResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.Id })
}

func (o LookupDomainNameResultOutput) RegionalCertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.RegionalCertificateArn })
}

func (o LookupDomainNameResultOutput) RegionalCertificateName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.RegionalCertificateName })
}

func (o LookupDomainNameResultOutput) RegionalDomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.RegionalDomainName })
}

func (o LookupDomainNameResultOutput) RegionalZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.RegionalZoneId })
}

func (o LookupDomainNameResultOutput) SecurityPolicy() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) string { return v.SecurityPolicy })
}

func (o LookupDomainNameResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDomainNameResult](o, func(v *LookupDomainNameResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
