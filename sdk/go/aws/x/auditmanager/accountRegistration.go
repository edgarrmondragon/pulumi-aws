// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing AWS Audit Manager Account Registration.
type AccountRegistration struct {
	pulumi.CustomResourceState

	// Identifier for the delegated administrator account.
	DelegatedAdminAccount pulumix.Output[*string] `pulumi:"delegatedAdminAccount"`
	// Flag to deregister AuditManager in the account upon destruction. Defaults to `false` (ie. AuditManager will remain active in the account, even if this resource is removed).
	DeregisterOnDestroy pulumix.Output[*bool] `pulumi:"deregisterOnDestroy"`
	// KMS key identifier.
	KmsKey pulumix.Output[*string] `pulumi:"kmsKey"`
	// Status of the account registration request.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewAccountRegistration registers a new resource with the given unique name, arguments, and options.
func NewAccountRegistration(ctx *pulumi.Context,
	name string, args *AccountRegistrationArgs, opts ...pulumi.ResourceOption) (*AccountRegistration, error) {
	if args == nil {
		args = &AccountRegistrationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountRegistration
	err := ctx.RegisterResource("aws:auditmanager/accountRegistration:AccountRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountRegistration gets an existing AccountRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountRegistrationState, opts ...pulumi.ResourceOption) (*AccountRegistration, error) {
	var resource AccountRegistration
	err := ctx.ReadResource("aws:auditmanager/accountRegistration:AccountRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountRegistration resources.
type accountRegistrationState struct {
	// Identifier for the delegated administrator account.
	DelegatedAdminAccount *string `pulumi:"delegatedAdminAccount"`
	// Flag to deregister AuditManager in the account upon destruction. Defaults to `false` (ie. AuditManager will remain active in the account, even if this resource is removed).
	DeregisterOnDestroy *bool `pulumi:"deregisterOnDestroy"`
	// KMS key identifier.
	KmsKey *string `pulumi:"kmsKey"`
	// Status of the account registration request.
	Status *string `pulumi:"status"`
}

type AccountRegistrationState struct {
	// Identifier for the delegated administrator account.
	DelegatedAdminAccount pulumix.Input[*string]
	// Flag to deregister AuditManager in the account upon destruction. Defaults to `false` (ie. AuditManager will remain active in the account, even if this resource is removed).
	DeregisterOnDestroy pulumix.Input[*bool]
	// KMS key identifier.
	KmsKey pulumix.Input[*string]
	// Status of the account registration request.
	Status pulumix.Input[*string]
}

func (AccountRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRegistrationState)(nil)).Elem()
}

type accountRegistrationArgs struct {
	// Identifier for the delegated administrator account.
	DelegatedAdminAccount *string `pulumi:"delegatedAdminAccount"`
	// Flag to deregister AuditManager in the account upon destruction. Defaults to `false` (ie. AuditManager will remain active in the account, even if this resource is removed).
	DeregisterOnDestroy *bool `pulumi:"deregisterOnDestroy"`
	// KMS key identifier.
	KmsKey *string `pulumi:"kmsKey"`
}

// The set of arguments for constructing a AccountRegistration resource.
type AccountRegistrationArgs struct {
	// Identifier for the delegated administrator account.
	DelegatedAdminAccount pulumix.Input[*string]
	// Flag to deregister AuditManager in the account upon destruction. Defaults to `false` (ie. AuditManager will remain active in the account, even if this resource is removed).
	DeregisterOnDestroy pulumix.Input[*bool]
	// KMS key identifier.
	KmsKey pulumix.Input[*string]
}

func (AccountRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRegistrationArgs)(nil)).Elem()
}

type AccountRegistrationOutput struct{ *pulumi.OutputState }

func (AccountRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountRegistration)(nil)).Elem()
}

func (o AccountRegistrationOutput) ToAccountRegistrationOutput() AccountRegistrationOutput {
	return o
}

func (o AccountRegistrationOutput) ToAccountRegistrationOutputWithContext(ctx context.Context) AccountRegistrationOutput {
	return o
}

func (o AccountRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[AccountRegistration] {
	return pulumix.Output[AccountRegistration]{
		OutputState: o.OutputState,
	}
}

// Identifier for the delegated administrator account.
func (o AccountRegistrationOutput) DelegatedAdminAccount() pulumix.Output[*string] {
	value := pulumix.Apply[AccountRegistration](o, func(v AccountRegistration) pulumix.Output[*string] { return v.DelegatedAdminAccount })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Flag to deregister AuditManager in the account upon destruction. Defaults to `false` (ie. AuditManager will remain active in the account, even if this resource is removed).
func (o AccountRegistrationOutput) DeregisterOnDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[AccountRegistration](o, func(v AccountRegistration) pulumix.Output[*bool] { return v.DeregisterOnDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// KMS key identifier.
func (o AccountRegistrationOutput) KmsKey() pulumix.Output[*string] {
	value := pulumix.Apply[AccountRegistration](o, func(v AccountRegistration) pulumix.Output[*string] { return v.KmsKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Status of the account registration request.
func (o AccountRegistrationOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[AccountRegistration](o, func(v AccountRegistration) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AccountRegistrationOutput{})
}
