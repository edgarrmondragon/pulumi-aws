// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Signer Signing Job.
type SigningJob struct {
	pulumi.CustomResourceState

	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
	CompletedAt pulumix.Output[string] `pulumi:"completedAt"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// The S3 bucket in which to save your signed object. See Destination below for details.
	Destination pulumix.GPtrOutput[SigningJobDestination, SigningJobDestinationOutput] `pulumi:"destination"`
	// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
	IgnoreSigningJobFailure pulumix.Output[*bool] `pulumi:"ignoreSigningJobFailure"`
	// The ID of the signing job on output.
	JobId pulumix.Output[string] `pulumi:"jobId"`
	// The IAM entity that initiated the signing job.
	JobInvoker pulumix.Output[string] `pulumi:"jobInvoker"`
	// The AWS account ID of the job owner.
	JobOwner pulumix.Output[string] `pulumi:"jobOwner"`
	// A human-readable name for the signing platform associated with the signing job.
	PlatformDisplayName pulumix.Output[string] `pulumi:"platformDisplayName"`
	// The platform to which your signed code image will be distributed.
	PlatformId pulumix.Output[string] `pulumi:"platformId"`
	// The name of the profile to initiate the signing operation.
	ProfileName pulumix.Output[string] `pulumi:"profileName"`
	// The version of the signing profile used to initiate the signing job.
	ProfileVersion pulumix.Output[string] `pulumi:"profileVersion"`
	// The IAM principal that requested the signing job.
	RequestedBy pulumix.Output[string] `pulumi:"requestedBy"`
	// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
	RevocationRecords pulumix.GArrayOutput[SigningJobRevocationRecord, SigningJobRevocationRecordOutput] `pulumi:"revocationRecords"`
	// The time when the signature of a signing job expires.
	SignatureExpiresAt pulumix.Output[string] `pulumi:"signatureExpiresAt"`
	// Name of the S3 bucket where the signed code image is saved by code signing.
	SignedObjects pulumix.GArrayOutput[SigningJobSignedObject, SigningJobSignedObjectOutput] `pulumi:"signedObjects"`
	// The S3 bucket that contains the object to sign. See Source below for details.
	Source pulumix.GPtrOutput[SigningJobSource, SigningJobSourceOutput] `pulumi:"source"`
	// Status of the signing job.
	Status pulumix.Output[string] `pulumi:"status"`
	// String value that contains the status reason.
	StatusReason pulumix.Output[string] `pulumi:"statusReason"`
}

// NewSigningJob registers a new resource with the given unique name, arguments, and options.
func NewSigningJob(ctx *pulumi.Context,
	name string, args *SigningJobArgs, opts ...pulumi.ResourceOption) (*SigningJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.ProfileName == nil {
		return nil, errors.New("invalid value for required argument 'ProfileName'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SigningJob
	err := ctx.RegisterResource("aws:signer/signingJob:SigningJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSigningJob gets an existing SigningJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSigningJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SigningJobState, opts ...pulumi.ResourceOption) (*SigningJob, error) {
	var resource SigningJob
	err := ctx.ReadResource("aws:signer/signingJob:SigningJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SigningJob resources.
type signingJobState struct {
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
	CompletedAt *string `pulumi:"completedAt"`
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The S3 bucket in which to save your signed object. See Destination below for details.
	Destination *SigningJobDestination `pulumi:"destination"`
	// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
	IgnoreSigningJobFailure *bool `pulumi:"ignoreSigningJobFailure"`
	// The ID of the signing job on output.
	JobId *string `pulumi:"jobId"`
	// The IAM entity that initiated the signing job.
	JobInvoker *string `pulumi:"jobInvoker"`
	// The AWS account ID of the job owner.
	JobOwner *string `pulumi:"jobOwner"`
	// A human-readable name for the signing platform associated with the signing job.
	PlatformDisplayName *string `pulumi:"platformDisplayName"`
	// The platform to which your signed code image will be distributed.
	PlatformId *string `pulumi:"platformId"`
	// The name of the profile to initiate the signing operation.
	ProfileName *string `pulumi:"profileName"`
	// The version of the signing profile used to initiate the signing job.
	ProfileVersion *string `pulumi:"profileVersion"`
	// The IAM principal that requested the signing job.
	RequestedBy *string `pulumi:"requestedBy"`
	// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
	RevocationRecords []SigningJobRevocationRecord `pulumi:"revocationRecords"`
	// The time when the signature of a signing job expires.
	SignatureExpiresAt *string `pulumi:"signatureExpiresAt"`
	// Name of the S3 bucket where the signed code image is saved by code signing.
	SignedObjects []SigningJobSignedObject `pulumi:"signedObjects"`
	// The S3 bucket that contains the object to sign. See Source below for details.
	Source *SigningJobSource `pulumi:"source"`
	// Status of the signing job.
	Status *string `pulumi:"status"`
	// String value that contains the status reason.
	StatusReason *string `pulumi:"statusReason"`
}

type SigningJobState struct {
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
	CompletedAt pulumix.Input[*string]
	// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
	CreatedAt pulumix.Input[*string]
	// The S3 bucket in which to save your signed object. See Destination below for details.
	Destination pulumix.Input[*SigningJobDestinationArgs]
	// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
	IgnoreSigningJobFailure pulumix.Input[*bool]
	// The ID of the signing job on output.
	JobId pulumix.Input[*string]
	// The IAM entity that initiated the signing job.
	JobInvoker pulumix.Input[*string]
	// The AWS account ID of the job owner.
	JobOwner pulumix.Input[*string]
	// A human-readable name for the signing platform associated with the signing job.
	PlatformDisplayName pulumix.Input[*string]
	// The platform to which your signed code image will be distributed.
	PlatformId pulumix.Input[*string]
	// The name of the profile to initiate the signing operation.
	ProfileName pulumix.Input[*string]
	// The version of the signing profile used to initiate the signing job.
	ProfileVersion pulumix.Input[*string]
	// The IAM principal that requested the signing job.
	RequestedBy pulumix.Input[*string]
	// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
	RevocationRecords pulumix.Input[[]*SigningJobRevocationRecordArgs]
	// The time when the signature of a signing job expires.
	SignatureExpiresAt pulumix.Input[*string]
	// Name of the S3 bucket where the signed code image is saved by code signing.
	SignedObjects pulumix.Input[[]*SigningJobSignedObjectArgs]
	// The S3 bucket that contains the object to sign. See Source below for details.
	Source pulumix.Input[*SigningJobSourceArgs]
	// Status of the signing job.
	Status pulumix.Input[*string]
	// String value that contains the status reason.
	StatusReason pulumix.Input[*string]
}

func (SigningJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*signingJobState)(nil)).Elem()
}

type signingJobArgs struct {
	// The S3 bucket in which to save your signed object. See Destination below for details.
	Destination SigningJobDestination `pulumi:"destination"`
	// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
	IgnoreSigningJobFailure *bool `pulumi:"ignoreSigningJobFailure"`
	// The name of the profile to initiate the signing operation.
	ProfileName string `pulumi:"profileName"`
	// The S3 bucket that contains the object to sign. See Source below for details.
	Source SigningJobSource `pulumi:"source"`
}

// The set of arguments for constructing a SigningJob resource.
type SigningJobArgs struct {
	// The S3 bucket in which to save your signed object. See Destination below for details.
	Destination pulumix.Input[*SigningJobDestinationArgs]
	// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
	IgnoreSigningJobFailure pulumix.Input[*bool]
	// The name of the profile to initiate the signing operation.
	ProfileName pulumix.Input[string]
	// The S3 bucket that contains the object to sign. See Source below for details.
	Source pulumix.Input[*SigningJobSourceArgs]
}

func (SigningJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signingJobArgs)(nil)).Elem()
}

type SigningJobOutput struct{ *pulumi.OutputState }

func (SigningJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningJob)(nil)).Elem()
}

func (o SigningJobOutput) ToSigningJobOutput() SigningJobOutput {
	return o
}

func (o SigningJobOutput) ToSigningJobOutputWithContext(ctx context.Context) SigningJobOutput {
	return o
}

func (o SigningJobOutput) ToOutput(ctx context.Context) pulumix.Output[SigningJob] {
	return pulumix.Output[SigningJob]{
		OutputState: o.OutputState,
	}
}

// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
func (o SigningJobOutput) CompletedAt() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.CompletedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
func (o SigningJobOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The S3 bucket in which to save your signed object. See Destination below for details.
func (o SigningJobOutput) Destination() pulumix.GPtrOutput[SigningJobDestination, SigningJobDestinationOutput] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.GPtrOutput[SigningJobDestination, SigningJobDestinationOutput] {
		return v.Destination
	})
	unwrapped := pulumix.Flatten[*SigningJobDestination, pulumix.GPtrOutput[SigningJobDestination, SigningJobDestinationOutput]](value)
	return pulumix.GPtrOutput[SigningJobDestination, SigningJobDestinationOutput]{OutputState: unwrapped.OutputState}
}

// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
func (o SigningJobOutput) IgnoreSigningJobFailure() pulumix.Output[*bool] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[*bool] { return v.IgnoreSigningJobFailure })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ID of the signing job on output.
func (o SigningJobOutput) JobId() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.JobId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IAM entity that initiated the signing job.
func (o SigningJobOutput) JobInvoker() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.JobInvoker })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the job owner.
func (o SigningJobOutput) JobOwner() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.JobOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A human-readable name for the signing platform associated with the signing job.
func (o SigningJobOutput) PlatformDisplayName() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.PlatformDisplayName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The platform to which your signed code image will be distributed.
func (o SigningJobOutput) PlatformId() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.PlatformId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the profile to initiate the signing operation.
func (o SigningJobOutput) ProfileName() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.ProfileName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version of the signing profile used to initiate the signing job.
func (o SigningJobOutput) ProfileVersion() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.ProfileVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IAM principal that requested the signing job.
func (o SigningJobOutput) RequestedBy() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.RequestedBy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
func (o SigningJobOutput) RevocationRecords() pulumix.GArrayOutput[SigningJobRevocationRecord, SigningJobRevocationRecordOutput] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.GArrayOutput[SigningJobRevocationRecord, SigningJobRevocationRecordOutput] {
		return v.RevocationRecords
	})
	unwrapped := pulumix.Flatten[[]SigningJobRevocationRecord, pulumix.GArrayOutput[SigningJobRevocationRecord, SigningJobRevocationRecordOutput]](value)
	return pulumix.GArrayOutput[SigningJobRevocationRecord, SigningJobRevocationRecordOutput]{OutputState: unwrapped.OutputState}
}

// The time when the signature of a signing job expires.
func (o SigningJobOutput) SignatureExpiresAt() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.SignatureExpiresAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the S3 bucket where the signed code image is saved by code signing.
func (o SigningJobOutput) SignedObjects() pulumix.GArrayOutput[SigningJobSignedObject, SigningJobSignedObjectOutput] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.GArrayOutput[SigningJobSignedObject, SigningJobSignedObjectOutput] {
		return v.SignedObjects
	})
	unwrapped := pulumix.Flatten[[]SigningJobSignedObject, pulumix.GArrayOutput[SigningJobSignedObject, SigningJobSignedObjectOutput]](value)
	return pulumix.GArrayOutput[SigningJobSignedObject, SigningJobSignedObjectOutput]{OutputState: unwrapped.OutputState}
}

// The S3 bucket that contains the object to sign. See Source below for details.
func (o SigningJobOutput) Source() pulumix.GPtrOutput[SigningJobSource, SigningJobSourceOutput] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.GPtrOutput[SigningJobSource, SigningJobSourceOutput] { return v.Source })
	unwrapped := pulumix.Flatten[*SigningJobSource, pulumix.GPtrOutput[SigningJobSource, SigningJobSourceOutput]](value)
	return pulumix.GPtrOutput[SigningJobSource, SigningJobSourceOutput]{OutputState: unwrapped.OutputState}
}

// Status of the signing job.
func (o SigningJobOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// String value that contains the status reason.
func (o SigningJobOutput) StatusReason() pulumix.Output[string] {
	value := pulumix.Apply[SigningJob](o, func(v SigningJob) pulumix.Output[string] { return v.StatusReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SigningJobOutput{})
}
