// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SES domain DKIM generation resource.
//
// Domain ownership needs to be confirmed first using sesDomainIdentity Resource
type DomainDkim struct {
	pulumi.CustomResourceState

	// DKIM tokens generated by SES.
	// These tokens should be used to create CNAME records used to verify SES Easy DKIM.
	// See below for an example of how this might be achieved
	// when the domain is hosted in Route 53 and managed by this provider.
	// Find out more about verifying domains in Amazon SES
	// in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
	DkimTokens pulumix.ArrayOutput[string] `pulumi:"dkimTokens"`
	// Verified domain name to generate DKIM tokens for.
	Domain pulumix.Output[string] `pulumi:"domain"`
}

// NewDomainDkim registers a new resource with the given unique name, arguments, and options.
func NewDomainDkim(ctx *pulumi.Context,
	name string, args *DomainDkimArgs, opts ...pulumi.ResourceOption) (*DomainDkim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainDkim
	err := ctx.RegisterResource("aws:ses/domainDkim:DomainDkim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainDkim gets an existing DomainDkim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainDkim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainDkimState, opts ...pulumi.ResourceOption) (*DomainDkim, error) {
	var resource DomainDkim
	err := ctx.ReadResource("aws:ses/domainDkim:DomainDkim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainDkim resources.
type domainDkimState struct {
	// DKIM tokens generated by SES.
	// These tokens should be used to create CNAME records used to verify SES Easy DKIM.
	// See below for an example of how this might be achieved
	// when the domain is hosted in Route 53 and managed by this provider.
	// Find out more about verifying domains in Amazon SES
	// in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
	DkimTokens []string `pulumi:"dkimTokens"`
	// Verified domain name to generate DKIM tokens for.
	Domain *string `pulumi:"domain"`
}

type DomainDkimState struct {
	// DKIM tokens generated by SES.
	// These tokens should be used to create CNAME records used to verify SES Easy DKIM.
	// See below for an example of how this might be achieved
	// when the domain is hosted in Route 53 and managed by this provider.
	// Find out more about verifying domains in Amazon SES
	// in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
	DkimTokens pulumix.Input[[]string]
	// Verified domain name to generate DKIM tokens for.
	Domain pulumix.Input[*string]
}

func (DomainDkimState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainDkimState)(nil)).Elem()
}

type domainDkimArgs struct {
	// Verified domain name to generate DKIM tokens for.
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a DomainDkim resource.
type DomainDkimArgs struct {
	// Verified domain name to generate DKIM tokens for.
	Domain pulumix.Input[string]
}

func (DomainDkimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainDkimArgs)(nil)).Elem()
}

type DomainDkimOutput struct{ *pulumi.OutputState }

func (DomainDkimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainDkim)(nil)).Elem()
}

func (o DomainDkimOutput) ToDomainDkimOutput() DomainDkimOutput {
	return o
}

func (o DomainDkimOutput) ToDomainDkimOutputWithContext(ctx context.Context) DomainDkimOutput {
	return o
}

func (o DomainDkimOutput) ToOutput(ctx context.Context) pulumix.Output[DomainDkim] {
	return pulumix.Output[DomainDkim]{
		OutputState: o.OutputState,
	}
}

// DKIM tokens generated by SES.
// These tokens should be used to create CNAME records used to verify SES Easy DKIM.
// See below for an example of how this might be achieved
// when the domain is hosted in Route 53 and managed by this provider.
// Find out more about verifying domains in Amazon SES
// in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
func (o DomainDkimOutput) DkimTokens() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DomainDkim](o, func(v DomainDkim) pulumix.ArrayOutput[string] { return v.DkimTokens })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Verified domain name to generate DKIM tokens for.
func (o DomainDkimOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[DomainDkim](o, func(v DomainDkim) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainDkimOutput{})
}
