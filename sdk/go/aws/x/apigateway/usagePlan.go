// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an API Gateway Usage Plan.
type UsagePlan struct {
	pulumi.CustomResourceState

	// Associated API stages of the usage plan.
	ApiStages pulumix.GArrayOutput[UsagePlanApiStage, UsagePlanApiStageOutput] `pulumi:"apiStages"`
	// ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of a usage plan.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the usage plan.
	Name pulumix.Output[string] `pulumi:"name"`
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode pulumix.Output[*string] `pulumi:"productCode"`
	// The quota settings of the usage plan.
	QuotaSettings pulumix.GPtrOutput[UsagePlanQuotaSettings, UsagePlanQuotaSettingsOutput] `pulumi:"quotaSettings"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The throttling limits of the usage plan.
	ThrottleSettings pulumix.GPtrOutput[UsagePlanThrottleSettings, UsagePlanThrottleSettingsOutput] `pulumi:"throttleSettings"`
}

// NewUsagePlan registers a new resource with the given unique name, arguments, and options.
func NewUsagePlan(ctx *pulumi.Context,
	name string, args *UsagePlanArgs, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	if args == nil {
		args = &UsagePlanArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsagePlan
	err := ctx.RegisterResource("aws:apigateway/usagePlan:UsagePlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlan gets an existing UsagePlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanState, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	var resource UsagePlan
	err := ctx.ReadResource("aws:apigateway/usagePlan:UsagePlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlan resources.
type usagePlanState struct {
	// Associated API stages of the usage plan.
	ApiStages []UsagePlanApiStage `pulumi:"apiStages"`
	// ARN
	Arn *string `pulumi:"arn"`
	// Description of a usage plan.
	Description *string `pulumi:"description"`
	// Name of the usage plan.
	Name *string `pulumi:"name"`
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode *string `pulumi:"productCode"`
	// The quota settings of the usage plan.
	QuotaSettings *UsagePlanQuotaSettings `pulumi:"quotaSettings"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The throttling limits of the usage plan.
	ThrottleSettings *UsagePlanThrottleSettings `pulumi:"throttleSettings"`
}

type UsagePlanState struct {
	// Associated API stages of the usage plan.
	ApiStages pulumix.Input[[]*UsagePlanApiStageArgs]
	// ARN
	Arn pulumix.Input[*string]
	// Description of a usage plan.
	Description pulumix.Input[*string]
	// Name of the usage plan.
	Name pulumix.Input[*string]
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode pulumix.Input[*string]
	// The quota settings of the usage plan.
	QuotaSettings pulumix.Input[*UsagePlanQuotaSettingsArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The throttling limits of the usage plan.
	ThrottleSettings pulumix.Input[*UsagePlanThrottleSettingsArgs]
}

func (UsagePlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanState)(nil)).Elem()
}

type usagePlanArgs struct {
	// Associated API stages of the usage plan.
	ApiStages []UsagePlanApiStage `pulumi:"apiStages"`
	// Description of a usage plan.
	Description *string `pulumi:"description"`
	// Name of the usage plan.
	Name *string `pulumi:"name"`
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode *string `pulumi:"productCode"`
	// The quota settings of the usage plan.
	QuotaSettings *UsagePlanQuotaSettings `pulumi:"quotaSettings"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The throttling limits of the usage plan.
	ThrottleSettings *UsagePlanThrottleSettings `pulumi:"throttleSettings"`
}

// The set of arguments for constructing a UsagePlan resource.
type UsagePlanArgs struct {
	// Associated API stages of the usage plan.
	ApiStages pulumix.Input[[]*UsagePlanApiStageArgs]
	// Description of a usage plan.
	Description pulumix.Input[*string]
	// Name of the usage plan.
	Name pulumix.Input[*string]
	// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
	ProductCode pulumix.Input[*string]
	// The quota settings of the usage plan.
	QuotaSettings pulumix.Input[*UsagePlanQuotaSettingsArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The throttling limits of the usage plan.
	ThrottleSettings pulumix.Input[*UsagePlanThrottleSettingsArgs]
}

func (UsagePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanArgs)(nil)).Elem()
}

type UsagePlanOutput struct{ *pulumi.OutputState }

func (UsagePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlan)(nil)).Elem()
}

func (o UsagePlanOutput) ToUsagePlanOutput() UsagePlanOutput {
	return o
}

func (o UsagePlanOutput) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return o
}

func (o UsagePlanOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlan] {
	return pulumix.Output[UsagePlan]{
		OutputState: o.OutputState,
	}
}

// Associated API stages of the usage plan.
func (o UsagePlanOutput) ApiStages() pulumix.GArrayOutput[UsagePlanApiStage, UsagePlanApiStageOutput] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.GArrayOutput[UsagePlanApiStage, UsagePlanApiStageOutput] { return v.ApiStages })
	unwrapped := pulumix.Flatten[[]UsagePlanApiStage, pulumix.GArrayOutput[UsagePlanApiStage, UsagePlanApiStageOutput]](value)
	return pulumix.GArrayOutput[UsagePlanApiStage, UsagePlanApiStageOutput]{OutputState: unwrapped.OutputState}
}

// ARN
func (o UsagePlanOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of a usage plan.
func (o UsagePlanOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the usage plan.
func (o UsagePlanOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
func (o UsagePlanOutput) ProductCode() pulumix.Output[*string] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.Output[*string] { return v.ProductCode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The quota settings of the usage plan.
func (o UsagePlanOutput) QuotaSettings() pulumix.GPtrOutput[UsagePlanQuotaSettings, UsagePlanQuotaSettingsOutput] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.GPtrOutput[UsagePlanQuotaSettings, UsagePlanQuotaSettingsOutput] {
		return v.QuotaSettings
	})
	unwrapped := pulumix.Flatten[*UsagePlanQuotaSettings, pulumix.GPtrOutput[UsagePlanQuotaSettings, UsagePlanQuotaSettingsOutput]](value)
	return pulumix.GPtrOutput[UsagePlanQuotaSettings, UsagePlanQuotaSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o UsagePlanOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o UsagePlanOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The throttling limits of the usage plan.
func (o UsagePlanOutput) ThrottleSettings() pulumix.GPtrOutput[UsagePlanThrottleSettings, UsagePlanThrottleSettingsOutput] {
	value := pulumix.Apply[UsagePlan](o, func(v UsagePlan) pulumix.GPtrOutput[UsagePlanThrottleSettings, UsagePlanThrottleSettingsOutput] {
		return v.ThrottleSettings
	})
	unwrapped := pulumix.Flatten[*UsagePlanThrottleSettings, pulumix.GPtrOutput[UsagePlanThrottleSettings, UsagePlanThrottleSettingsOutput]](value)
	return pulumix.GPtrOutput[UsagePlanThrottleSettings, UsagePlanThrottleSettingsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(UsagePlanOutput{})
}
