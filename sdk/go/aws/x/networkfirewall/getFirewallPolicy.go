// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a firewall policy.
func LookupFirewallPolicy(ctx *pulumi.Context, args *LookupFirewallPolicyArgs, opts ...pulumi.InvokeOption) (*LookupFirewallPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFirewallPolicyResult
	err := ctx.Invoke("aws:networkfirewall/getFirewallPolicy:getFirewallPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFirewallPolicy.
type LookupFirewallPolicyArgs struct {
	// ARN of the firewall policy.
	Arn *string `pulumi:"arn"`
	// Descriptive name of the firewall policy.
	Name *string `pulumi:"name"`
	// Key-value tags for the firewall policy.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getFirewallPolicy.
type LookupFirewallPolicyResult struct {
	Arn *string `pulumi:"arn"`
	// Description of the firewall policy.
	Description string `pulumi:"description"`
	// The [policy][2] for the specified firewall policy.
	FirewallPolicies []GetFirewallPolicyFirewallPolicy `pulumi:"firewallPolicies"`
	// The provider-assigned unique ID for this managed resource.
	Id   string  `pulumi:"id"`
	Name *string `pulumi:"name"`
	// Key-value tags for the firewall policy.
	Tags map[string]string `pulumi:"tags"`
	// Token used for optimistic locking.
	UpdateToken string `pulumi:"updateToken"`
}

func LookupFirewallPolicyOutput(ctx *pulumi.Context, args LookupFirewallPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupFirewallPolicyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFirewallPolicyArgs](args.ToOutput(), func(plainArgs *LookupFirewallPolicyArgs) (*LookupFirewallPolicyResult, error) {
		return LookupFirewallPolicy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFirewallPolicyResultOutput, *LookupFirewallPolicyResult](outputResult)
}

// A collection of arguments for invoking getFirewallPolicy.
type LookupFirewallPolicyOutputArgs struct {
	// ARN of the firewall policy.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Descriptive name of the firewall policy.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Key-value tags for the firewall policy.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupFirewallPolicyOutputArgs) ToOutput() pulumix.Output[*LookupFirewallPolicyArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFirewallPolicyArgs {
		return &LookupFirewallPolicyArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
			Tags: resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupFirewallPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupFirewallPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallPolicyResult)(nil)).Elem()
}

func (o LookupFirewallPolicyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFirewallPolicyResult] {
	return pulumix.Output[*LookupFirewallPolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFirewallPolicyResultOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) *string { return v.Arn })
}

func (o LookupFirewallPolicyResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) string { return v.Description })
}

func (o LookupFirewallPolicyResultOutput) FirewallPolicies() pulumix.GArrayOutput[GetFirewallPolicyFirewallPolicy, GetFirewallPolicyFirewallPolicyOutput] {
	value := pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) []GetFirewallPolicyFirewallPolicy { return v.FirewallPolicies })
	return pulumix.GArrayOutput[GetFirewallPolicyFirewallPolicy, GetFirewallPolicyFirewallPolicyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFirewallPolicyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) string { return v.Id })
}

func (o LookupFirewallPolicyResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) *string { return v.Name })
}

func (o LookupFirewallPolicyResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupFirewallPolicyResultOutput) UpdateToken() pulumix.Output[string] {
	return pulumix.Apply[*LookupFirewallPolicyResult](o, func(v *LookupFirewallPolicyResult) string { return v.UpdateToken })
}
