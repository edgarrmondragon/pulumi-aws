// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chimesdkmediapipelines

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type MediaInsightsPipelineConfigurationElement struct {
	// Configuration for Amazon Transcribe Call Analytics processor.
	AmazonTranscribeCallAnalyticsProcessorConfiguration *MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration `pulumi:"amazonTranscribeCallAnalyticsProcessorConfiguration"`
	// Configuration for Amazon Transcribe processor.
	AmazonTranscribeProcessorConfiguration *MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration `pulumi:"amazonTranscribeProcessorConfiguration"`
	// Configuration for Kinesis Data Stream sink.
	KinesisDataStreamSinkConfiguration *MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration `pulumi:"kinesisDataStreamSinkConfiguration"`
	// Configuration for Lambda Function sink.
	LambdaFunctionSinkConfiguration *MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration `pulumi:"lambdaFunctionSinkConfiguration"`
	// Configuration for S3 recording sink.
	S3RecordingSinkConfiguration *MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration `pulumi:"s3RecordingSinkConfiguration"`
	// Configuration for SNS Topic sink.
	SnsTopicSinkConfiguration *MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration `pulumi:"snsTopicSinkConfiguration"`
	// Configuration for SQS Queue sink.
	SqsQueueSinkConfiguration *MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration `pulumi:"sqsQueueSinkConfiguration"`
	// Element type.
	Type string `pulumi:"type"`
	// Configuration for Voice analytics processor.
	VoiceAnalyticsProcessorConfiguration *MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration `pulumi:"voiceAnalyticsProcessorConfiguration"`
}

type MediaInsightsPipelineConfigurationElementArgs struct {
	// Configuration for Amazon Transcribe Call Analytics processor.
	AmazonTranscribeCallAnalyticsProcessorConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs] `pulumi:"amazonTranscribeCallAnalyticsProcessorConfiguration"`
	// Configuration for Amazon Transcribe processor.
	AmazonTranscribeProcessorConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs] `pulumi:"amazonTranscribeProcessorConfiguration"`
	// Configuration for Kinesis Data Stream sink.
	KinesisDataStreamSinkConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs] `pulumi:"kinesisDataStreamSinkConfiguration"`
	// Configuration for Lambda Function sink.
	LambdaFunctionSinkConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs] `pulumi:"lambdaFunctionSinkConfiguration"`
	// Configuration for S3 recording sink.
	S3RecordingSinkConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs] `pulumi:"s3RecordingSinkConfiguration"`
	// Configuration for SNS Topic sink.
	SnsTopicSinkConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs] `pulumi:"snsTopicSinkConfiguration"`
	// Configuration for SQS Queue sink.
	SqsQueueSinkConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs] `pulumi:"sqsQueueSinkConfiguration"`
	// Element type.
	Type pulumix.Input[string] `pulumi:"type"`
	// Configuration for Voice analytics processor.
	VoiceAnalyticsProcessorConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs] `pulumi:"voiceAnalyticsProcessorConfiguration"`
}

func (MediaInsightsPipelineConfigurationElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElement)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementArgs) ToMediaInsightsPipelineConfigurationElementOutput() MediaInsightsPipelineConfigurationElementOutput {
	return i.ToMediaInsightsPipelineConfigurationElementOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementArgs) ToMediaInsightsPipelineConfigurationElementOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementOutput)
}

func (i *MediaInsightsPipelineConfigurationElementArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElement)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementOutput) ToMediaInsightsPipelineConfigurationElementOutput() MediaInsightsPipelineConfigurationElementOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementOutput) ToMediaInsightsPipelineConfigurationElementOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElement] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElement]{
		OutputState: o.OutputState,
	}
}

// Configuration for Amazon Transcribe Call Analytics processor.
func (o MediaInsightsPipelineConfigurationElementOutput) AmazonTranscribeCallAnalyticsProcessorConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration, MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration {
		return v.AmazonTranscribeCallAnalyticsProcessorConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration, MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for Amazon Transcribe processor.
func (o MediaInsightsPipelineConfigurationElementOutput) AmazonTranscribeProcessorConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration, MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration {
		return v.AmazonTranscribeProcessorConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration, MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for Kinesis Data Stream sink.
func (o MediaInsightsPipelineConfigurationElementOutput) KinesisDataStreamSinkConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration, MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration {
		return v.KinesisDataStreamSinkConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration, MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for Lambda Function sink.
func (o MediaInsightsPipelineConfigurationElementOutput) LambdaFunctionSinkConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration, MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration {
		return v.LambdaFunctionSinkConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration, MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for S3 recording sink.
func (o MediaInsightsPipelineConfigurationElementOutput) S3RecordingSinkConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration, MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration {
		return v.S3RecordingSinkConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration, MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for SNS Topic sink.
func (o MediaInsightsPipelineConfigurationElementOutput) SnsTopicSinkConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration, MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration {
		return v.SnsTopicSinkConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration, MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for SQS Queue sink.
func (o MediaInsightsPipelineConfigurationElementOutput) SqsQueueSinkConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration, MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration {
		return v.SqsQueueSinkConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration, MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput]{OutputState: value.OutputState}
}

// Element type.
func (o MediaInsightsPipelineConfigurationElementOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) string { return v.Type })
}

// Configuration for Voice analytics processor.
func (o MediaInsightsPipelineConfigurationElementOutput) VoiceAnalyticsProcessorConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration, MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElement](o, func(v MediaInsightsPipelineConfigurationElement) *MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration {
		return v.VoiceAnalyticsProcessorConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration, MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput]{OutputState: value.OutputState}
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration struct {
	// Filter for category events to be delivered to insights target.
	CallAnalyticsStreamCategories []string `pulumi:"callAnalyticsStreamCategories"`
	// Labels all personally identifiable information (PII) identified in Utterance events.
	ContentIdentificationType *string `pulumi:"contentIdentificationType"`
	// Redacts all personally identifiable information (PII) identified in Utterance events.
	ContentRedactionType *string `pulumi:"contentRedactionType"`
	// Enables partial result stabilization in Utterance events.
	EnablePartialResultsStabilization *bool `pulumi:"enablePartialResultsStabilization"`
	// Filters partial Utterance events from delivery to the insights target.
	FilterPartialResults *bool `pulumi:"filterPartialResults"`
	// Language code for the transcription model.
	LanguageCode string `pulumi:"languageCode"`
	// Name of custom language model for transcription.
	LanguageModelName *string `pulumi:"languageModelName"`
	// Level of stability to use when partial results stabilization is enabled.
	PartialResultsStability *string `pulumi:"partialResultsStability"`
	// Types of personally identifiable information (PII) to redact from an Utterance event.
	PiiEntityTypes *string `pulumi:"piiEntityTypes"`
	// Settings for post call analytics.
	PostCallAnalyticsSettings *MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings `pulumi:"postCallAnalyticsSettings"`
	// Method for applying a vocabulary filter to Utterance events.
	VocabularyFilterMethod *string `pulumi:"vocabularyFilterMethod"`
	// Name of the custom vocabulary filter to use when processing Utterance events.
	VocabularyFilterName *string `pulumi:"vocabularyFilterName"`
	// Name of the custom vocabulary to use when processing Utterance events.
	VocabularyName *string `pulumi:"vocabularyName"`
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs struct {
	// Filter for category events to be delivered to insights target.
	CallAnalyticsStreamCategories pulumix.Input[[]string] `pulumi:"callAnalyticsStreamCategories"`
	// Labels all personally identifiable information (PII) identified in Utterance events.
	ContentIdentificationType pulumix.Input[*string] `pulumi:"contentIdentificationType"`
	// Redacts all personally identifiable information (PII) identified in Utterance events.
	ContentRedactionType pulumix.Input[*string] `pulumi:"contentRedactionType"`
	// Enables partial result stabilization in Utterance events.
	EnablePartialResultsStabilization pulumix.Input[*bool] `pulumi:"enablePartialResultsStabilization"`
	// Filters partial Utterance events from delivery to the insights target.
	FilterPartialResults pulumix.Input[*bool] `pulumi:"filterPartialResults"`
	// Language code for the transcription model.
	LanguageCode pulumix.Input[string] `pulumi:"languageCode"`
	// Name of custom language model for transcription.
	LanguageModelName pulumix.Input[*string] `pulumi:"languageModelName"`
	// Level of stability to use when partial results stabilization is enabled.
	PartialResultsStability pulumix.Input[*string] `pulumi:"partialResultsStability"`
	// Types of personally identifiable information (PII) to redact from an Utterance event.
	PiiEntityTypes pulumix.Input[*string] `pulumi:"piiEntityTypes"`
	// Settings for post call analytics.
	PostCallAnalyticsSettings pulumix.Input[*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs] `pulumi:"postCallAnalyticsSettings"`
	// Method for applying a vocabulary filter to Utterance events.
	VocabularyFilterMethod pulumix.Input[*string] `pulumi:"vocabularyFilterMethod"`
	// Name of the custom vocabulary filter to use when processing Utterance events.
	VocabularyFilterName pulumix.Input[*string] `pulumi:"vocabularyFilterName"`
	// Name of the custom vocabulary to use when processing Utterance events.
	VocabularyName pulumix.Input[*string] `pulumi:"vocabularyName"`
}

func (MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput() MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput() MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration]{
		OutputState: o.OutputState,
	}
}

// Filter for category events to be delivered to insights target.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) CallAnalyticsStreamCategories() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) []string {
		return v.CallAnalyticsStreamCategories
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Labels all personally identifiable information (PII) identified in Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) ContentIdentificationType() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.ContentIdentificationType
	})
}

// Redacts all personally identifiable information (PII) identified in Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) ContentRedactionType() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.ContentRedactionType
	})
}

// Enables partial result stabilization in Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) EnablePartialResultsStabilization() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *bool {
		return v.EnablePartialResultsStabilization
	})
}

// Filters partial Utterance events from delivery to the insights target.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) FilterPartialResults() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *bool {
		return v.FilterPartialResults
	})
}

// Language code for the transcription model.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) LanguageCode() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) string {
		return v.LanguageCode
	})
}

// Name of custom language model for transcription.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) LanguageModelName() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.LanguageModelName
	})
}

// Level of stability to use when partial results stabilization is enabled.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) PartialResultsStability() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.PartialResultsStability
	})
}

// Types of personally identifiable information (PII) to redact from an Utterance event.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) PiiEntityTypes() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.PiiEntityTypes
	})
}

// Settings for post call analytics.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) PostCallAnalyticsSettings() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings, MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings {
		return v.PostCallAnalyticsSettings
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings, MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput]{OutputState: value.OutputState}
}

// Method for applying a vocabulary filter to Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) VocabularyFilterMethod() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.VocabularyFilterMethod
	})
}

// Name of the custom vocabulary filter to use when processing Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) VocabularyFilterName() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.VocabularyFilterName
	})
}

// Name of the custom vocabulary to use when processing Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput) VocabularyName() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfiguration) *string {
		return v.VocabularyName
	})
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings struct {
	// Should output be redacted.
	ContentRedactionOutput *string `pulumi:"contentRedactionOutput"`
	// ARN of the role used by AWS Transcribe to upload your post call analysis.
	DataAccessRoleArn string `pulumi:"dataAccessRoleArn"`
	// ID of the KMS key used to encrypt the output.
	OutputEncryptionKmsKeyId *string `pulumi:"outputEncryptionKmsKeyId"`
	// The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
	OutputLocation string `pulumi:"outputLocation"`
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs struct {
	// Should output be redacted.
	ContentRedactionOutput pulumix.Input[*string] `pulumi:"contentRedactionOutput"`
	// ARN of the role used by AWS Transcribe to upload your post call analysis.
	DataAccessRoleArn pulumix.Input[string] `pulumi:"dataAccessRoleArn"`
	// ID of the KMS key used to encrypt the output.
	OutputEncryptionKmsKeyId pulumix.Input[*string] `pulumi:"outputEncryptionKmsKeyId"`
	// The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
	OutputLocation pulumix.Input[string] `pulumi:"outputLocation"`
}

func (MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput() MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput {
	return i.ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput)
}

func (i *MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput() MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings]{
		OutputState: o.OutputState,
	}
}

// Should output be redacted.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) ContentRedactionOutput() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings) *string {
		return v.ContentRedactionOutput
	})
}

// ARN of the role used by AWS Transcribe to upload your post call analysis.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) DataAccessRoleArn() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings) string {
		return v.DataAccessRoleArn
	})
}

// ID of the KMS key used to encrypt the output.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) OutputEncryptionKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings) *string {
		return v.OutputEncryptionKmsKeyId
	})
}

// The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput) OutputLocation() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettings) string {
		return v.OutputLocation
	})
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration struct {
	// Labels all personally identifiable information (PII) identified in Utterance events.
	ContentIdentificationType *string `pulumi:"contentIdentificationType"`
	// Redacts all personally identifiable information (PII) identified in Utterance events.
	ContentRedactionType *string `pulumi:"contentRedactionType"`
	// Enables partial result stabilization in Utterance events.
	EnablePartialResultsStabilization *bool `pulumi:"enablePartialResultsStabilization"`
	// Filters partial Utterance events from delivery to the insights target.
	FilterPartialResults *bool `pulumi:"filterPartialResults"`
	// Language code for the transcription model.
	LanguageCode string `pulumi:"languageCode"`
	// Name of custom language model for transcription.
	LanguageModelName *string `pulumi:"languageModelName"`
	// Level of stability to use when partial results stabilization is enabled.
	PartialResultsStability *string `pulumi:"partialResultsStability"`
	// Types of personally identifiable information (PII) to redact from an Utterance event.
	PiiEntityTypes *string `pulumi:"piiEntityTypes"`
	// Enables speaker partitioning (diarization) in your Transcript events.
	ShowSpeakerLabel *bool `pulumi:"showSpeakerLabel"`
	// Method for applying a vocabulary filter to Utterance events.
	VocabularyFilterMethod *string `pulumi:"vocabularyFilterMethod"`
	// Name of the custom vocabulary filter to use when processing Utterance events.
	VocabularyFilterName *string `pulumi:"vocabularyFilterName"`
	// Name of the custom vocabulary to use when processing Utterance events.
	VocabularyName *string `pulumi:"vocabularyName"`
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs struct {
	// Labels all personally identifiable information (PII) identified in Utterance events.
	ContentIdentificationType pulumix.Input[*string] `pulumi:"contentIdentificationType"`
	// Redacts all personally identifiable information (PII) identified in Utterance events.
	ContentRedactionType pulumix.Input[*string] `pulumi:"contentRedactionType"`
	// Enables partial result stabilization in Utterance events.
	EnablePartialResultsStabilization pulumix.Input[*bool] `pulumi:"enablePartialResultsStabilization"`
	// Filters partial Utterance events from delivery to the insights target.
	FilterPartialResults pulumix.Input[*bool] `pulumi:"filterPartialResults"`
	// Language code for the transcription model.
	LanguageCode pulumix.Input[string] `pulumi:"languageCode"`
	// Name of custom language model for transcription.
	LanguageModelName pulumix.Input[*string] `pulumi:"languageModelName"`
	// Level of stability to use when partial results stabilization is enabled.
	PartialResultsStability pulumix.Input[*string] `pulumi:"partialResultsStability"`
	// Types of personally identifiable information (PII) to redact from an Utterance event.
	PiiEntityTypes pulumix.Input[*string] `pulumi:"piiEntityTypes"`
	// Enables speaker partitioning (diarization) in your Transcript events.
	ShowSpeakerLabel pulumix.Input[*bool] `pulumi:"showSpeakerLabel"`
	// Method for applying a vocabulary filter to Utterance events.
	VocabularyFilterMethod pulumix.Input[*string] `pulumi:"vocabularyFilterMethod"`
	// Name of the custom vocabulary filter to use when processing Utterance events.
	VocabularyFilterName pulumix.Input[*string] `pulumi:"vocabularyFilterName"`
	// Name of the custom vocabulary to use when processing Utterance events.
	VocabularyName pulumix.Input[*string] `pulumi:"vocabularyName"`
}

func (MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput() MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput() MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ToMediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration]{
		OutputState: o.OutputState,
	}
}

// Labels all personally identifiable information (PII) identified in Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ContentIdentificationType() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.ContentIdentificationType
	})
}

// Redacts all personally identifiable information (PII) identified in Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ContentRedactionType() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.ContentRedactionType
	})
}

// Enables partial result stabilization in Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) EnablePartialResultsStabilization() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *bool {
		return v.EnablePartialResultsStabilization
	})
}

// Filters partial Utterance events from delivery to the insights target.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) FilterPartialResults() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *bool {
		return v.FilterPartialResults
	})
}

// Language code for the transcription model.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) LanguageCode() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) string {
		return v.LanguageCode
	})
}

// Name of custom language model for transcription.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) LanguageModelName() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.LanguageModelName
	})
}

// Level of stability to use when partial results stabilization is enabled.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) PartialResultsStability() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.PartialResultsStability
	})
}

// Types of personally identifiable information (PII) to redact from an Utterance event.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) PiiEntityTypes() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.PiiEntityTypes
	})
}

// Enables speaker partitioning (diarization) in your Transcript events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) ShowSpeakerLabel() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *bool {
		return v.ShowSpeakerLabel
	})
}

// Method for applying a vocabulary filter to Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) VocabularyFilterMethod() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.VocabularyFilterMethod
	})
}

// Name of the custom vocabulary filter to use when processing Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) VocabularyFilterName() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.VocabularyFilterName
	})
}

// Name of the custom vocabulary to use when processing Utterance events.
func (o MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput) VocabularyName() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfiguration) *string {
		return v.VocabularyName
	})
}

type MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget string `pulumi:"insightsTarget"`
}

type MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget pulumix.Input[string] `pulumi:"insightsTarget"`
}

func (MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Kinesis Data Stream to deliver results.
func (o MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput) InsightsTarget() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration](o, func(v MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfiguration) string {
		return v.InsightsTarget
	})
}

type MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget string `pulumi:"insightsTarget"`
}

type MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget pulumix.Input[string] `pulumi:"insightsTarget"`
}

func (MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Kinesis Data Stream to deliver results.
func (o MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput) InsightsTarget() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration](o, func(v MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfiguration) string {
		return v.InsightsTarget
	})
}

type MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration struct {
	// S3 URI to deliver recordings.
	Destination *string `pulumi:"destination"`
}

type MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs struct {
	// S3 URI to deliver recordings.
	Destination pulumix.Input[*string] `pulumi:"destination"`
}

func (MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration]{
		OutputState: o.OutputState,
	}
}

// S3 URI to deliver recordings.
func (o MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput) Destination() pulumix.Output[*string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration](o, func(v MediaInsightsPipelineConfigurationElementS3RecordingSinkConfiguration) *string {
		return v.Destination
	})
}

type MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget string `pulumi:"insightsTarget"`
}

type MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget pulumix.Input[string] `pulumi:"insightsTarget"`
}

func (MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Kinesis Data Stream to deliver results.
func (o MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput) InsightsTarget() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration](o, func(v MediaInsightsPipelineConfigurationElementSnsTopicSinkConfiguration) string {
		return v.InsightsTarget
	})
}

type MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget string `pulumi:"insightsTarget"`
}

type MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs struct {
	// Kinesis Data Stream to deliver results.
	InsightsTarget pulumix.Input[string] `pulumi:"insightsTarget"`
}

func (MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs) ToMediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput() MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput) ToMediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Kinesis Data Stream to deliver results.
func (o MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput) InsightsTarget() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration](o, func(v MediaInsightsPipelineConfigurationElementSqsQueueSinkConfiguration) string {
		return v.InsightsTarget
	})
}

type MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration struct {
	// Enable speaker search.
	SpeakerSearchStatus string `pulumi:"speakerSearchStatus"`
	// Enable voice tone analysis.
	VoiceToneAnalysisStatus string `pulumi:"voiceToneAnalysisStatus"`
}

type MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs struct {
	// Enable speaker search.
	SpeakerSearchStatus pulumix.Input[string] `pulumi:"speakerSearchStatus"`
	// Enable voice tone analysis.
	VoiceToneAnalysisStatus pulumix.Input[string] `pulumi:"voiceToneAnalysisStatus"`
}

func (MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs) ToMediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput() MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs) ToMediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput) ToMediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput() MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput) ToMediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enable speaker search.
func (o MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput) SpeakerSearchStatus() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration) string {
		return v.SpeakerSearchStatus
	})
}

// Enable voice tone analysis.
func (o MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput) VoiceToneAnalysisStatus() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration](o, func(v MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfiguration) string {
		return v.VoiceToneAnalysisStatus
	})
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfiguration struct {
	// Disables real time alert rules.
	Disabled *bool `pulumi:"disabled"`
	// Collection of real time alert rules
	Rules []MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule `pulumi:"rules"`
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs struct {
	// Disables real time alert rules.
	Disabled pulumix.Input[*bool] `pulumi:"disabled"`
	// Collection of real time alert rules
	Rules pulumix.Input[[]*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs] `pulumi:"rules"`
}

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration]{
		OutputState: o.OutputState,
	}
}

// Disables real time alert rules.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput) Disabled() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfiguration) *bool { return v.Disabled })
}

// Collection of real time alert rules
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput) Rules() pulumix.GArrayOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfiguration) []MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule {
		return v.Rules
	})
	return pulumix.GArrayOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput]{OutputState: value.OutputState}
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule struct {
	// Configuration for an issue detection rule.
	IssueDetectionConfiguration *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration `pulumi:"issueDetectionConfiguration"`
	// Configuration for a keyword match rule.
	KeywordMatchConfiguration *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration `pulumi:"keywordMatchConfiguration"`
	// Configuration for a sentiment rule.
	SentimentConfiguration *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration `pulumi:"sentimentConfiguration"`
	// Element type.
	Type string `pulumi:"type"`
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs struct {
	// Configuration for an issue detection rule.
	IssueDetectionConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs] `pulumi:"issueDetectionConfiguration"`
	// Configuration for a keyword match rule.
	KeywordMatchConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs] `pulumi:"keywordMatchConfiguration"`
	// Configuration for a sentiment rule.
	SentimentConfiguration pulumix.Input[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs] `pulumi:"sentimentConfiguration"`
	// Element type.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput {
	return i.ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput)
}

func (i *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule] {
	return pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// Configuration for an issue detection rule.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) IssueDetectionConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule) *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration {
		return v.IssueDetectionConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for a keyword match rule.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) KeywordMatchConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule) *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration {
		return v.KeywordMatchConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput]{OutputState: value.OutputState}
}

// Configuration for a sentiment rule.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) SentimentConfiguration() pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule) *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration {
		return v.SentimentConfiguration
	})
	return pulumix.GPtrOutput[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration, MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput]{OutputState: value.OutputState}
}

// Element type.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRule) string { return v.Type })
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration struct {
	// Rule name.
	RuleName string `pulumi:"ruleName"`
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs struct {
	// Rule name.
	RuleName pulumix.Input[string] `pulumi:"ruleName"`
}

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Rule name.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput) RuleName() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfiguration) string {
		return v.RuleName
	})
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration struct {
	// Collection of keywords to match.
	Keywords []string `pulumi:"keywords"`
	// Negate the rule.
	Negate *bool `pulumi:"negate"`
	// Rule name.
	RuleName string `pulumi:"ruleName"`
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs struct {
	// Collection of keywords to match.
	Keywords pulumix.Input[[]string] `pulumi:"keywords"`
	// Negate the rule.
	Negate pulumix.Input[*bool] `pulumi:"negate"`
	// Rule name.
	RuleName pulumix.Input[string] `pulumi:"ruleName"`
}

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration]{
		OutputState: o.OutputState,
	}
}

// Collection of keywords to match.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) Keywords() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration) []string {
		return v.Keywords
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Negate the rule.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) Negate() pulumix.Output[*bool] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration) *bool {
		return v.Negate
	})
}

// Rule name.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput) RuleName() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfiguration) string {
		return v.RuleName
	})
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration struct {
	// Rule name.
	RuleName string `pulumi:"ruleName"`
	// Sentiment type to match.
	SentimentType string `pulumi:"sentimentType"`
	// Analysis interval.
	TimePeriod int `pulumi:"timePeriod"`
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs struct {
	// Rule name.
	RuleName pulumix.Input[string] `pulumi:"ruleName"`
	// Sentiment type to match.
	SentimentType pulumix.Input[string] `pulumi:"sentimentType"`
	// Analysis interval.
	TimePeriod pulumix.Input[int] `pulumi:"timePeriod"`
}

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration)(nil)).Elem()
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput {
	return i.ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutputWithContext(context.Background())
}

func (i MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput)
}

func (i *MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationArgs] {
	return pulumix.Val(i)
}

type MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput struct{ *pulumi.OutputState }

func (MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration)(nil)).Elem()
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput() MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) ToMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutputWithContext(ctx context.Context) MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput {
	return o
}

func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration] {
	return pulumix.Output[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration]{
		OutputState: o.OutputState,
	}
}

// Rule name.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) RuleName() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration) string {
		return v.RuleName
	})
}

// Sentiment type to match.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) SentimentType() pulumix.Output[string] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration) string {
		return v.SentimentType
	})
}

// Analysis interval.
func (o MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput) TimePeriod() pulumix.Output[int] {
	return pulumix.Apply[MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration](o, func(v MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfiguration) int {
		return v.TimePeriod
	})
}

func init() {
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementAmazonTranscribeProcessorConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementKinesisDataStreamSinkConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementLambdaFunctionSinkConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementS3RecordingSinkConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementSnsTopicSinkConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementSqsQueueSinkConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationElementVoiceAnalyticsProcessorConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleIssueDetectionConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleKeywordMatchConfigurationOutput{})
	pulumi.RegisterOutputType(MediaInsightsPipelineConfigurationRealTimeAlertConfigurationRuleSentimentConfigurationOutput{})
}
