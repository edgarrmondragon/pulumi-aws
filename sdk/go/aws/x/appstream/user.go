// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppStream user.
type User struct {
	pulumi.CustomResourceState

	// ARN of the appstream user.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
	AuthenticationType pulumix.Output[string] `pulumi:"authenticationType"`
	// Date and time, in UTC and extended RFC 3339 format, when the user was created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Whether the user in the user pool is enabled.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// First name, or given name, of the user.
	FirstName pulumix.Output[*string] `pulumi:"firstName"`
	// Last name, or surname, of the user.
	LastName pulumix.Output[*string] `pulumi:"lastName"`
	// Send an email notification.
	SendEmailNotification pulumix.Output[*bool] `pulumi:"sendEmailNotification"`
	// Email address of the user.
	//
	// The following arguments are optional:
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("aws:appstream/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:appstream/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// ARN of the appstream user.
	Arn *string `pulumi:"arn"`
	// Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
	AuthenticationType *string `pulumi:"authenticationType"`
	// Date and time, in UTC and extended RFC 3339 format, when the user was created.
	CreatedTime *string `pulumi:"createdTime"`
	// Whether the user in the user pool is enabled.
	Enabled *bool `pulumi:"enabled"`
	// First name, or given name, of the user.
	FirstName *string `pulumi:"firstName"`
	// Last name, or surname, of the user.
	LastName *string `pulumi:"lastName"`
	// Send an email notification.
	SendEmailNotification *bool `pulumi:"sendEmailNotification"`
	// Email address of the user.
	//
	// The following arguments are optional:
	UserName *string `pulumi:"userName"`
}

type UserState struct {
	// ARN of the appstream user.
	Arn pulumix.Input[*string]
	// Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
	AuthenticationType pulumix.Input[*string]
	// Date and time, in UTC and extended RFC 3339 format, when the user was created.
	CreatedTime pulumix.Input[*string]
	// Whether the user in the user pool is enabled.
	Enabled pulumix.Input[*bool]
	// First name, or given name, of the user.
	FirstName pulumix.Input[*string]
	// Last name, or surname, of the user.
	LastName pulumix.Input[*string]
	// Send an email notification.
	SendEmailNotification pulumix.Input[*bool]
	// Email address of the user.
	//
	// The following arguments are optional:
	UserName pulumix.Input[*string]
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
	AuthenticationType string `pulumi:"authenticationType"`
	// Whether the user in the user pool is enabled.
	Enabled *bool `pulumi:"enabled"`
	// First name, or given name, of the user.
	FirstName *string `pulumi:"firstName"`
	// Last name, or surname, of the user.
	LastName *string `pulumi:"lastName"`
	// Send an email notification.
	SendEmailNotification *bool `pulumi:"sendEmailNotification"`
	// Email address of the user.
	//
	// The following arguments are optional:
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
	AuthenticationType pulumix.Input[string]
	// Whether the user in the user pool is enabled.
	Enabled pulumix.Input[*bool]
	// First name, or given name, of the user.
	FirstName pulumix.Input[*string]
	// Last name, or surname, of the user.
	LastName pulumix.Input[*string]
	// Send an email notification.
	SendEmailNotification pulumix.Input[*bool]
	// Email address of the user.
	//
	// The following arguments are optional:
	UserName pulumix.Input[string]
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ToOutput(ctx context.Context) pulumix.Output[User] {
	return pulumix.Output[User]{
		OutputState: o.OutputState,
	}
}

// ARN of the appstream user.
func (o UserOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
func (o UserOutput) AuthenticationType() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.AuthenticationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time, in UTC and extended RFC 3339 format, when the user was created.
func (o UserOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the user in the user pool is enabled.
func (o UserOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// First name, or given name, of the user.
func (o UserOutput) FirstName() pulumix.Output[*string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*string] { return v.FirstName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Last name, or surname, of the user.
func (o UserOutput) LastName() pulumix.Output[*string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*string] { return v.LastName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Send an email notification.
func (o UserOutput) SendEmailNotification() pulumix.Output[*bool] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*bool] { return v.SendEmailNotification })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Email address of the user.
//
// The following arguments are optional:
func (o UserOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
