// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CertificateDomainValidationOption struct {
	// A domain name for which the certificate should be issued.
	DomainName          *string `pulumi:"domainName"`
	ResourceRecordName  *string `pulumi:"resourceRecordName"`
	ResourceRecordType  *string `pulumi:"resourceRecordType"`
	ResourceRecordValue *string `pulumi:"resourceRecordValue"`
}

type CertificateDomainValidationOptionArgs struct {
	// A domain name for which the certificate should be issued.
	DomainName          pulumix.Input[*string] `pulumi:"domainName"`
	ResourceRecordName  pulumix.Input[*string] `pulumi:"resourceRecordName"`
	ResourceRecordType  pulumix.Input[*string] `pulumi:"resourceRecordType"`
	ResourceRecordValue pulumix.Input[*string] `pulumi:"resourceRecordValue"`
}

func (CertificateDomainValidationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDomainValidationOption)(nil)).Elem()
}

func (i CertificateDomainValidationOptionArgs) ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput {
	return i.ToCertificateDomainValidationOptionOutputWithContext(context.Background())
}

func (i CertificateDomainValidationOptionArgs) ToCertificateDomainValidationOptionOutputWithContext(ctx context.Context) CertificateDomainValidationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDomainValidationOptionOutput)
}

func (i *CertificateDomainValidationOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateDomainValidationOptionArgs] {
	return pulumix.Val(i)
}

type CertificateDomainValidationOptionOutput struct{ *pulumi.OutputState }

func (CertificateDomainValidationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDomainValidationOption)(nil)).Elem()
}

func (o CertificateDomainValidationOptionOutput) ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput {
	return o
}

func (o CertificateDomainValidationOptionOutput) ToCertificateDomainValidationOptionOutputWithContext(ctx context.Context) CertificateDomainValidationOptionOutput {
	return o
}

func (o CertificateDomainValidationOptionOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateDomainValidationOption] {
	return pulumix.Output[CertificateDomainValidationOption]{
		OutputState: o.OutputState,
	}
}

// A domain name for which the certificate should be issued.
func (o CertificateDomainValidationOptionOutput) DomainName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.DomainName })
}

func (o CertificateDomainValidationOptionOutput) ResourceRecordName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.ResourceRecordName })
}

func (o CertificateDomainValidationOptionOutput) ResourceRecordType() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.ResourceRecordType })
}

func (o CertificateDomainValidationOptionOutput) ResourceRecordValue() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.ResourceRecordValue })
}

type ContainerServiceDeploymentVersionContainer struct {
	// The launch command for the container. A list of string.
	Commands []string `pulumi:"commands"`
	// The name for the container.
	ContainerName string `pulumi:"containerName"`
	// A key-value map of the environment variables of the container.
	Environment map[string]string `pulumi:"environment"`
	// The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
	Image string `pulumi:"image"`
	// A key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
	Ports map[string]string `pulumi:"ports"`
}

type ContainerServiceDeploymentVersionContainerArgs struct {
	// The launch command for the container. A list of string.
	Commands pulumix.Input[[]string] `pulumi:"commands"`
	// The name for the container.
	ContainerName pulumix.Input[string] `pulumi:"containerName"`
	// A key-value map of the environment variables of the container.
	Environment pulumix.Input[map[string]string] `pulumi:"environment"`
	// The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
	Image pulumix.Input[string] `pulumi:"image"`
	// A key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
	Ports pulumix.Input[map[string]string] `pulumi:"ports"`
}

func (ContainerServiceDeploymentVersionContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceDeploymentVersionContainer)(nil)).Elem()
}

func (i ContainerServiceDeploymentVersionContainerArgs) ToContainerServiceDeploymentVersionContainerOutput() ContainerServiceDeploymentVersionContainerOutput {
	return i.ToContainerServiceDeploymentVersionContainerOutputWithContext(context.Background())
}

func (i ContainerServiceDeploymentVersionContainerArgs) ToContainerServiceDeploymentVersionContainerOutputWithContext(ctx context.Context) ContainerServiceDeploymentVersionContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceDeploymentVersionContainerOutput)
}

func (i *ContainerServiceDeploymentVersionContainerArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServiceDeploymentVersionContainerArgs] {
	return pulumix.Val(i)
}

type ContainerServiceDeploymentVersionContainerOutput struct{ *pulumi.OutputState }

func (ContainerServiceDeploymentVersionContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceDeploymentVersionContainer)(nil)).Elem()
}

func (o ContainerServiceDeploymentVersionContainerOutput) ToContainerServiceDeploymentVersionContainerOutput() ContainerServiceDeploymentVersionContainerOutput {
	return o
}

func (o ContainerServiceDeploymentVersionContainerOutput) ToContainerServiceDeploymentVersionContainerOutputWithContext(ctx context.Context) ContainerServiceDeploymentVersionContainerOutput {
	return o
}

func (o ContainerServiceDeploymentVersionContainerOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServiceDeploymentVersionContainer] {
	return pulumix.Output[ContainerServiceDeploymentVersionContainer]{
		OutputState: o.OutputState,
	}
}

// The launch command for the container. A list of string.
func (o ContainerServiceDeploymentVersionContainerOutput) Commands() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ContainerServiceDeploymentVersionContainer](o, func(v ContainerServiceDeploymentVersionContainer) []string { return v.Commands })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name for the container.
func (o ContainerServiceDeploymentVersionContainerOutput) ContainerName() pulumix.Output[string] {
	return pulumix.Apply[ContainerServiceDeploymentVersionContainer](o, func(v ContainerServiceDeploymentVersionContainer) string { return v.ContainerName })
}

// A key-value map of the environment variables of the container.
func (o ContainerServiceDeploymentVersionContainerOutput) Environment() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContainerServiceDeploymentVersionContainer](o, func(v ContainerServiceDeploymentVersionContainer) map[string]string { return v.Environment })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
func (o ContainerServiceDeploymentVersionContainerOutput) Image() pulumix.Output[string] {
	return pulumix.Apply[ContainerServiceDeploymentVersionContainer](o, func(v ContainerServiceDeploymentVersionContainer) string { return v.Image })
}

// A key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
func (o ContainerServiceDeploymentVersionContainerOutput) Ports() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContainerServiceDeploymentVersionContainer](o, func(v ContainerServiceDeploymentVersionContainer) map[string]string { return v.Ports })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type ContainerServiceDeploymentVersionPublicEndpoint struct {
	// The name of the container for the endpoint.
	ContainerName string `pulumi:"containerName"`
	// The port of the container to which traffic is forwarded to.
	ContainerPort int `pulumi:"containerPort"`
	// A configuration block that describes the health check configuration of the container. Detailed below.
	HealthCheck ContainerServiceDeploymentVersionPublicEndpointHealthCheck `pulumi:"healthCheck"`
}

type ContainerServiceDeploymentVersionPublicEndpointArgs struct {
	// The name of the container for the endpoint.
	ContainerName pulumix.Input[string] `pulumi:"containerName"`
	// The port of the container to which traffic is forwarded to.
	ContainerPort pulumix.Input[int] `pulumi:"containerPort"`
	// A configuration block that describes the health check configuration of the container. Detailed below.
	HealthCheck pulumix.Input[*ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs] `pulumi:"healthCheck"`
}

func (ContainerServiceDeploymentVersionPublicEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceDeploymentVersionPublicEndpoint)(nil)).Elem()
}

func (i ContainerServiceDeploymentVersionPublicEndpointArgs) ToContainerServiceDeploymentVersionPublicEndpointOutput() ContainerServiceDeploymentVersionPublicEndpointOutput {
	return i.ToContainerServiceDeploymentVersionPublicEndpointOutputWithContext(context.Background())
}

func (i ContainerServiceDeploymentVersionPublicEndpointArgs) ToContainerServiceDeploymentVersionPublicEndpointOutputWithContext(ctx context.Context) ContainerServiceDeploymentVersionPublicEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceDeploymentVersionPublicEndpointOutput)
}

func (i *ContainerServiceDeploymentVersionPublicEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServiceDeploymentVersionPublicEndpointArgs] {
	return pulumix.Val(i)
}

type ContainerServiceDeploymentVersionPublicEndpointOutput struct{ *pulumi.OutputState }

func (ContainerServiceDeploymentVersionPublicEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceDeploymentVersionPublicEndpoint)(nil)).Elem()
}

func (o ContainerServiceDeploymentVersionPublicEndpointOutput) ToContainerServiceDeploymentVersionPublicEndpointOutput() ContainerServiceDeploymentVersionPublicEndpointOutput {
	return o
}

func (o ContainerServiceDeploymentVersionPublicEndpointOutput) ToContainerServiceDeploymentVersionPublicEndpointOutputWithContext(ctx context.Context) ContainerServiceDeploymentVersionPublicEndpointOutput {
	return o
}

func (o ContainerServiceDeploymentVersionPublicEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServiceDeploymentVersionPublicEndpoint] {
	return pulumix.Output[ContainerServiceDeploymentVersionPublicEndpoint]{
		OutputState: o.OutputState,
	}
}

// The name of the container for the endpoint.
func (o ContainerServiceDeploymentVersionPublicEndpointOutput) ContainerName() pulumix.Output[string] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpoint](o, func(v ContainerServiceDeploymentVersionPublicEndpoint) string { return v.ContainerName })
}

// The port of the container to which traffic is forwarded to.
func (o ContainerServiceDeploymentVersionPublicEndpointOutput) ContainerPort() pulumix.Output[int] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpoint](o, func(v ContainerServiceDeploymentVersionPublicEndpoint) int { return v.ContainerPort })
}

// A configuration block that describes the health check configuration of the container. Detailed below.
func (o ContainerServiceDeploymentVersionPublicEndpointOutput) HealthCheck() pulumix.GPtrOutput[ContainerServiceDeploymentVersionPublicEndpointHealthCheck, ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput] {
	value := pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpoint](o, func(v ContainerServiceDeploymentVersionPublicEndpoint) ContainerServiceDeploymentVersionPublicEndpointHealthCheck {
		return v.HealthCheck
	})
	return pulumix.GPtrOutput[ContainerServiceDeploymentVersionPublicEndpointHealthCheck, ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput]{OutputState: value.OutputState}
}

type ContainerServiceDeploymentVersionPublicEndpointHealthCheck struct {
	// The number of consecutive health checks successes required before moving the container to the Healthy state. Defaults to 2.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
	IntervalSeconds *int `pulumi:"intervalSeconds"`
	// The path on the container on which to perform the health check. Defaults to "/".
	Path *string `pulumi:"path"`
	// The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
	SuccessCodes *string `pulumi:"successCodes"`
	// The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// The number of consecutive health checks failures required before moving the container to the Unhealthy state. Defaults to 2.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs struct {
	// The number of consecutive health checks successes required before moving the container to the Healthy state. Defaults to 2.
	HealthyThreshold pulumix.Input[*int] `pulumi:"healthyThreshold"`
	// The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
	IntervalSeconds pulumix.Input[*int] `pulumi:"intervalSeconds"`
	// The path on the container on which to perform the health check. Defaults to "/".
	Path pulumix.Input[*string] `pulumi:"path"`
	// The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
	SuccessCodes pulumix.Input[*string] `pulumi:"successCodes"`
	// The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
	TimeoutSeconds pulumix.Input[*int] `pulumi:"timeoutSeconds"`
	// The number of consecutive health checks failures required before moving the container to the Unhealthy state. Defaults to 2.
	UnhealthyThreshold pulumix.Input[*int] `pulumi:"unhealthyThreshold"`
}

func (ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceDeploymentVersionPublicEndpointHealthCheck)(nil)).Elem()
}

func (i ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs) ToContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput() ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput {
	return i.ToContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputWithContext(context.Background())
}

func (i ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs) ToContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputWithContext(ctx context.Context) ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput)
}

func (i *ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServiceDeploymentVersionPublicEndpointHealthCheckArgs] {
	return pulumix.Val(i)
}

type ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput struct{ *pulumi.OutputState }

func (ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceDeploymentVersionPublicEndpointHealthCheck)(nil)).Elem()
}

func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) ToContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput() ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput {
	return o
}

func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) ToContainerServiceDeploymentVersionPublicEndpointHealthCheckOutputWithContext(ctx context.Context) ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput {
	return o
}

func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServiceDeploymentVersionPublicEndpointHealthCheck] {
	return pulumix.Output[ContainerServiceDeploymentVersionPublicEndpointHealthCheck]{
		OutputState: o.OutputState,
	}
}

// The number of consecutive health checks successes required before moving the container to the Healthy state. Defaults to 2.
func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) HealthyThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpointHealthCheck](o, func(v ContainerServiceDeploymentVersionPublicEndpointHealthCheck) *int { return v.HealthyThreshold })
}

// The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. Defaults to 5.
func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) IntervalSeconds() pulumix.Output[*int] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpointHealthCheck](o, func(v ContainerServiceDeploymentVersionPublicEndpointHealthCheck) *int { return v.IntervalSeconds })
}

// The path on the container on which to perform the health check. Defaults to "/".
func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpointHealthCheck](o, func(v ContainerServiceDeploymentVersionPublicEndpointHealthCheck) *string { return v.Path })
}

// The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. Defaults to "200-499".
func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) SuccessCodes() pulumix.Output[*string] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpointHealthCheck](o, func(v ContainerServiceDeploymentVersionPublicEndpointHealthCheck) *string { return v.SuccessCodes })
}

// The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. Defaults to 2.
func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) TimeoutSeconds() pulumix.Output[*int] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpointHealthCheck](o, func(v ContainerServiceDeploymentVersionPublicEndpointHealthCheck) *int { return v.TimeoutSeconds })
}

// The number of consecutive health checks failures required before moving the container to the Unhealthy state. Defaults to 2.
func (o ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput) UnhealthyThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ContainerServiceDeploymentVersionPublicEndpointHealthCheck](o, func(v ContainerServiceDeploymentVersionPublicEndpointHealthCheck) *int { return v.UnhealthyThreshold })
}

type ContainerServicePrivateRegistryAccess struct {
	// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
	EcrImagePullerRole *ContainerServicePrivateRegistryAccessEcrImagePullerRole `pulumi:"ecrImagePullerRole"`
}

type ContainerServicePrivateRegistryAccessArgs struct {
	// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
	EcrImagePullerRole pulumix.Input[*ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs] `pulumi:"ecrImagePullerRole"`
}

func (ContainerServicePrivateRegistryAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePrivateRegistryAccess)(nil)).Elem()
}

func (i ContainerServicePrivateRegistryAccessArgs) ToContainerServicePrivateRegistryAccessOutput() ContainerServicePrivateRegistryAccessOutput {
	return i.ToContainerServicePrivateRegistryAccessOutputWithContext(context.Background())
}

func (i ContainerServicePrivateRegistryAccessArgs) ToContainerServicePrivateRegistryAccessOutputWithContext(ctx context.Context) ContainerServicePrivateRegistryAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServicePrivateRegistryAccessOutput)
}

func (i *ContainerServicePrivateRegistryAccessArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServicePrivateRegistryAccessArgs] {
	return pulumix.Val(i)
}

type ContainerServicePrivateRegistryAccessOutput struct{ *pulumi.OutputState }

func (ContainerServicePrivateRegistryAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePrivateRegistryAccess)(nil)).Elem()
}

func (o ContainerServicePrivateRegistryAccessOutput) ToContainerServicePrivateRegistryAccessOutput() ContainerServicePrivateRegistryAccessOutput {
	return o
}

func (o ContainerServicePrivateRegistryAccessOutput) ToContainerServicePrivateRegistryAccessOutputWithContext(ctx context.Context) ContainerServicePrivateRegistryAccessOutput {
	return o
}

func (o ContainerServicePrivateRegistryAccessOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServicePrivateRegistryAccess] {
	return pulumix.Output[ContainerServicePrivateRegistryAccess]{
		OutputState: o.OutputState,
	}
}

// Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See ECR Image Puller Role below for more details.
func (o ContainerServicePrivateRegistryAccessOutput) EcrImagePullerRole() pulumix.GPtrOutput[ContainerServicePrivateRegistryAccessEcrImagePullerRole, ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput] {
	value := pulumix.Apply[ContainerServicePrivateRegistryAccess](o, func(v ContainerServicePrivateRegistryAccess) *ContainerServicePrivateRegistryAccessEcrImagePullerRole {
		return v.EcrImagePullerRole
	})
	return pulumix.GPtrOutput[ContainerServicePrivateRegistryAccessEcrImagePullerRole, ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput]{OutputState: value.OutputState}
}

type ContainerServicePrivateRegistryAccessEcrImagePullerRole struct {
	// A Boolean value that indicates whether to activate the role. The default is `false`.
	IsActive *bool `pulumi:"isActive"`
	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	PrincipalArn *string `pulumi:"principalArn"`
}

type ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs struct {
	// A Boolean value that indicates whether to activate the role. The default is `false`.
	IsActive pulumix.Input[*bool] `pulumi:"isActive"`
	// The principal ARN of the container service. The principal ARN can be used to create a trust
	// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
	// service permission to access resources in your standard AWS account.
	PrincipalArn pulumix.Input[*string] `pulumi:"principalArn"`
}

func (ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePrivateRegistryAccessEcrImagePullerRole)(nil)).Elem()
}

func (i ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs) ToContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput() ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput {
	return i.ToContainerServicePrivateRegistryAccessEcrImagePullerRoleOutputWithContext(context.Background())
}

func (i ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs) ToContainerServicePrivateRegistryAccessEcrImagePullerRoleOutputWithContext(ctx context.Context) ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput)
}

func (i *ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs] {
	return pulumix.Val(i)
}

type ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput struct{ *pulumi.OutputState }

func (ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePrivateRegistryAccessEcrImagePullerRole)(nil)).Elem()
}

func (o ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput) ToContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput() ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput {
	return o
}

func (o ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput) ToContainerServicePrivateRegistryAccessEcrImagePullerRoleOutputWithContext(ctx context.Context) ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput {
	return o
}

func (o ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServicePrivateRegistryAccessEcrImagePullerRole] {
	return pulumix.Output[ContainerServicePrivateRegistryAccessEcrImagePullerRole]{
		OutputState: o.OutputState,
	}
}

// A Boolean value that indicates whether to activate the role. The default is `false`.
func (o ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput) IsActive() pulumix.Output[*bool] {
	return pulumix.Apply[ContainerServicePrivateRegistryAccessEcrImagePullerRole](o, func(v ContainerServicePrivateRegistryAccessEcrImagePullerRole) *bool { return v.IsActive })
}

// The principal ARN of the container service. The principal ARN can be used to create a trust
// relationship between your standard AWS account and your Lightsail container service. This allows you to give your
// service permission to access resources in your standard AWS account.
func (o ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput) PrincipalArn() pulumix.Output[*string] {
	return pulumix.Apply[ContainerServicePrivateRegistryAccessEcrImagePullerRole](o, func(v ContainerServicePrivateRegistryAccessEcrImagePullerRole) *string { return v.PrincipalArn })
}

type ContainerServicePublicDomainNames struct {
	Certificates []ContainerServicePublicDomainNamesCertificate `pulumi:"certificates"`
}

type ContainerServicePublicDomainNamesArgs struct {
	Certificates pulumix.Input[[]*ContainerServicePublicDomainNamesCertificateArgs] `pulumi:"certificates"`
}

func (ContainerServicePublicDomainNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePublicDomainNames)(nil)).Elem()
}

func (i ContainerServicePublicDomainNamesArgs) ToContainerServicePublicDomainNamesOutput() ContainerServicePublicDomainNamesOutput {
	return i.ToContainerServicePublicDomainNamesOutputWithContext(context.Background())
}

func (i ContainerServicePublicDomainNamesArgs) ToContainerServicePublicDomainNamesOutputWithContext(ctx context.Context) ContainerServicePublicDomainNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServicePublicDomainNamesOutput)
}

func (i *ContainerServicePublicDomainNamesArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServicePublicDomainNamesArgs] {
	return pulumix.Val(i)
}

type ContainerServicePublicDomainNamesOutput struct{ *pulumi.OutputState }

func (ContainerServicePublicDomainNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePublicDomainNames)(nil)).Elem()
}

func (o ContainerServicePublicDomainNamesOutput) ToContainerServicePublicDomainNamesOutput() ContainerServicePublicDomainNamesOutput {
	return o
}

func (o ContainerServicePublicDomainNamesOutput) ToContainerServicePublicDomainNamesOutputWithContext(ctx context.Context) ContainerServicePublicDomainNamesOutput {
	return o
}

func (o ContainerServicePublicDomainNamesOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServicePublicDomainNames] {
	return pulumix.Output[ContainerServicePublicDomainNames]{
		OutputState: o.OutputState,
	}
}

func (o ContainerServicePublicDomainNamesOutput) Certificates() pulumix.GArrayOutput[ContainerServicePublicDomainNamesCertificate, ContainerServicePublicDomainNamesCertificateOutput] {
	value := pulumix.Apply[ContainerServicePublicDomainNames](o, func(v ContainerServicePublicDomainNames) []ContainerServicePublicDomainNamesCertificate {
		return v.Certificates
	})
	return pulumix.GArrayOutput[ContainerServicePublicDomainNamesCertificate, ContainerServicePublicDomainNamesCertificateOutput]{OutputState: value.OutputState}
}

type ContainerServicePublicDomainNamesCertificate struct {
	CertificateName string   `pulumi:"certificateName"`
	DomainNames     []string `pulumi:"domainNames"`
}

type ContainerServicePublicDomainNamesCertificateArgs struct {
	CertificateName pulumix.Input[string]   `pulumi:"certificateName"`
	DomainNames     pulumix.Input[[]string] `pulumi:"domainNames"`
}

func (ContainerServicePublicDomainNamesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePublicDomainNamesCertificate)(nil)).Elem()
}

func (i ContainerServicePublicDomainNamesCertificateArgs) ToContainerServicePublicDomainNamesCertificateOutput() ContainerServicePublicDomainNamesCertificateOutput {
	return i.ToContainerServicePublicDomainNamesCertificateOutputWithContext(context.Background())
}

func (i ContainerServicePublicDomainNamesCertificateArgs) ToContainerServicePublicDomainNamesCertificateOutputWithContext(ctx context.Context) ContainerServicePublicDomainNamesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServicePublicDomainNamesCertificateOutput)
}

func (i *ContainerServicePublicDomainNamesCertificateArgs) ToOutput(ctx context.Context) pulumix.Output[*ContainerServicePublicDomainNamesCertificateArgs] {
	return pulumix.Val(i)
}

type ContainerServicePublicDomainNamesCertificateOutput struct{ *pulumi.OutputState }

func (ContainerServicePublicDomainNamesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServicePublicDomainNamesCertificate)(nil)).Elem()
}

func (o ContainerServicePublicDomainNamesCertificateOutput) ToContainerServicePublicDomainNamesCertificateOutput() ContainerServicePublicDomainNamesCertificateOutput {
	return o
}

func (o ContainerServicePublicDomainNamesCertificateOutput) ToContainerServicePublicDomainNamesCertificateOutputWithContext(ctx context.Context) ContainerServicePublicDomainNamesCertificateOutput {
	return o
}

func (o ContainerServicePublicDomainNamesCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerServicePublicDomainNamesCertificate] {
	return pulumix.Output[ContainerServicePublicDomainNamesCertificate]{
		OutputState: o.OutputState,
	}
}

func (o ContainerServicePublicDomainNamesCertificateOutput) CertificateName() pulumix.Output[string] {
	return pulumix.Apply[ContainerServicePublicDomainNamesCertificate](o, func(v ContainerServicePublicDomainNamesCertificate) string { return v.CertificateName })
}

func (o ContainerServicePublicDomainNamesCertificateOutput) DomainNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ContainerServicePublicDomainNamesCertificate](o, func(v ContainerServicePublicDomainNamesCertificate) []string { return v.DomainNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DistributionCacheBehavior struct {
	// The cache behavior for the specified path.
	Behavior string `pulumi:"behavior"`
	// The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/\*), and file types (\*.html, \*jpg, \*js). Directories and file paths are case-sensitive.
	Path string `pulumi:"path"`
}

type DistributionCacheBehaviorArgs struct {
	// The cache behavior for the specified path.
	Behavior pulumix.Input[string] `pulumi:"behavior"`
	// The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/\*), and file types (\*.html, \*jpg, \*js). Directories and file paths are case-sensitive.
	Path pulumix.Input[string] `pulumi:"path"`
}

func (DistributionCacheBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehavior)(nil)).Elem()
}

func (i DistributionCacheBehaviorArgs) ToDistributionCacheBehaviorOutput() DistributionCacheBehaviorOutput {
	return i.ToDistributionCacheBehaviorOutputWithContext(context.Background())
}

func (i DistributionCacheBehaviorArgs) ToDistributionCacheBehaviorOutputWithContext(ctx context.Context) DistributionCacheBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionCacheBehaviorOutput)
}

func (i *DistributionCacheBehaviorArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionCacheBehaviorArgs] {
	return pulumix.Val(i)
}

type DistributionCacheBehaviorOutput struct{ *pulumi.OutputState }

func (DistributionCacheBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehavior)(nil)).Elem()
}

func (o DistributionCacheBehaviorOutput) ToDistributionCacheBehaviorOutput() DistributionCacheBehaviorOutput {
	return o
}

func (o DistributionCacheBehaviorOutput) ToDistributionCacheBehaviorOutputWithContext(ctx context.Context) DistributionCacheBehaviorOutput {
	return o
}

func (o DistributionCacheBehaviorOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionCacheBehavior] {
	return pulumix.Output[DistributionCacheBehavior]{
		OutputState: o.OutputState,
	}
}

// The cache behavior for the specified path.
func (o DistributionCacheBehaviorOutput) Behavior() pulumix.Output[string] {
	return pulumix.Apply[DistributionCacheBehavior](o, func(v DistributionCacheBehavior) string { return v.Behavior })
}

// The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/\*), and file types (\*.html, \*jpg, \*js). Directories and file paths are case-sensitive.
func (o DistributionCacheBehaviorOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[DistributionCacheBehavior](o, func(v DistributionCacheBehavior) string { return v.Path })
}

type DistributionCacheBehaviorSettings struct {
	// The HTTP methods that are processed and forwarded to the distribution's origin.
	AllowedHttpMethods *string `pulumi:"allowedHttpMethods"`
	// The HTTP method responses that are cached by your distribution.
	CachedHttpMethods *string `pulumi:"cachedHttpMethods"`
	// The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. Detailed below
	ForwardedCookies *DistributionCacheBehaviorSettingsForwardedCookies `pulumi:"forwardedCookies"`
	// An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. Detailed below
	ForwardedHeaders *DistributionCacheBehaviorSettingsForwardedHeaders `pulumi:"forwardedHeaders"`
	// An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. Detailed below
	ForwardedQueryStrings *DistributionCacheBehaviorSettingsForwardedQueryStrings `pulumi:"forwardedQueryStrings"`
	// The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
	MaximumTtl *int `pulumi:"maximumTtl"`
	// The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
	MinimumTtl *int `pulumi:"minimumTtl"`
}

type DistributionCacheBehaviorSettingsArgs struct {
	// The HTTP methods that are processed and forwarded to the distribution's origin.
	AllowedHttpMethods pulumix.Input[*string] `pulumi:"allowedHttpMethods"`
	// The HTTP method responses that are cached by your distribution.
	CachedHttpMethods pulumix.Input[*string] `pulumi:"cachedHttpMethods"`
	// The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
	DefaultTtl pulumix.Input[*int] `pulumi:"defaultTtl"`
	// An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. Detailed below
	ForwardedCookies pulumix.Input[*DistributionCacheBehaviorSettingsForwardedCookiesArgs] `pulumi:"forwardedCookies"`
	// An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. Detailed below
	ForwardedHeaders pulumix.Input[*DistributionCacheBehaviorSettingsForwardedHeadersArgs] `pulumi:"forwardedHeaders"`
	// An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. Detailed below
	ForwardedQueryStrings pulumix.Input[*DistributionCacheBehaviorSettingsForwardedQueryStringsArgs] `pulumi:"forwardedQueryStrings"`
	// The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
	MaximumTtl pulumix.Input[*int] `pulumi:"maximumTtl"`
	// The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
	MinimumTtl pulumix.Input[*int] `pulumi:"minimumTtl"`
}

func (DistributionCacheBehaviorSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettings)(nil)).Elem()
}

func (i DistributionCacheBehaviorSettingsArgs) ToDistributionCacheBehaviorSettingsOutput() DistributionCacheBehaviorSettingsOutput {
	return i.ToDistributionCacheBehaviorSettingsOutputWithContext(context.Background())
}

func (i DistributionCacheBehaviorSettingsArgs) ToDistributionCacheBehaviorSettingsOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionCacheBehaviorSettingsOutput)
}

func (i *DistributionCacheBehaviorSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionCacheBehaviorSettingsArgs] {
	return pulumix.Val(i)
}

type DistributionCacheBehaviorSettingsOutput struct{ *pulumi.OutputState }

func (DistributionCacheBehaviorSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettings)(nil)).Elem()
}

func (o DistributionCacheBehaviorSettingsOutput) ToDistributionCacheBehaviorSettingsOutput() DistributionCacheBehaviorSettingsOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsOutput) ToDistributionCacheBehaviorSettingsOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionCacheBehaviorSettings] {
	return pulumix.Output[DistributionCacheBehaviorSettings]{
		OutputState: o.OutputState,
	}
}

// The HTTP methods that are processed and forwarded to the distribution's origin.
func (o DistributionCacheBehaviorSettingsOutput) AllowedHttpMethods() pulumix.Output[*string] {
	return pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *string { return v.AllowedHttpMethods })
}

// The HTTP method responses that are cached by your distribution.
func (o DistributionCacheBehaviorSettingsOutput) CachedHttpMethods() pulumix.Output[*string] {
	return pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *string { return v.CachedHttpMethods })
}

// The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
func (o DistributionCacheBehaviorSettingsOutput) DefaultTtl() pulumix.Output[*int] {
	return pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *int { return v.DefaultTtl })
}

// An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded. Detailed below
func (o DistributionCacheBehaviorSettingsOutput) ForwardedCookies() pulumix.GPtrOutput[DistributionCacheBehaviorSettingsForwardedCookies, DistributionCacheBehaviorSettingsForwardedCookiesOutput] {
	value := pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *DistributionCacheBehaviorSettingsForwardedCookies {
		return v.ForwardedCookies
	})
	return pulumix.GPtrOutput[DistributionCacheBehaviorSettingsForwardedCookies, DistributionCacheBehaviorSettingsForwardedCookiesOutput]{OutputState: value.OutputState}
}

// An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded. Detailed below
func (o DistributionCacheBehaviorSettingsOutput) ForwardedHeaders() pulumix.GPtrOutput[DistributionCacheBehaviorSettingsForwardedHeaders, DistributionCacheBehaviorSettingsForwardedHeadersOutput] {
	value := pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *DistributionCacheBehaviorSettingsForwardedHeaders {
		return v.ForwardedHeaders
	})
	return pulumix.GPtrOutput[DistributionCacheBehaviorSettingsForwardedHeaders, DistributionCacheBehaviorSettingsForwardedHeadersOutput]{OutputState: value.OutputState}
}

// An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded. Detailed below
func (o DistributionCacheBehaviorSettingsOutput) ForwardedQueryStrings() pulumix.GPtrOutput[DistributionCacheBehaviorSettingsForwardedQueryStrings, DistributionCacheBehaviorSettingsForwardedQueryStringsOutput] {
	value := pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *DistributionCacheBehaviorSettingsForwardedQueryStrings {
		return v.ForwardedQueryStrings
	})
	return pulumix.GPtrOutput[DistributionCacheBehaviorSettingsForwardedQueryStrings, DistributionCacheBehaviorSettingsForwardedQueryStringsOutput]{OutputState: value.OutputState}
}

// The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
func (o DistributionCacheBehaviorSettingsOutput) MaximumTtl() pulumix.Output[*int] {
	return pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *int { return v.MaximumTtl })
}

// The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
func (o DistributionCacheBehaviorSettingsOutput) MinimumTtl() pulumix.Output[*int] {
	return pulumix.Apply[DistributionCacheBehaviorSettings](o, func(v DistributionCacheBehaviorSettings) *int { return v.MinimumTtl })
}

type DistributionCacheBehaviorSettingsForwardedCookies struct {
	// The specific cookies to forward to your distribution's origin.
	CookiesAllowLists []string `pulumi:"cookiesAllowLists"`
	// Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
	Option *string `pulumi:"option"`
}

type DistributionCacheBehaviorSettingsForwardedCookiesArgs struct {
	// The specific cookies to forward to your distribution's origin.
	CookiesAllowLists pulumix.Input[[]string] `pulumi:"cookiesAllowLists"`
	// Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
	Option pulumix.Input[*string] `pulumi:"option"`
}

func (DistributionCacheBehaviorSettingsForwardedCookiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettingsForwardedCookies)(nil)).Elem()
}

func (i DistributionCacheBehaviorSettingsForwardedCookiesArgs) ToDistributionCacheBehaviorSettingsForwardedCookiesOutput() DistributionCacheBehaviorSettingsForwardedCookiesOutput {
	return i.ToDistributionCacheBehaviorSettingsForwardedCookiesOutputWithContext(context.Background())
}

func (i DistributionCacheBehaviorSettingsForwardedCookiesArgs) ToDistributionCacheBehaviorSettingsForwardedCookiesOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsForwardedCookiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionCacheBehaviorSettingsForwardedCookiesOutput)
}

func (i *DistributionCacheBehaviorSettingsForwardedCookiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionCacheBehaviorSettingsForwardedCookiesArgs] {
	return pulumix.Val(i)
}

type DistributionCacheBehaviorSettingsForwardedCookiesOutput struct{ *pulumi.OutputState }

func (DistributionCacheBehaviorSettingsForwardedCookiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettingsForwardedCookies)(nil)).Elem()
}

func (o DistributionCacheBehaviorSettingsForwardedCookiesOutput) ToDistributionCacheBehaviorSettingsForwardedCookiesOutput() DistributionCacheBehaviorSettingsForwardedCookiesOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsForwardedCookiesOutput) ToDistributionCacheBehaviorSettingsForwardedCookiesOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsForwardedCookiesOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsForwardedCookiesOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionCacheBehaviorSettingsForwardedCookies] {
	return pulumix.Output[DistributionCacheBehaviorSettingsForwardedCookies]{
		OutputState: o.OutputState,
	}
}

// The specific cookies to forward to your distribution's origin.
func (o DistributionCacheBehaviorSettingsForwardedCookiesOutput) CookiesAllowLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionCacheBehaviorSettingsForwardedCookies](o, func(v DistributionCacheBehaviorSettingsForwardedCookies) []string { return v.CookiesAllowLists })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
func (o DistributionCacheBehaviorSettingsForwardedCookiesOutput) Option() pulumix.Output[*string] {
	return pulumix.Apply[DistributionCacheBehaviorSettingsForwardedCookies](o, func(v DistributionCacheBehaviorSettingsForwardedCookies) *string { return v.Option })
}

type DistributionCacheBehaviorSettingsForwardedHeaders struct {
	// The specific headers to forward to your distribution's origin.
	HeadersAllowLists []string `pulumi:"headersAllowLists"`
	// The headers that you want your distribution to forward to your origin and base caching on.
	Option *string `pulumi:"option"`
}

type DistributionCacheBehaviorSettingsForwardedHeadersArgs struct {
	// The specific headers to forward to your distribution's origin.
	HeadersAllowLists pulumix.Input[[]string] `pulumi:"headersAllowLists"`
	// The headers that you want your distribution to forward to your origin and base caching on.
	Option pulumix.Input[*string] `pulumi:"option"`
}

func (DistributionCacheBehaviorSettingsForwardedHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettingsForwardedHeaders)(nil)).Elem()
}

func (i DistributionCacheBehaviorSettingsForwardedHeadersArgs) ToDistributionCacheBehaviorSettingsForwardedHeadersOutput() DistributionCacheBehaviorSettingsForwardedHeadersOutput {
	return i.ToDistributionCacheBehaviorSettingsForwardedHeadersOutputWithContext(context.Background())
}

func (i DistributionCacheBehaviorSettingsForwardedHeadersArgs) ToDistributionCacheBehaviorSettingsForwardedHeadersOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsForwardedHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionCacheBehaviorSettingsForwardedHeadersOutput)
}

func (i *DistributionCacheBehaviorSettingsForwardedHeadersArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionCacheBehaviorSettingsForwardedHeadersArgs] {
	return pulumix.Val(i)
}

type DistributionCacheBehaviorSettingsForwardedHeadersOutput struct{ *pulumi.OutputState }

func (DistributionCacheBehaviorSettingsForwardedHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettingsForwardedHeaders)(nil)).Elem()
}

func (o DistributionCacheBehaviorSettingsForwardedHeadersOutput) ToDistributionCacheBehaviorSettingsForwardedHeadersOutput() DistributionCacheBehaviorSettingsForwardedHeadersOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsForwardedHeadersOutput) ToDistributionCacheBehaviorSettingsForwardedHeadersOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsForwardedHeadersOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsForwardedHeadersOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionCacheBehaviorSettingsForwardedHeaders] {
	return pulumix.Output[DistributionCacheBehaviorSettingsForwardedHeaders]{
		OutputState: o.OutputState,
	}
}

// The specific headers to forward to your distribution's origin.
func (o DistributionCacheBehaviorSettingsForwardedHeadersOutput) HeadersAllowLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionCacheBehaviorSettingsForwardedHeaders](o, func(v DistributionCacheBehaviorSettingsForwardedHeaders) []string { return v.HeadersAllowLists })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The headers that you want your distribution to forward to your origin and base caching on.
func (o DistributionCacheBehaviorSettingsForwardedHeadersOutput) Option() pulumix.Output[*string] {
	return pulumix.Apply[DistributionCacheBehaviorSettingsForwardedHeaders](o, func(v DistributionCacheBehaviorSettingsForwardedHeaders) *string { return v.Option })
}

type DistributionCacheBehaviorSettingsForwardedQueryStrings struct {
	// Indicates whether the distribution forwards and caches based on query strings.
	Option *bool `pulumi:"option"`
	// The specific query strings that the distribution forwards to the origin.
	QueryStringsAllowedLists []string `pulumi:"queryStringsAllowedLists"`
}

type DistributionCacheBehaviorSettingsForwardedQueryStringsArgs struct {
	// Indicates whether the distribution forwards and caches based on query strings.
	Option pulumix.Input[*bool] `pulumi:"option"`
	// The specific query strings that the distribution forwards to the origin.
	QueryStringsAllowedLists pulumix.Input[[]string] `pulumi:"queryStringsAllowedLists"`
}

func (DistributionCacheBehaviorSettingsForwardedQueryStringsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettingsForwardedQueryStrings)(nil)).Elem()
}

func (i DistributionCacheBehaviorSettingsForwardedQueryStringsArgs) ToDistributionCacheBehaviorSettingsForwardedQueryStringsOutput() DistributionCacheBehaviorSettingsForwardedQueryStringsOutput {
	return i.ToDistributionCacheBehaviorSettingsForwardedQueryStringsOutputWithContext(context.Background())
}

func (i DistributionCacheBehaviorSettingsForwardedQueryStringsArgs) ToDistributionCacheBehaviorSettingsForwardedQueryStringsOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsForwardedQueryStringsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionCacheBehaviorSettingsForwardedQueryStringsOutput)
}

func (i *DistributionCacheBehaviorSettingsForwardedQueryStringsArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionCacheBehaviorSettingsForwardedQueryStringsArgs] {
	return pulumix.Val(i)
}

type DistributionCacheBehaviorSettingsForwardedQueryStringsOutput struct{ *pulumi.OutputState }

func (DistributionCacheBehaviorSettingsForwardedQueryStringsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionCacheBehaviorSettingsForwardedQueryStrings)(nil)).Elem()
}

func (o DistributionCacheBehaviorSettingsForwardedQueryStringsOutput) ToDistributionCacheBehaviorSettingsForwardedQueryStringsOutput() DistributionCacheBehaviorSettingsForwardedQueryStringsOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsForwardedQueryStringsOutput) ToDistributionCacheBehaviorSettingsForwardedQueryStringsOutputWithContext(ctx context.Context) DistributionCacheBehaviorSettingsForwardedQueryStringsOutput {
	return o
}

func (o DistributionCacheBehaviorSettingsForwardedQueryStringsOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionCacheBehaviorSettingsForwardedQueryStrings] {
	return pulumix.Output[DistributionCacheBehaviorSettingsForwardedQueryStrings]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the distribution forwards and caches based on query strings.
func (o DistributionCacheBehaviorSettingsForwardedQueryStringsOutput) Option() pulumix.Output[*bool] {
	return pulumix.Apply[DistributionCacheBehaviorSettingsForwardedQueryStrings](o, func(v DistributionCacheBehaviorSettingsForwardedQueryStrings) *bool { return v.Option })
}

// The specific query strings that the distribution forwards to the origin.
func (o DistributionCacheBehaviorSettingsForwardedQueryStringsOutput) QueryStringsAllowedLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DistributionCacheBehaviorSettingsForwardedQueryStrings](o, func(v DistributionCacheBehaviorSettingsForwardedQueryStrings) []string {
		return v.QueryStringsAllowedLists
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DistributionDefaultCacheBehavior struct {
	// The cache behavior of the distribution. Valid values: `cache` and `dont-cache`.
	Behavior string `pulumi:"behavior"`
}

type DistributionDefaultCacheBehaviorArgs struct {
	// The cache behavior of the distribution. Valid values: `cache` and `dont-cache`.
	Behavior pulumix.Input[string] `pulumi:"behavior"`
}

func (DistributionDefaultCacheBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionDefaultCacheBehavior)(nil)).Elem()
}

func (i DistributionDefaultCacheBehaviorArgs) ToDistributionDefaultCacheBehaviorOutput() DistributionDefaultCacheBehaviorOutput {
	return i.ToDistributionDefaultCacheBehaviorOutputWithContext(context.Background())
}

func (i DistributionDefaultCacheBehaviorArgs) ToDistributionDefaultCacheBehaviorOutputWithContext(ctx context.Context) DistributionDefaultCacheBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionDefaultCacheBehaviorOutput)
}

func (i *DistributionDefaultCacheBehaviorArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionDefaultCacheBehaviorArgs] {
	return pulumix.Val(i)
}

type DistributionDefaultCacheBehaviorOutput struct{ *pulumi.OutputState }

func (DistributionDefaultCacheBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionDefaultCacheBehavior)(nil)).Elem()
}

func (o DistributionDefaultCacheBehaviorOutput) ToDistributionDefaultCacheBehaviorOutput() DistributionDefaultCacheBehaviorOutput {
	return o
}

func (o DistributionDefaultCacheBehaviorOutput) ToDistributionDefaultCacheBehaviorOutputWithContext(ctx context.Context) DistributionDefaultCacheBehaviorOutput {
	return o
}

func (o DistributionDefaultCacheBehaviorOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionDefaultCacheBehavior] {
	return pulumix.Output[DistributionDefaultCacheBehavior]{
		OutputState: o.OutputState,
	}
}

// The cache behavior of the distribution. Valid values: `cache` and `dont-cache`.
func (o DistributionDefaultCacheBehaviorOutput) Behavior() pulumix.Output[string] {
	return pulumix.Apply[DistributionDefaultCacheBehavior](o, func(v DistributionDefaultCacheBehavior) string { return v.Behavior })
}

type DistributionLocation struct {
	// The Availability Zone. Follows the format us-east-2a (case-sensitive).
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The AWS Region name of the origin resource.
	RegionName string `pulumi:"regionName"`
}

type DistributionLocationArgs struct {
	// The Availability Zone. Follows the format us-east-2a (case-sensitive).
	AvailabilityZone pulumix.Input[string] `pulumi:"availabilityZone"`
	// The AWS Region name of the origin resource.
	RegionName pulumix.Input[string] `pulumi:"regionName"`
}

func (DistributionLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionLocation)(nil)).Elem()
}

func (i DistributionLocationArgs) ToDistributionLocationOutput() DistributionLocationOutput {
	return i.ToDistributionLocationOutputWithContext(context.Background())
}

func (i DistributionLocationArgs) ToDistributionLocationOutputWithContext(ctx context.Context) DistributionLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionLocationOutput)
}

func (i *DistributionLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionLocationArgs] {
	return pulumix.Val(i)
}

type DistributionLocationOutput struct{ *pulumi.OutputState }

func (DistributionLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionLocation)(nil)).Elem()
}

func (o DistributionLocationOutput) ToDistributionLocationOutput() DistributionLocationOutput {
	return o
}

func (o DistributionLocationOutput) ToDistributionLocationOutputWithContext(ctx context.Context) DistributionLocationOutput {
	return o
}

func (o DistributionLocationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionLocation] {
	return pulumix.Output[DistributionLocation]{
		OutputState: o.OutputState,
	}
}

// The Availability Zone. Follows the format us-east-2a (case-sensitive).
func (o DistributionLocationOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[DistributionLocation](o, func(v DistributionLocation) string { return v.AvailabilityZone })
}

// The AWS Region name of the origin resource.
func (o DistributionLocationOutput) RegionName() pulumix.Output[string] {
	return pulumix.Apply[DistributionLocation](o, func(v DistributionLocation) string { return v.RegionName })
}

type DistributionOrigin struct {
	// The name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
	Name string `pulumi:"name"`
	// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
	ProtocolPolicy *string `pulumi:"protocolPolicy"`
	// The AWS Region name of the origin resource.
	RegionName string `pulumi:"regionName"`
	// The resource type of the origin resource (e.g., Instance).
	ResourceType *string `pulumi:"resourceType"`
}

type DistributionOriginArgs struct {
	// The name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
	Name pulumix.Input[string] `pulumi:"name"`
	// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
	ProtocolPolicy pulumix.Input[*string] `pulumi:"protocolPolicy"`
	// The AWS Region name of the origin resource.
	RegionName pulumix.Input[string] `pulumi:"regionName"`
	// The resource type of the origin resource (e.g., Instance).
	ResourceType pulumix.Input[*string] `pulumi:"resourceType"`
}

func (DistributionOriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionOrigin)(nil)).Elem()
}

func (i DistributionOriginArgs) ToDistributionOriginOutput() DistributionOriginOutput {
	return i.ToDistributionOriginOutputWithContext(context.Background())
}

func (i DistributionOriginArgs) ToDistributionOriginOutputWithContext(ctx context.Context) DistributionOriginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOriginOutput)
}

func (i *DistributionOriginArgs) ToOutput(ctx context.Context) pulumix.Output[*DistributionOriginArgs] {
	return pulumix.Val(i)
}

type DistributionOriginOutput struct{ *pulumi.OutputState }

func (DistributionOriginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionOrigin)(nil)).Elem()
}

func (o DistributionOriginOutput) ToDistributionOriginOutput() DistributionOriginOutput {
	return o
}

func (o DistributionOriginOutput) ToDistributionOriginOutputWithContext(ctx context.Context) DistributionOriginOutput {
	return o
}

func (o DistributionOriginOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionOrigin] {
	return pulumix.Output[DistributionOrigin]{
		OutputState: o.OutputState,
	}
}

// The name of the origin resource. Your origin can be an instance with an attached static IP, a bucket, or a load balancer that has at least one instance attached to it.
func (o DistributionOriginOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[DistributionOrigin](o, func(v DistributionOrigin) string { return v.Name })
}

// The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
func (o DistributionOriginOutput) ProtocolPolicy() pulumix.Output[*string] {
	return pulumix.Apply[DistributionOrigin](o, func(v DistributionOrigin) *string { return v.ProtocolPolicy })
}

// The AWS Region name of the origin resource.
func (o DistributionOriginOutput) RegionName() pulumix.Output[string] {
	return pulumix.Apply[DistributionOrigin](o, func(v DistributionOrigin) string { return v.RegionName })
}

// The resource type of the origin resource (e.g., Instance).
func (o DistributionOriginOutput) ResourceType() pulumix.Output[*string] {
	return pulumix.Apply[DistributionOrigin](o, func(v DistributionOrigin) *string { return v.ResourceType })
}

type InstanceAddOn struct {
	// The daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
	SnapshotTime string `pulumi:"snapshotTime"`
	// The status of the add on. Valid Values: `Enabled`, `Disabled`.
	Status string `pulumi:"status"`
	// The add-on type. There is currently only one valid type `AutoSnapshot`.
	Type string `pulumi:"type"`
}

type InstanceAddOnArgs struct {
	// The daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
	SnapshotTime pulumix.Input[string] `pulumi:"snapshotTime"`
	// The status of the add on. Valid Values: `Enabled`, `Disabled`.
	Status pulumix.Input[string] `pulumi:"status"`
	// The add-on type. There is currently only one valid type `AutoSnapshot`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (InstanceAddOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAddOn)(nil)).Elem()
}

func (i InstanceAddOnArgs) ToInstanceAddOnOutput() InstanceAddOnOutput {
	return i.ToInstanceAddOnOutputWithContext(context.Background())
}

func (i InstanceAddOnArgs) ToInstanceAddOnOutputWithContext(ctx context.Context) InstanceAddOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAddOnOutput)
}

func (i *InstanceAddOnArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceAddOnArgs] {
	return pulumix.Val(i)
}

type InstanceAddOnOutput struct{ *pulumi.OutputState }

func (InstanceAddOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAddOn)(nil)).Elem()
}

func (o InstanceAddOnOutput) ToInstanceAddOnOutput() InstanceAddOnOutput {
	return o
}

func (o InstanceAddOnOutput) ToInstanceAddOnOutputWithContext(ctx context.Context) InstanceAddOnOutput {
	return o
}

func (o InstanceAddOnOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceAddOn] {
	return pulumix.Output[InstanceAddOn]{
		OutputState: o.OutputState,
	}
}

// The daily time when an automatic snapshot will be created. Must be in HH:00 format, and in an hourly increment and specified in Coordinated Universal Time (UTC). The snapshot will be automatically created between the time specified and up to 45 minutes after.
func (o InstanceAddOnOutput) SnapshotTime() pulumix.Output[string] {
	return pulumix.Apply[InstanceAddOn](o, func(v InstanceAddOn) string { return v.SnapshotTime })
}

// The status of the add on. Valid Values: `Enabled`, `Disabled`.
func (o InstanceAddOnOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[InstanceAddOn](o, func(v InstanceAddOn) string { return v.Status })
}

// The add-on type. There is currently only one valid type `AutoSnapshot`.
func (o InstanceAddOnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[InstanceAddOn](o, func(v InstanceAddOn) string { return v.Type })
}

type InstancePublicPortsPortInfo struct {
	// Set of CIDR aliases that define access for a preconfigured range of IP addresses.
	CidrListAliases []string `pulumi:"cidrListAliases"`
	// Set of CIDR blocks.
	Cidrs []string `pulumi:"cidrs"`
	// First port in a range of open ports on an instance.
	FromPort  int      `pulumi:"fromPort"`
	Ipv6Cidrs []string `pulumi:"ipv6Cidrs"`
	// IP protocol name. Valid values are `tcp`, `all`, `udp`, and `icmp`.
	Protocol string `pulumi:"protocol"`
	// Last port in a range of open ports on an instance.
	//
	// The following arguments are optional:
	ToPort int `pulumi:"toPort"`
}

type InstancePublicPortsPortInfoArgs struct {
	// Set of CIDR aliases that define access for a preconfigured range of IP addresses.
	CidrListAliases pulumix.Input[[]string] `pulumi:"cidrListAliases"`
	// Set of CIDR blocks.
	Cidrs pulumix.Input[[]string] `pulumi:"cidrs"`
	// First port in a range of open ports on an instance.
	FromPort  pulumix.Input[int]      `pulumi:"fromPort"`
	Ipv6Cidrs pulumix.Input[[]string] `pulumi:"ipv6Cidrs"`
	// IP protocol name. Valid values are `tcp`, `all`, `udp`, and `icmp`.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
	// Last port in a range of open ports on an instance.
	//
	// The following arguments are optional:
	ToPort pulumix.Input[int] `pulumi:"toPort"`
}

func (InstancePublicPortsPortInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePublicPortsPortInfo)(nil)).Elem()
}

func (i InstancePublicPortsPortInfoArgs) ToInstancePublicPortsPortInfoOutput() InstancePublicPortsPortInfoOutput {
	return i.ToInstancePublicPortsPortInfoOutputWithContext(context.Background())
}

func (i InstancePublicPortsPortInfoArgs) ToInstancePublicPortsPortInfoOutputWithContext(ctx context.Context) InstancePublicPortsPortInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePublicPortsPortInfoOutput)
}

func (i *InstancePublicPortsPortInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*InstancePublicPortsPortInfoArgs] {
	return pulumix.Val(i)
}

type InstancePublicPortsPortInfoOutput struct{ *pulumi.OutputState }

func (InstancePublicPortsPortInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePublicPortsPortInfo)(nil)).Elem()
}

func (o InstancePublicPortsPortInfoOutput) ToInstancePublicPortsPortInfoOutput() InstancePublicPortsPortInfoOutput {
	return o
}

func (o InstancePublicPortsPortInfoOutput) ToInstancePublicPortsPortInfoOutputWithContext(ctx context.Context) InstancePublicPortsPortInfoOutput {
	return o
}

func (o InstancePublicPortsPortInfoOutput) ToOutput(ctx context.Context) pulumix.Output[InstancePublicPortsPortInfo] {
	return pulumix.Output[InstancePublicPortsPortInfo]{
		OutputState: o.OutputState,
	}
}

// Set of CIDR aliases that define access for a preconfigured range of IP addresses.
func (o InstancePublicPortsPortInfoOutput) CidrListAliases() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InstancePublicPortsPortInfo](o, func(v InstancePublicPortsPortInfo) []string { return v.CidrListAliases })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of CIDR blocks.
func (o InstancePublicPortsPortInfoOutput) Cidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InstancePublicPortsPortInfo](o, func(v InstancePublicPortsPortInfo) []string { return v.Cidrs })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// First port in a range of open ports on an instance.
func (o InstancePublicPortsPortInfoOutput) FromPort() pulumix.Output[int] {
	return pulumix.Apply[InstancePublicPortsPortInfo](o, func(v InstancePublicPortsPortInfo) int { return v.FromPort })
}

func (o InstancePublicPortsPortInfoOutput) Ipv6Cidrs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InstancePublicPortsPortInfo](o, func(v InstancePublicPortsPortInfo) []string { return v.Ipv6Cidrs })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// IP protocol name. Valid values are `tcp`, `all`, `udp`, and `icmp`.
func (o InstancePublicPortsPortInfoOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[InstancePublicPortsPortInfo](o, func(v InstancePublicPortsPortInfo) string { return v.Protocol })
}

// Last port in a range of open ports on an instance.
//
// The following arguments are optional:
func (o InstancePublicPortsPortInfoOutput) ToPort() pulumix.Output[int] {
	return pulumix.Apply[InstancePublicPortsPortInfo](o, func(v InstancePublicPortsPortInfo) int { return v.ToPort })
}

type LbCertificateDomainValidationRecord struct {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName          *string `pulumi:"domainName"`
	ResourceRecordName  *string `pulumi:"resourceRecordName"`
	ResourceRecordType  *string `pulumi:"resourceRecordType"`
	ResourceRecordValue *string `pulumi:"resourceRecordValue"`
}

type LbCertificateDomainValidationRecordArgs struct {
	// The domain name (e.g., example.com) for your SSL/TLS certificate.
	DomainName          pulumix.Input[*string] `pulumi:"domainName"`
	ResourceRecordName  pulumix.Input[*string] `pulumi:"resourceRecordName"`
	ResourceRecordType  pulumix.Input[*string] `pulumi:"resourceRecordType"`
	ResourceRecordValue pulumix.Input[*string] `pulumi:"resourceRecordValue"`
}

func (LbCertificateDomainValidationRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateDomainValidationRecord)(nil)).Elem()
}

func (i LbCertificateDomainValidationRecordArgs) ToLbCertificateDomainValidationRecordOutput() LbCertificateDomainValidationRecordOutput {
	return i.ToLbCertificateDomainValidationRecordOutputWithContext(context.Background())
}

func (i LbCertificateDomainValidationRecordArgs) ToLbCertificateDomainValidationRecordOutputWithContext(ctx context.Context) LbCertificateDomainValidationRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbCertificateDomainValidationRecordOutput)
}

func (i *LbCertificateDomainValidationRecordArgs) ToOutput(ctx context.Context) pulumix.Output[*LbCertificateDomainValidationRecordArgs] {
	return pulumix.Val(i)
}

type LbCertificateDomainValidationRecordOutput struct{ *pulumi.OutputState }

func (LbCertificateDomainValidationRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LbCertificateDomainValidationRecord)(nil)).Elem()
}

func (o LbCertificateDomainValidationRecordOutput) ToLbCertificateDomainValidationRecordOutput() LbCertificateDomainValidationRecordOutput {
	return o
}

func (o LbCertificateDomainValidationRecordOutput) ToLbCertificateDomainValidationRecordOutputWithContext(ctx context.Context) LbCertificateDomainValidationRecordOutput {
	return o
}

func (o LbCertificateDomainValidationRecordOutput) ToOutput(ctx context.Context) pulumix.Output[LbCertificateDomainValidationRecord] {
	return pulumix.Output[LbCertificateDomainValidationRecord]{
		OutputState: o.OutputState,
	}
}

// The domain name (e.g., example.com) for your SSL/TLS certificate.
func (o LbCertificateDomainValidationRecordOutput) DomainName() pulumix.Output[*string] {
	return pulumix.Apply[LbCertificateDomainValidationRecord](o, func(v LbCertificateDomainValidationRecord) *string { return v.DomainName })
}

func (o LbCertificateDomainValidationRecordOutput) ResourceRecordName() pulumix.Output[*string] {
	return pulumix.Apply[LbCertificateDomainValidationRecord](o, func(v LbCertificateDomainValidationRecord) *string { return v.ResourceRecordName })
}

func (o LbCertificateDomainValidationRecordOutput) ResourceRecordType() pulumix.Output[*string] {
	return pulumix.Apply[LbCertificateDomainValidationRecord](o, func(v LbCertificateDomainValidationRecord) *string { return v.ResourceRecordType })
}

func (o LbCertificateDomainValidationRecordOutput) ResourceRecordValue() pulumix.Output[*string] {
	return pulumix.Apply[LbCertificateDomainValidationRecord](o, func(v LbCertificateDomainValidationRecord) *string { return v.ResourceRecordValue })
}

func init() {
	pulumi.RegisterOutputType(CertificateDomainValidationOptionOutput{})
	pulumi.RegisterOutputType(ContainerServiceDeploymentVersionContainerOutput{})
	pulumi.RegisterOutputType(ContainerServiceDeploymentVersionPublicEndpointOutput{})
	pulumi.RegisterOutputType(ContainerServiceDeploymentVersionPublicEndpointHealthCheckOutput{})
	pulumi.RegisterOutputType(ContainerServicePrivateRegistryAccessOutput{})
	pulumi.RegisterOutputType(ContainerServicePrivateRegistryAccessEcrImagePullerRoleOutput{})
	pulumi.RegisterOutputType(ContainerServicePublicDomainNamesOutput{})
	pulumi.RegisterOutputType(ContainerServicePublicDomainNamesCertificateOutput{})
	pulumi.RegisterOutputType(DistributionCacheBehaviorOutput{})
	pulumi.RegisterOutputType(DistributionCacheBehaviorSettingsOutput{})
	pulumi.RegisterOutputType(DistributionCacheBehaviorSettingsForwardedCookiesOutput{})
	pulumi.RegisterOutputType(DistributionCacheBehaviorSettingsForwardedHeadersOutput{})
	pulumi.RegisterOutputType(DistributionCacheBehaviorSettingsForwardedQueryStringsOutput{})
	pulumi.RegisterOutputType(DistributionDefaultCacheBehaviorOutput{})
	pulumi.RegisterOutputType(DistributionLocationOutput{})
	pulumi.RegisterOutputType(DistributionOriginOutput{})
	pulumi.RegisterOutputType(InstanceAddOnOutput{})
	pulumi.RegisterOutputType(InstancePublicPortsPortInfoOutput{})
	pulumi.RegisterOutputType(LbCertificateDomainValidationRecordOutput{})
}
