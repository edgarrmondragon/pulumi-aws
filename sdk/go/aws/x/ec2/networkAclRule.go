// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an entry (a rule) in a network ACL with the specified rule number.
//
// > **NOTE on Network ACLs and Network ACL Rules:** This provider currently
// provides both a standalone Network ACL Rule resource and a Network ACL resource with rules
// defined in-line. At this time you cannot use a Network ACL with in-line rules
// in conjunction with any Network ACL Rule resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
type NetworkAclRule struct {
	pulumi.CustomResourceState

	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock pulumix.Output[*string] `pulumi:"cidrBlock"`
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress pulumix.Output[*bool] `pulumi:"egress"`
	// The from port to match.
	FromPort pulumix.Output[*int] `pulumi:"fromPort"`
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
	//
	// > **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.
	//
	// > **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).
	//
	// > Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
	IcmpCode pulumix.Output[*int] `pulumi:"icmpCode"`
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
	IcmpType pulumix.Output[*int] `pulumi:"icmpType"`
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock pulumix.Output[*string] `pulumi:"ipv6CidrBlock"`
	// The ID of the network ACL.
	NetworkAclId pulumix.Output[string] `pulumi:"networkAclId"`
	// The protocol. A value of -1 means all protocols.
	Protocol pulumix.Output[string] `pulumi:"protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction pulumix.Output[string] `pulumi:"ruleAction"`
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber pulumix.Output[int] `pulumi:"ruleNumber"`
	// The to port to match.
	ToPort pulumix.Output[*int] `pulumi:"toPort"`
}

// NewNetworkAclRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclRule(ctx *pulumi.Context,
	name string, args *NetworkAclRuleArgs, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAclRule
	err := ctx.RegisterResource("aws:ec2/networkAclRule:NetworkAclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclRule gets an existing NetworkAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclRuleState, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	var resource NetworkAclRule
	err := ctx.ReadResource("aws:ec2/networkAclRule:NetworkAclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclRule resources.
type networkAclRuleState struct {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock *string `pulumi:"cidrBlock"`
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress *bool `pulumi:"egress"`
	// The from port to match.
	FromPort *int `pulumi:"fromPort"`
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
	//
	// > **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.
	//
	// > **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).
	//
	// > Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
	IcmpCode *int `pulumi:"icmpCode"`
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
	IcmpType *int `pulumi:"icmpType"`
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The ID of the network ACL.
	NetworkAclId *string `pulumi:"networkAclId"`
	// The protocol. A value of -1 means all protocols.
	Protocol *string `pulumi:"protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction *string `pulumi:"ruleAction"`
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber *int `pulumi:"ruleNumber"`
	// The to port to match.
	ToPort *int `pulumi:"toPort"`
}

type NetworkAclRuleState struct {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock pulumix.Input[*string]
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress pulumix.Input[*bool]
	// The from port to match.
	FromPort pulumix.Input[*int]
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
	//
	// > **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.
	//
	// > **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).
	//
	// > Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
	IcmpCode pulumix.Input[*int]
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
	IcmpType pulumix.Input[*int]
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock pulumix.Input[*string]
	// The ID of the network ACL.
	NetworkAclId pulumix.Input[*string]
	// The protocol. A value of -1 means all protocols.
	Protocol pulumix.Input[*string]
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction pulumix.Input[*string]
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber pulumix.Input[*int]
	// The to port to match.
	ToPort pulumix.Input[*int]
}

func (NetworkAclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleState)(nil)).Elem()
}

type networkAclRuleArgs struct {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock *string `pulumi:"cidrBlock"`
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress *bool `pulumi:"egress"`
	// The from port to match.
	FromPort *int `pulumi:"fromPort"`
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
	//
	// > **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.
	//
	// > **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).
	//
	// > Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
	IcmpCode *int `pulumi:"icmpCode"`
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
	IcmpType *int `pulumi:"icmpType"`
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The ID of the network ACL.
	NetworkAclId string `pulumi:"networkAclId"`
	// The protocol. A value of -1 means all protocols.
	Protocol string `pulumi:"protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction string `pulumi:"ruleAction"`
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber int `pulumi:"ruleNumber"`
	// The to port to match.
	ToPort *int `pulumi:"toPort"`
}

// The set of arguments for constructing a NetworkAclRule resource.
type NetworkAclRuleArgs struct {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	CidrBlock pulumix.Input[*string]
	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
	Egress pulumix.Input[*bool]
	// The from port to match.
	FromPort pulumix.Input[*int]
	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
	//
	// > **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.
	//
	// > **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).
	//
	// > Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
	IcmpCode pulumix.Input[*int]
	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
	IcmpType pulumix.Input[*int]
	// The IPv6 CIDR block to allow or deny.
	Ipv6CidrBlock pulumix.Input[*string]
	// The ID of the network ACL.
	NetworkAclId pulumix.Input[string]
	// The protocol. A value of -1 means all protocols.
	Protocol pulumix.Input[string]
	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
	RuleAction pulumix.Input[string]
	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	RuleNumber pulumix.Input[int]
	// The to port to match.
	ToPort pulumix.Input[*int]
}

func (NetworkAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleArgs)(nil)).Elem()
}

type NetworkAclRuleOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAclRule] {
	return pulumix.Output[NetworkAclRule]{
		OutputState: o.OutputState,
	}
}

// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
func (o NetworkAclRuleOutput) CidrBlock() pulumix.Output[*string] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*string] { return v.CidrBlock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
func (o NetworkAclRuleOutput) Egress() pulumix.Output[*bool] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*bool] { return v.Egress })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The from port to match.
func (o NetworkAclRuleOutput) FromPort() pulumix.Output[*int] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*int] { return v.FromPort })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
//
// > **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.
//
// > **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).
//
// > Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
func (o NetworkAclRuleOutput) IcmpCode() pulumix.Output[*int] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*int] { return v.IcmpCode })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
func (o NetworkAclRuleOutput) IcmpType() pulumix.Output[*int] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*int] { return v.IcmpType })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The IPv6 CIDR block to allow or deny.
func (o NetworkAclRuleOutput) Ipv6CidrBlock() pulumix.Output[*string] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*string] { return v.Ipv6CidrBlock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the network ACL.
func (o NetworkAclRuleOutput) NetworkAclId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[string] { return v.NetworkAclId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The protocol. A value of -1 means all protocols.
func (o NetworkAclRuleOutput) Protocol() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[string] { return v.Protocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
func (o NetworkAclRuleOutput) RuleAction() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[string] { return v.RuleAction })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
func (o NetworkAclRuleOutput) RuleNumber() pulumix.Output[int] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[int] { return v.RuleNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The to port to match.
func (o NetworkAclRuleOutput) ToPort() pulumix.Output[*int] {
	value := pulumix.Apply[NetworkAclRule](o, func(v NetworkAclRule) pulumix.Output[*int] { return v.ToPort })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(NetworkAclRuleOutput{})
}
