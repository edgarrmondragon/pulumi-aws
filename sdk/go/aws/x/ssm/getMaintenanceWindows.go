// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the window IDs of SSM maintenance windows.
func GetMaintenanceWindows(ctx *pulumi.Context, args *GetMaintenanceWindowsArgs, opts ...pulumi.InvokeOption) (*GetMaintenanceWindowsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMaintenanceWindowsResult
	err := ctx.Invoke("aws:ssm/getMaintenanceWindows:getMaintenanceWindows", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMaintenanceWindows.
type GetMaintenanceWindowsArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetMaintenanceWindowsFilter `pulumi:"filters"`
}

// A collection of values returned by getMaintenanceWindows.
type GetMaintenanceWindowsResult struct {
	Filters []GetMaintenanceWindowsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of window IDs of the matched SSM maintenance windows.
	Ids []string `pulumi:"ids"`
}

func GetMaintenanceWindowsOutput(ctx *pulumi.Context, args GetMaintenanceWindowsOutputArgs, opts ...pulumi.InvokeOption) GetMaintenanceWindowsResultOutput {
	outputResult := pulumix.ApplyErr[*GetMaintenanceWindowsArgs](args.ToOutput(), func(plainArgs *GetMaintenanceWindowsArgs) (*GetMaintenanceWindowsResult, error) {
		return GetMaintenanceWindows(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetMaintenanceWindowsResultOutput, *GetMaintenanceWindowsResult](outputResult)
}

// A collection of arguments for invoking getMaintenanceWindows.
type GetMaintenanceWindowsOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetMaintenanceWindowsFilterArgs] `pulumi:"filters"`
}

func (args GetMaintenanceWindowsOutputArgs) ToOutput() pulumix.Output[*GetMaintenanceWindowsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetMaintenanceWindowsArgs {
		return &GetMaintenanceWindowsArgs{
			Filters: resolvedArgs[0].([]GetMaintenanceWindowsFilter),
		}
	})
}

type GetMaintenanceWindowsResultOutput struct{ *pulumi.OutputState }

func (GetMaintenanceWindowsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaintenanceWindowsResult)(nil)).Elem()
}

func (o GetMaintenanceWindowsResultOutput) ToOutput(context.Context) pulumix.Output[*GetMaintenanceWindowsResult] {
	return pulumix.Output[*GetMaintenanceWindowsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetMaintenanceWindowsResultOutput) Filters() pulumix.GArrayOutput[GetMaintenanceWindowsFilter, GetMaintenanceWindowsFilterOutput] {
	value := pulumix.Apply[*GetMaintenanceWindowsResult](o, func(v *GetMaintenanceWindowsResult) []GetMaintenanceWindowsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetMaintenanceWindowsFilter, GetMaintenanceWindowsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetMaintenanceWindowsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetMaintenanceWindowsResult](o, func(v *GetMaintenanceWindowsResult) string { return v.Id })
}

func (o GetMaintenanceWindowsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetMaintenanceWindowsResult](o, func(v *GetMaintenanceWindowsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
