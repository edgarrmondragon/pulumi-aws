// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an Amazon Inspector Delegated Admin Account.
type DelegatedAdminAccount struct {
	pulumi.CustomResourceState

	// Account to enable as delegated admin account.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// Status of this delegated admin account.
	RelationshipStatus pulumix.Output[string] `pulumi:"relationshipStatus"`
}

// NewDelegatedAdminAccount registers a new resource with the given unique name, arguments, and options.
func NewDelegatedAdminAccount(ctx *pulumi.Context,
	name string, args *DelegatedAdminAccountArgs, opts ...pulumi.ResourceOption) (*DelegatedAdminAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DelegatedAdminAccount
	err := ctx.RegisterResource("aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegatedAdminAccount gets an existing DelegatedAdminAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegatedAdminAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegatedAdminAccountState, opts ...pulumi.ResourceOption) (*DelegatedAdminAccount, error) {
	var resource DelegatedAdminAccount
	err := ctx.ReadResource("aws:inspector2/delegatedAdminAccount:DelegatedAdminAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegatedAdminAccount resources.
type delegatedAdminAccountState struct {
	// Account to enable as delegated admin account.
	AccountId *string `pulumi:"accountId"`
	// Status of this delegated admin account.
	RelationshipStatus *string `pulumi:"relationshipStatus"`
}

type DelegatedAdminAccountState struct {
	// Account to enable as delegated admin account.
	AccountId pulumix.Input[*string]
	// Status of this delegated admin account.
	RelationshipStatus pulumix.Input[*string]
}

func (DelegatedAdminAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminAccountState)(nil)).Elem()
}

type delegatedAdminAccountArgs struct {
	// Account to enable as delegated admin account.
	AccountId string `pulumi:"accountId"`
}

// The set of arguments for constructing a DelegatedAdminAccount resource.
type DelegatedAdminAccountArgs struct {
	// Account to enable as delegated admin account.
	AccountId pulumix.Input[string]
}

func (DelegatedAdminAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminAccountArgs)(nil)).Elem()
}

type DelegatedAdminAccountOutput struct{ *pulumi.OutputState }

func (DelegatedAdminAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedAdminAccount)(nil)).Elem()
}

func (o DelegatedAdminAccountOutput) ToDelegatedAdminAccountOutput() DelegatedAdminAccountOutput {
	return o
}

func (o DelegatedAdminAccountOutput) ToDelegatedAdminAccountOutputWithContext(ctx context.Context) DelegatedAdminAccountOutput {
	return o
}

func (o DelegatedAdminAccountOutput) ToOutput(ctx context.Context) pulumix.Output[DelegatedAdminAccount] {
	return pulumix.Output[DelegatedAdminAccount]{
		OutputState: o.OutputState,
	}
}

// Account to enable as delegated admin account.
func (o DelegatedAdminAccountOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdminAccount](o, func(v DelegatedAdminAccount) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of this delegated admin account.
func (o DelegatedAdminAccountOutput) RelationshipStatus() pulumix.Output[string] {
	value := pulumix.Apply[DelegatedAdminAccount](o, func(v DelegatedAdminAccount) pulumix.Output[string] { return v.RelationshipStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DelegatedAdminAccountOutput{})
}
