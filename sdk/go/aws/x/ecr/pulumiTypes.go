// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RegistryScanningConfigurationRule struct {
	// One or more repository filter blocks, containing a `filter` (required string filtering repositories, see pattern regex [here](https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_ScanningRepositoryFilter.html)) and a `filterType` (required string, currently only `WILDCARD` is supported).
	RepositoryFilters []RegistryScanningConfigurationRuleRepositoryFilter `pulumi:"repositoryFilters"`
	// The frequency that scans are performed at for a private registry. Can be `SCAN_ON_PUSH`, `CONTINUOUS_SCAN`, or `MANUAL`.
	ScanFrequency string `pulumi:"scanFrequency"`
}

type RegistryScanningConfigurationRuleArgs struct {
	// One or more repository filter blocks, containing a `filter` (required string filtering repositories, see pattern regex [here](https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_ScanningRepositoryFilter.html)) and a `filterType` (required string, currently only `WILDCARD` is supported).
	RepositoryFilters pulumix.Input[[]*RegistryScanningConfigurationRuleRepositoryFilterArgs] `pulumi:"repositoryFilters"`
	// The frequency that scans are performed at for a private registry. Can be `SCAN_ON_PUSH`, `CONTINUOUS_SCAN`, or `MANUAL`.
	ScanFrequency pulumix.Input[string] `pulumi:"scanFrequency"`
}

func (RegistryScanningConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryScanningConfigurationRule)(nil)).Elem()
}

func (i RegistryScanningConfigurationRuleArgs) ToRegistryScanningConfigurationRuleOutput() RegistryScanningConfigurationRuleOutput {
	return i.ToRegistryScanningConfigurationRuleOutputWithContext(context.Background())
}

func (i RegistryScanningConfigurationRuleArgs) ToRegistryScanningConfigurationRuleOutputWithContext(ctx context.Context) RegistryScanningConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryScanningConfigurationRuleOutput)
}

func (i *RegistryScanningConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*RegistryScanningConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type RegistryScanningConfigurationRuleOutput struct{ *pulumi.OutputState }

func (RegistryScanningConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryScanningConfigurationRule)(nil)).Elem()
}

func (o RegistryScanningConfigurationRuleOutput) ToRegistryScanningConfigurationRuleOutput() RegistryScanningConfigurationRuleOutput {
	return o
}

func (o RegistryScanningConfigurationRuleOutput) ToRegistryScanningConfigurationRuleOutputWithContext(ctx context.Context) RegistryScanningConfigurationRuleOutput {
	return o
}

func (o RegistryScanningConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryScanningConfigurationRule] {
	return pulumix.Output[RegistryScanningConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// One or more repository filter blocks, containing a `filter` (required string filtering repositories, see pattern regex [here](https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_ScanningRepositoryFilter.html)) and a `filterType` (required string, currently only `WILDCARD` is supported).
func (o RegistryScanningConfigurationRuleOutput) RepositoryFilters() pulumix.GArrayOutput[RegistryScanningConfigurationRuleRepositoryFilter, RegistryScanningConfigurationRuleRepositoryFilterOutput] {
	value := pulumix.Apply[RegistryScanningConfigurationRule](o, func(v RegistryScanningConfigurationRule) []RegistryScanningConfigurationRuleRepositoryFilter {
		return v.RepositoryFilters
	})
	return pulumix.GArrayOutput[RegistryScanningConfigurationRuleRepositoryFilter, RegistryScanningConfigurationRuleRepositoryFilterOutput]{OutputState: value.OutputState}
}

// The frequency that scans are performed at for a private registry. Can be `SCAN_ON_PUSH`, `CONTINUOUS_SCAN`, or `MANUAL`.
func (o RegistryScanningConfigurationRuleOutput) ScanFrequency() pulumix.Output[string] {
	return pulumix.Apply[RegistryScanningConfigurationRule](o, func(v RegistryScanningConfigurationRule) string { return v.ScanFrequency })
}

type RegistryScanningConfigurationRuleRepositoryFilter struct {
	Filter     string `pulumi:"filter"`
	FilterType string `pulumi:"filterType"`
}

type RegistryScanningConfigurationRuleRepositoryFilterArgs struct {
	Filter     pulumix.Input[string] `pulumi:"filter"`
	FilterType pulumix.Input[string] `pulumi:"filterType"`
}

func (RegistryScanningConfigurationRuleRepositoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryScanningConfigurationRuleRepositoryFilter)(nil)).Elem()
}

func (i RegistryScanningConfigurationRuleRepositoryFilterArgs) ToRegistryScanningConfigurationRuleRepositoryFilterOutput() RegistryScanningConfigurationRuleRepositoryFilterOutput {
	return i.ToRegistryScanningConfigurationRuleRepositoryFilterOutputWithContext(context.Background())
}

func (i RegistryScanningConfigurationRuleRepositoryFilterArgs) ToRegistryScanningConfigurationRuleRepositoryFilterOutputWithContext(ctx context.Context) RegistryScanningConfigurationRuleRepositoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryScanningConfigurationRuleRepositoryFilterOutput)
}

func (i *RegistryScanningConfigurationRuleRepositoryFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*RegistryScanningConfigurationRuleRepositoryFilterArgs] {
	return pulumix.Val(i)
}

type RegistryScanningConfigurationRuleRepositoryFilterOutput struct{ *pulumi.OutputState }

func (RegistryScanningConfigurationRuleRepositoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryScanningConfigurationRuleRepositoryFilter)(nil)).Elem()
}

func (o RegistryScanningConfigurationRuleRepositoryFilterOutput) ToRegistryScanningConfigurationRuleRepositoryFilterOutput() RegistryScanningConfigurationRuleRepositoryFilterOutput {
	return o
}

func (o RegistryScanningConfigurationRuleRepositoryFilterOutput) ToRegistryScanningConfigurationRuleRepositoryFilterOutputWithContext(ctx context.Context) RegistryScanningConfigurationRuleRepositoryFilterOutput {
	return o
}

func (o RegistryScanningConfigurationRuleRepositoryFilterOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryScanningConfigurationRuleRepositoryFilter] {
	return pulumix.Output[RegistryScanningConfigurationRuleRepositoryFilter]{
		OutputState: o.OutputState,
	}
}

func (o RegistryScanningConfigurationRuleRepositoryFilterOutput) Filter() pulumix.Output[string] {
	return pulumix.Apply[RegistryScanningConfigurationRuleRepositoryFilter](o, func(v RegistryScanningConfigurationRuleRepositoryFilter) string { return v.Filter })
}

func (o RegistryScanningConfigurationRuleRepositoryFilterOutput) FilterType() pulumix.Output[string] {
	return pulumix.Apply[RegistryScanningConfigurationRuleRepositoryFilter](o, func(v RegistryScanningConfigurationRuleRepositoryFilter) string { return v.FilterType })
}

type ReplicationConfigurationReplicationConfiguration struct {
	// The replication rules for a replication configuration. A maximum of 10 are allowed per `replicationConfiguration`. See Rule
	Rules []ReplicationConfigurationReplicationConfigurationRule `pulumi:"rules"`
}

type ReplicationConfigurationReplicationConfigurationArgs struct {
	// The replication rules for a replication configuration. A maximum of 10 are allowed per `replicationConfiguration`. See Rule
	Rules pulumix.Input[[]*ReplicationConfigurationReplicationConfigurationRuleArgs] `pulumi:"rules"`
}

func (ReplicationConfigurationReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfiguration)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationArgs) ToReplicationConfigurationReplicationConfigurationOutput() ReplicationConfigurationReplicationConfigurationOutput {
	return i.ToReplicationConfigurationReplicationConfigurationOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationArgs) ToReplicationConfigurationReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationOutput)
}

func (i *ReplicationConfigurationReplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigurationReplicationConfigurationArgs] {
	return pulumix.Val(i)
}

type ReplicationConfigurationReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToReplicationConfigurationReplicationConfigurationOutput() ReplicationConfigurationReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToReplicationConfigurationReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfigurationReplicationConfiguration] {
	return pulumix.Output[ReplicationConfigurationReplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The replication rules for a replication configuration. A maximum of 10 are allowed per `replicationConfiguration`. See Rule
func (o ReplicationConfigurationReplicationConfigurationOutput) Rules() pulumix.GArrayOutput[ReplicationConfigurationReplicationConfigurationRule, ReplicationConfigurationReplicationConfigurationRuleOutput] {
	value := pulumix.Apply[ReplicationConfigurationReplicationConfiguration](o, func(v ReplicationConfigurationReplicationConfiguration) []ReplicationConfigurationReplicationConfigurationRule {
		return v.Rules
	})
	return pulumix.GArrayOutput[ReplicationConfigurationReplicationConfigurationRule, ReplicationConfigurationReplicationConfigurationRuleOutput]{OutputState: value.OutputState}
}

type ReplicationConfigurationReplicationConfigurationRule struct {
	// the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
	Destinations []ReplicationConfigurationReplicationConfigurationRuleDestination `pulumi:"destinations"`
	// filters for a replication rule. See Repository Filter.
	RepositoryFilters []ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter `pulumi:"repositoryFilters"`
}

type ReplicationConfigurationReplicationConfigurationRuleArgs struct {
	// the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
	Destinations pulumix.Input[[]*ReplicationConfigurationReplicationConfigurationRuleDestinationArgs] `pulumi:"destinations"`
	// filters for a replication rule. See Repository Filter.
	RepositoryFilters pulumix.Input[[]*ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs] `pulumi:"repositoryFilters"`
}

func (ReplicationConfigurationReplicationConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRule)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationRuleArgs) ToReplicationConfigurationReplicationConfigurationRuleOutput() ReplicationConfigurationReplicationConfigurationRuleOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleArgs) ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleOutput)
}

func (i *ReplicationConfigurationReplicationConfigurationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigurationReplicationConfigurationRuleArgs] {
	return pulumix.Val(i)
}

type ReplicationConfigurationReplicationConfigurationRuleOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRule)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToReplicationConfigurationReplicationConfigurationRuleOutput() ReplicationConfigurationReplicationConfigurationRuleOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToReplicationConfigurationReplicationConfigurationRuleOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfigurationReplicationConfigurationRule] {
	return pulumix.Output[ReplicationConfigurationReplicationConfigurationRule]{
		OutputState: o.OutputState,
	}
}

// the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
func (o ReplicationConfigurationReplicationConfigurationRuleOutput) Destinations() pulumix.GArrayOutput[ReplicationConfigurationReplicationConfigurationRuleDestination, ReplicationConfigurationReplicationConfigurationRuleDestinationOutput] {
	value := pulumix.Apply[ReplicationConfigurationReplicationConfigurationRule](o, func(v ReplicationConfigurationReplicationConfigurationRule) []ReplicationConfigurationReplicationConfigurationRuleDestination {
		return v.Destinations
	})
	return pulumix.GArrayOutput[ReplicationConfigurationReplicationConfigurationRuleDestination, ReplicationConfigurationReplicationConfigurationRuleDestinationOutput]{OutputState: value.OutputState}
}

// filters for a replication rule. See Repository Filter.
func (o ReplicationConfigurationReplicationConfigurationRuleOutput) RepositoryFilters() pulumix.GArrayOutput[ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter, ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput] {
	value := pulumix.Apply[ReplicationConfigurationReplicationConfigurationRule](o, func(v ReplicationConfigurationReplicationConfigurationRule) []ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter {
		return v.RepositoryFilters
	})
	return pulumix.GArrayOutput[ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter, ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput]{OutputState: value.OutputState}
}

type ReplicationConfigurationReplicationConfigurationRuleDestination struct {
	// A Region to replicate to.
	Region string `pulumi:"region"`
	// The account ID of the destination registry to replicate to.
	RegistryId string `pulumi:"registryId"`
}

type ReplicationConfigurationReplicationConfigurationRuleDestinationArgs struct {
	// A Region to replicate to.
	Region pulumix.Input[string] `pulumi:"region"`
	// The account ID of the destination registry to replicate to.
	RegistryId pulumix.Input[string] `pulumi:"registryId"`
}

func (ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleDestinationOutput)
}

func (i *ReplicationConfigurationReplicationConfigurationRuleDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigurationReplicationConfigurationRuleDestinationArgs] {
	return pulumix.Val(i)
}

type ReplicationConfigurationReplicationConfigurationRuleDestinationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRuleDestination)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutput() ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ToReplicationConfigurationReplicationConfigurationRuleDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleDestinationOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfigurationReplicationConfigurationRuleDestination] {
	return pulumix.Output[ReplicationConfigurationReplicationConfigurationRuleDestination]{
		OutputState: o.OutputState,
	}
}

// A Region to replicate to.
func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[ReplicationConfigurationReplicationConfigurationRuleDestination](o, func(v ReplicationConfigurationReplicationConfigurationRuleDestination) string { return v.Region })
}

// The account ID of the destination registry to replicate to.
func (o ReplicationConfigurationReplicationConfigurationRuleDestinationOutput) RegistryId() pulumix.Output[string] {
	return pulumix.Apply[ReplicationConfigurationReplicationConfigurationRuleDestination](o, func(v ReplicationConfigurationReplicationConfigurationRuleDestination) string { return v.RegistryId })
}

type ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter struct {
	// The repository filter details.
	Filter string `pulumi:"filter"`
	// The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.
	FilterType string `pulumi:"filterType"`
}

type ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs struct {
	// The repository filter details.
	Filter pulumix.Input[string] `pulumi:"filter"`
	// The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.
	FilterType pulumix.Input[string] `pulumi:"filterType"`
}

func (ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs) ToReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput() ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput {
	return i.ToReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs) ToReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput)
}

func (i *ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs] {
	return pulumix.Val(i)
}

type ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput) ToReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput() ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput) ToReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput {
	return o
}

func (o ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter] {
	return pulumix.Output[ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter]{
		OutputState: o.OutputState,
	}
}

// The repository filter details.
func (o ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput) Filter() pulumix.Output[string] {
	return pulumix.Apply[ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter](o, func(v ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter) string { return v.Filter })
}

// The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.
func (o ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput) FilterType() pulumix.Output[string] {
	return pulumix.Apply[ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter](o, func(v ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter) string {
		return v.FilterType
	})
}

type RepositoryEncryptionConfiguration struct {
	// The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
	EncryptionType *string `pulumi:"encryptionType"`
	// The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
	KmsKey *string `pulumi:"kmsKey"`
}

type RepositoryEncryptionConfigurationArgs struct {
	// The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
	EncryptionType pulumix.Input[*string] `pulumi:"encryptionType"`
	// The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
	KmsKey pulumix.Input[*string] `pulumi:"kmsKey"`
}

func (RepositoryEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput {
	return i.ToRepositoryEncryptionConfigurationOutputWithContext(context.Background())
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEncryptionConfigurationOutput)
}

func (i *RepositoryEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type RepositoryEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput {
	return o
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationOutput {
	return o
}

func (o RepositoryEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryEncryptionConfiguration] {
	return pulumix.Output[RepositoryEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
func (o RepositoryEncryptionConfigurationOutput) EncryptionType() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryEncryptionConfiguration](o, func(v RepositoryEncryptionConfiguration) *string { return v.EncryptionType })
}

// The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
func (o RepositoryEncryptionConfigurationOutput) KmsKey() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryEncryptionConfiguration](o, func(v RepositoryEncryptionConfiguration) *string { return v.KmsKey })
}

type RepositoryImageScanningConfiguration struct {
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	ScanOnPush bool `pulumi:"scanOnPush"`
}

type RepositoryImageScanningConfigurationArgs struct {
	// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
	ScanOnPush pulumix.Input[bool] `pulumi:"scanOnPush"`
}

func (RepositoryImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput {
	return i.ToRepositoryImageScanningConfigurationOutputWithContext(context.Background())
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationOutput)
}

func (i *RepositoryImageScanningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryImageScanningConfigurationArgs] {
	return pulumix.Val(i)
}

type RepositoryImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput {
	return o
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationOutput {
	return o
}

func (o RepositoryImageScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryImageScanningConfiguration] {
	return pulumix.Output[RepositoryImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
func (o RepositoryImageScanningConfigurationOutput) ScanOnPush() pulumix.Output[bool] {
	return pulumix.Apply[RepositoryImageScanningConfiguration](o, func(v RepositoryImageScanningConfiguration) bool { return v.ScanOnPush })
}

type GetRepositoryEncryptionConfiguration struct {
	// Encryption type to use for the repository, either `AES256` or `KMS`.
	EncryptionType string `pulumi:"encryptionType"`
	// If `encryptionType` is `KMS`, the ARN of the KMS key used.
	KmsKey string `pulumi:"kmsKey"`
}

type GetRepositoryEncryptionConfigurationArgs struct {
	// Encryption type to use for the repository, either `AES256` or `KMS`.
	EncryptionType pulumix.Input[string] `pulumi:"encryptionType"`
	// If `encryptionType` is `KMS`, the ARN of the KMS key used.
	KmsKey pulumix.Input[string] `pulumi:"kmsKey"`
}

func (GetRepositoryEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i GetRepositoryEncryptionConfigurationArgs) ToGetRepositoryEncryptionConfigurationOutput() GetRepositoryEncryptionConfigurationOutput {
	return i.ToGetRepositoryEncryptionConfigurationOutputWithContext(context.Background())
}

func (i GetRepositoryEncryptionConfigurationArgs) ToGetRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) GetRepositoryEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryEncryptionConfigurationOutput)
}

func (i *GetRepositoryEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRepositoryEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type GetRepositoryEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (GetRepositoryEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o GetRepositoryEncryptionConfigurationOutput) ToGetRepositoryEncryptionConfigurationOutput() GetRepositoryEncryptionConfigurationOutput {
	return o
}

func (o GetRepositoryEncryptionConfigurationOutput) ToGetRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) GetRepositoryEncryptionConfigurationOutput {
	return o
}

func (o GetRepositoryEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryEncryptionConfiguration] {
	return pulumix.Output[GetRepositoryEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Encryption type to use for the repository, either `AES256` or `KMS`.
func (o GetRepositoryEncryptionConfigurationOutput) EncryptionType() pulumix.Output[string] {
	return pulumix.Apply[GetRepositoryEncryptionConfiguration](o, func(v GetRepositoryEncryptionConfiguration) string { return v.EncryptionType })
}

// If `encryptionType` is `KMS`, the ARN of the KMS key used.
func (o GetRepositoryEncryptionConfigurationOutput) KmsKey() pulumix.Output[string] {
	return pulumix.Apply[GetRepositoryEncryptionConfiguration](o, func(v GetRepositoryEncryptionConfiguration) string { return v.KmsKey })
}

type GetRepositoryImageScanningConfiguration struct {
	// Whether images are scanned after being pushed to the repository.
	ScanOnPush bool `pulumi:"scanOnPush"`
}

type GetRepositoryImageScanningConfigurationArgs struct {
	// Whether images are scanned after being pushed to the repository.
	ScanOnPush pulumix.Input[bool] `pulumi:"scanOnPush"`
}

func (GetRepositoryImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i GetRepositoryImageScanningConfigurationArgs) ToGetRepositoryImageScanningConfigurationOutput() GetRepositoryImageScanningConfigurationOutput {
	return i.ToGetRepositoryImageScanningConfigurationOutputWithContext(context.Background())
}

func (i GetRepositoryImageScanningConfigurationArgs) ToGetRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) GetRepositoryImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryImageScanningConfigurationOutput)
}

func (i *GetRepositoryImageScanningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRepositoryImageScanningConfigurationArgs] {
	return pulumix.Val(i)
}

type GetRepositoryImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (GetRepositoryImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o GetRepositoryImageScanningConfigurationOutput) ToGetRepositoryImageScanningConfigurationOutput() GetRepositoryImageScanningConfigurationOutput {
	return o
}

func (o GetRepositoryImageScanningConfigurationOutput) ToGetRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) GetRepositoryImageScanningConfigurationOutput {
	return o
}

func (o GetRepositoryImageScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryImageScanningConfiguration] {
	return pulumix.Output[GetRepositoryImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether images are scanned after being pushed to the repository.
func (o GetRepositoryImageScanningConfigurationOutput) ScanOnPush() pulumix.Output[bool] {
	return pulumix.Apply[GetRepositoryImageScanningConfiguration](o, func(v GetRepositoryImageScanningConfiguration) bool { return v.ScanOnPush })
}

func init() {
	pulumi.RegisterOutputType(RegistryScanningConfigurationRuleOutput{})
	pulumi.RegisterOutputType(RegistryScanningConfigurationRuleRepositoryFilterOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRuleOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRuleDestinationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterOutput{})
	pulumi.RegisterOutputType(RepositoryEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(RepositoryImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(GetRepositoryEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(GetRepositoryImageScanningConfigurationOutput{})
}
