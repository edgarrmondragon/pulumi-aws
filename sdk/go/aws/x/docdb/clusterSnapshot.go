// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a DocumentDB database cluster snapshot for DocumentDB clusters.
type ClusterSnapshot struct {
	pulumi.CustomResourceState

	// List of EC2 Availability Zones that instances in the DocumentDB cluster snapshot can be restored in.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// The DocumentDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier pulumix.Output[string] `pulumi:"dbClusterIdentifier"`
	// The Amazon Resource Name (ARN) for the DocumentDB Cluster Snapshot.
	DbClusterSnapshotArn pulumix.Output[string] `pulumi:"dbClusterSnapshotArn"`
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier pulumix.Output[string] `pulumi:"dbClusterSnapshotIdentifier"`
	// Specifies the name of the database engine.
	Engine pulumix.Output[string] `pulumi:"engine"`
	// Version of the database engine for this DocumentDB cluster snapshot.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DocumentDB cluster snapshot.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// Port that the DocumentDB cluster was listening on at the time of the snapshot.
	Port                       pulumix.Output[int]    `pulumi:"port"`
	SnapshotType               pulumix.Output[string] `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn pulumix.Output[string] `pulumi:"sourceDbClusterSnapshotArn"`
	// The status of this DocumentDB Cluster Snapshot.
	Status pulumix.Output[string] `pulumi:"status"`
	// Specifies whether the DocumentDB cluster snapshot is encrypted.
	StorageEncrypted pulumix.Output[bool] `pulumi:"storageEncrypted"`
	// The VPC ID associated with the DocumentDB cluster snapshot.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewClusterSnapshot registers a new resource with the given unique name, arguments, and options.
func NewClusterSnapshot(ctx *pulumi.Context,
	name string, args *ClusterSnapshotArgs, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterIdentifier'")
	}
	if args.DbClusterSnapshotIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterSnapshotIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterSnapshot
	err := ctx.RegisterResource("aws:docdb/clusterSnapshot:ClusterSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSnapshot gets an existing ClusterSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSnapshotState, opts ...pulumi.ResourceOption) (*ClusterSnapshot, error) {
	var resource ClusterSnapshot
	err := ctx.ReadResource("aws:docdb/clusterSnapshot:ClusterSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSnapshot resources.
type clusterSnapshotState struct {
	// List of EC2 Availability Zones that instances in the DocumentDB cluster snapshot can be restored in.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The DocumentDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier *string `pulumi:"dbClusterIdentifier"`
	// The Amazon Resource Name (ARN) for the DocumentDB Cluster Snapshot.
	DbClusterSnapshotArn *string `pulumi:"dbClusterSnapshotArn"`
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier *string `pulumi:"dbClusterSnapshotIdentifier"`
	// Specifies the name of the database engine.
	Engine *string `pulumi:"engine"`
	// Version of the database engine for this DocumentDB cluster snapshot.
	EngineVersion *string `pulumi:"engineVersion"`
	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DocumentDB cluster snapshot.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Port that the DocumentDB cluster was listening on at the time of the snapshot.
	Port                       *int    `pulumi:"port"`
	SnapshotType               *string `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn *string `pulumi:"sourceDbClusterSnapshotArn"`
	// The status of this DocumentDB Cluster Snapshot.
	Status *string `pulumi:"status"`
	// Specifies whether the DocumentDB cluster snapshot is encrypted.
	StorageEncrypted *bool `pulumi:"storageEncrypted"`
	// The VPC ID associated with the DocumentDB cluster snapshot.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterSnapshotState struct {
	// List of EC2 Availability Zones that instances in the DocumentDB cluster snapshot can be restored in.
	AvailabilityZones pulumix.Input[[]string]
	// The DocumentDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier pulumix.Input[*string]
	// The Amazon Resource Name (ARN) for the DocumentDB Cluster Snapshot.
	DbClusterSnapshotArn pulumix.Input[*string]
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier pulumix.Input[*string]
	// Specifies the name of the database engine.
	Engine pulumix.Input[*string]
	// Version of the database engine for this DocumentDB cluster snapshot.
	EngineVersion pulumix.Input[*string]
	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DocumentDB cluster snapshot.
	KmsKeyId pulumix.Input[*string]
	// Port that the DocumentDB cluster was listening on at the time of the snapshot.
	Port                       pulumix.Input[*int]
	SnapshotType               pulumix.Input[*string]
	SourceDbClusterSnapshotArn pulumix.Input[*string]
	// The status of this DocumentDB Cluster Snapshot.
	Status pulumix.Input[*string]
	// Specifies whether the DocumentDB cluster snapshot is encrypted.
	StorageEncrypted pulumix.Input[*bool]
	// The VPC ID associated with the DocumentDB cluster snapshot.
	VpcId pulumix.Input[*string]
}

func (ClusterSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotState)(nil)).Elem()
}

type clusterSnapshotArgs struct {
	// The DocumentDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier string `pulumi:"dbClusterIdentifier"`
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier string `pulumi:"dbClusterSnapshotIdentifier"`
}

// The set of arguments for constructing a ClusterSnapshot resource.
type ClusterSnapshotArgs struct {
	// The DocumentDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier pulumix.Input[string]
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier pulumix.Input[string]
}

func (ClusterSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSnapshotArgs)(nil)).Elem()
}

type ClusterSnapshotOutput struct{ *pulumi.OutputState }

func (ClusterSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSnapshot)(nil)).Elem()
}

func (o ClusterSnapshotOutput) ToClusterSnapshotOutput() ClusterSnapshotOutput {
	return o
}

func (o ClusterSnapshotOutput) ToClusterSnapshotOutputWithContext(ctx context.Context) ClusterSnapshotOutput {
	return o
}

func (o ClusterSnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterSnapshot] {
	return pulumix.Output[ClusterSnapshot]{
		OutputState: o.OutputState,
	}
}

// List of EC2 Availability Zones that instances in the DocumentDB cluster snapshot can be restored in.
func (o ClusterSnapshotOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The DocumentDB Cluster Identifier from which to take the snapshot.
func (o ClusterSnapshotOutput) DbClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.DbClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) for the DocumentDB Cluster Snapshot.
func (o ClusterSnapshotOutput) DbClusterSnapshotArn() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.DbClusterSnapshotArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Identifier for the snapshot.
func (o ClusterSnapshotOutput) DbClusterSnapshotIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.DbClusterSnapshotIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the name of the database engine.
func (o ClusterSnapshotOutput) Engine() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.Engine })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the database engine for this DocumentDB cluster snapshot.
func (o ClusterSnapshotOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DocumentDB cluster snapshot.
func (o ClusterSnapshotOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Port that the DocumentDB cluster was listening on at the time of the snapshot.
func (o ClusterSnapshotOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o ClusterSnapshotOutput) SnapshotType() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.SnapshotType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ClusterSnapshotOutput) SourceDbClusterSnapshotArn() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.SourceDbClusterSnapshotArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of this DocumentDB Cluster Snapshot.
func (o ClusterSnapshotOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether the DocumentDB cluster snapshot is encrypted.
func (o ClusterSnapshotOutput) StorageEncrypted() pulumix.Output[bool] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[bool] { return v.StorageEncrypted })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The VPC ID associated with the DocumentDB cluster snapshot.
func (o ClusterSnapshotOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[ClusterSnapshot](o, func(v ClusterSnapshot) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ClusterSnapshotOutput{})
}
