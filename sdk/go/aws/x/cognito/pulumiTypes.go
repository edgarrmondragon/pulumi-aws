// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type IdentityPoolCognitoIdentityProvider struct {
	// The client ID for the Amazon Cognito Identity User Pool.
	ClientId *string `pulumi:"clientId"`
	// The provider name for an Amazon Cognito Identity User Pool.
	ProviderName *string `pulumi:"providerName"`
	// Whether server-side token validation is enabled for the identity provider’s token or not.
	ServerSideTokenCheck *bool `pulumi:"serverSideTokenCheck"`
}

type IdentityPoolCognitoIdentityProviderArgs struct {
	// The client ID for the Amazon Cognito Identity User Pool.
	ClientId pulumix.Input[*string] `pulumi:"clientId"`
	// The provider name for an Amazon Cognito Identity User Pool.
	ProviderName pulumix.Input[*string] `pulumi:"providerName"`
	// Whether server-side token validation is enabled for the identity provider’s token or not.
	ServerSideTokenCheck pulumix.Input[*bool] `pulumi:"serverSideTokenCheck"`
}

func (IdentityPoolCognitoIdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolCognitoIdentityProvider)(nil)).Elem()
}

func (i IdentityPoolCognitoIdentityProviderArgs) ToIdentityPoolCognitoIdentityProviderOutput() IdentityPoolCognitoIdentityProviderOutput {
	return i.ToIdentityPoolCognitoIdentityProviderOutputWithContext(context.Background())
}

func (i IdentityPoolCognitoIdentityProviderArgs) ToIdentityPoolCognitoIdentityProviderOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolCognitoIdentityProviderOutput)
}

func (i *IdentityPoolCognitoIdentityProviderArgs) ToOutput(ctx context.Context) pulumix.Output[*IdentityPoolCognitoIdentityProviderArgs] {
	return pulumix.Val(i)
}

type IdentityPoolCognitoIdentityProviderOutput struct{ *pulumi.OutputState }

func (IdentityPoolCognitoIdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolCognitoIdentityProvider)(nil)).Elem()
}

func (o IdentityPoolCognitoIdentityProviderOutput) ToIdentityPoolCognitoIdentityProviderOutput() IdentityPoolCognitoIdentityProviderOutput {
	return o
}

func (o IdentityPoolCognitoIdentityProviderOutput) ToIdentityPoolCognitoIdentityProviderOutputWithContext(ctx context.Context) IdentityPoolCognitoIdentityProviderOutput {
	return o
}

func (o IdentityPoolCognitoIdentityProviderOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPoolCognitoIdentityProvider] {
	return pulumix.Output[IdentityPoolCognitoIdentityProvider]{
		OutputState: o.OutputState,
	}
}

// The client ID for the Amazon Cognito Identity User Pool.
func (o IdentityPoolCognitoIdentityProviderOutput) ClientId() pulumix.Output[*string] {
	return pulumix.Apply[IdentityPoolCognitoIdentityProvider](o, func(v IdentityPoolCognitoIdentityProvider) *string { return v.ClientId })
}

// The provider name for an Amazon Cognito Identity User Pool.
func (o IdentityPoolCognitoIdentityProviderOutput) ProviderName() pulumix.Output[*string] {
	return pulumix.Apply[IdentityPoolCognitoIdentityProvider](o, func(v IdentityPoolCognitoIdentityProvider) *string { return v.ProviderName })
}

// Whether server-side token validation is enabled for the identity provider’s token or not.
func (o IdentityPoolCognitoIdentityProviderOutput) ServerSideTokenCheck() pulumix.Output[*bool] {
	return pulumix.Apply[IdentityPoolCognitoIdentityProvider](o, func(v IdentityPoolCognitoIdentityProvider) *bool { return v.ServerSideTokenCheck })
}

type IdentityPoolRoleAttachmentRoleMapping struct {
	// Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
	AmbiguousRoleResolution *string `pulumi:"ambiguousRoleResolution"`
	// A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognitoIdentityProviders` set on `cognito.IdentityPool` resource or a `cognito.IdentityProvider` resource.
	IdentityProvider string `pulumi:"identityProvider"`
	// The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
	MappingRules []IdentityPoolRoleAttachmentRoleMappingMappingRule `pulumi:"mappingRules"`
	// The role mapping type.
	Type string `pulumi:"type"`
}

type IdentityPoolRoleAttachmentRoleMappingArgs struct {
	// Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
	AmbiguousRoleResolution pulumix.Input[*string] `pulumi:"ambiguousRoleResolution"`
	// A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognitoIdentityProviders` set on `cognito.IdentityPool` resource or a `cognito.IdentityProvider` resource.
	IdentityProvider pulumix.Input[string] `pulumi:"identityProvider"`
	// The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
	MappingRules pulumix.Input[[]*IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs] `pulumi:"mappingRules"`
	// The role mapping type.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (IdentityPoolRoleAttachmentRoleMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolRoleAttachmentRoleMapping)(nil)).Elem()
}

func (i IdentityPoolRoleAttachmentRoleMappingArgs) ToIdentityPoolRoleAttachmentRoleMappingOutput() IdentityPoolRoleAttachmentRoleMappingOutput {
	return i.ToIdentityPoolRoleAttachmentRoleMappingOutputWithContext(context.Background())
}

func (i IdentityPoolRoleAttachmentRoleMappingArgs) ToIdentityPoolRoleAttachmentRoleMappingOutputWithContext(ctx context.Context) IdentityPoolRoleAttachmentRoleMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolRoleAttachmentRoleMappingOutput)
}

func (i *IdentityPoolRoleAttachmentRoleMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*IdentityPoolRoleAttachmentRoleMappingArgs] {
	return pulumix.Val(i)
}

type IdentityPoolRoleAttachmentRoleMappingOutput struct{ *pulumi.OutputState }

func (IdentityPoolRoleAttachmentRoleMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolRoleAttachmentRoleMapping)(nil)).Elem()
}

func (o IdentityPoolRoleAttachmentRoleMappingOutput) ToIdentityPoolRoleAttachmentRoleMappingOutput() IdentityPoolRoleAttachmentRoleMappingOutput {
	return o
}

func (o IdentityPoolRoleAttachmentRoleMappingOutput) ToIdentityPoolRoleAttachmentRoleMappingOutputWithContext(ctx context.Context) IdentityPoolRoleAttachmentRoleMappingOutput {
	return o
}

func (o IdentityPoolRoleAttachmentRoleMappingOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPoolRoleAttachmentRoleMapping] {
	return pulumix.Output[IdentityPoolRoleAttachmentRoleMapping]{
		OutputState: o.OutputState,
	}
}

// Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
func (o IdentityPoolRoleAttachmentRoleMappingOutput) AmbiguousRoleResolution() pulumix.Output[*string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMapping](o, func(v IdentityPoolRoleAttachmentRoleMapping) *string { return v.AmbiguousRoleResolution })
}

// A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognitoIdentityProviders` set on `cognito.IdentityPool` resource or a `cognito.IdentityProvider` resource.
func (o IdentityPoolRoleAttachmentRoleMappingOutput) IdentityProvider() pulumix.Output[string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMapping](o, func(v IdentityPoolRoleAttachmentRoleMapping) string { return v.IdentityProvider })
}

// The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
func (o IdentityPoolRoleAttachmentRoleMappingOutput) MappingRules() pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMappingMappingRule, IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput] {
	value := pulumix.Apply[IdentityPoolRoleAttachmentRoleMapping](o, func(v IdentityPoolRoleAttachmentRoleMapping) []IdentityPoolRoleAttachmentRoleMappingMappingRule {
		return v.MappingRules
	})
	return pulumix.GArrayOutput[IdentityPoolRoleAttachmentRoleMappingMappingRule, IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput]{OutputState: value.OutputState}
}

// The role mapping type.
func (o IdentityPoolRoleAttachmentRoleMappingOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMapping](o, func(v IdentityPoolRoleAttachmentRoleMapping) string { return v.Type })
}

type IdentityPoolRoleAttachmentRoleMappingMappingRule struct {
	// The claim name that must be present in the token, for example, "isAdmin" or "paid".
	Claim string `pulumi:"claim"`
	// The match condition that specifies how closely the claim value in the IdP token must match Value.
	MatchType string `pulumi:"matchType"`
	// The role ARN.
	RoleArn string `pulumi:"roleArn"`
	// A brief string that the claim must match, for example, "paid" or "yes".
	Value string `pulumi:"value"`
}

type IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs struct {
	// The claim name that must be present in the token, for example, "isAdmin" or "paid".
	Claim pulumix.Input[string] `pulumi:"claim"`
	// The match condition that specifies how closely the claim value in the IdP token must match Value.
	MatchType pulumix.Input[string] `pulumi:"matchType"`
	// The role ARN.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// A brief string that the claim must match, for example, "paid" or "yes".
	Value pulumix.Input[string] `pulumi:"value"`
}

func (IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolRoleAttachmentRoleMappingMappingRule)(nil)).Elem()
}

func (i IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs) ToIdentityPoolRoleAttachmentRoleMappingMappingRuleOutput() IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput {
	return i.ToIdentityPoolRoleAttachmentRoleMappingMappingRuleOutputWithContext(context.Background())
}

func (i IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs) ToIdentityPoolRoleAttachmentRoleMappingMappingRuleOutputWithContext(ctx context.Context) IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput)
}

func (i *IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*IdentityPoolRoleAttachmentRoleMappingMappingRuleArgs] {
	return pulumix.Val(i)
}

type IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput struct{ *pulumi.OutputState }

func (IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPoolRoleAttachmentRoleMappingMappingRule)(nil)).Elem()
}

func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) ToIdentityPoolRoleAttachmentRoleMappingMappingRuleOutput() IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput {
	return o
}

func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) ToIdentityPoolRoleAttachmentRoleMappingMappingRuleOutputWithContext(ctx context.Context) IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput {
	return o
}

func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPoolRoleAttachmentRoleMappingMappingRule] {
	return pulumix.Output[IdentityPoolRoleAttachmentRoleMappingMappingRule]{
		OutputState: o.OutputState,
	}
}

// The claim name that must be present in the token, for example, "isAdmin" or "paid".
func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) Claim() pulumix.Output[string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMappingMappingRule](o, func(v IdentityPoolRoleAttachmentRoleMappingMappingRule) string { return v.Claim })
}

// The match condition that specifies how closely the claim value in the IdP token must match Value.
func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) MatchType() pulumix.Output[string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMappingMappingRule](o, func(v IdentityPoolRoleAttachmentRoleMappingMappingRule) string { return v.MatchType })
}

// The role ARN.
func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMappingMappingRule](o, func(v IdentityPoolRoleAttachmentRoleMappingMappingRule) string { return v.RoleArn })
}

// A brief string that the claim must match, for example, "paid" or "yes".
func (o IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[IdentityPoolRoleAttachmentRoleMappingMappingRule](o, func(v IdentityPoolRoleAttachmentRoleMappingMappingRule) string { return v.Value })
}

type ManagedUserPoolClientAnalyticsConfiguration struct {
	// Application ARN for an Amazon Pinpoint application. It conflicts with `externalId` and `roleArn`.
	ApplicationArn *string `pulumi:"applicationArn"`
	// Unique identifier for an Amazon Pinpoint application.
	ApplicationId *string `pulumi:"applicationId"`
	// ID for the Analytics Configuration and conflicts with `applicationArn`.
	ExternalId *string `pulumi:"externalId"`
	// ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. It conflicts with `applicationArn`.
	RoleArn *string `pulumi:"roleArn"`
	// If `userDataShared` is set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
	UserDataShared *bool `pulumi:"userDataShared"`
}

type ManagedUserPoolClientAnalyticsConfigurationArgs struct {
	// Application ARN for an Amazon Pinpoint application. It conflicts with `externalId` and `roleArn`.
	ApplicationArn pulumix.Input[*string] `pulumi:"applicationArn"`
	// Unique identifier for an Amazon Pinpoint application.
	ApplicationId pulumix.Input[*string] `pulumi:"applicationId"`
	// ID for the Analytics Configuration and conflicts with `applicationArn`.
	ExternalId pulumix.Input[*string] `pulumi:"externalId"`
	// ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. It conflicts with `applicationArn`.
	RoleArn pulumix.Input[*string] `pulumi:"roleArn"`
	// If `userDataShared` is set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
	UserDataShared pulumix.Input[*bool] `pulumi:"userDataShared"`
}

func (ManagedUserPoolClientAnalyticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedUserPoolClientAnalyticsConfiguration)(nil)).Elem()
}

func (i ManagedUserPoolClientAnalyticsConfigurationArgs) ToManagedUserPoolClientAnalyticsConfigurationOutput() ManagedUserPoolClientAnalyticsConfigurationOutput {
	return i.ToManagedUserPoolClientAnalyticsConfigurationOutputWithContext(context.Background())
}

func (i ManagedUserPoolClientAnalyticsConfigurationArgs) ToManagedUserPoolClientAnalyticsConfigurationOutputWithContext(ctx context.Context) ManagedUserPoolClientAnalyticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedUserPoolClientAnalyticsConfigurationOutput)
}

func (i *ManagedUserPoolClientAnalyticsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ManagedUserPoolClientAnalyticsConfigurationArgs] {
	return pulumix.Val(i)
}

type ManagedUserPoolClientAnalyticsConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedUserPoolClientAnalyticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedUserPoolClientAnalyticsConfiguration)(nil)).Elem()
}

func (o ManagedUserPoolClientAnalyticsConfigurationOutput) ToManagedUserPoolClientAnalyticsConfigurationOutput() ManagedUserPoolClientAnalyticsConfigurationOutput {
	return o
}

func (o ManagedUserPoolClientAnalyticsConfigurationOutput) ToManagedUserPoolClientAnalyticsConfigurationOutputWithContext(ctx context.Context) ManagedUserPoolClientAnalyticsConfigurationOutput {
	return o
}

func (o ManagedUserPoolClientAnalyticsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedUserPoolClientAnalyticsConfiguration] {
	return pulumix.Output[ManagedUserPoolClientAnalyticsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Application ARN for an Amazon Pinpoint application. It conflicts with `externalId` and `roleArn`.
func (o ManagedUserPoolClientAnalyticsConfigurationOutput) ApplicationArn() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientAnalyticsConfiguration](o, func(v ManagedUserPoolClientAnalyticsConfiguration) *string { return v.ApplicationArn })
}

// Unique identifier for an Amazon Pinpoint application.
func (o ManagedUserPoolClientAnalyticsConfigurationOutput) ApplicationId() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientAnalyticsConfiguration](o, func(v ManagedUserPoolClientAnalyticsConfiguration) *string { return v.ApplicationId })
}

// ID for the Analytics Configuration and conflicts with `applicationArn`.
func (o ManagedUserPoolClientAnalyticsConfigurationOutput) ExternalId() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientAnalyticsConfiguration](o, func(v ManagedUserPoolClientAnalyticsConfiguration) *string { return v.ExternalId })
}

// ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. It conflicts with `applicationArn`.
func (o ManagedUserPoolClientAnalyticsConfigurationOutput) RoleArn() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientAnalyticsConfiguration](o, func(v ManagedUserPoolClientAnalyticsConfiguration) *string { return v.RoleArn })
}

// If `userDataShared` is set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
func (o ManagedUserPoolClientAnalyticsConfigurationOutput) UserDataShared() pulumix.Output[*bool] {
	return pulumix.Apply[ManagedUserPoolClientAnalyticsConfiguration](o, func(v ManagedUserPoolClientAnalyticsConfiguration) *bool { return v.UserDataShared })
}

type ManagedUserPoolClientTokenValidityUnits struct {
	// Time unit for the value in `accessTokenValidity` and defaults to `hours`.
	AccessToken *string `pulumi:"accessToken"`
	// Time unit for the value in `idTokenValidity`, and it defaults to `hours`.
	IdToken *string `pulumi:"idToken"`
	// Time unit for the value in `refreshTokenValidity` and defaults to `days`.
	RefreshToken *string `pulumi:"refreshToken"`
}

type ManagedUserPoolClientTokenValidityUnitsArgs struct {
	// Time unit for the value in `accessTokenValidity` and defaults to `hours`.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// Time unit for the value in `idTokenValidity`, and it defaults to `hours`.
	IdToken pulumix.Input[*string] `pulumi:"idToken"`
	// Time unit for the value in `refreshTokenValidity` and defaults to `days`.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (ManagedUserPoolClientTokenValidityUnitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedUserPoolClientTokenValidityUnits)(nil)).Elem()
}

func (i ManagedUserPoolClientTokenValidityUnitsArgs) ToManagedUserPoolClientTokenValidityUnitsOutput() ManagedUserPoolClientTokenValidityUnitsOutput {
	return i.ToManagedUserPoolClientTokenValidityUnitsOutputWithContext(context.Background())
}

func (i ManagedUserPoolClientTokenValidityUnitsArgs) ToManagedUserPoolClientTokenValidityUnitsOutputWithContext(ctx context.Context) ManagedUserPoolClientTokenValidityUnitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedUserPoolClientTokenValidityUnitsOutput)
}

func (i *ManagedUserPoolClientTokenValidityUnitsArgs) ToOutput(ctx context.Context) pulumix.Output[*ManagedUserPoolClientTokenValidityUnitsArgs] {
	return pulumix.Val(i)
}

type ManagedUserPoolClientTokenValidityUnitsOutput struct{ *pulumi.OutputState }

func (ManagedUserPoolClientTokenValidityUnitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedUserPoolClientTokenValidityUnits)(nil)).Elem()
}

func (o ManagedUserPoolClientTokenValidityUnitsOutput) ToManagedUserPoolClientTokenValidityUnitsOutput() ManagedUserPoolClientTokenValidityUnitsOutput {
	return o
}

func (o ManagedUserPoolClientTokenValidityUnitsOutput) ToManagedUserPoolClientTokenValidityUnitsOutputWithContext(ctx context.Context) ManagedUserPoolClientTokenValidityUnitsOutput {
	return o
}

func (o ManagedUserPoolClientTokenValidityUnitsOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedUserPoolClientTokenValidityUnits] {
	return pulumix.Output[ManagedUserPoolClientTokenValidityUnits]{
		OutputState: o.OutputState,
	}
}

// Time unit for the value in `accessTokenValidity` and defaults to `hours`.
func (o ManagedUserPoolClientTokenValidityUnitsOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientTokenValidityUnits](o, func(v ManagedUserPoolClientTokenValidityUnits) *string { return v.AccessToken })
}

// Time unit for the value in `idTokenValidity`, and it defaults to `hours`.
func (o ManagedUserPoolClientTokenValidityUnitsOutput) IdToken() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientTokenValidityUnits](o, func(v ManagedUserPoolClientTokenValidityUnits) *string { return v.IdToken })
}

// Time unit for the value in `refreshTokenValidity` and defaults to `days`.
func (o ManagedUserPoolClientTokenValidityUnitsOutput) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[ManagedUserPoolClientTokenValidityUnits](o, func(v ManagedUserPoolClientTokenValidityUnits) *string { return v.RefreshToken })
}

type ResourceServerScope struct {
	// The scope description.
	ScopeDescription string `pulumi:"scopeDescription"`
	// The scope name.
	ScopeName string `pulumi:"scopeName"`
}

type ResourceServerScopeArgs struct {
	// The scope description.
	ScopeDescription pulumix.Input[string] `pulumi:"scopeDescription"`
	// The scope name.
	ScopeName pulumix.Input[string] `pulumi:"scopeName"`
}

func (ResourceServerScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceServerScope)(nil)).Elem()
}

func (i ResourceServerScopeArgs) ToResourceServerScopeOutput() ResourceServerScopeOutput {
	return i.ToResourceServerScopeOutputWithContext(context.Background())
}

func (i ResourceServerScopeArgs) ToResourceServerScopeOutputWithContext(ctx context.Context) ResourceServerScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceServerScopeOutput)
}

func (i *ResourceServerScopeArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceServerScopeArgs] {
	return pulumix.Val(i)
}

type ResourceServerScopeOutput struct{ *pulumi.OutputState }

func (ResourceServerScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceServerScope)(nil)).Elem()
}

func (o ResourceServerScopeOutput) ToResourceServerScopeOutput() ResourceServerScopeOutput {
	return o
}

func (o ResourceServerScopeOutput) ToResourceServerScopeOutputWithContext(ctx context.Context) ResourceServerScopeOutput {
	return o
}

func (o ResourceServerScopeOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceServerScope] {
	return pulumix.Output[ResourceServerScope]{
		OutputState: o.OutputState,
	}
}

// The scope description.
func (o ResourceServerScopeOutput) ScopeDescription() pulumix.Output[string] {
	return pulumix.Apply[ResourceServerScope](o, func(v ResourceServerScope) string { return v.ScopeDescription })
}

// The scope name.
func (o ResourceServerScopeOutput) ScopeName() pulumix.Output[string] {
	return pulumix.Apply[ResourceServerScope](o, func(v ResourceServerScope) string { return v.ScopeName })
}

type RiskConfigurationAccountTakeoverRiskConfiguration struct {
	// Account takeover risk configuration actions. See details below.
	Actions RiskConfigurationAccountTakeoverRiskConfigurationActions `pulumi:"actions"`
	// The notify configuration used to construct email notifications. See details below.
	NotifyConfiguration RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration `pulumi:"notifyConfiguration"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationArgs struct {
	// Account takeover risk configuration actions. See details below.
	Actions pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs] `pulumi:"actions"`
	// The notify configuration used to construct email notifications. See details below.
	NotifyConfiguration pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs] `pulumi:"notifyConfiguration"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfiguration)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationOutput() RiskConfigurationAccountTakeoverRiskConfigurationOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfiguration)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationOutput() RiskConfigurationAccountTakeoverRiskConfigurationOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfiguration] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfiguration]{
		OutputState: o.OutputState,
	}
}

// Account takeover risk configuration actions. See details below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationOutput) Actions() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActions, RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfiguration) RiskConfigurationAccountTakeoverRiskConfigurationActions {
		return v.Actions
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActions, RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput]{OutputState: value.OutputState}
}

// The notify configuration used to construct email notifications. See details below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationOutput) NotifyConfiguration() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfiguration) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration {
		return v.NotifyConfiguration
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput]{OutputState: value.OutputState}
}

type RiskConfigurationAccountTakeoverRiskConfigurationActions struct {
	// Action to take for a high risk. See action block below.
	HighAction *RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction `pulumi:"highAction"`
	// Action to take for a low risk. See action block below.
	LowAction *RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction `pulumi:"lowAction"`
	// Action to take for a medium risk. See action block below.
	MediumAction *RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction `pulumi:"mediumAction"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs struct {
	// Action to take for a high risk. See action block below.
	HighAction pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs] `pulumi:"highAction"`
	// Action to take for a low risk. See action block below.
	LowAction pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs] `pulumi:"lowAction"`
	// Action to take for a medium risk. See action block below.
	MediumAction pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs] `pulumi:"mediumAction"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActions)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationActionsArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActions)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActions] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActions]{
		OutputState: o.OutputState,
	}
}

// Action to take for a high risk. See action block below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) HighAction() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction, RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActions](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActions) *RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction {
		return v.HighAction
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction, RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput]{OutputState: value.OutputState}
}

// Action to take for a low risk. See action block below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) LowAction() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction, RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActions](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActions) *RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction {
		return v.LowAction
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction, RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput]{OutputState: value.OutputState}
}

// Action to take for a medium risk. See action block below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput) MediumAction() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction, RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActions](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActions) *RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction {
		return v.MediumAction
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction, RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput]{OutputState: value.OutputState}
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction struct {
	// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
	EventAction string `pulumi:"eventAction"`
	Notify      bool   `pulumi:"notify"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs struct {
	// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
	EventAction pulumix.Input[string] `pulumi:"eventAction"`
	Notify      pulumix.Input[bool]   `pulumi:"notify"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction]{
		OutputState: o.OutputState,
	}
}

// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput) EventAction() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction) string {
		return v.EventAction
	})
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput) Notify() pulumix.Output[bool] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActionsHighAction) bool { return v.Notify })
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction struct {
	// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
	EventAction string `pulumi:"eventAction"`
	Notify      bool   `pulumi:"notify"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs struct {
	// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
	EventAction pulumix.Input[string] `pulumi:"eventAction"`
	Notify      pulumix.Input[bool]   `pulumi:"notify"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction]{
		OutputState: o.OutputState,
	}
}

// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput) EventAction() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction) string { return v.EventAction })
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput) Notify() pulumix.Output[bool] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActionsLowAction) bool { return v.Notify })
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction struct {
	// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
	EventAction string `pulumi:"eventAction"`
	Notify      bool   `pulumi:"notify"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs struct {
	// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
	EventAction pulumix.Input[string] `pulumi:"eventAction"`
	Notify      pulumix.Input[bool]   `pulumi:"notify"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput() RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction]{
		OutputState: o.OutputState,
	}
}

// The action to take in response to the account takeover action. Valid values are `BLOCK`, `MFA_IF_CONFIGURED`, `MFA_REQUIRED` and `NO_ACTION`.
func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput) EventAction() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction) string {
		return v.EventAction
	})
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput) Notify() pulumix.Output[bool] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumAction) bool { return v.Notify })
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration struct {
	// Email template used when a detected risk event is blocked. See notify email type below.
	BlockEmail *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail `pulumi:"blockEmail"`
	// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
	From *string `pulumi:"from"`
	// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
	MfaEmail *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail `pulumi:"mfaEmail"`
	// The email template used when a detected risk event is allowed. See notify email type below.
	NoActionEmail *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail `pulumi:"noActionEmail"`
	// The destination to which the receiver of an email should reply to.
	ReplyTo *string `pulumi:"replyTo"`
	// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
	SourceArn string `pulumi:"sourceArn"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs struct {
	// Email template used when a detected risk event is blocked. See notify email type below.
	BlockEmail pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs] `pulumi:"blockEmail"`
	// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
	From pulumix.Input[*string] `pulumi:"from"`
	// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
	MfaEmail pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs] `pulumi:"mfaEmail"`
	// The email template used when a detected risk event is allowed. See notify email type below.
	NoActionEmail pulumix.Input[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs] `pulumi:"noActionEmail"`
	// The destination to which the receiver of an email should reply to.
	ReplyTo pulumix.Input[*string] `pulumi:"replyTo"`
	// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
	SourceArn pulumix.Input[string] `pulumi:"sourceArn"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration]{
		OutputState: o.OutputState,
	}
}

// Email template used when a detected risk event is blocked. See notify email type below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) BlockEmail() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration) *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail {
		return v.BlockEmail
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput]{OutputState: value.OutputState}
}

// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) From() pulumix.Output[*string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration) *string { return v.From })
}

// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) MfaEmail() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration) *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail {
		return v.MfaEmail
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput]{OutputState: value.OutputState}
}

// The email template used when a detected risk event is allowed. See notify email type below.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) NoActionEmail() pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput] {
	value := pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration) *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail {
		return v.NoActionEmail
	})
	return pulumix.GPtrOutput[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail, RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput]{OutputState: value.OutputState}
}

// The destination to which the receiver of an email should reply to.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) ReplyTo() pulumix.Output[*string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration) *string { return v.ReplyTo })
}

// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput) SourceArn() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfiguration) string {
		return v.SourceArn
	})
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail struct {
	// The email HTML body.
	HtmlBody string `pulumi:"htmlBody"`
	// The email subject.
	Subject string `pulumi:"subject"`
	// The email text body.
	TextBody string `pulumi:"textBody"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs struct {
	// The email HTML body.
	HtmlBody pulumix.Input[string] `pulumi:"htmlBody"`
	// The email subject.
	Subject pulumix.Input[string] `pulumi:"subject"`
	// The email text body.
	TextBody pulumix.Input[string] `pulumi:"textBody"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail]{
		OutputState: o.OutputState,
	}
}

// The email HTML body.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) HtmlBody() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail) string {
		return v.HtmlBody
	})
}

// The email subject.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) Subject() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail) string {
		return v.Subject
	})
}

// The email text body.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput) TextBody() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail) string {
		return v.TextBody
	})
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail struct {
	// The email HTML body.
	HtmlBody string `pulumi:"htmlBody"`
	// The email subject.
	Subject string `pulumi:"subject"`
	// The email text body.
	TextBody string `pulumi:"textBody"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs struct {
	// The email HTML body.
	HtmlBody pulumix.Input[string] `pulumi:"htmlBody"`
	// The email subject.
	Subject pulumix.Input[string] `pulumi:"subject"`
	// The email text body.
	TextBody pulumix.Input[string] `pulumi:"textBody"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail]{
		OutputState: o.OutputState,
	}
}

// The email HTML body.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) HtmlBody() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail) string {
		return v.HtmlBody
	})
}

// The email subject.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) Subject() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail) string {
		return v.Subject
	})
}

// The email text body.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput) TextBody() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail) string {
		return v.TextBody
	})
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail struct {
	// The email HTML body.
	HtmlBody string `pulumi:"htmlBody"`
	// The email subject.
	Subject string `pulumi:"subject"`
	// The email text body.
	TextBody string `pulumi:"textBody"`
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs struct {
	// The email HTML body.
	HtmlBody pulumix.Input[string] `pulumi:"htmlBody"`
	// The email subject.
	Subject pulumix.Input[string] `pulumi:"subject"`
	// The email text body.
	TextBody pulumix.Input[string] `pulumi:"textBody"`
}

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail)(nil)).Elem()
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput {
	return i.ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputWithContext(context.Background())
}

func (i RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput)
}

func (i *RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput struct{ *pulumi.OutputState }

func (RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail)(nil)).Elem()
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput() RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) ToRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputWithContext(ctx context.Context) RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput {
	return o
}

func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail] {
	return pulumix.Output[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail]{
		OutputState: o.OutputState,
	}
}

// The email HTML body.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) HtmlBody() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail) string {
		return v.HtmlBody
	})
}

// The email subject.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) Subject() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail) string {
		return v.Subject
	})
}

// The email text body.
func (o RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput) TextBody() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail](o, func(v RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail) string {
		return v.TextBody
	})
}

type RiskConfigurationCompromisedCredentialsRiskConfiguration struct {
	// The compromised credentials risk configuration actions. See details below.
	Actions RiskConfigurationCompromisedCredentialsRiskConfigurationActions `pulumi:"actions"`
	// Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
	EventFilters []string `pulumi:"eventFilters"`
}

type RiskConfigurationCompromisedCredentialsRiskConfigurationArgs struct {
	// The compromised credentials risk configuration actions. See details below.
	Actions pulumix.Input[*RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs] `pulumi:"actions"`
	// Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
	EventFilters pulumix.Input[[]string] `pulumi:"eventFilters"`
}

func (RiskConfigurationCompromisedCredentialsRiskConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationCompromisedCredentialsRiskConfiguration)(nil)).Elem()
}

func (i RiskConfigurationCompromisedCredentialsRiskConfigurationArgs) ToRiskConfigurationCompromisedCredentialsRiskConfigurationOutput() RiskConfigurationCompromisedCredentialsRiskConfigurationOutput {
	return i.ToRiskConfigurationCompromisedCredentialsRiskConfigurationOutputWithContext(context.Background())
}

func (i RiskConfigurationCompromisedCredentialsRiskConfigurationArgs) ToRiskConfigurationCompromisedCredentialsRiskConfigurationOutputWithContext(ctx context.Context) RiskConfigurationCompromisedCredentialsRiskConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationCompromisedCredentialsRiskConfigurationOutput)
}

func (i *RiskConfigurationCompromisedCredentialsRiskConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationCompromisedCredentialsRiskConfigurationArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationCompromisedCredentialsRiskConfigurationOutput struct{ *pulumi.OutputState }

func (RiskConfigurationCompromisedCredentialsRiskConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationCompromisedCredentialsRiskConfiguration)(nil)).Elem()
}

func (o RiskConfigurationCompromisedCredentialsRiskConfigurationOutput) ToRiskConfigurationCompromisedCredentialsRiskConfigurationOutput() RiskConfigurationCompromisedCredentialsRiskConfigurationOutput {
	return o
}

func (o RiskConfigurationCompromisedCredentialsRiskConfigurationOutput) ToRiskConfigurationCompromisedCredentialsRiskConfigurationOutputWithContext(ctx context.Context) RiskConfigurationCompromisedCredentialsRiskConfigurationOutput {
	return o
}

func (o RiskConfigurationCompromisedCredentialsRiskConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationCompromisedCredentialsRiskConfiguration] {
	return pulumix.Output[RiskConfigurationCompromisedCredentialsRiskConfiguration]{
		OutputState: o.OutputState,
	}
}

// The compromised credentials risk configuration actions. See details below.
func (o RiskConfigurationCompromisedCredentialsRiskConfigurationOutput) Actions() pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfigurationActions, RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput] {
	value := pulumix.Apply[RiskConfigurationCompromisedCredentialsRiskConfiguration](o, func(v RiskConfigurationCompromisedCredentialsRiskConfiguration) RiskConfigurationCompromisedCredentialsRiskConfigurationActions {
		return v.Actions
	})
	return pulumix.GPtrOutput[RiskConfigurationCompromisedCredentialsRiskConfigurationActions, RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput]{OutputState: value.OutputState}
}

// Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are `SIGN_IN`, `PASSWORD_CHANGE`, and `SIGN_UP`.
func (o RiskConfigurationCompromisedCredentialsRiskConfigurationOutput) EventFilters() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RiskConfigurationCompromisedCredentialsRiskConfiguration](o, func(v RiskConfigurationCompromisedCredentialsRiskConfiguration) []string { return v.EventFilters })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type RiskConfigurationCompromisedCredentialsRiskConfigurationActions struct {
	// The event action. Valid values are `BLOCK` or `NO_ACTION`.
	EventAction string `pulumi:"eventAction"`
}

type RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs struct {
	// The event action. Valid values are `BLOCK` or `NO_ACTION`.
	EventAction pulumix.Input[string] `pulumi:"eventAction"`
}

func (RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationCompromisedCredentialsRiskConfigurationActions)(nil)).Elem()
}

func (i RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs) ToRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput() RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput {
	return i.ToRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputWithContext(context.Background())
}

func (i RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs) ToRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputWithContext(ctx context.Context) RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput)
}

func (i *RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationCompromisedCredentialsRiskConfigurationActionsArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput struct{ *pulumi.OutputState }

func (RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationCompromisedCredentialsRiskConfigurationActions)(nil)).Elem()
}

func (o RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput) ToRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput() RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput {
	return o
}

func (o RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput) ToRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputWithContext(ctx context.Context) RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput {
	return o
}

func (o RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationCompromisedCredentialsRiskConfigurationActions] {
	return pulumix.Output[RiskConfigurationCompromisedCredentialsRiskConfigurationActions]{
		OutputState: o.OutputState,
	}
}

// The event action. Valid values are `BLOCK` or `NO_ACTION`.
func (o RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput) EventAction() pulumix.Output[string] {
	return pulumix.Apply[RiskConfigurationCompromisedCredentialsRiskConfigurationActions](o, func(v RiskConfigurationCompromisedCredentialsRiskConfigurationActions) string { return v.EventAction })
}

type RiskConfigurationRiskExceptionConfiguration struct {
	// Overrides the risk decision to always block the pre-authentication requests.
	// The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
	// Can contain a maximum of 200 items.
	BlockedIpRangeLists []string `pulumi:"blockedIpRangeLists"`
	// Risk detection isn't performed on the IP addresses in this range list.
	// The IP range is in CIDR notation.
	// Can contain a maximum of 200 items.
	SkippedIpRangeLists []string `pulumi:"skippedIpRangeLists"`
}

type RiskConfigurationRiskExceptionConfigurationArgs struct {
	// Overrides the risk decision to always block the pre-authentication requests.
	// The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
	// Can contain a maximum of 200 items.
	BlockedIpRangeLists pulumix.Input[[]string] `pulumi:"blockedIpRangeLists"`
	// Risk detection isn't performed on the IP addresses in this range list.
	// The IP range is in CIDR notation.
	// Can contain a maximum of 200 items.
	SkippedIpRangeLists pulumix.Input[[]string] `pulumi:"skippedIpRangeLists"`
}

func (RiskConfigurationRiskExceptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationRiskExceptionConfiguration)(nil)).Elem()
}

func (i RiskConfigurationRiskExceptionConfigurationArgs) ToRiskConfigurationRiskExceptionConfigurationOutput() RiskConfigurationRiskExceptionConfigurationOutput {
	return i.ToRiskConfigurationRiskExceptionConfigurationOutputWithContext(context.Background())
}

func (i RiskConfigurationRiskExceptionConfigurationArgs) ToRiskConfigurationRiskExceptionConfigurationOutputWithContext(ctx context.Context) RiskConfigurationRiskExceptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RiskConfigurationRiskExceptionConfigurationOutput)
}

func (i *RiskConfigurationRiskExceptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RiskConfigurationRiskExceptionConfigurationArgs] {
	return pulumix.Val(i)
}

type RiskConfigurationRiskExceptionConfigurationOutput struct{ *pulumi.OutputState }

func (RiskConfigurationRiskExceptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RiskConfigurationRiskExceptionConfiguration)(nil)).Elem()
}

func (o RiskConfigurationRiskExceptionConfigurationOutput) ToRiskConfigurationRiskExceptionConfigurationOutput() RiskConfigurationRiskExceptionConfigurationOutput {
	return o
}

func (o RiskConfigurationRiskExceptionConfigurationOutput) ToRiskConfigurationRiskExceptionConfigurationOutputWithContext(ctx context.Context) RiskConfigurationRiskExceptionConfigurationOutput {
	return o
}

func (o RiskConfigurationRiskExceptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RiskConfigurationRiskExceptionConfiguration] {
	return pulumix.Output[RiskConfigurationRiskExceptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Overrides the risk decision to always block the pre-authentication requests.
// The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
// Can contain a maximum of 200 items.
func (o RiskConfigurationRiskExceptionConfigurationOutput) BlockedIpRangeLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RiskConfigurationRiskExceptionConfiguration](o, func(v RiskConfigurationRiskExceptionConfiguration) []string { return v.BlockedIpRangeLists })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Risk detection isn't performed on the IP addresses in this range list.
// The IP range is in CIDR notation.
// Can contain a maximum of 200 items.
func (o RiskConfigurationRiskExceptionConfigurationOutput) SkippedIpRangeLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RiskConfigurationRiskExceptionConfiguration](o, func(v RiskConfigurationRiskExceptionConfiguration) []string { return v.SkippedIpRangeLists })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type UserPoolAccountRecoverySetting struct {
	// List of Account Recovery Options of the following structure:
	RecoveryMechanisms []UserPoolAccountRecoverySettingRecoveryMechanism `pulumi:"recoveryMechanisms"`
}

type UserPoolAccountRecoverySettingArgs struct {
	// List of Account Recovery Options of the following structure:
	RecoveryMechanisms pulumix.Input[[]*UserPoolAccountRecoverySettingRecoveryMechanismArgs] `pulumi:"recoveryMechanisms"`
}

func (UserPoolAccountRecoverySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAccountRecoverySetting)(nil)).Elem()
}

func (i UserPoolAccountRecoverySettingArgs) ToUserPoolAccountRecoverySettingOutput() UserPoolAccountRecoverySettingOutput {
	return i.ToUserPoolAccountRecoverySettingOutputWithContext(context.Background())
}

func (i UserPoolAccountRecoverySettingArgs) ToUserPoolAccountRecoverySettingOutputWithContext(ctx context.Context) UserPoolAccountRecoverySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolAccountRecoverySettingOutput)
}

func (i *UserPoolAccountRecoverySettingArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolAccountRecoverySettingArgs] {
	return pulumix.Val(i)
}

type UserPoolAccountRecoverySettingOutput struct{ *pulumi.OutputState }

func (UserPoolAccountRecoverySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAccountRecoverySetting)(nil)).Elem()
}

func (o UserPoolAccountRecoverySettingOutput) ToUserPoolAccountRecoverySettingOutput() UserPoolAccountRecoverySettingOutput {
	return o
}

func (o UserPoolAccountRecoverySettingOutput) ToUserPoolAccountRecoverySettingOutputWithContext(ctx context.Context) UserPoolAccountRecoverySettingOutput {
	return o
}

func (o UserPoolAccountRecoverySettingOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolAccountRecoverySetting] {
	return pulumix.Output[UserPoolAccountRecoverySetting]{
		OutputState: o.OutputState,
	}
}

// List of Account Recovery Options of the following structure:
func (o UserPoolAccountRecoverySettingOutput) RecoveryMechanisms() pulumix.GArrayOutput[UserPoolAccountRecoverySettingRecoveryMechanism, UserPoolAccountRecoverySettingRecoveryMechanismOutput] {
	value := pulumix.Apply[UserPoolAccountRecoverySetting](o, func(v UserPoolAccountRecoverySetting) []UserPoolAccountRecoverySettingRecoveryMechanism {
		return v.RecoveryMechanisms
	})
	return pulumix.GArrayOutput[UserPoolAccountRecoverySettingRecoveryMechanism, UserPoolAccountRecoverySettingRecoveryMechanismOutput]{OutputState: value.OutputState}
}

type UserPoolAccountRecoverySettingRecoveryMechanism struct {
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name string `pulumi:"name"`
	// Positive integer specifying priority of a method with 1 being the highest priority.
	Priority int `pulumi:"priority"`
}

type UserPoolAccountRecoverySettingRecoveryMechanismArgs struct {
	// Name of the user pool.
	//
	// The following arguments are optional:
	Name pulumix.Input[string] `pulumi:"name"`
	// Positive integer specifying priority of a method with 1 being the highest priority.
	Priority pulumix.Input[int] `pulumi:"priority"`
}

func (UserPoolAccountRecoverySettingRecoveryMechanismArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAccountRecoverySettingRecoveryMechanism)(nil)).Elem()
}

func (i UserPoolAccountRecoverySettingRecoveryMechanismArgs) ToUserPoolAccountRecoverySettingRecoveryMechanismOutput() UserPoolAccountRecoverySettingRecoveryMechanismOutput {
	return i.ToUserPoolAccountRecoverySettingRecoveryMechanismOutputWithContext(context.Background())
}

func (i UserPoolAccountRecoverySettingRecoveryMechanismArgs) ToUserPoolAccountRecoverySettingRecoveryMechanismOutputWithContext(ctx context.Context) UserPoolAccountRecoverySettingRecoveryMechanismOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolAccountRecoverySettingRecoveryMechanismOutput)
}

func (i *UserPoolAccountRecoverySettingRecoveryMechanismArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolAccountRecoverySettingRecoveryMechanismArgs] {
	return pulumix.Val(i)
}

type UserPoolAccountRecoverySettingRecoveryMechanismOutput struct{ *pulumi.OutputState }

func (UserPoolAccountRecoverySettingRecoveryMechanismOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAccountRecoverySettingRecoveryMechanism)(nil)).Elem()
}

func (o UserPoolAccountRecoverySettingRecoveryMechanismOutput) ToUserPoolAccountRecoverySettingRecoveryMechanismOutput() UserPoolAccountRecoverySettingRecoveryMechanismOutput {
	return o
}

func (o UserPoolAccountRecoverySettingRecoveryMechanismOutput) ToUserPoolAccountRecoverySettingRecoveryMechanismOutputWithContext(ctx context.Context) UserPoolAccountRecoverySettingRecoveryMechanismOutput {
	return o
}

func (o UserPoolAccountRecoverySettingRecoveryMechanismOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolAccountRecoverySettingRecoveryMechanism] {
	return pulumix.Output[UserPoolAccountRecoverySettingRecoveryMechanism]{
		OutputState: o.OutputState,
	}
}

// Name of the user pool.
//
// The following arguments are optional:
func (o UserPoolAccountRecoverySettingRecoveryMechanismOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserPoolAccountRecoverySettingRecoveryMechanism](o, func(v UserPoolAccountRecoverySettingRecoveryMechanism) string { return v.Name })
}

// Positive integer specifying priority of a method with 1 being the highest priority.
func (o UserPoolAccountRecoverySettingRecoveryMechanismOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[UserPoolAccountRecoverySettingRecoveryMechanism](o, func(v UserPoolAccountRecoverySettingRecoveryMechanism) int { return v.Priority })
}

type UserPoolAdminCreateUserConfig struct {
	// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
	AllowAdminCreateUserOnly *bool `pulumi:"allowAdminCreateUserOnly"`
	// Invite message template structure. Detailed below.
	InviteMessageTemplate *UserPoolAdminCreateUserConfigInviteMessageTemplate `pulumi:"inviteMessageTemplate"`
}

type UserPoolAdminCreateUserConfigArgs struct {
	// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
	AllowAdminCreateUserOnly pulumix.Input[*bool] `pulumi:"allowAdminCreateUserOnly"`
	// Invite message template structure. Detailed below.
	InviteMessageTemplate pulumix.Input[*UserPoolAdminCreateUserConfigInviteMessageTemplateArgs] `pulumi:"inviteMessageTemplate"`
}

func (UserPoolAdminCreateUserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAdminCreateUserConfig)(nil)).Elem()
}

func (i UserPoolAdminCreateUserConfigArgs) ToUserPoolAdminCreateUserConfigOutput() UserPoolAdminCreateUserConfigOutput {
	return i.ToUserPoolAdminCreateUserConfigOutputWithContext(context.Background())
}

func (i UserPoolAdminCreateUserConfigArgs) ToUserPoolAdminCreateUserConfigOutputWithContext(ctx context.Context) UserPoolAdminCreateUserConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolAdminCreateUserConfigOutput)
}

func (i *UserPoolAdminCreateUserConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolAdminCreateUserConfigArgs] {
	return pulumix.Val(i)
}

type UserPoolAdminCreateUserConfigOutput struct{ *pulumi.OutputState }

func (UserPoolAdminCreateUserConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAdminCreateUserConfig)(nil)).Elem()
}

func (o UserPoolAdminCreateUserConfigOutput) ToUserPoolAdminCreateUserConfigOutput() UserPoolAdminCreateUserConfigOutput {
	return o
}

func (o UserPoolAdminCreateUserConfigOutput) ToUserPoolAdminCreateUserConfigOutputWithContext(ctx context.Context) UserPoolAdminCreateUserConfigOutput {
	return o
}

func (o UserPoolAdminCreateUserConfigOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolAdminCreateUserConfig] {
	return pulumix.Output[UserPoolAdminCreateUserConfig]{
		OutputState: o.OutputState,
	}
}

// Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
func (o UserPoolAdminCreateUserConfigOutput) AllowAdminCreateUserOnly() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolAdminCreateUserConfig](o, func(v UserPoolAdminCreateUserConfig) *bool { return v.AllowAdminCreateUserOnly })
}

// Invite message template structure. Detailed below.
func (o UserPoolAdminCreateUserConfigOutput) InviteMessageTemplate() pulumix.GPtrOutput[UserPoolAdminCreateUserConfigInviteMessageTemplate, UserPoolAdminCreateUserConfigInviteMessageTemplateOutput] {
	value := pulumix.Apply[UserPoolAdminCreateUserConfig](o, func(v UserPoolAdminCreateUserConfig) *UserPoolAdminCreateUserConfigInviteMessageTemplate {
		return v.InviteMessageTemplate
	})
	return pulumix.GPtrOutput[UserPoolAdminCreateUserConfigInviteMessageTemplate, UserPoolAdminCreateUserConfigInviteMessageTemplateOutput]{OutputState: value.OutputState}
}

type UserPoolAdminCreateUserConfigInviteMessageTemplate struct {
	// Message template for email messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
	EmailMessage *string `pulumi:"emailMessage"`
	// Subject line for email messages.
	EmailSubject *string `pulumi:"emailSubject"`
	// Message template for SMS messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
	SmsMessage *string `pulumi:"smsMessage"`
}

type UserPoolAdminCreateUserConfigInviteMessageTemplateArgs struct {
	// Message template for email messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
	EmailMessage pulumix.Input[*string] `pulumi:"emailMessage"`
	// Subject line for email messages.
	EmailSubject pulumix.Input[*string] `pulumi:"emailSubject"`
	// Message template for SMS messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
	SmsMessage pulumix.Input[*string] `pulumi:"smsMessage"`
}

func (UserPoolAdminCreateUserConfigInviteMessageTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAdminCreateUserConfigInviteMessageTemplate)(nil)).Elem()
}

func (i UserPoolAdminCreateUserConfigInviteMessageTemplateArgs) ToUserPoolAdminCreateUserConfigInviteMessageTemplateOutput() UserPoolAdminCreateUserConfigInviteMessageTemplateOutput {
	return i.ToUserPoolAdminCreateUserConfigInviteMessageTemplateOutputWithContext(context.Background())
}

func (i UserPoolAdminCreateUserConfigInviteMessageTemplateArgs) ToUserPoolAdminCreateUserConfigInviteMessageTemplateOutputWithContext(ctx context.Context) UserPoolAdminCreateUserConfigInviteMessageTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolAdminCreateUserConfigInviteMessageTemplateOutput)
}

func (i *UserPoolAdminCreateUserConfigInviteMessageTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolAdminCreateUserConfigInviteMessageTemplateArgs] {
	return pulumix.Val(i)
}

type UserPoolAdminCreateUserConfigInviteMessageTemplateOutput struct{ *pulumi.OutputState }

func (UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolAdminCreateUserConfigInviteMessageTemplate)(nil)).Elem()
}

func (o UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) ToUserPoolAdminCreateUserConfigInviteMessageTemplateOutput() UserPoolAdminCreateUserConfigInviteMessageTemplateOutput {
	return o
}

func (o UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) ToUserPoolAdminCreateUserConfigInviteMessageTemplateOutputWithContext(ctx context.Context) UserPoolAdminCreateUserConfigInviteMessageTemplateOutput {
	return o
}

func (o UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolAdminCreateUserConfigInviteMessageTemplate] {
	return pulumix.Output[UserPoolAdminCreateUserConfigInviteMessageTemplate]{
		OutputState: o.OutputState,
	}
}

// Message template for email messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
func (o UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) EmailMessage() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolAdminCreateUserConfigInviteMessageTemplate](o, func(v UserPoolAdminCreateUserConfigInviteMessageTemplate) *string { return v.EmailMessage })
}

// Subject line for email messages.
func (o UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) EmailSubject() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolAdminCreateUserConfigInviteMessageTemplate](o, func(v UserPoolAdminCreateUserConfigInviteMessageTemplate) *string { return v.EmailSubject })
}

// Message template for SMS messages. Must contain `{username}` and `{####}` placeholders, for username and temporary password, respectively.
func (o UserPoolAdminCreateUserConfigInviteMessageTemplateOutput) SmsMessage() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolAdminCreateUserConfigInviteMessageTemplate](o, func(v UserPoolAdminCreateUserConfigInviteMessageTemplate) *string { return v.SmsMessage })
}

type UserPoolClientAnalyticsConfiguration struct {
	// Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
	ApplicationArn *string `pulumi:"applicationArn"`
	// Application ID for an Amazon Pinpoint application.
	ApplicationId *string `pulumi:"applicationId"`
	// ID for the Analytics Configuration. Conflicts with `applicationArn`.
	ExternalId *string `pulumi:"externalId"`
	// ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
	RoleArn *string `pulumi:"roleArn"`
	// If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
	UserDataShared *bool `pulumi:"userDataShared"`
}

type UserPoolClientAnalyticsConfigurationArgs struct {
	// Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
	ApplicationArn pulumix.Input[*string] `pulumi:"applicationArn"`
	// Application ID for an Amazon Pinpoint application.
	ApplicationId pulumix.Input[*string] `pulumi:"applicationId"`
	// ID for the Analytics Configuration. Conflicts with `applicationArn`.
	ExternalId pulumix.Input[*string] `pulumi:"externalId"`
	// ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
	RoleArn pulumix.Input[*string] `pulumi:"roleArn"`
	// If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
	UserDataShared pulumix.Input[*bool] `pulumi:"userDataShared"`
}

func (UserPoolClientAnalyticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolClientAnalyticsConfiguration)(nil)).Elem()
}

func (i UserPoolClientAnalyticsConfigurationArgs) ToUserPoolClientAnalyticsConfigurationOutput() UserPoolClientAnalyticsConfigurationOutput {
	return i.ToUserPoolClientAnalyticsConfigurationOutputWithContext(context.Background())
}

func (i UserPoolClientAnalyticsConfigurationArgs) ToUserPoolClientAnalyticsConfigurationOutputWithContext(ctx context.Context) UserPoolClientAnalyticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolClientAnalyticsConfigurationOutput)
}

func (i *UserPoolClientAnalyticsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolClientAnalyticsConfigurationArgs] {
	return pulumix.Val(i)
}

type UserPoolClientAnalyticsConfigurationOutput struct{ *pulumi.OutputState }

func (UserPoolClientAnalyticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolClientAnalyticsConfiguration)(nil)).Elem()
}

func (o UserPoolClientAnalyticsConfigurationOutput) ToUserPoolClientAnalyticsConfigurationOutput() UserPoolClientAnalyticsConfigurationOutput {
	return o
}

func (o UserPoolClientAnalyticsConfigurationOutput) ToUserPoolClientAnalyticsConfigurationOutputWithContext(ctx context.Context) UserPoolClientAnalyticsConfigurationOutput {
	return o
}

func (o UserPoolClientAnalyticsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolClientAnalyticsConfiguration] {
	return pulumix.Output[UserPoolClientAnalyticsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
func (o UserPoolClientAnalyticsConfigurationOutput) ApplicationArn() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientAnalyticsConfiguration](o, func(v UserPoolClientAnalyticsConfiguration) *string { return v.ApplicationArn })
}

// Application ID for an Amazon Pinpoint application.
func (o UserPoolClientAnalyticsConfigurationOutput) ApplicationId() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientAnalyticsConfiguration](o, func(v UserPoolClientAnalyticsConfiguration) *string { return v.ApplicationId })
}

// ID for the Analytics Configuration. Conflicts with `applicationArn`.
func (o UserPoolClientAnalyticsConfigurationOutput) ExternalId() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientAnalyticsConfiguration](o, func(v UserPoolClientAnalyticsConfiguration) *string { return v.ExternalId })
}

// ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
func (o UserPoolClientAnalyticsConfigurationOutput) RoleArn() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientAnalyticsConfiguration](o, func(v UserPoolClientAnalyticsConfiguration) *string { return v.RoleArn })
}

// If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
func (o UserPoolClientAnalyticsConfigurationOutput) UserDataShared() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolClientAnalyticsConfiguration](o, func(v UserPoolClientAnalyticsConfiguration) *bool { return v.UserDataShared })
}

type UserPoolClientTokenValidityUnits struct {
	// Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
	AccessToken *string `pulumi:"accessToken"`
	// Time unit in for the value in `idTokenValidity`, defaults to `hours`.
	IdToken *string `pulumi:"idToken"`
	// Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
	RefreshToken *string `pulumi:"refreshToken"`
}

type UserPoolClientTokenValidityUnitsArgs struct {
	// Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
	AccessToken pulumix.Input[*string] `pulumi:"accessToken"`
	// Time unit in for the value in `idTokenValidity`, defaults to `hours`.
	IdToken pulumix.Input[*string] `pulumi:"idToken"`
	// Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
	RefreshToken pulumix.Input[*string] `pulumi:"refreshToken"`
}

func (UserPoolClientTokenValidityUnitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolClientTokenValidityUnits)(nil)).Elem()
}

func (i UserPoolClientTokenValidityUnitsArgs) ToUserPoolClientTokenValidityUnitsOutput() UserPoolClientTokenValidityUnitsOutput {
	return i.ToUserPoolClientTokenValidityUnitsOutputWithContext(context.Background())
}

func (i UserPoolClientTokenValidityUnitsArgs) ToUserPoolClientTokenValidityUnitsOutputWithContext(ctx context.Context) UserPoolClientTokenValidityUnitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolClientTokenValidityUnitsOutput)
}

func (i *UserPoolClientTokenValidityUnitsArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolClientTokenValidityUnitsArgs] {
	return pulumix.Val(i)
}

type UserPoolClientTokenValidityUnitsOutput struct{ *pulumi.OutputState }

func (UserPoolClientTokenValidityUnitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolClientTokenValidityUnits)(nil)).Elem()
}

func (o UserPoolClientTokenValidityUnitsOutput) ToUserPoolClientTokenValidityUnitsOutput() UserPoolClientTokenValidityUnitsOutput {
	return o
}

func (o UserPoolClientTokenValidityUnitsOutput) ToUserPoolClientTokenValidityUnitsOutputWithContext(ctx context.Context) UserPoolClientTokenValidityUnitsOutput {
	return o
}

func (o UserPoolClientTokenValidityUnitsOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolClientTokenValidityUnits] {
	return pulumix.Output[UserPoolClientTokenValidityUnits]{
		OutputState: o.OutputState,
	}
}

// Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
func (o UserPoolClientTokenValidityUnitsOutput) AccessToken() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientTokenValidityUnits](o, func(v UserPoolClientTokenValidityUnits) *string { return v.AccessToken })
}

// Time unit in for the value in `idTokenValidity`, defaults to `hours`.
func (o UserPoolClientTokenValidityUnitsOutput) IdToken() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientTokenValidityUnits](o, func(v UserPoolClientTokenValidityUnits) *string { return v.IdToken })
}

// Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
func (o UserPoolClientTokenValidityUnitsOutput) RefreshToken() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolClientTokenValidityUnits](o, func(v UserPoolClientTokenValidityUnits) *string { return v.RefreshToken })
}

type UserPoolDeviceConfiguration struct {
	// Whether a challenge is required on a new device. Only applicable to a new device.
	ChallengeRequiredOnNewDevice *bool `pulumi:"challengeRequiredOnNewDevice"`
	// Whether a device is only remembered on user prompt. `false` equates to "Always" remember, `true` is "User Opt In," and not using a `deviceConfiguration` block is "No."
	DeviceOnlyRememberedOnUserPrompt *bool `pulumi:"deviceOnlyRememberedOnUserPrompt"`
}

type UserPoolDeviceConfigurationArgs struct {
	// Whether a challenge is required on a new device. Only applicable to a new device.
	ChallengeRequiredOnNewDevice pulumix.Input[*bool] `pulumi:"challengeRequiredOnNewDevice"`
	// Whether a device is only remembered on user prompt. `false` equates to "Always" remember, `true` is "User Opt In," and not using a `deviceConfiguration` block is "No."
	DeviceOnlyRememberedOnUserPrompt pulumix.Input[*bool] `pulumi:"deviceOnlyRememberedOnUserPrompt"`
}

func (UserPoolDeviceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolDeviceConfiguration)(nil)).Elem()
}

func (i UserPoolDeviceConfigurationArgs) ToUserPoolDeviceConfigurationOutput() UserPoolDeviceConfigurationOutput {
	return i.ToUserPoolDeviceConfigurationOutputWithContext(context.Background())
}

func (i UserPoolDeviceConfigurationArgs) ToUserPoolDeviceConfigurationOutputWithContext(ctx context.Context) UserPoolDeviceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolDeviceConfigurationOutput)
}

func (i *UserPoolDeviceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolDeviceConfigurationArgs] {
	return pulumix.Val(i)
}

type UserPoolDeviceConfigurationOutput struct{ *pulumi.OutputState }

func (UserPoolDeviceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolDeviceConfiguration)(nil)).Elem()
}

func (o UserPoolDeviceConfigurationOutput) ToUserPoolDeviceConfigurationOutput() UserPoolDeviceConfigurationOutput {
	return o
}

func (o UserPoolDeviceConfigurationOutput) ToUserPoolDeviceConfigurationOutputWithContext(ctx context.Context) UserPoolDeviceConfigurationOutput {
	return o
}

func (o UserPoolDeviceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolDeviceConfiguration] {
	return pulumix.Output[UserPoolDeviceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether a challenge is required on a new device. Only applicable to a new device.
func (o UserPoolDeviceConfigurationOutput) ChallengeRequiredOnNewDevice() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolDeviceConfiguration](o, func(v UserPoolDeviceConfiguration) *bool { return v.ChallengeRequiredOnNewDevice })
}

// Whether a device is only remembered on user prompt. `false` equates to "Always" remember, `true` is "User Opt In," and not using a `deviceConfiguration` block is "No."
func (o UserPoolDeviceConfigurationOutput) DeviceOnlyRememberedOnUserPrompt() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolDeviceConfiguration](o, func(v UserPoolDeviceConfiguration) *bool { return v.DeviceOnlyRememberedOnUserPrompt })
}

type UserPoolEmailConfiguration struct {
	// Email configuration set name from SES.
	ConfigurationSet *string `pulumi:"configurationSet"`
	// Email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration. Required to be `DEVELOPER` if `fromEmailAddress` is set.
	EmailSendingAccount *string `pulumi:"emailSendingAccount"`
	// Sender’s email address or sender’s display name with their email address (e.g., `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
	FromEmailAddress *string `pulumi:"fromEmailAddress"`
	// REPLY-TO email address.
	ReplyToEmailAddress *string `pulumi:"replyToEmailAddress"`
	// ARN of the SES verified email identity to use. Required if `emailSendingAccount` is set to `DEVELOPER`.
	SourceArn *string `pulumi:"sourceArn"`
}

type UserPoolEmailConfigurationArgs struct {
	// Email configuration set name from SES.
	ConfigurationSet pulumix.Input[*string] `pulumi:"configurationSet"`
	// Email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration. Required to be `DEVELOPER` if `fromEmailAddress` is set.
	EmailSendingAccount pulumix.Input[*string] `pulumi:"emailSendingAccount"`
	// Sender’s email address or sender’s display name with their email address (e.g., `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
	FromEmailAddress pulumix.Input[*string] `pulumi:"fromEmailAddress"`
	// REPLY-TO email address.
	ReplyToEmailAddress pulumix.Input[*string] `pulumi:"replyToEmailAddress"`
	// ARN of the SES verified email identity to use. Required if `emailSendingAccount` is set to `DEVELOPER`.
	SourceArn pulumix.Input[*string] `pulumi:"sourceArn"`
}

func (UserPoolEmailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolEmailConfiguration)(nil)).Elem()
}

func (i UserPoolEmailConfigurationArgs) ToUserPoolEmailConfigurationOutput() UserPoolEmailConfigurationOutput {
	return i.ToUserPoolEmailConfigurationOutputWithContext(context.Background())
}

func (i UserPoolEmailConfigurationArgs) ToUserPoolEmailConfigurationOutputWithContext(ctx context.Context) UserPoolEmailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolEmailConfigurationOutput)
}

func (i *UserPoolEmailConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolEmailConfigurationArgs] {
	return pulumix.Val(i)
}

type UserPoolEmailConfigurationOutput struct{ *pulumi.OutputState }

func (UserPoolEmailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolEmailConfiguration)(nil)).Elem()
}

func (o UserPoolEmailConfigurationOutput) ToUserPoolEmailConfigurationOutput() UserPoolEmailConfigurationOutput {
	return o
}

func (o UserPoolEmailConfigurationOutput) ToUserPoolEmailConfigurationOutputWithContext(ctx context.Context) UserPoolEmailConfigurationOutput {
	return o
}

func (o UserPoolEmailConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolEmailConfiguration] {
	return pulumix.Output[UserPoolEmailConfiguration]{
		OutputState: o.OutputState,
	}
}

// Email configuration set name from SES.
func (o UserPoolEmailConfigurationOutput) ConfigurationSet() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolEmailConfiguration](o, func(v UserPoolEmailConfiguration) *string { return v.ConfigurationSet })
}

// Email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration. Required to be `DEVELOPER` if `fromEmailAddress` is set.
func (o UserPoolEmailConfigurationOutput) EmailSendingAccount() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolEmailConfiguration](o, func(v UserPoolEmailConfiguration) *string { return v.EmailSendingAccount })
}

// Sender’s email address or sender’s display name with their email address (e.g., `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
func (o UserPoolEmailConfigurationOutput) FromEmailAddress() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolEmailConfiguration](o, func(v UserPoolEmailConfiguration) *string { return v.FromEmailAddress })
}

// REPLY-TO email address.
func (o UserPoolEmailConfigurationOutput) ReplyToEmailAddress() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolEmailConfiguration](o, func(v UserPoolEmailConfiguration) *string { return v.ReplyToEmailAddress })
}

// ARN of the SES verified email identity to use. Required if `emailSendingAccount` is set to `DEVELOPER`.
func (o UserPoolEmailConfigurationOutput) SourceArn() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolEmailConfiguration](o, func(v UserPoolEmailConfiguration) *string { return v.SourceArn })
}

type UserPoolLambdaConfig struct {
	// ARN of the lambda creating an authentication challenge.
	CreateAuthChallenge *string `pulumi:"createAuthChallenge"`
	// A custom email sender AWS Lambda trigger. See customEmailSender Below.
	CustomEmailSender *UserPoolLambdaConfigCustomEmailSender `pulumi:"customEmailSender"`
	// Custom Message AWS Lambda trigger.
	CustomMessage *string `pulumi:"customMessage"`
	// A custom SMS sender AWS Lambda trigger. See customSmsSender Below.
	CustomSmsSender *UserPoolLambdaConfigCustomSmsSender `pulumi:"customSmsSender"`
	// Defines the authentication challenge.
	DefineAuthChallenge *string `pulumi:"defineAuthChallenge"`
	// The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Post-authentication AWS Lambda trigger.
	PostAuthentication *string `pulumi:"postAuthentication"`
	// Post-confirmation AWS Lambda trigger.
	PostConfirmation *string `pulumi:"postConfirmation"`
	// Pre-authentication AWS Lambda trigger.
	PreAuthentication *string `pulumi:"preAuthentication"`
	// Pre-registration AWS Lambda trigger.
	PreSignUp *string `pulumi:"preSignUp"`
	// Allow to customize identity token claims before token generation.
	PreTokenGeneration *string `pulumi:"preTokenGeneration"`
	// User migration Lambda config type.
	UserMigration *string `pulumi:"userMigration"`
	// Verifies the authentication challenge response.
	VerifyAuthChallengeResponse *string `pulumi:"verifyAuthChallengeResponse"`
}

type UserPoolLambdaConfigArgs struct {
	// ARN of the lambda creating an authentication challenge.
	CreateAuthChallenge pulumix.Input[*string] `pulumi:"createAuthChallenge"`
	// A custom email sender AWS Lambda trigger. See customEmailSender Below.
	CustomEmailSender pulumix.Input[*UserPoolLambdaConfigCustomEmailSenderArgs] `pulumi:"customEmailSender"`
	// Custom Message AWS Lambda trigger.
	CustomMessage pulumix.Input[*string] `pulumi:"customMessage"`
	// A custom SMS sender AWS Lambda trigger. See customSmsSender Below.
	CustomSmsSender pulumix.Input[*UserPoolLambdaConfigCustomSmsSenderArgs] `pulumi:"customSmsSender"`
	// Defines the authentication challenge.
	DefineAuthChallenge pulumix.Input[*string] `pulumi:"defineAuthChallenge"`
	// The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Post-authentication AWS Lambda trigger.
	PostAuthentication pulumix.Input[*string] `pulumi:"postAuthentication"`
	// Post-confirmation AWS Lambda trigger.
	PostConfirmation pulumix.Input[*string] `pulumi:"postConfirmation"`
	// Pre-authentication AWS Lambda trigger.
	PreAuthentication pulumix.Input[*string] `pulumi:"preAuthentication"`
	// Pre-registration AWS Lambda trigger.
	PreSignUp pulumix.Input[*string] `pulumi:"preSignUp"`
	// Allow to customize identity token claims before token generation.
	PreTokenGeneration pulumix.Input[*string] `pulumi:"preTokenGeneration"`
	// User migration Lambda config type.
	UserMigration pulumix.Input[*string] `pulumi:"userMigration"`
	// Verifies the authentication challenge response.
	VerifyAuthChallengeResponse pulumix.Input[*string] `pulumi:"verifyAuthChallengeResponse"`
}

func (UserPoolLambdaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolLambdaConfig)(nil)).Elem()
}

func (i UserPoolLambdaConfigArgs) ToUserPoolLambdaConfigOutput() UserPoolLambdaConfigOutput {
	return i.ToUserPoolLambdaConfigOutputWithContext(context.Background())
}

func (i UserPoolLambdaConfigArgs) ToUserPoolLambdaConfigOutputWithContext(ctx context.Context) UserPoolLambdaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolLambdaConfigOutput)
}

func (i *UserPoolLambdaConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolLambdaConfigArgs] {
	return pulumix.Val(i)
}

type UserPoolLambdaConfigOutput struct{ *pulumi.OutputState }

func (UserPoolLambdaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolLambdaConfig)(nil)).Elem()
}

func (o UserPoolLambdaConfigOutput) ToUserPoolLambdaConfigOutput() UserPoolLambdaConfigOutput {
	return o
}

func (o UserPoolLambdaConfigOutput) ToUserPoolLambdaConfigOutputWithContext(ctx context.Context) UserPoolLambdaConfigOutput {
	return o
}

func (o UserPoolLambdaConfigOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolLambdaConfig] {
	return pulumix.Output[UserPoolLambdaConfig]{
		OutputState: o.OutputState,
	}
}

// ARN of the lambda creating an authentication challenge.
func (o UserPoolLambdaConfigOutput) CreateAuthChallenge() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.CreateAuthChallenge })
}

// A custom email sender AWS Lambda trigger. See customEmailSender Below.
func (o UserPoolLambdaConfigOutput) CustomEmailSender() pulumix.GPtrOutput[UserPoolLambdaConfigCustomEmailSender, UserPoolLambdaConfigCustomEmailSenderOutput] {
	value := pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *UserPoolLambdaConfigCustomEmailSender { return v.CustomEmailSender })
	return pulumix.GPtrOutput[UserPoolLambdaConfigCustomEmailSender, UserPoolLambdaConfigCustomEmailSenderOutput]{OutputState: value.OutputState}
}

// Custom Message AWS Lambda trigger.
func (o UserPoolLambdaConfigOutput) CustomMessage() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.CustomMessage })
}

// A custom SMS sender AWS Lambda trigger. See customSmsSender Below.
func (o UserPoolLambdaConfigOutput) CustomSmsSender() pulumix.GPtrOutput[UserPoolLambdaConfigCustomSmsSender, UserPoolLambdaConfigCustomSmsSenderOutput] {
	value := pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *UserPoolLambdaConfigCustomSmsSender { return v.CustomSmsSender })
	return pulumix.GPtrOutput[UserPoolLambdaConfigCustomSmsSender, UserPoolLambdaConfigCustomSmsSenderOutput]{OutputState: value.OutputState}
}

// Defines the authentication challenge.
func (o UserPoolLambdaConfigOutput) DefineAuthChallenge() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.DefineAuthChallenge })
}

// The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
func (o UserPoolLambdaConfigOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.KmsKeyId })
}

// Post-authentication AWS Lambda trigger.
func (o UserPoolLambdaConfigOutput) PostAuthentication() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.PostAuthentication })
}

// Post-confirmation AWS Lambda trigger.
func (o UserPoolLambdaConfigOutput) PostConfirmation() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.PostConfirmation })
}

// Pre-authentication AWS Lambda trigger.
func (o UserPoolLambdaConfigOutput) PreAuthentication() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.PreAuthentication })
}

// Pre-registration AWS Lambda trigger.
func (o UserPoolLambdaConfigOutput) PreSignUp() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.PreSignUp })
}

// Allow to customize identity token claims before token generation.
func (o UserPoolLambdaConfigOutput) PreTokenGeneration() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.PreTokenGeneration })
}

// User migration Lambda config type.
func (o UserPoolLambdaConfigOutput) UserMigration() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.UserMigration })
}

// Verifies the authentication challenge response.
func (o UserPoolLambdaConfigOutput) VerifyAuthChallengeResponse() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolLambdaConfig](o, func(v UserPoolLambdaConfig) *string { return v.VerifyAuthChallengeResponse })
}

type UserPoolLambdaConfigCustomEmailSender struct {
	// The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
	LambdaArn string `pulumi:"lambdaArn"`
	// The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is `V1_0`.
	LambdaVersion string `pulumi:"lambdaVersion"`
}

type UserPoolLambdaConfigCustomEmailSenderArgs struct {
	// The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
	LambdaArn pulumix.Input[string] `pulumi:"lambdaArn"`
	// The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is `V1_0`.
	LambdaVersion pulumix.Input[string] `pulumi:"lambdaVersion"`
}

func (UserPoolLambdaConfigCustomEmailSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolLambdaConfigCustomEmailSender)(nil)).Elem()
}

func (i UserPoolLambdaConfigCustomEmailSenderArgs) ToUserPoolLambdaConfigCustomEmailSenderOutput() UserPoolLambdaConfigCustomEmailSenderOutput {
	return i.ToUserPoolLambdaConfigCustomEmailSenderOutputWithContext(context.Background())
}

func (i UserPoolLambdaConfigCustomEmailSenderArgs) ToUserPoolLambdaConfigCustomEmailSenderOutputWithContext(ctx context.Context) UserPoolLambdaConfigCustomEmailSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolLambdaConfigCustomEmailSenderOutput)
}

func (i *UserPoolLambdaConfigCustomEmailSenderArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolLambdaConfigCustomEmailSenderArgs] {
	return pulumix.Val(i)
}

type UserPoolLambdaConfigCustomEmailSenderOutput struct{ *pulumi.OutputState }

func (UserPoolLambdaConfigCustomEmailSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolLambdaConfigCustomEmailSender)(nil)).Elem()
}

func (o UserPoolLambdaConfigCustomEmailSenderOutput) ToUserPoolLambdaConfigCustomEmailSenderOutput() UserPoolLambdaConfigCustomEmailSenderOutput {
	return o
}

func (o UserPoolLambdaConfigCustomEmailSenderOutput) ToUserPoolLambdaConfigCustomEmailSenderOutputWithContext(ctx context.Context) UserPoolLambdaConfigCustomEmailSenderOutput {
	return o
}

func (o UserPoolLambdaConfigCustomEmailSenderOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolLambdaConfigCustomEmailSender] {
	return pulumix.Output[UserPoolLambdaConfigCustomEmailSender]{
		OutputState: o.OutputState,
	}
}

// The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
func (o UserPoolLambdaConfigCustomEmailSenderOutput) LambdaArn() pulumix.Output[string] {
	return pulumix.Apply[UserPoolLambdaConfigCustomEmailSender](o, func(v UserPoolLambdaConfigCustomEmailSender) string { return v.LambdaArn })
}

// The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is `V1_0`.
func (o UserPoolLambdaConfigCustomEmailSenderOutput) LambdaVersion() pulumix.Output[string] {
	return pulumix.Apply[UserPoolLambdaConfigCustomEmailSender](o, func(v UserPoolLambdaConfigCustomEmailSender) string { return v.LambdaVersion })
}

type UserPoolLambdaConfigCustomSmsSender struct {
	// The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
	LambdaArn string `pulumi:"lambdaArn"`
	// The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is `V1_0`.
	LambdaVersion string `pulumi:"lambdaVersion"`
}

type UserPoolLambdaConfigCustomSmsSenderArgs struct {
	// The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
	LambdaArn pulumix.Input[string] `pulumi:"lambdaArn"`
	// The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is `V1_0`.
	LambdaVersion pulumix.Input[string] `pulumi:"lambdaVersion"`
}

func (UserPoolLambdaConfigCustomSmsSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolLambdaConfigCustomSmsSender)(nil)).Elem()
}

func (i UserPoolLambdaConfigCustomSmsSenderArgs) ToUserPoolLambdaConfigCustomSmsSenderOutput() UserPoolLambdaConfigCustomSmsSenderOutput {
	return i.ToUserPoolLambdaConfigCustomSmsSenderOutputWithContext(context.Background())
}

func (i UserPoolLambdaConfigCustomSmsSenderArgs) ToUserPoolLambdaConfigCustomSmsSenderOutputWithContext(ctx context.Context) UserPoolLambdaConfigCustomSmsSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolLambdaConfigCustomSmsSenderOutput)
}

func (i *UserPoolLambdaConfigCustomSmsSenderArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolLambdaConfigCustomSmsSenderArgs] {
	return pulumix.Val(i)
}

type UserPoolLambdaConfigCustomSmsSenderOutput struct{ *pulumi.OutputState }

func (UserPoolLambdaConfigCustomSmsSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolLambdaConfigCustomSmsSender)(nil)).Elem()
}

func (o UserPoolLambdaConfigCustomSmsSenderOutput) ToUserPoolLambdaConfigCustomSmsSenderOutput() UserPoolLambdaConfigCustomSmsSenderOutput {
	return o
}

func (o UserPoolLambdaConfigCustomSmsSenderOutput) ToUserPoolLambdaConfigCustomSmsSenderOutputWithContext(ctx context.Context) UserPoolLambdaConfigCustomSmsSenderOutput {
	return o
}

func (o UserPoolLambdaConfigCustomSmsSenderOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolLambdaConfigCustomSmsSender] {
	return pulumix.Output[UserPoolLambdaConfigCustomSmsSender]{
		OutputState: o.OutputState,
	}
}

// The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
func (o UserPoolLambdaConfigCustomSmsSenderOutput) LambdaArn() pulumix.Output[string] {
	return pulumix.Apply[UserPoolLambdaConfigCustomSmsSender](o, func(v UserPoolLambdaConfigCustomSmsSender) string { return v.LambdaArn })
}

// The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is `V1_0`.
func (o UserPoolLambdaConfigCustomSmsSenderOutput) LambdaVersion() pulumix.Output[string] {
	return pulumix.Apply[UserPoolLambdaConfigCustomSmsSender](o, func(v UserPoolLambdaConfigCustomSmsSender) string { return v.LambdaVersion })
}

type UserPoolPasswordPolicy struct {
	// Minimum length of the password policy that you have set.
	MinimumLength *int `pulumi:"minimumLength"`
	// Whether you have required users to use at least one lowercase letter in their password.
	RequireLowercase *bool `pulumi:"requireLowercase"`
	// Whether you have required users to use at least one number in their password.
	RequireNumbers *bool `pulumi:"requireNumbers"`
	// Whether you have required users to use at least one symbol in their password.
	RequireSymbols *bool `pulumi:"requireSymbols"`
	// Whether you have required users to use at least one uppercase letter in their password.
	RequireUppercase *bool `pulumi:"requireUppercase"`
	// In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
	TemporaryPasswordValidityDays *int `pulumi:"temporaryPasswordValidityDays"`
}

type UserPoolPasswordPolicyArgs struct {
	// Minimum length of the password policy that you have set.
	MinimumLength pulumix.Input[*int] `pulumi:"minimumLength"`
	// Whether you have required users to use at least one lowercase letter in their password.
	RequireLowercase pulumix.Input[*bool] `pulumi:"requireLowercase"`
	// Whether you have required users to use at least one number in their password.
	RequireNumbers pulumix.Input[*bool] `pulumi:"requireNumbers"`
	// Whether you have required users to use at least one symbol in their password.
	RequireSymbols pulumix.Input[*bool] `pulumi:"requireSymbols"`
	// Whether you have required users to use at least one uppercase letter in their password.
	RequireUppercase pulumix.Input[*bool] `pulumi:"requireUppercase"`
	// In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
	TemporaryPasswordValidityDays pulumix.Input[*int] `pulumi:"temporaryPasswordValidityDays"`
}

func (UserPoolPasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolPasswordPolicy)(nil)).Elem()
}

func (i UserPoolPasswordPolicyArgs) ToUserPoolPasswordPolicyOutput() UserPoolPasswordPolicyOutput {
	return i.ToUserPoolPasswordPolicyOutputWithContext(context.Background())
}

func (i UserPoolPasswordPolicyArgs) ToUserPoolPasswordPolicyOutputWithContext(ctx context.Context) UserPoolPasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolPasswordPolicyOutput)
}

func (i *UserPoolPasswordPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolPasswordPolicyArgs] {
	return pulumix.Val(i)
}

type UserPoolPasswordPolicyOutput struct{ *pulumi.OutputState }

func (UserPoolPasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolPasswordPolicy)(nil)).Elem()
}

func (o UserPoolPasswordPolicyOutput) ToUserPoolPasswordPolicyOutput() UserPoolPasswordPolicyOutput {
	return o
}

func (o UserPoolPasswordPolicyOutput) ToUserPoolPasswordPolicyOutputWithContext(ctx context.Context) UserPoolPasswordPolicyOutput {
	return o
}

func (o UserPoolPasswordPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolPasswordPolicy] {
	return pulumix.Output[UserPoolPasswordPolicy]{
		OutputState: o.OutputState,
	}
}

// Minimum length of the password policy that you have set.
func (o UserPoolPasswordPolicyOutput) MinimumLength() pulumix.Output[*int] {
	return pulumix.Apply[UserPoolPasswordPolicy](o, func(v UserPoolPasswordPolicy) *int { return v.MinimumLength })
}

// Whether you have required users to use at least one lowercase letter in their password.
func (o UserPoolPasswordPolicyOutput) RequireLowercase() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolPasswordPolicy](o, func(v UserPoolPasswordPolicy) *bool { return v.RequireLowercase })
}

// Whether you have required users to use at least one number in their password.
func (o UserPoolPasswordPolicyOutput) RequireNumbers() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolPasswordPolicy](o, func(v UserPoolPasswordPolicy) *bool { return v.RequireNumbers })
}

// Whether you have required users to use at least one symbol in their password.
func (o UserPoolPasswordPolicyOutput) RequireSymbols() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolPasswordPolicy](o, func(v UserPoolPasswordPolicy) *bool { return v.RequireSymbols })
}

// Whether you have required users to use at least one uppercase letter in their password.
func (o UserPoolPasswordPolicyOutput) RequireUppercase() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolPasswordPolicy](o, func(v UserPoolPasswordPolicy) *bool { return v.RequireUppercase })
}

// In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
func (o UserPoolPasswordPolicyOutput) TemporaryPasswordValidityDays() pulumix.Output[*int] {
	return pulumix.Apply[UserPoolPasswordPolicy](o, func(v UserPoolPasswordPolicy) *int { return v.TemporaryPasswordValidityDays })
}

type UserPoolSchema struct {
	// Attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
	AttributeDataType string `pulumi:"attributeDataType"`
	// Whether the attribute type is developer only.
	DeveloperOnlyAttribute *bool `pulumi:"developerOnlyAttribute"`
	// Whether the attribute can be changed once it has been created.
	Mutable *bool `pulumi:"mutable"`
	// Name of the attribute.
	Name string `pulumi:"name"`
	// Configuration block for the constraints for an attribute of the number type. Detailed below.
	NumberAttributeConstraints *UserPoolSchemaNumberAttributeConstraints `pulumi:"numberAttributeConstraints"`
	// Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
	Required *bool `pulumi:"required"`
	// Constraints for an attribute of the string type. Detailed below.
	StringAttributeConstraints *UserPoolSchemaStringAttributeConstraints `pulumi:"stringAttributeConstraints"`
}

type UserPoolSchemaArgs struct {
	// Attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
	AttributeDataType pulumix.Input[string] `pulumi:"attributeDataType"`
	// Whether the attribute type is developer only.
	DeveloperOnlyAttribute pulumix.Input[*bool] `pulumi:"developerOnlyAttribute"`
	// Whether the attribute can be changed once it has been created.
	Mutable pulumix.Input[*bool] `pulumi:"mutable"`
	// Name of the attribute.
	Name pulumix.Input[string] `pulumi:"name"`
	// Configuration block for the constraints for an attribute of the number type. Detailed below.
	NumberAttributeConstraints pulumix.Input[*UserPoolSchemaNumberAttributeConstraintsArgs] `pulumi:"numberAttributeConstraints"`
	// Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
	Required pulumix.Input[*bool] `pulumi:"required"`
	// Constraints for an attribute of the string type. Detailed below.
	StringAttributeConstraints pulumix.Input[*UserPoolSchemaStringAttributeConstraintsArgs] `pulumi:"stringAttributeConstraints"`
}

func (UserPoolSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSchema)(nil)).Elem()
}

func (i UserPoolSchemaArgs) ToUserPoolSchemaOutput() UserPoolSchemaOutput {
	return i.ToUserPoolSchemaOutputWithContext(context.Background())
}

func (i UserPoolSchemaArgs) ToUserPoolSchemaOutputWithContext(ctx context.Context) UserPoolSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSchemaOutput)
}

func (i *UserPoolSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolSchemaArgs] {
	return pulumix.Val(i)
}

type UserPoolSchemaOutput struct{ *pulumi.OutputState }

func (UserPoolSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSchema)(nil)).Elem()
}

func (o UserPoolSchemaOutput) ToUserPoolSchemaOutput() UserPoolSchemaOutput {
	return o
}

func (o UserPoolSchemaOutput) ToUserPoolSchemaOutputWithContext(ctx context.Context) UserPoolSchemaOutput {
	return o
}

func (o UserPoolSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolSchema] {
	return pulumix.Output[UserPoolSchema]{
		OutputState: o.OutputState,
	}
}

// Attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
func (o UserPoolSchemaOutput) AttributeDataType() pulumix.Output[string] {
	return pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) string { return v.AttributeDataType })
}

// Whether the attribute type is developer only.
func (o UserPoolSchemaOutput) DeveloperOnlyAttribute() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) *bool { return v.DeveloperOnlyAttribute })
}

// Whether the attribute can be changed once it has been created.
func (o UserPoolSchemaOutput) Mutable() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) *bool { return v.Mutable })
}

// Name of the attribute.
func (o UserPoolSchemaOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) string { return v.Name })
}

// Configuration block for the constraints for an attribute of the number type. Detailed below.
func (o UserPoolSchemaOutput) NumberAttributeConstraints() pulumix.GPtrOutput[UserPoolSchemaNumberAttributeConstraints, UserPoolSchemaNumberAttributeConstraintsOutput] {
	value := pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) *UserPoolSchemaNumberAttributeConstraints { return v.NumberAttributeConstraints })
	return pulumix.GPtrOutput[UserPoolSchemaNumberAttributeConstraints, UserPoolSchemaNumberAttributeConstraintsOutput]{OutputState: value.OutputState}
}

// Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
func (o UserPoolSchemaOutput) Required() pulumix.Output[*bool] {
	return pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) *bool { return v.Required })
}

// Constraints for an attribute of the string type. Detailed below.
func (o UserPoolSchemaOutput) StringAttributeConstraints() pulumix.GPtrOutput[UserPoolSchemaStringAttributeConstraints, UserPoolSchemaStringAttributeConstraintsOutput] {
	value := pulumix.Apply[UserPoolSchema](o, func(v UserPoolSchema) *UserPoolSchemaStringAttributeConstraints { return v.StringAttributeConstraints })
	return pulumix.GPtrOutput[UserPoolSchemaStringAttributeConstraints, UserPoolSchemaStringAttributeConstraintsOutput]{OutputState: value.OutputState}
}

type UserPoolSchemaNumberAttributeConstraints struct {
	// Maximum value of an attribute that is of the number data type.
	MaxValue *string `pulumi:"maxValue"`
	// Minimum value of an attribute that is of the number data type.
	MinValue *string `pulumi:"minValue"`
}

type UserPoolSchemaNumberAttributeConstraintsArgs struct {
	// Maximum value of an attribute that is of the number data type.
	MaxValue pulumix.Input[*string] `pulumi:"maxValue"`
	// Minimum value of an attribute that is of the number data type.
	MinValue pulumix.Input[*string] `pulumi:"minValue"`
}

func (UserPoolSchemaNumberAttributeConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSchemaNumberAttributeConstraints)(nil)).Elem()
}

func (i UserPoolSchemaNumberAttributeConstraintsArgs) ToUserPoolSchemaNumberAttributeConstraintsOutput() UserPoolSchemaNumberAttributeConstraintsOutput {
	return i.ToUserPoolSchemaNumberAttributeConstraintsOutputWithContext(context.Background())
}

func (i UserPoolSchemaNumberAttributeConstraintsArgs) ToUserPoolSchemaNumberAttributeConstraintsOutputWithContext(ctx context.Context) UserPoolSchemaNumberAttributeConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSchemaNumberAttributeConstraintsOutput)
}

func (i *UserPoolSchemaNumberAttributeConstraintsArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolSchemaNumberAttributeConstraintsArgs] {
	return pulumix.Val(i)
}

type UserPoolSchemaNumberAttributeConstraintsOutput struct{ *pulumi.OutputState }

func (UserPoolSchemaNumberAttributeConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSchemaNumberAttributeConstraints)(nil)).Elem()
}

func (o UserPoolSchemaNumberAttributeConstraintsOutput) ToUserPoolSchemaNumberAttributeConstraintsOutput() UserPoolSchemaNumberAttributeConstraintsOutput {
	return o
}

func (o UserPoolSchemaNumberAttributeConstraintsOutput) ToUserPoolSchemaNumberAttributeConstraintsOutputWithContext(ctx context.Context) UserPoolSchemaNumberAttributeConstraintsOutput {
	return o
}

func (o UserPoolSchemaNumberAttributeConstraintsOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolSchemaNumberAttributeConstraints] {
	return pulumix.Output[UserPoolSchemaNumberAttributeConstraints]{
		OutputState: o.OutputState,
	}
}

// Maximum value of an attribute that is of the number data type.
func (o UserPoolSchemaNumberAttributeConstraintsOutput) MaxValue() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolSchemaNumberAttributeConstraints](o, func(v UserPoolSchemaNumberAttributeConstraints) *string { return v.MaxValue })
}

// Minimum value of an attribute that is of the number data type.
func (o UserPoolSchemaNumberAttributeConstraintsOutput) MinValue() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolSchemaNumberAttributeConstraints](o, func(v UserPoolSchemaNumberAttributeConstraints) *string { return v.MinValue })
}

type UserPoolSchemaStringAttributeConstraints struct {
	// Maximum length of an attribute value of the string type.
	MaxLength *string `pulumi:"maxLength"`
	// Minimum length of an attribute value of the string type.
	MinLength *string `pulumi:"minLength"`
}

type UserPoolSchemaStringAttributeConstraintsArgs struct {
	// Maximum length of an attribute value of the string type.
	MaxLength pulumix.Input[*string] `pulumi:"maxLength"`
	// Minimum length of an attribute value of the string type.
	MinLength pulumix.Input[*string] `pulumi:"minLength"`
}

func (UserPoolSchemaStringAttributeConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSchemaStringAttributeConstraints)(nil)).Elem()
}

func (i UserPoolSchemaStringAttributeConstraintsArgs) ToUserPoolSchemaStringAttributeConstraintsOutput() UserPoolSchemaStringAttributeConstraintsOutput {
	return i.ToUserPoolSchemaStringAttributeConstraintsOutputWithContext(context.Background())
}

func (i UserPoolSchemaStringAttributeConstraintsArgs) ToUserPoolSchemaStringAttributeConstraintsOutputWithContext(ctx context.Context) UserPoolSchemaStringAttributeConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSchemaStringAttributeConstraintsOutput)
}

func (i *UserPoolSchemaStringAttributeConstraintsArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolSchemaStringAttributeConstraintsArgs] {
	return pulumix.Val(i)
}

type UserPoolSchemaStringAttributeConstraintsOutput struct{ *pulumi.OutputState }

func (UserPoolSchemaStringAttributeConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSchemaStringAttributeConstraints)(nil)).Elem()
}

func (o UserPoolSchemaStringAttributeConstraintsOutput) ToUserPoolSchemaStringAttributeConstraintsOutput() UserPoolSchemaStringAttributeConstraintsOutput {
	return o
}

func (o UserPoolSchemaStringAttributeConstraintsOutput) ToUserPoolSchemaStringAttributeConstraintsOutputWithContext(ctx context.Context) UserPoolSchemaStringAttributeConstraintsOutput {
	return o
}

func (o UserPoolSchemaStringAttributeConstraintsOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolSchemaStringAttributeConstraints] {
	return pulumix.Output[UserPoolSchemaStringAttributeConstraints]{
		OutputState: o.OutputState,
	}
}

// Maximum length of an attribute value of the string type.
func (o UserPoolSchemaStringAttributeConstraintsOutput) MaxLength() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolSchemaStringAttributeConstraints](o, func(v UserPoolSchemaStringAttributeConstraints) *string { return v.MaxLength })
}

// Minimum length of an attribute value of the string type.
func (o UserPoolSchemaStringAttributeConstraintsOutput) MinLength() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolSchemaStringAttributeConstraints](o, func(v UserPoolSchemaStringAttributeConstraints) *string { return v.MinLength })
}

type UserPoolSmsConfiguration struct {
	// External ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
	ExternalId string `pulumi:"externalId"`
	// ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
	SnsCallerArn string `pulumi:"snsCallerArn"`
	// The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html).
	SnsRegion *string `pulumi:"snsRegion"`
}

type UserPoolSmsConfigurationArgs struct {
	// External ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
	ExternalId pulumix.Input[string] `pulumi:"externalId"`
	// ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
	SnsCallerArn pulumix.Input[string] `pulumi:"snsCallerArn"`
	// The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html).
	SnsRegion pulumix.Input[*string] `pulumi:"snsRegion"`
}

func (UserPoolSmsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSmsConfiguration)(nil)).Elem()
}

func (i UserPoolSmsConfigurationArgs) ToUserPoolSmsConfigurationOutput() UserPoolSmsConfigurationOutput {
	return i.ToUserPoolSmsConfigurationOutputWithContext(context.Background())
}

func (i UserPoolSmsConfigurationArgs) ToUserPoolSmsConfigurationOutputWithContext(ctx context.Context) UserPoolSmsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSmsConfigurationOutput)
}

func (i *UserPoolSmsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolSmsConfigurationArgs] {
	return pulumix.Val(i)
}

type UserPoolSmsConfigurationOutput struct{ *pulumi.OutputState }

func (UserPoolSmsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSmsConfiguration)(nil)).Elem()
}

func (o UserPoolSmsConfigurationOutput) ToUserPoolSmsConfigurationOutput() UserPoolSmsConfigurationOutput {
	return o
}

func (o UserPoolSmsConfigurationOutput) ToUserPoolSmsConfigurationOutputWithContext(ctx context.Context) UserPoolSmsConfigurationOutput {
	return o
}

func (o UserPoolSmsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolSmsConfiguration] {
	return pulumix.Output[UserPoolSmsConfiguration]{
		OutputState: o.OutputState,
	}
}

// External ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
func (o UserPoolSmsConfigurationOutput) ExternalId() pulumix.Output[string] {
	return pulumix.Apply[UserPoolSmsConfiguration](o, func(v UserPoolSmsConfiguration) string { return v.ExternalId })
}

// ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
func (o UserPoolSmsConfigurationOutput) SnsCallerArn() pulumix.Output[string] {
	return pulumix.Apply[UserPoolSmsConfiguration](o, func(v UserPoolSmsConfiguration) string { return v.SnsCallerArn })
}

// The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html).
func (o UserPoolSmsConfigurationOutput) SnsRegion() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolSmsConfiguration](o, func(v UserPoolSmsConfiguration) *string { return v.SnsRegion })
}

type UserPoolSoftwareTokenMfaConfiguration struct {
	// Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When `smsConfiguration` is not present, the `mfaConfiguration` argument must be set to `OFF` and the `softwareTokenMfaConfiguration` configuration block must be fully removed.
	Enabled bool `pulumi:"enabled"`
}

type UserPoolSoftwareTokenMfaConfigurationArgs struct {
	// Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When `smsConfiguration` is not present, the `mfaConfiguration` argument must be set to `OFF` and the `softwareTokenMfaConfiguration` configuration block must be fully removed.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
}

func (UserPoolSoftwareTokenMfaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSoftwareTokenMfaConfiguration)(nil)).Elem()
}

func (i UserPoolSoftwareTokenMfaConfigurationArgs) ToUserPoolSoftwareTokenMfaConfigurationOutput() UserPoolSoftwareTokenMfaConfigurationOutput {
	return i.ToUserPoolSoftwareTokenMfaConfigurationOutputWithContext(context.Background())
}

func (i UserPoolSoftwareTokenMfaConfigurationArgs) ToUserPoolSoftwareTokenMfaConfigurationOutputWithContext(ctx context.Context) UserPoolSoftwareTokenMfaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolSoftwareTokenMfaConfigurationOutput)
}

func (i *UserPoolSoftwareTokenMfaConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolSoftwareTokenMfaConfigurationArgs] {
	return pulumix.Val(i)
}

type UserPoolSoftwareTokenMfaConfigurationOutput struct{ *pulumi.OutputState }

func (UserPoolSoftwareTokenMfaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolSoftwareTokenMfaConfiguration)(nil)).Elem()
}

func (o UserPoolSoftwareTokenMfaConfigurationOutput) ToUserPoolSoftwareTokenMfaConfigurationOutput() UserPoolSoftwareTokenMfaConfigurationOutput {
	return o
}

func (o UserPoolSoftwareTokenMfaConfigurationOutput) ToUserPoolSoftwareTokenMfaConfigurationOutputWithContext(ctx context.Context) UserPoolSoftwareTokenMfaConfigurationOutput {
	return o
}

func (o UserPoolSoftwareTokenMfaConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolSoftwareTokenMfaConfiguration] {
	return pulumix.Output[UserPoolSoftwareTokenMfaConfiguration]{
		OutputState: o.OutputState,
	}
}

// Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When `smsConfiguration` is not present, the `mfaConfiguration` argument must be set to `OFF` and the `softwareTokenMfaConfiguration` configuration block must be fully removed.
func (o UserPoolSoftwareTokenMfaConfigurationOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[UserPoolSoftwareTokenMfaConfiguration](o, func(v UserPoolSoftwareTokenMfaConfiguration) bool { return v.Enabled })
}

type UserPoolUserAttributeUpdateSettings struct {
	// A list of attributes requiring verification before update. If set, the provided value(s) must also be set in `autoVerifiedAttributes`. Valid values: `email`, `phoneNumber`.
	AttributesRequireVerificationBeforeUpdates []string `pulumi:"attributesRequireVerificationBeforeUpdates"`
}

type UserPoolUserAttributeUpdateSettingsArgs struct {
	// A list of attributes requiring verification before update. If set, the provided value(s) must also be set in `autoVerifiedAttributes`. Valid values: `email`, `phoneNumber`.
	AttributesRequireVerificationBeforeUpdates pulumix.Input[[]string] `pulumi:"attributesRequireVerificationBeforeUpdates"`
}

func (UserPoolUserAttributeUpdateSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolUserAttributeUpdateSettings)(nil)).Elem()
}

func (i UserPoolUserAttributeUpdateSettingsArgs) ToUserPoolUserAttributeUpdateSettingsOutput() UserPoolUserAttributeUpdateSettingsOutput {
	return i.ToUserPoolUserAttributeUpdateSettingsOutputWithContext(context.Background())
}

func (i UserPoolUserAttributeUpdateSettingsArgs) ToUserPoolUserAttributeUpdateSettingsOutputWithContext(ctx context.Context) UserPoolUserAttributeUpdateSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolUserAttributeUpdateSettingsOutput)
}

func (i *UserPoolUserAttributeUpdateSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolUserAttributeUpdateSettingsArgs] {
	return pulumix.Val(i)
}

type UserPoolUserAttributeUpdateSettingsOutput struct{ *pulumi.OutputState }

func (UserPoolUserAttributeUpdateSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolUserAttributeUpdateSettings)(nil)).Elem()
}

func (o UserPoolUserAttributeUpdateSettingsOutput) ToUserPoolUserAttributeUpdateSettingsOutput() UserPoolUserAttributeUpdateSettingsOutput {
	return o
}

func (o UserPoolUserAttributeUpdateSettingsOutput) ToUserPoolUserAttributeUpdateSettingsOutputWithContext(ctx context.Context) UserPoolUserAttributeUpdateSettingsOutput {
	return o
}

func (o UserPoolUserAttributeUpdateSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolUserAttributeUpdateSettings] {
	return pulumix.Output[UserPoolUserAttributeUpdateSettings]{
		OutputState: o.OutputState,
	}
}

// A list of attributes requiring verification before update. If set, the provided value(s) must also be set in `autoVerifiedAttributes`. Valid values: `email`, `phoneNumber`.
func (o UserPoolUserAttributeUpdateSettingsOutput) AttributesRequireVerificationBeforeUpdates() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserPoolUserAttributeUpdateSettings](o, func(v UserPoolUserAttributeUpdateSettings) []string {
		return v.AttributesRequireVerificationBeforeUpdates
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type UserPoolUserPoolAddOns struct {
	// Mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
	AdvancedSecurityMode string `pulumi:"advancedSecurityMode"`
}

type UserPoolUserPoolAddOnsArgs struct {
	// Mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
	AdvancedSecurityMode pulumix.Input[string] `pulumi:"advancedSecurityMode"`
}

func (UserPoolUserPoolAddOnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolUserPoolAddOns)(nil)).Elem()
}

func (i UserPoolUserPoolAddOnsArgs) ToUserPoolUserPoolAddOnsOutput() UserPoolUserPoolAddOnsOutput {
	return i.ToUserPoolUserPoolAddOnsOutputWithContext(context.Background())
}

func (i UserPoolUserPoolAddOnsArgs) ToUserPoolUserPoolAddOnsOutputWithContext(ctx context.Context) UserPoolUserPoolAddOnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolUserPoolAddOnsOutput)
}

func (i *UserPoolUserPoolAddOnsArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolUserPoolAddOnsArgs] {
	return pulumix.Val(i)
}

type UserPoolUserPoolAddOnsOutput struct{ *pulumi.OutputState }

func (UserPoolUserPoolAddOnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolUserPoolAddOns)(nil)).Elem()
}

func (o UserPoolUserPoolAddOnsOutput) ToUserPoolUserPoolAddOnsOutput() UserPoolUserPoolAddOnsOutput {
	return o
}

func (o UserPoolUserPoolAddOnsOutput) ToUserPoolUserPoolAddOnsOutputWithContext(ctx context.Context) UserPoolUserPoolAddOnsOutput {
	return o
}

func (o UserPoolUserPoolAddOnsOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolUserPoolAddOns] {
	return pulumix.Output[UserPoolUserPoolAddOns]{
		OutputState: o.OutputState,
	}
}

// Mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
func (o UserPoolUserPoolAddOnsOutput) AdvancedSecurityMode() pulumix.Output[string] {
	return pulumix.Apply[UserPoolUserPoolAddOns](o, func(v UserPoolUserPoolAddOns) string { return v.AdvancedSecurityMode })
}

type UserPoolUsernameConfiguration struct {
	// Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
	CaseSensitive bool `pulumi:"caseSensitive"`
}

type UserPoolUsernameConfigurationArgs struct {
	// Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
	CaseSensitive pulumix.Input[bool] `pulumi:"caseSensitive"`
}

func (UserPoolUsernameConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolUsernameConfiguration)(nil)).Elem()
}

func (i UserPoolUsernameConfigurationArgs) ToUserPoolUsernameConfigurationOutput() UserPoolUsernameConfigurationOutput {
	return i.ToUserPoolUsernameConfigurationOutputWithContext(context.Background())
}

func (i UserPoolUsernameConfigurationArgs) ToUserPoolUsernameConfigurationOutputWithContext(ctx context.Context) UserPoolUsernameConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolUsernameConfigurationOutput)
}

func (i *UserPoolUsernameConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolUsernameConfigurationArgs] {
	return pulumix.Val(i)
}

type UserPoolUsernameConfigurationOutput struct{ *pulumi.OutputState }

func (UserPoolUsernameConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolUsernameConfiguration)(nil)).Elem()
}

func (o UserPoolUsernameConfigurationOutput) ToUserPoolUsernameConfigurationOutput() UserPoolUsernameConfigurationOutput {
	return o
}

func (o UserPoolUsernameConfigurationOutput) ToUserPoolUsernameConfigurationOutputWithContext(ctx context.Context) UserPoolUsernameConfigurationOutput {
	return o
}

func (o UserPoolUsernameConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolUsernameConfiguration] {
	return pulumix.Output[UserPoolUsernameConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
func (o UserPoolUsernameConfigurationOutput) CaseSensitive() pulumix.Output[bool] {
	return pulumix.Apply[UserPoolUsernameConfiguration](o, func(v UserPoolUsernameConfiguration) bool { return v.CaseSensitive })
}

type UserPoolVerificationMessageTemplate struct {
	// Default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
	DefaultEmailOption *string `pulumi:"defaultEmailOption"`
	// Email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
	EmailMessage *string `pulumi:"emailMessage"`
	// Email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
	EmailMessageByLink *string `pulumi:"emailMessageByLink"`
	// Subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
	EmailSubject *string `pulumi:"emailSubject"`
	// Subject line for the email message template for sending a confirmation link to the user.
	EmailSubjectByLink *string `pulumi:"emailSubjectByLink"`
	// SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
	SmsMessage *string `pulumi:"smsMessage"`
}

type UserPoolVerificationMessageTemplateArgs struct {
	// Default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
	DefaultEmailOption pulumix.Input[*string] `pulumi:"defaultEmailOption"`
	// Email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
	EmailMessage pulumix.Input[*string] `pulumi:"emailMessage"`
	// Email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
	EmailMessageByLink pulumix.Input[*string] `pulumi:"emailMessageByLink"`
	// Subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
	EmailSubject pulumix.Input[*string] `pulumi:"emailSubject"`
	// Subject line for the email message template for sending a confirmation link to the user.
	EmailSubjectByLink pulumix.Input[*string] `pulumi:"emailSubjectByLink"`
	// SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
	SmsMessage pulumix.Input[*string] `pulumi:"smsMessage"`
}

func (UserPoolVerificationMessageTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolVerificationMessageTemplate)(nil)).Elem()
}

func (i UserPoolVerificationMessageTemplateArgs) ToUserPoolVerificationMessageTemplateOutput() UserPoolVerificationMessageTemplateOutput {
	return i.ToUserPoolVerificationMessageTemplateOutputWithContext(context.Background())
}

func (i UserPoolVerificationMessageTemplateArgs) ToUserPoolVerificationMessageTemplateOutputWithContext(ctx context.Context) UserPoolVerificationMessageTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolVerificationMessageTemplateOutput)
}

func (i *UserPoolVerificationMessageTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPoolVerificationMessageTemplateArgs] {
	return pulumix.Val(i)
}

type UserPoolVerificationMessageTemplateOutput struct{ *pulumi.OutputState }

func (UserPoolVerificationMessageTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolVerificationMessageTemplate)(nil)).Elem()
}

func (o UserPoolVerificationMessageTemplateOutput) ToUserPoolVerificationMessageTemplateOutput() UserPoolVerificationMessageTemplateOutput {
	return o
}

func (o UserPoolVerificationMessageTemplateOutput) ToUserPoolVerificationMessageTemplateOutputWithContext(ctx context.Context) UserPoolVerificationMessageTemplateOutput {
	return o
}

func (o UserPoolVerificationMessageTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[UserPoolVerificationMessageTemplate] {
	return pulumix.Output[UserPoolVerificationMessageTemplate]{
		OutputState: o.OutputState,
	}
}

// Default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
func (o UserPoolVerificationMessageTemplateOutput) DefaultEmailOption() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolVerificationMessageTemplate](o, func(v UserPoolVerificationMessageTemplate) *string { return v.DefaultEmailOption })
}

// Email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
func (o UserPoolVerificationMessageTemplateOutput) EmailMessage() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolVerificationMessageTemplate](o, func(v UserPoolVerificationMessageTemplate) *string { return v.EmailMessage })
}

// Email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
func (o UserPoolVerificationMessageTemplateOutput) EmailMessageByLink() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolVerificationMessageTemplate](o, func(v UserPoolVerificationMessageTemplate) *string { return v.EmailMessageByLink })
}

// Subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
func (o UserPoolVerificationMessageTemplateOutput) EmailSubject() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolVerificationMessageTemplate](o, func(v UserPoolVerificationMessageTemplate) *string { return v.EmailSubject })
}

// Subject line for the email message template for sending a confirmation link to the user.
func (o UserPoolVerificationMessageTemplateOutput) EmailSubjectByLink() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolVerificationMessageTemplate](o, func(v UserPoolVerificationMessageTemplate) *string { return v.EmailSubjectByLink })
}

// SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
func (o UserPoolVerificationMessageTemplateOutput) SmsMessage() pulumix.Output[*string] {
	return pulumix.Apply[UserPoolVerificationMessageTemplate](o, func(v UserPoolVerificationMessageTemplate) *string { return v.SmsMessage })
}

type GetUserPoolClientAnalyticsConfiguration struct {
	// (Optional) Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
	ApplicationArn string `pulumi:"applicationArn"`
	// (Optional) Application ID for an Amazon Pinpoint application.
	ApplicationId string `pulumi:"applicationId"`
	// (Optional) ID for the Analytics Configuration. Conflicts with `applicationArn`.
	ExternalId string `pulumi:"externalId"`
	// (Optional) ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
	RoleArn string `pulumi:"roleArn"`
	// (Optional) If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
	UserDataShared bool `pulumi:"userDataShared"`
}

type GetUserPoolClientAnalyticsConfigurationArgs struct {
	// (Optional) Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
	ApplicationArn pulumix.Input[string] `pulumi:"applicationArn"`
	// (Optional) Application ID for an Amazon Pinpoint application.
	ApplicationId pulumix.Input[string] `pulumi:"applicationId"`
	// (Optional) ID for the Analytics Configuration. Conflicts with `applicationArn`.
	ExternalId pulumix.Input[string] `pulumi:"externalId"`
	// (Optional) ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// (Optional) If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
	UserDataShared pulumix.Input[bool] `pulumi:"userDataShared"`
}

func (GetUserPoolClientAnalyticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolClientAnalyticsConfiguration)(nil)).Elem()
}

func (i GetUserPoolClientAnalyticsConfigurationArgs) ToGetUserPoolClientAnalyticsConfigurationOutput() GetUserPoolClientAnalyticsConfigurationOutput {
	return i.ToGetUserPoolClientAnalyticsConfigurationOutputWithContext(context.Background())
}

func (i GetUserPoolClientAnalyticsConfigurationArgs) ToGetUserPoolClientAnalyticsConfigurationOutputWithContext(ctx context.Context) GetUserPoolClientAnalyticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPoolClientAnalyticsConfigurationOutput)
}

func (i *GetUserPoolClientAnalyticsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserPoolClientAnalyticsConfigurationArgs] {
	return pulumix.Val(i)
}

type GetUserPoolClientAnalyticsConfigurationOutput struct{ *pulumi.OutputState }

func (GetUserPoolClientAnalyticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolClientAnalyticsConfiguration)(nil)).Elem()
}

func (o GetUserPoolClientAnalyticsConfigurationOutput) ToGetUserPoolClientAnalyticsConfigurationOutput() GetUserPoolClientAnalyticsConfigurationOutput {
	return o
}

func (o GetUserPoolClientAnalyticsConfigurationOutput) ToGetUserPoolClientAnalyticsConfigurationOutputWithContext(ctx context.Context) GetUserPoolClientAnalyticsConfigurationOutput {
	return o
}

func (o GetUserPoolClientAnalyticsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserPoolClientAnalyticsConfiguration] {
	return pulumix.Output[GetUserPoolClientAnalyticsConfiguration]{
		OutputState: o.OutputState,
	}
}

// (Optional) Application ARN for an Amazon Pinpoint application. Conflicts with `externalId` and `roleArn`.
func (o GetUserPoolClientAnalyticsConfigurationOutput) ApplicationArn() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientAnalyticsConfiguration](o, func(v GetUserPoolClientAnalyticsConfiguration) string { return v.ApplicationArn })
}

// (Optional) Application ID for an Amazon Pinpoint application.
func (o GetUserPoolClientAnalyticsConfigurationOutput) ApplicationId() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientAnalyticsConfiguration](o, func(v GetUserPoolClientAnalyticsConfiguration) string { return v.ApplicationId })
}

// (Optional) ID for the Analytics Configuration. Conflicts with `applicationArn`.
func (o GetUserPoolClientAnalyticsConfigurationOutput) ExternalId() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientAnalyticsConfiguration](o, func(v GetUserPoolClientAnalyticsConfiguration) string { return v.ExternalId })
}

// (Optional) ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics. Conflicts with `applicationArn`.
func (o GetUserPoolClientAnalyticsConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientAnalyticsConfiguration](o, func(v GetUserPoolClientAnalyticsConfiguration) string { return v.RoleArn })
}

// (Optional) If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
func (o GetUserPoolClientAnalyticsConfigurationOutput) UserDataShared() pulumix.Output[bool] {
	return pulumix.Apply[GetUserPoolClientAnalyticsConfiguration](o, func(v GetUserPoolClientAnalyticsConfiguration) bool { return v.UserDataShared })
}

type GetUserPoolClientTokenValidityUnit struct {
	// (Optional) Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
	AccessToken string `pulumi:"accessToken"`
	// (Optional) Time unit in for the value in `idTokenValidity`, defaults to `hours`.
	IdToken string `pulumi:"idToken"`
	// (Optional) Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
	RefreshToken string `pulumi:"refreshToken"`
}

type GetUserPoolClientTokenValidityUnitArgs struct {
	// (Optional) Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
	AccessToken pulumix.Input[string] `pulumi:"accessToken"`
	// (Optional) Time unit in for the value in `idTokenValidity`, defaults to `hours`.
	IdToken pulumix.Input[string] `pulumi:"idToken"`
	// (Optional) Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
	RefreshToken pulumix.Input[string] `pulumi:"refreshToken"`
}

func (GetUserPoolClientTokenValidityUnitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolClientTokenValidityUnit)(nil)).Elem()
}

func (i GetUserPoolClientTokenValidityUnitArgs) ToGetUserPoolClientTokenValidityUnitOutput() GetUserPoolClientTokenValidityUnitOutput {
	return i.ToGetUserPoolClientTokenValidityUnitOutputWithContext(context.Background())
}

func (i GetUserPoolClientTokenValidityUnitArgs) ToGetUserPoolClientTokenValidityUnitOutputWithContext(ctx context.Context) GetUserPoolClientTokenValidityUnitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPoolClientTokenValidityUnitOutput)
}

func (i *GetUserPoolClientTokenValidityUnitArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserPoolClientTokenValidityUnitArgs] {
	return pulumix.Val(i)
}

type GetUserPoolClientTokenValidityUnitOutput struct{ *pulumi.OutputState }

func (GetUserPoolClientTokenValidityUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPoolClientTokenValidityUnit)(nil)).Elem()
}

func (o GetUserPoolClientTokenValidityUnitOutput) ToGetUserPoolClientTokenValidityUnitOutput() GetUserPoolClientTokenValidityUnitOutput {
	return o
}

func (o GetUserPoolClientTokenValidityUnitOutput) ToGetUserPoolClientTokenValidityUnitOutputWithContext(ctx context.Context) GetUserPoolClientTokenValidityUnitOutput {
	return o
}

func (o GetUserPoolClientTokenValidityUnitOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserPoolClientTokenValidityUnit] {
	return pulumix.Output[GetUserPoolClientTokenValidityUnit]{
		OutputState: o.OutputState,
	}
}

// (Optional) Time unit in for the value in `accessTokenValidity`, defaults to `hours`.
func (o GetUserPoolClientTokenValidityUnitOutput) AccessToken() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientTokenValidityUnit](o, func(v GetUserPoolClientTokenValidityUnit) string { return v.AccessToken })
}

// (Optional) Time unit in for the value in `idTokenValidity`, defaults to `hours`.
func (o GetUserPoolClientTokenValidityUnitOutput) IdToken() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientTokenValidityUnit](o, func(v GetUserPoolClientTokenValidityUnit) string { return v.IdToken })
}

// (Optional) Time unit in for the value in `refreshTokenValidity`, defaults to `days`.
func (o GetUserPoolClientTokenValidityUnitOutput) RefreshToken() pulumix.Output[string] {
	return pulumix.Apply[GetUserPoolClientTokenValidityUnit](o, func(v GetUserPoolClientTokenValidityUnit) string { return v.RefreshToken })
}

func init() {
	pulumi.RegisterOutputType(IdentityPoolCognitoIdentityProviderOutput{})
	pulumi.RegisterOutputType(IdentityPoolRoleAttachmentRoleMappingOutput{})
	pulumi.RegisterOutputType(IdentityPoolRoleAttachmentRoleMappingMappingRuleOutput{})
	pulumi.RegisterOutputType(ManagedUserPoolClientAnalyticsConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedUserPoolClientTokenValidityUnitsOutput{})
	pulumi.RegisterOutputType(ResourceServerScopeOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationActionsOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutput{})
	pulumi.RegisterOutputType(RiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutput{})
	pulumi.RegisterOutputType(RiskConfigurationCompromisedCredentialsRiskConfigurationOutput{})
	pulumi.RegisterOutputType(RiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutput{})
	pulumi.RegisterOutputType(RiskConfigurationRiskExceptionConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolAccountRecoverySettingOutput{})
	pulumi.RegisterOutputType(UserPoolAccountRecoverySettingRecoveryMechanismOutput{})
	pulumi.RegisterOutputType(UserPoolAdminCreateUserConfigOutput{})
	pulumi.RegisterOutputType(UserPoolAdminCreateUserConfigInviteMessageTemplateOutput{})
	pulumi.RegisterOutputType(UserPoolClientAnalyticsConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolClientTokenValidityUnitsOutput{})
	pulumi.RegisterOutputType(UserPoolDeviceConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolEmailConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolLambdaConfigOutput{})
	pulumi.RegisterOutputType(UserPoolLambdaConfigCustomEmailSenderOutput{})
	pulumi.RegisterOutputType(UserPoolLambdaConfigCustomSmsSenderOutput{})
	pulumi.RegisterOutputType(UserPoolPasswordPolicyOutput{})
	pulumi.RegisterOutputType(UserPoolSchemaOutput{})
	pulumi.RegisterOutputType(UserPoolSchemaNumberAttributeConstraintsOutput{})
	pulumi.RegisterOutputType(UserPoolSchemaStringAttributeConstraintsOutput{})
	pulumi.RegisterOutputType(UserPoolSmsConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolSoftwareTokenMfaConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolUserAttributeUpdateSettingsOutput{})
	pulumi.RegisterOutputType(UserPoolUserPoolAddOnsOutput{})
	pulumi.RegisterOutputType(UserPoolUsernameConfigurationOutput{})
	pulumi.RegisterOutputType(UserPoolVerificationMessageTemplateOutput{})
	pulumi.RegisterOutputType(GetUserPoolClientAnalyticsConfigurationOutput{})
	pulumi.RegisterOutputType(GetUserPoolClientTokenValidityUnitOutput{})
}
