// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CompositeAlarmActionsSuppressor struct {
	// Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
	Alarm string `pulumi:"alarm"`
	// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
	ExtensionPeriod int `pulumi:"extensionPeriod"`
	// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
	WaitPeriod int `pulumi:"waitPeriod"`
}

type CompositeAlarmActionsSuppressorArgs struct {
	// Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
	Alarm pulumix.Input[string] `pulumi:"alarm"`
	// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
	ExtensionPeriod pulumix.Input[int] `pulumi:"extensionPeriod"`
	// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
	WaitPeriod pulumix.Input[int] `pulumi:"waitPeriod"`
}

func (CompositeAlarmActionsSuppressorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositeAlarmActionsSuppressor)(nil)).Elem()
}

func (i CompositeAlarmActionsSuppressorArgs) ToCompositeAlarmActionsSuppressorOutput() CompositeAlarmActionsSuppressorOutput {
	return i.ToCompositeAlarmActionsSuppressorOutputWithContext(context.Background())
}

func (i CompositeAlarmActionsSuppressorArgs) ToCompositeAlarmActionsSuppressorOutputWithContext(ctx context.Context) CompositeAlarmActionsSuppressorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositeAlarmActionsSuppressorOutput)
}

func (i *CompositeAlarmActionsSuppressorArgs) ToOutput(ctx context.Context) pulumix.Output[*CompositeAlarmActionsSuppressorArgs] {
	return pulumix.Val(i)
}

type CompositeAlarmActionsSuppressorOutput struct{ *pulumi.OutputState }

func (CompositeAlarmActionsSuppressorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositeAlarmActionsSuppressor)(nil)).Elem()
}

func (o CompositeAlarmActionsSuppressorOutput) ToCompositeAlarmActionsSuppressorOutput() CompositeAlarmActionsSuppressorOutput {
	return o
}

func (o CompositeAlarmActionsSuppressorOutput) ToCompositeAlarmActionsSuppressorOutputWithContext(ctx context.Context) CompositeAlarmActionsSuppressorOutput {
	return o
}

func (o CompositeAlarmActionsSuppressorOutput) ToOutput(ctx context.Context) pulumix.Output[CompositeAlarmActionsSuppressor] {
	return pulumix.Output[CompositeAlarmActionsSuppressor]{
		OutputState: o.OutputState,
	}
}

// Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
func (o CompositeAlarmActionsSuppressorOutput) Alarm() pulumix.Output[string] {
	return pulumix.Apply[CompositeAlarmActionsSuppressor](o, func(v CompositeAlarmActionsSuppressor) string { return v.Alarm })
}

// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
func (o CompositeAlarmActionsSuppressorOutput) ExtensionPeriod() pulumix.Output[int] {
	return pulumix.Apply[CompositeAlarmActionsSuppressor](o, func(v CompositeAlarmActionsSuppressor) int { return v.ExtensionPeriod })
}

// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
func (o CompositeAlarmActionsSuppressorOutput) WaitPeriod() pulumix.Output[int] {
	return pulumix.Apply[CompositeAlarmActionsSuppressor](o, func(v CompositeAlarmActionsSuppressor) int { return v.WaitPeriod })
}

type EventConnectionAuthParameters struct {
	// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with `basic` and `oauth`. Documented below.
	ApiKey *EventConnectionAuthParametersApiKey `pulumi:"apiKey"`
	// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with `apiKey` and `oauth`. Documented below.
	Basic *EventConnectionAuthParametersBasic `pulumi:"basic"`
	// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
	InvocationHttpParameters *EventConnectionAuthParametersInvocationHttpParameters `pulumi:"invocationHttpParameters"`
	// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with `basic` and `apiKey`. Documented below.
	Oauth *EventConnectionAuthParametersOauth `pulumi:"oauth"`
}

type EventConnectionAuthParametersArgs struct {
	// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with `basic` and `oauth`. Documented below.
	ApiKey pulumix.Input[*EventConnectionAuthParametersApiKeyArgs] `pulumi:"apiKey"`
	// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with `apiKey` and `oauth`. Documented below.
	Basic pulumix.Input[*EventConnectionAuthParametersBasicArgs] `pulumi:"basic"`
	// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
	InvocationHttpParameters pulumix.Input[*EventConnectionAuthParametersInvocationHttpParametersArgs] `pulumi:"invocationHttpParameters"`
	// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with `basic` and `apiKey`. Documented below.
	Oauth pulumix.Input[*EventConnectionAuthParametersOauthArgs] `pulumi:"oauth"`
}

func (EventConnectionAuthParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParameters)(nil)).Elem()
}

func (i EventConnectionAuthParametersArgs) ToEventConnectionAuthParametersOutput() EventConnectionAuthParametersOutput {
	return i.ToEventConnectionAuthParametersOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersArgs) ToEventConnectionAuthParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOutput)
}

func (i *EventConnectionAuthParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParameters)(nil)).Elem()
}

func (o EventConnectionAuthParametersOutput) ToEventConnectionAuthParametersOutput() EventConnectionAuthParametersOutput {
	return o
}

func (o EventConnectionAuthParametersOutput) ToEventConnectionAuthParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersOutput {
	return o
}

func (o EventConnectionAuthParametersOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParameters] {
	return pulumix.Output[EventConnectionAuthParameters]{
		OutputState: o.OutputState,
	}
}

// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with `basic` and `oauth`. Documented below.
func (o EventConnectionAuthParametersOutput) ApiKey() pulumix.GPtrOutput[EventConnectionAuthParametersApiKey, EventConnectionAuthParametersApiKeyOutput] {
	value := pulumix.Apply[EventConnectionAuthParameters](o, func(v EventConnectionAuthParameters) *EventConnectionAuthParametersApiKey { return v.ApiKey })
	return pulumix.GPtrOutput[EventConnectionAuthParametersApiKey, EventConnectionAuthParametersApiKeyOutput]{OutputState: value.OutputState}
}

// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with `apiKey` and `oauth`. Documented below.
func (o EventConnectionAuthParametersOutput) Basic() pulumix.GPtrOutput[EventConnectionAuthParametersBasic, EventConnectionAuthParametersBasicOutput] {
	value := pulumix.Apply[EventConnectionAuthParameters](o, func(v EventConnectionAuthParameters) *EventConnectionAuthParametersBasic { return v.Basic })
	return pulumix.GPtrOutput[EventConnectionAuthParametersBasic, EventConnectionAuthParametersBasicOutput]{OutputState: value.OutputState}
}

// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
func (o EventConnectionAuthParametersOutput) InvocationHttpParameters() pulumix.GPtrOutput[EventConnectionAuthParametersInvocationHttpParameters, EventConnectionAuthParametersInvocationHttpParametersOutput] {
	value := pulumix.Apply[EventConnectionAuthParameters](o, func(v EventConnectionAuthParameters) *EventConnectionAuthParametersInvocationHttpParameters {
		return v.InvocationHttpParameters
	})
	return pulumix.GPtrOutput[EventConnectionAuthParametersInvocationHttpParameters, EventConnectionAuthParametersInvocationHttpParametersOutput]{OutputState: value.OutputState}
}

// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with `basic` and `apiKey`. Documented below.
func (o EventConnectionAuthParametersOutput) Oauth() pulumix.GPtrOutput[EventConnectionAuthParametersOauth, EventConnectionAuthParametersOauthOutput] {
	value := pulumix.Apply[EventConnectionAuthParameters](o, func(v EventConnectionAuthParameters) *EventConnectionAuthParametersOauth { return v.Oauth })
	return pulumix.GPtrOutput[EventConnectionAuthParametersOauth, EventConnectionAuthParametersOauthOutput]{OutputState: value.OutputState}
}

type EventConnectionAuthParametersApiKey struct {
	// Header Name.
	Key string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value string `pulumi:"value"`
}

type EventConnectionAuthParametersApiKeyArgs struct {
	// Header Name.
	Key pulumix.Input[string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (EventConnectionAuthParametersApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersApiKey)(nil)).Elem()
}

func (i EventConnectionAuthParametersApiKeyArgs) ToEventConnectionAuthParametersApiKeyOutput() EventConnectionAuthParametersApiKeyOutput {
	return i.ToEventConnectionAuthParametersApiKeyOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersApiKeyArgs) ToEventConnectionAuthParametersApiKeyOutputWithContext(ctx context.Context) EventConnectionAuthParametersApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersApiKeyOutput)
}

func (i *EventConnectionAuthParametersApiKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersApiKeyArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersApiKeyOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersApiKey)(nil)).Elem()
}

func (o EventConnectionAuthParametersApiKeyOutput) ToEventConnectionAuthParametersApiKeyOutput() EventConnectionAuthParametersApiKeyOutput {
	return o
}

func (o EventConnectionAuthParametersApiKeyOutput) ToEventConnectionAuthParametersApiKeyOutputWithContext(ctx context.Context) EventConnectionAuthParametersApiKeyOutput {
	return o
}

func (o EventConnectionAuthParametersApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersApiKey] {
	return pulumix.Output[EventConnectionAuthParametersApiKey]{
		OutputState: o.OutputState,
	}
}

// Header Name.
func (o EventConnectionAuthParametersApiKeyOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersApiKey](o, func(v EventConnectionAuthParametersApiKey) string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersApiKeyOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersApiKey](o, func(v EventConnectionAuthParametersApiKey) string { return v.Value })
}

type EventConnectionAuthParametersBasic struct {
	// A password for the authorization. Created and stored in AWS Secrets Manager.
	Password string `pulumi:"password"`
	// A username for the authorization.
	Username string `pulumi:"username"`
}

type EventConnectionAuthParametersBasicArgs struct {
	// A password for the authorization. Created and stored in AWS Secrets Manager.
	Password pulumix.Input[string] `pulumi:"password"`
	// A username for the authorization.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (EventConnectionAuthParametersBasicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersBasic)(nil)).Elem()
}

func (i EventConnectionAuthParametersBasicArgs) ToEventConnectionAuthParametersBasicOutput() EventConnectionAuthParametersBasicOutput {
	return i.ToEventConnectionAuthParametersBasicOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersBasicArgs) ToEventConnectionAuthParametersBasicOutputWithContext(ctx context.Context) EventConnectionAuthParametersBasicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersBasicOutput)
}

func (i *EventConnectionAuthParametersBasicArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersBasicArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersBasicOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersBasicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersBasic)(nil)).Elem()
}

func (o EventConnectionAuthParametersBasicOutput) ToEventConnectionAuthParametersBasicOutput() EventConnectionAuthParametersBasicOutput {
	return o
}

func (o EventConnectionAuthParametersBasicOutput) ToEventConnectionAuthParametersBasicOutputWithContext(ctx context.Context) EventConnectionAuthParametersBasicOutput {
	return o
}

func (o EventConnectionAuthParametersBasicOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersBasic] {
	return pulumix.Output[EventConnectionAuthParametersBasic]{
		OutputState: o.OutputState,
	}
}

// A password for the authorization. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersBasicOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersBasic](o, func(v EventConnectionAuthParametersBasic) string { return v.Password })
}

// A username for the authorization.
func (o EventConnectionAuthParametersBasicOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersBasic](o, func(v EventConnectionAuthParametersBasic) string { return v.Username })
}

type EventConnectionAuthParametersInvocationHttpParameters struct {
	// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Bodies []EventConnectionAuthParametersInvocationHttpParametersBody `pulumi:"bodies"`
	// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Headers []EventConnectionAuthParametersInvocationHttpParametersHeader `pulumi:"headers"`
	// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	QueryStrings []EventConnectionAuthParametersInvocationHttpParametersQueryString `pulumi:"queryStrings"`
}

type EventConnectionAuthParametersInvocationHttpParametersArgs struct {
	// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Bodies pulumix.Input[[]*EventConnectionAuthParametersInvocationHttpParametersBodyArgs] `pulumi:"bodies"`
	// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Headers pulumix.Input[[]*EventConnectionAuthParametersInvocationHttpParametersHeaderArgs] `pulumi:"headers"`
	// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	QueryStrings pulumix.Input[[]*EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs] `pulumi:"queryStrings"`
}

func (EventConnectionAuthParametersInvocationHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParameters)(nil)).Elem()
}

func (i EventConnectionAuthParametersInvocationHttpParametersArgs) ToEventConnectionAuthParametersInvocationHttpParametersOutput() EventConnectionAuthParametersInvocationHttpParametersOutput {
	return i.ToEventConnectionAuthParametersInvocationHttpParametersOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersInvocationHttpParametersArgs) ToEventConnectionAuthParametersInvocationHttpParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersInvocationHttpParametersOutput)
}

func (i *EventConnectionAuthParametersInvocationHttpParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersInvocationHttpParametersArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersInvocationHttpParametersOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersInvocationHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParameters)(nil)).Elem()
}

func (o EventConnectionAuthParametersInvocationHttpParametersOutput) ToEventConnectionAuthParametersInvocationHttpParametersOutput() EventConnectionAuthParametersInvocationHttpParametersOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersOutput) ToEventConnectionAuthParametersInvocationHttpParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersInvocationHttpParameters] {
	return pulumix.Output[EventConnectionAuthParametersInvocationHttpParameters]{
		OutputState: o.OutputState,
	}
}

// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
func (o EventConnectionAuthParametersInvocationHttpParametersOutput) Bodies() pulumix.GArrayOutput[EventConnectionAuthParametersInvocationHttpParametersBody, EventConnectionAuthParametersInvocationHttpParametersBodyOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersInvocationHttpParameters](o, func(v EventConnectionAuthParametersInvocationHttpParameters) []EventConnectionAuthParametersInvocationHttpParametersBody {
		return v.Bodies
	})
	return pulumix.GArrayOutput[EventConnectionAuthParametersInvocationHttpParametersBody, EventConnectionAuthParametersInvocationHttpParametersBodyOutput]{OutputState: value.OutputState}
}

// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
func (o EventConnectionAuthParametersInvocationHttpParametersOutput) Headers() pulumix.GArrayOutput[EventConnectionAuthParametersInvocationHttpParametersHeader, EventConnectionAuthParametersInvocationHttpParametersHeaderOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersInvocationHttpParameters](o, func(v EventConnectionAuthParametersInvocationHttpParameters) []EventConnectionAuthParametersInvocationHttpParametersHeader {
		return v.Headers
	})
	return pulumix.GArrayOutput[EventConnectionAuthParametersInvocationHttpParametersHeader, EventConnectionAuthParametersInvocationHttpParametersHeaderOutput]{OutputState: value.OutputState}
}

// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
func (o EventConnectionAuthParametersInvocationHttpParametersOutput) QueryStrings() pulumix.GArrayOutput[EventConnectionAuthParametersInvocationHttpParametersQueryString, EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersInvocationHttpParameters](o, func(v EventConnectionAuthParametersInvocationHttpParameters) []EventConnectionAuthParametersInvocationHttpParametersQueryString {
		return v.QueryStrings
	})
	return pulumix.GArrayOutput[EventConnectionAuthParametersInvocationHttpParametersQueryString, EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput]{OutputState: value.OutputState}
}

type EventConnectionAuthParametersInvocationHttpParametersBody struct {
	// Specified whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// Header Name.
	Key *string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value *string `pulumi:"value"`
}

type EventConnectionAuthParametersInvocationHttpParametersBodyArgs struct {
	// Specified whether the value is secret.
	IsValueSecret pulumix.Input[*bool] `pulumi:"isValueSecret"`
	// Header Name.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (EventConnectionAuthParametersInvocationHttpParametersBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParametersBody)(nil)).Elem()
}

func (i EventConnectionAuthParametersInvocationHttpParametersBodyArgs) ToEventConnectionAuthParametersInvocationHttpParametersBodyOutput() EventConnectionAuthParametersInvocationHttpParametersBodyOutput {
	return i.ToEventConnectionAuthParametersInvocationHttpParametersBodyOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersInvocationHttpParametersBodyArgs) ToEventConnectionAuthParametersInvocationHttpParametersBodyOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersInvocationHttpParametersBodyOutput)
}

func (i *EventConnectionAuthParametersInvocationHttpParametersBodyArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersInvocationHttpParametersBodyArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersInvocationHttpParametersBodyOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersInvocationHttpParametersBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParametersBody)(nil)).Elem()
}

func (o EventConnectionAuthParametersInvocationHttpParametersBodyOutput) ToEventConnectionAuthParametersInvocationHttpParametersBodyOutput() EventConnectionAuthParametersInvocationHttpParametersBodyOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersBodyOutput) ToEventConnectionAuthParametersInvocationHttpParametersBodyOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersBodyOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersBodyOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersInvocationHttpParametersBody] {
	return pulumix.Output[EventConnectionAuthParametersInvocationHttpParametersBody]{
		OutputState: o.OutputState,
	}
}

// Specified whether the value is secret.
func (o EventConnectionAuthParametersInvocationHttpParametersBodyOutput) IsValueSecret() pulumix.Output[*bool] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersBody](o, func(v EventConnectionAuthParametersInvocationHttpParametersBody) *bool { return v.IsValueSecret })
}

// Header Name.
func (o EventConnectionAuthParametersInvocationHttpParametersBodyOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersBody](o, func(v EventConnectionAuthParametersInvocationHttpParametersBody) *string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersInvocationHttpParametersBodyOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersBody](o, func(v EventConnectionAuthParametersInvocationHttpParametersBody) *string { return v.Value })
}

type EventConnectionAuthParametersInvocationHttpParametersHeader struct {
	// Specified whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// Header Name.
	Key *string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value *string `pulumi:"value"`
}

type EventConnectionAuthParametersInvocationHttpParametersHeaderArgs struct {
	// Specified whether the value is secret.
	IsValueSecret pulumix.Input[*bool] `pulumi:"isValueSecret"`
	// Header Name.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (EventConnectionAuthParametersInvocationHttpParametersHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParametersHeader)(nil)).Elem()
}

func (i EventConnectionAuthParametersInvocationHttpParametersHeaderArgs) ToEventConnectionAuthParametersInvocationHttpParametersHeaderOutput() EventConnectionAuthParametersInvocationHttpParametersHeaderOutput {
	return i.ToEventConnectionAuthParametersInvocationHttpParametersHeaderOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersInvocationHttpParametersHeaderArgs) ToEventConnectionAuthParametersInvocationHttpParametersHeaderOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersInvocationHttpParametersHeaderOutput)
}

func (i *EventConnectionAuthParametersInvocationHttpParametersHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersInvocationHttpParametersHeaderArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersInvocationHttpParametersHeaderOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParametersHeader)(nil)).Elem()
}

func (o EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) ToEventConnectionAuthParametersInvocationHttpParametersHeaderOutput() EventConnectionAuthParametersInvocationHttpParametersHeaderOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) ToEventConnectionAuthParametersInvocationHttpParametersHeaderOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersHeaderOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersInvocationHttpParametersHeader] {
	return pulumix.Output[EventConnectionAuthParametersInvocationHttpParametersHeader]{
		OutputState: o.OutputState,
	}
}

// Specified whether the value is secret.
func (o EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) IsValueSecret() pulumix.Output[*bool] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersHeader](o, func(v EventConnectionAuthParametersInvocationHttpParametersHeader) *bool { return v.IsValueSecret })
}

// Header Name.
func (o EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersHeader](o, func(v EventConnectionAuthParametersInvocationHttpParametersHeader) *string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersInvocationHttpParametersHeaderOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersHeader](o, func(v EventConnectionAuthParametersInvocationHttpParametersHeader) *string { return v.Value })
}

type EventConnectionAuthParametersInvocationHttpParametersQueryString struct {
	// Specified whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// Header Name.
	Key *string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value *string `pulumi:"value"`
}

type EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs struct {
	// Specified whether the value is secret.
	IsValueSecret pulumix.Input[*bool] `pulumi:"isValueSecret"`
	// Header Name.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParametersQueryString)(nil)).Elem()
}

func (i EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs) ToEventConnectionAuthParametersInvocationHttpParametersQueryStringOutput() EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput {
	return i.ToEventConnectionAuthParametersInvocationHttpParametersQueryStringOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs) ToEventConnectionAuthParametersInvocationHttpParametersQueryStringOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput)
}

func (i *EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersInvocationHttpParametersQueryStringArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersInvocationHttpParametersQueryString)(nil)).Elem()
}

func (o EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) ToEventConnectionAuthParametersInvocationHttpParametersQueryStringOutput() EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) ToEventConnectionAuthParametersInvocationHttpParametersQueryStringOutputWithContext(ctx context.Context) EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput {
	return o
}

func (o EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersInvocationHttpParametersQueryString] {
	return pulumix.Output[EventConnectionAuthParametersInvocationHttpParametersQueryString]{
		OutputState: o.OutputState,
	}
}

// Specified whether the value is secret.
func (o EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) IsValueSecret() pulumix.Output[*bool] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersQueryString](o, func(v EventConnectionAuthParametersInvocationHttpParametersQueryString) *bool { return v.IsValueSecret })
}

// Header Name.
func (o EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersQueryString](o, func(v EventConnectionAuthParametersInvocationHttpParametersQueryString) *string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersInvocationHttpParametersQueryString](o, func(v EventConnectionAuthParametersInvocationHttpParametersQueryString) *string { return v.Value })
}

type EventConnectionAuthParametersOauth struct {
	// The URL to the authorization endpoint.
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// Contains the client parameters for OAuth authorization. Contains the following two parameters.
	ClientParameters *EventConnectionAuthParametersOauthClientParameters `pulumi:"clientParameters"`
	// A password for the authorization. Created and stored in AWS Secrets Manager.
	HttpMethod string `pulumi:"httpMethod"`
	// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
	OauthHttpParameters EventConnectionAuthParametersOauthOauthHttpParameters `pulumi:"oauthHttpParameters"`
}

type EventConnectionAuthParametersOauthArgs struct {
	// The URL to the authorization endpoint.
	AuthorizationEndpoint pulumix.Input[string] `pulumi:"authorizationEndpoint"`
	// Contains the client parameters for OAuth authorization. Contains the following two parameters.
	ClientParameters pulumix.Input[*EventConnectionAuthParametersOauthClientParametersArgs] `pulumi:"clientParameters"`
	// A password for the authorization. Created and stored in AWS Secrets Manager.
	HttpMethod pulumix.Input[string] `pulumi:"httpMethod"`
	// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
	OauthHttpParameters pulumix.Input[*EventConnectionAuthParametersOauthOauthHttpParametersArgs] `pulumi:"oauthHttpParameters"`
}

func (EventConnectionAuthParametersOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauth)(nil)).Elem()
}

func (i EventConnectionAuthParametersOauthArgs) ToEventConnectionAuthParametersOauthOutput() EventConnectionAuthParametersOauthOutput {
	return i.ToEventConnectionAuthParametersOauthOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersOauthArgs) ToEventConnectionAuthParametersOauthOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOauthOutput)
}

func (i *EventConnectionAuthParametersOauthArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersOauthArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOauthOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauth)(nil)).Elem()
}

func (o EventConnectionAuthParametersOauthOutput) ToEventConnectionAuthParametersOauthOutput() EventConnectionAuthParametersOauthOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOutput) ToEventConnectionAuthParametersOauthOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersOauth] {
	return pulumix.Output[EventConnectionAuthParametersOauth]{
		OutputState: o.OutputState,
	}
}

// The URL to the authorization endpoint.
func (o EventConnectionAuthParametersOauthOutput) AuthorizationEndpoint() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersOauth](o, func(v EventConnectionAuthParametersOauth) string { return v.AuthorizationEndpoint })
}

// Contains the client parameters for OAuth authorization. Contains the following two parameters.
func (o EventConnectionAuthParametersOauthOutput) ClientParameters() pulumix.GPtrOutput[EventConnectionAuthParametersOauthClientParameters, EventConnectionAuthParametersOauthClientParametersOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersOauth](o, func(v EventConnectionAuthParametersOauth) *EventConnectionAuthParametersOauthClientParameters {
		return v.ClientParameters
	})
	return pulumix.GPtrOutput[EventConnectionAuthParametersOauthClientParameters, EventConnectionAuthParametersOauthClientParametersOutput]{OutputState: value.OutputState}
}

// A password for the authorization. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersOauthOutput) HttpMethod() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersOauth](o, func(v EventConnectionAuthParametersOauth) string { return v.HttpMethod })
}

// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
func (o EventConnectionAuthParametersOauthOutput) OauthHttpParameters() pulumix.GPtrOutput[EventConnectionAuthParametersOauthOauthHttpParameters, EventConnectionAuthParametersOauthOauthHttpParametersOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersOauth](o, func(v EventConnectionAuthParametersOauth) EventConnectionAuthParametersOauthOauthHttpParameters {
		return v.OauthHttpParameters
	})
	return pulumix.GPtrOutput[EventConnectionAuthParametersOauthOauthHttpParameters, EventConnectionAuthParametersOauthOauthHttpParametersOutput]{OutputState: value.OutputState}
}

type EventConnectionAuthParametersOauthClientParameters struct {
	// The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
	ClientId string `pulumi:"clientId"`
	// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
	ClientSecret string `pulumi:"clientSecret"`
}

type EventConnectionAuthParametersOauthClientParametersArgs struct {
	// The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
}

func (EventConnectionAuthParametersOauthClientParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthClientParameters)(nil)).Elem()
}

func (i EventConnectionAuthParametersOauthClientParametersArgs) ToEventConnectionAuthParametersOauthClientParametersOutput() EventConnectionAuthParametersOauthClientParametersOutput {
	return i.ToEventConnectionAuthParametersOauthClientParametersOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersOauthClientParametersArgs) ToEventConnectionAuthParametersOauthClientParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthClientParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOauthClientParametersOutput)
}

func (i *EventConnectionAuthParametersOauthClientParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersOauthClientParametersArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOauthClientParametersOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOauthClientParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthClientParameters)(nil)).Elem()
}

func (o EventConnectionAuthParametersOauthClientParametersOutput) ToEventConnectionAuthParametersOauthClientParametersOutput() EventConnectionAuthParametersOauthClientParametersOutput {
	return o
}

func (o EventConnectionAuthParametersOauthClientParametersOutput) ToEventConnectionAuthParametersOauthClientParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthClientParametersOutput {
	return o
}

func (o EventConnectionAuthParametersOauthClientParametersOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersOauthClientParameters] {
	return pulumix.Output[EventConnectionAuthParametersOauthClientParameters]{
		OutputState: o.OutputState,
	}
}

// The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersOauthClientParametersOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthClientParameters](o, func(v EventConnectionAuthParametersOauthClientParameters) string { return v.ClientId })
}

// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersOauthClientParametersOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthClientParameters](o, func(v EventConnectionAuthParametersOauthClientParameters) string { return v.ClientSecret })
}

type EventConnectionAuthParametersOauthOauthHttpParameters struct {
	// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Bodies []EventConnectionAuthParametersOauthOauthHttpParametersBody `pulumi:"bodies"`
	// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Headers []EventConnectionAuthParametersOauthOauthHttpParametersHeader `pulumi:"headers"`
	// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	QueryStrings []EventConnectionAuthParametersOauthOauthHttpParametersQueryString `pulumi:"queryStrings"`
}

type EventConnectionAuthParametersOauthOauthHttpParametersArgs struct {
	// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Bodies pulumix.Input[[]*EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs] `pulumi:"bodies"`
	// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	Headers pulumix.Input[[]*EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs] `pulumi:"headers"`
	// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
	QueryStrings pulumix.Input[[]*EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs] `pulumi:"queryStrings"`
}

func (EventConnectionAuthParametersOauthOauthHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParameters)(nil)).Elem()
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersOutput() EventConnectionAuthParametersOauthOauthHttpParametersOutput {
	return i.ToEventConnectionAuthParametersOauthOauthHttpParametersOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOauthOauthHttpParametersOutput)
}

func (i *EventConnectionAuthParametersOauthOauthHttpParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersOauthOauthHttpParametersArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOauthOauthHttpParametersOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOauthOauthHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParameters)(nil)).Elem()
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersOutput() EventConnectionAuthParametersOauthOauthHttpParametersOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParameters] {
	return pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParameters]{
		OutputState: o.OutputState,
	}
}

// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
func (o EventConnectionAuthParametersOauthOauthHttpParametersOutput) Bodies() pulumix.GArrayOutput[EventConnectionAuthParametersOauthOauthHttpParametersBody, EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParameters](o, func(v EventConnectionAuthParametersOauthOauthHttpParameters) []EventConnectionAuthParametersOauthOauthHttpParametersBody {
		return v.Bodies
	})
	return pulumix.GArrayOutput[EventConnectionAuthParametersOauthOauthHttpParametersBody, EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput]{OutputState: value.OutputState}
}

// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
func (o EventConnectionAuthParametersOauthOauthHttpParametersOutput) Headers() pulumix.GArrayOutput[EventConnectionAuthParametersOauthOauthHttpParametersHeader, EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParameters](o, func(v EventConnectionAuthParametersOauthOauthHttpParameters) []EventConnectionAuthParametersOauthOauthHttpParametersHeader {
		return v.Headers
	})
	return pulumix.GArrayOutput[EventConnectionAuthParametersOauthOauthHttpParametersHeader, EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput]{OutputState: value.OutputState}
}

// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
func (o EventConnectionAuthParametersOauthOauthHttpParametersOutput) QueryStrings() pulumix.GArrayOutput[EventConnectionAuthParametersOauthOauthHttpParametersQueryString, EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput] {
	value := pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParameters](o, func(v EventConnectionAuthParametersOauthOauthHttpParameters) []EventConnectionAuthParametersOauthOauthHttpParametersQueryString {
		return v.QueryStrings
	})
	return pulumix.GArrayOutput[EventConnectionAuthParametersOauthOauthHttpParametersQueryString, EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput]{OutputState: value.OutputState}
}

type EventConnectionAuthParametersOauthOauthHttpParametersBody struct {
	// Specified whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// Header Name.
	Key *string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value *string `pulumi:"value"`
}

type EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs struct {
	// Specified whether the value is secret.
	IsValueSecret pulumix.Input[*bool] `pulumi:"isValueSecret"`
	// Header Name.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParametersBody)(nil)).Elem()
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersBodyOutput() EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput {
	return i.ToEventConnectionAuthParametersOauthOauthHttpParametersBodyOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersBodyOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput)
}

func (i *EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersOauthOauthHttpParametersBodyArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParametersBody)(nil)).Elem()
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersBodyOutput() EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersBodyOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParametersBody] {
	return pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParametersBody]{
		OutputState: o.OutputState,
	}
}

// Specified whether the value is secret.
func (o EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) IsValueSecret() pulumix.Output[*bool] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersBody](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersBody) *bool { return v.IsValueSecret })
}

// Header Name.
func (o EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersBody](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersBody) *string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersBody](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersBody) *string { return v.Value })
}

type EventConnectionAuthParametersOauthOauthHttpParametersHeader struct {
	// Specified whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// Header Name.
	Key *string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value *string `pulumi:"value"`
}

type EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs struct {
	// Specified whether the value is secret.
	IsValueSecret pulumix.Input[*bool] `pulumi:"isValueSecret"`
	// Header Name.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParametersHeader)(nil)).Elem()
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput() EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput {
	return i.ToEventConnectionAuthParametersOauthOauthHttpParametersHeaderOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersHeaderOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput)
}

func (i *EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersOauthOauthHttpParametersHeaderArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParametersHeader)(nil)).Elem()
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput() EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersHeaderOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParametersHeader] {
	return pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParametersHeader]{
		OutputState: o.OutputState,
	}
}

// Specified whether the value is secret.
func (o EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) IsValueSecret() pulumix.Output[*bool] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersHeader](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersHeader) *bool { return v.IsValueSecret })
}

// Header Name.
func (o EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersHeader](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersHeader) *string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersHeader](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersHeader) *string { return v.Value })
}

type EventConnectionAuthParametersOauthOauthHttpParametersQueryString struct {
	// Specified whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// Header Name.
	Key *string `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value *string `pulumi:"value"`
}

type EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs struct {
	// Specified whether the value is secret.
	IsValueSecret pulumix.Input[*bool] `pulumi:"isValueSecret"`
	// Header Name.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Header Value. Created and stored in AWS Secrets Manager.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParametersQueryString)(nil)).Elem()
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput() EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput {
	return i.ToEventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutputWithContext(context.Background())
}

func (i EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs) ToEventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput)
}

func (i *EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs) ToOutput(ctx context.Context) pulumix.Output[*EventConnectionAuthParametersOauthOauthHttpParametersQueryStringArgs] {
	return pulumix.Val(i)
}

type EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput struct{ *pulumi.OutputState }

func (EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventConnectionAuthParametersOauthOauthHttpParametersQueryString)(nil)).Elem()
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput() EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) ToEventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutputWithContext(ctx context.Context) EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput {
	return o
}

func (o EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) ToOutput(ctx context.Context) pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParametersQueryString] {
	return pulumix.Output[EventConnectionAuthParametersOauthOauthHttpParametersQueryString]{
		OutputState: o.OutputState,
	}
}

// Specified whether the value is secret.
func (o EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) IsValueSecret() pulumix.Output[*bool] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersQueryString](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersQueryString) *bool { return v.IsValueSecret })
}

// Header Name.
func (o EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersQueryString](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersQueryString) *string { return v.Key })
}

// Header Value. Created and stored in AWS Secrets Manager.
func (o EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[EventConnectionAuthParametersOauthOauthHttpParametersQueryString](o, func(v EventConnectionAuthParametersOauthOauthHttpParametersQueryString) *string { return v.Value })
}

type EventEndpointEventBus struct {
	// The ARN of the event bus the endpoint is associated with.
	EventBusArn string `pulumi:"eventBusArn"`
}

type EventEndpointEventBusArgs struct {
	// The ARN of the event bus the endpoint is associated with.
	EventBusArn pulumix.Input[string] `pulumi:"eventBusArn"`
}

func (EventEndpointEventBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointEventBus)(nil)).Elem()
}

func (i EventEndpointEventBusArgs) ToEventEndpointEventBusOutput() EventEndpointEventBusOutput {
	return i.ToEventEndpointEventBusOutputWithContext(context.Background())
}

func (i EventEndpointEventBusArgs) ToEventEndpointEventBusOutputWithContext(ctx context.Context) EventEndpointEventBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEndpointEventBusOutput)
}

func (i *EventEndpointEventBusArgs) ToOutput(ctx context.Context) pulumix.Output[*EventEndpointEventBusArgs] {
	return pulumix.Val(i)
}

type EventEndpointEventBusOutput struct{ *pulumi.OutputState }

func (EventEndpointEventBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointEventBus)(nil)).Elem()
}

func (o EventEndpointEventBusOutput) ToEventEndpointEventBusOutput() EventEndpointEventBusOutput {
	return o
}

func (o EventEndpointEventBusOutput) ToEventEndpointEventBusOutputWithContext(ctx context.Context) EventEndpointEventBusOutput {
	return o
}

func (o EventEndpointEventBusOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpointEventBus] {
	return pulumix.Output[EventEndpointEventBus]{
		OutputState: o.OutputState,
	}
}

// The ARN of the event bus the endpoint is associated with.
func (o EventEndpointEventBusOutput) EventBusArn() pulumix.Output[string] {
	return pulumix.Apply[EventEndpointEventBus](o, func(v EventEndpointEventBus) string { return v.EventBusArn })
}

type EventEndpointReplicationConfig struct {
	// The state of event replication. Valid values: `ENABLED`, `DISABLED`. The default state is `ENABLED`, which means you must supply a `roleArn`. If you don't have a `roleArn` or you don't want event replication enabled, set `state` to `DISABLED`.
	State *string `pulumi:"state"`
}

type EventEndpointReplicationConfigArgs struct {
	// The state of event replication. Valid values: `ENABLED`, `DISABLED`. The default state is `ENABLED`, which means you must supply a `roleArn`. If you don't have a `roleArn` or you don't want event replication enabled, set `state` to `DISABLED`.
	State pulumix.Input[*string] `pulumi:"state"`
}

func (EventEndpointReplicationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointReplicationConfig)(nil)).Elem()
}

func (i EventEndpointReplicationConfigArgs) ToEventEndpointReplicationConfigOutput() EventEndpointReplicationConfigOutput {
	return i.ToEventEndpointReplicationConfigOutputWithContext(context.Background())
}

func (i EventEndpointReplicationConfigArgs) ToEventEndpointReplicationConfigOutputWithContext(ctx context.Context) EventEndpointReplicationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEndpointReplicationConfigOutput)
}

func (i *EventEndpointReplicationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventEndpointReplicationConfigArgs] {
	return pulumix.Val(i)
}

type EventEndpointReplicationConfigOutput struct{ *pulumi.OutputState }

func (EventEndpointReplicationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointReplicationConfig)(nil)).Elem()
}

func (o EventEndpointReplicationConfigOutput) ToEventEndpointReplicationConfigOutput() EventEndpointReplicationConfigOutput {
	return o
}

func (o EventEndpointReplicationConfigOutput) ToEventEndpointReplicationConfigOutputWithContext(ctx context.Context) EventEndpointReplicationConfigOutput {
	return o
}

func (o EventEndpointReplicationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpointReplicationConfig] {
	return pulumix.Output[EventEndpointReplicationConfig]{
		OutputState: o.OutputState,
	}
}

// The state of event replication. Valid values: `ENABLED`, `DISABLED`. The default state is `ENABLED`, which means you must supply a `roleArn`. If you don't have a `roleArn` or you don't want event replication enabled, set `state` to `DISABLED`.
func (o EventEndpointReplicationConfigOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[EventEndpointReplicationConfig](o, func(v EventEndpointReplicationConfig) *string { return v.State })
}

type EventEndpointRoutingConfig struct {
	// Parameters used for failover. This includes what triggers failover and what happens when it's triggered. Documented below.
	FailoverConfig EventEndpointRoutingConfigFailoverConfig `pulumi:"failoverConfig"`
}

type EventEndpointRoutingConfigArgs struct {
	// Parameters used for failover. This includes what triggers failover and what happens when it's triggered. Documented below.
	FailoverConfig pulumix.Input[*EventEndpointRoutingConfigFailoverConfigArgs] `pulumi:"failoverConfig"`
}

func (EventEndpointRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfig)(nil)).Elem()
}

func (i EventEndpointRoutingConfigArgs) ToEventEndpointRoutingConfigOutput() EventEndpointRoutingConfigOutput {
	return i.ToEventEndpointRoutingConfigOutputWithContext(context.Background())
}

func (i EventEndpointRoutingConfigArgs) ToEventEndpointRoutingConfigOutputWithContext(ctx context.Context) EventEndpointRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEndpointRoutingConfigOutput)
}

func (i *EventEndpointRoutingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventEndpointRoutingConfigArgs] {
	return pulumix.Val(i)
}

type EventEndpointRoutingConfigOutput struct{ *pulumi.OutputState }

func (EventEndpointRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfig)(nil)).Elem()
}

func (o EventEndpointRoutingConfigOutput) ToEventEndpointRoutingConfigOutput() EventEndpointRoutingConfigOutput {
	return o
}

func (o EventEndpointRoutingConfigOutput) ToEventEndpointRoutingConfigOutputWithContext(ctx context.Context) EventEndpointRoutingConfigOutput {
	return o
}

func (o EventEndpointRoutingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpointRoutingConfig] {
	return pulumix.Output[EventEndpointRoutingConfig]{
		OutputState: o.OutputState,
	}
}

// Parameters used for failover. This includes what triggers failover and what happens when it's triggered. Documented below.
func (o EventEndpointRoutingConfigOutput) FailoverConfig() pulumix.GPtrOutput[EventEndpointRoutingConfigFailoverConfig, EventEndpointRoutingConfigFailoverConfigOutput] {
	value := pulumix.Apply[EventEndpointRoutingConfig](o, func(v EventEndpointRoutingConfig) EventEndpointRoutingConfigFailoverConfig { return v.FailoverConfig })
	return pulumix.GPtrOutput[EventEndpointRoutingConfigFailoverConfig, EventEndpointRoutingConfigFailoverConfigOutput]{OutputState: value.OutputState}
}

type EventEndpointRoutingConfigFailoverConfig struct {
	// Parameters used for the primary Region. Documented below.
	Primary EventEndpointRoutingConfigFailoverConfigPrimary `pulumi:"primary"`
	// Parameters used for the secondary Region, the Region that events are routed to when failover is triggered or event replication is enabled. Documented below.
	Secondary EventEndpointRoutingConfigFailoverConfigSecondary `pulumi:"secondary"`
}

type EventEndpointRoutingConfigFailoverConfigArgs struct {
	// Parameters used for the primary Region. Documented below.
	Primary pulumix.Input[*EventEndpointRoutingConfigFailoverConfigPrimaryArgs] `pulumi:"primary"`
	// Parameters used for the secondary Region, the Region that events are routed to when failover is triggered or event replication is enabled. Documented below.
	Secondary pulumix.Input[*EventEndpointRoutingConfigFailoverConfigSecondaryArgs] `pulumi:"secondary"`
}

func (EventEndpointRoutingConfigFailoverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfigFailoverConfig)(nil)).Elem()
}

func (i EventEndpointRoutingConfigFailoverConfigArgs) ToEventEndpointRoutingConfigFailoverConfigOutput() EventEndpointRoutingConfigFailoverConfigOutput {
	return i.ToEventEndpointRoutingConfigFailoverConfigOutputWithContext(context.Background())
}

func (i EventEndpointRoutingConfigFailoverConfigArgs) ToEventEndpointRoutingConfigFailoverConfigOutputWithContext(ctx context.Context) EventEndpointRoutingConfigFailoverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEndpointRoutingConfigFailoverConfigOutput)
}

func (i *EventEndpointRoutingConfigFailoverConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventEndpointRoutingConfigFailoverConfigArgs] {
	return pulumix.Val(i)
}

type EventEndpointRoutingConfigFailoverConfigOutput struct{ *pulumi.OutputState }

func (EventEndpointRoutingConfigFailoverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfigFailoverConfig)(nil)).Elem()
}

func (o EventEndpointRoutingConfigFailoverConfigOutput) ToEventEndpointRoutingConfigFailoverConfigOutput() EventEndpointRoutingConfigFailoverConfigOutput {
	return o
}

func (o EventEndpointRoutingConfigFailoverConfigOutput) ToEventEndpointRoutingConfigFailoverConfigOutputWithContext(ctx context.Context) EventEndpointRoutingConfigFailoverConfigOutput {
	return o
}

func (o EventEndpointRoutingConfigFailoverConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpointRoutingConfigFailoverConfig] {
	return pulumix.Output[EventEndpointRoutingConfigFailoverConfig]{
		OutputState: o.OutputState,
	}
}

// Parameters used for the primary Region. Documented below.
func (o EventEndpointRoutingConfigFailoverConfigOutput) Primary() pulumix.GPtrOutput[EventEndpointRoutingConfigFailoverConfigPrimary, EventEndpointRoutingConfigFailoverConfigPrimaryOutput] {
	value := pulumix.Apply[EventEndpointRoutingConfigFailoverConfig](o, func(v EventEndpointRoutingConfigFailoverConfig) EventEndpointRoutingConfigFailoverConfigPrimary {
		return v.Primary
	})
	return pulumix.GPtrOutput[EventEndpointRoutingConfigFailoverConfigPrimary, EventEndpointRoutingConfigFailoverConfigPrimaryOutput]{OutputState: value.OutputState}
}

// Parameters used for the secondary Region, the Region that events are routed to when failover is triggered or event replication is enabled. Documented below.
func (o EventEndpointRoutingConfigFailoverConfigOutput) Secondary() pulumix.GPtrOutput[EventEndpointRoutingConfigFailoverConfigSecondary, EventEndpointRoutingConfigFailoverConfigSecondaryOutput] {
	value := pulumix.Apply[EventEndpointRoutingConfigFailoverConfig](o, func(v EventEndpointRoutingConfigFailoverConfig) EventEndpointRoutingConfigFailoverConfigSecondary {
		return v.Secondary
	})
	return pulumix.GPtrOutput[EventEndpointRoutingConfigFailoverConfigSecondary, EventEndpointRoutingConfigFailoverConfigSecondaryOutput]{OutputState: value.OutputState}
}

type EventEndpointRoutingConfigFailoverConfigPrimary struct {
	// The ARN of the health check used by the endpoint to determine whether failover is triggered.
	HealthCheck *string `pulumi:"healthCheck"`
}

type EventEndpointRoutingConfigFailoverConfigPrimaryArgs struct {
	// The ARN of the health check used by the endpoint to determine whether failover is triggered.
	HealthCheck pulumix.Input[*string] `pulumi:"healthCheck"`
}

func (EventEndpointRoutingConfigFailoverConfigPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfigFailoverConfigPrimary)(nil)).Elem()
}

func (i EventEndpointRoutingConfigFailoverConfigPrimaryArgs) ToEventEndpointRoutingConfigFailoverConfigPrimaryOutput() EventEndpointRoutingConfigFailoverConfigPrimaryOutput {
	return i.ToEventEndpointRoutingConfigFailoverConfigPrimaryOutputWithContext(context.Background())
}

func (i EventEndpointRoutingConfigFailoverConfigPrimaryArgs) ToEventEndpointRoutingConfigFailoverConfigPrimaryOutputWithContext(ctx context.Context) EventEndpointRoutingConfigFailoverConfigPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEndpointRoutingConfigFailoverConfigPrimaryOutput)
}

func (i *EventEndpointRoutingConfigFailoverConfigPrimaryArgs) ToOutput(ctx context.Context) pulumix.Output[*EventEndpointRoutingConfigFailoverConfigPrimaryArgs] {
	return pulumix.Val(i)
}

type EventEndpointRoutingConfigFailoverConfigPrimaryOutput struct{ *pulumi.OutputState }

func (EventEndpointRoutingConfigFailoverConfigPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfigFailoverConfigPrimary)(nil)).Elem()
}

func (o EventEndpointRoutingConfigFailoverConfigPrimaryOutput) ToEventEndpointRoutingConfigFailoverConfigPrimaryOutput() EventEndpointRoutingConfigFailoverConfigPrimaryOutput {
	return o
}

func (o EventEndpointRoutingConfigFailoverConfigPrimaryOutput) ToEventEndpointRoutingConfigFailoverConfigPrimaryOutputWithContext(ctx context.Context) EventEndpointRoutingConfigFailoverConfigPrimaryOutput {
	return o
}

func (o EventEndpointRoutingConfigFailoverConfigPrimaryOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpointRoutingConfigFailoverConfigPrimary] {
	return pulumix.Output[EventEndpointRoutingConfigFailoverConfigPrimary]{
		OutputState: o.OutputState,
	}
}

// The ARN of the health check used by the endpoint to determine whether failover is triggered.
func (o EventEndpointRoutingConfigFailoverConfigPrimaryOutput) HealthCheck() pulumix.Output[*string] {
	return pulumix.Apply[EventEndpointRoutingConfigFailoverConfigPrimary](o, func(v EventEndpointRoutingConfigFailoverConfigPrimary) *string { return v.HealthCheck })
}

type EventEndpointRoutingConfigFailoverConfigSecondary struct {
	// The name of the secondary Region.
	Route *string `pulumi:"route"`
}

type EventEndpointRoutingConfigFailoverConfigSecondaryArgs struct {
	// The name of the secondary Region.
	Route pulumix.Input[*string] `pulumi:"route"`
}

func (EventEndpointRoutingConfigFailoverConfigSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfigFailoverConfigSecondary)(nil)).Elem()
}

func (i EventEndpointRoutingConfigFailoverConfigSecondaryArgs) ToEventEndpointRoutingConfigFailoverConfigSecondaryOutput() EventEndpointRoutingConfigFailoverConfigSecondaryOutput {
	return i.ToEventEndpointRoutingConfigFailoverConfigSecondaryOutputWithContext(context.Background())
}

func (i EventEndpointRoutingConfigFailoverConfigSecondaryArgs) ToEventEndpointRoutingConfigFailoverConfigSecondaryOutputWithContext(ctx context.Context) EventEndpointRoutingConfigFailoverConfigSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventEndpointRoutingConfigFailoverConfigSecondaryOutput)
}

func (i *EventEndpointRoutingConfigFailoverConfigSecondaryArgs) ToOutput(ctx context.Context) pulumix.Output[*EventEndpointRoutingConfigFailoverConfigSecondaryArgs] {
	return pulumix.Val(i)
}

type EventEndpointRoutingConfigFailoverConfigSecondaryOutput struct{ *pulumi.OutputState }

func (EventEndpointRoutingConfigFailoverConfigSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpointRoutingConfigFailoverConfigSecondary)(nil)).Elem()
}

func (o EventEndpointRoutingConfigFailoverConfigSecondaryOutput) ToEventEndpointRoutingConfigFailoverConfigSecondaryOutput() EventEndpointRoutingConfigFailoverConfigSecondaryOutput {
	return o
}

func (o EventEndpointRoutingConfigFailoverConfigSecondaryOutput) ToEventEndpointRoutingConfigFailoverConfigSecondaryOutputWithContext(ctx context.Context) EventEndpointRoutingConfigFailoverConfigSecondaryOutput {
	return o
}

func (o EventEndpointRoutingConfigFailoverConfigSecondaryOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpointRoutingConfigFailoverConfigSecondary] {
	return pulumix.Output[EventEndpointRoutingConfigFailoverConfigSecondary]{
		OutputState: o.OutputState,
	}
}

// The name of the secondary Region.
func (o EventEndpointRoutingConfigFailoverConfigSecondaryOutput) Route() pulumix.Output[*string] {
	return pulumix.Apply[EventEndpointRoutingConfigFailoverConfigSecondary](o, func(v EventEndpointRoutingConfigFailoverConfigSecondary) *string { return v.Route })
}

type EventPermissionCondition struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key string `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type string `pulumi:"type"`
	// Value for the key.
	Value string `pulumi:"value"`
}

type EventPermissionConditionArgs struct {
	// Key for the condition. Valid values: `aws:PrincipalOrgID`.
	Key pulumix.Input[string] `pulumi:"key"`
	// Type of condition. Value values: `StringEquals`.
	Type pulumix.Input[string] `pulumi:"type"`
	// Value for the key.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (EventPermissionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionCondition)(nil)).Elem()
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionOutput() EventPermissionConditionOutput {
	return i.ToEventPermissionConditionOutputWithContext(context.Background())
}

func (i EventPermissionConditionArgs) ToEventPermissionConditionOutputWithContext(ctx context.Context) EventPermissionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventPermissionConditionOutput)
}

func (i *EventPermissionConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*EventPermissionConditionArgs] {
	return pulumix.Val(i)
}

type EventPermissionConditionOutput struct{ *pulumi.OutputState }

func (EventPermissionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventPermissionCondition)(nil)).Elem()
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionOutput() EventPermissionConditionOutput {
	return o
}

func (o EventPermissionConditionOutput) ToEventPermissionConditionOutputWithContext(ctx context.Context) EventPermissionConditionOutput {
	return o
}

func (o EventPermissionConditionOutput) ToOutput(ctx context.Context) pulumix.Output[EventPermissionCondition] {
	return pulumix.Output[EventPermissionCondition]{
		OutputState: o.OutputState,
	}
}

// Key for the condition. Valid values: `aws:PrincipalOrgID`.
func (o EventPermissionConditionOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[EventPermissionCondition](o, func(v EventPermissionCondition) string { return v.Key })
}

// Type of condition. Value values: `StringEquals`.
func (o EventPermissionConditionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[EventPermissionCondition](o, func(v EventPermissionCondition) string { return v.Type })
}

// Value for the key.
func (o EventPermissionConditionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[EventPermissionCondition](o, func(v EventPermissionCondition) string { return v.Value })
}

type EventTargetBatchTarget struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize *int `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts *int `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName string `pulumi:"jobName"`
}

type EventTargetBatchTargetArgs struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	ArraySize pulumix.Input[*int] `pulumi:"arraySize"`
	// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
	JobAttempts pulumix.Input[*int] `pulumi:"jobAttempts"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition pulumix.Input[string] `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName pulumix.Input[string] `pulumi:"jobName"`
}

func (EventTargetBatchTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTarget)(nil)).Elem()
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput {
	return i.ToEventTargetBatchTargetOutputWithContext(context.Background())
}

func (i EventTargetBatchTargetArgs) ToEventTargetBatchTargetOutputWithContext(ctx context.Context) EventTargetBatchTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetBatchTargetOutput)
}

func (i *EventTargetBatchTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetBatchTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetBatchTargetOutput struct{ *pulumi.OutputState }

func (EventTargetBatchTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetBatchTarget)(nil)).Elem()
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetOutput() EventTargetBatchTargetOutput {
	return o
}

func (o EventTargetBatchTargetOutput) ToEventTargetBatchTargetOutputWithContext(ctx context.Context) EventTargetBatchTargetOutput {
	return o
}

func (o EventTargetBatchTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetBatchTarget] {
	return pulumix.Output[EventTargetBatchTarget]{
		OutputState: o.OutputState,
	}
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o EventTargetBatchTargetOutput) ArraySize() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetBatchTarget](o, func(v EventTargetBatchTarget) *int { return v.ArraySize })
}

// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
func (o EventTargetBatchTargetOutput) JobAttempts() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetBatchTarget](o, func(v EventTargetBatchTarget) *int { return v.JobAttempts })
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o EventTargetBatchTargetOutput) JobDefinition() pulumix.Output[string] {
	return pulumix.Apply[EventTargetBatchTarget](o, func(v EventTargetBatchTarget) string { return v.JobDefinition })
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o EventTargetBatchTargetOutput) JobName() pulumix.Output[string] {
	return pulumix.Apply[EventTargetBatchTarget](o, func(v EventTargetBatchTarget) string { return v.JobName })
}

type EventTargetDeadLetterConfig struct {
	// ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

type EventTargetDeadLetterConfigArgs struct {
	// ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn pulumix.Input[*string] `pulumi:"arn"`
}

func (EventTargetDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetDeadLetterConfig)(nil)).Elem()
}

func (i EventTargetDeadLetterConfigArgs) ToEventTargetDeadLetterConfigOutput() EventTargetDeadLetterConfigOutput {
	return i.ToEventTargetDeadLetterConfigOutputWithContext(context.Background())
}

func (i EventTargetDeadLetterConfigArgs) ToEventTargetDeadLetterConfigOutputWithContext(ctx context.Context) EventTargetDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetDeadLetterConfigOutput)
}

func (i *EventTargetDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetDeadLetterConfigArgs] {
	return pulumix.Val(i)
}

type EventTargetDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (EventTargetDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetDeadLetterConfig)(nil)).Elem()
}

func (o EventTargetDeadLetterConfigOutput) ToEventTargetDeadLetterConfigOutput() EventTargetDeadLetterConfigOutput {
	return o
}

func (o EventTargetDeadLetterConfigOutput) ToEventTargetDeadLetterConfigOutputWithContext(ctx context.Context) EventTargetDeadLetterConfigOutput {
	return o
}

func (o EventTargetDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetDeadLetterConfig] {
	return pulumix.Output[EventTargetDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// ARN of the SQS queue specified as the target for the dead-letter queue.
func (o EventTargetDeadLetterConfigOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetDeadLetterConfig](o, func(v EventTargetDeadLetterConfig) *string { return v.Arn })
}

type EventTargetEcsTarget struct {
	// The capacity provider strategy to use for the task. If a `capacityProviderStrategy` specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
	CapacityProviderStrategies []EventTargetEcsTargetCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: `EC2`, `EXTERNAL`, or `FARGATE`.
	LaunchType *string `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if `launchType` is `FARGATE` because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration *EventTargetEcsTargetNetworkConfiguration `pulumi:"networkConfiguration"`
	// An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
	OrderedPlacementStrategies []EventTargetEcsTargetOrderedPlacementStrategy `pulumi:"orderedPlacementStrategies"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
	PlacementConstraints []EventTargetEcsTargetPlacementConstraint `pulumi:"placementConstraints"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: `TASK_DEFINITION`.
	PropagateTags *string `pulumi:"propagateTags"`
	// A map of tags to assign to ecs resources.
	Tags map[string]string `pulumi:"tags"`
	// The number of tasks to create based on the TaskDefinition. Defaults to `1`.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type EventTargetEcsTargetArgs struct {
	// The capacity provider strategy to use for the task. If a `capacityProviderStrategy` specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
	CapacityProviderStrategies pulumix.Input[[]*EventTargetEcsTargetCapacityProviderStrategyArgs] `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task.
	EnableEcsManagedTags pulumix.Input[*bool] `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
	EnableExecuteCommand pulumix.Input[*bool] `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group pulumix.Input[*string] `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: `EC2`, `EXTERNAL`, or `FARGATE`.
	LaunchType pulumix.Input[*string] `pulumi:"launchType"`
	// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if `launchType` is `FARGATE` because the awsvpc mode is required for Fargate tasks.
	NetworkConfiguration pulumix.Input[*EventTargetEcsTargetNetworkConfigurationArgs] `pulumi:"networkConfiguration"`
	// An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
	OrderedPlacementStrategies pulumix.Input[[]*EventTargetEcsTargetOrderedPlacementStrategyArgs] `pulumi:"orderedPlacementStrategies"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
	PlacementConstraints pulumix.Input[[]*EventTargetEcsTargetPlacementConstraintArgs] `pulumi:"placementConstraints"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	PlatformVersion pulumix.Input[*string] `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: `TASK_DEFINITION`.
	PropagateTags pulumix.Input[*string] `pulumi:"propagateTags"`
	// A map of tags to assign to ecs resources.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// The number of tasks to create based on the TaskDefinition. Defaults to `1`.
	TaskCount pulumix.Input[*int] `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
	TaskDefinitionArn pulumix.Input[string] `pulumi:"taskDefinitionArn"`
}

func (EventTargetEcsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return i.ToEventTargetEcsTargetOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetArgs) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOutput)
}

func (i *EventTargetEcsTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetEcsTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetEcsTargetOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTarget)(nil)).Elem()
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutput() EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToEventTargetEcsTargetOutputWithContext(ctx context.Context) EventTargetEcsTargetOutput {
	return o
}

func (o EventTargetEcsTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetEcsTarget] {
	return pulumix.Output[EventTargetEcsTarget]{
		OutputState: o.OutputState,
	}
}

// The capacity provider strategy to use for the task. If a `capacityProviderStrategy` specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
func (o EventTargetEcsTargetOutput) CapacityProviderStrategies() pulumix.GArrayOutput[EventTargetEcsTargetCapacityProviderStrategy, EventTargetEcsTargetCapacityProviderStrategyOutput] {
	value := pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) []EventTargetEcsTargetCapacityProviderStrategy {
		return v.CapacityProviderStrategies
	})
	return pulumix.GArrayOutput[EventTargetEcsTargetCapacityProviderStrategy, EventTargetEcsTargetCapacityProviderStrategyOutput]{OutputState: value.OutputState}
}

// Specifies whether to enable Amazon ECS managed tags for the task.
func (o EventTargetEcsTargetOutput) EnableEcsManagedTags() pulumix.Output[*bool] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *bool { return v.EnableEcsManagedTags })
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
func (o EventTargetEcsTargetOutput) EnableExecuteCommand() pulumix.Output[*bool] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *bool { return v.EnableExecuteCommand })
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o EventTargetEcsTargetOutput) Group() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *string { return v.Group })
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: `EC2`, `EXTERNAL`, or `FARGATE`.
func (o EventTargetEcsTargetOutput) LaunchType() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *string { return v.LaunchType })
}

// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if `launchType` is `FARGATE` because the awsvpc mode is required for Fargate tasks.
func (o EventTargetEcsTargetOutput) NetworkConfiguration() pulumix.GPtrOutput[EventTargetEcsTargetNetworkConfiguration, EventTargetEcsTargetNetworkConfigurationOutput] {
	value := pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *EventTargetEcsTargetNetworkConfiguration { return v.NetworkConfiguration })
	return pulumix.GPtrOutput[EventTargetEcsTargetNetworkConfiguration, EventTargetEcsTargetNetworkConfigurationOutput]{OutputState: value.OutputState}
}

// An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
func (o EventTargetEcsTargetOutput) OrderedPlacementStrategies() pulumix.GArrayOutput[EventTargetEcsTargetOrderedPlacementStrategy, EventTargetEcsTargetOrderedPlacementStrategyOutput] {
	value := pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) []EventTargetEcsTargetOrderedPlacementStrategy {
		return v.OrderedPlacementStrategies
	})
	return pulumix.GArrayOutput[EventTargetEcsTargetOrderedPlacementStrategy, EventTargetEcsTargetOrderedPlacementStrategyOutput]{OutputState: value.OutputState}
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
func (o EventTargetEcsTargetOutput) PlacementConstraints() pulumix.GArrayOutput[EventTargetEcsTargetPlacementConstraint, EventTargetEcsTargetPlacementConstraintOutput] {
	value := pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) []EventTargetEcsTargetPlacementConstraint { return v.PlacementConstraints })
	return pulumix.GArrayOutput[EventTargetEcsTargetPlacementConstraint, EventTargetEcsTargetPlacementConstraintOutput]{OutputState: value.OutputState}
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
func (o EventTargetEcsTargetOutput) PlatformVersion() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *string { return v.PlatformVersion })
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: `TASK_DEFINITION`.
func (o EventTargetEcsTargetOutput) PropagateTags() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *string { return v.PropagateTags })
}

// A map of tags to assign to ecs resources.
func (o EventTargetEcsTargetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The number of tasks to create based on the TaskDefinition. Defaults to `1`.
func (o EventTargetEcsTargetOutput) TaskCount() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) *int { return v.TaskCount })
}

// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
func (o EventTargetEcsTargetOutput) TaskDefinitionArn() pulumix.Output[string] {
	return pulumix.Apply[EventTargetEcsTarget](o, func(v EventTargetEcsTarget) string { return v.TaskDefinitionArn })
}

type EventTargetEcsTargetCapacityProviderStrategy struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base *int `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
	Weight *int `pulumi:"weight"`
}

type EventTargetEcsTargetCapacityProviderStrategyArgs struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
	Base pulumix.Input[*int] `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (EventTargetEcsTargetCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetCapacityProviderStrategy)(nil)).Elem()
}

func (i EventTargetEcsTargetCapacityProviderStrategyArgs) ToEventTargetEcsTargetCapacityProviderStrategyOutput() EventTargetEcsTargetCapacityProviderStrategyOutput {
	return i.ToEventTargetEcsTargetCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetCapacityProviderStrategyArgs) ToEventTargetEcsTargetCapacityProviderStrategyOutputWithContext(ctx context.Context) EventTargetEcsTargetCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetCapacityProviderStrategyOutput)
}

func (i *EventTargetEcsTargetCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetEcsTargetCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type EventTargetEcsTargetCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetCapacityProviderStrategy)(nil)).Elem()
}

func (o EventTargetEcsTargetCapacityProviderStrategyOutput) ToEventTargetEcsTargetCapacityProviderStrategyOutput() EventTargetEcsTargetCapacityProviderStrategyOutput {
	return o
}

func (o EventTargetEcsTargetCapacityProviderStrategyOutput) ToEventTargetEcsTargetCapacityProviderStrategyOutputWithContext(ctx context.Context) EventTargetEcsTargetCapacityProviderStrategyOutput {
	return o
}

func (o EventTargetEcsTargetCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetEcsTargetCapacityProviderStrategy] {
	return pulumix.Output[EventTargetEcsTargetCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to `0`.
func (o EventTargetEcsTargetCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetEcsTargetCapacityProviderStrategy](o, func(v EventTargetEcsTargetCapacityProviderStrategy) *int { return v.Base })
}

// Short name of the capacity provider.
func (o EventTargetEcsTargetCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[EventTargetEcsTargetCapacityProviderStrategy](o, func(v EventTargetEcsTargetCapacityProviderStrategy) string { return v.CapacityProvider })
}

// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
func (o EventTargetEcsTargetCapacityProviderStrategyOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetEcsTargetCapacityProviderStrategy](o, func(v EventTargetEcsTargetCapacityProviderStrategy) *int { return v.Weight })
}

type EventTargetEcsTargetNetworkConfiguration struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Defaults to `false`.
	//
	// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets []string `pulumi:"subnets"`
}

type EventTargetEcsTargetNetworkConfigurationArgs struct {
	// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Defaults to `false`.
	//
	// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	AssignPublicIp pulumix.Input[*bool] `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// The subnets associated with the task or service.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (EventTargetEcsTargetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput {
	return i.ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetNetworkConfigurationArgs) ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetNetworkConfigurationOutput)
}

func (i *EventTargetEcsTargetNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetEcsTargetNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type EventTargetEcsTargetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetNetworkConfiguration)(nil)).Elem()
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationOutput() EventTargetEcsTargetNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToEventTargetEcsTargetNetworkConfigurationOutputWithContext(ctx context.Context) EventTargetEcsTargetNetworkConfigurationOutput {
	return o
}

func (o EventTargetEcsTargetNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetEcsTargetNetworkConfiguration] {
	return pulumix.Output[EventTargetEcsTargetNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Defaults to `false`.
//
// For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
func (o EventTargetEcsTargetNetworkConfigurationOutput) AssignPublicIp() pulumix.Output[*bool] {
	return pulumix.Apply[EventTargetEcsTargetNetworkConfiguration](o, func(v EventTargetEcsTargetNetworkConfiguration) *bool { return v.AssignPublicIp })
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
func (o EventTargetEcsTargetNetworkConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventTargetEcsTargetNetworkConfiguration](o, func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The subnets associated with the task or service.
func (o EventTargetEcsTargetNetworkConfigurationOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventTargetEcsTargetNetworkConfiguration](o, func(v EventTargetEcsTargetNetworkConfiguration) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type EventTargetEcsTargetOrderedPlacementStrategy struct {
	// The field to apply the placement strategy against. For the `spread` placement strategy, valid values are `instanceId` (or `host`, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as `attribute:ecs.availability-zone`. For the `binpack` placement strategy, valid values are `cpu` and `memory`. For the `random` placement strategy, this field is not used. For more information, see [Amazon ECS task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).
	Field *string `pulumi:"field"`
	// Type of placement strategy. The only valid values at this time are `binpack`, `random` and `spread`.
	Type string `pulumi:"type"`
}

type EventTargetEcsTargetOrderedPlacementStrategyArgs struct {
	// The field to apply the placement strategy against. For the `spread` placement strategy, valid values are `instanceId` (or `host`, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as `attribute:ecs.availability-zone`. For the `binpack` placement strategy, valid values are `cpu` and `memory`. For the `random` placement strategy, this field is not used. For more information, see [Amazon ECS task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).
	Field pulumix.Input[*string] `pulumi:"field"`
	// Type of placement strategy. The only valid values at this time are `binpack`, `random` and `spread`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (EventTargetEcsTargetOrderedPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetOrderedPlacementStrategy)(nil)).Elem()
}

func (i EventTargetEcsTargetOrderedPlacementStrategyArgs) ToEventTargetEcsTargetOrderedPlacementStrategyOutput() EventTargetEcsTargetOrderedPlacementStrategyOutput {
	return i.ToEventTargetEcsTargetOrderedPlacementStrategyOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetOrderedPlacementStrategyArgs) ToEventTargetEcsTargetOrderedPlacementStrategyOutputWithContext(ctx context.Context) EventTargetEcsTargetOrderedPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetOrderedPlacementStrategyOutput)
}

func (i *EventTargetEcsTargetOrderedPlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetEcsTargetOrderedPlacementStrategyArgs] {
	return pulumix.Val(i)
}

type EventTargetEcsTargetOrderedPlacementStrategyOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetOrderedPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetOrderedPlacementStrategy)(nil)).Elem()
}

func (o EventTargetEcsTargetOrderedPlacementStrategyOutput) ToEventTargetEcsTargetOrderedPlacementStrategyOutput() EventTargetEcsTargetOrderedPlacementStrategyOutput {
	return o
}

func (o EventTargetEcsTargetOrderedPlacementStrategyOutput) ToEventTargetEcsTargetOrderedPlacementStrategyOutputWithContext(ctx context.Context) EventTargetEcsTargetOrderedPlacementStrategyOutput {
	return o
}

func (o EventTargetEcsTargetOrderedPlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetEcsTargetOrderedPlacementStrategy] {
	return pulumix.Output[EventTargetEcsTargetOrderedPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// The field to apply the placement strategy against. For the `spread` placement strategy, valid values are `instanceId` (or `host`, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as `attribute:ecs.availability-zone`. For the `binpack` placement strategy, valid values are `cpu` and `memory`. For the `random` placement strategy, this field is not used. For more information, see [Amazon ECS task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).
func (o EventTargetEcsTargetOrderedPlacementStrategyOutput) Field() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetEcsTargetOrderedPlacementStrategy](o, func(v EventTargetEcsTargetOrderedPlacementStrategy) *string { return v.Field })
}

// Type of placement strategy. The only valid values at this time are `binpack`, `random` and `spread`.
func (o EventTargetEcsTargetOrderedPlacementStrategyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[EventTargetEcsTargetOrderedPlacementStrategy](o, func(v EventTargetEcsTargetOrderedPlacementStrategy) string { return v.Type })
}

type EventTargetEcsTargetPlacementConstraint struct {
	// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression *string `pulumi:"expression"`
	// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
	Type string `pulumi:"type"`
}

type EventTargetEcsTargetPlacementConstraintArgs struct {
	// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (EventTargetEcsTargetPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetPlacementConstraint)(nil)).Elem()
}

func (i EventTargetEcsTargetPlacementConstraintArgs) ToEventTargetEcsTargetPlacementConstraintOutput() EventTargetEcsTargetPlacementConstraintOutput {
	return i.ToEventTargetEcsTargetPlacementConstraintOutputWithContext(context.Background())
}

func (i EventTargetEcsTargetPlacementConstraintArgs) ToEventTargetEcsTargetPlacementConstraintOutputWithContext(ctx context.Context) EventTargetEcsTargetPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetEcsTargetPlacementConstraintOutput)
}

func (i *EventTargetEcsTargetPlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetEcsTargetPlacementConstraintArgs] {
	return pulumix.Val(i)
}

type EventTargetEcsTargetPlacementConstraintOutput struct{ *pulumi.OutputState }

func (EventTargetEcsTargetPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetEcsTargetPlacementConstraint)(nil)).Elem()
}

func (o EventTargetEcsTargetPlacementConstraintOutput) ToEventTargetEcsTargetPlacementConstraintOutput() EventTargetEcsTargetPlacementConstraintOutput {
	return o
}

func (o EventTargetEcsTargetPlacementConstraintOutput) ToEventTargetEcsTargetPlacementConstraintOutputWithContext(ctx context.Context) EventTargetEcsTargetPlacementConstraintOutput {
	return o
}

func (o EventTargetEcsTargetPlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetEcsTargetPlacementConstraint] {
	return pulumix.Output[EventTargetEcsTargetPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
func (o EventTargetEcsTargetPlacementConstraintOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetEcsTargetPlacementConstraint](o, func(v EventTargetEcsTargetPlacementConstraint) *string { return v.Expression })
}

// Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
func (o EventTargetEcsTargetPlacementConstraintOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[EventTargetEcsTargetPlacementConstraint](o, func(v EventTargetEcsTargetPlacementConstraint) string { return v.Type })
}

type EventTargetHttpTarget struct {
	// Enables you to specify HTTP headers to add to the request.
	HeaderParameters map[string]string `pulumi:"headerParameters"`
	// The list of values that correspond sequentially to any path variables in your endpoint ARN (for example `arn:aws:execute-api:us-east-1:123456:myapi/*/POST/pets/*`).
	PathParameterValues []string `pulumi:"pathParameterValues"`
	// Represents keys/values of query string parameters that are appended to the invoked endpoint.
	QueryStringParameters map[string]string `pulumi:"queryStringParameters"`
}

type EventTargetHttpTargetArgs struct {
	// Enables you to specify HTTP headers to add to the request.
	HeaderParameters pulumix.Input[map[string]string] `pulumi:"headerParameters"`
	// The list of values that correspond sequentially to any path variables in your endpoint ARN (for example `arn:aws:execute-api:us-east-1:123456:myapi/*/POST/pets/*`).
	PathParameterValues pulumix.Input[[]string] `pulumi:"pathParameterValues"`
	// Represents keys/values of query string parameters that are appended to the invoked endpoint.
	QueryStringParameters pulumix.Input[map[string]string] `pulumi:"queryStringParameters"`
}

func (EventTargetHttpTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetHttpTarget)(nil)).Elem()
}

func (i EventTargetHttpTargetArgs) ToEventTargetHttpTargetOutput() EventTargetHttpTargetOutput {
	return i.ToEventTargetHttpTargetOutputWithContext(context.Background())
}

func (i EventTargetHttpTargetArgs) ToEventTargetHttpTargetOutputWithContext(ctx context.Context) EventTargetHttpTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetHttpTargetOutput)
}

func (i *EventTargetHttpTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetHttpTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetHttpTargetOutput struct{ *pulumi.OutputState }

func (EventTargetHttpTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetHttpTarget)(nil)).Elem()
}

func (o EventTargetHttpTargetOutput) ToEventTargetHttpTargetOutput() EventTargetHttpTargetOutput {
	return o
}

func (o EventTargetHttpTargetOutput) ToEventTargetHttpTargetOutputWithContext(ctx context.Context) EventTargetHttpTargetOutput {
	return o
}

func (o EventTargetHttpTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetHttpTarget] {
	return pulumix.Output[EventTargetHttpTarget]{
		OutputState: o.OutputState,
	}
}

// Enables you to specify HTTP headers to add to the request.
func (o EventTargetHttpTargetOutput) HeaderParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventTargetHttpTarget](o, func(v EventTargetHttpTarget) map[string]string { return v.HeaderParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The list of values that correspond sequentially to any path variables in your endpoint ARN (for example `arn:aws:execute-api:us-east-1:123456:myapi/*/POST/pets/*`).
func (o EventTargetHttpTargetOutput) PathParameterValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventTargetHttpTarget](o, func(v EventTargetHttpTarget) []string { return v.PathParameterValues })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Represents keys/values of query string parameters that are appended to the invoked endpoint.
func (o EventTargetHttpTargetOutput) QueryStringParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventTargetHttpTarget](o, func(v EventTargetHttpTarget) map[string]string { return v.QueryStringParameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type EventTargetInputTransformer struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	// * You can have as many as 100 key-value pairs.
	// * You must use JSON dot notation, not bracket notation.
	// * The keys can't start with "AWS".
	InputPaths map[string]string `pulumi:"inputPaths"`
	// Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.
	InputTemplate string `pulumi:"inputTemplate"`
}

type EventTargetInputTransformerArgs struct {
	// Key value pairs specified in the form of JSONPath (for example, time = $.time)
	// * You can have as many as 100 key-value pairs.
	// * You must use JSON dot notation, not bracket notation.
	// * The keys can't start with "AWS".
	InputPaths pulumix.Input[map[string]string] `pulumi:"inputPaths"`
	// Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.
	InputTemplate pulumix.Input[string] `pulumi:"inputTemplate"`
}

func (EventTargetInputTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return i.ToEventTargetInputTransformerOutputWithContext(context.Background())
}

func (i EventTargetInputTransformerArgs) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetInputTransformerOutput)
}

func (i *EventTargetInputTransformerArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetInputTransformerArgs] {
	return pulumix.Val(i)
}

type EventTargetInputTransformerOutput struct{ *pulumi.OutputState }

func (EventTargetInputTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetInputTransformer)(nil)).Elem()
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutput() EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToEventTargetInputTransformerOutputWithContext(ctx context.Context) EventTargetInputTransformerOutput {
	return o
}

func (o EventTargetInputTransformerOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetInputTransformer] {
	return pulumix.Output[EventTargetInputTransformer]{
		OutputState: o.OutputState,
	}
}

// Key value pairs specified in the form of JSONPath (for example, time = $.time)
// * You can have as many as 100 key-value pairs.
// * You must use JSON dot notation, not bracket notation.
// * The keys can't start with "AWS".
func (o EventTargetInputTransformerOutput) InputPaths() pulumix.MapOutput[string] {
	value := pulumix.Apply[EventTargetInputTransformer](o, func(v EventTargetInputTransformer) map[string]string { return v.InputPaths })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.
func (o EventTargetInputTransformerOutput) InputTemplate() pulumix.Output[string] {
	return pulumix.Apply[EventTargetInputTransformer](o, func(v EventTargetInputTransformer) string { return v.InputTemplate })
}

type EventTargetKinesisTarget struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath *string `pulumi:"partitionKeyPath"`
}

type EventTargetKinesisTargetArgs struct {
	// The JSON path to be extracted from the event and used as the partition key.
	PartitionKeyPath pulumix.Input[*string] `pulumi:"partitionKeyPath"`
}

func (EventTargetKinesisTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTarget)(nil)).Elem()
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput {
	return i.ToEventTargetKinesisTargetOutputWithContext(context.Background())
}

func (i EventTargetKinesisTargetArgs) ToEventTargetKinesisTargetOutputWithContext(ctx context.Context) EventTargetKinesisTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetKinesisTargetOutput)
}

func (i *EventTargetKinesisTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetKinesisTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetKinesisTargetOutput struct{ *pulumi.OutputState }

func (EventTargetKinesisTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetKinesisTarget)(nil)).Elem()
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetOutput() EventTargetKinesisTargetOutput {
	return o
}

func (o EventTargetKinesisTargetOutput) ToEventTargetKinesisTargetOutputWithContext(ctx context.Context) EventTargetKinesisTargetOutput {
	return o
}

func (o EventTargetKinesisTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetKinesisTarget] {
	return pulumix.Output[EventTargetKinesisTarget]{
		OutputState: o.OutputState,
	}
}

// The JSON path to be extracted from the event and used as the partition key.
func (o EventTargetKinesisTargetOutput) PartitionKeyPath() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetKinesisTarget](o, func(v EventTargetKinesisTarget) *string { return v.PartitionKeyPath })
}

type EventTargetRedshiftTarget struct {
	// The name of the database.
	Database string `pulumi:"database"`
	// The database user name.
	DbUser *string `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database.
	SecretsManagerArn *string `pulumi:"secretsManagerArn"`
	// The SQL statement text to run.
	Sql *string `pulumi:"sql"`
	// The name of the SQL statement.
	StatementName *string `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent *bool `pulumi:"withEvent"`
}

type EventTargetRedshiftTargetArgs struct {
	// The name of the database.
	Database pulumix.Input[string] `pulumi:"database"`
	// The database user name.
	DbUser pulumix.Input[*string] `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database.
	SecretsManagerArn pulumix.Input[*string] `pulumi:"secretsManagerArn"`
	// The SQL statement text to run.
	Sql pulumix.Input[*string] `pulumi:"sql"`
	// The name of the SQL statement.
	StatementName pulumix.Input[*string] `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent pulumix.Input[*bool] `pulumi:"withEvent"`
}

func (EventTargetRedshiftTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRedshiftTarget)(nil)).Elem()
}

func (i EventTargetRedshiftTargetArgs) ToEventTargetRedshiftTargetOutput() EventTargetRedshiftTargetOutput {
	return i.ToEventTargetRedshiftTargetOutputWithContext(context.Background())
}

func (i EventTargetRedshiftTargetArgs) ToEventTargetRedshiftTargetOutputWithContext(ctx context.Context) EventTargetRedshiftTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRedshiftTargetOutput)
}

func (i *EventTargetRedshiftTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetRedshiftTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetRedshiftTargetOutput struct{ *pulumi.OutputState }

func (EventTargetRedshiftTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRedshiftTarget)(nil)).Elem()
}

func (o EventTargetRedshiftTargetOutput) ToEventTargetRedshiftTargetOutput() EventTargetRedshiftTargetOutput {
	return o
}

func (o EventTargetRedshiftTargetOutput) ToEventTargetRedshiftTargetOutputWithContext(ctx context.Context) EventTargetRedshiftTargetOutput {
	return o
}

func (o EventTargetRedshiftTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetRedshiftTarget] {
	return pulumix.Output[EventTargetRedshiftTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the database.
func (o EventTargetRedshiftTargetOutput) Database() pulumix.Output[string] {
	return pulumix.Apply[EventTargetRedshiftTarget](o, func(v EventTargetRedshiftTarget) string { return v.Database })
}

// The database user name.
func (o EventTargetRedshiftTargetOutput) DbUser() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetRedshiftTarget](o, func(v EventTargetRedshiftTarget) *string { return v.DbUser })
}

// The name or ARN of the secret that enables access to the database.
func (o EventTargetRedshiftTargetOutput) SecretsManagerArn() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetRedshiftTarget](o, func(v EventTargetRedshiftTarget) *string { return v.SecretsManagerArn })
}

// The SQL statement text to run.
func (o EventTargetRedshiftTargetOutput) Sql() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetRedshiftTarget](o, func(v EventTargetRedshiftTarget) *string { return v.Sql })
}

// The name of the SQL statement.
func (o EventTargetRedshiftTargetOutput) StatementName() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetRedshiftTarget](o, func(v EventTargetRedshiftTarget) *string { return v.StatementName })
}

// Indicates whether to send an event back to EventBridge after the SQL statement runs.
func (o EventTargetRedshiftTargetOutput) WithEvent() pulumix.Output[*bool] {
	return pulumix.Apply[EventTargetRedshiftTarget](o, func(v EventTargetRedshiftTarget) *bool { return v.WithEvent })
}

type EventTargetRetryPolicy struct {
	// The age in seconds to continue to make retry attempts.
	MaximumEventAgeInSeconds *int `pulumi:"maximumEventAgeInSeconds"`
	// maximum number of retry attempts to make before the request fails
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
}

type EventTargetRetryPolicyArgs struct {
	// The age in seconds to continue to make retry attempts.
	MaximumEventAgeInSeconds pulumix.Input[*int] `pulumi:"maximumEventAgeInSeconds"`
	// maximum number of retry attempts to make before the request fails
	MaximumRetryAttempts pulumix.Input[*int] `pulumi:"maximumRetryAttempts"`
}

func (EventTargetRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRetryPolicy)(nil)).Elem()
}

func (i EventTargetRetryPolicyArgs) ToEventTargetRetryPolicyOutput() EventTargetRetryPolicyOutput {
	return i.ToEventTargetRetryPolicyOutputWithContext(context.Background())
}

func (i EventTargetRetryPolicyArgs) ToEventTargetRetryPolicyOutputWithContext(ctx context.Context) EventTargetRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRetryPolicyOutput)
}

func (i *EventTargetRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetRetryPolicyArgs] {
	return pulumix.Val(i)
}

type EventTargetRetryPolicyOutput struct{ *pulumi.OutputState }

func (EventTargetRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRetryPolicy)(nil)).Elem()
}

func (o EventTargetRetryPolicyOutput) ToEventTargetRetryPolicyOutput() EventTargetRetryPolicyOutput {
	return o
}

func (o EventTargetRetryPolicyOutput) ToEventTargetRetryPolicyOutputWithContext(ctx context.Context) EventTargetRetryPolicyOutput {
	return o
}

func (o EventTargetRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetRetryPolicy] {
	return pulumix.Output[EventTargetRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// The age in seconds to continue to make retry attempts.
func (o EventTargetRetryPolicyOutput) MaximumEventAgeInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetRetryPolicy](o, func(v EventTargetRetryPolicy) *int { return v.MaximumEventAgeInSeconds })
}

// maximum number of retry attempts to make before the request fails
func (o EventTargetRetryPolicyOutput) MaximumRetryAttempts() pulumix.Output[*int] {
	return pulumix.Apply[EventTargetRetryPolicy](o, func(v EventTargetRetryPolicy) *int { return v.MaximumRetryAttempts })
}

type EventTargetRunCommandTarget struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key string `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values []string `pulumi:"values"`
}

type EventTargetRunCommandTargetArgs struct {
	// Can be either `tag:tag-key` or `InstanceIds`.
	Key pulumix.Input[string] `pulumi:"key"`
	// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (EventTargetRunCommandTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return i.ToEventTargetRunCommandTargetOutputWithContext(context.Background())
}

func (i EventTargetRunCommandTargetArgs) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetRunCommandTargetOutput)
}

func (i *EventTargetRunCommandTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetRunCommandTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetRunCommandTargetOutput struct{ *pulumi.OutputState }

func (EventTargetRunCommandTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetRunCommandTarget)(nil)).Elem()
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutput() EventTargetRunCommandTargetOutput {
	return o
}

func (o EventTargetRunCommandTargetOutput) ToEventTargetRunCommandTargetOutputWithContext(ctx context.Context) EventTargetRunCommandTargetOutput {
	return o
}

func (o EventTargetRunCommandTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetRunCommandTarget] {
	return pulumix.Output[EventTargetRunCommandTarget]{
		OutputState: o.OutputState,
	}
}

// Can be either `tag:tag-key` or `InstanceIds`.
func (o EventTargetRunCommandTargetOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[EventTargetRunCommandTarget](o, func(v EventTargetRunCommandTarget) string { return v.Key })
}

// If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
func (o EventTargetRunCommandTargetOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EventTargetRunCommandTarget](o, func(v EventTargetRunCommandTarget) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type EventTargetSagemakerPipelineTarget struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution.
	PipelineParameterLists []EventTargetSagemakerPipelineTargetPipelineParameterList `pulumi:"pipelineParameterLists"`
}

type EventTargetSagemakerPipelineTargetArgs struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution.
	PipelineParameterLists pulumix.Input[[]*EventTargetSagemakerPipelineTargetPipelineParameterListArgs] `pulumi:"pipelineParameterLists"`
}

func (EventTargetSagemakerPipelineTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSagemakerPipelineTarget)(nil)).Elem()
}

func (i EventTargetSagemakerPipelineTargetArgs) ToEventTargetSagemakerPipelineTargetOutput() EventTargetSagemakerPipelineTargetOutput {
	return i.ToEventTargetSagemakerPipelineTargetOutputWithContext(context.Background())
}

func (i EventTargetSagemakerPipelineTargetArgs) ToEventTargetSagemakerPipelineTargetOutputWithContext(ctx context.Context) EventTargetSagemakerPipelineTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSagemakerPipelineTargetOutput)
}

func (i *EventTargetSagemakerPipelineTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetSagemakerPipelineTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetSagemakerPipelineTargetOutput struct{ *pulumi.OutputState }

func (EventTargetSagemakerPipelineTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSagemakerPipelineTarget)(nil)).Elem()
}

func (o EventTargetSagemakerPipelineTargetOutput) ToEventTargetSagemakerPipelineTargetOutput() EventTargetSagemakerPipelineTargetOutput {
	return o
}

func (o EventTargetSagemakerPipelineTargetOutput) ToEventTargetSagemakerPipelineTargetOutputWithContext(ctx context.Context) EventTargetSagemakerPipelineTargetOutput {
	return o
}

func (o EventTargetSagemakerPipelineTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetSagemakerPipelineTarget] {
	return pulumix.Output[EventTargetSagemakerPipelineTarget]{
		OutputState: o.OutputState,
	}
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution.
func (o EventTargetSagemakerPipelineTargetOutput) PipelineParameterLists() pulumix.GArrayOutput[EventTargetSagemakerPipelineTargetPipelineParameterList, EventTargetSagemakerPipelineTargetPipelineParameterListOutput] {
	value := pulumix.Apply[EventTargetSagemakerPipelineTarget](o, func(v EventTargetSagemakerPipelineTarget) []EventTargetSagemakerPipelineTargetPipelineParameterList {
		return v.PipelineParameterLists
	})
	return pulumix.GArrayOutput[EventTargetSagemakerPipelineTargetPipelineParameterList, EventTargetSagemakerPipelineTargetPipelineParameterListOutput]{OutputState: value.OutputState}
}

type EventTargetSagemakerPipelineTargetPipelineParameterList struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value string `pulumi:"value"`
}

type EventTargetSagemakerPipelineTargetPipelineParameterListArgs struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (EventTargetSagemakerPipelineTargetPipelineParameterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSagemakerPipelineTargetPipelineParameterList)(nil)).Elem()
}

func (i EventTargetSagemakerPipelineTargetPipelineParameterListArgs) ToEventTargetSagemakerPipelineTargetPipelineParameterListOutput() EventTargetSagemakerPipelineTargetPipelineParameterListOutput {
	return i.ToEventTargetSagemakerPipelineTargetPipelineParameterListOutputWithContext(context.Background())
}

func (i EventTargetSagemakerPipelineTargetPipelineParameterListArgs) ToEventTargetSagemakerPipelineTargetPipelineParameterListOutputWithContext(ctx context.Context) EventTargetSagemakerPipelineTargetPipelineParameterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSagemakerPipelineTargetPipelineParameterListOutput)
}

func (i *EventTargetSagemakerPipelineTargetPipelineParameterListArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetSagemakerPipelineTargetPipelineParameterListArgs] {
	return pulumix.Val(i)
}

type EventTargetSagemakerPipelineTargetPipelineParameterListOutput struct{ *pulumi.OutputState }

func (EventTargetSagemakerPipelineTargetPipelineParameterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSagemakerPipelineTargetPipelineParameterList)(nil)).Elem()
}

func (o EventTargetSagemakerPipelineTargetPipelineParameterListOutput) ToEventTargetSagemakerPipelineTargetPipelineParameterListOutput() EventTargetSagemakerPipelineTargetPipelineParameterListOutput {
	return o
}

func (o EventTargetSagemakerPipelineTargetPipelineParameterListOutput) ToEventTargetSagemakerPipelineTargetPipelineParameterListOutputWithContext(ctx context.Context) EventTargetSagemakerPipelineTargetPipelineParameterListOutput {
	return o
}

func (o EventTargetSagemakerPipelineTargetPipelineParameterListOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetSagemakerPipelineTargetPipelineParameterList] {
	return pulumix.Output[EventTargetSagemakerPipelineTargetPipelineParameterList]{
		OutputState: o.OutputState,
	}
}

// Name of parameter to start execution of a SageMaker Model Building Pipeline.
func (o EventTargetSagemakerPipelineTargetPipelineParameterListOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[EventTargetSagemakerPipelineTargetPipelineParameterList](o, func(v EventTargetSagemakerPipelineTargetPipelineParameterList) string { return v.Name })
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline.
func (o EventTargetSagemakerPipelineTargetPipelineParameterListOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[EventTargetSagemakerPipelineTargetPipelineParameterList](o, func(v EventTargetSagemakerPipelineTargetPipelineParameterList) string { return v.Value })
}

type EventTargetSqsTarget struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

type EventTargetSqsTargetArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumix.Input[*string] `pulumi:"messageGroupId"`
}

func (EventTargetSqsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTarget)(nil)).Elem()
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput {
	return i.ToEventTargetSqsTargetOutputWithContext(context.Background())
}

func (i EventTargetSqsTargetArgs) ToEventTargetSqsTargetOutputWithContext(ctx context.Context) EventTargetSqsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetSqsTargetOutput)
}

func (i *EventTargetSqsTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*EventTargetSqsTargetArgs] {
	return pulumix.Val(i)
}

type EventTargetSqsTargetOutput struct{ *pulumi.OutputState }

func (EventTargetSqsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetSqsTarget)(nil)).Elem()
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetOutput() EventTargetSqsTargetOutput {
	return o
}

func (o EventTargetSqsTargetOutput) ToEventTargetSqsTargetOutputWithContext(ctx context.Context) EventTargetSqsTargetOutput {
	return o
}

func (o EventTargetSqsTargetOutput) ToOutput(ctx context.Context) pulumix.Output[EventTargetSqsTarget] {
	return pulumix.Output[EventTargetSqsTarget]{
		OutputState: o.OutputState,
	}
}

// The FIFO message group ID to use as the target.
func (o EventTargetSqsTargetOutput) MessageGroupId() pulumix.Output[*string] {
	return pulumix.Apply[EventTargetSqsTarget](o, func(v EventTargetSqsTarget) *string { return v.MessageGroupId })
}

type InternetMonitorHealthEventsConfig struct {
	// The health event threshold percentage set for availability scores.
	AvailabilityScoreThreshold *float64 `pulumi:"availabilityScoreThreshold"`
	// The health event threshold percentage set for performance scores.
	PerformanceScoreThreshold *float64 `pulumi:"performanceScoreThreshold"`
}

type InternetMonitorHealthEventsConfigArgs struct {
	// The health event threshold percentage set for availability scores.
	AvailabilityScoreThreshold pulumix.Input[*float64] `pulumi:"availabilityScoreThreshold"`
	// The health event threshold percentage set for performance scores.
	PerformanceScoreThreshold pulumix.Input[*float64] `pulumi:"performanceScoreThreshold"`
}

func (InternetMonitorHealthEventsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitorHealthEventsConfig)(nil)).Elem()
}

func (i InternetMonitorHealthEventsConfigArgs) ToInternetMonitorHealthEventsConfigOutput() InternetMonitorHealthEventsConfigOutput {
	return i.ToInternetMonitorHealthEventsConfigOutputWithContext(context.Background())
}

func (i InternetMonitorHealthEventsConfigArgs) ToInternetMonitorHealthEventsConfigOutputWithContext(ctx context.Context) InternetMonitorHealthEventsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMonitorHealthEventsConfigOutput)
}

func (i *InternetMonitorHealthEventsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InternetMonitorHealthEventsConfigArgs] {
	return pulumix.Val(i)
}

type InternetMonitorHealthEventsConfigOutput struct{ *pulumi.OutputState }

func (InternetMonitorHealthEventsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitorHealthEventsConfig)(nil)).Elem()
}

func (o InternetMonitorHealthEventsConfigOutput) ToInternetMonitorHealthEventsConfigOutput() InternetMonitorHealthEventsConfigOutput {
	return o
}

func (o InternetMonitorHealthEventsConfigOutput) ToInternetMonitorHealthEventsConfigOutputWithContext(ctx context.Context) InternetMonitorHealthEventsConfigOutput {
	return o
}

func (o InternetMonitorHealthEventsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InternetMonitorHealthEventsConfig] {
	return pulumix.Output[InternetMonitorHealthEventsConfig]{
		OutputState: o.OutputState,
	}
}

// The health event threshold percentage set for availability scores.
func (o InternetMonitorHealthEventsConfigOutput) AvailabilityScoreThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[InternetMonitorHealthEventsConfig](o, func(v InternetMonitorHealthEventsConfig) *float64 { return v.AvailabilityScoreThreshold })
}

// The health event threshold percentage set for performance scores.
func (o InternetMonitorHealthEventsConfigOutput) PerformanceScoreThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[InternetMonitorHealthEventsConfig](o, func(v InternetMonitorHealthEventsConfig) *float64 { return v.PerformanceScoreThreshold })
}

type InternetMonitorInternetMeasurementsLogDelivery struct {
	S3Config *InternetMonitorInternetMeasurementsLogDeliveryS3Config `pulumi:"s3Config"`
}

type InternetMonitorInternetMeasurementsLogDeliveryArgs struct {
	S3Config pulumix.Input[*InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs] `pulumi:"s3Config"`
}

func (InternetMonitorInternetMeasurementsLogDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitorInternetMeasurementsLogDelivery)(nil)).Elem()
}

func (i InternetMonitorInternetMeasurementsLogDeliveryArgs) ToInternetMonitorInternetMeasurementsLogDeliveryOutput() InternetMonitorInternetMeasurementsLogDeliveryOutput {
	return i.ToInternetMonitorInternetMeasurementsLogDeliveryOutputWithContext(context.Background())
}

func (i InternetMonitorInternetMeasurementsLogDeliveryArgs) ToInternetMonitorInternetMeasurementsLogDeliveryOutputWithContext(ctx context.Context) InternetMonitorInternetMeasurementsLogDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMonitorInternetMeasurementsLogDeliveryOutput)
}

func (i *InternetMonitorInternetMeasurementsLogDeliveryArgs) ToOutput(ctx context.Context) pulumix.Output[*InternetMonitorInternetMeasurementsLogDeliveryArgs] {
	return pulumix.Val(i)
}

type InternetMonitorInternetMeasurementsLogDeliveryOutput struct{ *pulumi.OutputState }

func (InternetMonitorInternetMeasurementsLogDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitorInternetMeasurementsLogDelivery)(nil)).Elem()
}

func (o InternetMonitorInternetMeasurementsLogDeliveryOutput) ToInternetMonitorInternetMeasurementsLogDeliveryOutput() InternetMonitorInternetMeasurementsLogDeliveryOutput {
	return o
}

func (o InternetMonitorInternetMeasurementsLogDeliveryOutput) ToInternetMonitorInternetMeasurementsLogDeliveryOutputWithContext(ctx context.Context) InternetMonitorInternetMeasurementsLogDeliveryOutput {
	return o
}

func (o InternetMonitorInternetMeasurementsLogDeliveryOutput) ToOutput(ctx context.Context) pulumix.Output[InternetMonitorInternetMeasurementsLogDelivery] {
	return pulumix.Output[InternetMonitorInternetMeasurementsLogDelivery]{
		OutputState: o.OutputState,
	}
}

func (o InternetMonitorInternetMeasurementsLogDeliveryOutput) S3Config() pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDeliveryS3Config, InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput] {
	value := pulumix.Apply[InternetMonitorInternetMeasurementsLogDelivery](o, func(v InternetMonitorInternetMeasurementsLogDelivery) *InternetMonitorInternetMeasurementsLogDeliveryS3Config {
		return v.S3Config
	})
	return pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDeliveryS3Config, InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput]{OutputState: value.OutputState}
}

type InternetMonitorInternetMeasurementsLogDeliveryS3Config struct {
	BucketName        string  `pulumi:"bucketName"`
	BucketPrefix      *string `pulumi:"bucketPrefix"`
	LogDeliveryStatus *string `pulumi:"logDeliveryStatus"`
}

type InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs struct {
	BucketName        pulumix.Input[string]  `pulumi:"bucketName"`
	BucketPrefix      pulumix.Input[*string] `pulumi:"bucketPrefix"`
	LogDeliveryStatus pulumix.Input[*string] `pulumi:"logDeliveryStatus"`
}

func (InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitorInternetMeasurementsLogDeliveryS3Config)(nil)).Elem()
}

func (i InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs) ToInternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput() InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput {
	return i.ToInternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutputWithContext(context.Background())
}

func (i InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs) ToInternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutputWithContext(ctx context.Context) InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput)
}

func (i *InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InternetMonitorInternetMeasurementsLogDeliveryS3ConfigArgs] {
	return pulumix.Val(i)
}

type InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput struct{ *pulumi.OutputState }

func (InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitorInternetMeasurementsLogDeliveryS3Config)(nil)).Elem()
}

func (o InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) ToInternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput() InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput {
	return o
}

func (o InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) ToInternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutputWithContext(ctx context.Context) InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput {
	return o
}

func (o InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InternetMonitorInternetMeasurementsLogDeliveryS3Config] {
	return pulumix.Output[InternetMonitorInternetMeasurementsLogDeliveryS3Config]{
		OutputState: o.OutputState,
	}
}

func (o InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[InternetMonitorInternetMeasurementsLogDeliveryS3Config](o, func(v InternetMonitorInternetMeasurementsLogDeliveryS3Config) string { return v.BucketName })
}

func (o InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[InternetMonitorInternetMeasurementsLogDeliveryS3Config](o, func(v InternetMonitorInternetMeasurementsLogDeliveryS3Config) *string { return v.BucketPrefix })
}

func (o InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput) LogDeliveryStatus() pulumix.Output[*string] {
	return pulumix.Apply[InternetMonitorInternetMeasurementsLogDeliveryS3Config](o, func(v InternetMonitorInternetMeasurementsLogDeliveryS3Config) *string { return v.LogDeliveryStatus })
}

type LogMetricFilterMetricTransformation struct {
	// The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
	DefaultValue *string `pulumi:"defaultValue"`
	// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `defaultValue`.
	Dimensions map[string]string `pulumi:"dimensions"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
	Name string `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace string `pulumi:"namespace"`
	// The unit to assign to the metric. If you omit this, the unit is set as `None`.
	Unit *string `pulumi:"unit"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value string `pulumi:"value"`
}

type LogMetricFilterMetricTransformationArgs struct {
	// The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
	DefaultValue pulumix.Input[*string] `pulumi:"defaultValue"`
	// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `defaultValue`.
	Dimensions pulumix.Input[map[string]string] `pulumi:"dimensions"`
	// The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
	Name pulumix.Input[string] `pulumi:"name"`
	// The destination namespace of the CloudWatch metric.
	Namespace pulumix.Input[string] `pulumi:"namespace"`
	// The unit to assign to the metric. If you omit this, the unit is set as `None`.
	Unit pulumix.Input[*string] `pulumi:"unit"`
	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (LogMetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return i.ToLogMetricFilterMetricTransformationOutputWithContext(context.Background())
}

func (i LogMetricFilterMetricTransformationArgs) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricFilterMetricTransformationOutput)
}

func (i *LogMetricFilterMetricTransformationArgs) ToOutput(ctx context.Context) pulumix.Output[*LogMetricFilterMetricTransformationArgs] {
	return pulumix.Val(i)
}

type LogMetricFilterMetricTransformationOutput struct{ *pulumi.OutputState }

func (LogMetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricFilterMetricTransformation)(nil)).Elem()
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutput() LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToLogMetricFilterMetricTransformationOutputWithContext(ctx context.Context) LogMetricFilterMetricTransformationOutput {
	return o
}

func (o LogMetricFilterMetricTransformationOutput) ToOutput(ctx context.Context) pulumix.Output[LogMetricFilterMetricTransformation] {
	return pulumix.Output[LogMetricFilterMetricTransformation]{
		OutputState: o.OutputState,
	}
}

// The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
func (o LogMetricFilterMetricTransformationOutput) DefaultValue() pulumix.Output[*string] {
	return pulumix.Apply[LogMetricFilterMetricTransformation](o, func(v LogMetricFilterMetricTransformation) *string { return v.DefaultValue })
}

// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `defaultValue`.
func (o LogMetricFilterMetricTransformationOutput) Dimensions() pulumix.MapOutput[string] {
	value := pulumix.Apply[LogMetricFilterMetricTransformation](o, func(v LogMetricFilterMetricTransformation) map[string]string { return v.Dimensions })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
func (o LogMetricFilterMetricTransformationOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[LogMetricFilterMetricTransformation](o, func(v LogMetricFilterMetricTransformation) string { return v.Name })
}

// The destination namespace of the CloudWatch metric.
func (o LogMetricFilterMetricTransformationOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[LogMetricFilterMetricTransformation](o, func(v LogMetricFilterMetricTransformation) string { return v.Namespace })
}

// The unit to assign to the metric. If you omit this, the unit is set as `None`.
func (o LogMetricFilterMetricTransformationOutput) Unit() pulumix.Output[*string] {
	return pulumix.Apply[LogMetricFilterMetricTransformation](o, func(v LogMetricFilterMetricTransformation) *string { return v.Unit })
}

// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
func (o LogMetricFilterMetricTransformationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[LogMetricFilterMetricTransformation](o, func(v LogMetricFilterMetricTransformation) string { return v.Value })
}

type MetricAlarmMetricQuery struct {
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId *string `pulumi:"accountId"`
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id string `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label *string `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric *MetricAlarmMetricQueryMetric `pulumi:"metric"`
	// Granularity in seconds of returned data points.
	// For metrics with regular resolution, valid values are any multiple of `60`.
	// For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
	Period *int `pulumi:"period"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	//
	// > **NOTE:**  You must specify either `metric` or `expression`. Not both.
	ReturnData *bool `pulumi:"returnData"`
}

type MetricAlarmMetricQueryArgs struct {
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id pulumix.Input[string] `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
	Label pulumix.Input[*string] `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	Metric pulumix.Input[*MetricAlarmMetricQueryMetricArgs] `pulumi:"metric"`
	// Granularity in seconds of returned data points.
	// For metrics with regular resolution, valid values are any multiple of `60`.
	// For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
	Period pulumix.Input[*int] `pulumi:"period"`
	// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
	//
	// > **NOTE:**  You must specify either `metric` or `expression`. Not both.
	ReturnData pulumix.Input[*bool] `pulumi:"returnData"`
}

func (MetricAlarmMetricQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return i.ToMetricAlarmMetricQueryOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryArgs) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryOutput)
}

func (i *MetricAlarmMetricQueryArgs) ToOutput(ctx context.Context) pulumix.Output[*MetricAlarmMetricQueryArgs] {
	return pulumix.Val(i)
}

type MetricAlarmMetricQueryOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQuery)(nil)).Elem()
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutput() MetricAlarmMetricQueryOutput {
	return o
}

func (o MetricAlarmMetricQueryOutput) ToMetricAlarmMetricQueryOutputWithContext(ctx context.Context) MetricAlarmMetricQueryOutput {
	return o
}

func (o MetricAlarmMetricQueryOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlarmMetricQuery] {
	return pulumix.Output[MetricAlarmMetricQuery]{
		OutputState: o.OutputState,
	}
}

// The ID of the account where the metrics are located, if this is a cross-account alarm.
func (o MetricAlarmMetricQueryOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) *string { return v.AccountId })
}

// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
func (o MetricAlarmMetricQueryOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) *string { return v.Expression })
}

// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
func (o MetricAlarmMetricQueryOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) string { return v.Id })
}

// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
func (o MetricAlarmMetricQueryOutput) Label() pulumix.Output[*string] {
	return pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) *string { return v.Label })
}

// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
func (o MetricAlarmMetricQueryOutput) Metric() pulumix.GPtrOutput[MetricAlarmMetricQueryMetric, MetricAlarmMetricQueryMetricOutput] {
	value := pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) *MetricAlarmMetricQueryMetric { return v.Metric })
	return pulumix.GPtrOutput[MetricAlarmMetricQueryMetric, MetricAlarmMetricQueryMetricOutput]{OutputState: value.OutputState}
}

// Granularity in seconds of returned data points.
// For metrics with regular resolution, valid values are any multiple of `60`.
// For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
func (o MetricAlarmMetricQueryOutput) Period() pulumix.Output[*int] {
	return pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) *int { return v.Period })
}

// Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
//
// > **NOTE:**  You must specify either `metric` or `expression`. Not both.
func (o MetricAlarmMetricQueryOutput) ReturnData() pulumix.Output[*bool] {
	return pulumix.Apply[MetricAlarmMetricQuery](o, func(v MetricAlarmMetricQuery) *bool { return v.ReturnData })
}

type MetricAlarmMetricQueryMetric struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions map[string]string `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName string `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace *string `pulumi:"namespace"`
	// Granularity in seconds of returned data points.
	// For metrics with regular resolution, valid values are any multiple of `60`.
	// For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
	Period int `pulumi:"period"`
	// The statistic to apply to this metric.
	// See docs for [supported statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
	Stat string `pulumi:"stat"`
	// The unit for this metric.
	Unit *string `pulumi:"unit"`
}

type MetricAlarmMetricQueryMetricArgs struct {
	// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Dimensions pulumix.Input[map[string]string] `pulumi:"dimensions"`
	// The name for this metric.
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	MetricName pulumix.Input[string] `pulumi:"metricName"`
	// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
	// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
	// Granularity in seconds of returned data points.
	// For metrics with regular resolution, valid values are any multiple of `60`.
	// For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
	Period pulumix.Input[int] `pulumi:"period"`
	// The statistic to apply to this metric.
	// See docs for [supported statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
	Stat pulumix.Input[string] `pulumi:"stat"`
	// The unit for this metric.
	Unit pulumix.Input[*string] `pulumi:"unit"`
}

func (MetricAlarmMetricQueryMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return i.ToMetricAlarmMetricQueryMetricOutputWithContext(context.Background())
}

func (i MetricAlarmMetricQueryMetricArgs) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlarmMetricQueryMetricOutput)
}

func (i *MetricAlarmMetricQueryMetricArgs) ToOutput(ctx context.Context) pulumix.Output[*MetricAlarmMetricQueryMetricArgs] {
	return pulumix.Val(i)
}

type MetricAlarmMetricQueryMetricOutput struct{ *pulumi.OutputState }

func (MetricAlarmMetricQueryMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlarmMetricQueryMetric)(nil)).Elem()
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutput() MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToMetricAlarmMetricQueryMetricOutputWithContext(ctx context.Context) MetricAlarmMetricQueryMetricOutput {
	return o
}

func (o MetricAlarmMetricQueryMetricOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlarmMetricQueryMetric] {
	return pulumix.Output[MetricAlarmMetricQueryMetric]{
		OutputState: o.OutputState,
	}
}

// The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) Dimensions() pulumix.MapOutput[string] {
	value := pulumix.Apply[MetricAlarmMetricQueryMetric](o, func(v MetricAlarmMetricQueryMetric) map[string]string { return v.Dimensions })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The name for this metric.
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) MetricName() pulumix.Output[string] {
	return pulumix.Apply[MetricAlarmMetricQueryMetric](o, func(v MetricAlarmMetricQueryMetric) string { return v.MetricName })
}

// The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
// See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
func (o MetricAlarmMetricQueryMetricOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[MetricAlarmMetricQueryMetric](o, func(v MetricAlarmMetricQueryMetric) *string { return v.Namespace })
}

// Granularity in seconds of returned data points.
// For metrics with regular resolution, valid values are any multiple of `60`.
// For high-resolution metrics, valid values are `1`, `5`, `10`, `30`, or any multiple of `60`.
func (o MetricAlarmMetricQueryMetricOutput) Period() pulumix.Output[int] {
	return pulumix.Apply[MetricAlarmMetricQueryMetric](o, func(v MetricAlarmMetricQueryMetric) int { return v.Period })
}

// The statistic to apply to this metric.
// See docs for [supported statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
func (o MetricAlarmMetricQueryMetricOutput) Stat() pulumix.Output[string] {
	return pulumix.Apply[MetricAlarmMetricQueryMetric](o, func(v MetricAlarmMetricQueryMetric) string { return v.Stat })
}

// The unit for this metric.
func (o MetricAlarmMetricQueryMetricOutput) Unit() pulumix.Output[*string] {
	return pulumix.Apply[MetricAlarmMetricQueryMetric](o, func(v MetricAlarmMetricQueryMetric) *string { return v.Unit })
}

type MetricStreamExcludeFilter struct {
	// An array that defines the metrics you want to exclude for this metric namespace
	MetricNames []string `pulumi:"metricNames"`
	// Name of the metric namespace in the filter.
	Namespace string `pulumi:"namespace"`
}

type MetricStreamExcludeFilterArgs struct {
	// An array that defines the metrics you want to exclude for this metric namespace
	MetricNames pulumix.Input[[]string] `pulumi:"metricNames"`
	// Name of the metric namespace in the filter.
	Namespace pulumix.Input[string] `pulumi:"namespace"`
}

func (MetricStreamExcludeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamExcludeFilter)(nil)).Elem()
}

func (i MetricStreamExcludeFilterArgs) ToMetricStreamExcludeFilterOutput() MetricStreamExcludeFilterOutput {
	return i.ToMetricStreamExcludeFilterOutputWithContext(context.Background())
}

func (i MetricStreamExcludeFilterArgs) ToMetricStreamExcludeFilterOutputWithContext(ctx context.Context) MetricStreamExcludeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamExcludeFilterOutput)
}

func (i *MetricStreamExcludeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*MetricStreamExcludeFilterArgs] {
	return pulumix.Val(i)
}

type MetricStreamExcludeFilterOutput struct{ *pulumi.OutputState }

func (MetricStreamExcludeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamExcludeFilter)(nil)).Elem()
}

func (o MetricStreamExcludeFilterOutput) ToMetricStreamExcludeFilterOutput() MetricStreamExcludeFilterOutput {
	return o
}

func (o MetricStreamExcludeFilterOutput) ToMetricStreamExcludeFilterOutputWithContext(ctx context.Context) MetricStreamExcludeFilterOutput {
	return o
}

func (o MetricStreamExcludeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[MetricStreamExcludeFilter] {
	return pulumix.Output[MetricStreamExcludeFilter]{
		OutputState: o.OutputState,
	}
}

// An array that defines the metrics you want to exclude for this metric namespace
func (o MetricStreamExcludeFilterOutput) MetricNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MetricStreamExcludeFilter](o, func(v MetricStreamExcludeFilter) []string { return v.MetricNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the metric namespace in the filter.
func (o MetricStreamExcludeFilterOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[MetricStreamExcludeFilter](o, func(v MetricStreamExcludeFilter) string { return v.Namespace })
}

type MetricStreamIncludeFilter struct {
	// An array that defines the metrics you want to include for this metric namespace
	MetricNames []string `pulumi:"metricNames"`
	// Name of the metric namespace in the filter.
	Namespace string `pulumi:"namespace"`
}

type MetricStreamIncludeFilterArgs struct {
	// An array that defines the metrics you want to include for this metric namespace
	MetricNames pulumix.Input[[]string] `pulumi:"metricNames"`
	// Name of the metric namespace in the filter.
	Namespace pulumix.Input[string] `pulumi:"namespace"`
}

func (MetricStreamIncludeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamIncludeFilter)(nil)).Elem()
}

func (i MetricStreamIncludeFilterArgs) ToMetricStreamIncludeFilterOutput() MetricStreamIncludeFilterOutput {
	return i.ToMetricStreamIncludeFilterOutputWithContext(context.Background())
}

func (i MetricStreamIncludeFilterArgs) ToMetricStreamIncludeFilterOutputWithContext(ctx context.Context) MetricStreamIncludeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamIncludeFilterOutput)
}

func (i *MetricStreamIncludeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*MetricStreamIncludeFilterArgs] {
	return pulumix.Val(i)
}

type MetricStreamIncludeFilterOutput struct{ *pulumi.OutputState }

func (MetricStreamIncludeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamIncludeFilter)(nil)).Elem()
}

func (o MetricStreamIncludeFilterOutput) ToMetricStreamIncludeFilterOutput() MetricStreamIncludeFilterOutput {
	return o
}

func (o MetricStreamIncludeFilterOutput) ToMetricStreamIncludeFilterOutputWithContext(ctx context.Context) MetricStreamIncludeFilterOutput {
	return o
}

func (o MetricStreamIncludeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[MetricStreamIncludeFilter] {
	return pulumix.Output[MetricStreamIncludeFilter]{
		OutputState: o.OutputState,
	}
}

// An array that defines the metrics you want to include for this metric namespace
func (o MetricStreamIncludeFilterOutput) MetricNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MetricStreamIncludeFilter](o, func(v MetricStreamIncludeFilter) []string { return v.MetricNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Name of the metric namespace in the filter.
func (o MetricStreamIncludeFilterOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[MetricStreamIncludeFilter](o, func(v MetricStreamIncludeFilter) string { return v.Namespace })
}

type MetricStreamStatisticsConfiguration struct {
	// The additional statistics to stream for the metrics listed in `includeMetrics`.
	AdditionalStatistics []string `pulumi:"additionalStatistics"`
	// An array that defines the metrics that are to have additional statistics streamed. See details below.
	IncludeMetrics []MetricStreamStatisticsConfigurationIncludeMetric `pulumi:"includeMetrics"`
}

type MetricStreamStatisticsConfigurationArgs struct {
	// The additional statistics to stream for the metrics listed in `includeMetrics`.
	AdditionalStatistics pulumix.Input[[]string] `pulumi:"additionalStatistics"`
	// An array that defines the metrics that are to have additional statistics streamed. See details below.
	IncludeMetrics pulumix.Input[[]*MetricStreamStatisticsConfigurationIncludeMetricArgs] `pulumi:"includeMetrics"`
}

func (MetricStreamStatisticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsConfiguration)(nil)).Elem()
}

func (i MetricStreamStatisticsConfigurationArgs) ToMetricStreamStatisticsConfigurationOutput() MetricStreamStatisticsConfigurationOutput {
	return i.ToMetricStreamStatisticsConfigurationOutputWithContext(context.Background())
}

func (i MetricStreamStatisticsConfigurationArgs) ToMetricStreamStatisticsConfigurationOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamStatisticsConfigurationOutput)
}

func (i *MetricStreamStatisticsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MetricStreamStatisticsConfigurationArgs] {
	return pulumix.Val(i)
}

type MetricStreamStatisticsConfigurationOutput struct{ *pulumi.OutputState }

func (MetricStreamStatisticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsConfiguration)(nil)).Elem()
}

func (o MetricStreamStatisticsConfigurationOutput) ToMetricStreamStatisticsConfigurationOutput() MetricStreamStatisticsConfigurationOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationOutput) ToMetricStreamStatisticsConfigurationOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MetricStreamStatisticsConfiguration] {
	return pulumix.Output[MetricStreamStatisticsConfiguration]{
		OutputState: o.OutputState,
	}
}

// The additional statistics to stream for the metrics listed in `includeMetrics`.
func (o MetricStreamStatisticsConfigurationOutput) AdditionalStatistics() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MetricStreamStatisticsConfiguration](o, func(v MetricStreamStatisticsConfiguration) []string { return v.AdditionalStatistics })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// An array that defines the metrics that are to have additional statistics streamed. See details below.
func (o MetricStreamStatisticsConfigurationOutput) IncludeMetrics() pulumix.GArrayOutput[MetricStreamStatisticsConfigurationIncludeMetric, MetricStreamStatisticsConfigurationIncludeMetricOutput] {
	value := pulumix.Apply[MetricStreamStatisticsConfiguration](o, func(v MetricStreamStatisticsConfiguration) []MetricStreamStatisticsConfigurationIncludeMetric {
		return v.IncludeMetrics
	})
	return pulumix.GArrayOutput[MetricStreamStatisticsConfigurationIncludeMetric, MetricStreamStatisticsConfigurationIncludeMetricOutput]{OutputState: value.OutputState}
}

type MetricStreamStatisticsConfigurationIncludeMetric struct {
	// The name of the metric.
	MetricName string `pulumi:"metricName"`
	// Name of the metric namespace in the filter.
	Namespace string `pulumi:"namespace"`
}

type MetricStreamStatisticsConfigurationIncludeMetricArgs struct {
	// The name of the metric.
	MetricName pulumix.Input[string] `pulumi:"metricName"`
	// Name of the metric namespace in the filter.
	Namespace pulumix.Input[string] `pulumi:"namespace"`
}

func (MetricStreamStatisticsConfigurationIncludeMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsConfigurationIncludeMetric)(nil)).Elem()
}

func (i MetricStreamStatisticsConfigurationIncludeMetricArgs) ToMetricStreamStatisticsConfigurationIncludeMetricOutput() MetricStreamStatisticsConfigurationIncludeMetricOutput {
	return i.ToMetricStreamStatisticsConfigurationIncludeMetricOutputWithContext(context.Background())
}

func (i MetricStreamStatisticsConfigurationIncludeMetricArgs) ToMetricStreamStatisticsConfigurationIncludeMetricOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationIncludeMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamStatisticsConfigurationIncludeMetricOutput)
}

func (i *MetricStreamStatisticsConfigurationIncludeMetricArgs) ToOutput(ctx context.Context) pulumix.Output[*MetricStreamStatisticsConfigurationIncludeMetricArgs] {
	return pulumix.Val(i)
}

type MetricStreamStatisticsConfigurationIncludeMetricOutput struct{ *pulumi.OutputState }

func (MetricStreamStatisticsConfigurationIncludeMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsConfigurationIncludeMetric)(nil)).Elem()
}

func (o MetricStreamStatisticsConfigurationIncludeMetricOutput) ToMetricStreamStatisticsConfigurationIncludeMetricOutput() MetricStreamStatisticsConfigurationIncludeMetricOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationIncludeMetricOutput) ToMetricStreamStatisticsConfigurationIncludeMetricOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationIncludeMetricOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationIncludeMetricOutput) ToOutput(ctx context.Context) pulumix.Output[MetricStreamStatisticsConfigurationIncludeMetric] {
	return pulumix.Output[MetricStreamStatisticsConfigurationIncludeMetric]{
		OutputState: o.OutputState,
	}
}

// The name of the metric.
func (o MetricStreamStatisticsConfigurationIncludeMetricOutput) MetricName() pulumix.Output[string] {
	return pulumix.Apply[MetricStreamStatisticsConfigurationIncludeMetric](o, func(v MetricStreamStatisticsConfigurationIncludeMetric) string { return v.MetricName })
}

// Name of the metric namespace in the filter.
func (o MetricStreamStatisticsConfigurationIncludeMetricOutput) Namespace() pulumix.Output[string] {
	return pulumix.Apply[MetricStreamStatisticsConfigurationIncludeMetric](o, func(v MetricStreamStatisticsConfigurationIncludeMetric) string { return v.Namespace })
}

type GetLogDataProtectionPolicyDocumentStatement struct {
	// Set of at least 1 sensitive data identifiers that you want to mask. Read more in [Types of data that you can protect](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/protect-sensitive-log-data-types.html).
	DataIdentifiers []string `pulumi:"dataIdentifiers"`
	// Configures the data protection operation applied by this statement.
	Operation GetLogDataProtectionPolicyDocumentStatementOperation `pulumi:"operation"`
	// Name of this statement.
	Sid *string `pulumi:"sid"`
}

type GetLogDataProtectionPolicyDocumentStatementArgs struct {
	// Set of at least 1 sensitive data identifiers that you want to mask. Read more in [Types of data that you can protect](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/protect-sensitive-log-data-types.html).
	DataIdentifiers pulumix.Input[[]string] `pulumi:"dataIdentifiers"`
	// Configures the data protection operation applied by this statement.
	Operation pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationArgs] `pulumi:"operation"`
	// Name of this statement.
	Sid pulumix.Input[*string] `pulumi:"sid"`
}

func (GetLogDataProtectionPolicyDocumentStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatement)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementArgs) ToGetLogDataProtectionPolicyDocumentStatementOutput() GetLogDataProtectionPolicyDocumentStatementOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementArgs) ToGetLogDataProtectionPolicyDocumentStatementOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatement)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOutput) ToGetLogDataProtectionPolicyDocumentStatementOutput() GetLogDataProtectionPolicyDocumentStatementOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOutput) ToGetLogDataProtectionPolicyDocumentStatementOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatement] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatement]{
		OutputState: o.OutputState,
	}
}

// Set of at least 1 sensitive data identifiers that you want to mask. Read more in [Types of data that you can protect](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/protect-sensitive-log-data-types.html).
func (o GetLogDataProtectionPolicyDocumentStatementOutput) DataIdentifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatement](o, func(v GetLogDataProtectionPolicyDocumentStatement) []string { return v.DataIdentifiers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Configures the data protection operation applied by this statement.
func (o GetLogDataProtectionPolicyDocumentStatementOutput) Operation() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperation, GetLogDataProtectionPolicyDocumentStatementOperationOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatement](o, func(v GetLogDataProtectionPolicyDocumentStatement) GetLogDataProtectionPolicyDocumentStatementOperation {
		return v.Operation
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperation, GetLogDataProtectionPolicyDocumentStatementOperationOutput]{OutputState: value.OutputState}
}

// Name of this statement.
func (o GetLogDataProtectionPolicyDocumentStatementOutput) Sid() pulumix.Output[*string] {
	return pulumix.Apply[GetLogDataProtectionPolicyDocumentStatement](o, func(v GetLogDataProtectionPolicyDocumentStatement) *string { return v.Sid })
}

type GetLogDataProtectionPolicyDocumentStatementOperation struct {
	// Configures the detection of sensitive data.
	Audit *GetLogDataProtectionPolicyDocumentStatementOperationAudit `pulumi:"audit"`
	// Configures the masking of sensitive data.
	//
	// > Every policy statement must specify exactly one operation.
	Deidentify *GetLogDataProtectionPolicyDocumentStatementOperationDeidentify `pulumi:"deidentify"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationArgs struct {
	// Configures the detection of sensitive data.
	Audit pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs] `pulumi:"audit"`
	// Configures the masking of sensitive data.
	//
	// > Every policy statement must specify exactly one operation.
	Deidentify pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs] `pulumi:"deidentify"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperation)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationOutput() GetLogDataProtectionPolicyDocumentStatementOperationOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperation)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationOutput() GetLogDataProtectionPolicyDocumentStatementOperationOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperation] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperation]{
		OutputState: o.OutputState,
	}
}

// Configures the detection of sensitive data.
func (o GetLogDataProtectionPolicyDocumentStatementOperationOutput) Audit() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAudit, GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperation](o, func(v GetLogDataProtectionPolicyDocumentStatementOperation) *GetLogDataProtectionPolicyDocumentStatementOperationAudit {
		return v.Audit
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAudit, GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput]{OutputState: value.OutputState}
}

// Configures the masking of sensitive data.
//
// > Every policy statement must specify exactly one operation.
func (o GetLogDataProtectionPolicyDocumentStatementOperationOutput) Deidentify() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationDeidentify, GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperation](o, func(v GetLogDataProtectionPolicyDocumentStatementOperation) *GetLogDataProtectionPolicyDocumentStatementOperationDeidentify {
		return v.Deidentify
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationDeidentify, GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput]{OutputState: value.OutputState}
}

type GetLogDataProtectionPolicyDocumentStatementOperationAudit struct {
	// Configures destinations to send audit findings to.
	FindingsDestination GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination `pulumi:"findingsDestination"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs struct {
	// Configures destinations to send audit findings to.
	FindingsDestination pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs] `pulumi:"findingsDestination"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAudit)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationAuditOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationAuditArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAudit)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAudit] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAudit]{
		OutputState: o.OutputState,
	}
}

// Configures destinations to send audit findings to.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput) FindingsDestination() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAudit](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAudit) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination {
		return v.FindingsDestination
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput]{OutputState: value.OutputState}
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination struct {
	// Configures CloudWatch Logs as a findings destination.
	CloudwatchLogs *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// Configures Kinesis Firehose as a findings destination.
	Firehose *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose `pulumi:"firehose"`
	// Configures S3 as a findings destination.
	S3 *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3 `pulumi:"s3"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs struct {
	// Configures CloudWatch Logs as a findings destination.
	CloudwatchLogs pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs] `pulumi:"cloudwatchLogs"`
	// Configures Kinesis Firehose as a findings destination.
	Firehose pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs] `pulumi:"firehose"`
	// Configures S3 as a findings destination.
	S3 pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args] `pulumi:"s3"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination]{
		OutputState: o.OutputState,
	}
}

// Configures CloudWatch Logs as a findings destination.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) CloudwatchLogs() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination) *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs {
		return v.CloudwatchLogs
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput]{OutputState: value.OutputState}
}

// Configures Kinesis Firehose as a findings destination.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) Firehose() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination) *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose {
		return v.Firehose
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput]{OutputState: value.OutputState}
}

// Configures S3 as a findings destination.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput) S3() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestination) *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3 {
		return v.S3
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3, GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output]{OutputState: value.OutputState}
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs struct {
	// Name of the CloudWatch Log Group to send findings to.
	LogGroup string `pulumi:"logGroup"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs struct {
	// Name of the CloudWatch Log Group to send findings to.
	LogGroup pulumix.Input[string] `pulumi:"logGroup"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// Name of the CloudWatch Log Group to send findings to.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput) LogGroup() pulumix.Output[string] {
	return pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogs) string {
		return v.LogGroup
	})
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose struct {
	// Name of the Kinesis Firehose Delivery Stream to send findings to.
	DeliveryStream string `pulumi:"deliveryStream"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs struct {
	// Name of the Kinesis Firehose Delivery Stream to send findings to.
	DeliveryStream pulumix.Input[string] `pulumi:"deliveryStream"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose]{
		OutputState: o.OutputState,
	}
}

// Name of the Kinesis Firehose Delivery Stream to send findings to.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput) DeliveryStream() pulumix.Output[string] {
	return pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehose) string {
		return v.DeliveryStream
	})
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3 struct {
	// Name of the S3 Bucket to send findings to.
	Bucket string `pulumi:"bucket"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args struct {
	// Name of the S3 Bucket to send findings to.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3OutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3OutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Args] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output() GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output) ToGetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3OutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3]{
		OutputState: o.OutputState,
	}
}

// Name of the S3 Bucket to send findings to.
func (o GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output) Bucket() pulumix.Output[string] {
	return pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3) string {
		return v.Bucket
	})
}

type GetLogDataProtectionPolicyDocumentStatementOperationDeidentify struct {
	// An empty object that configures masking.
	MaskConfig GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig `pulumi:"maskConfig"`
}

type GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs struct {
	// An empty object that configures masking.
	MaskConfig pulumix.Input[*GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs] `pulumi:"maskConfig"`
}

func (GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationDeidentify)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput() GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationDeidentify)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput() GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationDeidentify] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationDeidentify]{
		OutputState: o.OutputState,
	}
}

// An empty object that configures masking.
func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput) MaskConfig() pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig, GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput] {
	value := pulumix.Apply[GetLogDataProtectionPolicyDocumentStatementOperationDeidentify](o, func(v GetLogDataProtectionPolicyDocumentStatementOperationDeidentify) GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig {
		return v.MaskConfig
	})
	return pulumix.GPtrOutput[GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig, GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput]{OutputState: value.OutputState}
}

type GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig struct {
}

type GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs struct {
}

func (GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig)(nil)).Elem()
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput() GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput {
	return i.ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutputWithContext(context.Background())
}

func (i GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput)
}

func (i *GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigArgs] {
	return pulumix.Val(i)
}

type GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput struct{ *pulumi.OutputState }

func (GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig)(nil)).Elem()
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput() GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput) ToGetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutputWithContext(ctx context.Context) GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput {
	return o
}

func (o GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig] {
	return pulumix.Output[GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfig]{
		OutputState: o.OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(CompositeAlarmActionsSuppressorOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersApiKeyOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersBasicOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersInvocationHttpParametersOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersInvocationHttpParametersBodyOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersInvocationHttpParametersHeaderOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersInvocationHttpParametersQueryStringOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOauthOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOauthClientParametersOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOauthOauthHttpParametersOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOauthOauthHttpParametersBodyOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOauthOauthHttpParametersHeaderOutput{})
	pulumi.RegisterOutputType(EventConnectionAuthParametersOauthOauthHttpParametersQueryStringOutput{})
	pulumi.RegisterOutputType(EventEndpointEventBusOutput{})
	pulumi.RegisterOutputType(EventEndpointReplicationConfigOutput{})
	pulumi.RegisterOutputType(EventEndpointRoutingConfigOutput{})
	pulumi.RegisterOutputType(EventEndpointRoutingConfigFailoverConfigOutput{})
	pulumi.RegisterOutputType(EventEndpointRoutingConfigFailoverConfigPrimaryOutput{})
	pulumi.RegisterOutputType(EventEndpointRoutingConfigFailoverConfigSecondaryOutput{})
	pulumi.RegisterOutputType(EventPermissionConditionOutput{})
	pulumi.RegisterOutputType(EventTargetBatchTargetOutput{})
	pulumi.RegisterOutputType(EventTargetDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetOrderedPlacementStrategyOutput{})
	pulumi.RegisterOutputType(EventTargetEcsTargetPlacementConstraintOutput{})
	pulumi.RegisterOutputType(EventTargetHttpTargetOutput{})
	pulumi.RegisterOutputType(EventTargetInputTransformerOutput{})
	pulumi.RegisterOutputType(EventTargetKinesisTargetOutput{})
	pulumi.RegisterOutputType(EventTargetRedshiftTargetOutput{})
	pulumi.RegisterOutputType(EventTargetRetryPolicyOutput{})
	pulumi.RegisterOutputType(EventTargetRunCommandTargetOutput{})
	pulumi.RegisterOutputType(EventTargetSagemakerPipelineTargetOutput{})
	pulumi.RegisterOutputType(EventTargetSagemakerPipelineTargetPipelineParameterListOutput{})
	pulumi.RegisterOutputType(EventTargetSqsTargetOutput{})
	pulumi.RegisterOutputType(InternetMonitorHealthEventsConfigOutput{})
	pulumi.RegisterOutputType(InternetMonitorInternetMeasurementsLogDeliveryOutput{})
	pulumi.RegisterOutputType(InternetMonitorInternetMeasurementsLogDeliveryS3ConfigOutput{})
	pulumi.RegisterOutputType(LogMetricFilterMetricTransformationOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryOutput{})
	pulumi.RegisterOutputType(MetricAlarmMetricQueryMetricOutput{})
	pulumi.RegisterOutputType(MetricStreamExcludeFilterOutput{})
	pulumi.RegisterOutputType(MetricStreamIncludeFilterOutput{})
	pulumi.RegisterOutputType(MetricStreamStatisticsConfigurationOutput{})
	pulumi.RegisterOutputType(MetricStreamStatisticsConfigurationIncludeMetricOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationAuditOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationFirehoseOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationAuditFindingsDestinationS3Output{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyOutput{})
	pulumi.RegisterOutputType(GetLogDataProtectionPolicyDocumentStatementOperationDeidentifyMaskConfigOutput{})
}
