// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ProjectArtifacts struct {
	// Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
	ArtifactIdentifier *string `pulumi:"artifactIdentifier"`
	// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
	BucketOwnerAccess *string `pulumi:"bucketOwnerAccess"`
	// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location *string `pulumi:"location"`
	// Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name *string `pulumi:"name"`
	// Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values are `BUILD_ID`, `NONE`.
	NamespaceType *string `pulumi:"namespaceType"`
	// Whether a name specified in the build specification overrides the artifact name.
	OverrideArtifactName *bool `pulumi:"overrideArtifactName"`
	// Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`, `ZIP`
	Packaging *string `pulumi:"packaging"`
	// If `type` is set to `S3`, this is the path to the output artifact.
	Path *string `pulumi:"path"`
	// Build output artifact's type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
	Type string `pulumi:"type"`
}

type ProjectArtifactsArgs struct {
	// Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
	ArtifactIdentifier pulumix.Input[*string] `pulumi:"artifactIdentifier"`
	// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
	BucketOwnerAccess pulumix.Input[*string] `pulumi:"bucketOwnerAccess"`
	// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
	EncryptionDisabled pulumix.Input[*bool] `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name pulumix.Input[*string] `pulumi:"name"`
	// Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values are `BUILD_ID`, `NONE`.
	NamespaceType pulumix.Input[*string] `pulumi:"namespaceType"`
	// Whether a name specified in the build specification overrides the artifact name.
	OverrideArtifactName pulumix.Input[*bool] `pulumi:"overrideArtifactName"`
	// Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`, `ZIP`
	Packaging pulumix.Input[*string] `pulumi:"packaging"`
	// If `type` is set to `S3`, this is the path to the output artifact.
	Path pulumix.Input[*string] `pulumi:"path"`
	// Build output artifact's type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ProjectArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectArtifacts)(nil)).Elem()
}

func (i ProjectArtifactsArgs) ToProjectArtifactsOutput() ProjectArtifactsOutput {
	return i.ToProjectArtifactsOutputWithContext(context.Background())
}

func (i ProjectArtifactsArgs) ToProjectArtifactsOutputWithContext(ctx context.Context) ProjectArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtifactsOutput)
}

func (i *ProjectArtifactsArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectArtifactsArgs] {
	return pulumix.Val(i)
}

type ProjectArtifactsOutput struct{ *pulumi.OutputState }

func (ProjectArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectArtifacts)(nil)).Elem()
}

func (o ProjectArtifactsOutput) ToProjectArtifactsOutput() ProjectArtifactsOutput {
	return o
}

func (o ProjectArtifactsOutput) ToProjectArtifactsOutputWithContext(ctx context.Context) ProjectArtifactsOutput {
	return o
}

func (o ProjectArtifactsOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectArtifacts] {
	return pulumix.Output[ProjectArtifacts]{
		OutputState: o.OutputState,
	}
}

// Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
func (o ProjectArtifactsOutput) ArtifactIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.ArtifactIdentifier })
}

// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
func (o ProjectArtifactsOutput) BucketOwnerAccess() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.BucketOwnerAccess })
}

// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
func (o ProjectArtifactsOutput) EncryptionDisabled() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *bool { return v.EncryptionDisabled })
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
func (o ProjectArtifactsOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.Location })
}

// Name of the project. If `type` is set to `S3`, this is the name of the output artifact object
func (o ProjectArtifactsOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.Name })
}

// Namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values are `BUILD_ID`, `NONE`.
func (o ProjectArtifactsOutput) NamespaceType() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.NamespaceType })
}

// Whether a name specified in the build specification overrides the artifact name.
func (o ProjectArtifactsOutput) OverrideArtifactName() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *bool { return v.OverrideArtifactName })
}

// Type of build output artifact to create. If `type` is set to `S3`, valid values are `NONE`, `ZIP`
func (o ProjectArtifactsOutput) Packaging() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.Packaging })
}

// If `type` is set to `S3`, this is the path to the output artifact.
func (o ProjectArtifactsOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) *string { return v.Path })
}

// Build output artifact's type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
func (o ProjectArtifactsOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ProjectArtifacts](o, func(v ProjectArtifacts) string { return v.Type })
}

type ProjectBuildBatchConfig struct {
	// Specifies if the build artifacts for the batch build should be combined into a single artifact location.
	CombineArtifacts *bool `pulumi:"combineArtifacts"`
	// Configuration block specifying the restrictions for the batch build. Detailed below.
	Restrictions *ProjectBuildBatchConfigRestrictions `pulumi:"restrictions"`
	// Specifies the service role ARN for the batch build project.
	ServiceRole string `pulumi:"serviceRole"`
	// Specifies the maximum amount of time, in minutes, that the batch build must be completed in.
	TimeoutInMins *int `pulumi:"timeoutInMins"`
}

type ProjectBuildBatchConfigArgs struct {
	// Specifies if the build artifacts for the batch build should be combined into a single artifact location.
	CombineArtifacts pulumix.Input[*bool] `pulumi:"combineArtifacts"`
	// Configuration block specifying the restrictions for the batch build. Detailed below.
	Restrictions pulumix.Input[*ProjectBuildBatchConfigRestrictionsArgs] `pulumi:"restrictions"`
	// Specifies the service role ARN for the batch build project.
	ServiceRole pulumix.Input[string] `pulumi:"serviceRole"`
	// Specifies the maximum amount of time, in minutes, that the batch build must be completed in.
	TimeoutInMins pulumix.Input[*int] `pulumi:"timeoutInMins"`
}

func (ProjectBuildBatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBuildBatchConfig)(nil)).Elem()
}

func (i ProjectBuildBatchConfigArgs) ToProjectBuildBatchConfigOutput() ProjectBuildBatchConfigOutput {
	return i.ToProjectBuildBatchConfigOutputWithContext(context.Background())
}

func (i ProjectBuildBatchConfigArgs) ToProjectBuildBatchConfigOutputWithContext(ctx context.Context) ProjectBuildBatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBuildBatchConfigOutput)
}

func (i *ProjectBuildBatchConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectBuildBatchConfigArgs] {
	return pulumix.Val(i)
}

type ProjectBuildBatchConfigOutput struct{ *pulumi.OutputState }

func (ProjectBuildBatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBuildBatchConfig)(nil)).Elem()
}

func (o ProjectBuildBatchConfigOutput) ToProjectBuildBatchConfigOutput() ProjectBuildBatchConfigOutput {
	return o
}

func (o ProjectBuildBatchConfigOutput) ToProjectBuildBatchConfigOutputWithContext(ctx context.Context) ProjectBuildBatchConfigOutput {
	return o
}

func (o ProjectBuildBatchConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectBuildBatchConfig] {
	return pulumix.Output[ProjectBuildBatchConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies if the build artifacts for the batch build should be combined into a single artifact location.
func (o ProjectBuildBatchConfigOutput) CombineArtifacts() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectBuildBatchConfig](o, func(v ProjectBuildBatchConfig) *bool { return v.CombineArtifacts })
}

// Configuration block specifying the restrictions for the batch build. Detailed below.
func (o ProjectBuildBatchConfigOutput) Restrictions() pulumix.GPtrOutput[ProjectBuildBatchConfigRestrictions, ProjectBuildBatchConfigRestrictionsOutput] {
	value := pulumix.Apply[ProjectBuildBatchConfig](o, func(v ProjectBuildBatchConfig) *ProjectBuildBatchConfigRestrictions { return v.Restrictions })
	return pulumix.GPtrOutput[ProjectBuildBatchConfigRestrictions, ProjectBuildBatchConfigRestrictionsOutput]{OutputState: value.OutputState}
}

// Specifies the service role ARN for the batch build project.
func (o ProjectBuildBatchConfigOutput) ServiceRole() pulumix.Output[string] {
	return pulumix.Apply[ProjectBuildBatchConfig](o, func(v ProjectBuildBatchConfig) string { return v.ServiceRole })
}

// Specifies the maximum amount of time, in minutes, that the batch build must be completed in.
func (o ProjectBuildBatchConfigOutput) TimeoutInMins() pulumix.Output[*int] {
	return pulumix.Apply[ProjectBuildBatchConfig](o, func(v ProjectBuildBatchConfig) *int { return v.TimeoutInMins })
}

type ProjectBuildBatchConfigRestrictions struct {
	// An array of strings that specify the compute types that are allowed for the batch build. See [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the AWS CodeBuild User Guide for these values.
	ComputeTypesAlloweds []string `pulumi:"computeTypesAlloweds"`
	// Specifies the maximum number of builds allowed.
	MaximumBuildsAllowed *int `pulumi:"maximumBuildsAllowed"`
}

type ProjectBuildBatchConfigRestrictionsArgs struct {
	// An array of strings that specify the compute types that are allowed for the batch build. See [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the AWS CodeBuild User Guide for these values.
	ComputeTypesAlloweds pulumix.Input[[]string] `pulumi:"computeTypesAlloweds"`
	// Specifies the maximum number of builds allowed.
	MaximumBuildsAllowed pulumix.Input[*int] `pulumi:"maximumBuildsAllowed"`
}

func (ProjectBuildBatchConfigRestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBuildBatchConfigRestrictions)(nil)).Elem()
}

func (i ProjectBuildBatchConfigRestrictionsArgs) ToProjectBuildBatchConfigRestrictionsOutput() ProjectBuildBatchConfigRestrictionsOutput {
	return i.ToProjectBuildBatchConfigRestrictionsOutputWithContext(context.Background())
}

func (i ProjectBuildBatchConfigRestrictionsArgs) ToProjectBuildBatchConfigRestrictionsOutputWithContext(ctx context.Context) ProjectBuildBatchConfigRestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBuildBatchConfigRestrictionsOutput)
}

func (i *ProjectBuildBatchConfigRestrictionsArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectBuildBatchConfigRestrictionsArgs] {
	return pulumix.Val(i)
}

type ProjectBuildBatchConfigRestrictionsOutput struct{ *pulumi.OutputState }

func (ProjectBuildBatchConfigRestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBuildBatchConfigRestrictions)(nil)).Elem()
}

func (o ProjectBuildBatchConfigRestrictionsOutput) ToProjectBuildBatchConfigRestrictionsOutput() ProjectBuildBatchConfigRestrictionsOutput {
	return o
}

func (o ProjectBuildBatchConfigRestrictionsOutput) ToProjectBuildBatchConfigRestrictionsOutputWithContext(ctx context.Context) ProjectBuildBatchConfigRestrictionsOutput {
	return o
}

func (o ProjectBuildBatchConfigRestrictionsOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectBuildBatchConfigRestrictions] {
	return pulumix.Output[ProjectBuildBatchConfigRestrictions]{
		OutputState: o.OutputState,
	}
}

// An array of strings that specify the compute types that are allowed for the batch build. See [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the AWS CodeBuild User Guide for these values.
func (o ProjectBuildBatchConfigRestrictionsOutput) ComputeTypesAlloweds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ProjectBuildBatchConfigRestrictions](o, func(v ProjectBuildBatchConfigRestrictions) []string { return v.ComputeTypesAlloweds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the maximum number of builds allowed.
func (o ProjectBuildBatchConfigRestrictionsOutput) MaximumBuildsAllowed() pulumix.Output[*int] {
	return pulumix.Apply[ProjectBuildBatchConfigRestrictions](o, func(v ProjectBuildBatchConfigRestrictions) *int { return v.MaximumBuildsAllowed })
}

type ProjectCache struct {
	// Location where the AWS CodeBuild project stores cached resources. For type `S3`, the value must be a valid S3 bucket name/prefix.
	Location *string `pulumi:"location"`
	// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, `LOCAL_CUSTOM_CACHE`.
	Modes []string `pulumi:"modes"`
	// Type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, `S3`. Defaults to `NO_CACHE`.
	Type *string `pulumi:"type"`
}

type ProjectCacheArgs struct {
	// Location where the AWS CodeBuild project stores cached resources. For type `S3`, the value must be a valid S3 bucket name/prefix.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, `LOCAL_CUSTOM_CACHE`.
	Modes pulumix.Input[[]string] `pulumi:"modes"`
	// Type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, `S3`. Defaults to `NO_CACHE`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (ProjectCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCache)(nil)).Elem()
}

func (i ProjectCacheArgs) ToProjectCacheOutput() ProjectCacheOutput {
	return i.ToProjectCacheOutputWithContext(context.Background())
}

func (i ProjectCacheArgs) ToProjectCacheOutputWithContext(ctx context.Context) ProjectCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCacheOutput)
}

func (i *ProjectCacheArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectCacheArgs] {
	return pulumix.Val(i)
}

type ProjectCacheOutput struct{ *pulumi.OutputState }

func (ProjectCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCache)(nil)).Elem()
}

func (o ProjectCacheOutput) ToProjectCacheOutput() ProjectCacheOutput {
	return o
}

func (o ProjectCacheOutput) ToProjectCacheOutputWithContext(ctx context.Context) ProjectCacheOutput {
	return o
}

func (o ProjectCacheOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectCache] {
	return pulumix.Output[ProjectCache]{
		OutputState: o.OutputState,
	}
}

// Location where the AWS CodeBuild project stores cached resources. For type `S3`, the value must be a valid S3 bucket name/prefix.
func (o ProjectCacheOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectCache](o, func(v ProjectCache) *string { return v.Location })
}

// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, `LOCAL_CUSTOM_CACHE`.
func (o ProjectCacheOutput) Modes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ProjectCache](o, func(v ProjectCache) []string { return v.Modes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, `S3`. Defaults to `NO_CACHE`.
func (o ProjectCacheOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[ProjectCache](o, func(v ProjectCache) *string { return v.Type })
}

type ProjectEnvironment struct {
	// ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
	Certificate *string `pulumi:"certificate"`
	// Information about the compute resources the build project will use. Valid values: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE`, `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` must be `BUILD_GENERAL1_LARGE`.
	ComputeType string `pulumi:"computeType"`
	// Configuration block. Detailed below.
	EnvironmentVariables []ProjectEnvironmentEnvironmentVariable `pulumi:"environmentVariables"`
	// Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/amazonlinux2-x86_64-standard:4.0`), [Docker Hub images](https://hub.docker.com/) (e.g., `pulumi/pulumi:latest`), and full Docker repository URIs such as those for ECR (e.g., `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
	Image string `pulumi:"image"`
	// Type of credentials AWS CodeBuild uses to pull images in your build. Valid values: `CODEBUILD`, `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CodeBuild credentials. Defaults to `CODEBUILD`.
	ImagePullCredentialsType *string `pulumi:"imagePullCredentialsType"`
	// Whether to enable running the Docker daemon inside a Docker container. Defaults to `false`.
	PrivilegedMode *bool `pulumi:"privilegedMode"`
	// Configuration block. Detailed below.
	RegistryCredential *ProjectEnvironmentRegistryCredential `pulumi:"registryCredential"`
	// Type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`, `SECRETS_MANAGER`.
	Type string `pulumi:"type"`
}

type ProjectEnvironmentArgs struct {
	// ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
	Certificate pulumix.Input[*string] `pulumi:"certificate"`
	// Information about the compute resources the build project will use. Valid values: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE`, `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` must be `BUILD_GENERAL1_LARGE`.
	ComputeType pulumix.Input[string] `pulumi:"computeType"`
	// Configuration block. Detailed below.
	EnvironmentVariables pulumix.Input[[]*ProjectEnvironmentEnvironmentVariableArgs] `pulumi:"environmentVariables"`
	// Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/amazonlinux2-x86_64-standard:4.0`), [Docker Hub images](https://hub.docker.com/) (e.g., `pulumi/pulumi:latest`), and full Docker repository URIs such as those for ECR (e.g., `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
	Image pulumix.Input[string] `pulumi:"image"`
	// Type of credentials AWS CodeBuild uses to pull images in your build. Valid values: `CODEBUILD`, `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CodeBuild credentials. Defaults to `CODEBUILD`.
	ImagePullCredentialsType pulumix.Input[*string] `pulumi:"imagePullCredentialsType"`
	// Whether to enable running the Docker daemon inside a Docker container. Defaults to `false`.
	PrivilegedMode pulumix.Input[*bool] `pulumi:"privilegedMode"`
	// Configuration block. Detailed below.
	RegistryCredential pulumix.Input[*ProjectEnvironmentRegistryCredentialArgs] `pulumi:"registryCredential"`
	// Type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`, `SECRETS_MANAGER`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

func (i *ProjectEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectEnvironmentArgs] {
	return pulumix.Val(i)
}

type ProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectEnvironment] {
	return pulumix.Output[ProjectEnvironment]{
		OutputState: o.OutputState,
	}
}

// ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
func (o ProjectEnvironmentOutput) Certificate() pulumix.Output[*string] {
	return pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) *string { return v.Certificate })
}

// Information about the compute resources the build project will use. Valid values: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE`, `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` must be `BUILD_GENERAL1_LARGE`.
func (o ProjectEnvironmentOutput) ComputeType() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) string { return v.ComputeType })
}

// Configuration block. Detailed below.
func (o ProjectEnvironmentOutput) EnvironmentVariables() pulumix.GArrayOutput[ProjectEnvironmentEnvironmentVariable, ProjectEnvironmentEnvironmentVariableOutput] {
	value := pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) []ProjectEnvironmentEnvironmentVariable { return v.EnvironmentVariables })
	return pulumix.GArrayOutput[ProjectEnvironmentEnvironmentVariable, ProjectEnvironmentEnvironmentVariableOutput]{OutputState: value.OutputState}
}

// Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/amazonlinux2-x86_64-standard:4.0`), [Docker Hub images](https://hub.docker.com/) (e.g., `pulumi/pulumi:latest`), and full Docker repository URIs such as those for ECR (e.g., `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
func (o ProjectEnvironmentOutput) Image() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) string { return v.Image })
}

// Type of credentials AWS CodeBuild uses to pull images in your build. Valid values: `CODEBUILD`, `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CodeBuild credentials. Defaults to `CODEBUILD`.
func (o ProjectEnvironmentOutput) ImagePullCredentialsType() pulumix.Output[*string] {
	return pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) *string { return v.ImagePullCredentialsType })
}

// Whether to enable running the Docker daemon inside a Docker container. Defaults to `false`.
func (o ProjectEnvironmentOutput) PrivilegedMode() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) *bool { return v.PrivilegedMode })
}

// Configuration block. Detailed below.
func (o ProjectEnvironmentOutput) RegistryCredential() pulumix.GPtrOutput[ProjectEnvironmentRegistryCredential, ProjectEnvironmentRegistryCredentialOutput] {
	value := pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) *ProjectEnvironmentRegistryCredential { return v.RegistryCredential })
	return pulumix.GPtrOutput[ProjectEnvironmentRegistryCredential, ProjectEnvironmentRegistryCredentialOutput]{OutputState: value.OutputState}
}

// Type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`, `SECRETS_MANAGER`.
func (o ProjectEnvironmentOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironment](o, func(v ProjectEnvironment) string { return v.Type })
}

type ProjectEnvironmentEnvironmentVariable struct {
	// Project's name.
	Name string `pulumi:"name"`
	// Build output artifact's type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
	Type *string `pulumi:"type"`
	// Environment variable's value.
	Value string `pulumi:"value"`
}

type ProjectEnvironmentEnvironmentVariableArgs struct {
	// Project's name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Build output artifact's type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
	Type pulumix.Input[*string] `pulumi:"type"`
	// Environment variable's value.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ProjectEnvironmentEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentEnvironmentVariable)(nil)).Elem()
}

func (i ProjectEnvironmentEnvironmentVariableArgs) ToProjectEnvironmentEnvironmentVariableOutput() ProjectEnvironmentEnvironmentVariableOutput {
	return i.ToProjectEnvironmentEnvironmentVariableOutputWithContext(context.Background())
}

func (i ProjectEnvironmentEnvironmentVariableArgs) ToProjectEnvironmentEnvironmentVariableOutputWithContext(ctx context.Context) ProjectEnvironmentEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentEnvironmentVariableOutput)
}

func (i *ProjectEnvironmentEnvironmentVariableArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectEnvironmentEnvironmentVariableArgs] {
	return pulumix.Val(i)
}

type ProjectEnvironmentEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentEnvironmentVariable)(nil)).Elem()
}

func (o ProjectEnvironmentEnvironmentVariableOutput) ToProjectEnvironmentEnvironmentVariableOutput() ProjectEnvironmentEnvironmentVariableOutput {
	return o
}

func (o ProjectEnvironmentEnvironmentVariableOutput) ToProjectEnvironmentEnvironmentVariableOutputWithContext(ctx context.Context) ProjectEnvironmentEnvironmentVariableOutput {
	return o
}

func (o ProjectEnvironmentEnvironmentVariableOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectEnvironmentEnvironmentVariable] {
	return pulumix.Output[ProjectEnvironmentEnvironmentVariable]{
		OutputState: o.OutputState,
	}
}

// Project's name.
func (o ProjectEnvironmentEnvironmentVariableOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironmentEnvironmentVariable](o, func(v ProjectEnvironmentEnvironmentVariable) string { return v.Name })
}

// Build output artifact's type. Valid values: `CODEPIPELINE`, `NO_ARTIFACTS`, `S3`.
func (o ProjectEnvironmentEnvironmentVariableOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[ProjectEnvironmentEnvironmentVariable](o, func(v ProjectEnvironmentEnvironmentVariable) *string { return v.Type })
}

// Environment variable's value.
func (o ProjectEnvironmentEnvironmentVariableOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironmentEnvironmentVariable](o, func(v ProjectEnvironmentEnvironmentVariable) string { return v.Value })
}

type ProjectEnvironmentRegistryCredential struct {
	// ARN or name of credentials created using AWS Secrets Manager.
	Credential string `pulumi:"credential"`
	// Service that created the credentials to access a private Docker registry. Valid value: `SECRETS_MANAGER` (AWS Secrets Manager).
	CredentialProvider string `pulumi:"credentialProvider"`
}

type ProjectEnvironmentRegistryCredentialArgs struct {
	// ARN or name of credentials created using AWS Secrets Manager.
	Credential pulumix.Input[string] `pulumi:"credential"`
	// Service that created the credentials to access a private Docker registry. Valid value: `SECRETS_MANAGER` (AWS Secrets Manager).
	CredentialProvider pulumix.Input[string] `pulumi:"credentialProvider"`
}

func (ProjectEnvironmentRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentRegistryCredential)(nil)).Elem()
}

func (i ProjectEnvironmentRegistryCredentialArgs) ToProjectEnvironmentRegistryCredentialOutput() ProjectEnvironmentRegistryCredentialOutput {
	return i.ToProjectEnvironmentRegistryCredentialOutputWithContext(context.Background())
}

func (i ProjectEnvironmentRegistryCredentialArgs) ToProjectEnvironmentRegistryCredentialOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentRegistryCredentialOutput)
}

func (i *ProjectEnvironmentRegistryCredentialArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectEnvironmentRegistryCredentialArgs] {
	return pulumix.Val(i)
}

type ProjectEnvironmentRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentRegistryCredential)(nil)).Elem()
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToProjectEnvironmentRegistryCredentialOutput() ProjectEnvironmentRegistryCredentialOutput {
	return o
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToProjectEnvironmentRegistryCredentialOutputWithContext(ctx context.Context) ProjectEnvironmentRegistryCredentialOutput {
	return o
}

func (o ProjectEnvironmentRegistryCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectEnvironmentRegistryCredential] {
	return pulumix.Output[ProjectEnvironmentRegistryCredential]{
		OutputState: o.OutputState,
	}
}

// ARN or name of credentials created using AWS Secrets Manager.
func (o ProjectEnvironmentRegistryCredentialOutput) Credential() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironmentRegistryCredential](o, func(v ProjectEnvironmentRegistryCredential) string { return v.Credential })
}

// Service that created the credentials to access a private Docker registry. Valid value: `SECRETS_MANAGER` (AWS Secrets Manager).
func (o ProjectEnvironmentRegistryCredentialOutput) CredentialProvider() pulumix.Output[string] {
	return pulumix.Apply[ProjectEnvironmentRegistryCredential](o, func(v ProjectEnvironmentRegistryCredential) string { return v.CredentialProvider })
}

type ProjectFileSystemLocation struct {
	// The name used to access a file system created by Amazon EFS. CodeBuild creates an environment variable by appending the identifier in all capital letters to CODEBUILD\_. For example, if you specify my-efs for identifier, a new environment variable is create named CODEBUILD_MY-EFS.
	Identifier *string `pulumi:"identifier"`
	// A string that specifies the location of the file system created by Amazon EFS. Its format is `efs-dns-name:/directory-path`.
	Location *string `pulumi:"location"`
	// The mount options for a file system created by AWS EFS.
	MountOptions *string `pulumi:"mountOptions"`
	// The location in the container where you mount the file system.
	MountPoint *string `pulumi:"mountPoint"`
	// The type of the file system. The one supported type is `EFS`.
	Type *string `pulumi:"type"`
}

type ProjectFileSystemLocationArgs struct {
	// The name used to access a file system created by Amazon EFS. CodeBuild creates an environment variable by appending the identifier in all capital letters to CODEBUILD\_. For example, if you specify my-efs for identifier, a new environment variable is create named CODEBUILD_MY-EFS.
	Identifier pulumix.Input[*string] `pulumi:"identifier"`
	// A string that specifies the location of the file system created by Amazon EFS. Its format is `efs-dns-name:/directory-path`.
	Location pulumix.Input[*string] `pulumi:"location"`
	// The mount options for a file system created by AWS EFS.
	MountOptions pulumix.Input[*string] `pulumi:"mountOptions"`
	// The location in the container where you mount the file system.
	MountPoint pulumix.Input[*string] `pulumi:"mountPoint"`
	// The type of the file system. The one supported type is `EFS`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (ProjectFileSystemLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileSystemLocation)(nil)).Elem()
}

func (i ProjectFileSystemLocationArgs) ToProjectFileSystemLocationOutput() ProjectFileSystemLocationOutput {
	return i.ToProjectFileSystemLocationOutputWithContext(context.Background())
}

func (i ProjectFileSystemLocationArgs) ToProjectFileSystemLocationOutputWithContext(ctx context.Context) ProjectFileSystemLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFileSystemLocationOutput)
}

func (i *ProjectFileSystemLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectFileSystemLocationArgs] {
	return pulumix.Val(i)
}

type ProjectFileSystemLocationOutput struct{ *pulumi.OutputState }

func (ProjectFileSystemLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileSystemLocation)(nil)).Elem()
}

func (o ProjectFileSystemLocationOutput) ToProjectFileSystemLocationOutput() ProjectFileSystemLocationOutput {
	return o
}

func (o ProjectFileSystemLocationOutput) ToProjectFileSystemLocationOutputWithContext(ctx context.Context) ProjectFileSystemLocationOutput {
	return o
}

func (o ProjectFileSystemLocationOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectFileSystemLocation] {
	return pulumix.Output[ProjectFileSystemLocation]{
		OutputState: o.OutputState,
	}
}

// The name used to access a file system created by Amazon EFS. CodeBuild creates an environment variable by appending the identifier in all capital letters to CODEBUILD\_. For example, if you specify my-efs for identifier, a new environment variable is create named CODEBUILD_MY-EFS.
func (o ProjectFileSystemLocationOutput) Identifier() pulumix.Output[*string] {
	return pulumix.Apply[ProjectFileSystemLocation](o, func(v ProjectFileSystemLocation) *string { return v.Identifier })
}

// A string that specifies the location of the file system created by Amazon EFS. Its format is `efs-dns-name:/directory-path`.
func (o ProjectFileSystemLocationOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectFileSystemLocation](o, func(v ProjectFileSystemLocation) *string { return v.Location })
}

// The mount options for a file system created by AWS EFS.
func (o ProjectFileSystemLocationOutput) MountOptions() pulumix.Output[*string] {
	return pulumix.Apply[ProjectFileSystemLocation](o, func(v ProjectFileSystemLocation) *string { return v.MountOptions })
}

// The location in the container where you mount the file system.
func (o ProjectFileSystemLocationOutput) MountPoint() pulumix.Output[*string] {
	return pulumix.Apply[ProjectFileSystemLocation](o, func(v ProjectFileSystemLocation) *string { return v.MountPoint })
}

// The type of the file system. The one supported type is `EFS`.
func (o ProjectFileSystemLocationOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[ProjectFileSystemLocation](o, func(v ProjectFileSystemLocation) *string { return v.Type })
}

type ProjectLogsConfig struct {
	// Configuration block. Detailed below.
	CloudwatchLogs *ProjectLogsConfigCloudwatchLogs `pulumi:"cloudwatchLogs"`
	// Configuration block. Detailed below.
	S3Logs *ProjectLogsConfigS3Logs `pulumi:"s3Logs"`
}

type ProjectLogsConfigArgs struct {
	// Configuration block. Detailed below.
	CloudwatchLogs pulumix.Input[*ProjectLogsConfigCloudwatchLogsArgs] `pulumi:"cloudwatchLogs"`
	// Configuration block. Detailed below.
	S3Logs pulumix.Input[*ProjectLogsConfigS3LogsArgs] `pulumi:"s3Logs"`
}

func (ProjectLogsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfig)(nil)).Elem()
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigOutput() ProjectLogsConfigOutput {
	return i.ToProjectLogsConfigOutputWithContext(context.Background())
}

func (i ProjectLogsConfigArgs) ToProjectLogsConfigOutputWithContext(ctx context.Context) ProjectLogsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigOutput)
}

func (i *ProjectLogsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectLogsConfigArgs] {
	return pulumix.Val(i)
}

type ProjectLogsConfigOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfig)(nil)).Elem()
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigOutput() ProjectLogsConfigOutput {
	return o
}

func (o ProjectLogsConfigOutput) ToProjectLogsConfigOutputWithContext(ctx context.Context) ProjectLogsConfigOutput {
	return o
}

func (o ProjectLogsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectLogsConfig] {
	return pulumix.Output[ProjectLogsConfig]{
		OutputState: o.OutputState,
	}
}

// Configuration block. Detailed below.
func (o ProjectLogsConfigOutput) CloudwatchLogs() pulumix.GPtrOutput[ProjectLogsConfigCloudwatchLogs, ProjectLogsConfigCloudwatchLogsOutput] {
	value := pulumix.Apply[ProjectLogsConfig](o, func(v ProjectLogsConfig) *ProjectLogsConfigCloudwatchLogs { return v.CloudwatchLogs })
	return pulumix.GPtrOutput[ProjectLogsConfigCloudwatchLogs, ProjectLogsConfigCloudwatchLogsOutput]{OutputState: value.OutputState}
}

// Configuration block. Detailed below.
func (o ProjectLogsConfigOutput) S3Logs() pulumix.GPtrOutput[ProjectLogsConfigS3Logs, ProjectLogsConfigS3LogsOutput] {
	value := pulumix.Apply[ProjectLogsConfig](o, func(v ProjectLogsConfig) *ProjectLogsConfigS3Logs { return v.S3Logs })
	return pulumix.GPtrOutput[ProjectLogsConfigS3Logs, ProjectLogsConfigS3LogsOutput]{OutputState: value.OutputState}
}

type ProjectLogsConfigCloudwatchLogs struct {
	// Group name of the logs in CloudWatch Logs.
	GroupName *string `pulumi:"groupName"`
	// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
	Status *string `pulumi:"status"`
	// Stream name of the logs in CloudWatch Logs.
	StreamName *string `pulumi:"streamName"`
}

type ProjectLogsConfigCloudwatchLogsArgs struct {
	// Group name of the logs in CloudWatch Logs.
	GroupName pulumix.Input[*string] `pulumi:"groupName"`
	// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Stream name of the logs in CloudWatch Logs.
	StreamName pulumix.Input[*string] `pulumi:"streamName"`
}

func (ProjectLogsConfigCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigCloudwatchLogs)(nil)).Elem()
}

func (i ProjectLogsConfigCloudwatchLogsArgs) ToProjectLogsConfigCloudwatchLogsOutput() ProjectLogsConfigCloudwatchLogsOutput {
	return i.ToProjectLogsConfigCloudwatchLogsOutputWithContext(context.Background())
}

func (i ProjectLogsConfigCloudwatchLogsArgs) ToProjectLogsConfigCloudwatchLogsOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigCloudwatchLogsOutput)
}

func (i *ProjectLogsConfigCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectLogsConfigCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type ProjectLogsConfigCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigCloudwatchLogs)(nil)).Elem()
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToProjectLogsConfigCloudwatchLogsOutput() ProjectLogsConfigCloudwatchLogsOutput {
	return o
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToProjectLogsConfigCloudwatchLogsOutputWithContext(ctx context.Context) ProjectLogsConfigCloudwatchLogsOutput {
	return o
}

func (o ProjectLogsConfigCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectLogsConfigCloudwatchLogs] {
	return pulumix.Output[ProjectLogsConfigCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// Group name of the logs in CloudWatch Logs.
func (o ProjectLogsConfigCloudwatchLogsOutput) GroupName() pulumix.Output[*string] {
	return pulumix.Apply[ProjectLogsConfigCloudwatchLogs](o, func(v ProjectLogsConfigCloudwatchLogs) *string { return v.GroupName })
}

// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
func (o ProjectLogsConfigCloudwatchLogsOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[ProjectLogsConfigCloudwatchLogs](o, func(v ProjectLogsConfigCloudwatchLogs) *string { return v.Status })
}

// Stream name of the logs in CloudWatch Logs.
func (o ProjectLogsConfigCloudwatchLogsOutput) StreamName() pulumix.Output[*string] {
	return pulumix.Apply[ProjectLogsConfigCloudwatchLogs](o, func(v ProjectLogsConfigCloudwatchLogs) *string { return v.StreamName })
}

type ProjectLogsConfigS3Logs struct {
	// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
	BucketOwnerAccess *string `pulumi:"bucketOwnerAccess"`
	// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location *string `pulumi:"location"`
	// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
	Status *string `pulumi:"status"`
}

type ProjectLogsConfigS3LogsArgs struct {
	// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
	BucketOwnerAccess pulumix.Input[*string] `pulumi:"bucketOwnerAccess"`
	// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
	EncryptionDisabled pulumix.Input[*bool] `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (ProjectLogsConfigS3LogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigS3Logs)(nil)).Elem()
}

func (i ProjectLogsConfigS3LogsArgs) ToProjectLogsConfigS3LogsOutput() ProjectLogsConfigS3LogsOutput {
	return i.ToProjectLogsConfigS3LogsOutputWithContext(context.Background())
}

func (i ProjectLogsConfigS3LogsArgs) ToProjectLogsConfigS3LogsOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLogsConfigS3LogsOutput)
}

func (i *ProjectLogsConfigS3LogsArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectLogsConfigS3LogsArgs] {
	return pulumix.Val(i)
}

type ProjectLogsConfigS3LogsOutput struct{ *pulumi.OutputState }

func (ProjectLogsConfigS3LogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLogsConfigS3Logs)(nil)).Elem()
}

func (o ProjectLogsConfigS3LogsOutput) ToProjectLogsConfigS3LogsOutput() ProjectLogsConfigS3LogsOutput {
	return o
}

func (o ProjectLogsConfigS3LogsOutput) ToProjectLogsConfigS3LogsOutputWithContext(ctx context.Context) ProjectLogsConfigS3LogsOutput {
	return o
}

func (o ProjectLogsConfigS3LogsOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectLogsConfigS3Logs] {
	return pulumix.Output[ProjectLogsConfigS3Logs]{
		OutputState: o.OutputState,
	}
}

// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. your CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
func (o ProjectLogsConfigS3LogsOutput) BucketOwnerAccess() pulumix.Output[*string] {
	return pulumix.Apply[ProjectLogsConfigS3Logs](o, func(v ProjectLogsConfigS3Logs) *string { return v.BucketOwnerAccess })
}

// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
func (o ProjectLogsConfigS3LogsOutput) EncryptionDisabled() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectLogsConfigS3Logs](o, func(v ProjectLogsConfigS3Logs) *bool { return v.EncryptionDisabled })
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored. If `type` is set to `S3`, this is the name of the output bucket.
func (o ProjectLogsConfigS3LogsOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectLogsConfigS3Logs](o, func(v ProjectLogsConfigS3Logs) *string { return v.Location })
}

// Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
func (o ProjectLogsConfigS3LogsOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[ProjectLogsConfigS3Logs](o, func(v ProjectLogsConfigS3Logs) *string { return v.Status })
}

type ProjectSecondaryArtifact struct {
	// Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
	ArtifactIdentifier string `pulumi:"artifactIdentifier"`
	// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. The CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
	BucketOwnerAccess *string `pulumi:"bucketOwnerAccess"`
	// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not specified, `location` can specify the path of the output artifact in the output bucket.
	Location *string `pulumi:"location"`
	// Name of the project. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the name of the output artifact object.
	Name *string `pulumi:"name"`
	// Namespace to use in storing build artifacts. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, valid values are `BUILD_ID` or `NONE`.
	NamespaceType *string `pulumi:"namespaceType"`
	// Whether a name specified in the build specification overrides the artifact name.
	OverrideArtifactName *bool `pulumi:"overrideArtifactName"`
	// Type of build output artifact to create. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, valid values are `NONE` or `ZIP`.
	Packaging *string `pulumi:"packaging"`
	// Along with `namespaceType` and `name`, the pattern that AWS CodeBuild uses to name and store the output artifact. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the path to the output artifact.
	Path *string `pulumi:"path"`
	// Build output artifact's type. Valid values `CODEPIPELINE`, `NO_ARTIFACTS`, and `S3`.
	Type string `pulumi:"type"`
}

type ProjectSecondaryArtifactArgs struct {
	// Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
	ArtifactIdentifier pulumix.Input[string] `pulumi:"artifactIdentifier"`
	// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. The CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
	BucketOwnerAccess pulumix.Input[*string] `pulumi:"bucketOwnerAccess"`
	// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
	EncryptionDisabled pulumix.Input[*bool] `pulumi:"encryptionDisabled"`
	// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not specified, `location` can specify the path of the output artifact in the output bucket.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Name of the project. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the name of the output artifact object.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Namespace to use in storing build artifacts. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, valid values are `BUILD_ID` or `NONE`.
	NamespaceType pulumix.Input[*string] `pulumi:"namespaceType"`
	// Whether a name specified in the build specification overrides the artifact name.
	OverrideArtifactName pulumix.Input[*bool] `pulumi:"overrideArtifactName"`
	// Type of build output artifact to create. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, valid values are `NONE` or `ZIP`.
	Packaging pulumix.Input[*string] `pulumi:"packaging"`
	// Along with `namespaceType` and `name`, the pattern that AWS CodeBuild uses to name and store the output artifact. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the path to the output artifact.
	Path pulumix.Input[*string] `pulumi:"path"`
	// Build output artifact's type. Valid values `CODEPIPELINE`, `NO_ARTIFACTS`, and `S3`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ProjectSecondaryArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondaryArtifact)(nil)).Elem()
}

func (i ProjectSecondaryArtifactArgs) ToProjectSecondaryArtifactOutput() ProjectSecondaryArtifactOutput {
	return i.ToProjectSecondaryArtifactOutputWithContext(context.Background())
}

func (i ProjectSecondaryArtifactArgs) ToProjectSecondaryArtifactOutputWithContext(ctx context.Context) ProjectSecondaryArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondaryArtifactOutput)
}

func (i *ProjectSecondaryArtifactArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSecondaryArtifactArgs] {
	return pulumix.Val(i)
}

type ProjectSecondaryArtifactOutput struct{ *pulumi.OutputState }

func (ProjectSecondaryArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondaryArtifact)(nil)).Elem()
}

func (o ProjectSecondaryArtifactOutput) ToProjectSecondaryArtifactOutput() ProjectSecondaryArtifactOutput {
	return o
}

func (o ProjectSecondaryArtifactOutput) ToProjectSecondaryArtifactOutputWithContext(ctx context.Context) ProjectSecondaryArtifactOutput {
	return o
}

func (o ProjectSecondaryArtifactOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSecondaryArtifact] {
	return pulumix.Output[ProjectSecondaryArtifact]{
		OutputState: o.OutputState,
	}
}

// Artifact identifier. Must be the same specified inside the AWS CodeBuild build specification.
func (o ProjectSecondaryArtifactOutput) ArtifactIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) string { return v.ArtifactIdentifier })
}

// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. Valid values are `NONE`, `READ_ONLY`, and `FULL`. The CodeBuild service role must have the `s3:PutBucketAcl` permission. This permission allows CodeBuild to modify the access control list for the bucket.
func (o ProjectSecondaryArtifactOutput) BucketOwnerAccess() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *string { return v.BucketOwnerAccess })
}

// Whether to disable encrypting output artifacts. If `type` is set to `NO_ARTIFACTS`, this value is ignored. Defaults to `false`.
func (o ProjectSecondaryArtifactOutput) EncryptionDisabled() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *bool { return v.EncryptionDisabled })
}

// Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not specified, `location` can specify the path of the output artifact in the output bucket.
func (o ProjectSecondaryArtifactOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *string { return v.Location })
}

// Name of the project. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the name of the output artifact object.
func (o ProjectSecondaryArtifactOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *string { return v.Name })
}

// Namespace to use in storing build artifacts. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, valid values are `BUILD_ID` or `NONE`.
func (o ProjectSecondaryArtifactOutput) NamespaceType() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *string { return v.NamespaceType })
}

// Whether a name specified in the build specification overrides the artifact name.
func (o ProjectSecondaryArtifactOutput) OverrideArtifactName() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *bool { return v.OverrideArtifactName })
}

// Type of build output artifact to create. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, valid values are `NONE` or `ZIP`.
func (o ProjectSecondaryArtifactOutput) Packaging() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *string { return v.Packaging })
}

// Along with `namespaceType` and `name`, the pattern that AWS CodeBuild uses to name and store the output artifact. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS`, this value is ignored if specified. If `type` is set to `S3`, this is the path to the output artifact.
func (o ProjectSecondaryArtifactOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) *string { return v.Path })
}

// Build output artifact's type. Valid values `CODEPIPELINE`, `NO_ARTIFACTS`, and `S3`.
func (o ProjectSecondaryArtifactOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ProjectSecondaryArtifact](o, func(v ProjectSecondaryArtifact) string { return v.Type })
}

type ProjectSecondarySource struct {
	// Configuration block that contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`. `buildStatusConfig` blocks are documented below.
	BuildStatusConfig *ProjectSecondarySourceBuildStatusConfig `pulumi:"buildStatusConfig"`
	// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`. It can either be a path to a file residing in the repository to be built or a local file path leveraging the `file()` built-in.
	Buildspec *string `pulumi:"buildspec"`
	// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
	GitCloneDepth *int `pulumi:"gitCloneDepth"`
	// Configuration block. Detailed below.
	GitSubmodulesConfig *ProjectSecondarySourceGitSubmodulesConfig `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// Location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Whether to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
	SourceIdentifier string `pulumi:"sourceIdentifier"`
	// Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type string `pulumi:"type"`
}

type ProjectSecondarySourceArgs struct {
	// Configuration block that contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`. `buildStatusConfig` blocks are documented below.
	BuildStatusConfig pulumix.Input[*ProjectSecondarySourceBuildStatusConfigArgs] `pulumi:"buildStatusConfig"`
	// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`. It can either be a path to a file residing in the repository to be built or a local file path leveraging the `file()` built-in.
	Buildspec pulumix.Input[*string] `pulumi:"buildspec"`
	// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
	GitCloneDepth pulumix.Input[*int] `pulumi:"gitCloneDepth"`
	// Configuration block. Detailed below.
	GitSubmodulesConfig pulumix.Input[*ProjectSecondarySourceGitSubmodulesConfigArgs] `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl pulumix.Input[*bool] `pulumi:"insecureSsl"`
	// Location of the source code from git or s3.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Whether to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
	ReportBuildStatus pulumix.Input[*bool] `pulumi:"reportBuildStatus"`
	// An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
	SourceIdentifier pulumix.Input[string] `pulumi:"sourceIdentifier"`
	// Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ProjectSecondarySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySource)(nil)).Elem()
}

func (i ProjectSecondarySourceArgs) ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput {
	return i.ToProjectSecondarySourceOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceArgs) ToProjectSecondarySourceOutputWithContext(ctx context.Context) ProjectSecondarySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceOutput)
}

func (i *ProjectSecondarySourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSecondarySourceArgs] {
	return pulumix.Val(i)
}

type ProjectSecondarySourceOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySource)(nil)).Elem()
}

func (o ProjectSecondarySourceOutput) ToProjectSecondarySourceOutput() ProjectSecondarySourceOutput {
	return o
}

func (o ProjectSecondarySourceOutput) ToProjectSecondarySourceOutputWithContext(ctx context.Context) ProjectSecondarySourceOutput {
	return o
}

func (o ProjectSecondarySourceOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSecondarySource] {
	return pulumix.Output[ProjectSecondarySource]{
		OutputState: o.OutputState,
	}
}

// Configuration block that contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`. `buildStatusConfig` blocks are documented below.
func (o ProjectSecondarySourceOutput) BuildStatusConfig() pulumix.GPtrOutput[ProjectSecondarySourceBuildStatusConfig, ProjectSecondarySourceBuildStatusConfigOutput] {
	value := pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *ProjectSecondarySourceBuildStatusConfig { return v.BuildStatusConfig })
	return pulumix.GPtrOutput[ProjectSecondarySourceBuildStatusConfig, ProjectSecondarySourceBuildStatusConfigOutput]{OutputState: value.OutputState}
}

// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`. It can either be a path to a file residing in the repository to be built or a local file path leveraging the `file()` built-in.
func (o ProjectSecondarySourceOutput) Buildspec() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *string { return v.Buildspec })
}

// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
func (o ProjectSecondarySourceOutput) GitCloneDepth() pulumix.Output[*int] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *int { return v.GitCloneDepth })
}

// Configuration block. Detailed below.
func (o ProjectSecondarySourceOutput) GitSubmodulesConfig() pulumix.GPtrOutput[ProjectSecondarySourceGitSubmodulesConfig, ProjectSecondarySourceGitSubmodulesConfigOutput] {
	value := pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *ProjectSecondarySourceGitSubmodulesConfig {
		return v.GitSubmodulesConfig
	})
	return pulumix.GPtrOutput[ProjectSecondarySourceGitSubmodulesConfig, ProjectSecondarySourceGitSubmodulesConfigOutput]{OutputState: value.OutputState}
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSecondarySourceOutput) InsecureSsl() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *bool { return v.InsecureSsl })
}

// Location of the source code from git or s3.
func (o ProjectSecondarySourceOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *string { return v.Location })
}

// Whether to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
func (o ProjectSecondarySourceOutput) ReportBuildStatus() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) *bool { return v.ReportBuildStatus })
}

// An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
func (o ProjectSecondarySourceOutput) SourceIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) string { return v.SourceIdentifier })
}

// Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
func (o ProjectSecondarySourceOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ProjectSecondarySource](o, func(v ProjectSecondarySource) string { return v.Type })
}

type ProjectSecondarySourceBuildStatusConfig struct {
	// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	Context *string `pulumi:"context"`
	// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	TargetUrl *string `pulumi:"targetUrl"`
}

type ProjectSecondarySourceBuildStatusConfigArgs struct {
	// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	Context pulumix.Input[*string] `pulumi:"context"`
	// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	TargetUrl pulumix.Input[*string] `pulumi:"targetUrl"`
}

func (ProjectSecondarySourceBuildStatusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceBuildStatusConfig)(nil)).Elem()
}

func (i ProjectSecondarySourceBuildStatusConfigArgs) ToProjectSecondarySourceBuildStatusConfigOutput() ProjectSecondarySourceBuildStatusConfigOutput {
	return i.ToProjectSecondarySourceBuildStatusConfigOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceBuildStatusConfigArgs) ToProjectSecondarySourceBuildStatusConfigOutputWithContext(ctx context.Context) ProjectSecondarySourceBuildStatusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceBuildStatusConfigOutput)
}

func (i *ProjectSecondarySourceBuildStatusConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSecondarySourceBuildStatusConfigArgs] {
	return pulumix.Val(i)
}

type ProjectSecondarySourceBuildStatusConfigOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceBuildStatusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceBuildStatusConfig)(nil)).Elem()
}

func (o ProjectSecondarySourceBuildStatusConfigOutput) ToProjectSecondarySourceBuildStatusConfigOutput() ProjectSecondarySourceBuildStatusConfigOutput {
	return o
}

func (o ProjectSecondarySourceBuildStatusConfigOutput) ToProjectSecondarySourceBuildStatusConfigOutputWithContext(ctx context.Context) ProjectSecondarySourceBuildStatusConfigOutput {
	return o
}

func (o ProjectSecondarySourceBuildStatusConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSecondarySourceBuildStatusConfig] {
	return pulumix.Output[ProjectSecondarySourceBuildStatusConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
func (o ProjectSecondarySourceBuildStatusConfigOutput) Context() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondarySourceBuildStatusConfig](o, func(v ProjectSecondarySourceBuildStatusConfig) *string { return v.Context })
}

// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
func (o ProjectSecondarySourceBuildStatusConfigOutput) TargetUrl() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSecondarySourceBuildStatusConfig](o, func(v ProjectSecondarySourceBuildStatusConfig) *string { return v.TargetUrl })
}

type ProjectSecondarySourceGitSubmodulesConfig struct {
	// Whether to fetch Git submodules for the AWS CodeBuild build project.
	FetchSubmodules bool `pulumi:"fetchSubmodules"`
}

type ProjectSecondarySourceGitSubmodulesConfigArgs struct {
	// Whether to fetch Git submodules for the AWS CodeBuild build project.
	FetchSubmodules pulumix.Input[bool] `pulumi:"fetchSubmodules"`
}

func (ProjectSecondarySourceGitSubmodulesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceGitSubmodulesConfig)(nil)).Elem()
}

func (i ProjectSecondarySourceGitSubmodulesConfigArgs) ToProjectSecondarySourceGitSubmodulesConfigOutput() ProjectSecondarySourceGitSubmodulesConfigOutput {
	return i.ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceGitSubmodulesConfigArgs) ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceGitSubmodulesConfigOutput)
}

func (i *ProjectSecondarySourceGitSubmodulesConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSecondarySourceGitSubmodulesConfigArgs] {
	return pulumix.Val(i)
}

type ProjectSecondarySourceGitSubmodulesConfigOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceGitSubmodulesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToProjectSecondarySourceGitSubmodulesConfigOutput() ProjectSecondarySourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToProjectSecondarySourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSecondarySourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSecondarySourceGitSubmodulesConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSecondarySourceGitSubmodulesConfig] {
	return pulumix.Output[ProjectSecondarySourceGitSubmodulesConfig]{
		OutputState: o.OutputState,
	}
}

// Whether to fetch Git submodules for the AWS CodeBuild build project.
func (o ProjectSecondarySourceGitSubmodulesConfigOutput) FetchSubmodules() pulumix.Output[bool] {
	return pulumix.Apply[ProjectSecondarySourceGitSubmodulesConfig](o, func(v ProjectSecondarySourceGitSubmodulesConfig) bool { return v.FetchSubmodules })
}

type ProjectSecondarySourceVersion struct {
	// An identifier for a source in the build project.
	SourceIdentifier string `pulumi:"sourceIdentifier"`
	// The source version for the corresponding source identifier. See [AWS docs](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSourceVersion.html#CodeBuild-Type-ProjectSourceVersion-sourceVersion) for more details.
	SourceVersion string `pulumi:"sourceVersion"`
}

type ProjectSecondarySourceVersionArgs struct {
	// An identifier for a source in the build project.
	SourceIdentifier pulumix.Input[string] `pulumi:"sourceIdentifier"`
	// The source version for the corresponding source identifier. See [AWS docs](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSourceVersion.html#CodeBuild-Type-ProjectSourceVersion-sourceVersion) for more details.
	SourceVersion pulumix.Input[string] `pulumi:"sourceVersion"`
}

func (ProjectSecondarySourceVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceVersion)(nil)).Elem()
}

func (i ProjectSecondarySourceVersionArgs) ToProjectSecondarySourceVersionOutput() ProjectSecondarySourceVersionOutput {
	return i.ToProjectSecondarySourceVersionOutputWithContext(context.Background())
}

func (i ProjectSecondarySourceVersionArgs) ToProjectSecondarySourceVersionOutputWithContext(ctx context.Context) ProjectSecondarySourceVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSecondarySourceVersionOutput)
}

func (i *ProjectSecondarySourceVersionArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSecondarySourceVersionArgs] {
	return pulumix.Val(i)
}

type ProjectSecondarySourceVersionOutput struct{ *pulumi.OutputState }

func (ProjectSecondarySourceVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSecondarySourceVersion)(nil)).Elem()
}

func (o ProjectSecondarySourceVersionOutput) ToProjectSecondarySourceVersionOutput() ProjectSecondarySourceVersionOutput {
	return o
}

func (o ProjectSecondarySourceVersionOutput) ToProjectSecondarySourceVersionOutputWithContext(ctx context.Context) ProjectSecondarySourceVersionOutput {
	return o
}

func (o ProjectSecondarySourceVersionOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSecondarySourceVersion] {
	return pulumix.Output[ProjectSecondarySourceVersion]{
		OutputState: o.OutputState,
	}
}

// An identifier for a source in the build project.
func (o ProjectSecondarySourceVersionOutput) SourceIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ProjectSecondarySourceVersion](o, func(v ProjectSecondarySourceVersion) string { return v.SourceIdentifier })
}

// The source version for the corresponding source identifier. See [AWS docs](https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSourceVersion.html#CodeBuild-Type-ProjectSourceVersion-sourceVersion) for more details.
func (o ProjectSecondarySourceVersionOutput) SourceVersion() pulumix.Output[string] {
	return pulumix.Apply[ProjectSecondarySourceVersion](o, func(v ProjectSecondarySourceVersion) string { return v.SourceVersion })
}

type ProjectSource struct {
	// Configuration block that contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`. `buildStatusConfig` blocks are documented below.
	BuildStatusConfig *ProjectSourceBuildStatusConfig `pulumi:"buildStatusConfig"`
	// Build specification to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
	Buildspec *string `pulumi:"buildspec"`
	// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
	GitCloneDepth *int `pulumi:"gitCloneDepth"`
	// Configuration block. Detailed below.
	GitSubmodulesConfig *ProjectSourceGitSubmodulesConfig `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// Location of the source code from git or s3.
	Location *string `pulumi:"location"`
	// Whether to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3`, `NO_SOURCE`.
	Type string `pulumi:"type"`
}

type ProjectSourceArgs struct {
	// Configuration block that contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`. `buildStatusConfig` blocks are documented below.
	BuildStatusConfig pulumix.Input[*ProjectSourceBuildStatusConfigArgs] `pulumi:"buildStatusConfig"`
	// Build specification to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
	Buildspec pulumix.Input[*string] `pulumi:"buildspec"`
	// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
	GitCloneDepth pulumix.Input[*int] `pulumi:"gitCloneDepth"`
	// Configuration block. Detailed below.
	GitSubmodulesConfig pulumix.Input[*ProjectSourceGitSubmodulesConfigArgs] `pulumi:"gitSubmodulesConfig"`
	// Ignore SSL warnings when connecting to source control.
	InsecureSsl pulumix.Input[*bool] `pulumi:"insecureSsl"`
	// Location of the source code from git or s3.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Whether to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
	ReportBuildStatus pulumix.Input[*bool] `pulumi:"reportBuildStatus"`
	// Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3`, `NO_SOURCE`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ProjectSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (i ProjectSourceArgs) ToProjectSourceOutput() ProjectSourceOutput {
	return i.ToProjectSourceOutputWithContext(context.Background())
}

func (i ProjectSourceArgs) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceOutput)
}

func (i *ProjectSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSourceArgs] {
	return pulumix.Val(i)
}

type ProjectSourceOutput struct{ *pulumi.OutputState }

func (ProjectSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSource)(nil)).Elem()
}

func (o ProjectSourceOutput) ToProjectSourceOutput() ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToProjectSourceOutputWithContext(ctx context.Context) ProjectSourceOutput {
	return o
}

func (o ProjectSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSource] {
	return pulumix.Output[ProjectSource]{
		OutputState: o.OutputState,
	}
}

// Configuration block that contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is `GITHUB`, `GITHUB_ENTERPRISE`, or `BITBUCKET`. `buildStatusConfig` blocks are documented below.
func (o ProjectSourceOutput) BuildStatusConfig() pulumix.GPtrOutput[ProjectSourceBuildStatusConfig, ProjectSourceBuildStatusConfigOutput] {
	value := pulumix.Apply[ProjectSource](o, func(v ProjectSource) *ProjectSourceBuildStatusConfig { return v.BuildStatusConfig })
	return pulumix.GPtrOutput[ProjectSourceBuildStatusConfig, ProjectSourceBuildStatusConfigOutput]{OutputState: value.OutputState}
}

// Build specification to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
func (o ProjectSourceOutput) Buildspec() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSource](o, func(v ProjectSource) *string { return v.Buildspec })
}

// Truncate git history to this many commits. Use `0` for a `Full` checkout which you need to run commands like `git branch --show-current`. See [AWS CodePipeline User Guide: Tutorial: Use full clone with a GitHub pipeline source](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-github-gitclone.html) for details.
func (o ProjectSourceOutput) GitCloneDepth() pulumix.Output[*int] {
	return pulumix.Apply[ProjectSource](o, func(v ProjectSource) *int { return v.GitCloneDepth })
}

// Configuration block. Detailed below.
func (o ProjectSourceOutput) GitSubmodulesConfig() pulumix.GPtrOutput[ProjectSourceGitSubmodulesConfig, ProjectSourceGitSubmodulesConfigOutput] {
	value := pulumix.Apply[ProjectSource](o, func(v ProjectSource) *ProjectSourceGitSubmodulesConfig { return v.GitSubmodulesConfig })
	return pulumix.GPtrOutput[ProjectSourceGitSubmodulesConfig, ProjectSourceGitSubmodulesConfigOutput]{OutputState: value.OutputState}
}

// Ignore SSL warnings when connecting to source control.
func (o ProjectSourceOutput) InsecureSsl() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectSource](o, func(v ProjectSource) *bool { return v.InsecureSsl })
}

// Location of the source code from git or s3.
func (o ProjectSourceOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSource](o, func(v ProjectSource) *string { return v.Location })
}

// Whether to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
func (o ProjectSourceOutput) ReportBuildStatus() pulumix.Output[*bool] {
	return pulumix.Apply[ProjectSource](o, func(v ProjectSource) *bool { return v.ReportBuildStatus })
}

// Type of repository that contains the source code to be built. Valid values: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3`, `NO_SOURCE`.
func (o ProjectSourceOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ProjectSource](o, func(v ProjectSource) string { return v.Type })
}

type ProjectSourceBuildStatusConfig struct {
	// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	Context *string `pulumi:"context"`
	// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	TargetUrl *string `pulumi:"targetUrl"`
}

type ProjectSourceBuildStatusConfigArgs struct {
	// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	Context pulumix.Input[*string] `pulumi:"context"`
	// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
	TargetUrl pulumix.Input[*string] `pulumi:"targetUrl"`
}

func (ProjectSourceBuildStatusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceBuildStatusConfig)(nil)).Elem()
}

func (i ProjectSourceBuildStatusConfigArgs) ToProjectSourceBuildStatusConfigOutput() ProjectSourceBuildStatusConfigOutput {
	return i.ToProjectSourceBuildStatusConfigOutputWithContext(context.Background())
}

func (i ProjectSourceBuildStatusConfigArgs) ToProjectSourceBuildStatusConfigOutputWithContext(ctx context.Context) ProjectSourceBuildStatusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceBuildStatusConfigOutput)
}

func (i *ProjectSourceBuildStatusConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSourceBuildStatusConfigArgs] {
	return pulumix.Val(i)
}

type ProjectSourceBuildStatusConfigOutput struct{ *pulumi.OutputState }

func (ProjectSourceBuildStatusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceBuildStatusConfig)(nil)).Elem()
}

func (o ProjectSourceBuildStatusConfigOutput) ToProjectSourceBuildStatusConfigOutput() ProjectSourceBuildStatusConfigOutput {
	return o
}

func (o ProjectSourceBuildStatusConfigOutput) ToProjectSourceBuildStatusConfigOutputWithContext(ctx context.Context) ProjectSourceBuildStatusConfigOutput {
	return o
}

func (o ProjectSourceBuildStatusConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSourceBuildStatusConfig] {
	return pulumix.Output[ProjectSourceBuildStatusConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
func (o ProjectSourceBuildStatusConfigOutput) Context() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSourceBuildStatusConfig](o, func(v ProjectSourceBuildStatusConfig) *string { return v.Context })
}

// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.
func (o ProjectSourceBuildStatusConfigOutput) TargetUrl() pulumix.Output[*string] {
	return pulumix.Apply[ProjectSourceBuildStatusConfig](o, func(v ProjectSourceBuildStatusConfig) *string { return v.TargetUrl })
}

type ProjectSourceGitSubmodulesConfig struct {
	// Whether to fetch Git submodules for the AWS CodeBuild build project.
	FetchSubmodules bool `pulumi:"fetchSubmodules"`
}

type ProjectSourceGitSubmodulesConfigArgs struct {
	// Whether to fetch Git submodules for the AWS CodeBuild build project.
	FetchSubmodules pulumix.Input[bool] `pulumi:"fetchSubmodules"`
}

func (ProjectSourceGitSubmodulesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceGitSubmodulesConfig)(nil)).Elem()
}

func (i ProjectSourceGitSubmodulesConfigArgs) ToProjectSourceGitSubmodulesConfigOutput() ProjectSourceGitSubmodulesConfigOutput {
	return i.ToProjectSourceGitSubmodulesConfigOutputWithContext(context.Background())
}

func (i ProjectSourceGitSubmodulesConfigArgs) ToProjectSourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSourceGitSubmodulesConfigOutput)
}

func (i *ProjectSourceGitSubmodulesConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectSourceGitSubmodulesConfigArgs] {
	return pulumix.Val(i)
}

type ProjectSourceGitSubmodulesConfigOutput struct{ *pulumi.OutputState }

func (ProjectSourceGitSubmodulesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSourceGitSubmodulesConfig)(nil)).Elem()
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToProjectSourceGitSubmodulesConfigOutput() ProjectSourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToProjectSourceGitSubmodulesConfigOutputWithContext(ctx context.Context) ProjectSourceGitSubmodulesConfigOutput {
	return o
}

func (o ProjectSourceGitSubmodulesConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectSourceGitSubmodulesConfig] {
	return pulumix.Output[ProjectSourceGitSubmodulesConfig]{
		OutputState: o.OutputState,
	}
}

// Whether to fetch Git submodules for the AWS CodeBuild build project.
func (o ProjectSourceGitSubmodulesConfigOutput) FetchSubmodules() pulumix.Output[bool] {
	return pulumix.Apply[ProjectSourceGitSubmodulesConfig](o, func(v ProjectSourceGitSubmodulesConfig) bool { return v.FetchSubmodules })
}

type ProjectVpcConfig struct {
	// Security group IDs to assign to running builds.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Subnet IDs within which to run builds.
	Subnets []string `pulumi:"subnets"`
	// ID of the VPC within which to run builds.
	VpcId string `pulumi:"vpcId"`
}

type ProjectVpcConfigArgs struct {
	// Security group IDs to assign to running builds.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// Subnet IDs within which to run builds.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
	// ID of the VPC within which to run builds.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (ProjectVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return i.ToProjectVpcConfigOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput)
}

func (i *ProjectVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProjectVpcConfigArgs] {
	return pulumix.Val(i)
}

type ProjectVpcConfigOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProjectVpcConfig] {
	return pulumix.Output[ProjectVpcConfig]{
		OutputState: o.OutputState,
	}
}

// Security group IDs to assign to running builds.
func (o ProjectVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ProjectVpcConfig](o, func(v ProjectVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Subnet IDs within which to run builds.
func (o ProjectVpcConfigOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ProjectVpcConfig](o, func(v ProjectVpcConfig) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ID of the VPC within which to run builds.
func (o ProjectVpcConfigOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[ProjectVpcConfig](o, func(v ProjectVpcConfig) string { return v.VpcId })
}

type ReportGroupExportConfig struct {
	// contains information about the S3 bucket where the run of a report is exported. see S3 Destination documented below.
	S3Destination *ReportGroupExportConfigS3Destination `pulumi:"s3Destination"`
	// The export configuration type. Valid values are `S3` and `NO_EXPORT`.
	Type string `pulumi:"type"`
}

type ReportGroupExportConfigArgs struct {
	// contains information about the S3 bucket where the run of a report is exported. see S3 Destination documented below.
	S3Destination pulumix.Input[*ReportGroupExportConfigS3DestinationArgs] `pulumi:"s3Destination"`
	// The export configuration type. Valid values are `S3` and `NO_EXPORT`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ReportGroupExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupExportConfig)(nil)).Elem()
}

func (i ReportGroupExportConfigArgs) ToReportGroupExportConfigOutput() ReportGroupExportConfigOutput {
	return i.ToReportGroupExportConfigOutputWithContext(context.Background())
}

func (i ReportGroupExportConfigArgs) ToReportGroupExportConfigOutputWithContext(ctx context.Context) ReportGroupExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupExportConfigOutput)
}

func (i *ReportGroupExportConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ReportGroupExportConfigArgs] {
	return pulumix.Val(i)
}

type ReportGroupExportConfigOutput struct{ *pulumi.OutputState }

func (ReportGroupExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupExportConfig)(nil)).Elem()
}

func (o ReportGroupExportConfigOutput) ToReportGroupExportConfigOutput() ReportGroupExportConfigOutput {
	return o
}

func (o ReportGroupExportConfigOutput) ToReportGroupExportConfigOutputWithContext(ctx context.Context) ReportGroupExportConfigOutput {
	return o
}

func (o ReportGroupExportConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ReportGroupExportConfig] {
	return pulumix.Output[ReportGroupExportConfig]{
		OutputState: o.OutputState,
	}
}

// contains information about the S3 bucket where the run of a report is exported. see S3 Destination documented below.
func (o ReportGroupExportConfigOutput) S3Destination() pulumix.GPtrOutput[ReportGroupExportConfigS3Destination, ReportGroupExportConfigS3DestinationOutput] {
	value := pulumix.Apply[ReportGroupExportConfig](o, func(v ReportGroupExportConfig) *ReportGroupExportConfigS3Destination { return v.S3Destination })
	return pulumix.GPtrOutput[ReportGroupExportConfigS3Destination, ReportGroupExportConfigS3DestinationOutput]{OutputState: value.OutputState}
}

// The export configuration type. Valid values are `S3` and `NO_EXPORT`.
func (o ReportGroupExportConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ReportGroupExportConfig](o, func(v ReportGroupExportConfig) string { return v.Type })
}

type ReportGroupExportConfigS3Destination struct {
	// The name of the S3 bucket where the raw data of a report are exported.
	Bucket string `pulumi:"bucket"`
	// A boolean value that specifies if the results of a report are encrypted.
	// **Note: the API does not currently allow setting encryption as disabled**
	EncryptionDisabled *bool `pulumi:"encryptionDisabled"`
	// The encryption key for the report's encrypted raw data. The KMS key ARN.
	EncryptionKey string `pulumi:"encryptionKey"`
	// The type of build output artifact to create. Valid values are: `NONE` (default) and `ZIP`.
	Packaging *string `pulumi:"packaging"`
	// The path to the exported report's raw data results.
	Path *string `pulumi:"path"`
}

type ReportGroupExportConfigS3DestinationArgs struct {
	// The name of the S3 bucket where the raw data of a report are exported.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// A boolean value that specifies if the results of a report are encrypted.
	// **Note: the API does not currently allow setting encryption as disabled**
	EncryptionDisabled pulumix.Input[*bool] `pulumi:"encryptionDisabled"`
	// The encryption key for the report's encrypted raw data. The KMS key ARN.
	EncryptionKey pulumix.Input[string] `pulumi:"encryptionKey"`
	// The type of build output artifact to create. Valid values are: `NONE` (default) and `ZIP`.
	Packaging pulumix.Input[*string] `pulumi:"packaging"`
	// The path to the exported report's raw data results.
	Path pulumix.Input[*string] `pulumi:"path"`
}

func (ReportGroupExportConfigS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupExportConfigS3Destination)(nil)).Elem()
}

func (i ReportGroupExportConfigS3DestinationArgs) ToReportGroupExportConfigS3DestinationOutput() ReportGroupExportConfigS3DestinationOutput {
	return i.ToReportGroupExportConfigS3DestinationOutputWithContext(context.Background())
}

func (i ReportGroupExportConfigS3DestinationArgs) ToReportGroupExportConfigS3DestinationOutputWithContext(ctx context.Context) ReportGroupExportConfigS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupExportConfigS3DestinationOutput)
}

func (i *ReportGroupExportConfigS3DestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ReportGroupExportConfigS3DestinationArgs] {
	return pulumix.Val(i)
}

type ReportGroupExportConfigS3DestinationOutput struct{ *pulumi.OutputState }

func (ReportGroupExportConfigS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupExportConfigS3Destination)(nil)).Elem()
}

func (o ReportGroupExportConfigS3DestinationOutput) ToReportGroupExportConfigS3DestinationOutput() ReportGroupExportConfigS3DestinationOutput {
	return o
}

func (o ReportGroupExportConfigS3DestinationOutput) ToReportGroupExportConfigS3DestinationOutputWithContext(ctx context.Context) ReportGroupExportConfigS3DestinationOutput {
	return o
}

func (o ReportGroupExportConfigS3DestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ReportGroupExportConfigS3Destination] {
	return pulumix.Output[ReportGroupExportConfigS3Destination]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket where the raw data of a report are exported.
func (o ReportGroupExportConfigS3DestinationOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[ReportGroupExportConfigS3Destination](o, func(v ReportGroupExportConfigS3Destination) string { return v.Bucket })
}

// A boolean value that specifies if the results of a report are encrypted.
// **Note: the API does not currently allow setting encryption as disabled**
func (o ReportGroupExportConfigS3DestinationOutput) EncryptionDisabled() pulumix.Output[*bool] {
	return pulumix.Apply[ReportGroupExportConfigS3Destination](o, func(v ReportGroupExportConfigS3Destination) *bool { return v.EncryptionDisabled })
}

// The encryption key for the report's encrypted raw data. The KMS key ARN.
func (o ReportGroupExportConfigS3DestinationOutput) EncryptionKey() pulumix.Output[string] {
	return pulumix.Apply[ReportGroupExportConfigS3Destination](o, func(v ReportGroupExportConfigS3Destination) string { return v.EncryptionKey })
}

// The type of build output artifact to create. Valid values are: `NONE` (default) and `ZIP`.
func (o ReportGroupExportConfigS3DestinationOutput) Packaging() pulumix.Output[*string] {
	return pulumix.Apply[ReportGroupExportConfigS3Destination](o, func(v ReportGroupExportConfigS3Destination) *string { return v.Packaging })
}

// The path to the exported report's raw data results.
func (o ReportGroupExportConfigS3DestinationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ReportGroupExportConfigS3Destination](o, func(v ReportGroupExportConfigS3Destination) *string { return v.Path })
}

type WebhookFilterGroup struct {
	// A webhook filter for the group. Filter blocks are documented below.
	Filters []WebhookFilterGroupFilter `pulumi:"filters"`
}

type WebhookFilterGroupArgs struct {
	// A webhook filter for the group. Filter blocks are documented below.
	Filters pulumix.Input[[]*WebhookFilterGroupFilterArgs] `pulumi:"filters"`
}

func (WebhookFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroup)(nil)).Elem()
}

func (i WebhookFilterGroupArgs) ToWebhookFilterGroupOutput() WebhookFilterGroupOutput {
	return i.ToWebhookFilterGroupOutputWithContext(context.Background())
}

func (i WebhookFilterGroupArgs) ToWebhookFilterGroupOutputWithContext(ctx context.Context) WebhookFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterGroupOutput)
}

func (i *WebhookFilterGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*WebhookFilterGroupArgs] {
	return pulumix.Val(i)
}

type WebhookFilterGroupOutput struct{ *pulumi.OutputState }

func (WebhookFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroup)(nil)).Elem()
}

func (o WebhookFilterGroupOutput) ToWebhookFilterGroupOutput() WebhookFilterGroupOutput {
	return o
}

func (o WebhookFilterGroupOutput) ToWebhookFilterGroupOutputWithContext(ctx context.Context) WebhookFilterGroupOutput {
	return o
}

func (o WebhookFilterGroupOutput) ToOutput(ctx context.Context) pulumix.Output[WebhookFilterGroup] {
	return pulumix.Output[WebhookFilterGroup]{
		OutputState: o.OutputState,
	}
}

// A webhook filter for the group. Filter blocks are documented below.
func (o WebhookFilterGroupOutput) Filters() pulumix.GArrayOutput[WebhookFilterGroupFilter, WebhookFilterGroupFilterOutput] {
	value := pulumix.Apply[WebhookFilterGroup](o, func(v WebhookFilterGroup) []WebhookFilterGroupFilter { return v.Filters })
	return pulumix.GArrayOutput[WebhookFilterGroupFilter, WebhookFilterGroupFilterOutput]{OutputState: value.OutputState}
}

type WebhookFilterGroupFilter struct {
	// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
	ExcludeMatchedPattern *bool `pulumi:"excludeMatchedPattern"`
	// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
	Pattern string `pulumi:"pattern"`
	// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`, `COMMIT_MESSAGE`. At least one filter group must specify `EVENT` as its type.
	Type string `pulumi:"type"`
}

type WebhookFilterGroupFilterArgs struct {
	// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
	ExcludeMatchedPattern pulumix.Input[*bool] `pulumi:"excludeMatchedPattern"`
	// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
	Pattern pulumix.Input[string] `pulumi:"pattern"`
	// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`, `COMMIT_MESSAGE`. At least one filter group must specify `EVENT` as its type.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (WebhookFilterGroupFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroupFilter)(nil)).Elem()
}

func (i WebhookFilterGroupFilterArgs) ToWebhookFilterGroupFilterOutput() WebhookFilterGroupFilterOutput {
	return i.ToWebhookFilterGroupFilterOutputWithContext(context.Background())
}

func (i WebhookFilterGroupFilterArgs) ToWebhookFilterGroupFilterOutputWithContext(ctx context.Context) WebhookFilterGroupFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookFilterGroupFilterOutput)
}

func (i *WebhookFilterGroupFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*WebhookFilterGroupFilterArgs] {
	return pulumix.Val(i)
}

type WebhookFilterGroupFilterOutput struct{ *pulumi.OutputState }

func (WebhookFilterGroupFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookFilterGroupFilter)(nil)).Elem()
}

func (o WebhookFilterGroupFilterOutput) ToWebhookFilterGroupFilterOutput() WebhookFilterGroupFilterOutput {
	return o
}

func (o WebhookFilterGroupFilterOutput) ToWebhookFilterGroupFilterOutputWithContext(ctx context.Context) WebhookFilterGroupFilterOutput {
	return o
}

func (o WebhookFilterGroupFilterOutput) ToOutput(ctx context.Context) pulumix.Output[WebhookFilterGroupFilter] {
	return pulumix.Output[WebhookFilterGroupFilter]{
		OutputState: o.OutputState,
	}
}

// If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
func (o WebhookFilterGroupFilterOutput) ExcludeMatchedPattern() pulumix.Output[*bool] {
	return pulumix.Apply[WebhookFilterGroupFilter](o, func(v WebhookFilterGroupFilter) *bool { return v.ExcludeMatchedPattern })
}

// For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
func (o WebhookFilterGroupFilterOutput) Pattern() pulumix.Output[string] {
	return pulumix.Apply[WebhookFilterGroupFilter](o, func(v WebhookFilterGroupFilter) string { return v.Pattern })
}

// The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`, `COMMIT_MESSAGE`. At least one filter group must specify `EVENT` as its type.
func (o WebhookFilterGroupFilterOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[WebhookFilterGroupFilter](o, func(v WebhookFilterGroupFilter) string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(ProjectArtifactsOutput{})
	pulumi.RegisterOutputType(ProjectBuildBatchConfigOutput{})
	pulumi.RegisterOutputType(ProjectBuildBatchConfigRestrictionsOutput{})
	pulumi.RegisterOutputType(ProjectCacheOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ProjectFileSystemLocationOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(ProjectLogsConfigS3LogsOutput{})
	pulumi.RegisterOutputType(ProjectSecondaryArtifactOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceBuildStatusConfigOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceGitSubmodulesConfigOutput{})
	pulumi.RegisterOutputType(ProjectSecondarySourceVersionOutput{})
	pulumi.RegisterOutputType(ProjectSourceOutput{})
	pulumi.RegisterOutputType(ProjectSourceBuildStatusConfigOutput{})
	pulumi.RegisterOutputType(ProjectSourceGitSubmodulesConfigOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigOutput{})
	pulumi.RegisterOutputType(ReportGroupExportConfigOutput{})
	pulumi.RegisterOutputType(ReportGroupExportConfigS3DestinationOutput{})
	pulumi.RegisterOutputType(WebhookFilterGroupOutput{})
	pulumi.RegisterOutputType(WebhookFilterGroupFilterOutput{})
}
