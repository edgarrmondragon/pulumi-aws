// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Secrets Manager secret version, including its secret value. To retrieve secret metadata, see the `secretsmanager.Secret` data source.
func LookupSecretVersion(ctx *pulumi.Context, args *LookupSecretVersionArgs, opts ...pulumi.InvokeOption) (*LookupSecretVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretVersionResult
	err := ctx.Invoke("aws:secretsmanager/getSecretVersion:getSecretVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretVersion.
type LookupSecretVersionArgs struct {
	// Specifies the secret containing the version that you want to retrieve. You can specify either the ARN or the friendly name of the secret.
	SecretId string `pulumi:"secretId"`
	// Specifies the unique identifier of the version of the secret that you want to retrieve. Overrides `versionStage`.
	VersionId *string `pulumi:"versionId"`
	// Specifies the secret version that you want to retrieve by the staging label attached to the version. Defaults to `AWSCURRENT`.
	VersionStage *string `pulumi:"versionStage"`
}

// A collection of values returned by getSecretVersion.
type LookupSecretVersionResult struct {
	// ARN of the secret.
	Arn string `pulumi:"arn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Decrypted part of the protected secret information that was originally provided as a binary.
	SecretBinary string `pulumi:"secretBinary"`
	SecretId     string `pulumi:"secretId"`
	// Decrypted part of the protected secret information that was originally provided as a string.
	SecretString string `pulumi:"secretString"`
	// Unique identifier of this version of the secret.
	VersionId     string   `pulumi:"versionId"`
	VersionStage  *string  `pulumi:"versionStage"`
	VersionStages []string `pulumi:"versionStages"`
}

func LookupSecretVersionOutput(ctx *pulumi.Context, args LookupSecretVersionOutputArgs, opts ...pulumi.InvokeOption) LookupSecretVersionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSecretVersionArgs](args.ToOutput(), func(plainArgs *LookupSecretVersionArgs) (*LookupSecretVersionResult, error) {
		return LookupSecretVersion(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSecretVersionResultOutput, *LookupSecretVersionResult](outputResult)
}

// A collection of arguments for invoking getSecretVersion.
type LookupSecretVersionOutputArgs struct {
	// Specifies the secret containing the version that you want to retrieve. You can specify either the ARN or the friendly name of the secret.
	SecretId pulumix.Input[string] `pulumi:"secretId"`
	// Specifies the unique identifier of the version of the secret that you want to retrieve. Overrides `versionStage`.
	VersionId pulumix.Input[*string] `pulumi:"versionId"`
	// Specifies the secret version that you want to retrieve by the staging label attached to the version. Defaults to `AWSCURRENT`.
	VersionStage pulumix.Input[*string] `pulumi:"versionStage"`
}

func (args LookupSecretVersionOutputArgs) ToOutput() pulumix.Output[*LookupSecretVersionArgs] {
	allArgs := pulumix.All(
		args.SecretId.ToOutput(context.Background()).AsAny(),
		args.VersionId.ToOutput(context.Background()).AsAny(),
		args.VersionStage.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSecretVersionArgs {
		return &LookupSecretVersionArgs{
			SecretId:     resolvedArgs[0].(string),
			VersionId:    resolvedArgs[1].(*string),
			VersionStage: resolvedArgs[2].(*string),
		}
	})
}

type LookupSecretVersionResultOutput struct{ *pulumi.OutputState }

func (LookupSecretVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretVersionResult)(nil)).Elem()
}

func (o LookupSecretVersionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSecretVersionResult] {
	return pulumix.Output[*LookupSecretVersionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSecretVersionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) string { return v.Arn })
}

func (o LookupSecretVersionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) string { return v.Id })
}

func (o LookupSecretVersionResultOutput) SecretBinary() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) string { return v.SecretBinary })
}

func (o LookupSecretVersionResultOutput) SecretId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) string { return v.SecretId })
}

func (o LookupSecretVersionResultOutput) SecretString() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) string { return v.SecretString })
}

func (o LookupSecretVersionResultOutput) VersionId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) string { return v.VersionId })
}

func (o LookupSecretVersionResultOutput) VersionStage() pulumix.Output[*string] {
	return pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) *string { return v.VersionStage })
}

func (o LookupSecretVersionResultOutput) VersionStages() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSecretVersionResult](o, func(v *LookupSecretVersionResult) []string { return v.VersionStages })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
