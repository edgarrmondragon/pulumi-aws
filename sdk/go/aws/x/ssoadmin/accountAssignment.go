// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssoadmin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Single Sign-On (SSO) Account Assignment resource
type AccountAssignment struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the SSO Instance.
	InstanceArn pulumix.Output[string] `pulumi:"instanceArn"`
	// The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
	PermissionSetArn pulumix.Output[string] `pulumi:"permissionSetArn"`
	// An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
	PrincipalId pulumix.Output[string] `pulumi:"principalId"`
	// The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
	PrincipalType pulumix.Output[string] `pulumi:"principalType"`
	// An AWS account identifier, typically a 10-12 digit string.
	TargetId pulumix.Output[string] `pulumi:"targetId"`
	// The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
	TargetType pulumix.Output[*string] `pulumi:"targetType"`
}

// NewAccountAssignment registers a new resource with the given unique name, arguments, and options.
func NewAccountAssignment(ctx *pulumi.Context,
	name string, args *AccountAssignmentArgs, opts ...pulumi.ResourceOption) (*AccountAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	if args.PermissionSetArn == nil {
		return nil, errors.New("invalid value for required argument 'PermissionSetArn'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.PrincipalType == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalType'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountAssignment
	err := ctx.RegisterResource("aws:ssoadmin/accountAssignment:AccountAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountAssignment gets an existing AccountAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountAssignmentState, opts ...pulumi.ResourceOption) (*AccountAssignment, error) {
	var resource AccountAssignment
	err := ctx.ReadResource("aws:ssoadmin/accountAssignment:AccountAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountAssignment resources.
type accountAssignmentState struct {
	// The Amazon Resource Name (ARN) of the SSO Instance.
	InstanceArn *string `pulumi:"instanceArn"`
	// The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
	PermissionSetArn *string `pulumi:"permissionSetArn"`
	// An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
	PrincipalId *string `pulumi:"principalId"`
	// The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
	PrincipalType *string `pulumi:"principalType"`
	// An AWS account identifier, typically a 10-12 digit string.
	TargetId *string `pulumi:"targetId"`
	// The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
	TargetType *string `pulumi:"targetType"`
}

type AccountAssignmentState struct {
	// The Amazon Resource Name (ARN) of the SSO Instance.
	InstanceArn pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
	PermissionSetArn pulumix.Input[*string]
	// An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
	PrincipalId pulumix.Input[*string]
	// The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
	PrincipalType pulumix.Input[*string]
	// An AWS account identifier, typically a 10-12 digit string.
	TargetId pulumix.Input[*string]
	// The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
	TargetType pulumix.Input[*string]
}

func (AccountAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountAssignmentState)(nil)).Elem()
}

type accountAssignmentArgs struct {
	// The Amazon Resource Name (ARN) of the SSO Instance.
	InstanceArn string `pulumi:"instanceArn"`
	// The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
	PermissionSetArn string `pulumi:"permissionSetArn"`
	// An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
	PrincipalId string `pulumi:"principalId"`
	// The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
	PrincipalType string `pulumi:"principalType"`
	// An AWS account identifier, typically a 10-12 digit string.
	TargetId string `pulumi:"targetId"`
	// The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
	TargetType *string `pulumi:"targetType"`
}

// The set of arguments for constructing a AccountAssignment resource.
type AccountAssignmentArgs struct {
	// The Amazon Resource Name (ARN) of the SSO Instance.
	InstanceArn pulumix.Input[string]
	// The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
	PermissionSetArn pulumix.Input[string]
	// An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
	PrincipalId pulumix.Input[string]
	// The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
	PrincipalType pulumix.Input[string]
	// An AWS account identifier, typically a 10-12 digit string.
	TargetId pulumix.Input[string]
	// The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
	TargetType pulumix.Input[*string]
}

func (AccountAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountAssignmentArgs)(nil)).Elem()
}

type AccountAssignmentOutput struct{ *pulumi.OutputState }

func (AccountAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountAssignment)(nil)).Elem()
}

func (o AccountAssignmentOutput) ToAccountAssignmentOutput() AccountAssignmentOutput {
	return o
}

func (o AccountAssignmentOutput) ToAccountAssignmentOutputWithContext(ctx context.Context) AccountAssignmentOutput {
	return o
}

func (o AccountAssignmentOutput) ToOutput(ctx context.Context) pulumix.Output[AccountAssignment] {
	return pulumix.Output[AccountAssignment]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the SSO Instance.
func (o AccountAssignmentOutput) InstanceArn() pulumix.Output[string] {
	value := pulumix.Apply[AccountAssignment](o, func(v AccountAssignment) pulumix.Output[string] { return v.InstanceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the Permission Set that the admin wants to grant the principal access to.
func (o AccountAssignmentOutput) PermissionSetArn() pulumix.Output[string] {
	value := pulumix.Apply[AccountAssignment](o, func(v AccountAssignment) pulumix.Output[string] { return v.PermissionSetArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An identifier for an object in SSO, such as a user or group. PrincipalIds are GUIDs (For example, `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`).
func (o AccountAssignmentOutput) PrincipalId() pulumix.Output[string] {
	value := pulumix.Apply[AccountAssignment](o, func(v AccountAssignment) pulumix.Output[string] { return v.PrincipalId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The entity type for which the assignment will be created. Valid values: `USER`, `GROUP`.
func (o AccountAssignmentOutput) PrincipalType() pulumix.Output[string] {
	value := pulumix.Apply[AccountAssignment](o, func(v AccountAssignment) pulumix.Output[string] { return v.PrincipalType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An AWS account identifier, typically a 10-12 digit string.
func (o AccountAssignmentOutput) TargetId() pulumix.Output[string] {
	value := pulumix.Apply[AccountAssignment](o, func(v AccountAssignment) pulumix.Output[string] { return v.TargetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The entity type for which the assignment will be created. Valid values: `AWS_ACCOUNT`.
func (o AccountAssignmentOutput) TargetType() pulumix.Output[*string] {
	value := pulumix.Apply[AccountAssignment](o, func(v AccountAssignment) pulumix.Output[*string] { return v.TargetType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(AccountAssignmentOutput{})
}
