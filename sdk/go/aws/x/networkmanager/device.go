// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a device in a global network. If you specify both a site ID and a location,
// the location of the site is used for visualization in the Network Manager console.
type Device struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the device.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The AWS location of the device. Documented below.
	AwsLocation pulumix.GPtrOutput[DeviceAwsLocation, DeviceAwsLocationOutput] `pulumi:"awsLocation"`
	// A description of the device.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId pulumix.Output[string] `pulumi:"globalNetworkId"`
	// The location of the device. Documented below.
	Location pulumix.GPtrOutput[DeviceLocation, DeviceLocationOutput] `pulumi:"location"`
	// The model of device.
	Model pulumix.Output[*string] `pulumi:"model"`
	// The serial number of the device.
	SerialNumber pulumix.Output[*string] `pulumi:"serialNumber"`
	// The ID of the site.
	SiteId pulumix.Output[*string] `pulumi:"siteId"`
	// Key-value tags for the device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of device.
	Type pulumix.Output[*string] `pulumi:"type"`
	// The vendor of the device.
	Vendor pulumix.Output[*string] `pulumi:"vendor"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("aws:networkmanager/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("aws:networkmanager/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// The Amazon Resource Name (ARN) of the device.
	Arn *string `pulumi:"arn"`
	// The AWS location of the device. Documented below.
	AwsLocation *DeviceAwsLocation `pulumi:"awsLocation"`
	// A description of the device.
	Description *string `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId *string `pulumi:"globalNetworkId"`
	// The location of the device. Documented below.
	Location *DeviceLocation `pulumi:"location"`
	// The model of device.
	Model *string `pulumi:"model"`
	// The serial number of the device.
	SerialNumber *string `pulumi:"serialNumber"`
	// The ID of the site.
	SiteId *string `pulumi:"siteId"`
	// Key-value tags for the device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of device.
	Type *string `pulumi:"type"`
	// The vendor of the device.
	Vendor *string `pulumi:"vendor"`
}

type DeviceState struct {
	// The Amazon Resource Name (ARN) of the device.
	Arn pulumix.Input[*string]
	// The AWS location of the device. Documented below.
	AwsLocation pulumix.Input[*DeviceAwsLocationArgs]
	// A description of the device.
	Description pulumix.Input[*string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[*string]
	// The location of the device. Documented below.
	Location pulumix.Input[*DeviceLocationArgs]
	// The model of device.
	Model pulumix.Input[*string]
	// The serial number of the device.
	SerialNumber pulumix.Input[*string]
	// The ID of the site.
	SiteId pulumix.Input[*string]
	// Key-value tags for the device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of device.
	Type pulumix.Input[*string]
	// The vendor of the device.
	Vendor pulumix.Input[*string]
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// The AWS location of the device. Documented below.
	AwsLocation *DeviceAwsLocation `pulumi:"awsLocation"`
	// A description of the device.
	Description *string `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The location of the device. Documented below.
	Location *DeviceLocation `pulumi:"location"`
	// The model of device.
	Model *string `pulumi:"model"`
	// The serial number of the device.
	SerialNumber *string `pulumi:"serialNumber"`
	// The ID of the site.
	SiteId *string `pulumi:"siteId"`
	// Key-value tags for the device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of device.
	Type *string `pulumi:"type"`
	// The vendor of the device.
	Vendor *string `pulumi:"vendor"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// The AWS location of the device. Documented below.
	AwsLocation pulumix.Input[*DeviceAwsLocationArgs]
	// A description of the device.
	Description pulumix.Input[*string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[string]
	// The location of the device. Documented below.
	Location pulumix.Input[*DeviceLocationArgs]
	// The model of device.
	Model pulumix.Input[*string]
	// The serial number of the device.
	SerialNumber pulumix.Input[*string]
	// The ID of the site.
	SiteId pulumix.Input[*string]
	// Key-value tags for the device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of device.
	Type pulumix.Input[*string]
	// The vendor of the device.
	Vendor pulumix.Input[*string]
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

func (o DeviceOutput) ToOutput(ctx context.Context) pulumix.Output[Device] {
	return pulumix.Output[Device]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the device.
func (o DeviceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS location of the device. Documented below.
func (o DeviceOutput) AwsLocation() pulumix.GPtrOutput[DeviceAwsLocation, DeviceAwsLocationOutput] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.GPtrOutput[DeviceAwsLocation, DeviceAwsLocationOutput] { return v.AwsLocation })
	unwrapped := pulumix.Flatten[*DeviceAwsLocation, pulumix.GPtrOutput[DeviceAwsLocation, DeviceAwsLocationOutput]](value)
	return pulumix.GPtrOutput[DeviceAwsLocation, DeviceAwsLocationOutput]{OutputState: unwrapped.OutputState}
}

// A description of the device.
func (o DeviceOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the global network.
func (o DeviceOutput) GlobalNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[string] { return v.GlobalNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The location of the device. Documented below.
func (o DeviceOutput) Location() pulumix.GPtrOutput[DeviceLocation, DeviceLocationOutput] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.GPtrOutput[DeviceLocation, DeviceLocationOutput] { return v.Location })
	unwrapped := pulumix.Flatten[*DeviceLocation, pulumix.GPtrOutput[DeviceLocation, DeviceLocationOutput]](value)
	return pulumix.GPtrOutput[DeviceLocation, DeviceLocationOutput]{OutputState: unwrapped.OutputState}
}

// The model of device.
func (o DeviceOutput) Model() pulumix.Output[*string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[*string] { return v.Model })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The serial number of the device.
func (o DeviceOutput) SerialNumber() pulumix.Output[*string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[*string] { return v.SerialNumber })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the site.
func (o DeviceOutput) SiteId() pulumix.Output[*string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[*string] { return v.SiteId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value tags for the device. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DeviceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o DeviceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of device.
func (o DeviceOutput) Type() pulumix.Output[*string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[*string] { return v.Type })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The vendor of the device.
func (o DeviceOutput) Vendor() pulumix.Output[*string] {
	value := pulumix.Apply[Device](o, func(v Device) pulumix.Output[*string] { return v.Vendor })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(DeviceOutput{})
}
