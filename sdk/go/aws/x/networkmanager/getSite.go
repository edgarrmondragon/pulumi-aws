// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a site.
func LookupSite(ctx *pulumi.Context, args *LookupSiteArgs, opts ...pulumi.InvokeOption) (*LookupSiteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSiteResult
	err := ctx.Invoke("aws:networkmanager/getSite:getSite", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSite.
type LookupSiteArgs struct {
	// ID of the Global Network of the site to retrieve.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// ID of the specific site to retrieve.
	SiteId string `pulumi:"siteId"`
	// Key-value tags for the Site.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSite.
type LookupSiteResult struct {
	// ARN of the site.
	Arn string `pulumi:"arn"`
	// Description of the site.
	Description     string `pulumi:"description"`
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Site location as documented below.
	Locations []GetSiteLocation `pulumi:"locations"`
	SiteId    string            `pulumi:"siteId"`
	// Key-value tags for the Site.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSiteOutput(ctx *pulumi.Context, args LookupSiteOutputArgs, opts ...pulumi.InvokeOption) LookupSiteResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSiteArgs](args.ToOutput(), func(plainArgs *LookupSiteArgs) (*LookupSiteResult, error) {
		return LookupSite(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSiteResultOutput, *LookupSiteResult](outputResult)
}

// A collection of arguments for invoking getSite.
type LookupSiteOutputArgs struct {
	// ID of the Global Network of the site to retrieve.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// ID of the specific site to retrieve.
	SiteId pulumix.Input[string] `pulumi:"siteId"`
	// Key-value tags for the Site.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSiteOutputArgs) ToOutput() pulumix.Output[*LookupSiteArgs] {
	allArgs := pulumix.All(
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.SiteId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSiteArgs {
		return &LookupSiteArgs{
			GlobalNetworkId: resolvedArgs[0].(string),
			SiteId:          resolvedArgs[1].(string),
			Tags:            resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupSiteResultOutput struct{ *pulumi.OutputState }

func (LookupSiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteResult)(nil)).Elem()
}

func (o LookupSiteResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSiteResult] {
	return pulumix.Output[*LookupSiteResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSiteResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) string { return v.Arn })
}

func (o LookupSiteResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) string { return v.Description })
}

func (o LookupSiteResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) string { return v.GlobalNetworkId })
}

func (o LookupSiteResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) string { return v.Id })
}

func (o LookupSiteResultOutput) Locations() pulumix.GArrayOutput[GetSiteLocation, GetSiteLocationOutput] {
	value := pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) []GetSiteLocation { return v.Locations })
	return pulumix.GArrayOutput[GetSiteLocation, GetSiteLocationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSiteResultOutput) SiteId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) string { return v.SiteId })
}

func (o LookupSiteResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSiteResult](o, func(v *LookupSiteResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
