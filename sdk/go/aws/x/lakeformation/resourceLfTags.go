// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an attachment between one or more existing LF-tags and an existing Lake Formation resource.
type ResourceLfTags struct {
	pulumi.CustomResourceState

	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumix.Output[string] `pulumi:"catalogId"`
	// Configuration block for a database resource. See below.
	Database pulumix.GPtrOutput[ResourceLfTagsDatabase, ResourceLfTagsDatabaseOutput] `pulumi:"database"`
	// Set of LF-tags to attach to the resource. See below.
	//
	// Exactly one of the following is required:
	LfTags pulumix.GArrayOutput[ResourceLfTagsLfTag, ResourceLfTagsLfTagOutput] `pulumi:"lfTags"`
	// Configuration block for a table resource. See below.
	Table pulumix.GPtrOutput[ResourceLfTagsTable, ResourceLfTagsTableOutput] `pulumi:"table"`
	// Configuration block for a table with columns resource. See below.
	//
	// The following arguments are optional:
	TableWithColumns pulumix.GPtrOutput[ResourceLfTagsTableWithColumns, ResourceLfTagsTableWithColumnsOutput] `pulumi:"tableWithColumns"`
}

// NewResourceLfTags registers a new resource with the given unique name, arguments, and options.
func NewResourceLfTags(ctx *pulumi.Context,
	name string, args *ResourceLfTagsArgs, opts ...pulumi.ResourceOption) (*ResourceLfTags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LfTags == nil {
		return nil, errors.New("invalid value for required argument 'LfTags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceLfTags
	err := ctx.RegisterResource("aws:lakeformation/resourceLfTags:ResourceLfTags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceLfTags gets an existing ResourceLfTags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceLfTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceLfTagsState, opts ...pulumi.ResourceOption) (*ResourceLfTags, error) {
	var resource ResourceLfTags
	err := ctx.ReadResource("aws:lakeformation/resourceLfTags:ResourceLfTags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceLfTags resources.
type resourceLfTagsState struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId *string `pulumi:"catalogId"`
	// Configuration block for a database resource. See below.
	Database *ResourceLfTagsDatabase `pulumi:"database"`
	// Set of LF-tags to attach to the resource. See below.
	//
	// Exactly one of the following is required:
	LfTags []ResourceLfTagsLfTag `pulumi:"lfTags"`
	// Configuration block for a table resource. See below.
	Table *ResourceLfTagsTable `pulumi:"table"`
	// Configuration block for a table with columns resource. See below.
	//
	// The following arguments are optional:
	TableWithColumns *ResourceLfTagsTableWithColumns `pulumi:"tableWithColumns"`
}

type ResourceLfTagsState struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumix.Input[*string]
	// Configuration block for a database resource. See below.
	Database pulumix.Input[*ResourceLfTagsDatabaseArgs]
	// Set of LF-tags to attach to the resource. See below.
	//
	// Exactly one of the following is required:
	LfTags pulumix.Input[[]*ResourceLfTagsLfTagArgs]
	// Configuration block for a table resource. See below.
	Table pulumix.Input[*ResourceLfTagsTableArgs]
	// Configuration block for a table with columns resource. See below.
	//
	// The following arguments are optional:
	TableWithColumns pulumix.Input[*ResourceLfTagsTableWithColumnsArgs]
}

func (ResourceLfTagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceLfTagsState)(nil)).Elem()
}

type resourceLfTagsArgs struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId *string `pulumi:"catalogId"`
	// Configuration block for a database resource. See below.
	Database *ResourceLfTagsDatabase `pulumi:"database"`
	// Set of LF-tags to attach to the resource. See below.
	//
	// Exactly one of the following is required:
	LfTags []ResourceLfTagsLfTag `pulumi:"lfTags"`
	// Configuration block for a table resource. See below.
	Table *ResourceLfTagsTable `pulumi:"table"`
	// Configuration block for a table with columns resource. See below.
	//
	// The following arguments are optional:
	TableWithColumns *ResourceLfTagsTableWithColumns `pulumi:"tableWithColumns"`
}

// The set of arguments for constructing a ResourceLfTags resource.
type ResourceLfTagsArgs struct {
	// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogId pulumix.Input[*string]
	// Configuration block for a database resource. See below.
	Database pulumix.Input[*ResourceLfTagsDatabaseArgs]
	// Set of LF-tags to attach to the resource. See below.
	//
	// Exactly one of the following is required:
	LfTags pulumix.Input[[]*ResourceLfTagsLfTagArgs]
	// Configuration block for a table resource. See below.
	Table pulumix.Input[*ResourceLfTagsTableArgs]
	// Configuration block for a table with columns resource. See below.
	//
	// The following arguments are optional:
	TableWithColumns pulumix.Input[*ResourceLfTagsTableWithColumnsArgs]
}

func (ResourceLfTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceLfTagsArgs)(nil)).Elem()
}

type ResourceLfTagsOutput struct{ *pulumi.OutputState }

func (ResourceLfTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLfTags)(nil)).Elem()
}

func (o ResourceLfTagsOutput) ToResourceLfTagsOutput() ResourceLfTagsOutput {
	return o
}

func (o ResourceLfTagsOutput) ToResourceLfTagsOutputWithContext(ctx context.Context) ResourceLfTagsOutput {
	return o
}

func (o ResourceLfTagsOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLfTags] {
	return pulumix.Output[ResourceLfTags]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
func (o ResourceLfTagsOutput) CatalogId() pulumix.Output[string] {
	value := pulumix.Apply[ResourceLfTags](o, func(v ResourceLfTags) pulumix.Output[string] { return v.CatalogId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for a database resource. See below.
func (o ResourceLfTagsOutput) Database() pulumix.GPtrOutput[ResourceLfTagsDatabase, ResourceLfTagsDatabaseOutput] {
	value := pulumix.Apply[ResourceLfTags](o, func(v ResourceLfTags) pulumix.GPtrOutput[ResourceLfTagsDatabase, ResourceLfTagsDatabaseOutput] {
		return v.Database
	})
	unwrapped := pulumix.Flatten[*ResourceLfTagsDatabase, pulumix.GPtrOutput[ResourceLfTagsDatabase, ResourceLfTagsDatabaseOutput]](value)
	return pulumix.GPtrOutput[ResourceLfTagsDatabase, ResourceLfTagsDatabaseOutput]{OutputState: unwrapped.OutputState}
}

// Set of LF-tags to attach to the resource. See below.
//
// Exactly one of the following is required:
func (o ResourceLfTagsOutput) LfTags() pulumix.GArrayOutput[ResourceLfTagsLfTag, ResourceLfTagsLfTagOutput] {
	value := pulumix.Apply[ResourceLfTags](o, func(v ResourceLfTags) pulumix.GArrayOutput[ResourceLfTagsLfTag, ResourceLfTagsLfTagOutput] {
		return v.LfTags
	})
	unwrapped := pulumix.Flatten[[]ResourceLfTagsLfTag, pulumix.GArrayOutput[ResourceLfTagsLfTag, ResourceLfTagsLfTagOutput]](value)
	return pulumix.GArrayOutput[ResourceLfTagsLfTag, ResourceLfTagsLfTagOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for a table resource. See below.
func (o ResourceLfTagsOutput) Table() pulumix.GPtrOutput[ResourceLfTagsTable, ResourceLfTagsTableOutput] {
	value := pulumix.Apply[ResourceLfTags](o, func(v ResourceLfTags) pulumix.GPtrOutput[ResourceLfTagsTable, ResourceLfTagsTableOutput] {
		return v.Table
	})
	unwrapped := pulumix.Flatten[*ResourceLfTagsTable, pulumix.GPtrOutput[ResourceLfTagsTable, ResourceLfTagsTableOutput]](value)
	return pulumix.GPtrOutput[ResourceLfTagsTable, ResourceLfTagsTableOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for a table with columns resource. See below.
//
// The following arguments are optional:
func (o ResourceLfTagsOutput) TableWithColumns() pulumix.GPtrOutput[ResourceLfTagsTableWithColumns, ResourceLfTagsTableWithColumnsOutput] {
	value := pulumix.Apply[ResourceLfTags](o, func(v ResourceLfTags) pulumix.GPtrOutput[ResourceLfTagsTableWithColumns, ResourceLfTagsTableWithColumnsOutput] {
		return v.TableWithColumns
	})
	unwrapped := pulumix.Flatten[*ResourceLfTagsTableWithColumns, pulumix.GPtrOutput[ResourceLfTagsTableWithColumns, ResourceLfTagsTableWithColumnsOutput]](value)
	return pulumix.GPtrOutput[ResourceLfTagsTableWithColumns, ResourceLfTagsTableWithColumnsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ResourceLfTagsOutput{})
}
