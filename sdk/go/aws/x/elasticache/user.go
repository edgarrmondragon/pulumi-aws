// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an ElastiCache user resource.
//
// > **Note:** All arguments including the username and passwords will be stored in the raw state as plain-text.
type User struct {
	pulumi.CustomResourceState

	// Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
	AccessString pulumix.Output[string] `pulumi:"accessString"`
	// The ARN of the created ElastiCache User.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput] `pulumi:"authenticationMode"`
	// The current supported value is `REDIS`.
	Engine pulumix.Output[string] `pulumi:"engine"`
	// Indicates a password is not required for this user.
	NoPasswordRequired pulumix.Output[*bool] `pulumi:"noPasswordRequired"`
	// Passwords used for this user. You can create up to two passwords for each user.
	Passwords pulumix.ArrayOutput[string] `pulumi:"passwords"`
	// A list of tags to be added to this resource. A tag is a key-value pair.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the user.
	UserId pulumix.Output[string] `pulumi:"userId"`
	// The username of the user.
	//
	// The following arguments are optional:
	UserName pulumix.Output[string] `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessString == nil {
		return nil, errors.New("invalid value for required argument 'AccessString'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.Passwords != nil {
		untypedSecretValue := pulumi.ToSecret(args.Passwords.ToOutput(ctx.Context()).Untyped())
		args.Passwords = pulumix.MustConvertTyped[[]string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passwords",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("aws:elasticache/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws:elasticache/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
	AccessString *string `pulumi:"accessString"`
	// The ARN of the created ElastiCache User.
	Arn *string `pulumi:"arn"`
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode *UserAuthenticationMode `pulumi:"authenticationMode"`
	// The current supported value is `REDIS`.
	Engine *string `pulumi:"engine"`
	// Indicates a password is not required for this user.
	NoPasswordRequired *bool `pulumi:"noPasswordRequired"`
	// Passwords used for this user. You can create up to two passwords for each user.
	Passwords []string `pulumi:"passwords"`
	// A list of tags to be added to this resource. A tag is a key-value pair.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the user.
	UserId *string `pulumi:"userId"`
	// The username of the user.
	//
	// The following arguments are optional:
	UserName *string `pulumi:"userName"`
}

type UserState struct {
	// Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
	AccessString pulumix.Input[*string]
	// The ARN of the created ElastiCache User.
	Arn pulumix.Input[*string]
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode pulumix.Input[*UserAuthenticationModeArgs]
	// The current supported value is `REDIS`.
	Engine pulumix.Input[*string]
	// Indicates a password is not required for this user.
	NoPasswordRequired pulumix.Input[*bool]
	// Passwords used for this user. You can create up to two passwords for each user.
	Passwords pulumix.Input[[]string]
	// A list of tags to be added to this resource. A tag is a key-value pair.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The ID of the user.
	UserId pulumix.Input[*string]
	// The username of the user.
	//
	// The following arguments are optional:
	UserName pulumix.Input[*string]
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
	AccessString string `pulumi:"accessString"`
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode *UserAuthenticationMode `pulumi:"authenticationMode"`
	// The current supported value is `REDIS`.
	Engine string `pulumi:"engine"`
	// Indicates a password is not required for this user.
	NoPasswordRequired *bool `pulumi:"noPasswordRequired"`
	// Passwords used for this user. You can create up to two passwords for each user.
	Passwords []string `pulumi:"passwords"`
	// A list of tags to be added to this resource. A tag is a key-value pair.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the user.
	UserId string `pulumi:"userId"`
	// The username of the user.
	//
	// The following arguments are optional:
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
	AccessString pulumix.Input[string]
	// Denotes the user's authentication properties. Detailed below.
	AuthenticationMode pulumix.Input[*UserAuthenticationModeArgs]
	// The current supported value is `REDIS`.
	Engine pulumix.Input[string]
	// Indicates a password is not required for this user.
	NoPasswordRequired pulumix.Input[*bool]
	// Passwords used for this user. You can create up to two passwords for each user.
	Passwords pulumix.Input[[]string]
	// A list of tags to be added to this resource. A tag is a key-value pair.
	Tags pulumix.Input[map[string]string]
	// The ID of the user.
	UserId pulumix.Input[string]
	// The username of the user.
	//
	// The following arguments are optional:
	UserName pulumix.Input[string]
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ToOutput(ctx context.Context) pulumix.Output[User] {
	return pulumix.Output[User]{
		OutputState: o.OutputState,
	}
}

// Access permissions string used for this user. See [Specifying Permissions Using an Access String](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html#Access-string) for more details.
func (o UserOutput) AccessString() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.AccessString })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the created ElastiCache User.
func (o UserOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Denotes the user's authentication properties. Detailed below.
func (o UserOutput) AuthenticationMode() pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput] {
	value := pulumix.Apply[User](o, func(v User) pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput] {
		return v.AuthenticationMode
	})
	unwrapped := pulumix.Flatten[*UserAuthenticationMode, pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput]](value)
	return pulumix.GPtrOutput[UserAuthenticationMode, UserAuthenticationModeOutput]{OutputState: unwrapped.OutputState}
}

// The current supported value is `REDIS`.
func (o UserOutput) Engine() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Engine })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates a password is not required for this user.
func (o UserOutput) NoPasswordRequired() pulumix.Output[*bool] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*bool] { return v.NoPasswordRequired })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Passwords used for this user. You can create up to two passwords for each user.
func (o UserOutput) Passwords() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.ArrayOutput[string] { return v.Passwords })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A list of tags to be added to this resource. A tag is a key-value pair.
func (o UserOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o UserOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the user.
func (o UserOutput) UserId() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.UserId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The username of the user.
//
// The following arguments are optional:
func (o UserOutput) UserName() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.UserName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
