// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftdata

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Executes a Redshift Data Statement.
type Statement struct {
	pulumi.CustomResourceState

	// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
	ClusterIdentifier pulumix.Output[*string] `pulumi:"clusterIdentifier"`
	// The name of the database.
	Database pulumix.Output[string] `pulumi:"database"`
	// The database user name.
	DbUser     pulumix.Output[*string]                                            `pulumi:"dbUser"`
	Parameters pulumix.GArrayOutput[StatementParameter, StatementParameterOutput] `pulumi:"parameters"`
	// The name or ARN of the secret that enables access to the database.
	SecretArn pulumix.Output[*string] `pulumi:"secretArn"`
	// The SQL statement text to run.
	//
	// The following arguments are optional:
	Sql pulumix.Output[string] `pulumi:"sql"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName pulumix.Output[*string] `pulumi:"statementName"`
	// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
	WithEvent pulumix.Output[*bool] `pulumi:"withEvent"`
	// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
	WorkgroupName pulumix.Output[*string] `pulumi:"workgroupName"`
}

// NewStatement registers a new resource with the given unique name, arguments, and options.
func NewStatement(ctx *pulumi.Context,
	name string, args *StatementArgs, opts ...pulumi.ResourceOption) (*Statement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Statement
	err := ctx.RegisterResource("aws:redshiftdata/statement:Statement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatement gets an existing Statement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStatement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StatementState, opts ...pulumi.ResourceOption) (*Statement, error) {
	var resource Statement
	err := ctx.ReadResource("aws:redshiftdata/statement:Statement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Statement resources.
type statementState struct {
	// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The name of the database.
	Database *string `pulumi:"database"`
	// The database user name.
	DbUser     *string              `pulumi:"dbUser"`
	Parameters []StatementParameter `pulumi:"parameters"`
	// The name or ARN of the secret that enables access to the database.
	SecretArn *string `pulumi:"secretArn"`
	// The SQL statement text to run.
	//
	// The following arguments are optional:
	Sql *string `pulumi:"sql"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `pulumi:"statementName"`
	// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
	WithEvent *bool `pulumi:"withEvent"`
	// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
	WorkgroupName *string `pulumi:"workgroupName"`
}

type StatementState struct {
	// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
	ClusterIdentifier pulumix.Input[*string]
	// The name of the database.
	Database pulumix.Input[*string]
	// The database user name.
	DbUser     pulumix.Input[*string]
	Parameters pulumix.Input[[]*StatementParameterArgs]
	// The name or ARN of the secret that enables access to the database.
	SecretArn pulumix.Input[*string]
	// The SQL statement text to run.
	//
	// The following arguments are optional:
	Sql pulumix.Input[*string]
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName pulumix.Input[*string]
	// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
	WithEvent pulumix.Input[*bool]
	// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
	WorkgroupName pulumix.Input[*string]
}

func (StatementState) ElementType() reflect.Type {
	return reflect.TypeOf((*statementState)(nil)).Elem()
}

type statementArgs struct {
	// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The name of the database.
	Database string `pulumi:"database"`
	// The database user name.
	DbUser     *string              `pulumi:"dbUser"`
	Parameters []StatementParameter `pulumi:"parameters"`
	// The name or ARN of the secret that enables access to the database.
	SecretArn *string `pulumi:"secretArn"`
	// The SQL statement text to run.
	//
	// The following arguments are optional:
	Sql string `pulumi:"sql"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `pulumi:"statementName"`
	// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
	WithEvent *bool `pulumi:"withEvent"`
	// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
	WorkgroupName *string `pulumi:"workgroupName"`
}

// The set of arguments for constructing a Statement resource.
type StatementArgs struct {
	// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
	ClusterIdentifier pulumix.Input[*string]
	// The name of the database.
	Database pulumix.Input[string]
	// The database user name.
	DbUser     pulumix.Input[*string]
	Parameters pulumix.Input[[]*StatementParameterArgs]
	// The name or ARN of the secret that enables access to the database.
	SecretArn pulumix.Input[*string]
	// The SQL statement text to run.
	//
	// The following arguments are optional:
	Sql pulumix.Input[string]
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName pulumix.Input[*string]
	// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
	WithEvent pulumix.Input[*bool]
	// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
	WorkgroupName pulumix.Input[*string]
}

func (StatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*statementArgs)(nil)).Elem()
}

type StatementOutput struct{ *pulumi.OutputState }

func (StatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Statement)(nil)).Elem()
}

func (o StatementOutput) ToStatementOutput() StatementOutput {
	return o
}

func (o StatementOutput) ToStatementOutputWithContext(ctx context.Context) StatementOutput {
	return o
}

func (o StatementOutput) ToOutput(ctx context.Context) pulumix.Output[Statement] {
	return pulumix.Output[Statement]{
		OutputState: o.OutputState,
	}
}

// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
func (o StatementOutput) ClusterIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[*string] { return v.ClusterIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the database.
func (o StatementOutput) Database() pulumix.Output[string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[string] { return v.Database })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The database user name.
func (o StatementOutput) DbUser() pulumix.Output[*string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[*string] { return v.DbUser })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o StatementOutput) Parameters() pulumix.GArrayOutput[StatementParameter, StatementParameterOutput] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.GArrayOutput[StatementParameter, StatementParameterOutput] {
		return v.Parameters
	})
	unwrapped := pulumix.Flatten[[]StatementParameter, pulumix.GArrayOutput[StatementParameter, StatementParameterOutput]](value)
	return pulumix.GArrayOutput[StatementParameter, StatementParameterOutput]{OutputState: unwrapped.OutputState}
}

// The name or ARN of the secret that enables access to the database.
func (o StatementOutput) SecretArn() pulumix.Output[*string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[*string] { return v.SecretArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The SQL statement text to run.
//
// The following arguments are optional:
func (o StatementOutput) Sql() pulumix.Output[string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[string] { return v.Sql })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
func (o StatementOutput) StatementName() pulumix.Output[*string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[*string] { return v.StatementName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
func (o StatementOutput) WithEvent() pulumix.Output[*bool] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[*bool] { return v.WithEvent })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
func (o StatementOutput) WorkgroupName() pulumix.Output[*string] {
	value := pulumix.Apply[Statement](o, func(v Statement) pulumix.Output[*string] { return v.WorkgroupName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(StatementOutput{})
}
