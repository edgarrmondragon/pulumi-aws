// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Attaches a load balancer to an Auto Scaling group.
//
// > **NOTE on Auto Scaling Groups, Attachments and Traffic Source Attachments:** Pulumi provides standalone Attachment (for attaching Classic Load Balancers and Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target groups) and Traffic Source Attachment (for attaching Load Balancers and VPC Lattice target groups) resources and an Auto Scaling Group resource with `loadBalancers`, `targetGroupArns` and `trafficSource` attributes. Do not use the same traffic source in more than one of these resources. Doing so will cause a conflict of attachments. A `lifecycle` configuration block can be used to suppress differences if necessary.
type Attachment struct {
	pulumi.CustomResourceState

	// Name of ASG to associate with the ELB.
	AutoscalingGroupName pulumix.Output[string] `pulumi:"autoscalingGroupName"`
	// Name of the ELB.
	Elb pulumix.Output[*string] `pulumi:"elb"`
	// ARN of a load balancer target group.
	LbTargetGroupArn pulumix.Output[*string] `pulumi:"lbTargetGroupArn"`
}

// NewAttachment registers a new resource with the given unique name, arguments, and options.
func NewAttachment(ctx *pulumi.Context,
	name string, args *AttachmentArgs, opts ...pulumi.ResourceOption) (*Attachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Attachment
	err := ctx.RegisterResource("aws:autoscaling/attachment:Attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachment gets an existing Attachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentState, opts ...pulumi.ResourceOption) (*Attachment, error) {
	var resource Attachment
	err := ctx.ReadResource("aws:autoscaling/attachment:Attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attachment resources.
type attachmentState struct {
	// Name of ASG to associate with the ELB.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// Name of the ELB.
	Elb *string `pulumi:"elb"`
	// ARN of a load balancer target group.
	LbTargetGroupArn *string `pulumi:"lbTargetGroupArn"`
}

type AttachmentState struct {
	// Name of ASG to associate with the ELB.
	AutoscalingGroupName pulumix.Input[*string]
	// Name of the ELB.
	Elb pulumix.Input[*string]
	// ARN of a load balancer target group.
	LbTargetGroupArn pulumix.Input[*string]
}

func (AttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentState)(nil)).Elem()
}

type attachmentArgs struct {
	// Name of ASG to associate with the ELB.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// Name of the ELB.
	Elb *string `pulumi:"elb"`
	// ARN of a load balancer target group.
	LbTargetGroupArn *string `pulumi:"lbTargetGroupArn"`
}

// The set of arguments for constructing a Attachment resource.
type AttachmentArgs struct {
	// Name of ASG to associate with the ELB.
	AutoscalingGroupName pulumix.Input[string]
	// Name of the ELB.
	Elb pulumix.Input[*string]
	// ARN of a load balancer target group.
	LbTargetGroupArn pulumix.Input[*string]
}

func (AttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentArgs)(nil)).Elem()
}

type AttachmentOutput struct{ *pulumi.OutputState }

func (AttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attachment)(nil)).Elem()
}

func (o AttachmentOutput) ToAttachmentOutput() AttachmentOutput {
	return o
}

func (o AttachmentOutput) ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput {
	return o
}

func (o AttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[Attachment] {
	return pulumix.Output[Attachment]{
		OutputState: o.OutputState,
	}
}

// Name of ASG to associate with the ELB.
func (o AttachmentOutput) AutoscalingGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Attachment](o, func(v Attachment) pulumix.Output[string] { return v.AutoscalingGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the ELB.
func (o AttachmentOutput) Elb() pulumix.Output[*string] {
	value := pulumix.Apply[Attachment](o, func(v Attachment) pulumix.Output[*string] { return v.Elb })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of a load balancer target group.
func (o AttachmentOutput) LbTargetGroupArn() pulumix.Output[*string] {
	value := pulumix.Apply[Attachment](o, func(v Attachment) pulumix.Output[*string] { return v.LbTargetGroupArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(AttachmentOutput{})
}
