// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Kendra Index.
func LookupIndex(ctx *pulumi.Context, args *LookupIndexArgs, opts ...pulumi.InvokeOption) (*LookupIndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIndexResult
	err := ctx.Invoke("aws:kendra/getIndex:getIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIndex.
type LookupIndexArgs struct {
	// Returns information on a specific Index by id.
	Id string `pulumi:"id"`
	// Metadata that helps organize the Indices you create.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getIndex.
type LookupIndexResult struct {
	// ARN of the Index.
	Arn string `pulumi:"arn"`
	// Block that sets the number of additional document storage and query capacity units that should be used by the index. Documented below.
	CapacityUnits []GetIndexCapacityUnit `pulumi:"capacityUnits"`
	// Unix datetime that the index was created.
	CreatedAt string `pulumi:"createdAt"`
	// Description of the Index.
	Description string `pulumi:"description"`
	// One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Documented below.
	DocumentMetadataConfigurationUpdates []GetIndexDocumentMetadataConfigurationUpdate `pulumi:"documentMetadataConfigurationUpdates"`
	// Amazon Kendra edition for the index.
	Edition string `pulumi:"edition"`
	// When the Status field value is `FAILED`, this contains a message that explains why.
	ErrorMessage string `pulumi:"errorMessage"`
	// Identifier of the Index.
	Id string `pulumi:"id"`
	// Block that provides information about the number of FAQ questions and answers and the number of text documents indexed. Documented below.
	IndexStatistics []GetIndexIndexStatistic `pulumi:"indexStatistics"`
	// Name of the index field. Minimum length of 1. Maximum length of 30.
	Name string `pulumi:"name"`
	// An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the `BatchPutDocument` API to index documents from an Amazon S3 bucket.
	RoleArn string `pulumi:"roleArn"`
	// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Documented below.
	ServerSideEncryptionConfigurations []GetIndexServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfigurations"`
	// Current status of the index. When the value is `ACTIVE`, the index is ready for use. If the Status field value is `FAILED`, the `errorMessage` field contains a message that explains why.
	Status string `pulumi:"status"`
	// Metadata that helps organize the Indices you create.
	Tags map[string]string `pulumi:"tags"`
	// Unix datetime that the index was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// User context policy. Valid values are `ATTRIBUTE_FILTER` or `USER_TOKEN`. For more information, refer to [UserContextPolicy](https://docs.aws.amazon.com/kendra/latest/APIReference/API_CreateIndex.html#kendra-CreateIndex-request-UserContextPolicy).
	UserContextPolicy string `pulumi:"userContextPolicy"`
	// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. Documented below.
	UserGroupResolutionConfigurations []GetIndexUserGroupResolutionConfiguration `pulumi:"userGroupResolutionConfigurations"`
	// A block that specifies the user token configuration. Documented below.
	UserTokenConfigurations []GetIndexUserTokenConfiguration `pulumi:"userTokenConfigurations"`
}

func LookupIndexOutput(ctx *pulumi.Context, args LookupIndexOutputArgs, opts ...pulumi.InvokeOption) LookupIndexResultOutput {
	outputResult := pulumix.ApplyErr[*LookupIndexArgs](args.ToOutput(), func(plainArgs *LookupIndexArgs) (*LookupIndexResult, error) {
		return LookupIndex(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupIndexResultOutput, *LookupIndexResult](outputResult)
}

// A collection of arguments for invoking getIndex.
type LookupIndexOutputArgs struct {
	// Returns information on a specific Index by id.
	Id pulumix.Input[string] `pulumi:"id"`
	// Metadata that helps organize the Indices you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupIndexOutputArgs) ToOutput() pulumix.Output[*LookupIndexArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupIndexArgs {
		return &LookupIndexArgs{
			Id:   resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupIndexResultOutput struct{ *pulumi.OutputState }

func (LookupIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexResult)(nil)).Elem()
}

func (o LookupIndexResultOutput) ToOutput(context.Context) pulumix.Output[*LookupIndexResult] {
	return pulumix.Output[*LookupIndexResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupIndexResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.Arn })
}

func (o LookupIndexResultOutput) CapacityUnits() pulumix.GArrayOutput[GetIndexCapacityUnit, GetIndexCapacityUnitOutput] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) []GetIndexCapacityUnit { return v.CapacityUnits })
	return pulumix.GArrayOutput[GetIndexCapacityUnit, GetIndexCapacityUnitOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupIndexResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.CreatedAt })
}

func (o LookupIndexResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.Description })
}

func (o LookupIndexResultOutput) DocumentMetadataConfigurationUpdates() pulumix.GArrayOutput[GetIndexDocumentMetadataConfigurationUpdate, GetIndexDocumentMetadataConfigurationUpdateOutput] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) []GetIndexDocumentMetadataConfigurationUpdate {
		return v.DocumentMetadataConfigurationUpdates
	})
	return pulumix.GArrayOutput[GetIndexDocumentMetadataConfigurationUpdate, GetIndexDocumentMetadataConfigurationUpdateOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupIndexResultOutput) Edition() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.Edition })
}

func (o LookupIndexResultOutput) ErrorMessage() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.ErrorMessage })
}

func (o LookupIndexResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.Id })
}

func (o LookupIndexResultOutput) IndexStatistics() pulumix.GArrayOutput[GetIndexIndexStatistic, GetIndexIndexStatisticOutput] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) []GetIndexIndexStatistic { return v.IndexStatistics })
	return pulumix.GArrayOutput[GetIndexIndexStatistic, GetIndexIndexStatisticOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupIndexResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.Name })
}

func (o LookupIndexResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.RoleArn })
}

func (o LookupIndexResultOutput) ServerSideEncryptionConfigurations() pulumix.GArrayOutput[GetIndexServerSideEncryptionConfiguration, GetIndexServerSideEncryptionConfigurationOutput] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) []GetIndexServerSideEncryptionConfiguration {
		return v.ServerSideEncryptionConfigurations
	})
	return pulumix.GArrayOutput[GetIndexServerSideEncryptionConfiguration, GetIndexServerSideEncryptionConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupIndexResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.Status })
}

func (o LookupIndexResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupIndexResultOutput) UpdatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.UpdatedAt })
}

func (o LookupIndexResultOutput) UserContextPolicy() pulumix.Output[string] {
	return pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) string { return v.UserContextPolicy })
}

func (o LookupIndexResultOutput) UserGroupResolutionConfigurations() pulumix.GArrayOutput[GetIndexUserGroupResolutionConfiguration, GetIndexUserGroupResolutionConfigurationOutput] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) []GetIndexUserGroupResolutionConfiguration {
		return v.UserGroupResolutionConfigurations
	})
	return pulumix.GArrayOutput[GetIndexUserGroupResolutionConfiguration, GetIndexUserGroupResolutionConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupIndexResultOutput) UserTokenConfigurations() pulumix.GArrayOutput[GetIndexUserTokenConfiguration, GetIndexUserTokenConfigurationOutput] {
	value := pulumix.Apply[*LookupIndexResult](o, func(v *LookupIndexResult) []GetIndexUserTokenConfiguration { return v.UserTokenConfigurations })
	return pulumix.GArrayOutput[GetIndexUserTokenConfiguration, GetIndexUserTokenConfigurationOutput]{
		OutputState: value.OutputState,
	}
}
