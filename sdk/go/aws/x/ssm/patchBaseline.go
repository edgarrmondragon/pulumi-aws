// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SSM Patch Baseline resource.
//
// > **NOTE on Patch Baselines:** The `approvedPatches` and `approvalRule` are
// both marked as optional fields, but the Patch Baseline requires that at least one
// of them is specified.
type PatchBaseline struct {
	pulumi.CustomResourceState

	// A set of rules used to include patches in the baseline.
	// Up to 10 approval rules can be specified.
	// See `approvalRule` below.
	ApprovalRules pulumix.GArrayOutput[PatchBaselineApprovalRule, PatchBaselineApprovalRuleOutput] `pulumi:"approvalRules"`
	// A list of explicitly approved patches for the baseline.
	// Cannot be specified with `approvalRule`.
	ApprovedPatches pulumix.ArrayOutput[string] `pulumi:"approvedPatches"`
	// The compliance level for approved patches.
	// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ApprovedPatchesComplianceLevel pulumix.Output[*string] `pulumi:"approvedPatchesComplianceLevel"`
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	// Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity pulumix.Output[*bool] `pulumi:"approvedPatchesEnableNonSecurity"`
	// The ARN of the patch baseline.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The description of the patch baseline.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A set of global filters used to exclude patches from the baseline.
	// Up to 4 global filters can be specified using Key/Value pairs.
	// Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
	GlobalFilters pulumix.GArrayOutput[PatchBaselineGlobalFilter, PatchBaselineGlobalFilterOutput] `pulumi:"globalFilters"`
	// The name of the patch baseline.
	Name pulumix.Output[string] `pulumi:"name"`
	// The operating system the patch baseline applies to.
	// Valid values are
	// `ALMA_LINUX`,
	// `AMAZON_LINUX`,
	// `AMAZON_LINUX_2`,
	// `AMAZON_LINUX_2022`,
	// `AMAZON_LINUX_2023`,
	// `CENTOS`,
	// `DEBIAN`,
	// `MACOS`,
	// `ORACLE_LINUX`,
	// `RASPBIAN`,
	// `REDHAT_ENTERPRISE_LINUX`,
	// `ROCKY_LINUX`,
	// `SUSE`,
	// `UBUNTU`, and
	// `WINDOWS`.
	// The default value is `WINDOWS`.
	OperatingSystem pulumix.Output[*string] `pulumi:"operatingSystem"`
	// A list of rejected patches.
	RejectedPatches pulumix.ArrayOutput[string] `pulumi:"rejectedPatches"`
	// The action for Patch Manager to take on patches included in the `rejectedPatches` list.
	// Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
	RejectedPatchesAction pulumix.Output[string] `pulumi:"rejectedPatchesAction"`
	// Configuration block with alternate sources for patches.
	// Applies to Linux instances only.
	// See `source` below.
	Sources pulumix.GArrayOutput[PatchBaselineSource, PatchBaselineSourceOutput] `pulumi:"sources"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewPatchBaseline registers a new resource with the given unique name, arguments, and options.
func NewPatchBaseline(ctx *pulumi.Context,
	name string, args *PatchBaselineArgs, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	if args == nil {
		args = &PatchBaselineArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PatchBaseline
	err := ctx.RegisterResource("aws:ssm/patchBaseline:PatchBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPatchBaseline gets an existing PatchBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPatchBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PatchBaselineState, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	var resource PatchBaseline
	err := ctx.ReadResource("aws:ssm/patchBaseline:PatchBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PatchBaseline resources.
type patchBaselineState struct {
	// A set of rules used to include patches in the baseline.
	// Up to 10 approval rules can be specified.
	// See `approvalRule` below.
	ApprovalRules []PatchBaselineApprovalRule `pulumi:"approvalRules"`
	// A list of explicitly approved patches for the baseline.
	// Cannot be specified with `approvalRule`.
	ApprovedPatches []string `pulumi:"approvedPatches"`
	// The compliance level for approved patches.
	// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ApprovedPatchesComplianceLevel *string `pulumi:"approvedPatchesComplianceLevel"`
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	// Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity *bool `pulumi:"approvedPatchesEnableNonSecurity"`
	// The ARN of the patch baseline.
	Arn *string `pulumi:"arn"`
	// The description of the patch baseline.
	Description *string `pulumi:"description"`
	// A set of global filters used to exclude patches from the baseline.
	// Up to 4 global filters can be specified using Key/Value pairs.
	// Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
	GlobalFilters []PatchBaselineGlobalFilter `pulumi:"globalFilters"`
	// The name of the patch baseline.
	Name *string `pulumi:"name"`
	// The operating system the patch baseline applies to.
	// Valid values are
	// `ALMA_LINUX`,
	// `AMAZON_LINUX`,
	// `AMAZON_LINUX_2`,
	// `AMAZON_LINUX_2022`,
	// `AMAZON_LINUX_2023`,
	// `CENTOS`,
	// `DEBIAN`,
	// `MACOS`,
	// `ORACLE_LINUX`,
	// `RASPBIAN`,
	// `REDHAT_ENTERPRISE_LINUX`,
	// `ROCKY_LINUX`,
	// `SUSE`,
	// `UBUNTU`, and
	// `WINDOWS`.
	// The default value is `WINDOWS`.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// A list of rejected patches.
	RejectedPatches []string `pulumi:"rejectedPatches"`
	// The action for Patch Manager to take on patches included in the `rejectedPatches` list.
	// Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
	RejectedPatchesAction *string `pulumi:"rejectedPatchesAction"`
	// Configuration block with alternate sources for patches.
	// Applies to Linux instances only.
	// See `source` below.
	Sources []PatchBaselineSource `pulumi:"sources"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type PatchBaselineState struct {
	// A set of rules used to include patches in the baseline.
	// Up to 10 approval rules can be specified.
	// See `approvalRule` below.
	ApprovalRules pulumix.Input[[]*PatchBaselineApprovalRuleArgs]
	// A list of explicitly approved patches for the baseline.
	// Cannot be specified with `approvalRule`.
	ApprovedPatches pulumix.Input[[]string]
	// The compliance level for approved patches.
	// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ApprovedPatchesComplianceLevel pulumix.Input[*string]
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	// Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity pulumix.Input[*bool]
	// The ARN of the patch baseline.
	Arn pulumix.Input[*string]
	// The description of the patch baseline.
	Description pulumix.Input[*string]
	// A set of global filters used to exclude patches from the baseline.
	// Up to 4 global filters can be specified using Key/Value pairs.
	// Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
	GlobalFilters pulumix.Input[[]*PatchBaselineGlobalFilterArgs]
	// The name of the patch baseline.
	Name pulumix.Input[*string]
	// The operating system the patch baseline applies to.
	// Valid values are
	// `ALMA_LINUX`,
	// `AMAZON_LINUX`,
	// `AMAZON_LINUX_2`,
	// `AMAZON_LINUX_2022`,
	// `AMAZON_LINUX_2023`,
	// `CENTOS`,
	// `DEBIAN`,
	// `MACOS`,
	// `ORACLE_LINUX`,
	// `RASPBIAN`,
	// `REDHAT_ENTERPRISE_LINUX`,
	// `ROCKY_LINUX`,
	// `SUSE`,
	// `UBUNTU`, and
	// `WINDOWS`.
	// The default value is `WINDOWS`.
	OperatingSystem pulumix.Input[*string]
	// A list of rejected patches.
	RejectedPatches pulumix.Input[[]string]
	// The action for Patch Manager to take on patches included in the `rejectedPatches` list.
	// Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
	RejectedPatchesAction pulumix.Input[*string]
	// Configuration block with alternate sources for patches.
	// Applies to Linux instances only.
	// See `source` below.
	Sources pulumix.Input[[]*PatchBaselineSourceArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (PatchBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineState)(nil)).Elem()
}

type patchBaselineArgs struct {
	// A set of rules used to include patches in the baseline.
	// Up to 10 approval rules can be specified.
	// See `approvalRule` below.
	ApprovalRules []PatchBaselineApprovalRule `pulumi:"approvalRules"`
	// A list of explicitly approved patches for the baseline.
	// Cannot be specified with `approvalRule`.
	ApprovedPatches []string `pulumi:"approvedPatches"`
	// The compliance level for approved patches.
	// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ApprovedPatchesComplianceLevel *string `pulumi:"approvedPatchesComplianceLevel"`
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	// Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity *bool `pulumi:"approvedPatchesEnableNonSecurity"`
	// The description of the patch baseline.
	Description *string `pulumi:"description"`
	// A set of global filters used to exclude patches from the baseline.
	// Up to 4 global filters can be specified using Key/Value pairs.
	// Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
	GlobalFilters []PatchBaselineGlobalFilter `pulumi:"globalFilters"`
	// The name of the patch baseline.
	Name *string `pulumi:"name"`
	// The operating system the patch baseline applies to.
	// Valid values are
	// `ALMA_LINUX`,
	// `AMAZON_LINUX`,
	// `AMAZON_LINUX_2`,
	// `AMAZON_LINUX_2022`,
	// `AMAZON_LINUX_2023`,
	// `CENTOS`,
	// `DEBIAN`,
	// `MACOS`,
	// `ORACLE_LINUX`,
	// `RASPBIAN`,
	// `REDHAT_ENTERPRISE_LINUX`,
	// `ROCKY_LINUX`,
	// `SUSE`,
	// `UBUNTU`, and
	// `WINDOWS`.
	// The default value is `WINDOWS`.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// A list of rejected patches.
	RejectedPatches []string `pulumi:"rejectedPatches"`
	// The action for Patch Manager to take on patches included in the `rejectedPatches` list.
	// Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
	RejectedPatchesAction *string `pulumi:"rejectedPatchesAction"`
	// Configuration block with alternate sources for patches.
	// Applies to Linux instances only.
	// See `source` below.
	Sources []PatchBaselineSource `pulumi:"sources"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PatchBaseline resource.
type PatchBaselineArgs struct {
	// A set of rules used to include patches in the baseline.
	// Up to 10 approval rules can be specified.
	// See `approvalRule` below.
	ApprovalRules pulumix.Input[[]*PatchBaselineApprovalRuleArgs]
	// A list of explicitly approved patches for the baseline.
	// Cannot be specified with `approvalRule`.
	ApprovedPatches pulumix.Input[[]string]
	// The compliance level for approved patches.
	// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ApprovedPatchesComplianceLevel pulumix.Input[*string]
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	// Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity pulumix.Input[*bool]
	// The description of the patch baseline.
	Description pulumix.Input[*string]
	// A set of global filters used to exclude patches from the baseline.
	// Up to 4 global filters can be specified using Key/Value pairs.
	// Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
	GlobalFilters pulumix.Input[[]*PatchBaselineGlobalFilterArgs]
	// The name of the patch baseline.
	Name pulumix.Input[*string]
	// The operating system the patch baseline applies to.
	// Valid values are
	// `ALMA_LINUX`,
	// `AMAZON_LINUX`,
	// `AMAZON_LINUX_2`,
	// `AMAZON_LINUX_2022`,
	// `AMAZON_LINUX_2023`,
	// `CENTOS`,
	// `DEBIAN`,
	// `MACOS`,
	// `ORACLE_LINUX`,
	// `RASPBIAN`,
	// `REDHAT_ENTERPRISE_LINUX`,
	// `ROCKY_LINUX`,
	// `SUSE`,
	// `UBUNTU`, and
	// `WINDOWS`.
	// The default value is `WINDOWS`.
	OperatingSystem pulumix.Input[*string]
	// A list of rejected patches.
	RejectedPatches pulumix.Input[[]string]
	// The action for Patch Manager to take on patches included in the `rejectedPatches` list.
	// Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
	RejectedPatchesAction pulumix.Input[*string]
	// Configuration block with alternate sources for patches.
	// Applies to Linux instances only.
	// See `source` below.
	Sources pulumix.Input[[]*PatchBaselineSourceArgs]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PatchBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineArgs)(nil)).Elem()
}

type PatchBaselineOutput struct{ *pulumi.OutputState }

func (PatchBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaseline)(nil)).Elem()
}

func (o PatchBaselineOutput) ToPatchBaselineOutput() PatchBaselineOutput {
	return o
}

func (o PatchBaselineOutput) ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput {
	return o
}

func (o PatchBaselineOutput) ToOutput(ctx context.Context) pulumix.Output[PatchBaseline] {
	return pulumix.Output[PatchBaseline]{
		OutputState: o.OutputState,
	}
}

// A set of rules used to include patches in the baseline.
// Up to 10 approval rules can be specified.
// See `approvalRule` below.
func (o PatchBaselineOutput) ApprovalRules() pulumix.GArrayOutput[PatchBaselineApprovalRule, PatchBaselineApprovalRuleOutput] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.GArrayOutput[PatchBaselineApprovalRule, PatchBaselineApprovalRuleOutput] {
		return v.ApprovalRules
	})
	unwrapped := pulumix.Flatten[[]PatchBaselineApprovalRule, pulumix.GArrayOutput[PatchBaselineApprovalRule, PatchBaselineApprovalRuleOutput]](value)
	return pulumix.GArrayOutput[PatchBaselineApprovalRule, PatchBaselineApprovalRuleOutput]{OutputState: unwrapped.OutputState}
}

// A list of explicitly approved patches for the baseline.
// Cannot be specified with `approvalRule`.
func (o PatchBaselineOutput) ApprovedPatches() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.ArrayOutput[string] { return v.ApprovedPatches })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The compliance level for approved patches.
// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`.
// The default value is `UNSPECIFIED`.
func (o PatchBaselineOutput) ApprovedPatchesComplianceLevel() pulumix.Output[*string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[*string] { return v.ApprovedPatchesComplianceLevel })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
// Applies to Linux instances only.
func (o PatchBaselineOutput) ApprovedPatchesEnableNonSecurity() pulumix.Output[*bool] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[*bool] { return v.ApprovedPatchesEnableNonSecurity })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ARN of the patch baseline.
func (o PatchBaselineOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the patch baseline.
func (o PatchBaselineOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A set of global filters used to exclude patches from the baseline.
// Up to 4 global filters can be specified using Key/Value pairs.
// Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
func (o PatchBaselineOutput) GlobalFilters() pulumix.GArrayOutput[PatchBaselineGlobalFilter, PatchBaselineGlobalFilterOutput] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.GArrayOutput[PatchBaselineGlobalFilter, PatchBaselineGlobalFilterOutput] {
		return v.GlobalFilters
	})
	unwrapped := pulumix.Flatten[[]PatchBaselineGlobalFilter, pulumix.GArrayOutput[PatchBaselineGlobalFilter, PatchBaselineGlobalFilterOutput]](value)
	return pulumix.GArrayOutput[PatchBaselineGlobalFilter, PatchBaselineGlobalFilterOutput]{OutputState: unwrapped.OutputState}
}

// The name of the patch baseline.
func (o PatchBaselineOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The operating system the patch baseline applies to.
// Valid values are
// `ALMA_LINUX`,
// `AMAZON_LINUX`,
// `AMAZON_LINUX_2`,
// `AMAZON_LINUX_2022`,
// `AMAZON_LINUX_2023`,
// `CENTOS`,
// `DEBIAN`,
// `MACOS`,
// `ORACLE_LINUX`,
// `RASPBIAN`,
// `REDHAT_ENTERPRISE_LINUX`,
// `ROCKY_LINUX`,
// `SUSE`,
// `UBUNTU`, and
// `WINDOWS`.
// The default value is `WINDOWS`.
func (o PatchBaselineOutput) OperatingSystem() pulumix.Output[*string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[*string] { return v.OperatingSystem })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of rejected patches.
func (o PatchBaselineOutput) RejectedPatches() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.ArrayOutput[string] { return v.RejectedPatches })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The action for Patch Manager to take on patches included in the `rejectedPatches` list.
// Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
func (o PatchBaselineOutput) RejectedPatchesAction() pulumix.Output[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.Output[string] { return v.RejectedPatchesAction })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block with alternate sources for patches.
// Applies to Linux instances only.
// See `source` below.
func (o PatchBaselineOutput) Sources() pulumix.GArrayOutput[PatchBaselineSource, PatchBaselineSourceOutput] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.GArrayOutput[PatchBaselineSource, PatchBaselineSourceOutput] {
		return v.Sources
	})
	unwrapped := pulumix.Flatten[[]PatchBaselineSource, pulumix.GArrayOutput[PatchBaselineSource, PatchBaselineSourceOutput]](value)
	return pulumix.GArrayOutput[PatchBaselineSource, PatchBaselineSourceOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PatchBaselineOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PatchBaselineOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[PatchBaseline](o, func(v PatchBaseline) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PatchBaselineOutput{})
}
