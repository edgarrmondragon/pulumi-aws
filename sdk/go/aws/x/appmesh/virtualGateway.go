// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS App Mesh virtual gateway resource.
type VirtualGateway struct {
	pulumi.CustomResourceState

	// ARN of the virtual gateway.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Creation date of the virtual gateway.
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// Last update date of the virtual gateway.
	LastUpdatedDate pulumix.Output[string] `pulumi:"lastUpdatedDate"`
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName pulumix.Output[string] `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Output[string] `pulumi:"meshOwner"`
	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner pulumix.Output[string] `pulumi:"resourceOwner"`
	// Virtual gateway specification to apply.
	Spec pulumix.GPtrOutput[VirtualGatewaySpec, VirtualGatewaySpecOutput] `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVirtualGateway registers a new resource with the given unique name, arguments, and options.
func NewVirtualGateway(ctx *pulumi.Context,
	name string, args *VirtualGatewayArgs, opts ...pulumi.ResourceOption) (*VirtualGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MeshName == nil {
		return nil, errors.New("invalid value for required argument 'MeshName'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualGateway
	err := ctx.RegisterResource("aws:appmesh/virtualGateway:VirtualGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualGateway gets an existing VirtualGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualGatewayState, opts ...pulumi.ResourceOption) (*VirtualGateway, error) {
	var resource VirtualGateway
	err := ctx.ReadResource("aws:appmesh/virtualGateway:VirtualGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualGateway resources.
type virtualGatewayState struct {
	// ARN of the virtual gateway.
	Arn *string `pulumi:"arn"`
	// Creation date of the virtual gateway.
	CreatedDate *string `pulumi:"createdDate"`
	// Last update date of the virtual gateway.
	LastUpdatedDate *string `pulumi:"lastUpdatedDate"`
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName *string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name *string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner *string `pulumi:"resourceOwner"`
	// Virtual gateway specification to apply.
	Spec *VirtualGatewaySpec `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VirtualGatewayState struct {
	// ARN of the virtual gateway.
	Arn pulumix.Input[*string]
	// Creation date of the virtual gateway.
	CreatedDate pulumix.Input[*string]
	// Last update date of the virtual gateway.
	LastUpdatedDate pulumix.Input[*string]
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName pulumix.Input[*string]
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Input[*string]
	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name pulumix.Input[*string]
	// Resource owner's AWS account ID.
	ResourceOwner pulumix.Input[*string]
	// Virtual gateway specification to apply.
	Spec pulumix.Input[*VirtualGatewaySpecArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VirtualGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualGatewayState)(nil)).Elem()
}

type virtualGatewayArgs struct {
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name *string `pulumi:"name"`
	// Virtual gateway specification to apply.
	Spec VirtualGatewaySpec `pulumi:"spec"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualGateway resource.
type VirtualGatewayArgs struct {
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	MeshName pulumix.Input[string]
	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	MeshOwner pulumix.Input[*string]
	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	Name pulumix.Input[*string]
	// Virtual gateway specification to apply.
	Spec pulumix.Input[*VirtualGatewaySpecArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VirtualGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualGatewayArgs)(nil)).Elem()
}

type VirtualGatewayOutput struct{ *pulumi.OutputState }

func (VirtualGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualGateway)(nil)).Elem()
}

func (o VirtualGatewayOutput) ToVirtualGatewayOutput() VirtualGatewayOutput {
	return o
}

func (o VirtualGatewayOutput) ToVirtualGatewayOutputWithContext(ctx context.Context) VirtualGatewayOutput {
	return o
}

func (o VirtualGatewayOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualGateway] {
	return pulumix.Output[VirtualGateway]{
		OutputState: o.OutputState,
	}
}

// ARN of the virtual gateway.
func (o VirtualGatewayOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creation date of the virtual gateway.
func (o VirtualGatewayOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Last update date of the virtual gateway.
func (o VirtualGatewayOutput) LastUpdatedDate() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.LastUpdatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
func (o VirtualGatewayOutput) MeshName() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.MeshName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
func (o VirtualGatewayOutput) MeshOwner() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.MeshOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
func (o VirtualGatewayOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Resource owner's AWS account ID.
func (o VirtualGatewayOutput) ResourceOwner() pulumix.Output[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.Output[string] { return v.ResourceOwner })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Virtual gateway specification to apply.
func (o VirtualGatewayOutput) Spec() pulumix.GPtrOutput[VirtualGatewaySpec, VirtualGatewaySpecOutput] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.GPtrOutput[VirtualGatewaySpec, VirtualGatewaySpecOutput] { return v.Spec })
	unwrapped := pulumix.Flatten[*VirtualGatewaySpec, pulumix.GPtrOutput[VirtualGatewaySpec, VirtualGatewaySpecOutput]](value)
	return pulumix.GPtrOutput[VirtualGatewaySpec, VirtualGatewaySpecOutput]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VirtualGatewayOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VirtualGatewayOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualGateway](o, func(v VirtualGateway) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VirtualGatewayOutput{})
}
