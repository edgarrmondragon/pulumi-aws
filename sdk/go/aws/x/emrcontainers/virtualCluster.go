// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrcontainers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an EMR Containers (EMR on EKS) Virtual Cluster.
type VirtualCluster struct {
	pulumi.CustomResourceState

	// ARN of the cluster.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block for the container provider associated with your cluster.
	ContainerProvider pulumix.GPtrOutput[VirtualClusterContainerProvider, VirtualClusterContainerProviderOutput] `pulumi:"containerProvider"`
	// Name of the virtual cluster.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVirtualCluster registers a new resource with the given unique name, arguments, and options.
func NewVirtualCluster(ctx *pulumi.Context,
	name string, args *VirtualClusterArgs, opts ...pulumi.ResourceOption) (*VirtualCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerProvider == nil {
		return nil, errors.New("invalid value for required argument 'ContainerProvider'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualCluster
	err := ctx.RegisterResource("aws:emrcontainers/virtualCluster:VirtualCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualCluster gets an existing VirtualCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualClusterState, opts ...pulumi.ResourceOption) (*VirtualCluster, error) {
	var resource VirtualCluster
	err := ctx.ReadResource("aws:emrcontainers/virtualCluster:VirtualCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualCluster resources.
type virtualClusterState struct {
	// ARN of the cluster.
	Arn *string `pulumi:"arn"`
	// Configuration block for the container provider associated with your cluster.
	ContainerProvider *VirtualClusterContainerProvider `pulumi:"containerProvider"`
	// Name of the virtual cluster.
	Name *string `pulumi:"name"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VirtualClusterState struct {
	// ARN of the cluster.
	Arn pulumix.Input[*string]
	// Configuration block for the container provider associated with your cluster.
	ContainerProvider pulumix.Input[*VirtualClusterContainerProviderArgs]
	// Name of the virtual cluster.
	Name pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (VirtualClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualClusterState)(nil)).Elem()
}

type virtualClusterArgs struct {
	// Configuration block for the container provider associated with your cluster.
	ContainerProvider VirtualClusterContainerProvider `pulumi:"containerProvider"`
	// Name of the virtual cluster.
	Name *string `pulumi:"name"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualCluster resource.
type VirtualClusterArgs struct {
	// Configuration block for the container provider associated with your cluster.
	ContainerProvider pulumix.Input[*VirtualClusterContainerProviderArgs]
	// Name of the virtual cluster.
	Name pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
}

func (VirtualClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualClusterArgs)(nil)).Elem()
}

type VirtualClusterOutput struct{ *pulumi.OutputState }

func (VirtualClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualCluster)(nil)).Elem()
}

func (o VirtualClusterOutput) ToVirtualClusterOutput() VirtualClusterOutput {
	return o
}

func (o VirtualClusterOutput) ToVirtualClusterOutputWithContext(ctx context.Context) VirtualClusterOutput {
	return o
}

func (o VirtualClusterOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualCluster] {
	return pulumix.Output[VirtualCluster]{
		OutputState: o.OutputState,
	}
}

// ARN of the cluster.
func (o VirtualClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VirtualCluster](o, func(v VirtualCluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the container provider associated with your cluster.
func (o VirtualClusterOutput) ContainerProvider() pulumix.GPtrOutput[VirtualClusterContainerProvider, VirtualClusterContainerProviderOutput] {
	value := pulumix.Apply[VirtualCluster](o, func(v VirtualCluster) pulumix.GPtrOutput[VirtualClusterContainerProvider, VirtualClusterContainerProviderOutput] {
		return v.ContainerProvider
	})
	unwrapped := pulumix.Flatten[*VirtualClusterContainerProvider, pulumix.GPtrOutput[VirtualClusterContainerProvider, VirtualClusterContainerProviderOutput]](value)
	return pulumix.GPtrOutput[VirtualClusterContainerProvider, VirtualClusterContainerProviderOutput]{OutputState: unwrapped.OutputState}
}

// Name of the virtual cluster.
func (o VirtualClusterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[VirtualCluster](o, func(v VirtualCluster) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o VirtualClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualCluster](o, func(v VirtualCluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VirtualClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VirtualCluster](o, func(v VirtualCluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VirtualClusterOutput{})
}
