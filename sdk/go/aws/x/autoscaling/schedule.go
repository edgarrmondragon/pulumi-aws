// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AutoScaling Schedule resource.
type Schedule struct {
	pulumi.CustomResourceState

	// ARN assigned by AWS to the autoscaling schedule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the Auto Scaling group.
	AutoscalingGroupName pulumix.Output[string] `pulumi:"autoscalingGroupName"`
	// The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don't want to change the desired capacity at the scheduled time. Defaults to `0`.
	DesiredCapacity pulumix.Output[int] `pulumi:"desiredCapacity"`
	// The date and time for the recurring schedule to end, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	EndTime pulumix.Output[string] `pulumi:"endTime"`
	// The maximum size of the Auto Scaling group. Set to `-1` if you don't want to change the maximum size at the scheduled time. Defaults to `0`.
	MaxSize pulumix.Output[int] `pulumi:"maxSize"`
	// The minimum size of the Auto Scaling group. Set to `-1` if you don't want to change the minimum size at the scheduled time. Defaults to `0`.
	MinSize pulumix.Output[int] `pulumi:"minSize"`
	// The recurring schedule for this action specified using the Unix cron syntax format.
	Recurrence pulumix.Output[string] `pulumi:"recurrence"`
	// The name of this scaling action.
	//
	// The following arguments are optional:
	ScheduledActionName pulumix.Output[string] `pulumi:"scheduledActionName"`
	// The date and time for the recurring schedule to start, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	StartTime pulumix.Output[string] `pulumi:"startTime"`
	// Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
	//
	// > **NOTE:** When `startTime` and `endTime` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
	TimeZone pulumix.Output[string] `pulumi:"timeZone"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoscalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoscalingGroupName'")
	}
	if args.ScheduledActionName == nil {
		return nil, errors.New("invalid value for required argument 'ScheduledActionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("aws:autoscaling/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("aws:autoscaling/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	// ARN assigned by AWS to the autoscaling schedule.
	Arn *string `pulumi:"arn"`
	// The name of the Auto Scaling group.
	AutoscalingGroupName *string `pulumi:"autoscalingGroupName"`
	// The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don't want to change the desired capacity at the scheduled time. Defaults to `0`.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The date and time for the recurring schedule to end, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	EndTime *string `pulumi:"endTime"`
	// The maximum size of the Auto Scaling group. Set to `-1` if you don't want to change the maximum size at the scheduled time. Defaults to `0`.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the Auto Scaling group. Set to `-1` if you don't want to change the minimum size at the scheduled time. Defaults to `0`.
	MinSize *int `pulumi:"minSize"`
	// The recurring schedule for this action specified using the Unix cron syntax format.
	Recurrence *string `pulumi:"recurrence"`
	// The name of this scaling action.
	//
	// The following arguments are optional:
	ScheduledActionName *string `pulumi:"scheduledActionName"`
	// The date and time for the recurring schedule to start, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	StartTime *string `pulumi:"startTime"`
	// Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
	//
	// > **NOTE:** When `startTime` and `endTime` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
	TimeZone *string `pulumi:"timeZone"`
}

type ScheduleState struct {
	// ARN assigned by AWS to the autoscaling schedule.
	Arn pulumix.Input[*string]
	// The name of the Auto Scaling group.
	AutoscalingGroupName pulumix.Input[*string]
	// The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don't want to change the desired capacity at the scheduled time. Defaults to `0`.
	DesiredCapacity pulumix.Input[*int]
	// The date and time for the recurring schedule to end, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	EndTime pulumix.Input[*string]
	// The maximum size of the Auto Scaling group. Set to `-1` if you don't want to change the maximum size at the scheduled time. Defaults to `0`.
	MaxSize pulumix.Input[*int]
	// The minimum size of the Auto Scaling group. Set to `-1` if you don't want to change the minimum size at the scheduled time. Defaults to `0`.
	MinSize pulumix.Input[*int]
	// The recurring schedule for this action specified using the Unix cron syntax format.
	Recurrence pulumix.Input[*string]
	// The name of this scaling action.
	//
	// The following arguments are optional:
	ScheduledActionName pulumix.Input[*string]
	// The date and time for the recurring schedule to start, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	StartTime pulumix.Input[*string]
	// Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
	//
	// > **NOTE:** When `startTime` and `endTime` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
	TimeZone pulumix.Input[*string]
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// The name of the Auto Scaling group.
	AutoscalingGroupName string `pulumi:"autoscalingGroupName"`
	// The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don't want to change the desired capacity at the scheduled time. Defaults to `0`.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The date and time for the recurring schedule to end, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	EndTime *string `pulumi:"endTime"`
	// The maximum size of the Auto Scaling group. Set to `-1` if you don't want to change the maximum size at the scheduled time. Defaults to `0`.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the Auto Scaling group. Set to `-1` if you don't want to change the minimum size at the scheduled time. Defaults to `0`.
	MinSize *int `pulumi:"minSize"`
	// The recurring schedule for this action specified using the Unix cron syntax format.
	Recurrence *string `pulumi:"recurrence"`
	// The name of this scaling action.
	//
	// The following arguments are optional:
	ScheduledActionName string `pulumi:"scheduledActionName"`
	// The date and time for the recurring schedule to start, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	StartTime *string `pulumi:"startTime"`
	// Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
	//
	// > **NOTE:** When `startTime` and `endTime` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// The name of the Auto Scaling group.
	AutoscalingGroupName pulumix.Input[string]
	// The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don't want to change the desired capacity at the scheduled time. Defaults to `0`.
	DesiredCapacity pulumix.Input[*int]
	// The date and time for the recurring schedule to end, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	EndTime pulumix.Input[*string]
	// The maximum size of the Auto Scaling group. Set to `-1` if you don't want to change the maximum size at the scheduled time. Defaults to `0`.
	MaxSize pulumix.Input[*int]
	// The minimum size of the Auto Scaling group. Set to `-1` if you don't want to change the minimum size at the scheduled time. Defaults to `0`.
	MinSize pulumix.Input[*int]
	// The recurring schedule for this action specified using the Unix cron syntax format.
	Recurrence pulumix.Input[*string]
	// The name of this scaling action.
	//
	// The following arguments are optional:
	ScheduledActionName pulumix.Input[string]
	// The date and time for the recurring schedule to start, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
	StartTime pulumix.Input[*string]
	// Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
	//
	// > **NOTE:** When `startTime` and `endTime` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
	TimeZone pulumix.Input[*string]
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[Schedule] {
	return pulumix.Output[Schedule]{
		OutputState: o.OutputState,
	}
}

// ARN assigned by AWS to the autoscaling schedule.
func (o ScheduleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Auto Scaling group.
func (o ScheduleOutput) AutoscalingGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.AutoscalingGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. Set to `-1` if you don't want to change the desired capacity at the scheduled time. Defaults to `0`.
func (o ScheduleOutput) DesiredCapacity() pulumix.Output[int] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[int] { return v.DesiredCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The date and time for the recurring schedule to end, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
func (o ScheduleOutput) EndTime() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.EndTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum size of the Auto Scaling group. Set to `-1` if you don't want to change the maximum size at the scheduled time. Defaults to `0`.
func (o ScheduleOutput) MaxSize() pulumix.Output[int] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[int] { return v.MaxSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The minimum size of the Auto Scaling group. Set to `-1` if you don't want to change the minimum size at the scheduled time. Defaults to `0`.
func (o ScheduleOutput) MinSize() pulumix.Output[int] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[int] { return v.MinSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The recurring schedule for this action specified using the Unix cron syntax format.
func (o ScheduleOutput) Recurrence() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.Recurrence })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of this scaling action.
//
// The following arguments are optional:
func (o ScheduleOutput) ScheduledActionName() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.ScheduledActionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time for the recurring schedule to start, in UTC with the format `"YYYY-MM-DDThh:mm:ssZ"` (e.g. `"2021-06-01T00:00:00Z"`).
func (o ScheduleOutput) StartTime() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.StartTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the time zone for a cron expression. Valid values are the canonical names of the IANA time zones (such as `Etc/GMT+9` or `Pacific/Tahiti`).
//
// > **NOTE:** When `startTime` and `endTime` are specified with `recurrence` , they form the boundaries of when the recurring action will start and stop.
func (o ScheduleOutput) TimeZone() pulumix.Output[string] {
	value := pulumix.Apply[Schedule](o, func(v Schedule) pulumix.Output[string] { return v.TimeZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ScheduleOutput{})
}
