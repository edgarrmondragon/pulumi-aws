// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages an AWS IoT Authorizer.
type Authorizer struct {
	pulumi.CustomResourceState

	// The ARN of the authorizer.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn pulumix.Output[string] `pulumi:"authorizerFunctionArn"`
	// Specifies whether the HTTP caching is enabled or not. Default: `false`.
	EnableCachingForHttp pulumix.Output[*bool] `pulumi:"enableCachingForHttp"`
	// The name of the authorizer.
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
	SigningDisabled pulumix.Output[*bool] `pulumi:"signingDisabled"`
	// The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
	Status pulumix.Output[*string] `pulumi:"status"`
	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName pulumix.Output[*string] `pulumi:"tokenKeyName"`
	// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
	TokenSigningPublicKeys pulumix.MapOutput[string] `pulumi:"tokenSigningPublicKeys"`
}

// NewAuthorizer registers a new resource with the given unique name, arguments, and options.
func NewAuthorizer(ctx *pulumi.Context,
	name string, args *AuthorizerArgs, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizerFunctionArn == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizerFunctionArn'")
	}
	if args.TokenSigningPublicKeys != nil {
		untypedSecretValue := pulumi.ToSecret(args.TokenSigningPublicKeys.ToOutput(ctx.Context()).Untyped())
		args.TokenSigningPublicKeys = pulumix.MustConvertTyped[map[string]string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tokenSigningPublicKeys",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authorizer
	err := ctx.RegisterResource("aws:iot/authorizer:Authorizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizer gets an existing Authorizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizerState, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	var resource Authorizer
	err := ctx.ReadResource("aws:iot/authorizer:Authorizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authorizer resources.
type authorizerState struct {
	// The ARN of the authorizer.
	Arn *string `pulumi:"arn"`
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn *string `pulumi:"authorizerFunctionArn"`
	// Specifies whether the HTTP caching is enabled or not. Default: `false`.
	EnableCachingForHttp *bool `pulumi:"enableCachingForHttp"`
	// The name of the authorizer.
	Name *string `pulumi:"name"`
	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
	SigningDisabled *bool `pulumi:"signingDisabled"`
	// The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
	Status *string `pulumi:"status"`
	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName *string `pulumi:"tokenKeyName"`
	// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
	TokenSigningPublicKeys map[string]string `pulumi:"tokenSigningPublicKeys"`
}

type AuthorizerState struct {
	// The ARN of the authorizer.
	Arn pulumix.Input[*string]
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn pulumix.Input[*string]
	// Specifies whether the HTTP caching is enabled or not. Default: `false`.
	EnableCachingForHttp pulumix.Input[*bool]
	// The name of the authorizer.
	Name pulumix.Input[*string]
	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
	SigningDisabled pulumix.Input[*bool]
	// The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
	Status pulumix.Input[*string]
	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName pulumix.Input[*string]
	// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
	TokenSigningPublicKeys pulumix.Input[map[string]string]
}

func (AuthorizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerState)(nil)).Elem()
}

type authorizerArgs struct {
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn string `pulumi:"authorizerFunctionArn"`
	// Specifies whether the HTTP caching is enabled or not. Default: `false`.
	EnableCachingForHttp *bool `pulumi:"enableCachingForHttp"`
	// The name of the authorizer.
	Name *string `pulumi:"name"`
	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
	SigningDisabled *bool `pulumi:"signingDisabled"`
	// The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
	Status *string `pulumi:"status"`
	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName *string `pulumi:"tokenKeyName"`
	// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
	TokenSigningPublicKeys map[string]string `pulumi:"tokenSigningPublicKeys"`
}

// The set of arguments for constructing a Authorizer resource.
type AuthorizerArgs struct {
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn pulumix.Input[string]
	// Specifies whether the HTTP caching is enabled or not. Default: `false`.
	EnableCachingForHttp pulumix.Input[*bool]
	// The name of the authorizer.
	Name pulumix.Input[*string]
	// Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
	SigningDisabled pulumix.Input[*bool]
	// The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
	Status pulumix.Input[*string]
	// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
	TokenKeyName pulumix.Input[*string]
	// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
	TokenSigningPublicKeys pulumix.Input[map[string]string]
}

func (AuthorizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerArgs)(nil)).Elem()
}

type AuthorizerOutput struct{ *pulumi.OutputState }

func (AuthorizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authorizer)(nil)).Elem()
}

func (o AuthorizerOutput) ToAuthorizerOutput() AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ToOutput(ctx context.Context) pulumix.Output[Authorizer] {
	return pulumix.Output[Authorizer]{
		OutputState: o.OutputState,
	}
}

// The ARN of the authorizer.
func (o AuthorizerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the authorizer's Lambda function.
func (o AuthorizerOutput) AuthorizerFunctionArn() pulumix.Output[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[string] { return v.AuthorizerFunctionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether the HTTP caching is enabled or not. Default: `false`.
func (o AuthorizerOutput) EnableCachingForHttp() pulumix.Output[*bool] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*bool] { return v.EnableCachingForHttp })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the authorizer.
func (o AuthorizerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
func (o AuthorizerOutput) SigningDisabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*bool] { return v.SigningDisabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The status of Authorizer request at creation. Valid values: `ACTIVE`, `INACTIVE`. Default: `ACTIVE`.
func (o AuthorizerOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
func (o AuthorizerOutput) TokenKeyName() pulumix.Output[*string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*string] { return v.TokenKeyName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.
func (o AuthorizerOutput) TokenSigningPublicKeys() pulumix.MapOutput[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.MapOutput[string] { return v.TokenSigningPublicKeys })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AuthorizerOutput{})
}
