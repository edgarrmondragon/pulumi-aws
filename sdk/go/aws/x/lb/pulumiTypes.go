// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ListenerDefaultAction struct {
	// Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
	AuthenticateCognito *ListenerDefaultActionAuthenticateCognito `pulumi:"authenticateCognito"`
	// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
	AuthenticateOidc *ListenerDefaultActionAuthenticateOidc `pulumi:"authenticateOidc"`
	// Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
	FixedResponse *ListenerDefaultActionFixedResponse `pulumi:"fixedResponse"`
	// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`. Detailed below.
	Forward *ListenerDefaultActionForward `pulumi:"forward"`
	// Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
	Order *int `pulumi:"order"`
	// Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
	Redirect *ListenerDefaultActionRedirect `pulumi:"redirect"`
	// ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
	// Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
}

type ListenerDefaultActionArgs struct {
	// Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
	AuthenticateCognito pulumix.Input[*ListenerDefaultActionAuthenticateCognitoArgs] `pulumi:"authenticateCognito"`
	// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
	AuthenticateOidc pulumix.Input[*ListenerDefaultActionAuthenticateOidcArgs] `pulumi:"authenticateOidc"`
	// Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
	FixedResponse pulumix.Input[*ListenerDefaultActionFixedResponseArgs] `pulumi:"fixedResponse"`
	// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`. Detailed below.
	Forward pulumix.Input[*ListenerDefaultActionForwardArgs] `pulumi:"forward"`
	// Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
	Order pulumix.Input[*int] `pulumi:"order"`
	// Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
	Redirect pulumix.Input[*ListenerDefaultActionRedirectArgs] `pulumi:"redirect"`
	// ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
	TargetGroupArn pulumix.Input[*string] `pulumi:"targetGroupArn"`
	// Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
	//
	// The following arguments are optional:
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ListenerDefaultActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultAction)(nil)).Elem()
}

func (i ListenerDefaultActionArgs) ToListenerDefaultActionOutput() ListenerDefaultActionOutput {
	return i.ToListenerDefaultActionOutputWithContext(context.Background())
}

func (i ListenerDefaultActionArgs) ToListenerDefaultActionOutputWithContext(ctx context.Context) ListenerDefaultActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionOutput)
}

func (i *ListenerDefaultActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultAction)(nil)).Elem()
}

func (o ListenerDefaultActionOutput) ToListenerDefaultActionOutput() ListenerDefaultActionOutput {
	return o
}

func (o ListenerDefaultActionOutput) ToListenerDefaultActionOutputWithContext(ctx context.Context) ListenerDefaultActionOutput {
	return o
}

func (o ListenerDefaultActionOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultAction] {
	return pulumix.Output[ListenerDefaultAction]{
		OutputState: o.OutputState,
	}
}

// Configuration block for using Amazon Cognito to authenticate users. Specify only when `type` is `authenticate-cognito`. Detailed below.
func (o ListenerDefaultActionOutput) AuthenticateCognito() pulumix.GPtrOutput[ListenerDefaultActionAuthenticateCognito, ListenerDefaultActionAuthenticateCognitoOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *ListenerDefaultActionAuthenticateCognito { return v.AuthenticateCognito })
	return pulumix.GPtrOutput[ListenerDefaultActionAuthenticateCognito, ListenerDefaultActionAuthenticateCognitoOutput]{OutputState: value.OutputState}
}

// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when `type` is `authenticate-oidc`. Detailed below.
func (o ListenerDefaultActionOutput) AuthenticateOidc() pulumix.GPtrOutput[ListenerDefaultActionAuthenticateOidc, ListenerDefaultActionAuthenticateOidcOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *ListenerDefaultActionAuthenticateOidc { return v.AuthenticateOidc })
	return pulumix.GPtrOutput[ListenerDefaultActionAuthenticateOidc, ListenerDefaultActionAuthenticateOidcOutput]{OutputState: value.OutputState}
}

// Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
func (o ListenerDefaultActionOutput) FixedResponse() pulumix.GPtrOutput[ListenerDefaultActionFixedResponse, ListenerDefaultActionFixedResponseOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *ListenerDefaultActionFixedResponse { return v.FixedResponse })
	return pulumix.GPtrOutput[ListenerDefaultActionFixedResponse, ListenerDefaultActionFixedResponseOutput]{OutputState: value.OutputState}
}

// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`. Detailed below.
func (o ListenerDefaultActionOutput) Forward() pulumix.GPtrOutput[ListenerDefaultActionForward, ListenerDefaultActionForwardOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *ListenerDefaultActionForward { return v.Forward })
	return pulumix.GPtrOutput[ListenerDefaultActionForward, ListenerDefaultActionForwardOutput]{OutputState: value.OutputState}
}

// Order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. Valid values are between `1` and `50000`.
func (o ListenerDefaultActionOutput) Order() pulumix.Output[*int] {
	return pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *int { return v.Order })
}

// Configuration block for creating a redirect action. Required if `type` is `redirect`. Detailed below.
func (o ListenerDefaultActionOutput) Redirect() pulumix.GPtrOutput[ListenerDefaultActionRedirect, ListenerDefaultActionRedirectOutput] {
	value := pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *ListenerDefaultActionRedirect { return v.Redirect })
	return pulumix.GPtrOutput[ListenerDefaultActionRedirect, ListenerDefaultActionRedirectOutput]{OutputState: value.OutputState}
}

// ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
func (o ListenerDefaultActionOutput) TargetGroupArn() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) *string { return v.TargetGroupArn })
}

// Type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
//
// The following arguments are optional:
func (o ListenerDefaultActionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultAction](o, func(v ListenerDefaultAction) string { return v.Type })
}

type ListenerDefaultActionAuthenticateCognito struct {
	// Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.
	AuthenticationRequestExtraParams map[string]string `pulumi:"authenticationRequestExtraParams"`
	// Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
	OnUnauthenticatedRequest *string `pulumi:"onUnauthenticatedRequest"`
	// Set of user claims to be requested from the IdP.
	Scope *string `pulumi:"scope"`
	// Name of the cookie used to maintain session information.
	SessionCookieName *string `pulumi:"sessionCookieName"`
	// Maximum duration of the authentication session, in seconds.
	SessionTimeout *int `pulumi:"sessionTimeout"`
	// ARN of the Cognito user pool.
	UserPoolArn string `pulumi:"userPoolArn"`
	// ID of the Cognito user pool client.
	UserPoolClientId string `pulumi:"userPoolClientId"`
	// Domain prefix or fully-qualified domain name of the Cognito user pool.
	//
	// The following arguments are optional:
	UserPoolDomain string `pulumi:"userPoolDomain"`
}

type ListenerDefaultActionAuthenticateCognitoArgs struct {
	// Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.
	AuthenticationRequestExtraParams pulumix.Input[map[string]string] `pulumi:"authenticationRequestExtraParams"`
	// Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
	OnUnauthenticatedRequest pulumix.Input[*string] `pulumi:"onUnauthenticatedRequest"`
	// Set of user claims to be requested from the IdP.
	Scope pulumix.Input[*string] `pulumi:"scope"`
	// Name of the cookie used to maintain session information.
	SessionCookieName pulumix.Input[*string] `pulumi:"sessionCookieName"`
	// Maximum duration of the authentication session, in seconds.
	SessionTimeout pulumix.Input[*int] `pulumi:"sessionTimeout"`
	// ARN of the Cognito user pool.
	UserPoolArn pulumix.Input[string] `pulumi:"userPoolArn"`
	// ID of the Cognito user pool client.
	UserPoolClientId pulumix.Input[string] `pulumi:"userPoolClientId"`
	// Domain prefix or fully-qualified domain name of the Cognito user pool.
	//
	// The following arguments are optional:
	UserPoolDomain pulumix.Input[string] `pulumi:"userPoolDomain"`
}

func (ListenerDefaultActionAuthenticateCognitoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionAuthenticateCognito)(nil)).Elem()
}

func (i ListenerDefaultActionAuthenticateCognitoArgs) ToListenerDefaultActionAuthenticateCognitoOutput() ListenerDefaultActionAuthenticateCognitoOutput {
	return i.ToListenerDefaultActionAuthenticateCognitoOutputWithContext(context.Background())
}

func (i ListenerDefaultActionAuthenticateCognitoArgs) ToListenerDefaultActionAuthenticateCognitoOutputWithContext(ctx context.Context) ListenerDefaultActionAuthenticateCognitoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionAuthenticateCognitoOutput)
}

func (i *ListenerDefaultActionAuthenticateCognitoArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionAuthenticateCognitoArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionAuthenticateCognitoOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionAuthenticateCognitoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionAuthenticateCognito)(nil)).Elem()
}

func (o ListenerDefaultActionAuthenticateCognitoOutput) ToListenerDefaultActionAuthenticateCognitoOutput() ListenerDefaultActionAuthenticateCognitoOutput {
	return o
}

func (o ListenerDefaultActionAuthenticateCognitoOutput) ToListenerDefaultActionAuthenticateCognitoOutputWithContext(ctx context.Context) ListenerDefaultActionAuthenticateCognitoOutput {
	return o
}

func (o ListenerDefaultActionAuthenticateCognitoOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionAuthenticateCognito] {
	return pulumix.Output[ListenerDefaultActionAuthenticateCognito]{
		OutputState: o.OutputState,
	}
}

// Query parameters to include in the redirect request to the authorization endpoint. Max: 10. Detailed below.
func (o ListenerDefaultActionAuthenticateCognitoOutput) AuthenticationRequestExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) map[string]string {
		return v.AuthenticationRequestExtraParams
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Behavior if the user is not authenticated. Valid values are `deny`, `allow` and `authenticate`.
func (o ListenerDefaultActionAuthenticateCognitoOutput) OnUnauthenticatedRequest() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) *string { return v.OnUnauthenticatedRequest })
}

// Set of user claims to be requested from the IdP.
func (o ListenerDefaultActionAuthenticateCognitoOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) *string { return v.Scope })
}

// Name of the cookie used to maintain session information.
func (o ListenerDefaultActionAuthenticateCognitoOutput) SessionCookieName() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) *string { return v.SessionCookieName })
}

// Maximum duration of the authentication session, in seconds.
func (o ListenerDefaultActionAuthenticateCognitoOutput) SessionTimeout() pulumix.Output[*int] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) *int { return v.SessionTimeout })
}

// ARN of the Cognito user pool.
func (o ListenerDefaultActionAuthenticateCognitoOutput) UserPoolArn() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) string { return v.UserPoolArn })
}

// ID of the Cognito user pool client.
func (o ListenerDefaultActionAuthenticateCognitoOutput) UserPoolClientId() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) string { return v.UserPoolClientId })
}

// Domain prefix or fully-qualified domain name of the Cognito user pool.
//
// The following arguments are optional:
func (o ListenerDefaultActionAuthenticateCognitoOutput) UserPoolDomain() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateCognito](o, func(v ListenerDefaultActionAuthenticateCognito) string { return v.UserPoolDomain })
}

type ListenerDefaultActionAuthenticateOidc struct {
	// Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
	AuthenticationRequestExtraParams map[string]string `pulumi:"authenticationRequestExtraParams"`
	// Authorization endpoint of the IdP.
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// OAuth 2.0 client identifier.
	ClientId string `pulumi:"clientId"`
	// OAuth 2.0 client secret.
	ClientSecret string `pulumi:"clientSecret"`
	// OIDC issuer identifier of the IdP.
	Issuer string `pulumi:"issuer"`
	// Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
	OnUnauthenticatedRequest *string `pulumi:"onUnauthenticatedRequest"`
	// Set of user claims to be requested from the IdP.
	Scope *string `pulumi:"scope"`
	// Name of the cookie used to maintain session information.
	SessionCookieName *string `pulumi:"sessionCookieName"`
	// Maximum duration of the authentication session, in seconds.
	SessionTimeout *int `pulumi:"sessionTimeout"`
	// Token endpoint of the IdP.
	TokenEndpoint string `pulumi:"tokenEndpoint"`
	// User info endpoint of the IdP.
	//
	// The following arguments are optional:
	UserInfoEndpoint string `pulumi:"userInfoEndpoint"`
}

type ListenerDefaultActionAuthenticateOidcArgs struct {
	// Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
	AuthenticationRequestExtraParams pulumix.Input[map[string]string] `pulumi:"authenticationRequestExtraParams"`
	// Authorization endpoint of the IdP.
	AuthorizationEndpoint pulumix.Input[string] `pulumi:"authorizationEndpoint"`
	// OAuth 2.0 client identifier.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// OAuth 2.0 client secret.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// OIDC issuer identifier of the IdP.
	Issuer pulumix.Input[string] `pulumi:"issuer"`
	// Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
	OnUnauthenticatedRequest pulumix.Input[*string] `pulumi:"onUnauthenticatedRequest"`
	// Set of user claims to be requested from the IdP.
	Scope pulumix.Input[*string] `pulumi:"scope"`
	// Name of the cookie used to maintain session information.
	SessionCookieName pulumix.Input[*string] `pulumi:"sessionCookieName"`
	// Maximum duration of the authentication session, in seconds.
	SessionTimeout pulumix.Input[*int] `pulumi:"sessionTimeout"`
	// Token endpoint of the IdP.
	TokenEndpoint pulumix.Input[string] `pulumi:"tokenEndpoint"`
	// User info endpoint of the IdP.
	//
	// The following arguments are optional:
	UserInfoEndpoint pulumix.Input[string] `pulumi:"userInfoEndpoint"`
}

func (ListenerDefaultActionAuthenticateOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionAuthenticateOidc)(nil)).Elem()
}

func (i ListenerDefaultActionAuthenticateOidcArgs) ToListenerDefaultActionAuthenticateOidcOutput() ListenerDefaultActionAuthenticateOidcOutput {
	return i.ToListenerDefaultActionAuthenticateOidcOutputWithContext(context.Background())
}

func (i ListenerDefaultActionAuthenticateOidcArgs) ToListenerDefaultActionAuthenticateOidcOutputWithContext(ctx context.Context) ListenerDefaultActionAuthenticateOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionAuthenticateOidcOutput)
}

func (i *ListenerDefaultActionAuthenticateOidcArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionAuthenticateOidcArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionAuthenticateOidcOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionAuthenticateOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionAuthenticateOidc)(nil)).Elem()
}

func (o ListenerDefaultActionAuthenticateOidcOutput) ToListenerDefaultActionAuthenticateOidcOutput() ListenerDefaultActionAuthenticateOidcOutput {
	return o
}

func (o ListenerDefaultActionAuthenticateOidcOutput) ToListenerDefaultActionAuthenticateOidcOutputWithContext(ctx context.Context) ListenerDefaultActionAuthenticateOidcOutput {
	return o
}

func (o ListenerDefaultActionAuthenticateOidcOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionAuthenticateOidc] {
	return pulumix.Output[ListenerDefaultActionAuthenticateOidc]{
		OutputState: o.OutputState,
	}
}

// Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
func (o ListenerDefaultActionAuthenticateOidcOutput) AuthenticationRequestExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) map[string]string {
		return v.AuthenticationRequestExtraParams
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Authorization endpoint of the IdP.
func (o ListenerDefaultActionAuthenticateOidcOutput) AuthorizationEndpoint() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) string { return v.AuthorizationEndpoint })
}

// OAuth 2.0 client identifier.
func (o ListenerDefaultActionAuthenticateOidcOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) string { return v.ClientId })
}

// OAuth 2.0 client secret.
func (o ListenerDefaultActionAuthenticateOidcOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) string { return v.ClientSecret })
}

// OIDC issuer identifier of the IdP.
func (o ListenerDefaultActionAuthenticateOidcOutput) Issuer() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) string { return v.Issuer })
}

// Behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
func (o ListenerDefaultActionAuthenticateOidcOutput) OnUnauthenticatedRequest() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) *string { return v.OnUnauthenticatedRequest })
}

// Set of user claims to be requested from the IdP.
func (o ListenerDefaultActionAuthenticateOidcOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) *string { return v.Scope })
}

// Name of the cookie used to maintain session information.
func (o ListenerDefaultActionAuthenticateOidcOutput) SessionCookieName() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) *string { return v.SessionCookieName })
}

// Maximum duration of the authentication session, in seconds.
func (o ListenerDefaultActionAuthenticateOidcOutput) SessionTimeout() pulumix.Output[*int] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) *int { return v.SessionTimeout })
}

// Token endpoint of the IdP.
func (o ListenerDefaultActionAuthenticateOidcOutput) TokenEndpoint() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) string { return v.TokenEndpoint })
}

// User info endpoint of the IdP.
//
// The following arguments are optional:
func (o ListenerDefaultActionAuthenticateOidcOutput) UserInfoEndpoint() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionAuthenticateOidc](o, func(v ListenerDefaultActionAuthenticateOidc) string { return v.UserInfoEndpoint })
}

type ListenerDefaultActionFixedResponse struct {
	// Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
	//
	// The following arguments are optional:
	ContentType string `pulumi:"contentType"`
	// Message body.
	MessageBody *string `pulumi:"messageBody"`
	// HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
	StatusCode *string `pulumi:"statusCode"`
}

type ListenerDefaultActionFixedResponseArgs struct {
	// Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
	//
	// The following arguments are optional:
	ContentType pulumix.Input[string] `pulumi:"contentType"`
	// Message body.
	MessageBody pulumix.Input[*string] `pulumi:"messageBody"`
	// HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
	StatusCode pulumix.Input[*string] `pulumi:"statusCode"`
}

func (ListenerDefaultActionFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (i ListenerDefaultActionFixedResponseArgs) ToListenerDefaultActionFixedResponseOutput() ListenerDefaultActionFixedResponseOutput {
	return i.ToListenerDefaultActionFixedResponseOutputWithContext(context.Background())
}

func (i ListenerDefaultActionFixedResponseArgs) ToListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) ListenerDefaultActionFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionFixedResponseOutput)
}

func (i *ListenerDefaultActionFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionFixedResponseArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionFixedResponseOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (o ListenerDefaultActionFixedResponseOutput) ToListenerDefaultActionFixedResponseOutput() ListenerDefaultActionFixedResponseOutput {
	return o
}

func (o ListenerDefaultActionFixedResponseOutput) ToListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) ListenerDefaultActionFixedResponseOutput {
	return o
}

func (o ListenerDefaultActionFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionFixedResponse] {
	return pulumix.Output[ListenerDefaultActionFixedResponse]{
		OutputState: o.OutputState,
	}
}

// Content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
//
// The following arguments are optional:
func (o ListenerDefaultActionFixedResponseOutput) ContentType() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionFixedResponse](o, func(v ListenerDefaultActionFixedResponse) string { return v.ContentType })
}

// Message body.
func (o ListenerDefaultActionFixedResponseOutput) MessageBody() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionFixedResponse](o, func(v ListenerDefaultActionFixedResponse) *string { return v.MessageBody })
}

// HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
func (o ListenerDefaultActionFixedResponseOutput) StatusCode() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionFixedResponse](o, func(v ListenerDefaultActionFixedResponse) *string { return v.StatusCode })
}

type ListenerDefaultActionForward struct {
	// Configuration block for target group stickiness for the rule. Detailed below.
	Stickiness *ListenerDefaultActionForwardStickiness `pulumi:"stickiness"`
	// Set of 1-5 target group blocks. Detailed below.
	//
	// The following arguments are optional:
	TargetGroups []ListenerDefaultActionForwardTargetGroup `pulumi:"targetGroups"`
}

type ListenerDefaultActionForwardArgs struct {
	// Configuration block for target group stickiness for the rule. Detailed below.
	Stickiness pulumix.Input[*ListenerDefaultActionForwardStickinessArgs] `pulumi:"stickiness"`
	// Set of 1-5 target group blocks. Detailed below.
	//
	// The following arguments are optional:
	TargetGroups pulumix.Input[[]*ListenerDefaultActionForwardTargetGroupArgs] `pulumi:"targetGroups"`
}

func (ListenerDefaultActionForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForward)(nil)).Elem()
}

func (i ListenerDefaultActionForwardArgs) ToListenerDefaultActionForwardOutput() ListenerDefaultActionForwardOutput {
	return i.ToListenerDefaultActionForwardOutputWithContext(context.Background())
}

func (i ListenerDefaultActionForwardArgs) ToListenerDefaultActionForwardOutputWithContext(ctx context.Context) ListenerDefaultActionForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionForwardOutput)
}

func (i *ListenerDefaultActionForwardArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionForwardArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionForwardOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForward)(nil)).Elem()
}

func (o ListenerDefaultActionForwardOutput) ToListenerDefaultActionForwardOutput() ListenerDefaultActionForwardOutput {
	return o
}

func (o ListenerDefaultActionForwardOutput) ToListenerDefaultActionForwardOutputWithContext(ctx context.Context) ListenerDefaultActionForwardOutput {
	return o
}

func (o ListenerDefaultActionForwardOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionForward] {
	return pulumix.Output[ListenerDefaultActionForward]{
		OutputState: o.OutputState,
	}
}

// Configuration block for target group stickiness for the rule. Detailed below.
func (o ListenerDefaultActionForwardOutput) Stickiness() pulumix.GPtrOutput[ListenerDefaultActionForwardStickiness, ListenerDefaultActionForwardStickinessOutput] {
	value := pulumix.Apply[ListenerDefaultActionForward](o, func(v ListenerDefaultActionForward) *ListenerDefaultActionForwardStickiness { return v.Stickiness })
	return pulumix.GPtrOutput[ListenerDefaultActionForwardStickiness, ListenerDefaultActionForwardStickinessOutput]{OutputState: value.OutputState}
}

// Set of 1-5 target group blocks. Detailed below.
//
// The following arguments are optional:
func (o ListenerDefaultActionForwardOutput) TargetGroups() pulumix.GArrayOutput[ListenerDefaultActionForwardTargetGroup, ListenerDefaultActionForwardTargetGroupOutput] {
	value := pulumix.Apply[ListenerDefaultActionForward](o, func(v ListenerDefaultActionForward) []ListenerDefaultActionForwardTargetGroup { return v.TargetGroups })
	return pulumix.GArrayOutput[ListenerDefaultActionForwardTargetGroup, ListenerDefaultActionForwardTargetGroupOutput]{OutputState: value.OutputState}
}

type ListenerDefaultActionForwardStickiness struct {
	// Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
	//
	// The following arguments are optional:
	Duration int `pulumi:"duration"`
	// Whether target group stickiness is enabled. Default is `false`.
	Enabled *bool `pulumi:"enabled"`
}

type ListenerDefaultActionForwardStickinessArgs struct {
	// Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
	//
	// The following arguments are optional:
	Duration pulumix.Input[int] `pulumi:"duration"`
	// Whether target group stickiness is enabled. Default is `false`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (ListenerDefaultActionForwardStickinessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForwardStickiness)(nil)).Elem()
}

func (i ListenerDefaultActionForwardStickinessArgs) ToListenerDefaultActionForwardStickinessOutput() ListenerDefaultActionForwardStickinessOutput {
	return i.ToListenerDefaultActionForwardStickinessOutputWithContext(context.Background())
}

func (i ListenerDefaultActionForwardStickinessArgs) ToListenerDefaultActionForwardStickinessOutputWithContext(ctx context.Context) ListenerDefaultActionForwardStickinessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionForwardStickinessOutput)
}

func (i *ListenerDefaultActionForwardStickinessArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionForwardStickinessArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionForwardStickinessOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionForwardStickinessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForwardStickiness)(nil)).Elem()
}

func (o ListenerDefaultActionForwardStickinessOutput) ToListenerDefaultActionForwardStickinessOutput() ListenerDefaultActionForwardStickinessOutput {
	return o
}

func (o ListenerDefaultActionForwardStickinessOutput) ToListenerDefaultActionForwardStickinessOutputWithContext(ctx context.Context) ListenerDefaultActionForwardStickinessOutput {
	return o
}

func (o ListenerDefaultActionForwardStickinessOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionForwardStickiness] {
	return pulumix.Output[ListenerDefaultActionForwardStickiness]{
		OutputState: o.OutputState,
	}
}

// Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
//
// The following arguments are optional:
func (o ListenerDefaultActionForwardStickinessOutput) Duration() pulumix.Output[int] {
	return pulumix.Apply[ListenerDefaultActionForwardStickiness](o, func(v ListenerDefaultActionForwardStickiness) int { return v.Duration })
}

// Whether target group stickiness is enabled. Default is `false`.
func (o ListenerDefaultActionForwardStickinessOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[ListenerDefaultActionForwardStickiness](o, func(v ListenerDefaultActionForwardStickiness) *bool { return v.Enabled })
}

type ListenerDefaultActionForwardTargetGroup struct {
	// ARN of the target group.
	//
	// The following arguments are optional:
	Arn string `pulumi:"arn"`
	// Weight. The range is 0 to 999.
	Weight *int `pulumi:"weight"`
}

type ListenerDefaultActionForwardTargetGroupArgs struct {
	// ARN of the target group.
	//
	// The following arguments are optional:
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Weight. The range is 0 to 999.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (ListenerDefaultActionForwardTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (i ListenerDefaultActionForwardTargetGroupArgs) ToListenerDefaultActionForwardTargetGroupOutput() ListenerDefaultActionForwardTargetGroupOutput {
	return i.ToListenerDefaultActionForwardTargetGroupOutputWithContext(context.Background())
}

func (i ListenerDefaultActionForwardTargetGroupArgs) ToListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerDefaultActionForwardTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionForwardTargetGroupOutput)
}

func (i *ListenerDefaultActionForwardTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionForwardTargetGroupArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionForwardTargetGroupOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionForwardTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (o ListenerDefaultActionForwardTargetGroupOutput) ToListenerDefaultActionForwardTargetGroupOutput() ListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o ListenerDefaultActionForwardTargetGroupOutput) ToListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o ListenerDefaultActionForwardTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionForwardTargetGroup] {
	return pulumix.Output[ListenerDefaultActionForwardTargetGroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the target group.
//
// The following arguments are optional:
func (o ListenerDefaultActionForwardTargetGroupOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionForwardTargetGroup](o, func(v ListenerDefaultActionForwardTargetGroup) string { return v.Arn })
}

// Weight. The range is 0 to 999.
func (o ListenerDefaultActionForwardTargetGroupOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ListenerDefaultActionForwardTargetGroup](o, func(v ListenerDefaultActionForwardTargetGroup) *int { return v.Weight })
}

type ListenerDefaultActionRedirect struct {
	// Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
	Host *string `pulumi:"host"`
	// Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
	Path *string `pulumi:"path"`
	// Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
	Port *string `pulumi:"port"`
	// Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
	Protocol *string `pulumi:"protocol"`
	// Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
	Query *string `pulumi:"query"`
	// HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
	//
	// The following arguments are optional:
	StatusCode string `pulumi:"statusCode"`
}

type ListenerDefaultActionRedirectArgs struct {
	// Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
	Host pulumix.Input[*string] `pulumi:"host"`
	// Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
	Path pulumix.Input[*string] `pulumi:"path"`
	// Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
	Port pulumix.Input[*string] `pulumi:"port"`
	// Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
	// Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
	Query pulumix.Input[*string] `pulumi:"query"`
	// HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
	//
	// The following arguments are optional:
	StatusCode pulumix.Input[string] `pulumi:"statusCode"`
}

func (ListenerDefaultActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionRedirect)(nil)).Elem()
}

func (i ListenerDefaultActionRedirectArgs) ToListenerDefaultActionRedirectOutput() ListenerDefaultActionRedirectOutput {
	return i.ToListenerDefaultActionRedirectOutputWithContext(context.Background())
}

func (i ListenerDefaultActionRedirectArgs) ToListenerDefaultActionRedirectOutputWithContext(ctx context.Context) ListenerDefaultActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionRedirectOutput)
}

func (i *ListenerDefaultActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultActionRedirectArgs] {
	return pulumix.Val(i)
}

type ListenerDefaultActionRedirectOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultActionRedirect)(nil)).Elem()
}

func (o ListenerDefaultActionRedirectOutput) ToListenerDefaultActionRedirectOutput() ListenerDefaultActionRedirectOutput {
	return o
}

func (o ListenerDefaultActionRedirectOutput) ToListenerDefaultActionRedirectOutputWithContext(ctx context.Context) ListenerDefaultActionRedirectOutput {
	return o
}

func (o ListenerDefaultActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultActionRedirect] {
	return pulumix.Output[ListenerDefaultActionRedirect]{
		OutputState: o.OutputState,
	}
}

// Hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
func (o ListenerDefaultActionRedirectOutput) Host() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionRedirect](o, func(v ListenerDefaultActionRedirect) *string { return v.Host })
}

// Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
func (o ListenerDefaultActionRedirectOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionRedirect](o, func(v ListenerDefaultActionRedirect) *string { return v.Path })
}

// Port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
func (o ListenerDefaultActionRedirectOutput) Port() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionRedirect](o, func(v ListenerDefaultActionRedirect) *string { return v.Port })
}

// Protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
func (o ListenerDefaultActionRedirectOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionRedirect](o, func(v ListenerDefaultActionRedirect) *string { return v.Protocol })
}

// Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
func (o ListenerDefaultActionRedirectOutput) Query() pulumix.Output[*string] {
	return pulumix.Apply[ListenerDefaultActionRedirect](o, func(v ListenerDefaultActionRedirect) *string { return v.Query })
}

// HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
//
// The following arguments are optional:
func (o ListenerDefaultActionRedirectOutput) StatusCode() pulumix.Output[string] {
	return pulumix.Apply[ListenerDefaultActionRedirect](o, func(v ListenerDefaultActionRedirect) string { return v.StatusCode })
}

type ListenerRuleAction struct {
	// Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
	AuthenticateCognito *ListenerRuleActionAuthenticateCognito `pulumi:"authenticateCognito"`
	// Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
	AuthenticateOidc *ListenerRuleActionAuthenticateOidc `pulumi:"authenticateOidc"`
	// Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
	FixedResponse *ListenerRuleActionFixedResponse `pulumi:"fixedResponse"`
	// Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
	Forward *ListenerRuleActionForward `pulumi:"forward"`
	Order   *int                       `pulumi:"order"`
	// Information for creating a redirect action. Required if `type` is `redirect`.
	Redirect *ListenerRuleActionRedirect `pulumi:"redirect"`
	// The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
	// The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
	Type string `pulumi:"type"`
}

type ListenerRuleActionArgs struct {
	// Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
	AuthenticateCognito pulumix.Input[*ListenerRuleActionAuthenticateCognitoArgs] `pulumi:"authenticateCognito"`
	// Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
	AuthenticateOidc pulumix.Input[*ListenerRuleActionAuthenticateOidcArgs] `pulumi:"authenticateOidc"`
	// Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
	FixedResponse pulumix.Input[*ListenerRuleActionFixedResponseArgs] `pulumi:"fixedResponse"`
	// Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
	Forward pulumix.Input[*ListenerRuleActionForwardArgs] `pulumi:"forward"`
	Order   pulumix.Input[*int]                           `pulumi:"order"`
	// Information for creating a redirect action. Required if `type` is `redirect`.
	Redirect pulumix.Input[*ListenerRuleActionRedirectArgs] `pulumi:"redirect"`
	// The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
	TargetGroupArn pulumix.Input[*string] `pulumi:"targetGroupArn"`
	// The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ListenerRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleAction)(nil)).Elem()
}

func (i ListenerRuleActionArgs) ToListenerRuleActionOutput() ListenerRuleActionOutput {
	return i.ToListenerRuleActionOutputWithContext(context.Background())
}

func (i ListenerRuleActionArgs) ToListenerRuleActionOutputWithContext(ctx context.Context) ListenerRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionOutput)
}

func (i *ListenerRuleActionArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleAction)(nil)).Elem()
}

func (o ListenerRuleActionOutput) ToListenerRuleActionOutput() ListenerRuleActionOutput {
	return o
}

func (o ListenerRuleActionOutput) ToListenerRuleActionOutputWithContext(ctx context.Context) ListenerRuleActionOutput {
	return o
}

func (o ListenerRuleActionOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleAction] {
	return pulumix.Output[ListenerRuleAction]{
		OutputState: o.OutputState,
	}
}

// Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
func (o ListenerRuleActionOutput) AuthenticateCognito() pulumix.GPtrOutput[ListenerRuleActionAuthenticateCognito, ListenerRuleActionAuthenticateCognitoOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionAuthenticateCognito { return v.AuthenticateCognito })
	return pulumix.GPtrOutput[ListenerRuleActionAuthenticateCognito, ListenerRuleActionAuthenticateCognitoOutput]{OutputState: value.OutputState}
}

// Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
func (o ListenerRuleActionOutput) AuthenticateOidc() pulumix.GPtrOutput[ListenerRuleActionAuthenticateOidc, ListenerRuleActionAuthenticateOidcOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionAuthenticateOidc { return v.AuthenticateOidc })
	return pulumix.GPtrOutput[ListenerRuleActionAuthenticateOidc, ListenerRuleActionAuthenticateOidcOutput]{OutputState: value.OutputState}
}

// Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
func (o ListenerRuleActionOutput) FixedResponse() pulumix.GPtrOutput[ListenerRuleActionFixedResponse, ListenerRuleActionFixedResponseOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionFixedResponse { return v.FixedResponse })
	return pulumix.GPtrOutput[ListenerRuleActionFixedResponse, ListenerRuleActionFixedResponseOutput]{OutputState: value.OutputState}
}

// Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
func (o ListenerRuleActionOutput) Forward() pulumix.GPtrOutput[ListenerRuleActionForward, ListenerRuleActionForwardOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionForward { return v.Forward })
	return pulumix.GPtrOutput[ListenerRuleActionForward, ListenerRuleActionForwardOutput]{OutputState: value.OutputState}
}

func (o ListenerRuleActionOutput) Order() pulumix.Output[*int] {
	return pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *int { return v.Order })
}

// Information for creating a redirect action. Required if `type` is `redirect`.
func (o ListenerRuleActionOutput) Redirect() pulumix.GPtrOutput[ListenerRuleActionRedirect, ListenerRuleActionRedirectOutput] {
	value := pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *ListenerRuleActionRedirect { return v.Redirect })
	return pulumix.GPtrOutput[ListenerRuleActionRedirect, ListenerRuleActionRedirectOutput]{OutputState: value.OutputState}
}

// The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
func (o ListenerRuleActionOutput) TargetGroupArn() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) *string { return v.TargetGroupArn })
}

// The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
func (o ListenerRuleActionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleAction](o, func(v ListenerRuleAction) string { return v.Type })
}

type ListenerRuleActionAuthenticateCognito struct {
	// The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
	AuthenticationRequestExtraParams map[string]string `pulumi:"authenticationRequestExtraParams"`
	// The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
	OnUnauthenticatedRequest *string `pulumi:"onUnauthenticatedRequest"`
	// The set of user claims to be requested from the IdP.
	Scope *string `pulumi:"scope"`
	// The name of the cookie used to maintain session information.
	SessionCookieName *string `pulumi:"sessionCookieName"`
	// The maximum duration of the authentication session, in seconds.
	SessionTimeout *int `pulumi:"sessionTimeout"`
	// The ARN of the Cognito user pool.
	UserPoolArn string `pulumi:"userPoolArn"`
	// The ID of the Cognito user pool client.
	UserPoolClientId string `pulumi:"userPoolClientId"`
	// The domain prefix or fully-qualified domain name of the Cognito user pool.
	UserPoolDomain string `pulumi:"userPoolDomain"`
}

type ListenerRuleActionAuthenticateCognitoArgs struct {
	// The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
	AuthenticationRequestExtraParams pulumix.Input[map[string]string] `pulumi:"authenticationRequestExtraParams"`
	// The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
	OnUnauthenticatedRequest pulumix.Input[*string] `pulumi:"onUnauthenticatedRequest"`
	// The set of user claims to be requested from the IdP.
	Scope pulumix.Input[*string] `pulumi:"scope"`
	// The name of the cookie used to maintain session information.
	SessionCookieName pulumix.Input[*string] `pulumi:"sessionCookieName"`
	// The maximum duration of the authentication session, in seconds.
	SessionTimeout pulumix.Input[*int] `pulumi:"sessionTimeout"`
	// The ARN of the Cognito user pool.
	UserPoolArn pulumix.Input[string] `pulumi:"userPoolArn"`
	// The ID of the Cognito user pool client.
	UserPoolClientId pulumix.Input[string] `pulumi:"userPoolClientId"`
	// The domain prefix or fully-qualified domain name of the Cognito user pool.
	UserPoolDomain pulumix.Input[string] `pulumi:"userPoolDomain"`
}

func (ListenerRuleActionAuthenticateCognitoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionAuthenticateCognito)(nil)).Elem()
}

func (i ListenerRuleActionAuthenticateCognitoArgs) ToListenerRuleActionAuthenticateCognitoOutput() ListenerRuleActionAuthenticateCognitoOutput {
	return i.ToListenerRuleActionAuthenticateCognitoOutputWithContext(context.Background())
}

func (i ListenerRuleActionAuthenticateCognitoArgs) ToListenerRuleActionAuthenticateCognitoOutputWithContext(ctx context.Context) ListenerRuleActionAuthenticateCognitoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionAuthenticateCognitoOutput)
}

func (i *ListenerRuleActionAuthenticateCognitoArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionAuthenticateCognitoArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionAuthenticateCognitoOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionAuthenticateCognitoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionAuthenticateCognito)(nil)).Elem()
}

func (o ListenerRuleActionAuthenticateCognitoOutput) ToListenerRuleActionAuthenticateCognitoOutput() ListenerRuleActionAuthenticateCognitoOutput {
	return o
}

func (o ListenerRuleActionAuthenticateCognitoOutput) ToListenerRuleActionAuthenticateCognitoOutputWithContext(ctx context.Context) ListenerRuleActionAuthenticateCognitoOutput {
	return o
}

func (o ListenerRuleActionAuthenticateCognitoOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionAuthenticateCognito] {
	return pulumix.Output[ListenerRuleActionAuthenticateCognito]{
		OutputState: o.OutputState,
	}
}

// The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
func (o ListenerRuleActionAuthenticateCognitoOutput) AuthenticationRequestExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) map[string]string {
		return v.AuthenticationRequestExtraParams
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
func (o ListenerRuleActionAuthenticateCognitoOutput) OnUnauthenticatedRequest() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) *string { return v.OnUnauthenticatedRequest })
}

// The set of user claims to be requested from the IdP.
func (o ListenerRuleActionAuthenticateCognitoOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) *string { return v.Scope })
}

// The name of the cookie used to maintain session information.
func (o ListenerRuleActionAuthenticateCognitoOutput) SessionCookieName() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) *string { return v.SessionCookieName })
}

// The maximum duration of the authentication session, in seconds.
func (o ListenerRuleActionAuthenticateCognitoOutput) SessionTimeout() pulumix.Output[*int] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) *int { return v.SessionTimeout })
}

// The ARN of the Cognito user pool.
func (o ListenerRuleActionAuthenticateCognitoOutput) UserPoolArn() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) string { return v.UserPoolArn })
}

// The ID of the Cognito user pool client.
func (o ListenerRuleActionAuthenticateCognitoOutput) UserPoolClientId() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) string { return v.UserPoolClientId })
}

// The domain prefix or fully-qualified domain name of the Cognito user pool.
func (o ListenerRuleActionAuthenticateCognitoOutput) UserPoolDomain() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateCognito](o, func(v ListenerRuleActionAuthenticateCognito) string { return v.UserPoolDomain })
}

type ListenerRuleActionAuthenticateOidc struct {
	// The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
	AuthenticationRequestExtraParams map[string]string `pulumi:"authenticationRequestExtraParams"`
	// The authorization endpoint of the IdP.
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// The OAuth 2.0 client identifier.
	ClientId string `pulumi:"clientId"`
	// The OAuth 2.0 client secret.
	ClientSecret string `pulumi:"clientSecret"`
	// The OIDC issuer identifier of the IdP.
	Issuer string `pulumi:"issuer"`
	// The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
	OnUnauthenticatedRequest *string `pulumi:"onUnauthenticatedRequest"`
	// The set of user claims to be requested from the IdP.
	Scope *string `pulumi:"scope"`
	// The name of the cookie used to maintain session information.
	SessionCookieName *string `pulumi:"sessionCookieName"`
	// The maximum duration of the authentication session, in seconds.
	SessionTimeout *int `pulumi:"sessionTimeout"`
	// The token endpoint of the IdP.
	TokenEndpoint string `pulumi:"tokenEndpoint"`
	// The user info endpoint of the IdP.
	UserInfoEndpoint string `pulumi:"userInfoEndpoint"`
}

type ListenerRuleActionAuthenticateOidcArgs struct {
	// The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
	AuthenticationRequestExtraParams pulumix.Input[map[string]string] `pulumi:"authenticationRequestExtraParams"`
	// The authorization endpoint of the IdP.
	AuthorizationEndpoint pulumix.Input[string] `pulumi:"authorizationEndpoint"`
	// The OAuth 2.0 client identifier.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// The OAuth 2.0 client secret.
	ClientSecret pulumix.Input[string] `pulumi:"clientSecret"`
	// The OIDC issuer identifier of the IdP.
	Issuer pulumix.Input[string] `pulumi:"issuer"`
	// The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
	OnUnauthenticatedRequest pulumix.Input[*string] `pulumi:"onUnauthenticatedRequest"`
	// The set of user claims to be requested from the IdP.
	Scope pulumix.Input[*string] `pulumi:"scope"`
	// The name of the cookie used to maintain session information.
	SessionCookieName pulumix.Input[*string] `pulumi:"sessionCookieName"`
	// The maximum duration of the authentication session, in seconds.
	SessionTimeout pulumix.Input[*int] `pulumi:"sessionTimeout"`
	// The token endpoint of the IdP.
	TokenEndpoint pulumix.Input[string] `pulumi:"tokenEndpoint"`
	// The user info endpoint of the IdP.
	UserInfoEndpoint pulumix.Input[string] `pulumi:"userInfoEndpoint"`
}

func (ListenerRuleActionAuthenticateOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionAuthenticateOidc)(nil)).Elem()
}

func (i ListenerRuleActionAuthenticateOidcArgs) ToListenerRuleActionAuthenticateOidcOutput() ListenerRuleActionAuthenticateOidcOutput {
	return i.ToListenerRuleActionAuthenticateOidcOutputWithContext(context.Background())
}

func (i ListenerRuleActionAuthenticateOidcArgs) ToListenerRuleActionAuthenticateOidcOutputWithContext(ctx context.Context) ListenerRuleActionAuthenticateOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionAuthenticateOidcOutput)
}

func (i *ListenerRuleActionAuthenticateOidcArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionAuthenticateOidcArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionAuthenticateOidcOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionAuthenticateOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionAuthenticateOidc)(nil)).Elem()
}

func (o ListenerRuleActionAuthenticateOidcOutput) ToListenerRuleActionAuthenticateOidcOutput() ListenerRuleActionAuthenticateOidcOutput {
	return o
}

func (o ListenerRuleActionAuthenticateOidcOutput) ToListenerRuleActionAuthenticateOidcOutputWithContext(ctx context.Context) ListenerRuleActionAuthenticateOidcOutput {
	return o
}

func (o ListenerRuleActionAuthenticateOidcOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionAuthenticateOidc] {
	return pulumix.Output[ListenerRuleActionAuthenticateOidc]{
		OutputState: o.OutputState,
	}
}

// The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
func (o ListenerRuleActionAuthenticateOidcOutput) AuthenticationRequestExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) map[string]string {
		return v.AuthenticationRequestExtraParams
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The authorization endpoint of the IdP.
func (o ListenerRuleActionAuthenticateOidcOutput) AuthorizationEndpoint() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) string { return v.AuthorizationEndpoint })
}

// The OAuth 2.0 client identifier.
func (o ListenerRuleActionAuthenticateOidcOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) string { return v.ClientId })
}

// The OAuth 2.0 client secret.
func (o ListenerRuleActionAuthenticateOidcOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) string { return v.ClientSecret })
}

// The OIDC issuer identifier of the IdP.
func (o ListenerRuleActionAuthenticateOidcOutput) Issuer() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) string { return v.Issuer })
}

// The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
func (o ListenerRuleActionAuthenticateOidcOutput) OnUnauthenticatedRequest() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) *string { return v.OnUnauthenticatedRequest })
}

// The set of user claims to be requested from the IdP.
func (o ListenerRuleActionAuthenticateOidcOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) *string { return v.Scope })
}

// The name of the cookie used to maintain session information.
func (o ListenerRuleActionAuthenticateOidcOutput) SessionCookieName() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) *string { return v.SessionCookieName })
}

// The maximum duration of the authentication session, in seconds.
func (o ListenerRuleActionAuthenticateOidcOutput) SessionTimeout() pulumix.Output[*int] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) *int { return v.SessionTimeout })
}

// The token endpoint of the IdP.
func (o ListenerRuleActionAuthenticateOidcOutput) TokenEndpoint() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) string { return v.TokenEndpoint })
}

// The user info endpoint of the IdP.
func (o ListenerRuleActionAuthenticateOidcOutput) UserInfoEndpoint() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionAuthenticateOidc](o, func(v ListenerRuleActionAuthenticateOidc) string { return v.UserInfoEndpoint })
}

type ListenerRuleActionFixedResponse struct {
	// The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
	ContentType string `pulumi:"contentType"`
	// The message body.
	MessageBody *string `pulumi:"messageBody"`
	// The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
	StatusCode *string `pulumi:"statusCode"`
}

type ListenerRuleActionFixedResponseArgs struct {
	// The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
	ContentType pulumix.Input[string] `pulumi:"contentType"`
	// The message body.
	MessageBody pulumix.Input[*string] `pulumi:"messageBody"`
	// The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
	StatusCode pulumix.Input[*string] `pulumi:"statusCode"`
}

func (ListenerRuleActionFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionFixedResponse)(nil)).Elem()
}

func (i ListenerRuleActionFixedResponseArgs) ToListenerRuleActionFixedResponseOutput() ListenerRuleActionFixedResponseOutput {
	return i.ToListenerRuleActionFixedResponseOutputWithContext(context.Background())
}

func (i ListenerRuleActionFixedResponseArgs) ToListenerRuleActionFixedResponseOutputWithContext(ctx context.Context) ListenerRuleActionFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionFixedResponseOutput)
}

func (i *ListenerRuleActionFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionFixedResponseArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionFixedResponseOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionFixedResponse)(nil)).Elem()
}

func (o ListenerRuleActionFixedResponseOutput) ToListenerRuleActionFixedResponseOutput() ListenerRuleActionFixedResponseOutput {
	return o
}

func (o ListenerRuleActionFixedResponseOutput) ToListenerRuleActionFixedResponseOutputWithContext(ctx context.Context) ListenerRuleActionFixedResponseOutput {
	return o
}

func (o ListenerRuleActionFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionFixedResponse] {
	return pulumix.Output[ListenerRuleActionFixedResponse]{
		OutputState: o.OutputState,
	}
}

// The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
func (o ListenerRuleActionFixedResponseOutput) ContentType() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionFixedResponse](o, func(v ListenerRuleActionFixedResponse) string { return v.ContentType })
}

// The message body.
func (o ListenerRuleActionFixedResponseOutput) MessageBody() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionFixedResponse](o, func(v ListenerRuleActionFixedResponse) *string { return v.MessageBody })
}

// The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
func (o ListenerRuleActionFixedResponseOutput) StatusCode() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionFixedResponse](o, func(v ListenerRuleActionFixedResponse) *string { return v.StatusCode })
}

type ListenerRuleActionForward struct {
	// The target group stickiness for the rule.
	Stickiness *ListenerRuleActionForwardStickiness `pulumi:"stickiness"`
	// One or more target groups block.
	TargetGroups []ListenerRuleActionForwardTargetGroup `pulumi:"targetGroups"`
}

type ListenerRuleActionForwardArgs struct {
	// The target group stickiness for the rule.
	Stickiness pulumix.Input[*ListenerRuleActionForwardStickinessArgs] `pulumi:"stickiness"`
	// One or more target groups block.
	TargetGroups pulumix.Input[[]*ListenerRuleActionForwardTargetGroupArgs] `pulumi:"targetGroups"`
}

func (ListenerRuleActionForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForward)(nil)).Elem()
}

func (i ListenerRuleActionForwardArgs) ToListenerRuleActionForwardOutput() ListenerRuleActionForwardOutput {
	return i.ToListenerRuleActionForwardOutputWithContext(context.Background())
}

func (i ListenerRuleActionForwardArgs) ToListenerRuleActionForwardOutputWithContext(ctx context.Context) ListenerRuleActionForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionForwardOutput)
}

func (i *ListenerRuleActionForwardArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionForwardArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionForwardOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForward)(nil)).Elem()
}

func (o ListenerRuleActionForwardOutput) ToListenerRuleActionForwardOutput() ListenerRuleActionForwardOutput {
	return o
}

func (o ListenerRuleActionForwardOutput) ToListenerRuleActionForwardOutputWithContext(ctx context.Context) ListenerRuleActionForwardOutput {
	return o
}

func (o ListenerRuleActionForwardOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionForward] {
	return pulumix.Output[ListenerRuleActionForward]{
		OutputState: o.OutputState,
	}
}

// The target group stickiness for the rule.
func (o ListenerRuleActionForwardOutput) Stickiness() pulumix.GPtrOutput[ListenerRuleActionForwardStickiness, ListenerRuleActionForwardStickinessOutput] {
	value := pulumix.Apply[ListenerRuleActionForward](o, func(v ListenerRuleActionForward) *ListenerRuleActionForwardStickiness { return v.Stickiness })
	return pulumix.GPtrOutput[ListenerRuleActionForwardStickiness, ListenerRuleActionForwardStickinessOutput]{OutputState: value.OutputState}
}

// One or more target groups block.
func (o ListenerRuleActionForwardOutput) TargetGroups() pulumix.GArrayOutput[ListenerRuleActionForwardTargetGroup, ListenerRuleActionForwardTargetGroupOutput] {
	value := pulumix.Apply[ListenerRuleActionForward](o, func(v ListenerRuleActionForward) []ListenerRuleActionForwardTargetGroup { return v.TargetGroups })
	return pulumix.GArrayOutput[ListenerRuleActionForwardTargetGroup, ListenerRuleActionForwardTargetGroupOutput]{OutputState: value.OutputState}
}

type ListenerRuleActionForwardStickiness struct {
	// The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
	Duration int `pulumi:"duration"`
	// Indicates whether target group stickiness is enabled.
	Enabled *bool `pulumi:"enabled"`
}

type ListenerRuleActionForwardStickinessArgs struct {
	// The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
	Duration pulumix.Input[int] `pulumi:"duration"`
	// Indicates whether target group stickiness is enabled.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (ListenerRuleActionForwardStickinessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForwardStickiness)(nil)).Elem()
}

func (i ListenerRuleActionForwardStickinessArgs) ToListenerRuleActionForwardStickinessOutput() ListenerRuleActionForwardStickinessOutput {
	return i.ToListenerRuleActionForwardStickinessOutputWithContext(context.Background())
}

func (i ListenerRuleActionForwardStickinessArgs) ToListenerRuleActionForwardStickinessOutputWithContext(ctx context.Context) ListenerRuleActionForwardStickinessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionForwardStickinessOutput)
}

func (i *ListenerRuleActionForwardStickinessArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionForwardStickinessArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionForwardStickinessOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionForwardStickinessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForwardStickiness)(nil)).Elem()
}

func (o ListenerRuleActionForwardStickinessOutput) ToListenerRuleActionForwardStickinessOutput() ListenerRuleActionForwardStickinessOutput {
	return o
}

func (o ListenerRuleActionForwardStickinessOutput) ToListenerRuleActionForwardStickinessOutputWithContext(ctx context.Context) ListenerRuleActionForwardStickinessOutput {
	return o
}

func (o ListenerRuleActionForwardStickinessOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionForwardStickiness] {
	return pulumix.Output[ListenerRuleActionForwardStickiness]{
		OutputState: o.OutputState,
	}
}

// The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
func (o ListenerRuleActionForwardStickinessOutput) Duration() pulumix.Output[int] {
	return pulumix.Apply[ListenerRuleActionForwardStickiness](o, func(v ListenerRuleActionForwardStickiness) int { return v.Duration })
}

// Indicates whether target group stickiness is enabled.
func (o ListenerRuleActionForwardStickinessOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[ListenerRuleActionForwardStickiness](o, func(v ListenerRuleActionForwardStickiness) *bool { return v.Enabled })
}

type ListenerRuleActionForwardTargetGroup struct {
	// The Amazon Resource Name (ARN) of the target group.
	Arn string `pulumi:"arn"`
	// The weight. The range is 0 to 999.
	Weight *int `pulumi:"weight"`
}

type ListenerRuleActionForwardTargetGroupArgs struct {
	// The Amazon Resource Name (ARN) of the target group.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The weight. The range is 0 to 999.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (ListenerRuleActionForwardTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForwardTargetGroup)(nil)).Elem()
}

func (i ListenerRuleActionForwardTargetGroupArgs) ToListenerRuleActionForwardTargetGroupOutput() ListenerRuleActionForwardTargetGroupOutput {
	return i.ToListenerRuleActionForwardTargetGroupOutputWithContext(context.Background())
}

func (i ListenerRuleActionForwardTargetGroupArgs) ToListenerRuleActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerRuleActionForwardTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionForwardTargetGroupOutput)
}

func (i *ListenerRuleActionForwardTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionForwardTargetGroupArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionForwardTargetGroupOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionForwardTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionForwardTargetGroup)(nil)).Elem()
}

func (o ListenerRuleActionForwardTargetGroupOutput) ToListenerRuleActionForwardTargetGroupOutput() ListenerRuleActionForwardTargetGroupOutput {
	return o
}

func (o ListenerRuleActionForwardTargetGroupOutput) ToListenerRuleActionForwardTargetGroupOutputWithContext(ctx context.Context) ListenerRuleActionForwardTargetGroupOutput {
	return o
}

func (o ListenerRuleActionForwardTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionForwardTargetGroup] {
	return pulumix.Output[ListenerRuleActionForwardTargetGroup]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the target group.
func (o ListenerRuleActionForwardTargetGroupOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionForwardTargetGroup](o, func(v ListenerRuleActionForwardTargetGroup) string { return v.Arn })
}

// The weight. The range is 0 to 999.
func (o ListenerRuleActionForwardTargetGroupOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ListenerRuleActionForwardTargetGroup](o, func(v ListenerRuleActionForwardTargetGroup) *int { return v.Weight })
}

type ListenerRuleActionRedirect struct {
	// The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
	Host *string `pulumi:"host"`
	// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
	Path *string `pulumi:"path"`
	// The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
	Port *string `pulumi:"port"`
	// The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
	Protocol *string `pulumi:"protocol"`
	// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
	Query *string `pulumi:"query"`
	// The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
	StatusCode string `pulumi:"statusCode"`
}

type ListenerRuleActionRedirectArgs struct {
	// The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
	Host pulumix.Input[*string] `pulumi:"host"`
	// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
	Path pulumix.Input[*string] `pulumi:"path"`
	// The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
	Port pulumix.Input[*string] `pulumi:"port"`
	// The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
	// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
	Query pulumix.Input[*string] `pulumi:"query"`
	// The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
	StatusCode pulumix.Input[string] `pulumi:"statusCode"`
}

func (ListenerRuleActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionRedirect)(nil)).Elem()
}

func (i ListenerRuleActionRedirectArgs) ToListenerRuleActionRedirectOutput() ListenerRuleActionRedirectOutput {
	return i.ToListenerRuleActionRedirectOutputWithContext(context.Background())
}

func (i ListenerRuleActionRedirectArgs) ToListenerRuleActionRedirectOutputWithContext(ctx context.Context) ListenerRuleActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleActionRedirectOutput)
}

func (i *ListenerRuleActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleActionRedirectArgs] {
	return pulumix.Val(i)
}

type ListenerRuleActionRedirectOutput struct{ *pulumi.OutputState }

func (ListenerRuleActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleActionRedirect)(nil)).Elem()
}

func (o ListenerRuleActionRedirectOutput) ToListenerRuleActionRedirectOutput() ListenerRuleActionRedirectOutput {
	return o
}

func (o ListenerRuleActionRedirectOutput) ToListenerRuleActionRedirectOutputWithContext(ctx context.Context) ListenerRuleActionRedirectOutput {
	return o
}

func (o ListenerRuleActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleActionRedirect] {
	return pulumix.Output[ListenerRuleActionRedirect]{
		OutputState: o.OutputState,
	}
}

// The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
func (o ListenerRuleActionRedirectOutput) Host() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionRedirect](o, func(v ListenerRuleActionRedirect) *string { return v.Host })
}

// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
func (o ListenerRuleActionRedirectOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionRedirect](o, func(v ListenerRuleActionRedirect) *string { return v.Path })
}

// The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
func (o ListenerRuleActionRedirectOutput) Port() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionRedirect](o, func(v ListenerRuleActionRedirect) *string { return v.Port })
}

// The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
func (o ListenerRuleActionRedirectOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionRedirect](o, func(v ListenerRuleActionRedirect) *string { return v.Protocol })
}

// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
func (o ListenerRuleActionRedirectOutput) Query() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleActionRedirect](o, func(v ListenerRuleActionRedirect) *string { return v.Query })
}

// The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
func (o ListenerRuleActionRedirectOutput) StatusCode() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleActionRedirect](o, func(v ListenerRuleActionRedirect) string { return v.StatusCode })
}

type ListenerRuleCondition struct {
	// Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
	HostHeader *ListenerRuleConditionHostHeader `pulumi:"hostHeader"`
	// HTTP headers to match. HTTP Header block fields documented below.
	HttpHeader *ListenerRuleConditionHttpHeader `pulumi:"httpHeader"`
	// Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
	HttpRequestMethod *ListenerRuleConditionHttpRequestMethod `pulumi:"httpRequestMethod"`
	// Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
	PathPattern *ListenerRuleConditionPathPattern `pulumi:"pathPattern"`
	// Query strings to match. Query String block fields documented below.
	QueryStrings []ListenerRuleConditionQueryString `pulumi:"queryStrings"`
	// Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
	//
	// > **NOTE::** Exactly one of `hostHeader`, `httpHeader`, `httpRequestMethod`, `pathPattern`, `queryString` or `sourceIp` must be set per condition.
	SourceIp *ListenerRuleConditionSourceIp `pulumi:"sourceIp"`
}

type ListenerRuleConditionArgs struct {
	// Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
	HostHeader pulumix.Input[*ListenerRuleConditionHostHeaderArgs] `pulumi:"hostHeader"`
	// HTTP headers to match. HTTP Header block fields documented below.
	HttpHeader pulumix.Input[*ListenerRuleConditionHttpHeaderArgs] `pulumi:"httpHeader"`
	// Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
	HttpRequestMethod pulumix.Input[*ListenerRuleConditionHttpRequestMethodArgs] `pulumi:"httpRequestMethod"`
	// Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
	PathPattern pulumix.Input[*ListenerRuleConditionPathPatternArgs] `pulumi:"pathPattern"`
	// Query strings to match. Query String block fields documented below.
	QueryStrings pulumix.Input[[]*ListenerRuleConditionQueryStringArgs] `pulumi:"queryStrings"`
	// Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
	//
	// > **NOTE::** Exactly one of `hostHeader`, `httpHeader`, `httpRequestMethod`, `pathPattern`, `queryString` or `sourceIp` must be set per condition.
	SourceIp pulumix.Input[*ListenerRuleConditionSourceIpArgs] `pulumi:"sourceIp"`
}

func (ListenerRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleCondition)(nil)).Elem()
}

func (i ListenerRuleConditionArgs) ToListenerRuleConditionOutput() ListenerRuleConditionOutput {
	return i.ToListenerRuleConditionOutputWithContext(context.Background())
}

func (i ListenerRuleConditionArgs) ToListenerRuleConditionOutputWithContext(ctx context.Context) ListenerRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionOutput)
}

func (i *ListenerRuleConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleCondition)(nil)).Elem()
}

func (o ListenerRuleConditionOutput) ToListenerRuleConditionOutput() ListenerRuleConditionOutput {
	return o
}

func (o ListenerRuleConditionOutput) ToListenerRuleConditionOutputWithContext(ctx context.Context) ListenerRuleConditionOutput {
	return o
}

func (o ListenerRuleConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleCondition] {
	return pulumix.Output[ListenerRuleCondition]{
		OutputState: o.OutputState,
	}
}

// Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
func (o ListenerRuleConditionOutput) HostHeader() pulumix.GPtrOutput[ListenerRuleConditionHostHeader, ListenerRuleConditionHostHeaderOutput] {
	value := pulumix.Apply[ListenerRuleCondition](o, func(v ListenerRuleCondition) *ListenerRuleConditionHostHeader { return v.HostHeader })
	return pulumix.GPtrOutput[ListenerRuleConditionHostHeader, ListenerRuleConditionHostHeaderOutput]{OutputState: value.OutputState}
}

// HTTP headers to match. HTTP Header block fields documented below.
func (o ListenerRuleConditionOutput) HttpHeader() pulumix.GPtrOutput[ListenerRuleConditionHttpHeader, ListenerRuleConditionHttpHeaderOutput] {
	value := pulumix.Apply[ListenerRuleCondition](o, func(v ListenerRuleCondition) *ListenerRuleConditionHttpHeader { return v.HttpHeader })
	return pulumix.GPtrOutput[ListenerRuleConditionHttpHeader, ListenerRuleConditionHttpHeaderOutput]{OutputState: value.OutputState}
}

// Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
func (o ListenerRuleConditionOutput) HttpRequestMethod() pulumix.GPtrOutput[ListenerRuleConditionHttpRequestMethod, ListenerRuleConditionHttpRequestMethodOutput] {
	value := pulumix.Apply[ListenerRuleCondition](o, func(v ListenerRuleCondition) *ListenerRuleConditionHttpRequestMethod { return v.HttpRequestMethod })
	return pulumix.GPtrOutput[ListenerRuleConditionHttpRequestMethod, ListenerRuleConditionHttpRequestMethodOutput]{OutputState: value.OutputState}
}

// Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
func (o ListenerRuleConditionOutput) PathPattern() pulumix.GPtrOutput[ListenerRuleConditionPathPattern, ListenerRuleConditionPathPatternOutput] {
	value := pulumix.Apply[ListenerRuleCondition](o, func(v ListenerRuleCondition) *ListenerRuleConditionPathPattern { return v.PathPattern })
	return pulumix.GPtrOutput[ListenerRuleConditionPathPattern, ListenerRuleConditionPathPatternOutput]{OutputState: value.OutputState}
}

// Query strings to match. Query String block fields documented below.
func (o ListenerRuleConditionOutput) QueryStrings() pulumix.GArrayOutput[ListenerRuleConditionQueryString, ListenerRuleConditionQueryStringOutput] {
	value := pulumix.Apply[ListenerRuleCondition](o, func(v ListenerRuleCondition) []ListenerRuleConditionQueryString { return v.QueryStrings })
	return pulumix.GArrayOutput[ListenerRuleConditionQueryString, ListenerRuleConditionQueryStringOutput]{OutputState: value.OutputState}
}

// Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
//
// > **NOTE::** Exactly one of `hostHeader`, `httpHeader`, `httpRequestMethod`, `pathPattern`, `queryString` or `sourceIp` must be set per condition.
func (o ListenerRuleConditionOutput) SourceIp() pulumix.GPtrOutput[ListenerRuleConditionSourceIp, ListenerRuleConditionSourceIpOutput] {
	value := pulumix.Apply[ListenerRuleCondition](o, func(v ListenerRuleCondition) *ListenerRuleConditionSourceIp { return v.SourceIp })
	return pulumix.GPtrOutput[ListenerRuleConditionSourceIp, ListenerRuleConditionSourceIpOutput]{OutputState: value.OutputState}
}

type ListenerRuleConditionHostHeader struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values []string `pulumi:"values"`
}

type ListenerRuleConditionHostHeaderArgs struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ListenerRuleConditionHostHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionHostHeader)(nil)).Elem()
}

func (i ListenerRuleConditionHostHeaderArgs) ToListenerRuleConditionHostHeaderOutput() ListenerRuleConditionHostHeaderOutput {
	return i.ToListenerRuleConditionHostHeaderOutputWithContext(context.Background())
}

func (i ListenerRuleConditionHostHeaderArgs) ToListenerRuleConditionHostHeaderOutputWithContext(ctx context.Context) ListenerRuleConditionHostHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionHostHeaderOutput)
}

func (i *ListenerRuleConditionHostHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionHostHeaderArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionHostHeaderOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionHostHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionHostHeader)(nil)).Elem()
}

func (o ListenerRuleConditionHostHeaderOutput) ToListenerRuleConditionHostHeaderOutput() ListenerRuleConditionHostHeaderOutput {
	return o
}

func (o ListenerRuleConditionHostHeaderOutput) ToListenerRuleConditionHostHeaderOutputWithContext(ctx context.Context) ListenerRuleConditionHostHeaderOutput {
	return o
}

func (o ListenerRuleConditionHostHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleConditionHostHeader] {
	return pulumix.Output[ListenerRuleConditionHostHeader]{
		OutputState: o.OutputState,
	}
}

// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
//
// Query String Value Blocks (for `query_string.values`) support the following:
func (o ListenerRuleConditionHostHeaderOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ListenerRuleConditionHostHeader](o, func(v ListenerRuleConditionHostHeader) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ListenerRuleConditionHttpHeader struct {
	// Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
	HttpHeaderName string `pulumi:"httpHeaderName"`
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	Values []string `pulumi:"values"`
}

type ListenerRuleConditionHttpHeaderArgs struct {
	// Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
	HttpHeaderName pulumix.Input[string] `pulumi:"httpHeaderName"`
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ListenerRuleConditionHttpHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionHttpHeader)(nil)).Elem()
}

func (i ListenerRuleConditionHttpHeaderArgs) ToListenerRuleConditionHttpHeaderOutput() ListenerRuleConditionHttpHeaderOutput {
	return i.ToListenerRuleConditionHttpHeaderOutputWithContext(context.Background())
}

func (i ListenerRuleConditionHttpHeaderArgs) ToListenerRuleConditionHttpHeaderOutputWithContext(ctx context.Context) ListenerRuleConditionHttpHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionHttpHeaderOutput)
}

func (i *ListenerRuleConditionHttpHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionHttpHeaderArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionHttpHeaderOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionHttpHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionHttpHeader)(nil)).Elem()
}

func (o ListenerRuleConditionHttpHeaderOutput) ToListenerRuleConditionHttpHeaderOutput() ListenerRuleConditionHttpHeaderOutput {
	return o
}

func (o ListenerRuleConditionHttpHeaderOutput) ToListenerRuleConditionHttpHeaderOutputWithContext(ctx context.Context) ListenerRuleConditionHttpHeaderOutput {
	return o
}

func (o ListenerRuleConditionHttpHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleConditionHttpHeader] {
	return pulumix.Output[ListenerRuleConditionHttpHeader]{
		OutputState: o.OutputState,
	}
}

// Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
func (o ListenerRuleConditionHttpHeaderOutput) HttpHeaderName() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleConditionHttpHeader](o, func(v ListenerRuleConditionHttpHeader) string { return v.HttpHeaderName })
}

// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
func (o ListenerRuleConditionHttpHeaderOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ListenerRuleConditionHttpHeader](o, func(v ListenerRuleConditionHttpHeader) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ListenerRuleConditionHttpRequestMethod struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values []string `pulumi:"values"`
}

type ListenerRuleConditionHttpRequestMethodArgs struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ListenerRuleConditionHttpRequestMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionHttpRequestMethod)(nil)).Elem()
}

func (i ListenerRuleConditionHttpRequestMethodArgs) ToListenerRuleConditionHttpRequestMethodOutput() ListenerRuleConditionHttpRequestMethodOutput {
	return i.ToListenerRuleConditionHttpRequestMethodOutputWithContext(context.Background())
}

func (i ListenerRuleConditionHttpRequestMethodArgs) ToListenerRuleConditionHttpRequestMethodOutputWithContext(ctx context.Context) ListenerRuleConditionHttpRequestMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionHttpRequestMethodOutput)
}

func (i *ListenerRuleConditionHttpRequestMethodArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionHttpRequestMethodArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionHttpRequestMethodOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionHttpRequestMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionHttpRequestMethod)(nil)).Elem()
}

func (o ListenerRuleConditionHttpRequestMethodOutput) ToListenerRuleConditionHttpRequestMethodOutput() ListenerRuleConditionHttpRequestMethodOutput {
	return o
}

func (o ListenerRuleConditionHttpRequestMethodOutput) ToListenerRuleConditionHttpRequestMethodOutputWithContext(ctx context.Context) ListenerRuleConditionHttpRequestMethodOutput {
	return o
}

func (o ListenerRuleConditionHttpRequestMethodOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleConditionHttpRequestMethod] {
	return pulumix.Output[ListenerRuleConditionHttpRequestMethod]{
		OutputState: o.OutputState,
	}
}

// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
//
// Query String Value Blocks (for `query_string.values`) support the following:
func (o ListenerRuleConditionHttpRequestMethodOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ListenerRuleConditionHttpRequestMethod](o, func(v ListenerRuleConditionHttpRequestMethod) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ListenerRuleConditionPathPattern struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values []string `pulumi:"values"`
}

type ListenerRuleConditionPathPatternArgs struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ListenerRuleConditionPathPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionPathPattern)(nil)).Elem()
}

func (i ListenerRuleConditionPathPatternArgs) ToListenerRuleConditionPathPatternOutput() ListenerRuleConditionPathPatternOutput {
	return i.ToListenerRuleConditionPathPatternOutputWithContext(context.Background())
}

func (i ListenerRuleConditionPathPatternArgs) ToListenerRuleConditionPathPatternOutputWithContext(ctx context.Context) ListenerRuleConditionPathPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionPathPatternOutput)
}

func (i *ListenerRuleConditionPathPatternArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionPathPatternArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionPathPatternOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionPathPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionPathPattern)(nil)).Elem()
}

func (o ListenerRuleConditionPathPatternOutput) ToListenerRuleConditionPathPatternOutput() ListenerRuleConditionPathPatternOutput {
	return o
}

func (o ListenerRuleConditionPathPatternOutput) ToListenerRuleConditionPathPatternOutputWithContext(ctx context.Context) ListenerRuleConditionPathPatternOutput {
	return o
}

func (o ListenerRuleConditionPathPatternOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleConditionPathPattern] {
	return pulumix.Output[ListenerRuleConditionPathPattern]{
		OutputState: o.OutputState,
	}
}

// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
//
// Query String Value Blocks (for `query_string.values`) support the following:
func (o ListenerRuleConditionPathPatternOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ListenerRuleConditionPathPattern](o, func(v ListenerRuleConditionPathPattern) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ListenerRuleConditionQueryString struct {
	// Query string key pattern to match.
	Key *string `pulumi:"key"`
	// Query string value pattern to match.
	Value string `pulumi:"value"`
}

type ListenerRuleConditionQueryStringArgs struct {
	// Query string key pattern to match.
	Key pulumix.Input[*string] `pulumi:"key"`
	// Query string value pattern to match.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ListenerRuleConditionQueryStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionQueryString)(nil)).Elem()
}

func (i ListenerRuleConditionQueryStringArgs) ToListenerRuleConditionQueryStringOutput() ListenerRuleConditionQueryStringOutput {
	return i.ToListenerRuleConditionQueryStringOutputWithContext(context.Background())
}

func (i ListenerRuleConditionQueryStringArgs) ToListenerRuleConditionQueryStringOutputWithContext(ctx context.Context) ListenerRuleConditionQueryStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionQueryStringOutput)
}

func (i *ListenerRuleConditionQueryStringArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionQueryStringArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionQueryStringOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionQueryStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionQueryString)(nil)).Elem()
}

func (o ListenerRuleConditionQueryStringOutput) ToListenerRuleConditionQueryStringOutput() ListenerRuleConditionQueryStringOutput {
	return o
}

func (o ListenerRuleConditionQueryStringOutput) ToListenerRuleConditionQueryStringOutputWithContext(ctx context.Context) ListenerRuleConditionQueryStringOutput {
	return o
}

func (o ListenerRuleConditionQueryStringOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleConditionQueryString] {
	return pulumix.Output[ListenerRuleConditionQueryString]{
		OutputState: o.OutputState,
	}
}

// Query string key pattern to match.
func (o ListenerRuleConditionQueryStringOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[ListenerRuleConditionQueryString](o, func(v ListenerRuleConditionQueryString) *string { return v.Key })
}

// Query string value pattern to match.
func (o ListenerRuleConditionQueryStringOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ListenerRuleConditionQueryString](o, func(v ListenerRuleConditionQueryString) string { return v.Value })
}

type ListenerRuleConditionSourceIp struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values []string `pulumi:"values"`
}

type ListenerRuleConditionSourceIpArgs struct {
	// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
	//
	// Query String Value Blocks (for `query_string.values`) support the following:
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (ListenerRuleConditionSourceIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionSourceIp)(nil)).Elem()
}

func (i ListenerRuleConditionSourceIpArgs) ToListenerRuleConditionSourceIpOutput() ListenerRuleConditionSourceIpOutput {
	return i.ToListenerRuleConditionSourceIpOutputWithContext(context.Background())
}

func (i ListenerRuleConditionSourceIpArgs) ToListenerRuleConditionSourceIpOutputWithContext(ctx context.Context) ListenerRuleConditionSourceIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerRuleConditionSourceIpOutput)
}

func (i *ListenerRuleConditionSourceIpArgs) ToOutput(ctx context.Context) pulumix.Output[*ListenerRuleConditionSourceIpArgs] {
	return pulumix.Val(i)
}

type ListenerRuleConditionSourceIpOutput struct{ *pulumi.OutputState }

func (ListenerRuleConditionSourceIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRuleConditionSourceIp)(nil)).Elem()
}

func (o ListenerRuleConditionSourceIpOutput) ToListenerRuleConditionSourceIpOutput() ListenerRuleConditionSourceIpOutput {
	return o
}

func (o ListenerRuleConditionSourceIpOutput) ToListenerRuleConditionSourceIpOutputWithContext(ctx context.Context) ListenerRuleConditionSourceIpOutput {
	return o
}

func (o ListenerRuleConditionSourceIpOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRuleConditionSourceIp] {
	return pulumix.Output[ListenerRuleConditionSourceIp]{
		OutputState: o.OutputState,
	}
}

// List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
//
// Query String Value Blocks (for `query_string.values`) support the following:
func (o ListenerRuleConditionSourceIpOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ListenerRuleConditionSourceIp](o, func(v ListenerRuleConditionSourceIp) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type LoadBalancerAccessLogs struct {
	// The S3 bucket name to store the logs in.
	Bucket string `pulumi:"bucket"`
	// Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
	Enabled *bool `pulumi:"enabled"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	Prefix *string `pulumi:"prefix"`
}

type LoadBalancerAccessLogsArgs struct {
	// The S3 bucket name to store the logs in.
	Bucket pulumix.Input[string] `pulumi:"bucket"`
	// Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The S3 bucket prefix. Logs are stored in the root if not configured.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
}

func (LoadBalancerAccessLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogs)(nil)).Elem()
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput {
	return i.ToLoadBalancerAccessLogsOutputWithContext(context.Background())
}

func (i LoadBalancerAccessLogsArgs) ToLoadBalancerAccessLogsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAccessLogsOutput)
}

func (i *LoadBalancerAccessLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerAccessLogsArgs] {
	return pulumix.Val(i)
}

type LoadBalancerAccessLogsOutput struct{ *pulumi.OutputState }

func (LoadBalancerAccessLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAccessLogs)(nil)).Elem()
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsOutput() LoadBalancerAccessLogsOutput {
	return o
}

func (o LoadBalancerAccessLogsOutput) ToLoadBalancerAccessLogsOutputWithContext(ctx context.Context) LoadBalancerAccessLogsOutput {
	return o
}

func (o LoadBalancerAccessLogsOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerAccessLogs] {
	return pulumix.Output[LoadBalancerAccessLogs]{
		OutputState: o.OutputState,
	}
}

// The S3 bucket name to store the logs in.
func (o LoadBalancerAccessLogsOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) string { return v.Bucket })
}

// Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
func (o LoadBalancerAccessLogsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) *bool { return v.Enabled })
}

// The S3 bucket prefix. Logs are stored in the root if not configured.
func (o LoadBalancerAccessLogsOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerAccessLogs](o, func(v LoadBalancerAccessLogs) *string { return v.Prefix })
}

type LoadBalancerSubnetMapping struct {
	// The allocation ID of the Elastic IP address for an internet-facing load balancer.
	AllocationId *string `pulumi:"allocationId"`
	// The IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
	Ipv6Address *string `pulumi:"ipv6Address"`
	OutpostId   *string `pulumi:"outpostId"`
	// The private IPv4 address for an internal load balancer.
	PrivateIpv4Address *string `pulumi:"privateIpv4Address"`
	// ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
	SubnetId string `pulumi:"subnetId"`
}

type LoadBalancerSubnetMappingArgs struct {
	// The allocation ID of the Elastic IP address for an internet-facing load balancer.
	AllocationId pulumix.Input[*string] `pulumi:"allocationId"`
	// The IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
	Ipv6Address pulumix.Input[*string] `pulumi:"ipv6Address"`
	OutpostId   pulumix.Input[*string] `pulumi:"outpostId"`
	// The private IPv4 address for an internal load balancer.
	PrivateIpv4Address pulumix.Input[*string] `pulumi:"privateIpv4Address"`
	// ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
	SubnetId pulumix.Input[string] `pulumi:"subnetId"`
}

func (LoadBalancerSubnetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSubnetMapping)(nil)).Elem()
}

func (i LoadBalancerSubnetMappingArgs) ToLoadBalancerSubnetMappingOutput() LoadBalancerSubnetMappingOutput {
	return i.ToLoadBalancerSubnetMappingOutputWithContext(context.Background())
}

func (i LoadBalancerSubnetMappingArgs) ToLoadBalancerSubnetMappingOutputWithContext(ctx context.Context) LoadBalancerSubnetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSubnetMappingOutput)
}

func (i *LoadBalancerSubnetMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerSubnetMappingArgs] {
	return pulumix.Val(i)
}

type LoadBalancerSubnetMappingOutput struct{ *pulumi.OutputState }

func (LoadBalancerSubnetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSubnetMapping)(nil)).Elem()
}

func (o LoadBalancerSubnetMappingOutput) ToLoadBalancerSubnetMappingOutput() LoadBalancerSubnetMappingOutput {
	return o
}

func (o LoadBalancerSubnetMappingOutput) ToLoadBalancerSubnetMappingOutputWithContext(ctx context.Context) LoadBalancerSubnetMappingOutput {
	return o
}

func (o LoadBalancerSubnetMappingOutput) ToOutput(ctx context.Context) pulumix.Output[LoadBalancerSubnetMapping] {
	return pulumix.Output[LoadBalancerSubnetMapping]{
		OutputState: o.OutputState,
	}
}

// The allocation ID of the Elastic IP address for an internet-facing load balancer.
func (o LoadBalancerSubnetMappingOutput) AllocationId() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerSubnetMapping](o, func(v LoadBalancerSubnetMapping) *string { return v.AllocationId })
}

// The IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
func (o LoadBalancerSubnetMappingOutput) Ipv6Address() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerSubnetMapping](o, func(v LoadBalancerSubnetMapping) *string { return v.Ipv6Address })
}

func (o LoadBalancerSubnetMappingOutput) OutpostId() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerSubnetMapping](o, func(v LoadBalancerSubnetMapping) *string { return v.OutpostId })
}

// The private IPv4 address for an internal load balancer.
func (o LoadBalancerSubnetMappingOutput) PrivateIpv4Address() pulumix.Output[*string] {
	return pulumix.Apply[LoadBalancerSubnetMapping](o, func(v LoadBalancerSubnetMapping) *string { return v.PrivateIpv4Address })
}

// ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
func (o LoadBalancerSubnetMappingOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[LoadBalancerSubnetMapping](o, func(v LoadBalancerSubnetMapping) string { return v.SubnetId })
}

type TargetGroupHealthCheck struct {
	// Whether health checks are enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
	Interval *int `pulumi:"interval"`
	// Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
	Matcher *string `pulumi:"matcher"`
	// Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
	Path *string `pulumi:"path"`
	// The port the load balancer uses when performing health checks on targets. Default is traffic-port.
	Port *string `pulumi:"port"`
	// Protocol the load balancer uses when performing health checks on targets. Must be either `TCP`, `HTTP`, or `HTTPS`. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
	Protocol *string `pulumi:"protocol"`
	// Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
	Timeout *int `pulumi:"timeout"`
	// Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

type TargetGroupHealthCheckArgs struct {
	// Whether health checks are enabled. Defaults to `true`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
	HealthyThreshold pulumix.Input[*int] `pulumi:"healthyThreshold"`
	// Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
	Interval pulumix.Input[*int] `pulumi:"interval"`
	// Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
	Matcher pulumix.Input[*string] `pulumi:"matcher"`
	// Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
	Path pulumix.Input[*string] `pulumi:"path"`
	// The port the load balancer uses when performing health checks on targets. Default is traffic-port.
	Port pulumix.Input[*string] `pulumi:"port"`
	// Protocol the load balancer uses when performing health checks on targets. Must be either `TCP`, `HTTP`, or `HTTPS`. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
	Protocol pulumix.Input[*string] `pulumi:"protocol"`
	// Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
	Timeout pulumix.Input[*int] `pulumi:"timeout"`
	// Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
	UnhealthyThreshold pulumix.Input[*int] `pulumi:"unhealthyThreshold"`
}

func (TargetGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupHealthCheck)(nil)).Elem()
}

func (i TargetGroupHealthCheckArgs) ToTargetGroupHealthCheckOutput() TargetGroupHealthCheckOutput {
	return i.ToTargetGroupHealthCheckOutputWithContext(context.Background())
}

func (i TargetGroupHealthCheckArgs) ToTargetGroupHealthCheckOutputWithContext(ctx context.Context) TargetGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckOutput)
}

func (i *TargetGroupHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupHealthCheckArgs] {
	return pulumix.Val(i)
}

type TargetGroupHealthCheckOutput struct{ *pulumi.OutputState }

func (TargetGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupHealthCheck)(nil)).Elem()
}

func (o TargetGroupHealthCheckOutput) ToTargetGroupHealthCheckOutput() TargetGroupHealthCheckOutput {
	return o
}

func (o TargetGroupHealthCheckOutput) ToTargetGroupHealthCheckOutputWithContext(ctx context.Context) TargetGroupHealthCheckOutput {
	return o
}

func (o TargetGroupHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupHealthCheck] {
	return pulumix.Output[TargetGroupHealthCheck]{
		OutputState: o.OutputState,
	}
}

// Whether health checks are enabled. Defaults to `true`.
func (o TargetGroupHealthCheckOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *bool { return v.Enabled })
}

// Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
func (o TargetGroupHealthCheckOutput) HealthyThreshold() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *int { return v.HealthyThreshold })
}

// Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For `lambda` target groups, it needs to be greater than the timeout of the underlying `lambda`. Defaults to 30.
func (o TargetGroupHealthCheckOutput) Interval() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *int { return v.Interval })
}

// Response codes to use when checking for a healthy responses from a target. You can specify multiple values (for example, "200,202" for HTTP(s) or "0,12" for GRPC) or a range of values (for example, "200-299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
func (o TargetGroupHealthCheckOutput) Matcher() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *string { return v.Matcher })
}

// Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
func (o TargetGroupHealthCheckOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *string { return v.Path })
}

// The port the load balancer uses when performing health checks on targets. Default is traffic-port.
func (o TargetGroupHealthCheckOutput) Port() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *string { return v.Port })
}

// Protocol the load balancer uses when performing health checks on targets. Must be either `TCP`, `HTTP`, or `HTTPS`. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
func (o TargetGroupHealthCheckOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *string { return v.Protocol })
}

// Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
func (o TargetGroupHealthCheckOutput) Timeout() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *int { return v.Timeout })
}

// Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
func (o TargetGroupHealthCheckOutput) UnhealthyThreshold() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupHealthCheck](o, func(v TargetGroupHealthCheck) *int { return v.UnhealthyThreshold })
}

type TargetGroupStickiness struct {
	// Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
	CookieDuration *int `pulumi:"cookieDuration"`
	// Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `appCookie`.
	CookieName *string `pulumi:"cookieName"`
	// Boolean to enable / disable `stickiness`. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// The type of sticky sessions. The only current possible values are `lbCookie`, `appCookie` for ALBs, `sourceIp` for NLBs, and `sourceIpDestIp`, `sourceIpDestIpProto` for GWLBs.
	Type string `pulumi:"type"`
}

type TargetGroupStickinessArgs struct {
	// Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
	CookieDuration pulumix.Input[*int] `pulumi:"cookieDuration"`
	// Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `appCookie`.
	CookieName pulumix.Input[*string] `pulumi:"cookieName"`
	// Boolean to enable / disable `stickiness`. Default is `true`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The type of sticky sessions. The only current possible values are `lbCookie`, `appCookie` for ALBs, `sourceIp` for NLBs, and `sourceIpDestIp`, `sourceIpDestIpProto` for GWLBs.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TargetGroupStickinessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupStickiness)(nil)).Elem()
}

func (i TargetGroupStickinessArgs) ToTargetGroupStickinessOutput() TargetGroupStickinessOutput {
	return i.ToTargetGroupStickinessOutputWithContext(context.Background())
}

func (i TargetGroupStickinessArgs) ToTargetGroupStickinessOutputWithContext(ctx context.Context) TargetGroupStickinessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupStickinessOutput)
}

func (i *TargetGroupStickinessArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupStickinessArgs] {
	return pulumix.Val(i)
}

type TargetGroupStickinessOutput struct{ *pulumi.OutputState }

func (TargetGroupStickinessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupStickiness)(nil)).Elem()
}

func (o TargetGroupStickinessOutput) ToTargetGroupStickinessOutput() TargetGroupStickinessOutput {
	return o
}

func (o TargetGroupStickinessOutput) ToTargetGroupStickinessOutputWithContext(ctx context.Context) TargetGroupStickinessOutput {
	return o
}

func (o TargetGroupStickinessOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupStickiness] {
	return pulumix.Output[TargetGroupStickiness]{
		OutputState: o.OutputState,
	}
}

// Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
func (o TargetGroupStickinessOutput) CookieDuration() pulumix.Output[*int] {
	return pulumix.Apply[TargetGroupStickiness](o, func(v TargetGroupStickiness) *int { return v.CookieDuration })
}

// Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is `appCookie`.
func (o TargetGroupStickinessOutput) CookieName() pulumix.Output[*string] {
	return pulumix.Apply[TargetGroupStickiness](o, func(v TargetGroupStickiness) *string { return v.CookieName })
}

// Boolean to enable / disable `stickiness`. Default is `true`.
func (o TargetGroupStickinessOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[TargetGroupStickiness](o, func(v TargetGroupStickiness) *bool { return v.Enabled })
}

// The type of sticky sessions. The only current possible values are `lbCookie`, `appCookie` for ALBs, `sourceIp` for NLBs, and `sourceIpDestIp`, `sourceIpDestIpProto` for GWLBs.
func (o TargetGroupStickinessOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TargetGroupStickiness](o, func(v TargetGroupStickiness) string { return v.Type })
}

type TargetGroupTargetFailover struct {
	// Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onUnhealthy`. Default: `noRebalance`.
	OnDeregistration string `pulumi:"onDeregistration"`
	// Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onDeregistration`. Default: `noRebalance`.
	OnUnhealthy string `pulumi:"onUnhealthy"`
}

type TargetGroupTargetFailoverArgs struct {
	// Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onUnhealthy`. Default: `noRebalance`.
	OnDeregistration pulumix.Input[string] `pulumi:"onDeregistration"`
	// Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onDeregistration`. Default: `noRebalance`.
	OnUnhealthy pulumix.Input[string] `pulumi:"onUnhealthy"`
}

func (TargetGroupTargetFailoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupTargetFailover)(nil)).Elem()
}

func (i TargetGroupTargetFailoverArgs) ToTargetGroupTargetFailoverOutput() TargetGroupTargetFailoverOutput {
	return i.ToTargetGroupTargetFailoverOutputWithContext(context.Background())
}

func (i TargetGroupTargetFailoverArgs) ToTargetGroupTargetFailoverOutputWithContext(ctx context.Context) TargetGroupTargetFailoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupTargetFailoverOutput)
}

func (i *TargetGroupTargetFailoverArgs) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupTargetFailoverArgs] {
	return pulumix.Val(i)
}

type TargetGroupTargetFailoverOutput struct{ *pulumi.OutputState }

func (TargetGroupTargetFailoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupTargetFailover)(nil)).Elem()
}

func (o TargetGroupTargetFailoverOutput) ToTargetGroupTargetFailoverOutput() TargetGroupTargetFailoverOutput {
	return o
}

func (o TargetGroupTargetFailoverOutput) ToTargetGroupTargetFailoverOutputWithContext(ctx context.Context) TargetGroupTargetFailoverOutput {
	return o
}

func (o TargetGroupTargetFailoverOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupTargetFailover] {
	return pulumix.Output[TargetGroupTargetFailover]{
		OutputState: o.OutputState,
	}
}

// Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onUnhealthy`. Default: `noRebalance`.
func (o TargetGroupTargetFailoverOutput) OnDeregistration() pulumix.Output[string] {
	return pulumix.Apply[TargetGroupTargetFailover](o, func(v TargetGroupTargetFailover) string { return v.OnDeregistration })
}

// Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are `rebalance` and `noRebalance`. Must match the attribute value set for `onDeregistration`. Default: `noRebalance`.
func (o TargetGroupTargetFailoverOutput) OnUnhealthy() pulumix.Output[string] {
	return pulumix.Apply[TargetGroupTargetFailover](o, func(v TargetGroupTargetFailover) string { return v.OnUnhealthy })
}

type GetListenerDefaultAction struct {
	AuthenticateCognitos []GetListenerDefaultActionAuthenticateCognito `pulumi:"authenticateCognitos"`
	AuthenticateOidcs    []GetListenerDefaultActionAuthenticateOidc    `pulumi:"authenticateOidcs"`
	FixedResponses       []GetListenerDefaultActionFixedResponse       `pulumi:"fixedResponses"`
	Forwards             []GetListenerDefaultActionForward             `pulumi:"forwards"`
	Order                int                                           `pulumi:"order"`
	Redirects            []GetListenerDefaultActionRedirect            `pulumi:"redirects"`
	TargetGroupArn       string                                        `pulumi:"targetGroupArn"`
	Type                 string                                        `pulumi:"type"`
}

type GetListenerDefaultActionArgs struct {
	AuthenticateCognitos pulumix.Input[[]*GetListenerDefaultActionAuthenticateCognitoArgs] `pulumi:"authenticateCognitos"`
	AuthenticateOidcs    pulumix.Input[[]*GetListenerDefaultActionAuthenticateOidcArgs]    `pulumi:"authenticateOidcs"`
	FixedResponses       pulumix.Input[[]*GetListenerDefaultActionFixedResponseArgs]       `pulumi:"fixedResponses"`
	Forwards             pulumix.Input[[]*GetListenerDefaultActionForwardArgs]             `pulumi:"forwards"`
	Order                pulumix.Input[int]                                                `pulumi:"order"`
	Redirects            pulumix.Input[[]*GetListenerDefaultActionRedirectArgs]            `pulumi:"redirects"`
	TargetGroupArn       pulumix.Input[string]                                             `pulumi:"targetGroupArn"`
	Type                 pulumix.Input[string]                                             `pulumi:"type"`
}

func (GetListenerDefaultActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultAction)(nil)).Elem()
}

func (i GetListenerDefaultActionArgs) ToGetListenerDefaultActionOutput() GetListenerDefaultActionOutput {
	return i.ToGetListenerDefaultActionOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionArgs) ToGetListenerDefaultActionOutputWithContext(ctx context.Context) GetListenerDefaultActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionOutput)
}

func (i *GetListenerDefaultActionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultAction)(nil)).Elem()
}

func (o GetListenerDefaultActionOutput) ToGetListenerDefaultActionOutput() GetListenerDefaultActionOutput {
	return o
}

func (o GetListenerDefaultActionOutput) ToGetListenerDefaultActionOutputWithContext(ctx context.Context) GetListenerDefaultActionOutput {
	return o
}

func (o GetListenerDefaultActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultAction] {
	return pulumix.Output[GetListenerDefaultAction]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionOutput) AuthenticateCognitos() pulumix.GArrayOutput[GetListenerDefaultActionAuthenticateCognito, GetListenerDefaultActionAuthenticateCognitoOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionAuthenticateCognito {
		return v.AuthenticateCognitos
	})
	return pulumix.GArrayOutput[GetListenerDefaultActionAuthenticateCognito, GetListenerDefaultActionAuthenticateCognitoOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionOutput) AuthenticateOidcs() pulumix.GArrayOutput[GetListenerDefaultActionAuthenticateOidc, GetListenerDefaultActionAuthenticateOidcOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionAuthenticateOidc {
		return v.AuthenticateOidcs
	})
	return pulumix.GArrayOutput[GetListenerDefaultActionAuthenticateOidc, GetListenerDefaultActionAuthenticateOidcOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionOutput) FixedResponses() pulumix.GArrayOutput[GetListenerDefaultActionFixedResponse, GetListenerDefaultActionFixedResponseOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionFixedResponse { return v.FixedResponses })
	return pulumix.GArrayOutput[GetListenerDefaultActionFixedResponse, GetListenerDefaultActionFixedResponseOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionOutput) Forwards() pulumix.GArrayOutput[GetListenerDefaultActionForward, GetListenerDefaultActionForwardOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionForward { return v.Forwards })
	return pulumix.GArrayOutput[GetListenerDefaultActionForward, GetListenerDefaultActionForwardOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionOutput) Order() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) int { return v.Order })
}

func (o GetListenerDefaultActionOutput) Redirects() pulumix.GArrayOutput[GetListenerDefaultActionRedirect, GetListenerDefaultActionRedirectOutput] {
	value := pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) []GetListenerDefaultActionRedirect { return v.Redirects })
	return pulumix.GArrayOutput[GetListenerDefaultActionRedirect, GetListenerDefaultActionRedirectOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionOutput) TargetGroupArn() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) string { return v.TargetGroupArn })
}

func (o GetListenerDefaultActionOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultAction](o, func(v GetListenerDefaultAction) string { return v.Type })
}

type GetListenerDefaultActionAuthenticateCognito struct {
	AuthenticationRequestExtraParams map[string]string `pulumi:"authenticationRequestExtraParams"`
	OnUnauthenticatedRequest         string            `pulumi:"onUnauthenticatedRequest"`
	Scope                            string            `pulumi:"scope"`
	SessionCookieName                string            `pulumi:"sessionCookieName"`
	SessionTimeout                   int               `pulumi:"sessionTimeout"`
	UserPoolArn                      string            `pulumi:"userPoolArn"`
	UserPoolClientId                 string            `pulumi:"userPoolClientId"`
	UserPoolDomain                   string            `pulumi:"userPoolDomain"`
}

type GetListenerDefaultActionAuthenticateCognitoArgs struct {
	AuthenticationRequestExtraParams pulumix.Input[map[string]string] `pulumi:"authenticationRequestExtraParams"`
	OnUnauthenticatedRequest         pulumix.Input[string]            `pulumi:"onUnauthenticatedRequest"`
	Scope                            pulumix.Input[string]            `pulumi:"scope"`
	SessionCookieName                pulumix.Input[string]            `pulumi:"sessionCookieName"`
	SessionTimeout                   pulumix.Input[int]               `pulumi:"sessionTimeout"`
	UserPoolArn                      pulumix.Input[string]            `pulumi:"userPoolArn"`
	UserPoolClientId                 pulumix.Input[string]            `pulumi:"userPoolClientId"`
	UserPoolDomain                   pulumix.Input[string]            `pulumi:"userPoolDomain"`
}

func (GetListenerDefaultActionAuthenticateCognitoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionAuthenticateCognito)(nil)).Elem()
}

func (i GetListenerDefaultActionAuthenticateCognitoArgs) ToGetListenerDefaultActionAuthenticateCognitoOutput() GetListenerDefaultActionAuthenticateCognitoOutput {
	return i.ToGetListenerDefaultActionAuthenticateCognitoOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionAuthenticateCognitoArgs) ToGetListenerDefaultActionAuthenticateCognitoOutputWithContext(ctx context.Context) GetListenerDefaultActionAuthenticateCognitoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionAuthenticateCognitoOutput)
}

func (i *GetListenerDefaultActionAuthenticateCognitoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionAuthenticateCognitoArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionAuthenticateCognitoOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionAuthenticateCognitoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionAuthenticateCognito)(nil)).Elem()
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) ToGetListenerDefaultActionAuthenticateCognitoOutput() GetListenerDefaultActionAuthenticateCognitoOutput {
	return o
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) ToGetListenerDefaultActionAuthenticateCognitoOutputWithContext(ctx context.Context) GetListenerDefaultActionAuthenticateCognitoOutput {
	return o
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionAuthenticateCognito] {
	return pulumix.Output[GetListenerDefaultActionAuthenticateCognito]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) AuthenticationRequestExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) map[string]string {
		return v.AuthenticationRequestExtraParams
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) OnUnauthenticatedRequest() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) string { return v.OnUnauthenticatedRequest })
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) Scope() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) string { return v.Scope })
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) SessionCookieName() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) string { return v.SessionCookieName })
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) SessionTimeout() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) int { return v.SessionTimeout })
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) UserPoolArn() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) string { return v.UserPoolArn })
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) UserPoolClientId() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) string { return v.UserPoolClientId })
}

func (o GetListenerDefaultActionAuthenticateCognitoOutput) UserPoolDomain() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateCognito](o, func(v GetListenerDefaultActionAuthenticateCognito) string { return v.UserPoolDomain })
}

type GetListenerDefaultActionAuthenticateOidc struct {
	AuthenticationRequestExtraParams map[string]string `pulumi:"authenticationRequestExtraParams"`
	AuthorizationEndpoint            string            `pulumi:"authorizationEndpoint"`
	ClientId                         string            `pulumi:"clientId"`
	ClientSecret                     string            `pulumi:"clientSecret"`
	Issuer                           string            `pulumi:"issuer"`
	OnUnauthenticatedRequest         string            `pulumi:"onUnauthenticatedRequest"`
	Scope                            string            `pulumi:"scope"`
	SessionCookieName                string            `pulumi:"sessionCookieName"`
	SessionTimeout                   int               `pulumi:"sessionTimeout"`
	TokenEndpoint                    string            `pulumi:"tokenEndpoint"`
	UserInfoEndpoint                 string            `pulumi:"userInfoEndpoint"`
}

type GetListenerDefaultActionAuthenticateOidcArgs struct {
	AuthenticationRequestExtraParams pulumix.Input[map[string]string] `pulumi:"authenticationRequestExtraParams"`
	AuthorizationEndpoint            pulumix.Input[string]            `pulumi:"authorizationEndpoint"`
	ClientId                         pulumix.Input[string]            `pulumi:"clientId"`
	ClientSecret                     pulumix.Input[string]            `pulumi:"clientSecret"`
	Issuer                           pulumix.Input[string]            `pulumi:"issuer"`
	OnUnauthenticatedRequest         pulumix.Input[string]            `pulumi:"onUnauthenticatedRequest"`
	Scope                            pulumix.Input[string]            `pulumi:"scope"`
	SessionCookieName                pulumix.Input[string]            `pulumi:"sessionCookieName"`
	SessionTimeout                   pulumix.Input[int]               `pulumi:"sessionTimeout"`
	TokenEndpoint                    pulumix.Input[string]            `pulumi:"tokenEndpoint"`
	UserInfoEndpoint                 pulumix.Input[string]            `pulumi:"userInfoEndpoint"`
}

func (GetListenerDefaultActionAuthenticateOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionAuthenticateOidc)(nil)).Elem()
}

func (i GetListenerDefaultActionAuthenticateOidcArgs) ToGetListenerDefaultActionAuthenticateOidcOutput() GetListenerDefaultActionAuthenticateOidcOutput {
	return i.ToGetListenerDefaultActionAuthenticateOidcOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionAuthenticateOidcArgs) ToGetListenerDefaultActionAuthenticateOidcOutputWithContext(ctx context.Context) GetListenerDefaultActionAuthenticateOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionAuthenticateOidcOutput)
}

func (i *GetListenerDefaultActionAuthenticateOidcArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionAuthenticateOidcArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionAuthenticateOidcOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionAuthenticateOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionAuthenticateOidc)(nil)).Elem()
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) ToGetListenerDefaultActionAuthenticateOidcOutput() GetListenerDefaultActionAuthenticateOidcOutput {
	return o
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) ToGetListenerDefaultActionAuthenticateOidcOutputWithContext(ctx context.Context) GetListenerDefaultActionAuthenticateOidcOutput {
	return o
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionAuthenticateOidc] {
	return pulumix.Output[GetListenerDefaultActionAuthenticateOidc]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) AuthenticationRequestExtraParams() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) map[string]string {
		return v.AuthenticationRequestExtraParams
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) AuthorizationEndpoint() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.AuthorizationEndpoint })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.ClientId })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.ClientSecret })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) Issuer() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.Issuer })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) OnUnauthenticatedRequest() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.OnUnauthenticatedRequest })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) Scope() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.Scope })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) SessionCookieName() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.SessionCookieName })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) SessionTimeout() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) int { return v.SessionTimeout })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) TokenEndpoint() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.TokenEndpoint })
}

func (o GetListenerDefaultActionAuthenticateOidcOutput) UserInfoEndpoint() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionAuthenticateOidc](o, func(v GetListenerDefaultActionAuthenticateOidc) string { return v.UserInfoEndpoint })
}

type GetListenerDefaultActionFixedResponse struct {
	ContentType string `pulumi:"contentType"`
	MessageBody string `pulumi:"messageBody"`
	StatusCode  string `pulumi:"statusCode"`
}

type GetListenerDefaultActionFixedResponseArgs struct {
	ContentType pulumix.Input[string] `pulumi:"contentType"`
	MessageBody pulumix.Input[string] `pulumi:"messageBody"`
	StatusCode  pulumix.Input[string] `pulumi:"statusCode"`
}

func (GetListenerDefaultActionFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (i GetListenerDefaultActionFixedResponseArgs) ToGetListenerDefaultActionFixedResponseOutput() GetListenerDefaultActionFixedResponseOutput {
	return i.ToGetListenerDefaultActionFixedResponseOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionFixedResponseArgs) ToGetListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) GetListenerDefaultActionFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionFixedResponseOutput)
}

func (i *GetListenerDefaultActionFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionFixedResponseArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionFixedResponseOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionFixedResponse)(nil)).Elem()
}

func (o GetListenerDefaultActionFixedResponseOutput) ToGetListenerDefaultActionFixedResponseOutput() GetListenerDefaultActionFixedResponseOutput {
	return o
}

func (o GetListenerDefaultActionFixedResponseOutput) ToGetListenerDefaultActionFixedResponseOutputWithContext(ctx context.Context) GetListenerDefaultActionFixedResponseOutput {
	return o
}

func (o GetListenerDefaultActionFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionFixedResponse] {
	return pulumix.Output[GetListenerDefaultActionFixedResponse]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionFixedResponseOutput) ContentType() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionFixedResponse](o, func(v GetListenerDefaultActionFixedResponse) string { return v.ContentType })
}

func (o GetListenerDefaultActionFixedResponseOutput) MessageBody() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionFixedResponse](o, func(v GetListenerDefaultActionFixedResponse) string { return v.MessageBody })
}

func (o GetListenerDefaultActionFixedResponseOutput) StatusCode() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionFixedResponse](o, func(v GetListenerDefaultActionFixedResponse) string { return v.StatusCode })
}

type GetListenerDefaultActionForward struct {
	Stickinesses []GetListenerDefaultActionForwardStickiness  `pulumi:"stickinesses"`
	TargetGroups []GetListenerDefaultActionForwardTargetGroup `pulumi:"targetGroups"`
}

type GetListenerDefaultActionForwardArgs struct {
	Stickinesses pulumix.Input[[]*GetListenerDefaultActionForwardStickinessArgs]  `pulumi:"stickinesses"`
	TargetGroups pulumix.Input[[]*GetListenerDefaultActionForwardTargetGroupArgs] `pulumi:"targetGroups"`
}

func (GetListenerDefaultActionForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForward)(nil)).Elem()
}

func (i GetListenerDefaultActionForwardArgs) ToGetListenerDefaultActionForwardOutput() GetListenerDefaultActionForwardOutput {
	return i.ToGetListenerDefaultActionForwardOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionForwardArgs) ToGetListenerDefaultActionForwardOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionForwardOutput)
}

func (i *GetListenerDefaultActionForwardArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionForwardArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionForwardOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForward)(nil)).Elem()
}

func (o GetListenerDefaultActionForwardOutput) ToGetListenerDefaultActionForwardOutput() GetListenerDefaultActionForwardOutput {
	return o
}

func (o GetListenerDefaultActionForwardOutput) ToGetListenerDefaultActionForwardOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardOutput {
	return o
}

func (o GetListenerDefaultActionForwardOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionForward] {
	return pulumix.Output[GetListenerDefaultActionForward]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionForwardOutput) Stickinesses() pulumix.GArrayOutput[GetListenerDefaultActionForwardStickiness, GetListenerDefaultActionForwardStickinessOutput] {
	value := pulumix.Apply[GetListenerDefaultActionForward](o, func(v GetListenerDefaultActionForward) []GetListenerDefaultActionForwardStickiness {
		return v.Stickinesses
	})
	return pulumix.GArrayOutput[GetListenerDefaultActionForwardStickiness, GetListenerDefaultActionForwardStickinessOutput]{OutputState: value.OutputState}
}

func (o GetListenerDefaultActionForwardOutput) TargetGroups() pulumix.GArrayOutput[GetListenerDefaultActionForwardTargetGroup, GetListenerDefaultActionForwardTargetGroupOutput] {
	value := pulumix.Apply[GetListenerDefaultActionForward](o, func(v GetListenerDefaultActionForward) []GetListenerDefaultActionForwardTargetGroup {
		return v.TargetGroups
	})
	return pulumix.GArrayOutput[GetListenerDefaultActionForwardTargetGroup, GetListenerDefaultActionForwardTargetGroupOutput]{OutputState: value.OutputState}
}

type GetListenerDefaultActionForwardStickiness struct {
	Duration int  `pulumi:"duration"`
	Enabled  bool `pulumi:"enabled"`
}

type GetListenerDefaultActionForwardStickinessArgs struct {
	Duration pulumix.Input[int]  `pulumi:"duration"`
	Enabled  pulumix.Input[bool] `pulumi:"enabled"`
}

func (GetListenerDefaultActionForwardStickinessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForwardStickiness)(nil)).Elem()
}

func (i GetListenerDefaultActionForwardStickinessArgs) ToGetListenerDefaultActionForwardStickinessOutput() GetListenerDefaultActionForwardStickinessOutput {
	return i.ToGetListenerDefaultActionForwardStickinessOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionForwardStickinessArgs) ToGetListenerDefaultActionForwardStickinessOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardStickinessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionForwardStickinessOutput)
}

func (i *GetListenerDefaultActionForwardStickinessArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionForwardStickinessArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionForwardStickinessOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionForwardStickinessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForwardStickiness)(nil)).Elem()
}

func (o GetListenerDefaultActionForwardStickinessOutput) ToGetListenerDefaultActionForwardStickinessOutput() GetListenerDefaultActionForwardStickinessOutput {
	return o
}

func (o GetListenerDefaultActionForwardStickinessOutput) ToGetListenerDefaultActionForwardStickinessOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardStickinessOutput {
	return o
}

func (o GetListenerDefaultActionForwardStickinessOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionForwardStickiness] {
	return pulumix.Output[GetListenerDefaultActionForwardStickiness]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionForwardStickinessOutput) Duration() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultActionForwardStickiness](o, func(v GetListenerDefaultActionForwardStickiness) int { return v.Duration })
}

func (o GetListenerDefaultActionForwardStickinessOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetListenerDefaultActionForwardStickiness](o, func(v GetListenerDefaultActionForwardStickiness) bool { return v.Enabled })
}

type GetListenerDefaultActionForwardTargetGroup struct {
	// ARN of the listener. Required if `loadBalancerArn` and `port` is not set.
	Arn    string `pulumi:"arn"`
	Weight int    `pulumi:"weight"`
}

type GetListenerDefaultActionForwardTargetGroupArgs struct {
	// ARN of the listener. Required if `loadBalancerArn` and `port` is not set.
	Arn    pulumix.Input[string] `pulumi:"arn"`
	Weight pulumix.Input[int]    `pulumi:"weight"`
}

func (GetListenerDefaultActionForwardTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (i GetListenerDefaultActionForwardTargetGroupArgs) ToGetListenerDefaultActionForwardTargetGroupOutput() GetListenerDefaultActionForwardTargetGroupOutput {
	return i.ToGetListenerDefaultActionForwardTargetGroupOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionForwardTargetGroupArgs) ToGetListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionForwardTargetGroupOutput)
}

func (i *GetListenerDefaultActionForwardTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionForwardTargetGroupArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionForwardTargetGroupOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionForwardTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionForwardTargetGroup)(nil)).Elem()
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) ToGetListenerDefaultActionForwardTargetGroupOutput() GetListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) ToGetListenerDefaultActionForwardTargetGroupOutputWithContext(ctx context.Context) GetListenerDefaultActionForwardTargetGroupOutput {
	return o
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionForwardTargetGroup] {
	return pulumix.Output[GetListenerDefaultActionForwardTargetGroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the listener. Required if `loadBalancerArn` and `port` is not set.
func (o GetListenerDefaultActionForwardTargetGroupOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionForwardTargetGroup](o, func(v GetListenerDefaultActionForwardTargetGroup) string { return v.Arn })
}

func (o GetListenerDefaultActionForwardTargetGroupOutput) Weight() pulumix.Output[int] {
	return pulumix.Apply[GetListenerDefaultActionForwardTargetGroup](o, func(v GetListenerDefaultActionForwardTargetGroup) int { return v.Weight })
}

type GetListenerDefaultActionRedirect struct {
	Host string `pulumi:"host"`
	Path string `pulumi:"path"`
	// Port of the listener. Required if `arn` is not set.
	Port       string `pulumi:"port"`
	Protocol   string `pulumi:"protocol"`
	Query      string `pulumi:"query"`
	StatusCode string `pulumi:"statusCode"`
}

type GetListenerDefaultActionRedirectArgs struct {
	Host pulumix.Input[string] `pulumi:"host"`
	Path pulumix.Input[string] `pulumi:"path"`
	// Port of the listener. Required if `arn` is not set.
	Port       pulumix.Input[string] `pulumi:"port"`
	Protocol   pulumix.Input[string] `pulumi:"protocol"`
	Query      pulumix.Input[string] `pulumi:"query"`
	StatusCode pulumix.Input[string] `pulumi:"statusCode"`
}

func (GetListenerDefaultActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionRedirect)(nil)).Elem()
}

func (i GetListenerDefaultActionRedirectArgs) ToGetListenerDefaultActionRedirectOutput() GetListenerDefaultActionRedirectOutput {
	return i.ToGetListenerDefaultActionRedirectOutputWithContext(context.Background())
}

func (i GetListenerDefaultActionRedirectArgs) ToGetListenerDefaultActionRedirectOutputWithContext(ctx context.Context) GetListenerDefaultActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerDefaultActionRedirectOutput)
}

func (i *GetListenerDefaultActionRedirectArgs) ToOutput(ctx context.Context) pulumix.Output[*GetListenerDefaultActionRedirectArgs] {
	return pulumix.Val(i)
}

type GetListenerDefaultActionRedirectOutput struct{ *pulumi.OutputState }

func (GetListenerDefaultActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerDefaultActionRedirect)(nil)).Elem()
}

func (o GetListenerDefaultActionRedirectOutput) ToGetListenerDefaultActionRedirectOutput() GetListenerDefaultActionRedirectOutput {
	return o
}

func (o GetListenerDefaultActionRedirectOutput) ToGetListenerDefaultActionRedirectOutputWithContext(ctx context.Context) GetListenerDefaultActionRedirectOutput {
	return o
}

func (o GetListenerDefaultActionRedirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetListenerDefaultActionRedirect] {
	return pulumix.Output[GetListenerDefaultActionRedirect]{
		OutputState: o.OutputState,
	}
}

func (o GetListenerDefaultActionRedirectOutput) Host() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionRedirect](o, func(v GetListenerDefaultActionRedirect) string { return v.Host })
}

func (o GetListenerDefaultActionRedirectOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionRedirect](o, func(v GetListenerDefaultActionRedirect) string { return v.Path })
}

// Port of the listener. Required if `arn` is not set.
func (o GetListenerDefaultActionRedirectOutput) Port() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionRedirect](o, func(v GetListenerDefaultActionRedirect) string { return v.Port })
}

func (o GetListenerDefaultActionRedirectOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionRedirect](o, func(v GetListenerDefaultActionRedirect) string { return v.Protocol })
}

func (o GetListenerDefaultActionRedirectOutput) Query() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionRedirect](o, func(v GetListenerDefaultActionRedirect) string { return v.Query })
}

func (o GetListenerDefaultActionRedirectOutput) StatusCode() pulumix.Output[string] {
	return pulumix.Apply[GetListenerDefaultActionRedirect](o, func(v GetListenerDefaultActionRedirect) string { return v.StatusCode })
}

type GetLoadBalancerAccessLogs struct {
	Bucket  string `pulumi:"bucket"`
	Enabled bool   `pulumi:"enabled"`
	Prefix  string `pulumi:"prefix"`
}

type GetLoadBalancerAccessLogsArgs struct {
	Bucket  pulumix.Input[string] `pulumi:"bucket"`
	Enabled pulumix.Input[bool]   `pulumi:"enabled"`
	Prefix  pulumix.Input[string] `pulumi:"prefix"`
}

func (GetLoadBalancerAccessLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAccessLogs)(nil)).Elem()
}

func (i GetLoadBalancerAccessLogsArgs) ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput {
	return i.ToGetLoadBalancerAccessLogsOutputWithContext(context.Background())
}

func (i GetLoadBalancerAccessLogsArgs) ToGetLoadBalancerAccessLogsOutputWithContext(ctx context.Context) GetLoadBalancerAccessLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerAccessLogsOutput)
}

func (i *GetLoadBalancerAccessLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLoadBalancerAccessLogsArgs] {
	return pulumix.Val(i)
}

type GetLoadBalancerAccessLogsOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerAccessLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAccessLogs)(nil)).Elem()
}

func (o GetLoadBalancerAccessLogsOutput) ToGetLoadBalancerAccessLogsOutput() GetLoadBalancerAccessLogsOutput {
	return o
}

func (o GetLoadBalancerAccessLogsOutput) ToGetLoadBalancerAccessLogsOutputWithContext(ctx context.Context) GetLoadBalancerAccessLogsOutput {
	return o
}

func (o GetLoadBalancerAccessLogsOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoadBalancerAccessLogs] {
	return pulumix.Output[GetLoadBalancerAccessLogs]{
		OutputState: o.OutputState,
	}
}

func (o GetLoadBalancerAccessLogsOutput) Bucket() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) string { return v.Bucket })
}

func (o GetLoadBalancerAccessLogsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) bool { return v.Enabled })
}

func (o GetLoadBalancerAccessLogsOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerAccessLogs](o, func(v GetLoadBalancerAccessLogs) string { return v.Prefix })
}

type GetLoadBalancerSubnetMapping struct {
	AllocationId       string `pulumi:"allocationId"`
	Ipv6Address        string `pulumi:"ipv6Address"`
	OutpostId          string `pulumi:"outpostId"`
	PrivateIpv4Address string `pulumi:"privateIpv4Address"`
	SubnetId           string `pulumi:"subnetId"`
}

type GetLoadBalancerSubnetMappingArgs struct {
	AllocationId       pulumix.Input[string] `pulumi:"allocationId"`
	Ipv6Address        pulumix.Input[string] `pulumi:"ipv6Address"`
	OutpostId          pulumix.Input[string] `pulumi:"outpostId"`
	PrivateIpv4Address pulumix.Input[string] `pulumi:"privateIpv4Address"`
	SubnetId           pulumix.Input[string] `pulumi:"subnetId"`
}

func (GetLoadBalancerSubnetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerSubnetMapping)(nil)).Elem()
}

func (i GetLoadBalancerSubnetMappingArgs) ToGetLoadBalancerSubnetMappingOutput() GetLoadBalancerSubnetMappingOutput {
	return i.ToGetLoadBalancerSubnetMappingOutputWithContext(context.Background())
}

func (i GetLoadBalancerSubnetMappingArgs) ToGetLoadBalancerSubnetMappingOutputWithContext(ctx context.Context) GetLoadBalancerSubnetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerSubnetMappingOutput)
}

func (i *GetLoadBalancerSubnetMappingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetLoadBalancerSubnetMappingArgs] {
	return pulumix.Val(i)
}

type GetLoadBalancerSubnetMappingOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerSubnetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerSubnetMapping)(nil)).Elem()
}

func (o GetLoadBalancerSubnetMappingOutput) ToGetLoadBalancerSubnetMappingOutput() GetLoadBalancerSubnetMappingOutput {
	return o
}

func (o GetLoadBalancerSubnetMappingOutput) ToGetLoadBalancerSubnetMappingOutputWithContext(ctx context.Context) GetLoadBalancerSubnetMappingOutput {
	return o
}

func (o GetLoadBalancerSubnetMappingOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoadBalancerSubnetMapping] {
	return pulumix.Output[GetLoadBalancerSubnetMapping]{
		OutputState: o.OutputState,
	}
}

func (o GetLoadBalancerSubnetMappingOutput) AllocationId() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerSubnetMapping](o, func(v GetLoadBalancerSubnetMapping) string { return v.AllocationId })
}

func (o GetLoadBalancerSubnetMappingOutput) Ipv6Address() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerSubnetMapping](o, func(v GetLoadBalancerSubnetMapping) string { return v.Ipv6Address })
}

func (o GetLoadBalancerSubnetMappingOutput) OutpostId() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerSubnetMapping](o, func(v GetLoadBalancerSubnetMapping) string { return v.OutpostId })
}

func (o GetLoadBalancerSubnetMappingOutput) PrivateIpv4Address() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerSubnetMapping](o, func(v GetLoadBalancerSubnetMapping) string { return v.PrivateIpv4Address })
}

func (o GetLoadBalancerSubnetMappingOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[GetLoadBalancerSubnetMapping](o, func(v GetLoadBalancerSubnetMapping) string { return v.SubnetId })
}

type GetTargetGroupHealthCheck struct {
	Enabled            bool   `pulumi:"enabled"`
	HealthyThreshold   int    `pulumi:"healthyThreshold"`
	Interval           int    `pulumi:"interval"`
	Matcher            string `pulumi:"matcher"`
	Path               string `pulumi:"path"`
	Port               string `pulumi:"port"`
	Protocol           string `pulumi:"protocol"`
	Timeout            int    `pulumi:"timeout"`
	UnhealthyThreshold int    `pulumi:"unhealthyThreshold"`
}

type GetTargetGroupHealthCheckArgs struct {
	Enabled            pulumix.Input[bool]   `pulumi:"enabled"`
	HealthyThreshold   pulumix.Input[int]    `pulumi:"healthyThreshold"`
	Interval           pulumix.Input[int]    `pulumi:"interval"`
	Matcher            pulumix.Input[string] `pulumi:"matcher"`
	Path               pulumix.Input[string] `pulumi:"path"`
	Port               pulumix.Input[string] `pulumi:"port"`
	Protocol           pulumix.Input[string] `pulumi:"protocol"`
	Timeout            pulumix.Input[int]    `pulumi:"timeout"`
	UnhealthyThreshold pulumix.Input[int]    `pulumi:"unhealthyThreshold"`
}

func (GetTargetGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetGroupHealthCheck)(nil)).Elem()
}

func (i GetTargetGroupHealthCheckArgs) ToGetTargetGroupHealthCheckOutput() GetTargetGroupHealthCheckOutput {
	return i.ToGetTargetGroupHealthCheckOutputWithContext(context.Background())
}

func (i GetTargetGroupHealthCheckArgs) ToGetTargetGroupHealthCheckOutputWithContext(ctx context.Context) GetTargetGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTargetGroupHealthCheckOutput)
}

func (i *GetTargetGroupHealthCheckArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTargetGroupHealthCheckArgs] {
	return pulumix.Val(i)
}

type GetTargetGroupHealthCheckOutput struct{ *pulumi.OutputState }

func (GetTargetGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetGroupHealthCheck)(nil)).Elem()
}

func (o GetTargetGroupHealthCheckOutput) ToGetTargetGroupHealthCheckOutput() GetTargetGroupHealthCheckOutput {
	return o
}

func (o GetTargetGroupHealthCheckOutput) ToGetTargetGroupHealthCheckOutputWithContext(ctx context.Context) GetTargetGroupHealthCheckOutput {
	return o
}

func (o GetTargetGroupHealthCheckOutput) ToOutput(ctx context.Context) pulumix.Output[GetTargetGroupHealthCheck] {
	return pulumix.Output[GetTargetGroupHealthCheck]{
		OutputState: o.OutputState,
	}
}

func (o GetTargetGroupHealthCheckOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) bool { return v.Enabled })
}

func (o GetTargetGroupHealthCheckOutput) HealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) int { return v.HealthyThreshold })
}

func (o GetTargetGroupHealthCheckOutput) Interval() pulumix.Output[int] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) int { return v.Interval })
}

func (o GetTargetGroupHealthCheckOutput) Matcher() pulumix.Output[string] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) string { return v.Matcher })
}

func (o GetTargetGroupHealthCheckOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) string { return v.Path })
}

func (o GetTargetGroupHealthCheckOutput) Port() pulumix.Output[string] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) string { return v.Port })
}

func (o GetTargetGroupHealthCheckOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) string { return v.Protocol })
}

func (o GetTargetGroupHealthCheckOutput) Timeout() pulumix.Output[int] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) int { return v.Timeout })
}

func (o GetTargetGroupHealthCheckOutput) UnhealthyThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetTargetGroupHealthCheck](o, func(v GetTargetGroupHealthCheck) int { return v.UnhealthyThreshold })
}

type GetTargetGroupStickiness struct {
	CookieDuration int    `pulumi:"cookieDuration"`
	CookieName     string `pulumi:"cookieName"`
	Enabled        bool   `pulumi:"enabled"`
	Type           string `pulumi:"type"`
}

type GetTargetGroupStickinessArgs struct {
	CookieDuration pulumix.Input[int]    `pulumi:"cookieDuration"`
	CookieName     pulumix.Input[string] `pulumi:"cookieName"`
	Enabled        pulumix.Input[bool]   `pulumi:"enabled"`
	Type           pulumix.Input[string] `pulumi:"type"`
}

func (GetTargetGroupStickinessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetGroupStickiness)(nil)).Elem()
}

func (i GetTargetGroupStickinessArgs) ToGetTargetGroupStickinessOutput() GetTargetGroupStickinessOutput {
	return i.ToGetTargetGroupStickinessOutputWithContext(context.Background())
}

func (i GetTargetGroupStickinessArgs) ToGetTargetGroupStickinessOutputWithContext(ctx context.Context) GetTargetGroupStickinessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTargetGroupStickinessOutput)
}

func (i *GetTargetGroupStickinessArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTargetGroupStickinessArgs] {
	return pulumix.Val(i)
}

type GetTargetGroupStickinessOutput struct{ *pulumi.OutputState }

func (GetTargetGroupStickinessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetGroupStickiness)(nil)).Elem()
}

func (o GetTargetGroupStickinessOutput) ToGetTargetGroupStickinessOutput() GetTargetGroupStickinessOutput {
	return o
}

func (o GetTargetGroupStickinessOutput) ToGetTargetGroupStickinessOutputWithContext(ctx context.Context) GetTargetGroupStickinessOutput {
	return o
}

func (o GetTargetGroupStickinessOutput) ToOutput(ctx context.Context) pulumix.Output[GetTargetGroupStickiness] {
	return pulumix.Output[GetTargetGroupStickiness]{
		OutputState: o.OutputState,
	}
}

func (o GetTargetGroupStickinessOutput) CookieDuration() pulumix.Output[int] {
	return pulumix.Apply[GetTargetGroupStickiness](o, func(v GetTargetGroupStickiness) int { return v.CookieDuration })
}

func (o GetTargetGroupStickinessOutput) CookieName() pulumix.Output[string] {
	return pulumix.Apply[GetTargetGroupStickiness](o, func(v GetTargetGroupStickiness) string { return v.CookieName })
}

func (o GetTargetGroupStickinessOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[GetTargetGroupStickiness](o, func(v GetTargetGroupStickiness) bool { return v.Enabled })
}

func (o GetTargetGroupStickinessOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetTargetGroupStickiness](o, func(v GetTargetGroupStickiness) string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(ListenerDefaultActionOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionAuthenticateCognitoOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionAuthenticateOidcOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionFixedResponseOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionForwardOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionForwardStickinessOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionForwardTargetGroupOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionRedirectOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionAuthenticateCognitoOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionAuthenticateOidcOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionFixedResponseOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionForwardOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionForwardStickinessOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionForwardTargetGroupOutput{})
	pulumi.RegisterOutputType(ListenerRuleActionRedirectOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionHostHeaderOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionHttpHeaderOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionHttpRequestMethodOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionPathPatternOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionQueryStringOutput{})
	pulumi.RegisterOutputType(ListenerRuleConditionSourceIpOutput{})
	pulumi.RegisterOutputType(LoadBalancerAccessLogsOutput{})
	pulumi.RegisterOutputType(LoadBalancerSubnetMappingOutput{})
	pulumi.RegisterOutputType(TargetGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(TargetGroupStickinessOutput{})
	pulumi.RegisterOutputType(TargetGroupTargetFailoverOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionAuthenticateCognitoOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionAuthenticateOidcOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionFixedResponseOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionForwardOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionForwardStickinessOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionForwardTargetGroupOutput{})
	pulumi.RegisterOutputType(GetListenerDefaultActionRedirectOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerAccessLogsOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerSubnetMappingOutput{})
	pulumi.RegisterOutputType(GetTargetGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(GetTargetGroupStickinessOutput{})
}
