// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS Audit Manager Control.
func LookupControl(ctx *pulumi.Context, args *LookupControlArgs, opts ...pulumi.InvokeOption) (*LookupControlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupControlResult
	err := ctx.Invoke("aws:auditmanager/getControl:getControl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getControl.
type LookupControlArgs struct {
	ControlMappingSources []GetControlControlMappingSource `pulumi:"controlMappingSources"`
	// Name of the control.
	Name string `pulumi:"name"`
	// Type of control. Valid values are `Custom` and `Standard`.
	Type string `pulumi:"type"`
}

// A collection of values returned by getControl.
type LookupControlResult struct {
	ActionPlanInstructions string                           `pulumi:"actionPlanInstructions"`
	ActionPlanTitle        string                           `pulumi:"actionPlanTitle"`
	Arn                    string                           `pulumi:"arn"`
	ControlMappingSources  []GetControlControlMappingSource `pulumi:"controlMappingSources"`
	Description            string                           `pulumi:"description"`
	Id                     string                           `pulumi:"id"`
	Name                   string                           `pulumi:"name"`
	Tags                   map[string]string                `pulumi:"tags"`
	TestingInformation     string                           `pulumi:"testingInformation"`
	Type                   string                           `pulumi:"type"`
}

func LookupControlOutput(ctx *pulumi.Context, args LookupControlOutputArgs, opts ...pulumi.InvokeOption) LookupControlResultOutput {
	outputResult := pulumix.ApplyErr[*LookupControlArgs](args.ToOutput(), func(plainArgs *LookupControlArgs) (*LookupControlResult, error) {
		return LookupControl(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupControlResultOutput, *LookupControlResult](outputResult)
}

// A collection of arguments for invoking getControl.
type LookupControlOutputArgs struct {
	ControlMappingSources pulumix.Input[[]*GetControlControlMappingSourceArgs] `pulumi:"controlMappingSources"`
	// Name of the control.
	Name pulumix.Input[string] `pulumi:"name"`
	// Type of control. Valid values are `Custom` and `Standard`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (args LookupControlOutputArgs) ToOutput() pulumix.Output[*LookupControlArgs] {
	allArgs := pulumix.All(
		args.ControlMappingSources.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Type.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupControlArgs {
		return &LookupControlArgs{
			ControlMappingSources: resolvedArgs[0].([]GetControlControlMappingSource),
			Name:                  resolvedArgs[1].(string),
			Type:                  resolvedArgs[2].(string),
		}
	})
}

type LookupControlResultOutput struct{ *pulumi.OutputState }

func (LookupControlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupControlResult)(nil)).Elem()
}

func (o LookupControlResultOutput) ToOutput(context.Context) pulumix.Output[*LookupControlResult] {
	return pulumix.Output[*LookupControlResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupControlResultOutput) ActionPlanInstructions() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.ActionPlanInstructions })
}

func (o LookupControlResultOutput) ActionPlanTitle() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.ActionPlanTitle })
}

func (o LookupControlResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.Arn })
}

func (o LookupControlResultOutput) ControlMappingSources() pulumix.GArrayOutput[GetControlControlMappingSource, GetControlControlMappingSourceOutput] {
	value := pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) []GetControlControlMappingSource { return v.ControlMappingSources })
	return pulumix.GArrayOutput[GetControlControlMappingSource, GetControlControlMappingSourceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupControlResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.Description })
}

func (o LookupControlResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.Id })
}

func (o LookupControlResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.Name })
}

func (o LookupControlResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupControlResultOutput) TestingInformation() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.TestingInformation })
}

func (o LookupControlResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupControlResult](o, func(v *LookupControlResult) string { return v.Type })
}
