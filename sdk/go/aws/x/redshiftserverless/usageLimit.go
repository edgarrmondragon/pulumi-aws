// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Usage Limit.
type UsageLimit struct {
	pulumi.CustomResourceState

	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount pulumix.Output[int] `pulumi:"amount"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction pulumix.Output[*string] `pulumi:"breachAction"`
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period pulumix.Output[*string] `pulumi:"period"`
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType pulumix.Output[string] `pulumi:"usageType"`
}

// NewUsageLimit registers a new resource with the given unique name, arguments, and options.
func NewUsageLimit(ctx *pulumi.Context,
	name string, args *UsageLimitArgs, opts ...pulumi.ResourceOption) (*UsageLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Amount == nil {
		return nil, errors.New("invalid value for required argument 'Amount'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	if args.UsageType == nil {
		return nil, errors.New("invalid value for required argument 'UsageType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsageLimit
	err := ctx.RegisterResource("aws:redshiftserverless/usageLimit:UsageLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsageLimit gets an existing UsageLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsageLimitState, opts ...pulumi.ResourceOption) (*UsageLimit, error) {
	var resource UsageLimit
	err := ctx.ReadResource("aws:redshiftserverless/usageLimit:UsageLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsageLimit resources.
type usageLimitState struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount *int `pulumi:"amount"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
	Arn *string `pulumi:"arn"`
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction *string `pulumi:"breachAction"`
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period *string `pulumi:"period"`
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn *string `pulumi:"resourceArn"`
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType *string `pulumi:"usageType"`
}

type UsageLimitState struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount pulumix.Input[*int]
	// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
	Arn pulumix.Input[*string]
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction pulumix.Input[*string]
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn pulumix.Input[*string]
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType pulumix.Input[*string]
}

func (UsageLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*usageLimitState)(nil)).Elem()
}

type usageLimitArgs struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount int `pulumi:"amount"`
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction *string `pulumi:"breachAction"`
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period *string `pulumi:"period"`
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn string `pulumi:"resourceArn"`
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType string `pulumi:"usageType"`
}

// The set of arguments for constructing a UsageLimit resource.
type UsageLimitArgs struct {
	// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
	Amount pulumix.Input[int]
	// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
	BreachAction pulumix.Input[*string]
	// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
	Period pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
	ResourceArn pulumix.Input[string]
	// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
	UsageType pulumix.Input[string]
}

func (UsageLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usageLimitArgs)(nil)).Elem()
}

type UsageLimitOutput struct{ *pulumi.OutputState }

func (UsageLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageLimit)(nil)).Elem()
}

func (o UsageLimitOutput) ToUsageLimitOutput() UsageLimitOutput {
	return o
}

func (o UsageLimitOutput) ToUsageLimitOutputWithContext(ctx context.Context) UsageLimitOutput {
	return o
}

func (o UsageLimitOutput) ToOutput(ctx context.Context) pulumix.Output[UsageLimit] {
	return pulumix.Output[UsageLimit]{
		OutputState: o.OutputState,
	}
}

// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
func (o UsageLimitOutput) Amount() pulumix.Output[int] {
	value := pulumix.Apply[UsageLimit](o, func(v UsageLimit) pulumix.Output[int] { return v.Amount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
func (o UsageLimitOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[UsageLimit](o, func(v UsageLimit) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
func (o UsageLimitOutput) BreachAction() pulumix.Output[*string] {
	value := pulumix.Apply[UsageLimit](o, func(v UsageLimit) pulumix.Output[*string] { return v.BreachAction })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
func (o UsageLimitOutput) Period() pulumix.Output[*string] {
	value := pulumix.Apply[UsageLimit](o, func(v UsageLimit) pulumix.Output[*string] { return v.Period })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
func (o UsageLimitOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[UsageLimit](o, func(v UsageLimit) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
func (o UsageLimitOutput) UsageType() pulumix.Output[string] {
	value := pulumix.Apply[UsageLimit](o, func(v UsageLimit) pulumix.Output[string] { return v.UsageType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UsageLimitOutput{})
}
