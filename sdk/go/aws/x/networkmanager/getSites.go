// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about sites.
func GetSites(ctx *pulumi.Context, args *GetSitesArgs, opts ...pulumi.InvokeOption) (*GetSitesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSitesResult
	err := ctx.Invoke("aws:networkmanager/getSites:getSites", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSites.
type GetSitesArgs struct {
	// ID of the Global Network of the sites to retrieve.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// Restricts the list to the sites with these tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSites.
type GetSitesResult struct {
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IDs of the sites.
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
}

func GetSitesOutput(ctx *pulumi.Context, args GetSitesOutputArgs, opts ...pulumi.InvokeOption) GetSitesResultOutput {
	outputResult := pulumix.ApplyErr[*GetSitesArgs](args.ToOutput(), func(plainArgs *GetSitesArgs) (*GetSitesResult, error) {
		return GetSites(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSitesResultOutput, *GetSitesResult](outputResult)
}

// A collection of arguments for invoking getSites.
type GetSitesOutputArgs struct {
	// ID of the Global Network of the sites to retrieve.
	GlobalNetworkId pulumix.Input[string] `pulumi:"globalNetworkId"`
	// Restricts the list to the sites with these tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetSitesOutputArgs) ToOutput() pulumix.Output[*GetSitesArgs] {
	allArgs := pulumix.All(
		args.GlobalNetworkId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSitesArgs {
		return &GetSitesArgs{
			GlobalNetworkId: resolvedArgs[0].(string),
			Tags:            resolvedArgs[1].(map[string]string),
		}
	})
}

type GetSitesResultOutput struct{ *pulumi.OutputState }

func (GetSitesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitesResult)(nil)).Elem()
}

func (o GetSitesResultOutput) ToOutput(context.Context) pulumix.Output[*GetSitesResult] {
	return pulumix.Output[*GetSitesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSitesResultOutput) GlobalNetworkId() pulumix.Output[string] {
	return pulumix.Apply[*GetSitesResult](o, func(v *GetSitesResult) string { return v.GlobalNetworkId })
}

func (o GetSitesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSitesResult](o, func(v *GetSitesResult) string { return v.Id })
}

func (o GetSitesResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetSitesResult](o, func(v *GetSitesResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSitesResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetSitesResult](o, func(v *GetSitesResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
