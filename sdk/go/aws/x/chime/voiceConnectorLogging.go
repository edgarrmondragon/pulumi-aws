// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
type VoiceConnectorLogging struct {
	pulumi.CustomResourceState

	// When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
	EnableMediaMetricLogs pulumix.Output[*bool] `pulumi:"enableMediaMetricLogs"`
	// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
	EnableSipLogs pulumix.Output[*bool] `pulumi:"enableSipLogs"`
	// The Amazon Chime Voice Connector ID.
	VoiceConnectorId pulumix.Output[string] `pulumi:"voiceConnectorId"`
}

// NewVoiceConnectorLogging registers a new resource with the given unique name, arguments, and options.
func NewVoiceConnectorLogging(ctx *pulumi.Context,
	name string, args *VoiceConnectorLoggingArgs, opts ...pulumi.ResourceOption) (*VoiceConnectorLogging, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VoiceConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'VoiceConnectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VoiceConnectorLogging
	err := ctx.RegisterResource("aws:chime/voiceConnectorLogging:VoiceConnectorLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVoiceConnectorLogging gets an existing VoiceConnectorLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVoiceConnectorLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VoiceConnectorLoggingState, opts ...pulumi.ResourceOption) (*VoiceConnectorLogging, error) {
	var resource VoiceConnectorLogging
	err := ctx.ReadResource("aws:chime/voiceConnectorLogging:VoiceConnectorLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VoiceConnectorLogging resources.
type voiceConnectorLoggingState struct {
	// When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
	EnableMediaMetricLogs *bool `pulumi:"enableMediaMetricLogs"`
	// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
	EnableSipLogs *bool `pulumi:"enableSipLogs"`
	// The Amazon Chime Voice Connector ID.
	VoiceConnectorId *string `pulumi:"voiceConnectorId"`
}

type VoiceConnectorLoggingState struct {
	// When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
	EnableMediaMetricLogs pulumix.Input[*bool]
	// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
	EnableSipLogs pulumix.Input[*bool]
	// The Amazon Chime Voice Connector ID.
	VoiceConnectorId pulumix.Input[*string]
}

func (VoiceConnectorLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*voiceConnectorLoggingState)(nil)).Elem()
}

type voiceConnectorLoggingArgs struct {
	// When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
	EnableMediaMetricLogs *bool `pulumi:"enableMediaMetricLogs"`
	// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
	EnableSipLogs *bool `pulumi:"enableSipLogs"`
	// The Amazon Chime Voice Connector ID.
	VoiceConnectorId string `pulumi:"voiceConnectorId"`
}

// The set of arguments for constructing a VoiceConnectorLogging resource.
type VoiceConnectorLoggingArgs struct {
	// When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
	EnableMediaMetricLogs pulumix.Input[*bool]
	// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
	EnableSipLogs pulumix.Input[*bool]
	// The Amazon Chime Voice Connector ID.
	VoiceConnectorId pulumix.Input[string]
}

func (VoiceConnectorLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*voiceConnectorLoggingArgs)(nil)).Elem()
}

type VoiceConnectorLoggingOutput struct{ *pulumi.OutputState }

func (VoiceConnectorLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceConnectorLogging)(nil)).Elem()
}

func (o VoiceConnectorLoggingOutput) ToVoiceConnectorLoggingOutput() VoiceConnectorLoggingOutput {
	return o
}

func (o VoiceConnectorLoggingOutput) ToVoiceConnectorLoggingOutputWithContext(ctx context.Context) VoiceConnectorLoggingOutput {
	return o
}

func (o VoiceConnectorLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[VoiceConnectorLogging] {
	return pulumix.Output[VoiceConnectorLogging]{
		OutputState: o.OutputState,
	}
}

// When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
func (o VoiceConnectorLoggingOutput) EnableMediaMetricLogs() pulumix.Output[*bool] {
	value := pulumix.Apply[VoiceConnectorLogging](o, func(v VoiceConnectorLogging) pulumix.Output[*bool] { return v.EnableMediaMetricLogs })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
func (o VoiceConnectorLoggingOutput) EnableSipLogs() pulumix.Output[*bool] {
	value := pulumix.Apply[VoiceConnectorLogging](o, func(v VoiceConnectorLogging) pulumix.Output[*bool] { return v.EnableSipLogs })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Chime Voice Connector ID.
func (o VoiceConnectorLoggingOutput) VoiceConnectorId() pulumix.Output[string] {
	value := pulumix.Apply[VoiceConnectorLogging](o, func(v VoiceConnectorLogging) pulumix.Output[string] { return v.VoiceConnectorId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VoiceConnectorLoggingOutput{})
}
