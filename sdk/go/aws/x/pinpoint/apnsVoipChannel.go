// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Pinpoint APNs VoIP Channel resource.
type ApnsVoipChannel struct {
	pulumi.CustomResourceState

	// The application ID.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
	BundleId pulumix.Output[*string] `pulumi:"bundleId"`
	// The pem encoded TLS Certificate from Apple.
	Certificate pulumix.Output[*string] `pulumi:"certificate"`
	// The default authentication method used for APNs.
	// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
	// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
	// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
	//
	// One of the following sets of credentials is also required.
	//
	// If you choose to use __Certificate credentials__ you will have to provide:
	DefaultAuthenticationMethod pulumix.Output[*string] `pulumi:"defaultAuthenticationMethod"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// The Certificate Private Key file (ie. `.key` file).
	//
	// If you choose to use __Key credentials__ you will have to provide:
	PrivateKey pulumix.Output[*string] `pulumi:"privateKey"`
	// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
	TeamId pulumix.Output[*string] `pulumi:"teamId"`
	// The `.p8` file that you download from your Apple developer account when you create an authentication key.
	TokenKey pulumix.Output[*string] `pulumi:"tokenKey"`
	// The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
	TokenKeyId pulumix.Output[*string] `pulumi:"tokenKeyId"`
}

// NewApnsVoipChannel registers a new resource with the given unique name, arguments, and options.
func NewApnsVoipChannel(ctx *pulumi.Context,
	name string, args *ApnsVoipChannelArgs, opts ...pulumi.ResourceOption) (*ApnsVoipChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.BundleId != nil {
		untypedSecretValue := pulumi.ToSecret(args.BundleId.ToOutput(ctx.Context()).Untyped())
		args.BundleId = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.Certificate != nil {
		untypedSecretValue := pulumi.ToSecret(args.Certificate.ToOutput(ctx.Context()).Untyped())
		args.Certificate = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.PrivateKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.PrivateKey.ToOutput(ctx.Context()).Untyped())
		args.PrivateKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.TeamId != nil {
		untypedSecretValue := pulumi.ToSecret(args.TeamId.ToOutput(ctx.Context()).Untyped())
		args.TeamId = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.TokenKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.TokenKey.ToOutput(ctx.Context()).Untyped())
		args.TokenKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.TokenKeyId != nil {
		untypedSecretValue := pulumi.ToSecret(args.TokenKeyId.ToOutput(ctx.Context()).Untyped())
		args.TokenKeyId = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"bundleId",
		"certificate",
		"privateKey",
		"teamId",
		"tokenKey",
		"tokenKeyId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApnsVoipChannel
	err := ctx.RegisterResource("aws:pinpoint/apnsVoipChannel:ApnsVoipChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApnsVoipChannel gets an existing ApnsVoipChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApnsVoipChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApnsVoipChannelState, opts ...pulumi.ResourceOption) (*ApnsVoipChannel, error) {
	var resource ApnsVoipChannel
	err := ctx.ReadResource("aws:pinpoint/apnsVoipChannel:ApnsVoipChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApnsVoipChannel resources.
type apnsVoipChannelState struct {
	// The application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
	BundleId *string `pulumi:"bundleId"`
	// The pem encoded TLS Certificate from Apple.
	Certificate *string `pulumi:"certificate"`
	// The default authentication method used for APNs.
	// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
	// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
	// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
	//
	// One of the following sets of credentials is also required.
	//
	// If you choose to use __Certificate credentials__ you will have to provide:
	DefaultAuthenticationMethod *string `pulumi:"defaultAuthenticationMethod"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The Certificate Private Key file (ie. `.key` file).
	//
	// If you choose to use __Key credentials__ you will have to provide:
	PrivateKey *string `pulumi:"privateKey"`
	// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
	TeamId *string `pulumi:"teamId"`
	// The `.p8` file that you download from your Apple developer account when you create an authentication key.
	TokenKey *string `pulumi:"tokenKey"`
	// The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
	TokenKeyId *string `pulumi:"tokenKeyId"`
}

type ApnsVoipChannelState struct {
	// The application ID.
	ApplicationId pulumix.Input[*string]
	// The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
	BundleId pulumix.Input[*string]
	// The pem encoded TLS Certificate from Apple.
	Certificate pulumix.Input[*string]
	// The default authentication method used for APNs.
	// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
	// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
	// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
	//
	// One of the following sets of credentials is also required.
	//
	// If you choose to use __Certificate credentials__ you will have to provide:
	DefaultAuthenticationMethod pulumix.Input[*string]
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// The Certificate Private Key file (ie. `.key` file).
	//
	// If you choose to use __Key credentials__ you will have to provide:
	PrivateKey pulumix.Input[*string]
	// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
	TeamId pulumix.Input[*string]
	// The `.p8` file that you download from your Apple developer account when you create an authentication key.
	TokenKey pulumix.Input[*string]
	// The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
	TokenKeyId pulumix.Input[*string]
}

func (ApnsVoipChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*apnsVoipChannelState)(nil)).Elem()
}

type apnsVoipChannelArgs struct {
	// The application ID.
	ApplicationId string `pulumi:"applicationId"`
	// The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
	BundleId *string `pulumi:"bundleId"`
	// The pem encoded TLS Certificate from Apple.
	Certificate *string `pulumi:"certificate"`
	// The default authentication method used for APNs.
	// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
	// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
	// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
	//
	// One of the following sets of credentials is also required.
	//
	// If you choose to use __Certificate credentials__ you will have to provide:
	DefaultAuthenticationMethod *string `pulumi:"defaultAuthenticationMethod"`
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The Certificate Private Key file (ie. `.key` file).
	//
	// If you choose to use __Key credentials__ you will have to provide:
	PrivateKey *string `pulumi:"privateKey"`
	// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
	TeamId *string `pulumi:"teamId"`
	// The `.p8` file that you download from your Apple developer account when you create an authentication key.
	TokenKey *string `pulumi:"tokenKey"`
	// The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
	TokenKeyId *string `pulumi:"tokenKeyId"`
}

// The set of arguments for constructing a ApnsVoipChannel resource.
type ApnsVoipChannelArgs struct {
	// The application ID.
	ApplicationId pulumix.Input[string]
	// The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
	BundleId pulumix.Input[*string]
	// The pem encoded TLS Certificate from Apple.
	Certificate pulumix.Input[*string]
	// The default authentication method used for APNs.
	// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
	// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
	// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
	//
	// One of the following sets of credentials is also required.
	//
	// If you choose to use __Certificate credentials__ you will have to provide:
	DefaultAuthenticationMethod pulumix.Input[*string]
	// Whether the channel is enabled or disabled. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// The Certificate Private Key file (ie. `.key` file).
	//
	// If you choose to use __Key credentials__ you will have to provide:
	PrivateKey pulumix.Input[*string]
	// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
	TeamId pulumix.Input[*string]
	// The `.p8` file that you download from your Apple developer account when you create an authentication key.
	TokenKey pulumix.Input[*string]
	// The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
	TokenKeyId pulumix.Input[*string]
}

func (ApnsVoipChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apnsVoipChannelArgs)(nil)).Elem()
}

type ApnsVoipChannelOutput struct{ *pulumi.OutputState }

func (ApnsVoipChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApnsVoipChannel)(nil)).Elem()
}

func (o ApnsVoipChannelOutput) ToApnsVoipChannelOutput() ApnsVoipChannelOutput {
	return o
}

func (o ApnsVoipChannelOutput) ToApnsVoipChannelOutputWithContext(ctx context.Context) ApnsVoipChannelOutput {
	return o
}

func (o ApnsVoipChannelOutput) ToOutput(ctx context.Context) pulumix.Output[ApnsVoipChannel] {
	return pulumix.Output[ApnsVoipChannel]{
		OutputState: o.OutputState,
	}
}

// The application ID.
func (o ApnsVoipChannelOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID assigned to your iOS app. To find this value, choose Certificates, IDs & Profiles, choose App IDs in the Identifiers section, and choose your app.
func (o ApnsVoipChannelOutput) BundleId() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.BundleId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The pem encoded TLS Certificate from Apple.
func (o ApnsVoipChannelOutput) Certificate() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.Certificate })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The default authentication method used for APNs.
// __NOTE__: Amazon Pinpoint uses this default for every APNs push notification that you send using the console.
// You can override the default when you send a message programmatically using the Amazon Pinpoint API, the AWS CLI, or an AWS SDK.
// If your default authentication type fails, Amazon Pinpoint doesn't attempt to use the other authentication type.
//
// One of the following sets of credentials is also required.
//
// If you choose to use __Certificate credentials__ you will have to provide:
func (o ApnsVoipChannelOutput) DefaultAuthenticationMethod() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.DefaultAuthenticationMethod })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether the channel is enabled or disabled. Defaults to `true`.
func (o ApnsVoipChannelOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Certificate Private Key file (ie. `.key` file).
//
// If you choose to use __Key credentials__ you will have to provide:
func (o ApnsVoipChannelOutput) PrivateKey() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.PrivateKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID assigned to your Apple developer account team. This value is provided on the Membership page.
func (o ApnsVoipChannelOutput) TeamId() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.TeamId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The `.p8` file that you download from your Apple developer account when you create an authentication key.
func (o ApnsVoipChannelOutput) TokenKey() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.TokenKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID assigned to your signing key. To find this value, choose Certificates, IDs & Profiles, and choose your key in the Keys section.
func (o ApnsVoipChannelOutput) TokenKeyId() pulumix.Output[*string] {
	value := pulumix.Apply[ApnsVoipChannel](o, func(v ApnsVoipChannel) pulumix.Output[*string] { return v.TokenKeyId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ApnsVoipChannelOutput{})
}
