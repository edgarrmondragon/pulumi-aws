// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package schemas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS EventBridge Schemas Registry Policy.
type RegistryPolicy struct {
	pulumi.CustomResourceState

	// Resource Policy for EventBridge Schema Registry
	Policy pulumix.Output[string] `pulumi:"policy"`
	// Name of EventBridge Schema Registry
	RegistryName pulumix.Output[string] `pulumi:"registryName"`
}

// NewRegistryPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegistryPolicy(ctx *pulumi.Context,
	name string, args *RegistryPolicyArgs, opts ...pulumi.ResourceOption) (*RegistryPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryPolicy
	err := ctx.RegisterResource("aws:schemas/registryPolicy:RegistryPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryPolicy gets an existing RegistryPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryPolicyState, opts ...pulumi.ResourceOption) (*RegistryPolicy, error) {
	var resource RegistryPolicy
	err := ctx.ReadResource("aws:schemas/registryPolicy:RegistryPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryPolicy resources.
type registryPolicyState struct {
	// Resource Policy for EventBridge Schema Registry
	Policy *string `pulumi:"policy"`
	// Name of EventBridge Schema Registry
	RegistryName *string `pulumi:"registryName"`
}

type RegistryPolicyState struct {
	// Resource Policy for EventBridge Schema Registry
	Policy pulumix.Input[*string]
	// Name of EventBridge Schema Registry
	RegistryName pulumix.Input[*string]
}

func (RegistryPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryPolicyState)(nil)).Elem()
}

type registryPolicyArgs struct {
	// Resource Policy for EventBridge Schema Registry
	Policy string `pulumi:"policy"`
	// Name of EventBridge Schema Registry
	RegistryName string `pulumi:"registryName"`
}

// The set of arguments for constructing a RegistryPolicy resource.
type RegistryPolicyArgs struct {
	// Resource Policy for EventBridge Schema Registry
	Policy pulumix.Input[string]
	// Name of EventBridge Schema Registry
	RegistryName pulumix.Input[string]
}

func (RegistryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryPolicyArgs)(nil)).Elem()
}

type RegistryPolicyOutput struct{ *pulumi.OutputState }

func (RegistryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPolicy)(nil)).Elem()
}

func (o RegistryPolicyOutput) ToRegistryPolicyOutput() RegistryPolicyOutput {
	return o
}

func (o RegistryPolicyOutput) ToRegistryPolicyOutputWithContext(ctx context.Context) RegistryPolicyOutput {
	return o
}

func (o RegistryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryPolicy] {
	return pulumix.Output[RegistryPolicy]{
		OutputState: o.OutputState,
	}
}

// Resource Policy for EventBridge Schema Registry
func (o RegistryPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[RegistryPolicy](o, func(v RegistryPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of EventBridge Schema Registry
func (o RegistryPolicyOutput) RegistryName() pulumix.Output[string] {
	value := pulumix.Apply[RegistryPolicy](o, func(v RegistryPolicy) pulumix.Output[string] { return v.RegistryName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RegistryPolicyOutput{})
}
