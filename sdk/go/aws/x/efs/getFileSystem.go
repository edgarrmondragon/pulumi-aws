// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about an Elastic File System (EFS) File System.
func LookupFileSystem(ctx *pulumi.Context, args *LookupFileSystemArgs, opts ...pulumi.InvokeOption) (*LookupFileSystemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFileSystemResult
	err := ctx.Invoke("aws:efs/getFileSystem:getFileSystem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFileSystem.
type LookupFileSystemArgs struct {
	// Restricts the list to the file system with this creation token.
	CreationToken *string `pulumi:"creationToken"`
	// ID that identifies the file system (e.g., fs-ccfc0d65).
	FileSystemId *string `pulumi:"fileSystemId"`
	// Restricts the list to the file system with these tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getFileSystem.
type LookupFileSystemResult struct {
	// Amazon Resource Name of the file system.
	Arn string `pulumi:"arn"`
	// The identifier of the Availability Zone in which the file system's One Zone storage classes exist.
	AvailabilityZoneId string `pulumi:"availabilityZoneId"`
	// The Availability Zone name in which the file system's One Zone storage classes exist.
	AvailabilityZoneName string `pulumi:"availabilityZoneName"`
	CreationToken        string `pulumi:"creationToken"`
	// DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
	DnsName string `pulumi:"dnsName"`
	// Whether EFS is encrypted.
	Encrypted    bool   `pulumi:"encrypted"`
	FileSystemId string `pulumi:"fileSystemId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN for the KMS encryption key.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// File system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object.
	LifecyclePolicy GetFileSystemLifecyclePolicy `pulumi:"lifecyclePolicy"`
	// The value of the file system's `Name` tag.
	Name string `pulumi:"name"`
	// File system performance mode.
	PerformanceMode string `pulumi:"performanceMode"`
	// The throughput, measured in MiB/s, that you want to provision for the file system.
	ProvisionedThroughputInMibps float64 `pulumi:"provisionedThroughputInMibps"`
	// Current byte count used by the file system.
	SizeInBytes int `pulumi:"sizeInBytes"`
	// A map of tags to assign to the file system.
	Tags map[string]string `pulumi:"tags"`
	// Throughput mode for the file system.
	ThroughputMode string `pulumi:"throughputMode"`
}

func LookupFileSystemOutput(ctx *pulumi.Context, args LookupFileSystemOutputArgs, opts ...pulumi.InvokeOption) LookupFileSystemResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFileSystemArgs](args.ToOutput(), func(plainArgs *LookupFileSystemArgs) (*LookupFileSystemResult, error) {
		return LookupFileSystem(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFileSystemResultOutput, *LookupFileSystemResult](outputResult)
}

// A collection of arguments for invoking getFileSystem.
type LookupFileSystemOutputArgs struct {
	// Restricts the list to the file system with this creation token.
	CreationToken pulumix.Input[*string] `pulumi:"creationToken"`
	// ID that identifies the file system (e.g., fs-ccfc0d65).
	FileSystemId pulumix.Input[*string] `pulumi:"fileSystemId"`
	// Restricts the list to the file system with these tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupFileSystemOutputArgs) ToOutput() pulumix.Output[*LookupFileSystemArgs] {
	allArgs := pulumix.All(
		args.CreationToken.ToOutput(context.Background()).AsAny(),
		args.FileSystemId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFileSystemArgs {
		return &LookupFileSystemArgs{
			CreationToken: resolvedArgs[0].(*string),
			FileSystemId:  resolvedArgs[1].(*string),
			Tags:          resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupFileSystemResultOutput struct{ *pulumi.OutputState }

func (LookupFileSystemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileSystemResult)(nil)).Elem()
}

func (o LookupFileSystemResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFileSystemResult] {
	return pulumix.Output[*LookupFileSystemResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFileSystemResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.Arn })
}

func (o LookupFileSystemResultOutput) AvailabilityZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.AvailabilityZoneId })
}

func (o LookupFileSystemResultOutput) AvailabilityZoneName() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.AvailabilityZoneName })
}

func (o LookupFileSystemResultOutput) CreationToken() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.CreationToken })
}

func (o LookupFileSystemResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.DnsName })
}

func (o LookupFileSystemResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) bool { return v.Encrypted })
}

func (o LookupFileSystemResultOutput) FileSystemId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.FileSystemId })
}

func (o LookupFileSystemResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.Id })
}

func (o LookupFileSystemResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.KmsKeyId })
}

func (o LookupFileSystemResultOutput) LifecyclePolicy() pulumix.GPtrOutput[GetFileSystemLifecyclePolicy, GetFileSystemLifecyclePolicyOutput] {
	value := pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) GetFileSystemLifecyclePolicy { return v.LifecyclePolicy })
	return pulumix.GPtrOutput[GetFileSystemLifecyclePolicy, GetFileSystemLifecyclePolicyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupFileSystemResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.Name })
}

func (o LookupFileSystemResultOutput) PerformanceMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.PerformanceMode })
}

func (o LookupFileSystemResultOutput) ProvisionedThroughputInMibps() pulumix.Output[float64] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) float64 { return v.ProvisionedThroughputInMibps })
}

func (o LookupFileSystemResultOutput) SizeInBytes() pulumix.Output[int] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) int { return v.SizeInBytes })
}

func (o LookupFileSystemResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupFileSystemResultOutput) ThroughputMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupFileSystemResult](o, func(v *LookupFileSystemResult) string { return v.ThroughputMode })
}
