// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Lambda Code Signing Config resource. A code signing configuration defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
//
// For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html)
type CodeSigningConfig struct {
	pulumi.CustomResourceState

	// A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
	AllowedPublishers pulumix.GPtrOutput[CodeSigningConfigAllowedPublishers, CodeSigningConfigAllowedPublishersOutput] `pulumi:"allowedPublishers"`
	// The Amazon Resource Name (ARN) of the code signing configuration.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Unique identifier for the code signing configuration.
	ConfigId pulumix.Output[string] `pulumi:"configId"`
	// Descriptive name for this code signing configuration.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The date and time that the code signing configuration was last modified.
	LastModified pulumix.Output[string] `pulumi:"lastModified"`
	// A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
	Policies pulumix.GPtrOutput[CodeSigningConfigPolicies, CodeSigningConfigPoliciesOutput] `pulumi:"policies"`
}

// NewCodeSigningConfig registers a new resource with the given unique name, arguments, and options.
func NewCodeSigningConfig(ctx *pulumi.Context,
	name string, args *CodeSigningConfigArgs, opts ...pulumi.ResourceOption) (*CodeSigningConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedPublishers == nil {
		return nil, errors.New("invalid value for required argument 'AllowedPublishers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CodeSigningConfig
	err := ctx.RegisterResource("aws:lambda/codeSigningConfig:CodeSigningConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCodeSigningConfig gets an existing CodeSigningConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCodeSigningConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CodeSigningConfigState, opts ...pulumi.ResourceOption) (*CodeSigningConfig, error) {
	var resource CodeSigningConfig
	err := ctx.ReadResource("aws:lambda/codeSigningConfig:CodeSigningConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CodeSigningConfig resources.
type codeSigningConfigState struct {
	// A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
	AllowedPublishers *CodeSigningConfigAllowedPublishers `pulumi:"allowedPublishers"`
	// The Amazon Resource Name (ARN) of the code signing configuration.
	Arn *string `pulumi:"arn"`
	// Unique identifier for the code signing configuration.
	ConfigId *string `pulumi:"configId"`
	// Descriptive name for this code signing configuration.
	Description *string `pulumi:"description"`
	// The date and time that the code signing configuration was last modified.
	LastModified *string `pulumi:"lastModified"`
	// A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
	Policies *CodeSigningConfigPolicies `pulumi:"policies"`
}

type CodeSigningConfigState struct {
	// A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
	AllowedPublishers pulumix.Input[*CodeSigningConfigAllowedPublishersArgs]
	// The Amazon Resource Name (ARN) of the code signing configuration.
	Arn pulumix.Input[*string]
	// Unique identifier for the code signing configuration.
	ConfigId pulumix.Input[*string]
	// Descriptive name for this code signing configuration.
	Description pulumix.Input[*string]
	// The date and time that the code signing configuration was last modified.
	LastModified pulumix.Input[*string]
	// A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
	Policies pulumix.Input[*CodeSigningConfigPoliciesArgs]
}

func (CodeSigningConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*codeSigningConfigState)(nil)).Elem()
}

type codeSigningConfigArgs struct {
	// A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
	AllowedPublishers CodeSigningConfigAllowedPublishers `pulumi:"allowedPublishers"`
	// Descriptive name for this code signing configuration.
	Description *string `pulumi:"description"`
	// A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
	Policies *CodeSigningConfigPolicies `pulumi:"policies"`
}

// The set of arguments for constructing a CodeSigningConfig resource.
type CodeSigningConfigArgs struct {
	// A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
	AllowedPublishers pulumix.Input[*CodeSigningConfigAllowedPublishersArgs]
	// Descriptive name for this code signing configuration.
	Description pulumix.Input[*string]
	// A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
	Policies pulumix.Input[*CodeSigningConfigPoliciesArgs]
}

func (CodeSigningConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*codeSigningConfigArgs)(nil)).Elem()
}

type CodeSigningConfigOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfig)(nil)).Elem()
}

func (o CodeSigningConfigOutput) ToCodeSigningConfigOutput() CodeSigningConfigOutput {
	return o
}

func (o CodeSigningConfigOutput) ToCodeSigningConfigOutputWithContext(ctx context.Context) CodeSigningConfigOutput {
	return o
}

func (o CodeSigningConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfig] {
	return pulumix.Output[CodeSigningConfig]{
		OutputState: o.OutputState,
	}
}

// A configuration block of allowed publishers as signing profiles for this code signing configuration. Detailed below.
func (o CodeSigningConfigOutput) AllowedPublishers() pulumix.GPtrOutput[CodeSigningConfigAllowedPublishers, CodeSigningConfigAllowedPublishersOutput] {
	value := pulumix.Apply[CodeSigningConfig](o, func(v CodeSigningConfig) pulumix.GPtrOutput[CodeSigningConfigAllowedPublishers, CodeSigningConfigAllowedPublishersOutput] {
		return v.AllowedPublishers
	})
	unwrapped := pulumix.Flatten[*CodeSigningConfigAllowedPublishers, pulumix.GPtrOutput[CodeSigningConfigAllowedPublishers, CodeSigningConfigAllowedPublishersOutput]](value)
	return pulumix.GPtrOutput[CodeSigningConfigAllowedPublishers, CodeSigningConfigAllowedPublishersOutput]{OutputState: unwrapped.OutputState}
}

// The Amazon Resource Name (ARN) of the code signing configuration.
func (o CodeSigningConfigOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CodeSigningConfig](o, func(v CodeSigningConfig) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique identifier for the code signing configuration.
func (o CodeSigningConfigOutput) ConfigId() pulumix.Output[string] {
	value := pulumix.Apply[CodeSigningConfig](o, func(v CodeSigningConfig) pulumix.Output[string] { return v.ConfigId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Descriptive name for this code signing configuration.
func (o CodeSigningConfigOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[CodeSigningConfig](o, func(v CodeSigningConfig) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The date and time that the code signing configuration was last modified.
func (o CodeSigningConfigOutput) LastModified() pulumix.Output[string] {
	value := pulumix.Apply[CodeSigningConfig](o, func(v CodeSigningConfig) pulumix.Output[string] { return v.LastModified })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A configuration block of code signing policies that define the actions to take if the validation checks fail. Detailed below.
func (o CodeSigningConfigOutput) Policies() pulumix.GPtrOutput[CodeSigningConfigPolicies, CodeSigningConfigPoliciesOutput] {
	value := pulumix.Apply[CodeSigningConfig](o, func(v CodeSigningConfig) pulumix.GPtrOutput[CodeSigningConfigPolicies, CodeSigningConfigPoliciesOutput] {
		return v.Policies
	})
	unwrapped := pulumix.Flatten[*CodeSigningConfigPolicies, pulumix.GPtrOutput[CodeSigningConfigPolicies, CodeSigningConfigPoliciesOutput]](value)
	return pulumix.GPtrOutput[CodeSigningConfigPolicies, CodeSigningConfigPoliciesOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CodeSigningConfigOutput{})
}
