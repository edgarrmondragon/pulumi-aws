// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// > **Note:** `alb.Listener` is known as `lb.Listener`. The functionality is identical.
//
// Provides information about a Load Balancer Listener.
//
// This data source can prove useful when a module accepts an LB Listener as an input variable and needs to know the LB it is attached to, or other information specific to the listener in question.
func LookupListener(ctx *pulumi.Context, args *LookupListenerArgs, opts ...pulumi.InvokeOption) (*LookupListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerResult
	err := ctx.Invoke("aws:lb/getListener:getListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListener.
type LookupListenerArgs struct {
	// ARN of the listener. Required if `loadBalancerArn` and `port` is not set.
	Arn *string `pulumi:"arn"`
	// ARN of the load balancer. Required if `arn` is not set.
	LoadBalancerArn *string `pulumi:"loadBalancerArn"`
	// Port of the listener. Required if `arn` is not set.
	Port *int              `pulumi:"port"`
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getListener.
type LookupListenerResult struct {
	AlpnPolicy     string                     `pulumi:"alpnPolicy"`
	Arn            string                     `pulumi:"arn"`
	CertificateArn string                     `pulumi:"certificateArn"`
	DefaultActions []GetListenerDefaultAction `pulumi:"defaultActions"`
	// The provider-assigned unique ID for this managed resource.
	Id              string            `pulumi:"id"`
	LoadBalancerArn string            `pulumi:"loadBalancerArn"`
	Port            int               `pulumi:"port"`
	Protocol        string            `pulumi:"protocol"`
	SslPolicy       string            `pulumi:"sslPolicy"`
	Tags            map[string]string `pulumi:"tags"`
}

func LookupListenerOutput(ctx *pulumi.Context, args LookupListenerOutputArgs, opts ...pulumi.InvokeOption) LookupListenerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupListenerArgs](args.ToOutput(), func(plainArgs *LookupListenerArgs) (*LookupListenerResult, error) {
		return LookupListener(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupListenerResultOutput, *LookupListenerResult](outputResult)
}

// A collection of arguments for invoking getListener.
type LookupListenerOutputArgs struct {
	// ARN of the listener. Required if `loadBalancerArn` and `port` is not set.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// ARN of the load balancer. Required if `arn` is not set.
	LoadBalancerArn pulumix.Input[*string] `pulumi:"loadBalancerArn"`
	// Port of the listener. Required if `arn` is not set.
	Port pulumix.Input[*int]              `pulumi:"port"`
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupListenerOutputArgs) ToOutput() pulumix.Output[*LookupListenerArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.LoadBalancerArn.ToOutput(context.Background()).AsAny(),
		args.Port.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupListenerArgs {
		return &LookupListenerArgs{
			Arn:             resolvedArgs[0].(*string),
			LoadBalancerArn: resolvedArgs[1].(*string),
			Port:            resolvedArgs[2].(*int),
			Tags:            resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupListenerResultOutput struct{ *pulumi.OutputState }

func (LookupListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerResult)(nil)).Elem()
}

func (o LookupListenerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupListenerResult] {
	return pulumix.Output[*LookupListenerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupListenerResultOutput) AlpnPolicy() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.AlpnPolicy })
}

func (o LookupListenerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Arn })
}

func (o LookupListenerResultOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.CertificateArn })
}

func (o LookupListenerResultOutput) DefaultActions() pulumix.GArrayOutput[GetListenerDefaultAction, GetListenerDefaultActionOutput] {
	value := pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) []GetListenerDefaultAction { return v.DefaultActions })
	return pulumix.GArrayOutput[GetListenerDefaultAction, GetListenerDefaultActionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupListenerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Id })
}

func (o LookupListenerResultOutput) LoadBalancerArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.LoadBalancerArn })
}

func (o LookupListenerResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) int { return v.Port })
}

func (o LookupListenerResultOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.Protocol })
}

func (o LookupListenerResultOutput) SslPolicy() pulumix.Output[string] {
	return pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) string { return v.SslPolicy })
}

func (o LookupListenerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupListenerResult](o, func(v *LookupListenerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
