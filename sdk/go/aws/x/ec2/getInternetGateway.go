// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.InternetGateway` provides details about a specific Internet Gateway.
func LookupInternetGateway(ctx *pulumi.Context, args *LookupInternetGatewayArgs, opts ...pulumi.InvokeOption) (*LookupInternetGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInternetGatewayResult
	err := ctx.Invoke("aws:ec2/getInternetGateway:getInternetGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInternetGateway.
type LookupInternetGatewayArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters []GetInternetGatewayFilter `pulumi:"filters"`
	// ID of the specific Internet Gateway to retrieve.
	InternetGatewayId *string `pulumi:"internetGatewayId"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired Internet Gateway.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getInternetGateway.
type LookupInternetGatewayResult struct {
	// ARN of the Internet Gateway.
	Arn         string                             `pulumi:"arn"`
	Attachments []GetInternetGatewayAttachmentType `pulumi:"attachments"`
	Filters     []GetInternetGatewayFilter         `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	InternetGatewayId string `pulumi:"internetGatewayId"`
	// ID of the AWS account that owns the internet gateway.
	OwnerId string            `pulumi:"ownerId"`
	Tags    map[string]string `pulumi:"tags"`
}

func LookupInternetGatewayOutput(ctx *pulumi.Context, args LookupInternetGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupInternetGatewayResultOutput {
	outputResult := pulumix.ApplyErr[*LookupInternetGatewayArgs](args.ToOutput(), func(plainArgs *LookupInternetGatewayArgs) (*LookupInternetGatewayResult, error) {
		return LookupInternetGateway(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupInternetGatewayResultOutput, *LookupInternetGatewayResult](outputResult)
}

// A collection of arguments for invoking getInternetGateway.
type LookupInternetGatewayOutputArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters pulumix.Input[[]*GetInternetGatewayFilterArgs] `pulumi:"filters"`
	// ID of the specific Internet Gateway to retrieve.
	InternetGatewayId pulumix.Input[*string] `pulumi:"internetGatewayId"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired Internet Gateway.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupInternetGatewayOutputArgs) ToOutput() pulumix.Output[*LookupInternetGatewayArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.InternetGatewayId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupInternetGatewayArgs {
		return &LookupInternetGatewayArgs{
			Filters:           resolvedArgs[0].([]GetInternetGatewayFilter),
			InternetGatewayId: resolvedArgs[1].(*string),
			Tags:              resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupInternetGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupInternetGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInternetGatewayResult)(nil)).Elem()
}

func (o LookupInternetGatewayResultOutput) ToOutput(context.Context) pulumix.Output[*LookupInternetGatewayResult] {
	return pulumix.Output[*LookupInternetGatewayResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupInternetGatewayResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) string { return v.Arn })
}

func (o LookupInternetGatewayResultOutput) Attachments() pulumix.GArrayOutput[GetInternetGatewayAttachmentType, GetInternetGatewayAttachmentTypeOutput] {
	value := pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) []GetInternetGatewayAttachmentType { return v.Attachments })
	return pulumix.GArrayOutput[GetInternetGatewayAttachmentType, GetInternetGatewayAttachmentTypeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInternetGatewayResultOutput) Filters() pulumix.GArrayOutput[GetInternetGatewayFilter, GetInternetGatewayFilterOutput] {
	value := pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) []GetInternetGatewayFilter { return v.Filters })
	return pulumix.GArrayOutput[GetInternetGatewayFilter, GetInternetGatewayFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupInternetGatewayResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) string { return v.Id })
}

func (o LookupInternetGatewayResultOutput) InternetGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) string { return v.InternetGatewayId })
}

func (o LookupInternetGatewayResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) string { return v.OwnerId })
}

func (o LookupInternetGatewayResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupInternetGatewayResult](o, func(v *LookupInternetGatewayResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
