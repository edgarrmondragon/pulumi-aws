// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Beanstalk Application Version Resource. Elastic Beanstalk allows
// you to deploy and manage applications in the AWS cloud without worrying about
// the infrastructure that runs those applications.
//
// This resource creates a Beanstalk Application Version that can be deployed to a Beanstalk
// Environment.
//
// > **NOTE on Application Version Resource:**  When using the Application Version resource with multiple
// Elastic Beanstalk Environments it is possible that an error may be returned
// when attempting to delete an Application Version while it is still in use by a different environment.
// To work around this you can either create each environment in a separate AWS account or create your `elasticbeanstalk.ApplicationVersion` resources with a unique names in your Elastic Beanstalk Application. For example &lt;revision&gt;-&lt;environment&gt;.
type ApplicationVersion struct {
	pulumi.CustomResourceState

	// Name of the Beanstalk Application the version is associated with.
	Application pulumix.Output[string] `pulumi:"application"`
	// ARN assigned by AWS for this Elastic Beanstalk Application.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// S3 bucket that contains the Application Version source bundle.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Short description of the Application Version.
	Description pulumix.Output[*string] `pulumi:"description"`
	// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
	ForceDelete pulumix.Output[*bool] `pulumi:"forceDelete"`
	// S3 object that is the Application Version source bundle.
	Key pulumix.Output[string] `pulumi:"key"`
	// Unique name for the this Application Version.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewApplicationVersion registers a new resource with the given unique name, arguments, and options.
func NewApplicationVersion(ctx *pulumi.Context,
	name string, args *ApplicationVersionArgs, opts ...pulumi.ResourceOption) (*ApplicationVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Application == nil {
		return nil, errors.New("invalid value for required argument 'Application'")
	}
	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationVersion
	err := ctx.RegisterResource("aws:elasticbeanstalk/applicationVersion:ApplicationVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationVersion gets an existing ApplicationVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationVersionState, opts ...pulumi.ResourceOption) (*ApplicationVersion, error) {
	var resource ApplicationVersion
	err := ctx.ReadResource("aws:elasticbeanstalk/applicationVersion:ApplicationVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationVersion resources.
type applicationVersionState struct {
	// Name of the Beanstalk Application the version is associated with.
	Application interface{} `pulumi:"application"`
	// ARN assigned by AWS for this Elastic Beanstalk Application.
	Arn *string `pulumi:"arn"`
	// S3 bucket that contains the Application Version source bundle.
	Bucket interface{} `pulumi:"bucket"`
	// Short description of the Application Version.
	Description *string `pulumi:"description"`
	// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
	ForceDelete *bool `pulumi:"forceDelete"`
	// S3 object that is the Application Version source bundle.
	Key *string `pulumi:"key"`
	// Unique name for the this Application Version.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ApplicationVersionState struct {
	// Name of the Beanstalk Application the version is associated with.
	Application pulumix.Input[*any]
	// ARN assigned by AWS for this Elastic Beanstalk Application.
	Arn pulumix.Input[*string]
	// S3 bucket that contains the Application Version source bundle.
	Bucket pulumix.Input[*any]
	// Short description of the Application Version.
	Description pulumix.Input[*string]
	// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
	ForceDelete pulumix.Input[*bool]
	// S3 object that is the Application Version source bundle.
	Key pulumix.Input[*string]
	// Unique name for the this Application Version.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ApplicationVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationVersionState)(nil)).Elem()
}

type applicationVersionArgs struct {
	// Name of the Beanstalk Application the version is associated with.
	Application interface{} `pulumi:"application"`
	// S3 bucket that contains the Application Version source bundle.
	Bucket interface{} `pulumi:"bucket"`
	// Short description of the Application Version.
	Description *string `pulumi:"description"`
	// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
	ForceDelete *bool `pulumi:"forceDelete"`
	// S3 object that is the Application Version source bundle.
	Key string `pulumi:"key"`
	// Unique name for the this Application Version.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ApplicationVersion resource.
type ApplicationVersionArgs struct {
	// Name of the Beanstalk Application the version is associated with.
	Application pulumix.Input[any]
	// S3 bucket that contains the Application Version source bundle.
	Bucket pulumix.Input[any]
	// Short description of the Application Version.
	Description pulumix.Input[*string]
	// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
	ForceDelete pulumix.Input[*bool]
	// S3 object that is the Application Version source bundle.
	Key pulumix.Input[string]
	// Unique name for the this Application Version.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ApplicationVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationVersionArgs)(nil)).Elem()
}

type ApplicationVersionOutput struct{ *pulumi.OutputState }

func (ApplicationVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationVersion)(nil)).Elem()
}

func (o ApplicationVersionOutput) ToApplicationVersionOutput() ApplicationVersionOutput {
	return o
}

func (o ApplicationVersionOutput) ToApplicationVersionOutputWithContext(ctx context.Context) ApplicationVersionOutput {
	return o
}

func (o ApplicationVersionOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationVersion] {
	return pulumix.Output[ApplicationVersion]{
		OutputState: o.OutputState,
	}
}

// Name of the Beanstalk Application the version is associated with.
func (o ApplicationVersionOutput) Application() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[string] { return v.Application })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN assigned by AWS for this Elastic Beanstalk Application.
func (o ApplicationVersionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// S3 bucket that contains the Application Version source bundle.
func (o ApplicationVersionOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Short description of the Application Version.
func (o ApplicationVersionOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// On delete, force an Application Version to be deleted when it may be in use by multiple Elastic Beanstalk Environments.
func (o ApplicationVersionOutput) ForceDelete() pulumix.Output[*bool] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[*bool] { return v.ForceDelete })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// S3 object that is the Application Version source bundle.
func (o ApplicationVersionOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for the this Application Version.
//
// The following arguments are optional:
func (o ApplicationVersionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of tags for the Elastic Beanstalk Application Version. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ApplicationVersionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ApplicationVersionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ApplicationVersion](o, func(v ApplicationVersion) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ApplicationVersionOutput{})
}
