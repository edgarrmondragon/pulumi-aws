// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon MQ broker resource. This resources also manages users for the broker.
//
// > For more information on Amazon MQ, see [Amazon MQ documentation](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/welcome.html).
//
// > **NOTE:** Amazon MQ currently places limits on **RabbitMQ** brokers. For example, a RabbitMQ broker cannot have: instances with an associated IP address of an ENI attached to the broker, an associated LDAP server to authenticate and authorize broker connections, storage type `EFS`, audit logging, or `configuration` blocks. Although this resource allows you to create RabbitMQ users, RabbitMQ users cannot have console access or groups. Also, Amazon MQ does not return information about RabbitMQ users so drift detection is not possible.
//
// > **NOTE:** Changes to an MQ Broker can occur when you change a parameter, such as `configuration` or `user`, and are reflected in the next maintenance window. Because of this, the provider may report a difference in its planning phase because a modification has not yet taken place. You can use the `applyImmediately` flag to instruct the service to apply the change immediately (see documentation below). Using `applyImmediately` can result in a brief downtime as the broker reboots.
type Broker struct {
	pulumi.CustomResourceState

	// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumix.Output[*bool] `pulumi:"applyImmediately"`
	// ARN of the broker.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
	AuthenticationStrategy pulumix.Output[string] `pulumi:"authenticationStrategy"`
	// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
	AutoMinorVersionUpgrade pulumix.Output[*bool] `pulumi:"autoMinorVersionUpgrade"`
	// Name of the broker.
	BrokerName pulumix.Output[string] `pulumi:"brokerName"`
	// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` only. Detailed below.
	Configuration pulumix.GPtrOutput[BrokerConfiguration, BrokerConfigurationOutput] `pulumi:"configuration"`
	// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
	DeploymentMode pulumix.Output[*string] `pulumi:"deploymentMode"`
	// Configuration block containing encryption options. Detailed below.
	EncryptionOptions pulumix.GPtrOutput[BrokerEncryptionOptions, BrokerEncryptionOptionsOutput] `pulumi:"encryptionOptions"`
	// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
	EngineType pulumix.Output[string] `pulumi:"engineType"`
	// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
	HostInstanceType pulumix.Output[string] `pulumi:"hostInstanceType"`
	// List of information about allocated brokers (both active & standby).
	// * `instances.0.console_url` - The URL of the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) or the [RabbitMQ Management UI](https://www.rabbitmq.com/management.html#external-monitoring) depending on `engineType`.
	// * `instances.0.ip_address` - IP Address of the broker.
	// * `instances.0.endpoints` - Broker's wire-level protocol endpoints in the following order & format referenceable e.g., as `instances.0.endpoints.0` (SSL):
	// * For `ActiveMQ`:
	// * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
	// * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
	// * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
	// * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
	// * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
	// * For `RabbitMQ`:
	// * `amqps://broker-id.mq.us-west-2.amazonaws.com:5671`
	Instances pulumix.GArrayOutput[BrokerInstance, BrokerInstanceOutput] `pulumi:"instances"`
	// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engineType` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
	LdapServerMetadata pulumix.GPtrOutput[BrokerLdapServerMetadata, BrokerLdapServerMetadataOutput] `pulumi:"ldapServerMetadata"`
	// Configuration block for the logging configuration of the broker. Detailed below.
	Logs pulumix.GPtrOutput[BrokerLogs, BrokerLogsOutput] `pulumi:"logs"`
	// Configuration block for the maintenance window start time. Detailed below.
	MaintenanceWindowStartTime pulumix.GPtrOutput[BrokerMaintenanceWindowStartTime, BrokerMaintenanceWindowStartTimeOutput] `pulumi:"maintenanceWindowStartTime"`
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumix.Output[*bool] `pulumi:"publiclyAccessible"`
	// List of security group IDs assigned to the broker.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// Storage type of the broker. For `engineType` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
	StorageType pulumix.Output[string] `pulumi:"storageType"`
	// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
	//
	// The following arguments are optional:
	Users pulumix.GArrayOutput[BrokerUser, BrokerUserOutput] `pulumi:"users"`
}

// NewBroker registers a new resource with the given unique name, arguments, and options.
func NewBroker(ctx *pulumi.Context,
	name string, args *BrokerArgs, opts ...pulumi.ResourceOption) (*Broker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.EngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineVersion'")
	}
	if args.HostInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'HostInstanceType'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Broker
	err := ctx.RegisterResource("aws:mq/broker:Broker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBroker gets an existing Broker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBroker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrokerState, opts ...pulumi.ResourceOption) (*Broker, error) {
	var resource Broker
	err := ctx.ReadResource("aws:mq/broker:Broker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Broker resources.
type brokerState struct {
	// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// ARN of the broker.
	Arn *string `pulumi:"arn"`
	// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
	AuthenticationStrategy *string `pulumi:"authenticationStrategy"`
	// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// Name of the broker.
	BrokerName *string `pulumi:"brokerName"`
	// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` only. Detailed below.
	Configuration *BrokerConfiguration `pulumi:"configuration"`
	// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
	DeploymentMode *string `pulumi:"deploymentMode"`
	// Configuration block containing encryption options. Detailed below.
	EncryptionOptions *BrokerEncryptionOptions `pulumi:"encryptionOptions"`
	// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
	EngineType *string `pulumi:"engineType"`
	// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
	EngineVersion *string `pulumi:"engineVersion"`
	// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
	HostInstanceType *string `pulumi:"hostInstanceType"`
	// List of information about allocated brokers (both active & standby).
	// * `instances.0.console_url` - The URL of the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) or the [RabbitMQ Management UI](https://www.rabbitmq.com/management.html#external-monitoring) depending on `engineType`.
	// * `instances.0.ip_address` - IP Address of the broker.
	// * `instances.0.endpoints` - Broker's wire-level protocol endpoints in the following order & format referenceable e.g., as `instances.0.endpoints.0` (SSL):
	// * For `ActiveMQ`:
	// * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
	// * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
	// * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
	// * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
	// * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
	// * For `RabbitMQ`:
	// * `amqps://broker-id.mq.us-west-2.amazonaws.com:5671`
	Instances []BrokerInstance `pulumi:"instances"`
	// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engineType` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
	LdapServerMetadata *BrokerLdapServerMetadata `pulumi:"ldapServerMetadata"`
	// Configuration block for the logging configuration of the broker. Detailed below.
	Logs *BrokerLogs `pulumi:"logs"`
	// Configuration block for the maintenance window start time. Detailed below.
	MaintenanceWindowStartTime *BrokerMaintenanceWindowStartTime `pulumi:"maintenanceWindowStartTime"`
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// List of security group IDs assigned to the broker.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Storage type of the broker. For `engineType` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
	StorageType *string `pulumi:"storageType"`
	// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
	//
	// The following arguments are optional:
	Users []BrokerUser `pulumi:"users"`
}

type BrokerState struct {
	// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumix.Input[*bool]
	// ARN of the broker.
	Arn pulumix.Input[*string]
	// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
	AuthenticationStrategy pulumix.Input[*string]
	// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
	AutoMinorVersionUpgrade pulumix.Input[*bool]
	// Name of the broker.
	BrokerName pulumix.Input[*string]
	// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` only. Detailed below.
	Configuration pulumix.Input[*BrokerConfigurationArgs]
	// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
	DeploymentMode pulumix.Input[*string]
	// Configuration block containing encryption options. Detailed below.
	EncryptionOptions pulumix.Input[*BrokerEncryptionOptionsArgs]
	// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
	EngineType pulumix.Input[*string]
	// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
	EngineVersion pulumix.Input[*string]
	// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
	HostInstanceType pulumix.Input[*string]
	// List of information about allocated brokers (both active & standby).
	// * `instances.0.console_url` - The URL of the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) or the [RabbitMQ Management UI](https://www.rabbitmq.com/management.html#external-monitoring) depending on `engineType`.
	// * `instances.0.ip_address` - IP Address of the broker.
	// * `instances.0.endpoints` - Broker's wire-level protocol endpoints in the following order & format referenceable e.g., as `instances.0.endpoints.0` (SSL):
	// * For `ActiveMQ`:
	// * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
	// * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
	// * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
	// * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
	// * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
	// * For `RabbitMQ`:
	// * `amqps://broker-id.mq.us-west-2.amazonaws.com:5671`
	Instances pulumix.Input[[]*BrokerInstanceArgs]
	// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engineType` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
	LdapServerMetadata pulumix.Input[*BrokerLdapServerMetadataArgs]
	// Configuration block for the logging configuration of the broker. Detailed below.
	Logs pulumix.Input[*BrokerLogsArgs]
	// Configuration block for the maintenance window start time. Detailed below.
	MaintenanceWindowStartTime pulumix.Input[*BrokerMaintenanceWindowStartTimeArgs]
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumix.Input[*bool]
	// List of security group IDs assigned to the broker.
	SecurityGroups pulumix.Input[[]string]
	// Storage type of the broker. For `engineType` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
	StorageType pulumix.Input[*string]
	// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
	SubnetIds pulumix.Input[[]string]
	// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
	//
	// The following arguments are optional:
	Users pulumix.Input[[]*BrokerUserArgs]
}

func (BrokerState) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerState)(nil)).Elem()
}

type brokerArgs struct {
	// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
	AuthenticationStrategy *string `pulumi:"authenticationStrategy"`
	// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// Name of the broker.
	BrokerName *string `pulumi:"brokerName"`
	// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` only. Detailed below.
	Configuration *BrokerConfiguration `pulumi:"configuration"`
	// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
	DeploymentMode *string `pulumi:"deploymentMode"`
	// Configuration block containing encryption options. Detailed below.
	EncryptionOptions *BrokerEncryptionOptions `pulumi:"encryptionOptions"`
	// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
	EngineType string `pulumi:"engineType"`
	// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
	EngineVersion string `pulumi:"engineVersion"`
	// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
	HostInstanceType string `pulumi:"hostInstanceType"`
	// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engineType` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
	LdapServerMetadata *BrokerLdapServerMetadata `pulumi:"ldapServerMetadata"`
	// Configuration block for the logging configuration of the broker. Detailed below.
	Logs *BrokerLogs `pulumi:"logs"`
	// Configuration block for the maintenance window start time. Detailed below.
	MaintenanceWindowStartTime *BrokerMaintenanceWindowStartTime `pulumi:"maintenanceWindowStartTime"`
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// List of security group IDs assigned to the broker.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Storage type of the broker. For `engineType` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
	StorageType *string `pulumi:"storageType"`
	// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
	SubnetIds []string `pulumi:"subnetIds"`
	// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
	//
	// The following arguments are optional:
	Users []BrokerUser `pulumi:"users"`
}

// The set of arguments for constructing a Broker resource.
type BrokerArgs struct {
	// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumix.Input[*bool]
	// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
	AuthenticationStrategy pulumix.Input[*string]
	// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
	AutoMinorVersionUpgrade pulumix.Input[*bool]
	// Name of the broker.
	BrokerName pulumix.Input[*string]
	// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` only. Detailed below.
	Configuration pulumix.Input[*BrokerConfigurationArgs]
	// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
	DeploymentMode pulumix.Input[*string]
	// Configuration block containing encryption options. Detailed below.
	EncryptionOptions pulumix.Input[*BrokerEncryptionOptionsArgs]
	// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
	EngineType pulumix.Input[string]
	// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
	EngineVersion pulumix.Input[string]
	// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
	HostInstanceType pulumix.Input[string]
	// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engineType` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
	LdapServerMetadata pulumix.Input[*BrokerLdapServerMetadataArgs]
	// Configuration block for the logging configuration of the broker. Detailed below.
	Logs pulumix.Input[*BrokerLogsArgs]
	// Configuration block for the maintenance window start time. Detailed below.
	MaintenanceWindowStartTime pulumix.Input[*BrokerMaintenanceWindowStartTimeArgs]
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumix.Input[*bool]
	// List of security group IDs assigned to the broker.
	SecurityGroups pulumix.Input[[]string]
	// Storage type of the broker. For `engineType` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
	StorageType pulumix.Input[*string]
	// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
	SubnetIds pulumix.Input[[]string]
	// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
	//
	// The following arguments are optional:
	Users pulumix.Input[[]*BrokerUserArgs]
}

func (BrokerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerArgs)(nil)).Elem()
}

type BrokerOutput struct{ *pulumi.OutputState }

func (BrokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Broker)(nil)).Elem()
}

func (o BrokerOutput) ToBrokerOutput() BrokerOutput {
	return o
}

func (o BrokerOutput) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return o
}

func (o BrokerOutput) ToOutput(ctx context.Context) pulumix.Output[Broker] {
	return pulumix.Output[Broker]{
		OutputState: o.OutputState,
	}
}

// Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is `false`.
func (o BrokerOutput) ApplyImmediately() pulumix.Output[*bool] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[*bool] { return v.ApplyImmediately })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// ARN of the broker.
func (o BrokerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
func (o BrokerOutput) AuthenticationStrategy() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.AuthenticationStrategy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
func (o BrokerOutput) AutoMinorVersionUpgrade() pulumix.Output[*bool] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[*bool] { return v.AutoMinorVersionUpgrade })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the broker.
func (o BrokerOutput) BrokerName() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.BrokerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` only. Detailed below.
func (o BrokerOutput) Configuration() pulumix.GPtrOutput[BrokerConfiguration, BrokerConfigurationOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GPtrOutput[BrokerConfiguration, BrokerConfigurationOutput] {
		return v.Configuration
	})
	unwrapped := pulumix.Flatten[*BrokerConfiguration, pulumix.GPtrOutput[BrokerConfiguration, BrokerConfigurationOutput]](value)
	return pulumix.GPtrOutput[BrokerConfiguration, BrokerConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
func (o BrokerOutput) DeploymentMode() pulumix.Output[*string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[*string] { return v.DeploymentMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block containing encryption options. Detailed below.
func (o BrokerOutput) EncryptionOptions() pulumix.GPtrOutput[BrokerEncryptionOptions, BrokerEncryptionOptionsOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GPtrOutput[BrokerEncryptionOptions, BrokerEncryptionOptionsOutput] {
		return v.EncryptionOptions
	})
	unwrapped := pulumix.Flatten[*BrokerEncryptionOptions, pulumix.GPtrOutput[BrokerEncryptionOptions, BrokerEncryptionOptionsOutput]](value)
	return pulumix.GPtrOutput[BrokerEncryptionOptions, BrokerEncryptionOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
func (o BrokerOutput) EngineType() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.EngineType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the broker engine. See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions. For example, `5.15.0`.
func (o BrokerOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
func (o BrokerOutput) HostInstanceType() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.HostInstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of information about allocated brokers (both active & standby).
// * `instances.0.console_url` - The URL of the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) or the [RabbitMQ Management UI](https://www.rabbitmq.com/management.html#external-monitoring) depending on `engineType`.
// * `instances.0.ip_address` - IP Address of the broker.
// * `instances.0.endpoints` - Broker's wire-level protocol endpoints in the following order & format referenceable e.g., as `instances.0.endpoints.0` (SSL):
// * For `ActiveMQ`:
// * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
// * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
// * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
// * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
// * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
// * For `RabbitMQ`:
// * `amqps://broker-id.mq.us-west-2.amazonaws.com:5671`
func (o BrokerOutput) Instances() pulumix.GArrayOutput[BrokerInstance, BrokerInstanceOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GArrayOutput[BrokerInstance, BrokerInstanceOutput] { return v.Instances })
	unwrapped := pulumix.Flatten[[]BrokerInstance, pulumix.GArrayOutput[BrokerInstance, BrokerInstanceOutput]](value)
	return pulumix.GArrayOutput[BrokerInstance, BrokerInstanceOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for `engineType` `RabbitMQ`. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)
func (o BrokerOutput) LdapServerMetadata() pulumix.GPtrOutput[BrokerLdapServerMetadata, BrokerLdapServerMetadataOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GPtrOutput[BrokerLdapServerMetadata, BrokerLdapServerMetadataOutput] {
		return v.LdapServerMetadata
	})
	unwrapped := pulumix.Flatten[*BrokerLdapServerMetadata, pulumix.GPtrOutput[BrokerLdapServerMetadata, BrokerLdapServerMetadataOutput]](value)
	return pulumix.GPtrOutput[BrokerLdapServerMetadata, BrokerLdapServerMetadataOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the logging configuration of the broker. Detailed below.
func (o BrokerOutput) Logs() pulumix.GPtrOutput[BrokerLogs, BrokerLogsOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GPtrOutput[BrokerLogs, BrokerLogsOutput] { return v.Logs })
	unwrapped := pulumix.Flatten[*BrokerLogs, pulumix.GPtrOutput[BrokerLogs, BrokerLogsOutput]](value)
	return pulumix.GPtrOutput[BrokerLogs, BrokerLogsOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the maintenance window start time. Detailed below.
func (o BrokerOutput) MaintenanceWindowStartTime() pulumix.GPtrOutput[BrokerMaintenanceWindowStartTime, BrokerMaintenanceWindowStartTimeOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GPtrOutput[BrokerMaintenanceWindowStartTime, BrokerMaintenanceWindowStartTimeOutput] {
		return v.MaintenanceWindowStartTime
	})
	unwrapped := pulumix.Flatten[*BrokerMaintenanceWindowStartTime, pulumix.GPtrOutput[BrokerMaintenanceWindowStartTime, BrokerMaintenanceWindowStartTimeOutput]](value)
	return pulumix.GPtrOutput[BrokerMaintenanceWindowStartTime, BrokerMaintenanceWindowStartTimeOutput]{OutputState: unwrapped.OutputState}
}

// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
func (o BrokerOutput) PubliclyAccessible() pulumix.Output[*bool] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[*bool] { return v.PubliclyAccessible })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// List of security group IDs assigned to the broker.
func (o BrokerOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Storage type of the broker. For `engineType` `ActiveMQ`, the valid values are `efs` and `ebs`, and the AWS-default is `efs`. For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
func (o BrokerOutput) StorageType() pulumix.Output[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.Output[string] { return v.StorageType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
func (o BrokerOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o BrokerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o BrokerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
//
// The following arguments are optional:
func (o BrokerOutput) Users() pulumix.GArrayOutput[BrokerUser, BrokerUserOutput] {
	value := pulumix.Apply[Broker](o, func(v Broker) pulumix.GArrayOutput[BrokerUser, BrokerUserOutput] { return v.Users })
	unwrapped := pulumix.Flatten[[]BrokerUser, pulumix.GArrayOutput[BrokerUser, BrokerUserOutput]](value)
	return pulumix.GArrayOutput[BrokerUser, BrokerUserOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(BrokerOutput{})
}
