// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Kendra Thesaurus.
func LookupThesaurus(ctx *pulumi.Context, args *LookupThesaurusArgs, opts ...pulumi.InvokeOption) (*LookupThesaurusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupThesaurusResult
	err := ctx.Invoke("aws:kendra/getThesaurus:getThesaurus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getThesaurus.
type LookupThesaurusArgs struct {
	// Identifier of the index that contains the Thesaurus.
	IndexId string `pulumi:"indexId"`
	// Metadata that helps organize the Thesaurus you create.
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the Thesaurus.
	ThesaurusId string `pulumi:"thesaurusId"`
}

// A collection of values returned by getThesaurus.
type LookupThesaurusResult struct {
	// ARN of the Thesaurus.
	Arn string `pulumi:"arn"`
	// Unix datetime that the Thesaurus was created.
	CreatedAt string `pulumi:"createdAt"`
	// Description of the Thesaurus.
	Description string `pulumi:"description"`
	// When the `status` field value is `FAILED`, this contains a message that explains why.
	ErrorMessage string `pulumi:"errorMessage"`
	// Size of the Thesaurus file in bytes.
	FileSizeBytes int `pulumi:"fileSizeBytes"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	IndexId string `pulumi:"indexId"`
	// Name of the Thesaurus.
	Name string `pulumi:"name"`
	// ARN of a role with permission to access the S3 bucket that contains the Thesaurus. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
	RoleArn string `pulumi:"roleArn"`
	// S3 location of the Thesaurus input data. Detailed below.
	SourceS3Paths []GetThesaurusSourceS3Path `pulumi:"sourceS3Paths"`
	// Status of the Thesaurus. It is ready to use when the status is `ACTIVE`.
	Status string `pulumi:"status"`
	// Number of synonym rules in the Thesaurus file.
	SynonymRuleCount int `pulumi:"synonymRuleCount"`
	// Metadata that helps organize the Thesaurus you create.
	Tags map[string]string `pulumi:"tags"`
	// Number of unique terms in the Thesaurus file. For example, the synonyms `a,b,c` and `a=>d`, the term count would be 4.
	TermCount   int    `pulumi:"termCount"`
	ThesaurusId string `pulumi:"thesaurusId"`
	// Date and time that the Thesaurus was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupThesaurusOutput(ctx *pulumi.Context, args LookupThesaurusOutputArgs, opts ...pulumi.InvokeOption) LookupThesaurusResultOutput {
	outputResult := pulumix.ApplyErr[*LookupThesaurusArgs](args.ToOutput(), func(plainArgs *LookupThesaurusArgs) (*LookupThesaurusResult, error) {
		return LookupThesaurus(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupThesaurusResultOutput, *LookupThesaurusResult](outputResult)
}

// A collection of arguments for invoking getThesaurus.
type LookupThesaurusOutputArgs struct {
	// Identifier of the index that contains the Thesaurus.
	IndexId pulumix.Input[string] `pulumi:"indexId"`
	// Metadata that helps organize the Thesaurus you create.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Identifier of the Thesaurus.
	ThesaurusId pulumix.Input[string] `pulumi:"thesaurusId"`
}

func (args LookupThesaurusOutputArgs) ToOutput() pulumix.Output[*LookupThesaurusArgs] {
	allArgs := pulumix.All(
		args.IndexId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.ThesaurusId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupThesaurusArgs {
		return &LookupThesaurusArgs{
			IndexId:     resolvedArgs[0].(string),
			Tags:        resolvedArgs[1].(map[string]string),
			ThesaurusId: resolvedArgs[2].(string),
		}
	})
}

type LookupThesaurusResultOutput struct{ *pulumi.OutputState }

func (LookupThesaurusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThesaurusResult)(nil)).Elem()
}

func (o LookupThesaurusResultOutput) ToOutput(context.Context) pulumix.Output[*LookupThesaurusResult] {
	return pulumix.Output[*LookupThesaurusResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupThesaurusResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.Arn })
}

func (o LookupThesaurusResultOutput) CreatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.CreatedAt })
}

func (o LookupThesaurusResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.Description })
}

func (o LookupThesaurusResultOutput) ErrorMessage() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.ErrorMessage })
}

func (o LookupThesaurusResultOutput) FileSizeBytes() pulumix.Output[int] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) int { return v.FileSizeBytes })
}

func (o LookupThesaurusResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.Id })
}

func (o LookupThesaurusResultOutput) IndexId() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.IndexId })
}

func (o LookupThesaurusResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.Name })
}

func (o LookupThesaurusResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.RoleArn })
}

func (o LookupThesaurusResultOutput) SourceS3Paths() pulumix.GArrayOutput[GetThesaurusSourceS3Path, GetThesaurusSourceS3PathOutput] {
	value := pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) []GetThesaurusSourceS3Path { return v.SourceS3Paths })
	return pulumix.GArrayOutput[GetThesaurusSourceS3Path, GetThesaurusSourceS3PathOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupThesaurusResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.Status })
}

func (o LookupThesaurusResultOutput) SynonymRuleCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) int { return v.SynonymRuleCount })
}

func (o LookupThesaurusResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupThesaurusResultOutput) TermCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) int { return v.TermCount })
}

func (o LookupThesaurusResultOutput) ThesaurusId() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.ThesaurusId })
}

func (o LookupThesaurusResultOutput) UpdatedAt() pulumix.Output[string] {
	return pulumix.Apply[*LookupThesaurusResult](o, func(v *LookupThesaurusResult) string { return v.UpdatedAt })
}
