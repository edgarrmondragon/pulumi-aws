// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECR Image data source allows the details of an image with a particular tag or digest to be retrieved.
func GetImage(ctx *pulumi.Context, args *GetImageArgs, opts ...pulumi.InvokeOption) (*GetImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageResult
	err := ctx.Invoke("aws:ecr/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type GetImageArgs struct {
	// Sha256 digest of the image manifest. At least one of `imageDigest`, `imageTag`, or `mostRecent` must be specified.
	ImageDigest *string `pulumi:"imageDigest"`
	// Tag associated with this image. At least one of `imageDigest`, `imageTag`, or `mostRecent` must be specified.
	ImageTag *string `pulumi:"imageTag"`
	// Return the most recently pushed image. At least one of `imageDigest`, `imageTag`, or `mostRecent` must be specified.
	MostRecent *bool `pulumi:"mostRecent"`
	// ID of the Registry where the repository resides.
	RegistryId *string `pulumi:"registryId"`
	// Name of the ECR Repository.
	RepositoryName string `pulumi:"repositoryName"`
}

// A collection of values returned by getImage.
type GetImageResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	ImageDigest string `pulumi:"imageDigest"`
	// Date and time, expressed as a unix timestamp, at which the current image was pushed to the repository.
	ImagePushedAt int `pulumi:"imagePushedAt"`
	// Size, in bytes, of the image in the repository.
	ImageSizeInBytes int     `pulumi:"imageSizeInBytes"`
	ImageTag         *string `pulumi:"imageTag"`
	// List of tags associated with this image.
	ImageTags      []string `pulumi:"imageTags"`
	MostRecent     *bool    `pulumi:"mostRecent"`
	RegistryId     string   `pulumi:"registryId"`
	RepositoryName string   `pulumi:"repositoryName"`
}

func GetImageOutput(ctx *pulumi.Context, args GetImageOutputArgs, opts ...pulumi.InvokeOption) GetImageResultOutput {
	outputResult := pulumix.ApplyErr[*GetImageArgs](args.ToOutput(), func(plainArgs *GetImageArgs) (*GetImageResult, error) {
		return GetImage(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetImageResultOutput, *GetImageResult](outputResult)
}

// A collection of arguments for invoking getImage.
type GetImageOutputArgs struct {
	// Sha256 digest of the image manifest. At least one of `imageDigest`, `imageTag`, or `mostRecent` must be specified.
	ImageDigest pulumix.Input[*string] `pulumi:"imageDigest"`
	// Tag associated with this image. At least one of `imageDigest`, `imageTag`, or `mostRecent` must be specified.
	ImageTag pulumix.Input[*string] `pulumi:"imageTag"`
	// Return the most recently pushed image. At least one of `imageDigest`, `imageTag`, or `mostRecent` must be specified.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// ID of the Registry where the repository resides.
	RegistryId pulumix.Input[*string] `pulumi:"registryId"`
	// Name of the ECR Repository.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (args GetImageOutputArgs) ToOutput() pulumix.Output[*GetImageArgs] {
	allArgs := pulumix.All(
		args.ImageDigest.ToOutput(context.Background()).AsAny(),
		args.ImageTag.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.RegistryId.ToOutput(context.Background()).AsAny(),
		args.RepositoryName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetImageArgs {
		return &GetImageArgs{
			ImageDigest:    resolvedArgs[0].(*string),
			ImageTag:       resolvedArgs[1].(*string),
			MostRecent:     resolvedArgs[2].(*bool),
			RegistryId:     resolvedArgs[3].(*string),
			RepositoryName: resolvedArgs[4].(string),
		}
	})
}

type GetImageResultOutput struct{ *pulumi.OutputState }

func (GetImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageResult)(nil)).Elem()
}

func (o GetImageResultOutput) ToOutput(context.Context) pulumix.Output[*GetImageResult] {
	return pulumix.Output[*GetImageResult]{
		OutputState: o.OutputState,
	}
}

func (o GetImageResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.Id })
}

func (o GetImageResultOutput) ImageDigest() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.ImageDigest })
}

func (o GetImageResultOutput) ImagePushedAt() pulumix.Output[int] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) int { return v.ImagePushedAt })
}

func (o GetImageResultOutput) ImageSizeInBytes() pulumix.Output[int] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) int { return v.ImageSizeInBytes })
}

func (o GetImageResultOutput) ImageTag() pulumix.Output[*string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) *string { return v.ImageTag })
}

func (o GetImageResultOutput) ImageTags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) []string { return v.ImageTags })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetImageResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) *bool { return v.MostRecent })
}

func (o GetImageResultOutput) RegistryId() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.RegistryId })
}

func (o GetImageResultOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[*GetImageResult](o, func(v *GetImageResult) string { return v.RepositoryName })
}
