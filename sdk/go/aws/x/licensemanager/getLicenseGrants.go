// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can be used to get a set of license grant ARNs matching a filter.
func GetLicenseGrants(ctx *pulumi.Context, args *GetLicenseGrantsArgs, opts ...pulumi.InvokeOption) (*GetLicenseGrantsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLicenseGrantsResult
	err := ctx.Invoke("aws:licensemanager/getLicenseGrants:getLicenseGrants", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLicenseGrants.
type GetLicenseGrantsArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters []GetLicenseGrantsFilter `pulumi:"filters"`
}

// A collection of values returned by getLicenseGrants.
type GetLicenseGrantsResult struct {
	// List of all the license grant ARNs found.
	Arns    []string                 `pulumi:"arns"`
	Filters []GetLicenseGrantsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetLicenseGrantsOutput(ctx *pulumi.Context, args GetLicenseGrantsOutputArgs, opts ...pulumi.InvokeOption) GetLicenseGrantsResultOutput {
	outputResult := pulumix.ApplyErr[*GetLicenseGrantsArgs](args.ToOutput(), func(plainArgs *GetLicenseGrantsArgs) (*GetLicenseGrantsResult, error) {
		return GetLicenseGrants(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLicenseGrantsResultOutput, *GetLicenseGrantsResult](outputResult)
}

// A collection of arguments for invoking getLicenseGrants.
type GetLicenseGrantsOutputArgs struct {
	// Custom filter block as described below.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Filters pulumix.Input[[]*GetLicenseGrantsFilterArgs] `pulumi:"filters"`
}

func (args GetLicenseGrantsOutputArgs) ToOutput() pulumix.Output[*GetLicenseGrantsArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLicenseGrantsArgs {
		return &GetLicenseGrantsArgs{
			Filters: resolvedArgs[0].([]GetLicenseGrantsFilter),
		}
	})
}

type GetLicenseGrantsResultOutput struct{ *pulumi.OutputState }

func (GetLicenseGrantsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseGrantsResult)(nil)).Elem()
}

func (o GetLicenseGrantsResultOutput) ToOutput(context.Context) pulumix.Output[*GetLicenseGrantsResult] {
	return pulumix.Output[*GetLicenseGrantsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLicenseGrantsResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLicenseGrantsResult](o, func(v *GetLicenseGrantsResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLicenseGrantsResultOutput) Filters() pulumix.GArrayOutput[GetLicenseGrantsFilter, GetLicenseGrantsFilterOutput] {
	value := pulumix.Apply[*GetLicenseGrantsResult](o, func(v *GetLicenseGrantsResult) []GetLicenseGrantsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetLicenseGrantsFilter, GetLicenseGrantsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetLicenseGrantsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLicenseGrantsResult](o, func(v *GetLicenseGrantsResult) string { return v.Id })
}
