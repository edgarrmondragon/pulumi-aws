// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AssessmentAssessmentReportsDestination struct {
	// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
	Destination string `pulumi:"destination"`
	// Destination type. Currently, `S3` is the only valid value.
	DestinationType string `pulumi:"destinationType"`
}

type AssessmentAssessmentReportsDestinationArgs struct {
	// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
	Destination pulumix.Input[string] `pulumi:"destination"`
	// Destination type. Currently, `S3` is the only valid value.
	DestinationType pulumix.Input[string] `pulumi:"destinationType"`
}

func (AssessmentAssessmentReportsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput {
	return i.ToAssessmentAssessmentReportsDestinationOutputWithContext(context.Background())
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationOutput)
}

func (i *AssessmentAssessmentReportsDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentAssessmentReportsDestinationArgs] {
	return pulumix.Val(i)
}

type AssessmentAssessmentReportsDestinationOutput struct{ *pulumi.OutputState }

func (AssessmentAssessmentReportsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentAssessmentReportsDestination] {
	return pulumix.Output[AssessmentAssessmentReportsDestination]{
		OutputState: o.OutputState,
	}
}

// Destination of the assessment report. This value be in the form `s3://{bucket_name}`.
func (o AssessmentAssessmentReportsDestinationOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[AssessmentAssessmentReportsDestination](o, func(v AssessmentAssessmentReportsDestination) string { return v.Destination })
}

// Destination type. Currently, `S3` is the only valid value.
func (o AssessmentAssessmentReportsDestinationOutput) DestinationType() pulumix.Output[string] {
	return pulumix.Apply[AssessmentAssessmentReportsDestination](o, func(v AssessmentAssessmentReportsDestination) string { return v.DestinationType })
}

type AssessmentRole struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn string `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType string `pulumi:"roleType"`
}

type AssessmentRoleArgs struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType pulumix.Input[string] `pulumi:"roleType"`
}

func (AssessmentRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRole)(nil)).Elem()
}

func (i AssessmentRoleArgs) ToAssessmentRoleOutput() AssessmentRoleOutput {
	return i.ToAssessmentRoleOutputWithContext(context.Background())
}

func (i AssessmentRoleArgs) ToAssessmentRoleOutputWithContext(ctx context.Context) AssessmentRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRoleOutput)
}

func (i *AssessmentRoleArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentRoleArgs] {
	return pulumix.Val(i)
}

type AssessmentRoleOutput struct{ *pulumi.OutputState }

func (AssessmentRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRole)(nil)).Elem()
}

func (o AssessmentRoleOutput) ToAssessmentRoleOutput() AssessmentRoleOutput {
	return o
}

func (o AssessmentRoleOutput) ToAssessmentRoleOutputWithContext(ctx context.Context) AssessmentRoleOutput {
	return o
}

func (o AssessmentRoleOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentRole] {
	return pulumix.Output[AssessmentRole]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the IAM role.
func (o AssessmentRoleOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AssessmentRole](o, func(v AssessmentRole) string { return v.RoleArn })
}

// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
func (o AssessmentRoleOutput) RoleType() pulumix.Output[string] {
	return pulumix.Apply[AssessmentRole](o, func(v AssessmentRole) string { return v.RoleType })
}

type AssessmentRolesAll struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn string `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType string `pulumi:"roleType"`
}

type AssessmentRolesAllArgs struct {
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
	RoleType pulumix.Input[string] `pulumi:"roleType"`
}

func (AssessmentRolesAllArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRolesAll)(nil)).Elem()
}

func (i AssessmentRolesAllArgs) ToAssessmentRolesAllOutput() AssessmentRolesAllOutput {
	return i.ToAssessmentRolesAllOutputWithContext(context.Background())
}

func (i AssessmentRolesAllArgs) ToAssessmentRolesAllOutputWithContext(ctx context.Context) AssessmentRolesAllOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRolesAllOutput)
}

func (i *AssessmentRolesAllArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentRolesAllArgs] {
	return pulumix.Val(i)
}

type AssessmentRolesAllOutput struct{ *pulumi.OutputState }

func (AssessmentRolesAllOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRolesAll)(nil)).Elem()
}

func (o AssessmentRolesAllOutput) ToAssessmentRolesAllOutput() AssessmentRolesAllOutput {
	return o
}

func (o AssessmentRolesAllOutput) ToAssessmentRolesAllOutputWithContext(ctx context.Context) AssessmentRolesAllOutput {
	return o
}

func (o AssessmentRolesAllOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentRolesAll] {
	return pulumix.Output[AssessmentRolesAll]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the IAM role.
func (o AssessmentRolesAllOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[AssessmentRolesAll](o, func(v AssessmentRolesAll) string { return v.RoleArn })
}

// Type of customer persona. For assessment creation, type must always be `PROCESS_OWNER`.
func (o AssessmentRolesAllOutput) RoleType() pulumix.Output[string] {
	return pulumix.Apply[AssessmentRolesAll](o, func(v AssessmentRolesAll) string { return v.RoleType })
}

type AssessmentScope struct {
	// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
	AwsAccounts []AssessmentScopeAwsAccount `pulumi:"awsAccounts"`
	// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
	AwsServices []AssessmentScopeAwsService `pulumi:"awsServices"`
}

type AssessmentScopeArgs struct {
	// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
	AwsAccounts pulumix.Input[[]*AssessmentScopeAwsAccountArgs] `pulumi:"awsAccounts"`
	// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
	AwsServices pulumix.Input[[]*AssessmentScopeAwsServiceArgs] `pulumi:"awsServices"`
}

func (AssessmentScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScope)(nil)).Elem()
}

func (i AssessmentScopeArgs) ToAssessmentScopeOutput() AssessmentScopeOutput {
	return i.ToAssessmentScopeOutputWithContext(context.Background())
}

func (i AssessmentScopeArgs) ToAssessmentScopeOutputWithContext(ctx context.Context) AssessmentScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeOutput)
}

func (i *AssessmentScopeArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentScopeArgs] {
	return pulumix.Val(i)
}

type AssessmentScopeOutput struct{ *pulumi.OutputState }

func (AssessmentScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScope)(nil)).Elem()
}

func (o AssessmentScopeOutput) ToAssessmentScopeOutput() AssessmentScopeOutput {
	return o
}

func (o AssessmentScopeOutput) ToAssessmentScopeOutputWithContext(ctx context.Context) AssessmentScopeOutput {
	return o
}

func (o AssessmentScopeOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentScope] {
	return pulumix.Output[AssessmentScope]{
		OutputState: o.OutputState,
	}
}

// Amazon Web Services accounts that are in scope for the assessment. See `awsAccounts` below.
func (o AssessmentScopeOutput) AwsAccounts() pulumix.GArrayOutput[AssessmentScopeAwsAccount, AssessmentScopeAwsAccountOutput] {
	value := pulumix.Apply[AssessmentScope](o, func(v AssessmentScope) []AssessmentScopeAwsAccount { return v.AwsAccounts })
	return pulumix.GArrayOutput[AssessmentScopeAwsAccount, AssessmentScopeAwsAccountOutput]{OutputState: value.OutputState}
}

// Amazon Web Services services that are included in the scope of the assessment. See `awsServices` below.
func (o AssessmentScopeOutput) AwsServices() pulumix.GArrayOutput[AssessmentScopeAwsService, AssessmentScopeAwsServiceOutput] {
	value := pulumix.Apply[AssessmentScope](o, func(v AssessmentScope) []AssessmentScopeAwsService { return v.AwsServices })
	return pulumix.GArrayOutput[AssessmentScopeAwsService, AssessmentScopeAwsServiceOutput]{OutputState: value.OutputState}
}

type AssessmentScopeAwsAccount struct {
	// Identifier for the Amazon Web Services account.
	Id string `pulumi:"id"`
}

type AssessmentScopeAwsAccountArgs struct {
	// Identifier for the Amazon Web Services account.
	Id pulumix.Input[string] `pulumi:"id"`
}

func (AssessmentScopeAwsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsAccount)(nil)).Elem()
}

func (i AssessmentScopeAwsAccountArgs) ToAssessmentScopeAwsAccountOutput() AssessmentScopeAwsAccountOutput {
	return i.ToAssessmentScopeAwsAccountOutputWithContext(context.Background())
}

func (i AssessmentScopeAwsAccountArgs) ToAssessmentScopeAwsAccountOutputWithContext(ctx context.Context) AssessmentScopeAwsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeAwsAccountOutput)
}

func (i *AssessmentScopeAwsAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentScopeAwsAccountArgs] {
	return pulumix.Val(i)
}

type AssessmentScopeAwsAccountOutput struct{ *pulumi.OutputState }

func (AssessmentScopeAwsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsAccount)(nil)).Elem()
}

func (o AssessmentScopeAwsAccountOutput) ToAssessmentScopeAwsAccountOutput() AssessmentScopeAwsAccountOutput {
	return o
}

func (o AssessmentScopeAwsAccountOutput) ToAssessmentScopeAwsAccountOutputWithContext(ctx context.Context) AssessmentScopeAwsAccountOutput {
	return o
}

func (o AssessmentScopeAwsAccountOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentScopeAwsAccount] {
	return pulumix.Output[AssessmentScopeAwsAccount]{
		OutputState: o.OutputState,
	}
}

// Identifier for the Amazon Web Services account.
func (o AssessmentScopeAwsAccountOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[AssessmentScopeAwsAccount](o, func(v AssessmentScopeAwsAccount) string { return v.Id })
}

type AssessmentScopeAwsService struct {
	// Name of the Amazon Web Service.
	ServiceName string `pulumi:"serviceName"`
}

type AssessmentScopeAwsServiceArgs struct {
	// Name of the Amazon Web Service.
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
}

func (AssessmentScopeAwsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsService)(nil)).Elem()
}

func (i AssessmentScopeAwsServiceArgs) ToAssessmentScopeAwsServiceOutput() AssessmentScopeAwsServiceOutput {
	return i.ToAssessmentScopeAwsServiceOutputWithContext(context.Background())
}

func (i AssessmentScopeAwsServiceArgs) ToAssessmentScopeAwsServiceOutputWithContext(ctx context.Context) AssessmentScopeAwsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeAwsServiceOutput)
}

func (i *AssessmentScopeAwsServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*AssessmentScopeAwsServiceArgs] {
	return pulumix.Val(i)
}

type AssessmentScopeAwsServiceOutput struct{ *pulumi.OutputState }

func (AssessmentScopeAwsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScopeAwsService)(nil)).Elem()
}

func (o AssessmentScopeAwsServiceOutput) ToAssessmentScopeAwsServiceOutput() AssessmentScopeAwsServiceOutput {
	return o
}

func (o AssessmentScopeAwsServiceOutput) ToAssessmentScopeAwsServiceOutputWithContext(ctx context.Context) AssessmentScopeAwsServiceOutput {
	return o
}

func (o AssessmentScopeAwsServiceOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentScopeAwsService] {
	return pulumix.Output[AssessmentScopeAwsService]{
		OutputState: o.OutputState,
	}
}

// Name of the Amazon Web Service.
func (o AssessmentScopeAwsServiceOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[AssessmentScopeAwsService](o, func(v AssessmentScopeAwsService) string { return v.ServiceName })
}

type ControlControlMappingSource struct {
	// Description of the source.
	SourceDescription *string `pulumi:"sourceDescription"`
	// Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
	SourceFrequency *string `pulumi:"sourceFrequency"`
	SourceId        *string `pulumi:"sourceId"`
	// The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `sourceKeyword` below.
	SourceKeyword *ControlControlMappingSourceSourceKeyword `pulumi:"sourceKeyword"`
	// Name of the source.
	SourceName string `pulumi:"sourceName"`
	// The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
	SourceSetUpOption string `pulumi:"sourceSetUpOption"`
	// Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
	//
	// The following arguments are optional:
	SourceType string `pulumi:"sourceType"`
	// Instructions for troubleshooting the control.
	TroubleshootingText *string `pulumi:"troubleshootingText"`
}

type ControlControlMappingSourceArgs struct {
	// Description of the source.
	SourceDescription pulumix.Input[*string] `pulumi:"sourceDescription"`
	// Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
	SourceFrequency pulumix.Input[*string] `pulumi:"sourceFrequency"`
	SourceId        pulumix.Input[*string] `pulumi:"sourceId"`
	// The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `sourceKeyword` below.
	SourceKeyword pulumix.Input[*ControlControlMappingSourceSourceKeywordArgs] `pulumi:"sourceKeyword"`
	// Name of the source.
	SourceName pulumix.Input[string] `pulumi:"sourceName"`
	// The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
	SourceSetUpOption pulumix.Input[string] `pulumi:"sourceSetUpOption"`
	// Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
	//
	// The following arguments are optional:
	SourceType pulumix.Input[string] `pulumi:"sourceType"`
	// Instructions for troubleshooting the control.
	TroubleshootingText pulumix.Input[*string] `pulumi:"troubleshootingText"`
}

func (ControlControlMappingSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSource)(nil)).Elem()
}

func (i ControlControlMappingSourceArgs) ToControlControlMappingSourceOutput() ControlControlMappingSourceOutput {
	return i.ToControlControlMappingSourceOutputWithContext(context.Background())
}

func (i ControlControlMappingSourceArgs) ToControlControlMappingSourceOutputWithContext(ctx context.Context) ControlControlMappingSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceOutput)
}

func (i *ControlControlMappingSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ControlControlMappingSourceArgs] {
	return pulumix.Val(i)
}

type ControlControlMappingSourceOutput struct{ *pulumi.OutputState }

func (ControlControlMappingSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSource)(nil)).Elem()
}

func (o ControlControlMappingSourceOutput) ToControlControlMappingSourceOutput() ControlControlMappingSourceOutput {
	return o
}

func (o ControlControlMappingSourceOutput) ToControlControlMappingSourceOutputWithContext(ctx context.Context) ControlControlMappingSourceOutput {
	return o
}

func (o ControlControlMappingSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ControlControlMappingSource] {
	return pulumix.Output[ControlControlMappingSource]{
		OutputState: o.OutputState,
	}
}

// Description of the source.
func (o ControlControlMappingSourceOutput) SourceDescription() pulumix.Output[*string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) *string { return v.SourceDescription })
}

// Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
func (o ControlControlMappingSourceOutput) SourceFrequency() pulumix.Output[*string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) *string { return v.SourceFrequency })
}

func (o ControlControlMappingSourceOutput) SourceId() pulumix.Output[*string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) *string { return v.SourceId })
}

// The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See `sourceKeyword` below.
func (o ControlControlMappingSourceOutput) SourceKeyword() pulumix.GPtrOutput[ControlControlMappingSourceSourceKeyword, ControlControlMappingSourceSourceKeywordOutput] {
	value := pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) *ControlControlMappingSourceSourceKeyword { return v.SourceKeyword })
	return pulumix.GPtrOutput[ControlControlMappingSourceSourceKeyword, ControlControlMappingSourceSourceKeywordOutput]{OutputState: value.OutputState}
}

// Name of the source.
func (o ControlControlMappingSourceOutput) SourceName() pulumix.Output[string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) string { return v.SourceName })
}

// The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
func (o ControlControlMappingSourceOutput) SourceSetUpOption() pulumix.Output[string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) string { return v.SourceSetUpOption })
}

// Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.
//
// The following arguments are optional:
func (o ControlControlMappingSourceOutput) SourceType() pulumix.Output[string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) string { return v.SourceType })
}

// Instructions for troubleshooting the control.
func (o ControlControlMappingSourceOutput) TroubleshootingText() pulumix.Output[*string] {
	return pulumix.Apply[ControlControlMappingSource](o, func(v ControlControlMappingSource) *string { return v.TroubleshootingText })
}

type ControlControlMappingSourceSourceKeyword struct {
	// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
	KeywordInputType string `pulumi:"keywordInputType"`
	// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
	KeywordValue string `pulumi:"keywordValue"`
}

type ControlControlMappingSourceSourceKeywordArgs struct {
	// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
	KeywordInputType pulumix.Input[string] `pulumi:"keywordInputType"`
	// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
	KeywordValue pulumix.Input[string] `pulumi:"keywordValue"`
}

func (ControlControlMappingSourceSourceKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToControlControlMappingSourceSourceKeywordOutput() ControlControlMappingSourceSourceKeywordOutput {
	return i.ToControlControlMappingSourceSourceKeywordOutputWithContext(context.Background())
}

func (i ControlControlMappingSourceSourceKeywordArgs) ToControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlControlMappingSourceSourceKeywordOutput)
}

func (i *ControlControlMappingSourceSourceKeywordArgs) ToOutput(ctx context.Context) pulumix.Output[*ControlControlMappingSourceSourceKeywordArgs] {
	return pulumix.Val(i)
}

type ControlControlMappingSourceSourceKeywordOutput struct{ *pulumi.OutputState }

func (ControlControlMappingSourceSourceKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToControlControlMappingSourceSourceKeywordOutput() ControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) ControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o ControlControlMappingSourceSourceKeywordOutput) ToOutput(ctx context.Context) pulumix.Output[ControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[ControlControlMappingSourceSourceKeyword]{
		OutputState: o.OutputState,
	}
}

// Input method for the keyword. Valid values are `SELECT_FROM_LIST`.
func (o ControlControlMappingSourceSourceKeywordOutput) KeywordInputType() pulumix.Output[string] {
	return pulumix.Apply[ControlControlMappingSourceSourceKeyword](o, func(v ControlControlMappingSourceSourceKeyword) string { return v.KeywordInputType })
}

// The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.
func (o ControlControlMappingSourceSourceKeywordOutput) KeywordValue() pulumix.Output[string] {
	return pulumix.Apply[ControlControlMappingSourceSourceKeyword](o, func(v ControlControlMappingSourceSourceKeyword) string { return v.KeywordValue })
}

type FrameworkControlSet struct {
	// List of controls within the control set. See `controls` below.
	Controls []FrameworkControlSetControl `pulumi:"controls"`
	// Unique identifier of the control.
	Id *string `pulumi:"id"`
	// Name of the control set.
	Name string `pulumi:"name"`
}

type FrameworkControlSetArgs struct {
	// List of controls within the control set. See `controls` below.
	Controls pulumix.Input[[]*FrameworkControlSetControlArgs] `pulumi:"controls"`
	// Unique identifier of the control.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Name of the control set.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (FrameworkControlSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSet)(nil)).Elem()
}

func (i FrameworkControlSetArgs) ToFrameworkControlSetOutput() FrameworkControlSetOutput {
	return i.ToFrameworkControlSetOutputWithContext(context.Background())
}

func (i FrameworkControlSetArgs) ToFrameworkControlSetOutputWithContext(ctx context.Context) FrameworkControlSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlSetOutput)
}

func (i *FrameworkControlSetArgs) ToOutput(ctx context.Context) pulumix.Output[*FrameworkControlSetArgs] {
	return pulumix.Val(i)
}

type FrameworkControlSetOutput struct{ *pulumi.OutputState }

func (FrameworkControlSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSet)(nil)).Elem()
}

func (o FrameworkControlSetOutput) ToFrameworkControlSetOutput() FrameworkControlSetOutput {
	return o
}

func (o FrameworkControlSetOutput) ToFrameworkControlSetOutputWithContext(ctx context.Context) FrameworkControlSetOutput {
	return o
}

func (o FrameworkControlSetOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlSet] {
	return pulumix.Output[FrameworkControlSet]{
		OutputState: o.OutputState,
	}
}

// List of controls within the control set. See `controls` below.
func (o FrameworkControlSetOutput) Controls() pulumix.GArrayOutput[FrameworkControlSetControl, FrameworkControlSetControlOutput] {
	value := pulumix.Apply[FrameworkControlSet](o, func(v FrameworkControlSet) []FrameworkControlSetControl { return v.Controls })
	return pulumix.GArrayOutput[FrameworkControlSetControl, FrameworkControlSetControlOutput]{OutputState: value.OutputState}
}

// Unique identifier of the control.
func (o FrameworkControlSetOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[FrameworkControlSet](o, func(v FrameworkControlSet) *string { return v.Id })
}

// Name of the control set.
func (o FrameworkControlSetOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[FrameworkControlSet](o, func(v FrameworkControlSet) string { return v.Name })
}

type FrameworkControlSetControl struct {
	// Unique identifier of the control.
	Id string `pulumi:"id"`
}

type FrameworkControlSetControlArgs struct {
	// Unique identifier of the control.
	Id pulumix.Input[string] `pulumi:"id"`
}

func (FrameworkControlSetControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSetControl)(nil)).Elem()
}

func (i FrameworkControlSetControlArgs) ToFrameworkControlSetControlOutput() FrameworkControlSetControlOutput {
	return i.ToFrameworkControlSetControlOutputWithContext(context.Background())
}

func (i FrameworkControlSetControlArgs) ToFrameworkControlSetControlOutputWithContext(ctx context.Context) FrameworkControlSetControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlSetControlOutput)
}

func (i *FrameworkControlSetControlArgs) ToOutput(ctx context.Context) pulumix.Output[*FrameworkControlSetControlArgs] {
	return pulumix.Val(i)
}

type FrameworkControlSetControlOutput struct{ *pulumi.OutputState }

func (FrameworkControlSetControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlSetControl)(nil)).Elem()
}

func (o FrameworkControlSetControlOutput) ToFrameworkControlSetControlOutput() FrameworkControlSetControlOutput {
	return o
}

func (o FrameworkControlSetControlOutput) ToFrameworkControlSetControlOutputWithContext(ctx context.Context) FrameworkControlSetControlOutput {
	return o
}

func (o FrameworkControlSetControlOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlSetControl] {
	return pulumix.Output[FrameworkControlSetControl]{
		OutputState: o.OutputState,
	}
}

// Unique identifier of the control.
func (o FrameworkControlSetControlOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[FrameworkControlSetControl](o, func(v FrameworkControlSetControl) string { return v.Id })
}

type GetControlControlMappingSource struct {
	SourceDescription   string                                       `pulumi:"sourceDescription"`
	SourceFrequency     string                                       `pulumi:"sourceFrequency"`
	SourceId            string                                       `pulumi:"sourceId"`
	SourceKeyword       *GetControlControlMappingSourceSourceKeyword `pulumi:"sourceKeyword"`
	SourceName          string                                       `pulumi:"sourceName"`
	SourceSetUpOption   string                                       `pulumi:"sourceSetUpOption"`
	SourceType          string                                       `pulumi:"sourceType"`
	TroubleshootingText string                                       `pulumi:"troubleshootingText"`
}

type GetControlControlMappingSourceArgs struct {
	SourceDescription   pulumix.Input[string]                                           `pulumi:"sourceDescription"`
	SourceFrequency     pulumix.Input[string]                                           `pulumi:"sourceFrequency"`
	SourceId            pulumix.Input[string]                                           `pulumi:"sourceId"`
	SourceKeyword       pulumix.Input[*GetControlControlMappingSourceSourceKeywordArgs] `pulumi:"sourceKeyword"`
	SourceName          pulumix.Input[string]                                           `pulumi:"sourceName"`
	SourceSetUpOption   pulumix.Input[string]                                           `pulumi:"sourceSetUpOption"`
	SourceType          pulumix.Input[string]                                           `pulumi:"sourceType"`
	TroubleshootingText pulumix.Input[string]                                           `pulumi:"troubleshootingText"`
}

func (GetControlControlMappingSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSource)(nil)).Elem()
}

func (i GetControlControlMappingSourceArgs) ToGetControlControlMappingSourceOutput() GetControlControlMappingSourceOutput {
	return i.ToGetControlControlMappingSourceOutputWithContext(context.Background())
}

func (i GetControlControlMappingSourceArgs) ToGetControlControlMappingSourceOutputWithContext(ctx context.Context) GetControlControlMappingSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceOutput)
}

func (i *GetControlControlMappingSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetControlControlMappingSourceArgs] {
	return pulumix.Val(i)
}

type GetControlControlMappingSourceOutput struct{ *pulumi.OutputState }

func (GetControlControlMappingSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSource)(nil)).Elem()
}

func (o GetControlControlMappingSourceOutput) ToGetControlControlMappingSourceOutput() GetControlControlMappingSourceOutput {
	return o
}

func (o GetControlControlMappingSourceOutput) ToGetControlControlMappingSourceOutputWithContext(ctx context.Context) GetControlControlMappingSourceOutput {
	return o
}

func (o GetControlControlMappingSourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetControlControlMappingSource] {
	return pulumix.Output[GetControlControlMappingSource]{
		OutputState: o.OutputState,
	}
}

func (o GetControlControlMappingSourceOutput) SourceDescription() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.SourceDescription })
}

func (o GetControlControlMappingSourceOutput) SourceFrequency() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.SourceFrequency })
}

func (o GetControlControlMappingSourceOutput) SourceId() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.SourceId })
}

func (o GetControlControlMappingSourceOutput) SourceKeyword() pulumix.GPtrOutput[GetControlControlMappingSourceSourceKeyword, GetControlControlMappingSourceSourceKeywordOutput] {
	value := pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) *GetControlControlMappingSourceSourceKeyword {
		return v.SourceKeyword
	})
	return pulumix.GPtrOutput[GetControlControlMappingSourceSourceKeyword, GetControlControlMappingSourceSourceKeywordOutput]{OutputState: value.OutputState}
}

func (o GetControlControlMappingSourceOutput) SourceName() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.SourceName })
}

func (o GetControlControlMappingSourceOutput) SourceSetUpOption() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.SourceSetUpOption })
}

func (o GetControlControlMappingSourceOutput) SourceType() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.SourceType })
}

func (o GetControlControlMappingSourceOutput) TroubleshootingText() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSource](o, func(v GetControlControlMappingSource) string { return v.TroubleshootingText })
}

type GetControlControlMappingSourceSourceKeyword struct {
	KeywordInputType string `pulumi:"keywordInputType"`
	KeywordValue     string `pulumi:"keywordValue"`
}

type GetControlControlMappingSourceSourceKeywordArgs struct {
	KeywordInputType pulumix.Input[string] `pulumi:"keywordInputType"`
	KeywordValue     pulumix.Input[string] `pulumi:"keywordValue"`
}

func (GetControlControlMappingSourceSourceKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToGetControlControlMappingSourceSourceKeywordOutput() GetControlControlMappingSourceSourceKeywordOutput {
	return i.ToGetControlControlMappingSourceSourceKeywordOutputWithContext(context.Background())
}

func (i GetControlControlMappingSourceSourceKeywordArgs) ToGetControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetControlControlMappingSourceSourceKeywordOutput)
}

func (i *GetControlControlMappingSourceSourceKeywordArgs) ToOutput(ctx context.Context) pulumix.Output[*GetControlControlMappingSourceSourceKeywordArgs] {
	return pulumix.Val(i)
}

type GetControlControlMappingSourceSourceKeywordOutput struct{ *pulumi.OutputState }

func (GetControlControlMappingSourceSourceKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlControlMappingSourceSourceKeyword)(nil)).Elem()
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToGetControlControlMappingSourceSourceKeywordOutput() GetControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToGetControlControlMappingSourceSourceKeywordOutputWithContext(ctx context.Context) GetControlControlMappingSourceSourceKeywordOutput {
	return o
}

func (o GetControlControlMappingSourceSourceKeywordOutput) ToOutput(ctx context.Context) pulumix.Output[GetControlControlMappingSourceSourceKeyword] {
	return pulumix.Output[GetControlControlMappingSourceSourceKeyword]{
		OutputState: o.OutputState,
	}
}

func (o GetControlControlMappingSourceSourceKeywordOutput) KeywordInputType() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSourceSourceKeyword](o, func(v GetControlControlMappingSourceSourceKeyword) string { return v.KeywordInputType })
}

func (o GetControlControlMappingSourceSourceKeywordOutput) KeywordValue() pulumix.Output[string] {
	return pulumix.Apply[GetControlControlMappingSourceSourceKeyword](o, func(v GetControlControlMappingSourceSourceKeyword) string { return v.KeywordValue })
}

type GetFrameworkControlSet struct {
	Controls []GetFrameworkControlSetControl `pulumi:"controls"`
	Id       string                          `pulumi:"id"`
	// Name of the framework.
	Name string `pulumi:"name"`
}

type GetFrameworkControlSetArgs struct {
	Controls pulumix.Input[[]*GetFrameworkControlSetControlArgs] `pulumi:"controls"`
	Id       pulumix.Input[string]                               `pulumi:"id"`
	// Name of the framework.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetFrameworkControlSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSet)(nil)).Elem()
}

func (i GetFrameworkControlSetArgs) ToGetFrameworkControlSetOutput() GetFrameworkControlSetOutput {
	return i.ToGetFrameworkControlSetOutputWithContext(context.Background())
}

func (i GetFrameworkControlSetArgs) ToGetFrameworkControlSetOutputWithContext(ctx context.Context) GetFrameworkControlSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlSetOutput)
}

func (i *GetFrameworkControlSetArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFrameworkControlSetArgs] {
	return pulumix.Val(i)
}

type GetFrameworkControlSetOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSet)(nil)).Elem()
}

func (o GetFrameworkControlSetOutput) ToGetFrameworkControlSetOutput() GetFrameworkControlSetOutput {
	return o
}

func (o GetFrameworkControlSetOutput) ToGetFrameworkControlSetOutputWithContext(ctx context.Context) GetFrameworkControlSetOutput {
	return o
}

func (o GetFrameworkControlSetOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlSet] {
	return pulumix.Output[GetFrameworkControlSet]{
		OutputState: o.OutputState,
	}
}

func (o GetFrameworkControlSetOutput) Controls() pulumix.GArrayOutput[GetFrameworkControlSetControl, GetFrameworkControlSetControlOutput] {
	value := pulumix.Apply[GetFrameworkControlSet](o, func(v GetFrameworkControlSet) []GetFrameworkControlSetControl { return v.Controls })
	return pulumix.GArrayOutput[GetFrameworkControlSetControl, GetFrameworkControlSetControlOutput]{OutputState: value.OutputState}
}

func (o GetFrameworkControlSetOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetFrameworkControlSet](o, func(v GetFrameworkControlSet) string { return v.Id })
}

// Name of the framework.
func (o GetFrameworkControlSetOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetFrameworkControlSet](o, func(v GetFrameworkControlSet) string { return v.Name })
}

type GetFrameworkControlSetControl struct {
	Id string `pulumi:"id"`
}

type GetFrameworkControlSetControlArgs struct {
	Id pulumix.Input[string] `pulumi:"id"`
}

func (GetFrameworkControlSetControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSetControl)(nil)).Elem()
}

func (i GetFrameworkControlSetControlArgs) ToGetFrameworkControlSetControlOutput() GetFrameworkControlSetControlOutput {
	return i.ToGetFrameworkControlSetControlOutputWithContext(context.Background())
}

func (i GetFrameworkControlSetControlArgs) ToGetFrameworkControlSetControlOutputWithContext(ctx context.Context) GetFrameworkControlSetControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlSetControlOutput)
}

func (i *GetFrameworkControlSetControlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFrameworkControlSetControlArgs] {
	return pulumix.Val(i)
}

type GetFrameworkControlSetControlOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlSetControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlSetControl)(nil)).Elem()
}

func (o GetFrameworkControlSetControlOutput) ToGetFrameworkControlSetControlOutput() GetFrameworkControlSetControlOutput {
	return o
}

func (o GetFrameworkControlSetControlOutput) ToGetFrameworkControlSetControlOutputWithContext(ctx context.Context) GetFrameworkControlSetControlOutput {
	return o
}

func (o GetFrameworkControlSetControlOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlSetControl] {
	return pulumix.Output[GetFrameworkControlSetControl]{
		OutputState: o.OutputState,
	}
}

func (o GetFrameworkControlSetControlOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetFrameworkControlSetControl](o, func(v GetFrameworkControlSetControl) string { return v.Id })
}

func init() {
	pulumi.RegisterOutputType(AssessmentAssessmentReportsDestinationOutput{})
	pulumi.RegisterOutputType(AssessmentRoleOutput{})
	pulumi.RegisterOutputType(AssessmentRolesAllOutput{})
	pulumi.RegisterOutputType(AssessmentScopeOutput{})
	pulumi.RegisterOutputType(AssessmentScopeAwsAccountOutput{})
	pulumi.RegisterOutputType(AssessmentScopeAwsServiceOutput{})
	pulumi.RegisterOutputType(ControlControlMappingSourceOutput{})
	pulumi.RegisterOutputType(ControlControlMappingSourceSourceKeywordOutput{})
	pulumi.RegisterOutputType(FrameworkControlSetOutput{})
	pulumi.RegisterOutputType(FrameworkControlSetControlOutput{})
	pulumi.RegisterOutputType(GetControlControlMappingSourceOutput{})
	pulumi.RegisterOutputType(GetControlControlMappingSourceSourceKeywordOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlSetOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlSetControlOutput{})
}
