// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DynamoDB table resource.
//
// > **Note:** It is recommended to use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) for `readCapacity` and/or `writeCapacity` if there's `autoscaling policy` attached to the table.
//
// > **Note:** When using dynamodb.TableReplica with this resource, use `lifecycle` `ignoreChanges` for `replica`, _e.g._, `lifecycle { ignoreChanges = [replica] }`.
//
// ## DynamoDB Table attributes
//
// Only define attributes on the table object that are going to be used as:
//
// * Table hash key or range key
// * LSI or GSI hash key or range key
//
// The DynamoDB API expects attribute structure (name and type) to be passed along when creating or updating GSI/LSIs or creating the initial table. In these cases it expects the Hash / Range keys to be provided. Because these get re-used in numerous places (i.e the table's range key could be a part of one or more GSIs), they are stored on the table object to prevent duplication and increase consistency. If you add attributes here that are not used in these scenarios it can cause an infinite loop in planning.
type Table struct {
	pulumi.CustomResourceState

	// ARN of the table
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. See below.
	Attributes pulumix.GArrayOutput[TableAttribute, TableAttributeOutput] `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumix.Output[*string] `pulumi:"billingMode"`
	// Enables deletion protection for table. Defaults to `false`.
	DeletionProtectionEnabled pulumix.Output[*bool] `pulumi:"deletionProtectionEnabled"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
	GlobalSecondaryIndexes pulumix.GArrayOutput[TableGlobalSecondaryIndex, TableGlobalSecondaryIndexOutput] `pulumi:"globalSecondaryIndexes"`
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
	HashKey pulumix.Output[string] `pulumi:"hashKey"`
	// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
	LocalSecondaryIndexes pulumix.GArrayOutput[TableLocalSecondaryIndex, TableLocalSecondaryIndexOutput] `pulumi:"localSecondaryIndexes"`
	// Unique within a region name of the table.
	//
	// Optional arguments:
	Name pulumix.Output[string] `pulumi:"name"`
	// Enable point-in-time recovery options. See below.
	PointInTimeRecovery pulumix.GPtrOutput[TablePointInTimeRecovery, TablePointInTimeRecoveryOutput] `pulumi:"pointInTimeRecovery"`
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey pulumix.Output[*string] `pulumi:"rangeKey"`
	// Number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity pulumix.Output[int] `pulumi:"readCapacity"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
	Replicas pulumix.GArrayOutput[TableReplicaType, TableReplicaTypeOutput] `pulumi:"replicas"`
	// Time of the point-in-time recovery point to restore.
	RestoreDateTime pulumix.Output[*string] `pulumi:"restoreDateTime"`
	// Name of the table to restore. Must match the name of an existing table.
	RestoreSourceName pulumix.Output[*string] `pulumi:"restoreSourceName"`
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime pulumix.Output[*bool] `pulumi:"restoreToLatestTime"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. See below.
	ServerSideEncryption pulumix.GPtrOutput[TableServerSideEncryption, TableServerSideEncryptionOutput] `pulumi:"serverSideEncryption"`
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn pulumix.Output[string] `pulumi:"streamArn"`
	// Whether Streams are enabled.
	StreamEnabled pulumix.Output[*bool] `pulumi:"streamEnabled"`
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel pulumix.Output[string] `pulumi:"streamLabel"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumix.Output[string] `pulumi:"streamViewType"`
	// Storage class of the table.
	// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	// Default value is `STANDARD`.
	TableClass pulumix.Output[*string] `pulumi:"tableClass"`
	// A map of tags to populate on the created table. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block for TTL. See below.
	Ttl pulumix.GPtrOutput[TableTtl, TableTtlOutput] `pulumi:"ttl"`
	// Number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity pulumix.Output[int] `pulumi:"writeCapacity"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		args = &TableArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("aws:dynamodb/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("aws:dynamodb/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// ARN of the table
	Arn *string `pulumi:"arn"`
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. See below.
	Attributes []TableAttribute `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode *string `pulumi:"billingMode"`
	// Enables deletion protection for table. Defaults to `false`.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
	GlobalSecondaryIndexes []TableGlobalSecondaryIndex `pulumi:"globalSecondaryIndexes"`
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
	HashKey *string `pulumi:"hashKey"`
	// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
	LocalSecondaryIndexes []TableLocalSecondaryIndex `pulumi:"localSecondaryIndexes"`
	// Unique within a region name of the table.
	//
	// Optional arguments:
	Name *string `pulumi:"name"`
	// Enable point-in-time recovery options. See below.
	PointInTimeRecovery *TablePointInTimeRecovery `pulumi:"pointInTimeRecovery"`
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey *string `pulumi:"rangeKey"`
	// Number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
	Replicas []TableReplicaType `pulumi:"replicas"`
	// Time of the point-in-time recovery point to restore.
	RestoreDateTime *string `pulumi:"restoreDateTime"`
	// Name of the table to restore. Must match the name of an existing table.
	RestoreSourceName *string `pulumi:"restoreSourceName"`
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime *bool `pulumi:"restoreToLatestTime"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. See below.
	ServerSideEncryption *TableServerSideEncryption `pulumi:"serverSideEncryption"`
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn *string `pulumi:"streamArn"`
	// Whether Streams are enabled.
	StreamEnabled *bool `pulumi:"streamEnabled"`
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel *string `pulumi:"streamLabel"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType *string `pulumi:"streamViewType"`
	// Storage class of the table.
	// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	// Default value is `STANDARD`.
	TableClass *string `pulumi:"tableClass"`
	// A map of tags to populate on the created table. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block for TTL. See below.
	Ttl *TableTtl `pulumi:"ttl"`
	// Number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

type TableState struct {
	// ARN of the table
	Arn pulumix.Input[*string]
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. See below.
	Attributes pulumix.Input[[]*TableAttributeArgs]
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumix.Input[*string]
	// Enables deletion protection for table. Defaults to `false`.
	DeletionProtectionEnabled pulumix.Input[*bool]
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
	GlobalSecondaryIndexes pulumix.Input[[]*TableGlobalSecondaryIndexArgs]
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
	HashKey pulumix.Input[*string]
	// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
	LocalSecondaryIndexes pulumix.Input[[]*TableLocalSecondaryIndexArgs]
	// Unique within a region name of the table.
	//
	// Optional arguments:
	Name pulumix.Input[*string]
	// Enable point-in-time recovery options. See below.
	PointInTimeRecovery pulumix.Input[*TablePointInTimeRecoveryArgs]
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey pulumix.Input[*string]
	// Number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity pulumix.Input[*int]
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
	Replicas pulumix.Input[[]*TableReplicaTypeArgs]
	// Time of the point-in-time recovery point to restore.
	RestoreDateTime pulumix.Input[*string]
	// Name of the table to restore. Must match the name of an existing table.
	RestoreSourceName pulumix.Input[*string]
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime pulumix.Input[*bool]
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. See below.
	ServerSideEncryption pulumix.Input[*TableServerSideEncryptionArgs]
	// ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn pulumix.Input[*string]
	// Whether Streams are enabled.
	StreamEnabled pulumix.Input[*bool]
	// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
	StreamLabel pulumix.Input[*string]
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumix.Input[*string]
	// Storage class of the table.
	// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	// Default value is `STANDARD`.
	TableClass pulumix.Input[*string]
	// A map of tags to populate on the created table. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Configuration block for TTL. See below.
	Ttl pulumix.Input[*TableTtlArgs]
	// Number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity pulumix.Input[*int]
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. See below.
	Attributes []TableAttribute `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode *string `pulumi:"billingMode"`
	// Enables deletion protection for table. Defaults to `false`.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
	GlobalSecondaryIndexes []TableGlobalSecondaryIndex `pulumi:"globalSecondaryIndexes"`
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
	HashKey *string `pulumi:"hashKey"`
	// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
	LocalSecondaryIndexes []TableLocalSecondaryIndex `pulumi:"localSecondaryIndexes"`
	// Unique within a region name of the table.
	//
	// Optional arguments:
	Name *string `pulumi:"name"`
	// Enable point-in-time recovery options. See below.
	PointInTimeRecovery *TablePointInTimeRecovery `pulumi:"pointInTimeRecovery"`
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey *string `pulumi:"rangeKey"`
	// Number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity *int `pulumi:"readCapacity"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
	Replicas []TableReplicaType `pulumi:"replicas"`
	// Time of the point-in-time recovery point to restore.
	RestoreDateTime *string `pulumi:"restoreDateTime"`
	// Name of the table to restore. Must match the name of an existing table.
	RestoreSourceName *string `pulumi:"restoreSourceName"`
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime *bool `pulumi:"restoreToLatestTime"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. See below.
	ServerSideEncryption *TableServerSideEncryption `pulumi:"serverSideEncryption"`
	// Whether Streams are enabled.
	StreamEnabled *bool `pulumi:"streamEnabled"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType *string `pulumi:"streamViewType"`
	// Storage class of the table.
	// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	// Default value is `STANDARD`.
	TableClass *string `pulumi:"tableClass"`
	// A map of tags to populate on the created table. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for TTL. See below.
	Ttl *TableTtl `pulumi:"ttl"`
	// Number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity *int `pulumi:"writeCapacity"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. See below.
	Attributes pulumix.Input[[]*TableAttributeArgs]
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumix.Input[*string]
	// Enables deletion protection for table. Defaults to `false`.
	DeletionProtectionEnabled pulumix.Input[*bool]
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
	GlobalSecondaryIndexes pulumix.Input[[]*TableGlobalSecondaryIndexArgs]
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
	HashKey pulumix.Input[*string]
	// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
	LocalSecondaryIndexes pulumix.Input[[]*TableLocalSecondaryIndexArgs]
	// Unique within a region name of the table.
	//
	// Optional arguments:
	Name pulumix.Input[*string]
	// Enable point-in-time recovery options. See below.
	PointInTimeRecovery pulumix.Input[*TablePointInTimeRecoveryArgs]
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey pulumix.Input[*string]
	// Number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	ReadCapacity pulumix.Input[*int]
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
	Replicas pulumix.Input[[]*TableReplicaTypeArgs]
	// Time of the point-in-time recovery point to restore.
	RestoreDateTime pulumix.Input[*string]
	// Name of the table to restore. Must match the name of an existing table.
	RestoreSourceName pulumix.Input[*string]
	// If set, restores table to the most recent point-in-time recovery point.
	RestoreToLatestTime pulumix.Input[*bool]
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. See below.
	ServerSideEncryption pulumix.Input[*TableServerSideEncryptionArgs]
	// Whether Streams are enabled.
	StreamEnabled pulumix.Input[*bool]
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumix.Input[*string]
	// Storage class of the table.
	// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
	// Default value is `STANDARD`.
	TableClass pulumix.Input[*string]
	// A map of tags to populate on the created table. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Configuration block for TTL. See below.
	Ttl pulumix.Input[*TableTtlArgs]
	// Number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
	WriteCapacity pulumix.Input[*int]
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

func (o TableOutput) ToOutput(ctx context.Context) pulumix.Output[Table] {
	return pulumix.Output[Table]{
		OutputState: o.OutputState,
	}
}

// ARN of the table
func (o TableOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. See below.
func (o TableOutput) Attributes() pulumix.GArrayOutput[TableAttribute, TableAttributeOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GArrayOutput[TableAttribute, TableAttributeOutput] { return v.Attributes })
	unwrapped := pulumix.Flatten[[]TableAttribute, pulumix.GArrayOutput[TableAttribute, TableAttributeOutput]](value)
	return pulumix.GArrayOutput[TableAttribute, TableAttributeOutput]{OutputState: unwrapped.OutputState}
}

// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
func (o TableOutput) BillingMode() pulumix.Output[*string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*string] { return v.BillingMode })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Enables deletion protection for table. Defaults to `false`.
func (o TableOutput) DeletionProtectionEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*bool] { return v.DeletionProtectionEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. See below.
func (o TableOutput) GlobalSecondaryIndexes() pulumix.GArrayOutput[TableGlobalSecondaryIndex, TableGlobalSecondaryIndexOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GArrayOutput[TableGlobalSecondaryIndex, TableGlobalSecondaryIndexOutput] {
		return v.GlobalSecondaryIndexes
	})
	unwrapped := pulumix.Flatten[[]TableGlobalSecondaryIndex, pulumix.GArrayOutput[TableGlobalSecondaryIndex, TableGlobalSecondaryIndexOutput]](value)
	return pulumix.GArrayOutput[TableGlobalSecondaryIndex, TableGlobalSecondaryIndexOutput]{OutputState: unwrapped.OutputState}
}

// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`. See below.
func (o TableOutput) HashKey() pulumix.Output[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[string] { return v.HashKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Describe an LSI on the table; these can only be allocated _at creation_ so you cannot change this definition after you have created the resource. See below.
func (o TableOutput) LocalSecondaryIndexes() pulumix.GArrayOutput[TableLocalSecondaryIndex, TableLocalSecondaryIndexOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GArrayOutput[TableLocalSecondaryIndex, TableLocalSecondaryIndexOutput] {
		return v.LocalSecondaryIndexes
	})
	unwrapped := pulumix.Flatten[[]TableLocalSecondaryIndex, pulumix.GArrayOutput[TableLocalSecondaryIndex, TableLocalSecondaryIndexOutput]](value)
	return pulumix.GArrayOutput[TableLocalSecondaryIndex, TableLocalSecondaryIndexOutput]{OutputState: unwrapped.OutputState}
}

// Unique within a region name of the table.
//
// Optional arguments:
func (o TableOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Enable point-in-time recovery options. See below.
func (o TableOutput) PointInTimeRecovery() pulumix.GPtrOutput[TablePointInTimeRecovery, TablePointInTimeRecoveryOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GPtrOutput[TablePointInTimeRecovery, TablePointInTimeRecoveryOutput] {
		return v.PointInTimeRecovery
	})
	unwrapped := pulumix.Flatten[*TablePointInTimeRecovery, pulumix.GPtrOutput[TablePointInTimeRecovery, TablePointInTimeRecoveryOutput]](value)
	return pulumix.GPtrOutput[TablePointInTimeRecovery, TablePointInTimeRecoveryOutput]{OutputState: unwrapped.OutputState}
}

// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
func (o TableOutput) RangeKey() pulumix.Output[*string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*string] { return v.RangeKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Number of read units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
func (o TableOutput) ReadCapacity() pulumix.Output[int] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[int] { return v.ReadCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations. See below.
func (o TableOutput) Replicas() pulumix.GArrayOutput[TableReplicaType, TableReplicaTypeOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GArrayOutput[TableReplicaType, TableReplicaTypeOutput] { return v.Replicas })
	unwrapped := pulumix.Flatten[[]TableReplicaType, pulumix.GArrayOutput[TableReplicaType, TableReplicaTypeOutput]](value)
	return pulumix.GArrayOutput[TableReplicaType, TableReplicaTypeOutput]{OutputState: unwrapped.OutputState}
}

// Time of the point-in-time recovery point to restore.
func (o TableOutput) RestoreDateTime() pulumix.Output[*string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*string] { return v.RestoreDateTime })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the table to restore. Must match the name of an existing table.
func (o TableOutput) RestoreSourceName() pulumix.Output[*string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*string] { return v.RestoreSourceName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// If set, restores table to the most recent point-in-time recovery point.
func (o TableOutput) RestoreToLatestTime() pulumix.Output[*bool] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*bool] { return v.RestoreToLatestTime })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS-owned Customer Master Key if this argument isn't specified. See below.
func (o TableOutput) ServerSideEncryption() pulumix.GPtrOutput[TableServerSideEncryption, TableServerSideEncryptionOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GPtrOutput[TableServerSideEncryption, TableServerSideEncryptionOutput] {
		return v.ServerSideEncryption
	})
	unwrapped := pulumix.Flatten[*TableServerSideEncryption, pulumix.GPtrOutput[TableServerSideEncryption, TableServerSideEncryptionOutput]](value)
	return pulumix.GPtrOutput[TableServerSideEncryption, TableServerSideEncryptionOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the Table Stream. Only available when `streamEnabled = true`
func (o TableOutput) StreamArn() pulumix.Output[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[string] { return v.StreamArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether Streams are enabled.
func (o TableOutput) StreamEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*bool] { return v.StreamEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not a unique identifier for the stream on its own. However, the combination of AWS customer ID, table name and this field is guaranteed to be unique. It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`.
func (o TableOutput) StreamLabel() pulumix.Output[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[string] { return v.StreamLabel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
func (o TableOutput) StreamViewType() pulumix.Output[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[string] { return v.StreamViewType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Storage class of the table.
// Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS`.
// Default value is `STANDARD`.
func (o TableOutput) TableClass() pulumix.Output[*string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[*string] { return v.TableClass })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A map of tags to populate on the created table. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TableOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TableOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for TTL. See below.
func (o TableOutput) Ttl() pulumix.GPtrOutput[TableTtl, TableTtlOutput] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.GPtrOutput[TableTtl, TableTtlOutput] { return v.Ttl })
	unwrapped := pulumix.Flatten[*TableTtl, pulumix.GPtrOutput[TableTtl, TableTtlOutput]](value)
	return pulumix.GPtrOutput[TableTtl, TableTtlOutput]{OutputState: unwrapped.OutputState}
}

// Number of write units for this table. If the `billingMode` is `PROVISIONED`, this field is required.
func (o TableOutput) WriteCapacity() pulumix.Output[int] {
	value := pulumix.Apply[Table](o, func(v Table) pulumix.Output[int] { return v.WriteCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(TableOutput{})
}
