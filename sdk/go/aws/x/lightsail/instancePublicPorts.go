// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol.
//
// > See [What is Amazon Lightsail?](https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail) for more information.
//
// > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details.
type InstancePublicPorts struct {
	pulumi.CustomResourceState

	// Name of the Lightsail Instance.
	InstanceName pulumix.Output[string] `pulumi:"instanceName"`
	// Configuration block with port information. AWS closes all currently open ports that are not included in the `portInfo`. Detailed below.
	PortInfos pulumix.GArrayOutput[InstancePublicPortsPortInfo, InstancePublicPortsPortInfoOutput] `pulumi:"portInfos"`
}

// NewInstancePublicPorts registers a new resource with the given unique name, arguments, and options.
func NewInstancePublicPorts(ctx *pulumi.Context,
	name string, args *InstancePublicPortsArgs, opts ...pulumi.ResourceOption) (*InstancePublicPorts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.PortInfos == nil {
		return nil, errors.New("invalid value for required argument 'PortInfos'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstancePublicPorts
	err := ctx.RegisterResource("aws:lightsail/instancePublicPorts:InstancePublicPorts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstancePublicPorts gets an existing InstancePublicPorts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstancePublicPorts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstancePublicPortsState, opts ...pulumi.ResourceOption) (*InstancePublicPorts, error) {
	var resource InstancePublicPorts
	err := ctx.ReadResource("aws:lightsail/instancePublicPorts:InstancePublicPorts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstancePublicPorts resources.
type instancePublicPortsState struct {
	// Name of the Lightsail Instance.
	InstanceName *string `pulumi:"instanceName"`
	// Configuration block with port information. AWS closes all currently open ports that are not included in the `portInfo`. Detailed below.
	PortInfos []InstancePublicPortsPortInfo `pulumi:"portInfos"`
}

type InstancePublicPortsState struct {
	// Name of the Lightsail Instance.
	InstanceName pulumix.Input[*string]
	// Configuration block with port information. AWS closes all currently open ports that are not included in the `portInfo`. Detailed below.
	PortInfos pulumix.Input[[]*InstancePublicPortsPortInfoArgs]
}

func (InstancePublicPortsState) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePublicPortsState)(nil)).Elem()
}

type instancePublicPortsArgs struct {
	// Name of the Lightsail Instance.
	InstanceName string `pulumi:"instanceName"`
	// Configuration block with port information. AWS closes all currently open ports that are not included in the `portInfo`. Detailed below.
	PortInfos []InstancePublicPortsPortInfo `pulumi:"portInfos"`
}

// The set of arguments for constructing a InstancePublicPorts resource.
type InstancePublicPortsArgs struct {
	// Name of the Lightsail Instance.
	InstanceName pulumix.Input[string]
	// Configuration block with port information. AWS closes all currently open ports that are not included in the `portInfo`. Detailed below.
	PortInfos pulumix.Input[[]*InstancePublicPortsPortInfoArgs]
}

func (InstancePublicPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePublicPortsArgs)(nil)).Elem()
}

type InstancePublicPortsOutput struct{ *pulumi.OutputState }

func (InstancePublicPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePublicPorts)(nil)).Elem()
}

func (o InstancePublicPortsOutput) ToInstancePublicPortsOutput() InstancePublicPortsOutput {
	return o
}

func (o InstancePublicPortsOutput) ToInstancePublicPortsOutputWithContext(ctx context.Context) InstancePublicPortsOutput {
	return o
}

func (o InstancePublicPortsOutput) ToOutput(ctx context.Context) pulumix.Output[InstancePublicPorts] {
	return pulumix.Output[InstancePublicPorts]{
		OutputState: o.OutputState,
	}
}

// Name of the Lightsail Instance.
func (o InstancePublicPortsOutput) InstanceName() pulumix.Output[string] {
	value := pulumix.Apply[InstancePublicPorts](o, func(v InstancePublicPorts) pulumix.Output[string] { return v.InstanceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block with port information. AWS closes all currently open ports that are not included in the `portInfo`. Detailed below.
func (o InstancePublicPortsOutput) PortInfos() pulumix.GArrayOutput[InstancePublicPortsPortInfo, InstancePublicPortsPortInfoOutput] {
	value := pulumix.Apply[InstancePublicPorts](o, func(v InstancePublicPorts) pulumix.GArrayOutput[InstancePublicPortsPortInfo, InstancePublicPortsPortInfoOutput] {
		return v.PortInfos
	})
	unwrapped := pulumix.Flatten[[]InstancePublicPortsPortInfo, pulumix.GArrayOutput[InstancePublicPortsPortInfo, InstancePublicPortsPortInfoOutput]](value)
	return pulumix.GArrayOutput[InstancePublicPortsPortInfo, InstancePublicPortsPortInfoOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(InstancePublicPortsOutput{})
}
