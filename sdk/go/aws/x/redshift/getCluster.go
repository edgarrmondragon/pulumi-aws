// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific redshift cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws:redshift/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Cluster identifier
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// Tags associated to the cluster
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// Whether major version upgrades can be applied during maintenance period
	AllowVersionUpgrade bool `pulumi:"allowVersionUpgrade"`
	// The value represents how the cluster is configured to use AQUA.
	AquaConfigurationStatus string `pulumi:"aquaConfigurationStatus"`
	// ARN of cluster.
	Arn string `pulumi:"arn"`
	// The backup retention period
	AutomatedSnapshotRetentionPeriod int `pulumi:"automatedSnapshotRetentionPeriod"`
	// Availability zone of the cluster
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Indicates whether the cluster is able to be relocated to another availability zone.
	AvailabilityZoneRelocationEnabled bool `pulumi:"availabilityZoneRelocationEnabled"`
	// Name of the S3 bucket where the log files are to be stored
	BucketName string `pulumi:"bucketName"`
	// Cluster identifier
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The namespace Amazon Resource Name (ARN) of the cluster
	ClusterNamespaceArn string `pulumi:"clusterNamespaceArn"`
	// Nodes in the cluster. Cluster node blocks are documented below
	ClusterNodes []GetClusterClusterNode `pulumi:"clusterNodes"`
	// The name of the parameter group to be associated with this cluster
	ClusterParameterGroupName string `pulumi:"clusterParameterGroupName"`
	// Public key for the cluster
	ClusterPublicKey string `pulumi:"clusterPublicKey"`
	// The cluster revision number
	ClusterRevisionNumber string `pulumi:"clusterRevisionNumber"`
	// The name of a cluster subnet group to be associated with this cluster
	ClusterSubnetGroupName string `pulumi:"clusterSubnetGroupName"`
	// Cluster type
	ClusterType    string `pulumi:"clusterType"`
	ClusterVersion string `pulumi:"clusterVersion"`
	// Name of the default database in the cluster
	DatabaseName string `pulumi:"databaseName"`
	// The ARN for the IAM role that was set as default for the cluster when the cluster was created.
	DefaultIamRoleArn string `pulumi:"defaultIamRoleArn"`
	// Elastic IP of the cluster
	ElasticIp string `pulumi:"elasticIp"`
	// Whether cluster logging is enabled
	EnableLogging bool `pulumi:"enableLogging"`
	// Whether the cluster data is encrypted
	Encrypted bool `pulumi:"encrypted"`
	// Cluster endpoint
	Endpoint string `pulumi:"endpoint"`
	// Whether enhanced VPC routing is enabled
	EnhancedVpcRouting bool `pulumi:"enhancedVpcRouting"`
	// IAM roles associated to the cluster
	IamRoles []string `pulumi:"iamRoles"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// KMS encryption key associated to the cluster
	KmsKeyId string `pulumi:"kmsKeyId"`
	// The log destination type.
	LogDestinationType string `pulumi:"logDestinationType"`
	// Collection of exported log types. Log types include the connection log, user log and user activity log.
	LogExports []string `pulumi:"logExports"`
	// The name of the maintenance track for the restored cluster.
	MaintenanceTrackName string `pulumi:"maintenanceTrackName"`
	// (Optional)  The default number of days to retain a manual snapshot.
	ManualSnapshotRetentionPeriod int `pulumi:"manualSnapshotRetentionPeriod"`
	// Username for the master DB user
	MasterUsername string `pulumi:"masterUsername"`
	// Cluster node type
	NodeType string `pulumi:"nodeType"`
	// Number of nodes in the cluster
	NumberOfNodes int `pulumi:"numberOfNodes"`
	// Port the cluster responds on
	Port int `pulumi:"port"`
	// The maintenance window
	PreferredMaintenanceWindow string `pulumi:"preferredMaintenanceWindow"`
	// Whether the cluster is publicly accessible
	PubliclyAccessible bool `pulumi:"publiclyAccessible"`
	// Folder inside the S3 bucket where the log files are stored
	S3KeyPrefix string `pulumi:"s3KeyPrefix"`
	// Tags associated to the cluster
	Tags map[string]string `pulumi:"tags"`
	// VPC Id associated with the cluster
	VpcId string `pulumi:"vpcId"`
	// The VPC security group Ids associated with the cluster
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterArgs](args.ToOutput(), func(plainArgs *LookupClusterArgs) (*LookupClusterResult, error) {
		return LookupCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterResultOutput, *LookupClusterResult](outputResult)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Cluster identifier
	ClusterIdentifier pulumix.Input[string] `pulumi:"clusterIdentifier"`
	// Tags associated to the cluster
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupClusterOutputArgs) ToOutput() pulumix.Output[*LookupClusterArgs] {
	allArgs := pulumix.All(
		args.ClusterIdentifier.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterArgs {
		return &LookupClusterArgs{
			ClusterIdentifier: resolvedArgs[0].(string),
			Tags:              resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterResult] {
	return pulumix.Output[*LookupClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterResultOutput) AllowVersionUpgrade() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.AllowVersionUpgrade })
}

func (o LookupClusterResultOutput) AquaConfigurationStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.AquaConfigurationStatus })
}

func (o LookupClusterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Arn })
}

func (o LookupClusterResultOutput) AutomatedSnapshotRetentionPeriod() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.AutomatedSnapshotRetentionPeriod })
}

func (o LookupClusterResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.AvailabilityZone })
}

func (o LookupClusterResultOutput) AvailabilityZoneRelocationEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.AvailabilityZoneRelocationEnabled })
}

func (o LookupClusterResultOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.BucketName })
}

func (o LookupClusterResultOutput) ClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterIdentifier })
}

func (o LookupClusterResultOutput) ClusterNamespaceArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterNamespaceArn })
}

func (o LookupClusterResultOutput) ClusterNodes() pulumix.GArrayOutput[GetClusterClusterNode, GetClusterClusterNodeOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterClusterNode { return v.ClusterNodes })
	return pulumix.GArrayOutput[GetClusterClusterNode, GetClusterClusterNodeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) ClusterParameterGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterParameterGroupName })
}

func (o LookupClusterResultOutput) ClusterPublicKey() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterPublicKey })
}

func (o LookupClusterResultOutput) ClusterRevisionNumber() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterRevisionNumber })
}

func (o LookupClusterResultOutput) ClusterSubnetGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterSubnetGroupName })
}

func (o LookupClusterResultOutput) ClusterType() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterType })
}

func (o LookupClusterResultOutput) ClusterVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterVersion })
}

func (o LookupClusterResultOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.DatabaseName })
}

func (o LookupClusterResultOutput) DefaultIamRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.DefaultIamRoleArn })
}

func (o LookupClusterResultOutput) ElasticIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ElasticIp })
}

func (o LookupClusterResultOutput) EnableLogging() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.EnableLogging })
}

func (o LookupClusterResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.Encrypted })
}

func (o LookupClusterResultOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Endpoint })
}

func (o LookupClusterResultOutput) EnhancedVpcRouting() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.EnhancedVpcRouting })
}

func (o LookupClusterResultOutput) IamRoles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.IamRoles })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Id })
}

func (o LookupClusterResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.KmsKeyId })
}

func (o LookupClusterResultOutput) LogDestinationType() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.LogDestinationType })
}

func (o LookupClusterResultOutput) LogExports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.LogExports })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) MaintenanceTrackName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.MaintenanceTrackName })
}

func (o LookupClusterResultOutput) ManualSnapshotRetentionPeriod() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.ManualSnapshotRetentionPeriod })
}

func (o LookupClusterResultOutput) MasterUsername() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.MasterUsername })
}

func (o LookupClusterResultOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.NodeType })
}

func (o LookupClusterResultOutput) NumberOfNodes() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.NumberOfNodes })
}

func (o LookupClusterResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.Port })
}

func (o LookupClusterResultOutput) PreferredMaintenanceWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.PreferredMaintenanceWindow })
}

func (o LookupClusterResultOutput) PubliclyAccessible() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.PubliclyAccessible })
}

func (o LookupClusterResultOutput) S3KeyPrefix() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.S3KeyPrefix })
}

func (o LookupClusterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.VpcId })
}

func (o LookupClusterResultOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.VpcSecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
