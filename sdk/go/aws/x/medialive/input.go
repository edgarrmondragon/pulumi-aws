// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS MediaLive Input.
type Input struct {
	pulumi.CustomResourceState

	// ARN of the Input.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Channels attached to Input.
	AttachedChannels pulumix.ArrayOutput[string] `pulumi:"attachedChannels"`
	// Destination settings for PUSH type inputs. See Destinations for more details.
	Destinations pulumix.GArrayOutput[InputDestination, InputDestinationOutput] `pulumi:"destinations"`
	// The input class.
	InputClass pulumix.Output[string] `pulumi:"inputClass"`
	// Settings for the devices. See Input Devices for more details.
	InputDevices pulumix.GArrayOutput[InputInputDevice, InputInputDeviceOutput] `pulumi:"inputDevices"`
	// A list of IDs for all Inputs which are partners of this one.
	InputPartnerIds pulumix.ArrayOutput[string] `pulumi:"inputPartnerIds"`
	// List of input security groups.
	InputSecurityGroups pulumix.ArrayOutput[string] `pulumi:"inputSecurityGroups"`
	// Source type of the input.
	InputSourceType pulumix.Output[string] `pulumi:"inputSourceType"`
	// A list of the MediaConnect Flows. See Media Connect Flows for more details.
	MediaConnectFlows pulumix.GArrayOutput[InputMediaConnectFlow, InputMediaConnectFlowOutput] `pulumi:"mediaConnectFlows"`
	// Name of the input.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ARN of the role this input assumes during and after creation.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// The source URLs for a PULL-type input. See Sources for more details.
	Sources pulumix.GArrayOutput[InputSource, InputSourceOutput] `pulumi:"sources"`
	// A map of tags to assign to the Input. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The different types of inputs that AWS Elemental MediaLive supports.
	//
	// The following arguments are optional:
	Type pulumix.Output[string] `pulumi:"type"`
	// Settings for a private VPC Input. See VPC for more details.
	Vpc pulumix.GPtrOutput[InputVpc, InputVpcOutput] `pulumi:"vpc"`
}

// NewInput registers a new resource with the given unique name, arguments, and options.
func NewInput(ctx *pulumi.Context,
	name string, args *InputArgs, opts ...pulumi.ResourceOption) (*Input, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Input
	err := ctx.RegisterResource("aws:medialive/input:Input", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInput gets an existing Input resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputState, opts ...pulumi.ResourceOption) (*Input, error) {
	var resource Input
	err := ctx.ReadResource("aws:medialive/input:Input", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Input resources.
type inputState struct {
	// ARN of the Input.
	Arn *string `pulumi:"arn"`
	// Channels attached to Input.
	AttachedChannels []string `pulumi:"attachedChannels"`
	// Destination settings for PUSH type inputs. See Destinations for more details.
	Destinations []InputDestination `pulumi:"destinations"`
	// The input class.
	InputClass *string `pulumi:"inputClass"`
	// Settings for the devices. See Input Devices for more details.
	InputDevices []InputInputDevice `pulumi:"inputDevices"`
	// A list of IDs for all Inputs which are partners of this one.
	InputPartnerIds []string `pulumi:"inputPartnerIds"`
	// List of input security groups.
	InputSecurityGroups []string `pulumi:"inputSecurityGroups"`
	// Source type of the input.
	InputSourceType *string `pulumi:"inputSourceType"`
	// A list of the MediaConnect Flows. See Media Connect Flows for more details.
	MediaConnectFlows []InputMediaConnectFlow `pulumi:"mediaConnectFlows"`
	// Name of the input.
	Name *string `pulumi:"name"`
	// The ARN of the role this input assumes during and after creation.
	RoleArn *string `pulumi:"roleArn"`
	// The source URLs for a PULL-type input. See Sources for more details.
	Sources []InputSource `pulumi:"sources"`
	// A map of tags to assign to the Input. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The different types of inputs that AWS Elemental MediaLive supports.
	//
	// The following arguments are optional:
	Type *string `pulumi:"type"`
	// Settings for a private VPC Input. See VPC for more details.
	Vpc *InputVpc `pulumi:"vpc"`
}

type InputState struct {
	// ARN of the Input.
	Arn pulumix.Input[*string]
	// Channels attached to Input.
	AttachedChannels pulumix.Input[[]string]
	// Destination settings for PUSH type inputs. See Destinations for more details.
	Destinations pulumix.Input[[]*InputDestinationArgs]
	// The input class.
	InputClass pulumix.Input[*string]
	// Settings for the devices. See Input Devices for more details.
	InputDevices pulumix.Input[[]*InputInputDeviceArgs]
	// A list of IDs for all Inputs which are partners of this one.
	InputPartnerIds pulumix.Input[[]string]
	// List of input security groups.
	InputSecurityGroups pulumix.Input[[]string]
	// Source type of the input.
	InputSourceType pulumix.Input[*string]
	// A list of the MediaConnect Flows. See Media Connect Flows for more details.
	MediaConnectFlows pulumix.Input[[]*InputMediaConnectFlowArgs]
	// Name of the input.
	Name pulumix.Input[*string]
	// The ARN of the role this input assumes during and after creation.
	RoleArn pulumix.Input[*string]
	// The source URLs for a PULL-type input. See Sources for more details.
	Sources pulumix.Input[[]*InputSourceArgs]
	// A map of tags to assign to the Input. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The different types of inputs that AWS Elemental MediaLive supports.
	//
	// The following arguments are optional:
	Type pulumix.Input[*string]
	// Settings for a private VPC Input. See VPC for more details.
	Vpc pulumix.Input[*InputVpcArgs]
}

func (InputState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputState)(nil)).Elem()
}

type inputArgs struct {
	// Destination settings for PUSH type inputs. See Destinations for more details.
	Destinations []InputDestination `pulumi:"destinations"`
	// Settings for the devices. See Input Devices for more details.
	InputDevices []InputInputDevice `pulumi:"inputDevices"`
	// List of input security groups.
	InputSecurityGroups []string `pulumi:"inputSecurityGroups"`
	// A list of the MediaConnect Flows. See Media Connect Flows for more details.
	MediaConnectFlows []InputMediaConnectFlow `pulumi:"mediaConnectFlows"`
	// Name of the input.
	Name *string `pulumi:"name"`
	// The ARN of the role this input assumes during and after creation.
	RoleArn *string `pulumi:"roleArn"`
	// The source URLs for a PULL-type input. See Sources for more details.
	Sources []InputSource `pulumi:"sources"`
	// A map of tags to assign to the Input. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The different types of inputs that AWS Elemental MediaLive supports.
	//
	// The following arguments are optional:
	Type string `pulumi:"type"`
	// Settings for a private VPC Input. See VPC for more details.
	Vpc *InputVpc `pulumi:"vpc"`
}

// The set of arguments for constructing a Input resource.
type InputArgs struct {
	// Destination settings for PUSH type inputs. See Destinations for more details.
	Destinations pulumix.Input[[]*InputDestinationArgs]
	// Settings for the devices. See Input Devices for more details.
	InputDevices pulumix.Input[[]*InputInputDeviceArgs]
	// List of input security groups.
	InputSecurityGroups pulumix.Input[[]string]
	// A list of the MediaConnect Flows. See Media Connect Flows for more details.
	MediaConnectFlows pulumix.Input[[]*InputMediaConnectFlowArgs]
	// Name of the input.
	Name pulumix.Input[*string]
	// The ARN of the role this input assumes during and after creation.
	RoleArn pulumix.Input[*string]
	// The source URLs for a PULL-type input. See Sources for more details.
	Sources pulumix.Input[[]*InputSourceArgs]
	// A map of tags to assign to the Input. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The different types of inputs that AWS Elemental MediaLive supports.
	//
	// The following arguments are optional:
	Type pulumix.Input[string]
	// Settings for a private VPC Input. See VPC for more details.
	Vpc pulumix.Input[*InputVpcArgs]
}

func (InputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputArgs)(nil)).Elem()
}

type InputOutput struct{ *pulumi.OutputState }

func (InputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Input)(nil)).Elem()
}

func (o InputOutput) ToInputOutput() InputOutput {
	return o
}

func (o InputOutput) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return o
}

func (o InputOutput) ToOutput(ctx context.Context) pulumix.Output[Input] {
	return pulumix.Output[Input]{
		OutputState: o.OutputState,
	}
}

// ARN of the Input.
func (o InputOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Channels attached to Input.
func (o InputOutput) AttachedChannels() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.ArrayOutput[string] { return v.AttachedChannels })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Destination settings for PUSH type inputs. See Destinations for more details.
func (o InputOutput) Destinations() pulumix.GArrayOutput[InputDestination, InputDestinationOutput] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.GArrayOutput[InputDestination, InputDestinationOutput] { return v.Destinations })
	unwrapped := pulumix.Flatten[[]InputDestination, pulumix.GArrayOutput[InputDestination, InputDestinationOutput]](value)
	return pulumix.GArrayOutput[InputDestination, InputDestinationOutput]{OutputState: unwrapped.OutputState}
}

// The input class.
func (o InputOutput) InputClass() pulumix.Output[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.Output[string] { return v.InputClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Settings for the devices. See Input Devices for more details.
func (o InputOutput) InputDevices() pulumix.GArrayOutput[InputInputDevice, InputInputDeviceOutput] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.GArrayOutput[InputInputDevice, InputInputDeviceOutput] { return v.InputDevices })
	unwrapped := pulumix.Flatten[[]InputInputDevice, pulumix.GArrayOutput[InputInputDevice, InputInputDeviceOutput]](value)
	return pulumix.GArrayOutput[InputInputDevice, InputInputDeviceOutput]{OutputState: unwrapped.OutputState}
}

// A list of IDs for all Inputs which are partners of this one.
func (o InputOutput) InputPartnerIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.ArrayOutput[string] { return v.InputPartnerIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of input security groups.
func (o InputOutput) InputSecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.ArrayOutput[string] { return v.InputSecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Source type of the input.
func (o InputOutput) InputSourceType() pulumix.Output[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.Output[string] { return v.InputSourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of the MediaConnect Flows. See Media Connect Flows for more details.
func (o InputOutput) MediaConnectFlows() pulumix.GArrayOutput[InputMediaConnectFlow, InputMediaConnectFlowOutput] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.GArrayOutput[InputMediaConnectFlow, InputMediaConnectFlowOutput] {
		return v.MediaConnectFlows
	})
	unwrapped := pulumix.Flatten[[]InputMediaConnectFlow, pulumix.GArrayOutput[InputMediaConnectFlow, InputMediaConnectFlowOutput]](value)
	return pulumix.GArrayOutput[InputMediaConnectFlow, InputMediaConnectFlowOutput]{OutputState: unwrapped.OutputState}
}

// Name of the input.
func (o InputOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the role this input assumes during and after creation.
func (o InputOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The source URLs for a PULL-type input. See Sources for more details.
func (o InputOutput) Sources() pulumix.GArrayOutput[InputSource, InputSourceOutput] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.GArrayOutput[InputSource, InputSourceOutput] { return v.Sources })
	unwrapped := pulumix.Flatten[[]InputSource, pulumix.GArrayOutput[InputSource, InputSourceOutput]](value)
	return pulumix.GArrayOutput[InputSource, InputSourceOutput]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the Input. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o InputOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o InputOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The different types of inputs that AWS Elemental MediaLive supports.
//
// The following arguments are optional:
func (o InputOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Settings for a private VPC Input. See VPC for more details.
func (o InputOutput) Vpc() pulumix.GPtrOutput[InputVpc, InputVpcOutput] {
	value := pulumix.Apply[Input](o, func(v Input) pulumix.GPtrOutput[InputVpc, InputVpcOutput] { return v.Vpc })
	unwrapped := pulumix.Flatten[*InputVpc, pulumix.GPtrOutput[InputVpc, InputVpcOutput]](value)
	return pulumix.GPtrOutput[InputVpc, InputVpcOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(InputOutput{})
}
