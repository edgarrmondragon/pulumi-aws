// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage AWS Certificate Manager Private Certificate Authorities (ACM PCA Certificate Authorities).
//
// > **NOTE:** Creating this resource will leave the certificate authority in a `PENDING_CERTIFICATE` status, which means it cannot yet issue certificates. To complete this setup, you must fully sign the certificate authority CSR available in the `certificateSigningRequest` attribute. The `acmpca.CertificateAuthorityCertificate` resource can be used for this purpose.
type CertificateAuthority struct {
	pulumi.CustomResourceState

	// ARN of the certificate authority.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
	Certificate pulumix.Output[string] `pulumi:"certificate"`
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfiguration, CertificateAuthorityCertificateAuthorityConfigurationOutput] `pulumi:"certificateAuthorityConfiguration"`
	// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
	CertificateChain pulumix.Output[string] `pulumi:"certificateChain"`
	// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
	CertificateSigningRequest pulumix.Output[string] `pulumi:"certificateSigningRequest"`
	// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
	KeyStorageSecurityStandard pulumix.Output[string] `pulumi:"keyStorageSecurityStandard"`
	// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotAfter pulumix.Output[string] `pulumi:"notAfter"`
	// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotBefore pulumix.Output[string] `pulumi:"notBefore"`
	// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
	PermanentDeletionTimeInDays pulumix.Output[*int] `pulumi:"permanentDeletionTimeInDays"`
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration pulumix.GPtrOutput[CertificateAuthorityRevocationConfiguration, CertificateAuthorityRevocationConfigurationOutput] `pulumi:"revocationConfiguration"`
	// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
	Serial pulumix.Output[string] `pulumi:"serial"`
	// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
	Type pulumix.Output[*string] `pulumi:"type"`
	// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
	UsageMode pulumix.Output[string] `pulumi:"usageMode"`
}

// NewCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthority(ctx *pulumi.Context,
	name string, args *CertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateAuthority
	err := ctx.RegisterResource("aws:acmpca/certificateAuthority:CertificateAuthority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthority gets an existing CertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthorityState, opts ...pulumi.ResourceOption) (*CertificateAuthority, error) {
	var resource CertificateAuthority
	err := ctx.ReadResource("aws:acmpca/certificateAuthority:CertificateAuthority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthority resources.
type certificateAuthorityState struct {
	// ARN of the certificate authority.
	Arn *string `pulumi:"arn"`
	// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
	Certificate *string `pulumi:"certificate"`
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration *CertificateAuthorityCertificateAuthorityConfiguration `pulumi:"certificateAuthorityConfiguration"`
	// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
	CertificateChain *string `pulumi:"certificateChain"`
	// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
	CertificateSigningRequest *string `pulumi:"certificateSigningRequest"`
	// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
	Enabled *bool `pulumi:"enabled"`
	// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
	KeyStorageSecurityStandard *string `pulumi:"keyStorageSecurityStandard"`
	// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotAfter *string `pulumi:"notAfter"`
	// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotBefore *string `pulumi:"notBefore"`
	// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
	PermanentDeletionTimeInDays *int `pulumi:"permanentDeletionTimeInDays"`
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration *CertificateAuthorityRevocationConfiguration `pulumi:"revocationConfiguration"`
	// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
	Serial *string `pulumi:"serial"`
	// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
	Type *string `pulumi:"type"`
	// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
	UsageMode *string `pulumi:"usageMode"`
}

type CertificateAuthorityState struct {
	// ARN of the certificate authority.
	Arn pulumix.Input[*string]
	// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
	Certificate pulumix.Input[*string]
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration pulumix.Input[*CertificateAuthorityCertificateAuthorityConfigurationArgs]
	// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
	CertificateChain pulumix.Input[*string]
	// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
	CertificateSigningRequest pulumix.Input[*string]
	// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
	Enabled pulumix.Input[*bool]
	// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
	KeyStorageSecurityStandard pulumix.Input[*string]
	// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotAfter pulumix.Input[*string]
	// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
	NotBefore pulumix.Input[*string]
	// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
	PermanentDeletionTimeInDays pulumix.Input[*int]
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration pulumix.Input[*CertificateAuthorityRevocationConfigurationArgs]
	// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
	Serial pulumix.Input[*string]
	// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
	Type pulumix.Input[*string]
	// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
	UsageMode pulumix.Input[*string]
}

func (CertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityState)(nil)).Elem()
}

type certificateAuthorityArgs struct {
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration CertificateAuthorityCertificateAuthorityConfiguration `pulumi:"certificateAuthorityConfiguration"`
	// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
	Enabled *bool `pulumi:"enabled"`
	// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
	KeyStorageSecurityStandard *string `pulumi:"keyStorageSecurityStandard"`
	// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
	PermanentDeletionTimeInDays *int `pulumi:"permanentDeletionTimeInDays"`
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration *CertificateAuthorityRevocationConfiguration `pulumi:"revocationConfiguration"`
	// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
	Type *string `pulumi:"type"`
	// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
	UsageMode *string `pulumi:"usageMode"`
}

// The set of arguments for constructing a CertificateAuthority resource.
type CertificateAuthorityArgs struct {
	// Nested argument containing algorithms and certificate subject information. Defined below.
	CertificateAuthorityConfiguration pulumix.Input[*CertificateAuthorityCertificateAuthorityConfigurationArgs]
	// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
	Enabled pulumix.Input[*bool]
	// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
	KeyStorageSecurityStandard pulumix.Input[*string]
	// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
	PermanentDeletionTimeInDays pulumix.Input[*int]
	// Nested argument containing revocation configuration. Defined below.
	RevocationConfiguration pulumix.Input[*CertificateAuthorityRevocationConfigurationArgs]
	// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
	Type pulumix.Input[*string]
	// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
	UsageMode pulumix.Input[*string]
}

func (CertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityArgs)(nil)).Elem()
}

type CertificateAuthorityOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthority)(nil)).Elem()
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutput() CertificateAuthorityOutput {
	return o
}

func (o CertificateAuthorityOutput) ToCertificateAuthorityOutputWithContext(ctx context.Context) CertificateAuthorityOutput {
	return o
}

func (o CertificateAuthorityOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthority] {
	return pulumix.Output[CertificateAuthority]{
		OutputState: o.OutputState,
	}
}

// ARN of the certificate authority.
func (o CertificateAuthorityOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
func (o CertificateAuthorityOutput) Certificate() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.Certificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Nested argument containing algorithms and certificate subject information. Defined below.
func (o CertificateAuthorityOutput) CertificateAuthorityConfiguration() pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfiguration, CertificateAuthorityCertificateAuthorityConfigurationOutput] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfiguration, CertificateAuthorityCertificateAuthorityConfigurationOutput] {
		return v.CertificateAuthorityConfiguration
	})
	unwrapped := pulumix.Flatten[*CertificateAuthorityCertificateAuthorityConfiguration, pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfiguration, CertificateAuthorityCertificateAuthorityConfigurationOutput]](value)
	return pulumix.GPtrOutput[CertificateAuthorityCertificateAuthorityConfiguration, CertificateAuthorityCertificateAuthorityConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
func (o CertificateAuthorityOutput) CertificateChain() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.CertificateChain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
func (o CertificateAuthorityOutput) CertificateSigningRequest() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.CertificateSigningRequest })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether the certificate authority is enabled or disabled. Defaults to `true`. Can only be disabled if the CA is in an `ACTIVE` state.
func (o CertificateAuthorityOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Cryptographic key management compliance standard used for handling CA keys. Defaults to `FIPS_140_2_LEVEL_3_OR_HIGHER`. Valid values: `FIPS_140_2_LEVEL_3_OR_HIGHER` and `FIPS_140_2_LEVEL_2_OR_HIGHER`. Supported standard for each region can be found in the [Storage and security compliance of AWS Private CA private keys Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys).
func (o CertificateAuthorityOutput) KeyStorageSecurityStandard() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.KeyStorageSecurityStandard })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
func (o CertificateAuthorityOutput) NotAfter() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.NotAfter })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
func (o CertificateAuthorityOutput) NotBefore() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.NotBefore })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
func (o CertificateAuthorityOutput) PermanentDeletionTimeInDays() pulumix.Output[*int] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[*int] { return v.PermanentDeletionTimeInDays })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Nested argument containing revocation configuration. Defined below.
func (o CertificateAuthorityOutput) RevocationConfiguration() pulumix.GPtrOutput[CertificateAuthorityRevocationConfiguration, CertificateAuthorityRevocationConfigurationOutput] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.GPtrOutput[CertificateAuthorityRevocationConfiguration, CertificateAuthorityRevocationConfigurationOutput] {
		return v.RevocationConfiguration
	})
	unwrapped := pulumix.Flatten[*CertificateAuthorityRevocationConfiguration, pulumix.GPtrOutput[CertificateAuthorityRevocationConfiguration, CertificateAuthorityRevocationConfigurationOutput]](value)
	return pulumix.GPtrOutput[CertificateAuthorityRevocationConfiguration, CertificateAuthorityRevocationConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
func (o CertificateAuthorityOutput) Serial() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.Serial })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of user-defined tags that are attached to the certificate authority. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CertificateAuthorityOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CertificateAuthorityOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.
func (o CertificateAuthorityOutput) Type() pulumix.Output[*string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[*string] { return v.Type })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to `GENERAL_PURPOSE`. Valid values: `GENERAL_PURPOSE` and `SHORT_LIVED_CERTIFICATE`.
func (o CertificateAuthorityOutput) UsageMode() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthority](o, func(v CertificateAuthority) pulumix.Output[string] { return v.UsageMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CertificateAuthorityOutput{})
}
