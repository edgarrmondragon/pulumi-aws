// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AccountThrottleSetting struct {
	// Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
	BurstLimit *int `pulumi:"burstLimit"`
	// Number of times API Gateway allows the API to be called per second on average (RPS).
	RateLimit *float64 `pulumi:"rateLimit"`
}

type AccountThrottleSettingArgs struct {
	// Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
	BurstLimit pulumix.Input[*int] `pulumi:"burstLimit"`
	// Number of times API Gateway allows the API to be called per second on average (RPS).
	RateLimit pulumix.Input[*float64] `pulumi:"rateLimit"`
}

func (AccountThrottleSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountThrottleSetting)(nil)).Elem()
}

func (i AccountThrottleSettingArgs) ToAccountThrottleSettingOutput() AccountThrottleSettingOutput {
	return i.ToAccountThrottleSettingOutputWithContext(context.Background())
}

func (i AccountThrottleSettingArgs) ToAccountThrottleSettingOutputWithContext(ctx context.Context) AccountThrottleSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountThrottleSettingOutput)
}

func (i *AccountThrottleSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*AccountThrottleSettingArgs] {
	return pulumix.Val(i)
}

type AccountThrottleSettingOutput struct{ *pulumi.OutputState }

func (AccountThrottleSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountThrottleSetting)(nil)).Elem()
}

func (o AccountThrottleSettingOutput) ToAccountThrottleSettingOutput() AccountThrottleSettingOutput {
	return o
}

func (o AccountThrottleSettingOutput) ToAccountThrottleSettingOutputWithContext(ctx context.Context) AccountThrottleSettingOutput {
	return o
}

func (o AccountThrottleSettingOutput) ToOutput(ctx context.Context) pulumix.Output[AccountThrottleSetting] {
	return pulumix.Output[AccountThrottleSetting]{
		OutputState: o.OutputState,
	}
}

// Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
func (o AccountThrottleSettingOutput) BurstLimit() pulumix.Output[*int] {
	return pulumix.Apply[AccountThrottleSetting](o, func(v AccountThrottleSetting) *int { return v.BurstLimit })
}

// Number of times API Gateway allows the API to be called per second on average (RPS).
func (o AccountThrottleSettingOutput) RateLimit() pulumix.Output[*float64] {
	return pulumix.Apply[AccountThrottleSetting](o, func(v AccountThrottleSetting) *float64 { return v.RateLimit })
}

type DocumentationPartLocation struct {
	// HTTP verb of a method. The default value is `*` for any method.
	Method *string `pulumi:"method"`
	// Name of the targeted API entity.
	Name *string `pulumi:"name"`
	// URL path of the target. The default value is `/` for the root resource.
	Path *string `pulumi:"path"`
	// HTTP status code of a response. The default value is `*` for any status code.
	StatusCode *string `pulumi:"statusCode"`
	// Type of API entity to which the documentation content appliesE.g., `API`, `METHOD` or `REQUEST_BODY`
	Type string `pulumi:"type"`
}

type DocumentationPartLocationArgs struct {
	// HTTP verb of a method. The default value is `*` for any method.
	Method pulumix.Input[*string] `pulumi:"method"`
	// Name of the targeted API entity.
	Name pulumix.Input[*string] `pulumi:"name"`
	// URL path of the target. The default value is `/` for the root resource.
	Path pulumix.Input[*string] `pulumi:"path"`
	// HTTP status code of a response. The default value is `*` for any status code.
	StatusCode pulumix.Input[*string] `pulumi:"statusCode"`
	// Type of API entity to which the documentation content appliesE.g., `API`, `METHOD` or `REQUEST_BODY`
	Type pulumix.Input[string] `pulumi:"type"`
}

func (DocumentationPartLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationPartLocation)(nil)).Elem()
}

func (i DocumentationPartLocationArgs) ToDocumentationPartLocationOutput() DocumentationPartLocationOutput {
	return i.ToDocumentationPartLocationOutputWithContext(context.Background())
}

func (i DocumentationPartLocationArgs) ToDocumentationPartLocationOutputWithContext(ctx context.Context) DocumentationPartLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationPartLocationOutput)
}

func (i *DocumentationPartLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentationPartLocationArgs] {
	return pulumix.Val(i)
}

type DocumentationPartLocationOutput struct{ *pulumi.OutputState }

func (DocumentationPartLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationPartLocation)(nil)).Elem()
}

func (o DocumentationPartLocationOutput) ToDocumentationPartLocationOutput() DocumentationPartLocationOutput {
	return o
}

func (o DocumentationPartLocationOutput) ToDocumentationPartLocationOutputWithContext(ctx context.Context) DocumentationPartLocationOutput {
	return o
}

func (o DocumentationPartLocationOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentationPartLocation] {
	return pulumix.Output[DocumentationPartLocation]{
		OutputState: o.OutputState,
	}
}

// HTTP verb of a method. The default value is `*` for any method.
func (o DocumentationPartLocationOutput) Method() pulumix.Output[*string] {
	return pulumix.Apply[DocumentationPartLocation](o, func(v DocumentationPartLocation) *string { return v.Method })
}

// Name of the targeted API entity.
func (o DocumentationPartLocationOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DocumentationPartLocation](o, func(v DocumentationPartLocation) *string { return v.Name })
}

// URL path of the target. The default value is `/` for the root resource.
func (o DocumentationPartLocationOutput) Path() pulumix.Output[*string] {
	return pulumix.Apply[DocumentationPartLocation](o, func(v DocumentationPartLocation) *string { return v.Path })
}

// HTTP status code of a response. The default value is `*` for any status code.
func (o DocumentationPartLocationOutput) StatusCode() pulumix.Output[*string] {
	return pulumix.Apply[DocumentationPartLocation](o, func(v DocumentationPartLocation) *string { return v.StatusCode })
}

// Type of API entity to which the documentation content appliesE.g., `API`, `METHOD` or `REQUEST_BODY`
func (o DocumentationPartLocationOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[DocumentationPartLocation](o, func(v DocumentationPartLocation) string { return v.Type })
}

type DomainNameEndpointConfiguration struct {
	// List of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE` or `REGIONAL`. If unspecified, defaults to `EDGE`. Must be declared as `REGIONAL` in non-Commercial partitions. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
	Types string `pulumi:"types"`
}

type DomainNameEndpointConfigurationArgs struct {
	// List of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE` or `REGIONAL`. If unspecified, defaults to `EDGE`. Must be declared as `REGIONAL` in non-Commercial partitions. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
	Types pulumix.Input[string] `pulumi:"types"`
}

func (DomainNameEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameEndpointConfiguration)(nil)).Elem()
}

func (i DomainNameEndpointConfigurationArgs) ToDomainNameEndpointConfigurationOutput() DomainNameEndpointConfigurationOutput {
	return i.ToDomainNameEndpointConfigurationOutputWithContext(context.Background())
}

func (i DomainNameEndpointConfigurationArgs) ToDomainNameEndpointConfigurationOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameEndpointConfigurationOutput)
}

func (i *DomainNameEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainNameEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type DomainNameEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (DomainNameEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameEndpointConfiguration)(nil)).Elem()
}

func (o DomainNameEndpointConfigurationOutput) ToDomainNameEndpointConfigurationOutput() DomainNameEndpointConfigurationOutput {
	return o
}

func (o DomainNameEndpointConfigurationOutput) ToDomainNameEndpointConfigurationOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationOutput {
	return o
}

func (o DomainNameEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainNameEndpointConfiguration] {
	return pulumix.Output[DomainNameEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// List of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE` or `REGIONAL`. If unspecified, defaults to `EDGE`. Must be declared as `REGIONAL` in non-Commercial partitions. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
func (o DomainNameEndpointConfigurationOutput) Types() pulumix.Output[string] {
	return pulumix.Apply[DomainNameEndpointConfiguration](o, func(v DomainNameEndpointConfiguration) string { return v.Types })
}

type DomainNameMutualTlsAuthentication struct {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	TruststoreUri string `pulumi:"truststoreUri"`
	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	TruststoreVersion *string `pulumi:"truststoreVersion"`
}

type DomainNameMutualTlsAuthenticationArgs struct {
	// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
	TruststoreUri pulumix.Input[string] `pulumi:"truststoreUri"`
	// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	TruststoreVersion pulumix.Input[*string] `pulumi:"truststoreVersion"`
}

func (DomainNameMutualTlsAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return i.ToDomainNameMutualTlsAuthenticationOutputWithContext(context.Background())
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationOutput)
}

func (i *DomainNameMutualTlsAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainNameMutualTlsAuthenticationArgs] {
	return pulumix.Val(i)
}

type DomainNameMutualTlsAuthenticationOutput struct{ *pulumi.OutputState }

func (DomainNameMutualTlsAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainNameMutualTlsAuthentication] {
	return pulumix.Output[DomainNameMutualTlsAuthentication]{
		OutputState: o.OutputState,
	}
}

// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
func (o DomainNameMutualTlsAuthenticationOutput) TruststoreUri() pulumix.Output[string] {
	return pulumix.Apply[DomainNameMutualTlsAuthentication](o, func(v DomainNameMutualTlsAuthentication) string { return v.TruststoreUri })
}

// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
func (o DomainNameMutualTlsAuthenticationOutput) TruststoreVersion() pulumix.Output[*string] {
	return pulumix.Apply[DomainNameMutualTlsAuthentication](o, func(v DomainNameMutualTlsAuthentication) *string { return v.TruststoreVersion })
}

type IntegrationTlsConfig struct {
	// Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a [supported certificate authority](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-supported-certificate-authorities-for-http-endpoints.html). This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for `HTTP` and `HTTP_PROXY` integrations.
	InsecureSkipVerification *bool `pulumi:"insecureSkipVerification"`
}

type IntegrationTlsConfigArgs struct {
	// Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a [supported certificate authority](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-supported-certificate-authorities-for-http-endpoints.html). This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for `HTTP` and `HTTP_PROXY` integrations.
	InsecureSkipVerification pulumix.Input[*bool] `pulumi:"insecureSkipVerification"`
}

func (IntegrationTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTlsConfig)(nil)).Elem()
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput {
	return i.ToIntegrationTlsConfigOutputWithContext(context.Background())
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigOutputWithContext(ctx context.Context) IntegrationTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTlsConfigOutput)
}

func (i *IntegrationTlsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTlsConfigArgs] {
	return pulumix.Val(i)
}

type IntegrationTlsConfigOutput struct{ *pulumi.OutputState }

func (IntegrationTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTlsConfig)(nil)).Elem()
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput {
	return o
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigOutputWithContext(ctx context.Context) IntegrationTlsConfigOutput {
	return o
}

func (o IntegrationTlsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTlsConfig] {
	return pulumix.Output[IntegrationTlsConfig]{
		OutputState: o.OutputState,
	}
}

// Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a [supported certificate authority](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-supported-certificate-authorities-for-http-endpoints.html). This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for `HTTP` and `HTTP_PROXY` integrations.
func (o IntegrationTlsConfigOutput) InsecureSkipVerification() pulumix.Output[*bool] {
	return pulumix.Apply[IntegrationTlsConfig](o, func(v IntegrationTlsConfig) *bool { return v.InsecureSkipVerification })
}

type MethodSettingsSettings struct {
	// Whether the cached responses are encrypted.
	CacheDataEncrypted *bool `pulumi:"cacheDataEncrypted"`
	// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	CacheTtlInSeconds *int `pulumi:"cacheTtlInSeconds"`
	// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
	CachingEnabled *bool `pulumi:"cachingEnabled"`
	// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	DataTraceEnabled *bool `pulumi:"dataTraceEnabled"`
	// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Whether Amazon CloudWatch metrics are enabled for this method.
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
	// Whether authorization is required for a cache invalidation request.
	RequireAuthorizationForCacheControl *bool `pulumi:"requireAuthorizationForCacheControl"`
	// Throttling burst limit. Default: `-1` (throttling disabled).
	ThrottlingBurstLimit *int `pulumi:"throttlingBurstLimit"`
	// Throttling rate limit. Default: `-1` (throttling disabled).
	ThrottlingRateLimit *float64 `pulumi:"throttlingRateLimit"`
	// How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
	UnauthorizedCacheControlHeaderStrategy *string `pulumi:"unauthorizedCacheControlHeaderStrategy"`
}

type MethodSettingsSettingsArgs struct {
	// Whether the cached responses are encrypted.
	CacheDataEncrypted pulumix.Input[*bool] `pulumi:"cacheDataEncrypted"`
	// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
	CacheTtlInSeconds pulumix.Input[*int] `pulumi:"cacheTtlInSeconds"`
	// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
	CachingEnabled pulumix.Input[*bool] `pulumi:"cachingEnabled"`
	// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
	DataTraceEnabled pulumix.Input[*bool] `pulumi:"dataTraceEnabled"`
	// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
	LoggingLevel pulumix.Input[*string] `pulumi:"loggingLevel"`
	// Whether Amazon CloudWatch metrics are enabled for this method.
	MetricsEnabled pulumix.Input[*bool] `pulumi:"metricsEnabled"`
	// Whether authorization is required for a cache invalidation request.
	RequireAuthorizationForCacheControl pulumix.Input[*bool] `pulumi:"requireAuthorizationForCacheControl"`
	// Throttling burst limit. Default: `-1` (throttling disabled).
	ThrottlingBurstLimit pulumix.Input[*int] `pulumi:"throttlingBurstLimit"`
	// Throttling rate limit. Default: `-1` (throttling disabled).
	ThrottlingRateLimit pulumix.Input[*float64] `pulumi:"throttlingRateLimit"`
	// How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
	UnauthorizedCacheControlHeaderStrategy pulumix.Input[*string] `pulumi:"unauthorizedCacheControlHeaderStrategy"`
}

func (MethodSettingsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MethodSettingsSettings)(nil)).Elem()
}

func (i MethodSettingsSettingsArgs) ToMethodSettingsSettingsOutput() MethodSettingsSettingsOutput {
	return i.ToMethodSettingsSettingsOutputWithContext(context.Background())
}

func (i MethodSettingsSettingsArgs) ToMethodSettingsSettingsOutputWithContext(ctx context.Context) MethodSettingsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodSettingsSettingsOutput)
}

func (i *MethodSettingsSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*MethodSettingsSettingsArgs] {
	return pulumix.Val(i)
}

type MethodSettingsSettingsOutput struct{ *pulumi.OutputState }

func (MethodSettingsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MethodSettingsSettings)(nil)).Elem()
}

func (o MethodSettingsSettingsOutput) ToMethodSettingsSettingsOutput() MethodSettingsSettingsOutput {
	return o
}

func (o MethodSettingsSettingsOutput) ToMethodSettingsSettingsOutputWithContext(ctx context.Context) MethodSettingsSettingsOutput {
	return o
}

func (o MethodSettingsSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MethodSettingsSettings] {
	return pulumix.Output[MethodSettingsSettings]{
		OutputState: o.OutputState,
	}
}

// Whether the cached responses are encrypted.
func (o MethodSettingsSettingsOutput) CacheDataEncrypted() pulumix.Output[*bool] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *bool { return v.CacheDataEncrypted })
}

// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
func (o MethodSettingsSettingsOutput) CacheTtlInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *int { return v.CacheTtlInSeconds })
}

// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
func (o MethodSettingsSettingsOutput) CachingEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *bool { return v.CachingEnabled })
}

// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
func (o MethodSettingsSettingsOutput) DataTraceEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *bool { return v.DataTraceEnabled })
}

// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
func (o MethodSettingsSettingsOutput) LoggingLevel() pulumix.Output[*string] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *string { return v.LoggingLevel })
}

// Whether Amazon CloudWatch metrics are enabled for this method.
func (o MethodSettingsSettingsOutput) MetricsEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *bool { return v.MetricsEnabled })
}

// Whether authorization is required for a cache invalidation request.
func (o MethodSettingsSettingsOutput) RequireAuthorizationForCacheControl() pulumix.Output[*bool] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *bool { return v.RequireAuthorizationForCacheControl })
}

// Throttling burst limit. Default: `-1` (throttling disabled).
func (o MethodSettingsSettingsOutput) ThrottlingBurstLimit() pulumix.Output[*int] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *int { return v.ThrottlingBurstLimit })
}

// Throttling rate limit. Default: `-1` (throttling disabled).
func (o MethodSettingsSettingsOutput) ThrottlingRateLimit() pulumix.Output[*float64] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *float64 { return v.ThrottlingRateLimit })
}

// How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
func (o MethodSettingsSettingsOutput) UnauthorizedCacheControlHeaderStrategy() pulumix.Output[*string] {
	return pulumix.Apply[MethodSettingsSettings](o, func(v MethodSettingsSettings) *string { return v.UnauthorizedCacheControlHeaderStrategy })
}

type RestApiEndpointConfiguration struct {
	// List of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE`, `REGIONAL` or `PRIVATE`. If unspecified, defaults to `EDGE`. If set to `PRIVATE` recommend to set `putRestApiMode` = `merge` to not cause the endpoints and associated Route53 records to be deleted. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
	Types string `pulumi:"types"`
	// Set of VPC Endpoint identifiers. It is only supported for `PRIVATE` endpoint type. If importing an OpenAPI specification via the `body` argument, this corresponds to the [`x-amazon-apigateway-endpoint-configuration` extension `vpcEndpointIds` property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-endpoint-configuration.html). If the argument value is provided and is different than the OpenAPI value, **the argument value will override the OpenAPI value**.
	VpcEndpointIds []string `pulumi:"vpcEndpointIds"`
}

type RestApiEndpointConfigurationArgs struct {
	// List of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE`, `REGIONAL` or `PRIVATE`. If unspecified, defaults to `EDGE`. If set to `PRIVATE` recommend to set `putRestApiMode` = `merge` to not cause the endpoints and associated Route53 records to be deleted. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
	Types pulumix.Input[string] `pulumi:"types"`
	// Set of VPC Endpoint identifiers. It is only supported for `PRIVATE` endpoint type. If importing an OpenAPI specification via the `body` argument, this corresponds to the [`x-amazon-apigateway-endpoint-configuration` extension `vpcEndpointIds` property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-endpoint-configuration.html). If the argument value is provided and is different than the OpenAPI value, **the argument value will override the OpenAPI value**.
	VpcEndpointIds pulumix.Input[[]string] `pulumi:"vpcEndpointIds"`
}

func (RestApiEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestApiEndpointConfiguration)(nil)).Elem()
}

func (i RestApiEndpointConfigurationArgs) ToRestApiEndpointConfigurationOutput() RestApiEndpointConfigurationOutput {
	return i.ToRestApiEndpointConfigurationOutputWithContext(context.Background())
}

func (i RestApiEndpointConfigurationArgs) ToRestApiEndpointConfigurationOutputWithContext(ctx context.Context) RestApiEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestApiEndpointConfigurationOutput)
}

func (i *RestApiEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RestApiEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type RestApiEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (RestApiEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestApiEndpointConfiguration)(nil)).Elem()
}

func (o RestApiEndpointConfigurationOutput) ToRestApiEndpointConfigurationOutput() RestApiEndpointConfigurationOutput {
	return o
}

func (o RestApiEndpointConfigurationOutput) ToRestApiEndpointConfigurationOutputWithContext(ctx context.Context) RestApiEndpointConfigurationOutput {
	return o
}

func (o RestApiEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RestApiEndpointConfiguration] {
	return pulumix.Output[RestApiEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// List of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE`, `REGIONAL` or `PRIVATE`. If unspecified, defaults to `EDGE`. If set to `PRIVATE` recommend to set `putRestApiMode` = `merge` to not cause the endpoints and associated Route53 records to be deleted. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
func (o RestApiEndpointConfigurationOutput) Types() pulumix.Output[string] {
	return pulumix.Apply[RestApiEndpointConfiguration](o, func(v RestApiEndpointConfiguration) string { return v.Types })
}

// Set of VPC Endpoint identifiers. It is only supported for `PRIVATE` endpoint type. If importing an OpenAPI specification via the `body` argument, this corresponds to the [`x-amazon-apigateway-endpoint-configuration` extension `vpcEndpointIds` property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-endpoint-configuration.html). If the argument value is provided and is different than the OpenAPI value, **the argument value will override the OpenAPI value**.
func (o RestApiEndpointConfigurationOutput) VpcEndpointIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RestApiEndpointConfiguration](o, func(v RestApiEndpointConfiguration) []string { return v.VpcEndpointIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type StageAccessLogSettings struct {
	// ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with `amazon-apigateway-`. Automatically removes trailing `:*` if present.
	DestinationArn string `pulumi:"destinationArn"`
	// Formatting and values recorded in the logs.
	// For more information on configuring the log format rules visit the AWS [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html)
	Format string `pulumi:"format"`
}

type StageAccessLogSettingsArgs struct {
	// ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with `amazon-apigateway-`. Automatically removes trailing `:*` if present.
	DestinationArn pulumix.Input[string] `pulumi:"destinationArn"`
	// Formatting and values recorded in the logs.
	// For more information on configuring the log format rules visit the AWS [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html)
	Format pulumix.Input[string] `pulumi:"format"`
}

func (StageAccessLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAccessLogSettings)(nil)).Elem()
}

func (i StageAccessLogSettingsArgs) ToStageAccessLogSettingsOutput() StageAccessLogSettingsOutput {
	return i.ToStageAccessLogSettingsOutputWithContext(context.Background())
}

func (i StageAccessLogSettingsArgs) ToStageAccessLogSettingsOutputWithContext(ctx context.Context) StageAccessLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAccessLogSettingsOutput)
}

func (i *StageAccessLogSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*StageAccessLogSettingsArgs] {
	return pulumix.Val(i)
}

type StageAccessLogSettingsOutput struct{ *pulumi.OutputState }

func (StageAccessLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAccessLogSettings)(nil)).Elem()
}

func (o StageAccessLogSettingsOutput) ToStageAccessLogSettingsOutput() StageAccessLogSettingsOutput {
	return o
}

func (o StageAccessLogSettingsOutput) ToStageAccessLogSettingsOutputWithContext(ctx context.Context) StageAccessLogSettingsOutput {
	return o
}

func (o StageAccessLogSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[StageAccessLogSettings] {
	return pulumix.Output[StageAccessLogSettings]{
		OutputState: o.OutputState,
	}
}

// ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with `amazon-apigateway-`. Automatically removes trailing `:*` if present.
func (o StageAccessLogSettingsOutput) DestinationArn() pulumix.Output[string] {
	return pulumix.Apply[StageAccessLogSettings](o, func(v StageAccessLogSettings) string { return v.DestinationArn })
}

// Formatting and values recorded in the logs.
// For more information on configuring the log format rules visit the AWS [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html)
func (o StageAccessLogSettingsOutput) Format() pulumix.Output[string] {
	return pulumix.Apply[StageAccessLogSettings](o, func(v StageAccessLogSettings) string { return v.Format })
}

type StageCanarySettings struct {
	// Percent `0.0` - `100.0` of traffic to divert to the canary deployment.
	PercentTraffic *float64 `pulumi:"percentTraffic"`
	// Map of overridden stage `variables` (including new variables) for the canary deployment.
	StageVariableOverrides map[string]string `pulumi:"stageVariableOverrides"`
	// Whether the canary deployment uses the stage cache. Defaults to false.
	UseStageCache *bool `pulumi:"useStageCache"`
}

type StageCanarySettingsArgs struct {
	// Percent `0.0` - `100.0` of traffic to divert to the canary deployment.
	PercentTraffic pulumix.Input[*float64] `pulumi:"percentTraffic"`
	// Map of overridden stage `variables` (including new variables) for the canary deployment.
	StageVariableOverrides pulumix.Input[map[string]string] `pulumi:"stageVariableOverrides"`
	// Whether the canary deployment uses the stage cache. Defaults to false.
	UseStageCache pulumix.Input[*bool] `pulumi:"useStageCache"`
}

func (StageCanarySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageCanarySettings)(nil)).Elem()
}

func (i StageCanarySettingsArgs) ToStageCanarySettingsOutput() StageCanarySettingsOutput {
	return i.ToStageCanarySettingsOutputWithContext(context.Background())
}

func (i StageCanarySettingsArgs) ToStageCanarySettingsOutputWithContext(ctx context.Context) StageCanarySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageCanarySettingsOutput)
}

func (i *StageCanarySettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*StageCanarySettingsArgs] {
	return pulumix.Val(i)
}

type StageCanarySettingsOutput struct{ *pulumi.OutputState }

func (StageCanarySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageCanarySettings)(nil)).Elem()
}

func (o StageCanarySettingsOutput) ToStageCanarySettingsOutput() StageCanarySettingsOutput {
	return o
}

func (o StageCanarySettingsOutput) ToStageCanarySettingsOutputWithContext(ctx context.Context) StageCanarySettingsOutput {
	return o
}

func (o StageCanarySettingsOutput) ToOutput(ctx context.Context) pulumix.Output[StageCanarySettings] {
	return pulumix.Output[StageCanarySettings]{
		OutputState: o.OutputState,
	}
}

// Percent `0.0` - `100.0` of traffic to divert to the canary deployment.
func (o StageCanarySettingsOutput) PercentTraffic() pulumix.Output[*float64] {
	return pulumix.Apply[StageCanarySettings](o, func(v StageCanarySettings) *float64 { return v.PercentTraffic })
}

// Map of overridden stage `variables` (including new variables) for the canary deployment.
func (o StageCanarySettingsOutput) StageVariableOverrides() pulumix.MapOutput[string] {
	value := pulumix.Apply[StageCanarySettings](o, func(v StageCanarySettings) map[string]string { return v.StageVariableOverrides })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Whether the canary deployment uses the stage cache. Defaults to false.
func (o StageCanarySettingsOutput) UseStageCache() pulumix.Output[*bool] {
	return pulumix.Apply[StageCanarySettings](o, func(v StageCanarySettings) *bool { return v.UseStageCache })
}

type UsagePlanApiStage struct {
	// API Id of the associated API stage in a usage plan.
	ApiId string `pulumi:"apiId"`
	// API stage name of the associated API stage in a usage plan.
	Stage string `pulumi:"stage"`
	// The throttling limits of the usage plan.
	Throttles []UsagePlanApiStageThrottle `pulumi:"throttles"`
}

type UsagePlanApiStageArgs struct {
	// API Id of the associated API stage in a usage plan.
	ApiId pulumix.Input[string] `pulumi:"apiId"`
	// API stage name of the associated API stage in a usage plan.
	Stage pulumix.Input[string] `pulumi:"stage"`
	// The throttling limits of the usage plan.
	Throttles pulumix.Input[[]*UsagePlanApiStageThrottleArgs] `pulumi:"throttles"`
}

func (UsagePlanApiStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStage)(nil)).Elem()
}

func (i UsagePlanApiStageArgs) ToUsagePlanApiStageOutput() UsagePlanApiStageOutput {
	return i.ToUsagePlanApiStageOutputWithContext(context.Background())
}

func (i UsagePlanApiStageArgs) ToUsagePlanApiStageOutputWithContext(ctx context.Context) UsagePlanApiStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanApiStageOutput)
}

func (i *UsagePlanApiStageArgs) ToOutput(ctx context.Context) pulumix.Output[*UsagePlanApiStageArgs] {
	return pulumix.Val(i)
}

type UsagePlanApiStageOutput struct{ *pulumi.OutputState }

func (UsagePlanApiStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStage)(nil)).Elem()
}

func (o UsagePlanApiStageOutput) ToUsagePlanApiStageOutput() UsagePlanApiStageOutput {
	return o
}

func (o UsagePlanApiStageOutput) ToUsagePlanApiStageOutputWithContext(ctx context.Context) UsagePlanApiStageOutput {
	return o
}

func (o UsagePlanApiStageOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlanApiStage] {
	return pulumix.Output[UsagePlanApiStage]{
		OutputState: o.OutputState,
	}
}

// API Id of the associated API stage in a usage plan.
func (o UsagePlanApiStageOutput) ApiId() pulumix.Output[string] {
	return pulumix.Apply[UsagePlanApiStage](o, func(v UsagePlanApiStage) string { return v.ApiId })
}

// API stage name of the associated API stage in a usage plan.
func (o UsagePlanApiStageOutput) Stage() pulumix.Output[string] {
	return pulumix.Apply[UsagePlanApiStage](o, func(v UsagePlanApiStage) string { return v.Stage })
}

// The throttling limits of the usage plan.
func (o UsagePlanApiStageOutput) Throttles() pulumix.GArrayOutput[UsagePlanApiStageThrottle, UsagePlanApiStageThrottleOutput] {
	value := pulumix.Apply[UsagePlanApiStage](o, func(v UsagePlanApiStage) []UsagePlanApiStageThrottle { return v.Throttles })
	return pulumix.GArrayOutput[UsagePlanApiStageThrottle, UsagePlanApiStageThrottleOutput]{OutputState: value.OutputState}
}

type UsagePlanApiStageThrottle struct {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	BurstLimit *int `pulumi:"burstLimit"`
	// Method to apply the throttle settings for. Specfiy the path and method, for example `/test/GET`.
	Path string `pulumi:"path"`
	// The API request steady-state rate limit.
	RateLimit *float64 `pulumi:"rateLimit"`
}

type UsagePlanApiStageThrottleArgs struct {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	BurstLimit pulumix.Input[*int] `pulumi:"burstLimit"`
	// Method to apply the throttle settings for. Specfiy the path and method, for example `/test/GET`.
	Path pulumix.Input[string] `pulumi:"path"`
	// The API request steady-state rate limit.
	RateLimit pulumix.Input[*float64] `pulumi:"rateLimit"`
}

func (UsagePlanApiStageThrottleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStageThrottle)(nil)).Elem()
}

func (i UsagePlanApiStageThrottleArgs) ToUsagePlanApiStageThrottleOutput() UsagePlanApiStageThrottleOutput {
	return i.ToUsagePlanApiStageThrottleOutputWithContext(context.Background())
}

func (i UsagePlanApiStageThrottleArgs) ToUsagePlanApiStageThrottleOutputWithContext(ctx context.Context) UsagePlanApiStageThrottleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanApiStageThrottleOutput)
}

func (i *UsagePlanApiStageThrottleArgs) ToOutput(ctx context.Context) pulumix.Output[*UsagePlanApiStageThrottleArgs] {
	return pulumix.Val(i)
}

type UsagePlanApiStageThrottleOutput struct{ *pulumi.OutputState }

func (UsagePlanApiStageThrottleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStageThrottle)(nil)).Elem()
}

func (o UsagePlanApiStageThrottleOutput) ToUsagePlanApiStageThrottleOutput() UsagePlanApiStageThrottleOutput {
	return o
}

func (o UsagePlanApiStageThrottleOutput) ToUsagePlanApiStageThrottleOutputWithContext(ctx context.Context) UsagePlanApiStageThrottleOutput {
	return o
}

func (o UsagePlanApiStageThrottleOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlanApiStageThrottle] {
	return pulumix.Output[UsagePlanApiStageThrottle]{
		OutputState: o.OutputState,
	}
}

// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
func (o UsagePlanApiStageThrottleOutput) BurstLimit() pulumix.Output[*int] {
	return pulumix.Apply[UsagePlanApiStageThrottle](o, func(v UsagePlanApiStageThrottle) *int { return v.BurstLimit })
}

// Method to apply the throttle settings for. Specfiy the path and method, for example `/test/GET`.
func (o UsagePlanApiStageThrottleOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[UsagePlanApiStageThrottle](o, func(v UsagePlanApiStageThrottle) string { return v.Path })
}

// The API request steady-state rate limit.
func (o UsagePlanApiStageThrottleOutput) RateLimit() pulumix.Output[*float64] {
	return pulumix.Apply[UsagePlanApiStageThrottle](o, func(v UsagePlanApiStageThrottle) *float64 { return v.RateLimit })
}

type UsagePlanQuotaSettings struct {
	// Maximum number of requests that can be made in a given time period.
	Limit int `pulumi:"limit"`
	// Number of requests subtracted from the given limit in the initial time period.
	Offset *int `pulumi:"offset"`
	// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
	Period string `pulumi:"period"`
}

type UsagePlanQuotaSettingsArgs struct {
	// Maximum number of requests that can be made in a given time period.
	Limit pulumix.Input[int] `pulumi:"limit"`
	// Number of requests subtracted from the given limit in the initial time period.
	Offset pulumix.Input[*int] `pulumi:"offset"`
	// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
	Period pulumix.Input[string] `pulumi:"period"`
}

func (UsagePlanQuotaSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanQuotaSettings)(nil)).Elem()
}

func (i UsagePlanQuotaSettingsArgs) ToUsagePlanQuotaSettingsOutput() UsagePlanQuotaSettingsOutput {
	return i.ToUsagePlanQuotaSettingsOutputWithContext(context.Background())
}

func (i UsagePlanQuotaSettingsArgs) ToUsagePlanQuotaSettingsOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanQuotaSettingsOutput)
}

func (i *UsagePlanQuotaSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*UsagePlanQuotaSettingsArgs] {
	return pulumix.Val(i)
}

type UsagePlanQuotaSettingsOutput struct{ *pulumi.OutputState }

func (UsagePlanQuotaSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanQuotaSettings)(nil)).Elem()
}

func (o UsagePlanQuotaSettingsOutput) ToUsagePlanQuotaSettingsOutput() UsagePlanQuotaSettingsOutput {
	return o
}

func (o UsagePlanQuotaSettingsOutput) ToUsagePlanQuotaSettingsOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsOutput {
	return o
}

func (o UsagePlanQuotaSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlanQuotaSettings] {
	return pulumix.Output[UsagePlanQuotaSettings]{
		OutputState: o.OutputState,
	}
}

// Maximum number of requests that can be made in a given time period.
func (o UsagePlanQuotaSettingsOutput) Limit() pulumix.Output[int] {
	return pulumix.Apply[UsagePlanQuotaSettings](o, func(v UsagePlanQuotaSettings) int { return v.Limit })
}

// Number of requests subtracted from the given limit in the initial time period.
func (o UsagePlanQuotaSettingsOutput) Offset() pulumix.Output[*int] {
	return pulumix.Apply[UsagePlanQuotaSettings](o, func(v UsagePlanQuotaSettings) *int { return v.Offset })
}

// Time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
func (o UsagePlanQuotaSettingsOutput) Period() pulumix.Output[string] {
	return pulumix.Apply[UsagePlanQuotaSettings](o, func(v UsagePlanQuotaSettings) string { return v.Period })
}

type UsagePlanThrottleSettings struct {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	BurstLimit *int `pulumi:"burstLimit"`
	// The API request steady-state rate limit.
	RateLimit *float64 `pulumi:"rateLimit"`
}

type UsagePlanThrottleSettingsArgs struct {
	// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
	BurstLimit pulumix.Input[*int] `pulumi:"burstLimit"`
	// The API request steady-state rate limit.
	RateLimit pulumix.Input[*float64] `pulumi:"rateLimit"`
}

func (UsagePlanThrottleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanThrottleSettings)(nil)).Elem()
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput {
	return i.ToUsagePlanThrottleSettingsOutputWithContext(context.Background())
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsOutput)
}

func (i *UsagePlanThrottleSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*UsagePlanThrottleSettingsArgs] {
	return pulumix.Val(i)
}

type UsagePlanThrottleSettingsOutput struct{ *pulumi.OutputState }

func (UsagePlanThrottleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanThrottleSettings)(nil)).Elem()
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput {
	return o
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsOutput {
	return o
}

func (o UsagePlanThrottleSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlanThrottleSettings] {
	return pulumix.Output[UsagePlanThrottleSettings]{
		OutputState: o.OutputState,
	}
}

// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
func (o UsagePlanThrottleSettingsOutput) BurstLimit() pulumix.Output[*int] {
	return pulumix.Apply[UsagePlanThrottleSettings](o, func(v UsagePlanThrottleSettings) *int { return v.BurstLimit })
}

// The API request steady-state rate limit.
func (o UsagePlanThrottleSettingsOutput) RateLimit() pulumix.Output[*float64] {
	return pulumix.Apply[UsagePlanThrottleSettings](o, func(v UsagePlanThrottleSettings) *float64 { return v.RateLimit })
}

type GetDomainNameEndpointConfiguration struct {
	// List of endpoint types.
	Types []string `pulumi:"types"`
}

type GetDomainNameEndpointConfigurationArgs struct {
	// List of endpoint types.
	Types pulumix.Input[[]string] `pulumi:"types"`
}

func (GetDomainNameEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainNameEndpointConfiguration)(nil)).Elem()
}

func (i GetDomainNameEndpointConfigurationArgs) ToGetDomainNameEndpointConfigurationOutput() GetDomainNameEndpointConfigurationOutput {
	return i.ToGetDomainNameEndpointConfigurationOutputWithContext(context.Background())
}

func (i GetDomainNameEndpointConfigurationArgs) ToGetDomainNameEndpointConfigurationOutputWithContext(ctx context.Context) GetDomainNameEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainNameEndpointConfigurationOutput)
}

func (i *GetDomainNameEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDomainNameEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type GetDomainNameEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (GetDomainNameEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainNameEndpointConfiguration)(nil)).Elem()
}

func (o GetDomainNameEndpointConfigurationOutput) ToGetDomainNameEndpointConfigurationOutput() GetDomainNameEndpointConfigurationOutput {
	return o
}

func (o GetDomainNameEndpointConfigurationOutput) ToGetDomainNameEndpointConfigurationOutputWithContext(ctx context.Context) GetDomainNameEndpointConfigurationOutput {
	return o
}

func (o GetDomainNameEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainNameEndpointConfiguration] {
	return pulumix.Output[GetDomainNameEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// List of endpoint types.
func (o GetDomainNameEndpointConfigurationOutput) Types() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDomainNameEndpointConfiguration](o, func(v GetDomainNameEndpointConfiguration) []string { return v.Types })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetRestApiEndpointConfiguration struct {
	Types          []string `pulumi:"types"`
	VpcEndpointIds []string `pulumi:"vpcEndpointIds"`
}

type GetRestApiEndpointConfigurationArgs struct {
	Types          pulumix.Input[[]string] `pulumi:"types"`
	VpcEndpointIds pulumix.Input[[]string] `pulumi:"vpcEndpointIds"`
}

func (GetRestApiEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRestApiEndpointConfiguration)(nil)).Elem()
}

func (i GetRestApiEndpointConfigurationArgs) ToGetRestApiEndpointConfigurationOutput() GetRestApiEndpointConfigurationOutput {
	return i.ToGetRestApiEndpointConfigurationOutputWithContext(context.Background())
}

func (i GetRestApiEndpointConfigurationArgs) ToGetRestApiEndpointConfigurationOutputWithContext(ctx context.Context) GetRestApiEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRestApiEndpointConfigurationOutput)
}

func (i *GetRestApiEndpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRestApiEndpointConfigurationArgs] {
	return pulumix.Val(i)
}

type GetRestApiEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (GetRestApiEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRestApiEndpointConfiguration)(nil)).Elem()
}

func (o GetRestApiEndpointConfigurationOutput) ToGetRestApiEndpointConfigurationOutput() GetRestApiEndpointConfigurationOutput {
	return o
}

func (o GetRestApiEndpointConfigurationOutput) ToGetRestApiEndpointConfigurationOutputWithContext(ctx context.Context) GetRestApiEndpointConfigurationOutput {
	return o
}

func (o GetRestApiEndpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetRestApiEndpointConfiguration] {
	return pulumix.Output[GetRestApiEndpointConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetRestApiEndpointConfigurationOutput) Types() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRestApiEndpointConfiguration](o, func(v GetRestApiEndpointConfiguration) []string { return v.Types })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetRestApiEndpointConfigurationOutput) VpcEndpointIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetRestApiEndpointConfiguration](o, func(v GetRestApiEndpointConfiguration) []string { return v.VpcEndpointIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AccountThrottleSettingOutput{})
	pulumi.RegisterOutputType(DocumentationPartLocationOutput{})
	pulumi.RegisterOutputType(DomainNameEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(DomainNameMutualTlsAuthenticationOutput{})
	pulumi.RegisterOutputType(IntegrationTlsConfigOutput{})
	pulumi.RegisterOutputType(MethodSettingsSettingsOutput{})
	pulumi.RegisterOutputType(RestApiEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(StageAccessLogSettingsOutput{})
	pulumi.RegisterOutputType(StageCanarySettingsOutput{})
	pulumi.RegisterOutputType(UsagePlanApiStageOutput{})
	pulumi.RegisterOutputType(UsagePlanApiStageThrottleOutput{})
	pulumi.RegisterOutputType(UsagePlanQuotaSettingsOutput{})
	pulumi.RegisterOutputType(UsagePlanThrottleSettingsOutput{})
	pulumi.RegisterOutputType(GetDomainNameEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(GetRestApiEndpointConfigurationOutput{})
}
