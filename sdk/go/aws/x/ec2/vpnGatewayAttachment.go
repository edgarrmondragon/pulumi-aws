// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Virtual Private Gateway attachment resource, allowing for an existing
// hardware VPN gateway to be attached and/or detached from a VPC.
//
// > **Note:** The `ec2.VpnGateway`
// resource can also automatically attach the Virtual Private Gateway it creates
// to an existing VPC by setting the `vpcId` attribute accordingly.
type VpnGatewayAttachment struct {
	pulumi.CustomResourceState

	// The ID of the VPC.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
	// The ID of the Virtual Private Gateway.
	VpnGatewayId pulumix.Output[string] `pulumi:"vpnGatewayId"`
}

// NewVpnGatewayAttachment registers a new resource with the given unique name, arguments, and options.
func NewVpnGatewayAttachment(ctx *pulumi.Context,
	name string, args *VpnGatewayAttachmentArgs, opts ...pulumi.ResourceOption) (*VpnGatewayAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnGatewayAttachment
	err := ctx.RegisterResource("aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnGatewayAttachment gets an existing VpnGatewayAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnGatewayAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnGatewayAttachmentState, opts ...pulumi.ResourceOption) (*VpnGatewayAttachment, error) {
	var resource VpnGatewayAttachment
	err := ctx.ReadResource("aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnGatewayAttachment resources.
type vpnGatewayAttachmentState struct {
	// The ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// The ID of the Virtual Private Gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type VpnGatewayAttachmentState struct {
	// The ID of the VPC.
	VpcId pulumix.Input[*string]
	// The ID of the Virtual Private Gateway.
	VpnGatewayId pulumix.Input[*string]
}

func (VpnGatewayAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnGatewayAttachmentState)(nil)).Elem()
}

type vpnGatewayAttachmentArgs struct {
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
	// The ID of the Virtual Private Gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a VpnGatewayAttachment resource.
type VpnGatewayAttachmentArgs struct {
	// The ID of the VPC.
	VpcId pulumix.Input[string]
	// The ID of the Virtual Private Gateway.
	VpnGatewayId pulumix.Input[string]
}

func (VpnGatewayAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnGatewayAttachmentArgs)(nil)).Elem()
}

type VpnGatewayAttachmentOutput struct{ *pulumi.OutputState }

func (VpnGatewayAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayAttachment)(nil)).Elem()
}

func (o VpnGatewayAttachmentOutput) ToVpnGatewayAttachmentOutput() VpnGatewayAttachmentOutput {
	return o
}

func (o VpnGatewayAttachmentOutput) ToVpnGatewayAttachmentOutputWithContext(ctx context.Context) VpnGatewayAttachmentOutput {
	return o
}

func (o VpnGatewayAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[VpnGatewayAttachment] {
	return pulumix.Output[VpnGatewayAttachment]{
		OutputState: o.OutputState,
	}
}

// The ID of the VPC.
func (o VpnGatewayAttachmentOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[VpnGatewayAttachment](o, func(v VpnGatewayAttachment) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the Virtual Private Gateway.
func (o VpnGatewayAttachmentOutput) VpnGatewayId() pulumix.Output[string] {
	value := pulumix.Apply[VpnGatewayAttachment](o, func(v VpnGatewayAttachment) pulumix.Output[string] { return v.VpnGatewayId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpnGatewayAttachmentOutput{})
}
