// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type IndexingConfigurationThingGroupIndexingConfiguration struct {
	// A list of thing group fields to index. This list cannot contain any managed fields. See below.
	CustomFields []IndexingConfigurationThingGroupIndexingConfigurationCustomField `pulumi:"customFields"`
	// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
	ManagedFields []IndexingConfigurationThingGroupIndexingConfigurationManagedField `pulumi:"managedFields"`
	// Thing group indexing mode. Valid values: `OFF`, `ON`.
	ThingGroupIndexingMode string `pulumi:"thingGroupIndexingMode"`
}

type IndexingConfigurationThingGroupIndexingConfigurationArgs struct {
	// A list of thing group fields to index. This list cannot contain any managed fields. See below.
	CustomFields pulumix.Input[[]*IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs] `pulumi:"customFields"`
	// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
	ManagedFields pulumix.Input[[]*IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs] `pulumi:"managedFields"`
	// Thing group indexing mode. Valid values: `OFF`, `ON`.
	ThingGroupIndexingMode pulumix.Input[string] `pulumi:"thingGroupIndexingMode"`
}

func (IndexingConfigurationThingGroupIndexingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingGroupIndexingConfiguration)(nil)).Elem()
}

func (i IndexingConfigurationThingGroupIndexingConfigurationArgs) ToIndexingConfigurationThingGroupIndexingConfigurationOutput() IndexingConfigurationThingGroupIndexingConfigurationOutput {
	return i.ToIndexingConfigurationThingGroupIndexingConfigurationOutputWithContext(context.Background())
}

func (i IndexingConfigurationThingGroupIndexingConfigurationArgs) ToIndexingConfigurationThingGroupIndexingConfigurationOutputWithContext(ctx context.Context) IndexingConfigurationThingGroupIndexingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingConfigurationThingGroupIndexingConfigurationOutput)
}

func (i *IndexingConfigurationThingGroupIndexingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*IndexingConfigurationThingGroupIndexingConfigurationArgs] {
	return pulumix.Val(i)
}

type IndexingConfigurationThingGroupIndexingConfigurationOutput struct{ *pulumi.OutputState }

func (IndexingConfigurationThingGroupIndexingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingGroupIndexingConfiguration)(nil)).Elem()
}

func (o IndexingConfigurationThingGroupIndexingConfigurationOutput) ToIndexingConfigurationThingGroupIndexingConfigurationOutput() IndexingConfigurationThingGroupIndexingConfigurationOutput {
	return o
}

func (o IndexingConfigurationThingGroupIndexingConfigurationOutput) ToIndexingConfigurationThingGroupIndexingConfigurationOutputWithContext(ctx context.Context) IndexingConfigurationThingGroupIndexingConfigurationOutput {
	return o
}

func (o IndexingConfigurationThingGroupIndexingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[IndexingConfigurationThingGroupIndexingConfiguration] {
	return pulumix.Output[IndexingConfigurationThingGroupIndexingConfiguration]{
		OutputState: o.OutputState,
	}
}

// A list of thing group fields to index. This list cannot contain any managed fields. See below.
func (o IndexingConfigurationThingGroupIndexingConfigurationOutput) CustomFields() pulumix.GArrayOutput[IndexingConfigurationThingGroupIndexingConfigurationCustomField, IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput] {
	value := pulumix.Apply[IndexingConfigurationThingGroupIndexingConfiguration](o, func(v IndexingConfigurationThingGroupIndexingConfiguration) []IndexingConfigurationThingGroupIndexingConfigurationCustomField {
		return v.CustomFields
	})
	return pulumix.GArrayOutput[IndexingConfigurationThingGroupIndexingConfigurationCustomField, IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput]{OutputState: value.OutputState}
}

// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
func (o IndexingConfigurationThingGroupIndexingConfigurationOutput) ManagedFields() pulumix.GArrayOutput[IndexingConfigurationThingGroupIndexingConfigurationManagedField, IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput] {
	value := pulumix.Apply[IndexingConfigurationThingGroupIndexingConfiguration](o, func(v IndexingConfigurationThingGroupIndexingConfiguration) []IndexingConfigurationThingGroupIndexingConfigurationManagedField {
		return v.ManagedFields
	})
	return pulumix.GArrayOutput[IndexingConfigurationThingGroupIndexingConfigurationManagedField, IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput]{OutputState: value.OutputState}
}

// Thing group indexing mode. Valid values: `OFF`, `ON`.
func (o IndexingConfigurationThingGroupIndexingConfigurationOutput) ThingGroupIndexingMode() pulumix.Output[string] {
	return pulumix.Apply[IndexingConfigurationThingGroupIndexingConfiguration](o, func(v IndexingConfigurationThingGroupIndexingConfiguration) string { return v.ThingGroupIndexingMode })
}

type IndexingConfigurationThingGroupIndexingConfigurationCustomField struct {
	// The name of the field.
	Name *string `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type *string `pulumi:"type"`
}

type IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs struct {
	// The name of the field.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingGroupIndexingConfigurationCustomField)(nil)).Elem()
}

func (i IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs) ToIndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput() IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput {
	return i.ToIndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutputWithContext(context.Background())
}

func (i IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs) ToIndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput)
}

func (i *IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs) ToOutput(ctx context.Context) pulumix.Output[*IndexingConfigurationThingGroupIndexingConfigurationCustomFieldArgs] {
	return pulumix.Val(i)
}

type IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput struct{ *pulumi.OutputState }

func (IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingGroupIndexingConfigurationCustomField)(nil)).Elem()
}

func (o IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput) ToIndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput() IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput {
	return o
}

func (o IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput) ToIndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput {
	return o
}

func (o IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput) ToOutput(ctx context.Context) pulumix.Output[IndexingConfigurationThingGroupIndexingConfigurationCustomField] {
	return pulumix.Output[IndexingConfigurationThingGroupIndexingConfigurationCustomField]{
		OutputState: o.OutputState,
	}
}

// The name of the field.
func (o IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingGroupIndexingConfigurationCustomField](o, func(v IndexingConfigurationThingGroupIndexingConfigurationCustomField) *string { return v.Name })
}

// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
func (o IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingGroupIndexingConfigurationCustomField](o, func(v IndexingConfigurationThingGroupIndexingConfigurationCustomField) *string { return v.Type })
}

type IndexingConfigurationThingGroupIndexingConfigurationManagedField struct {
	// The name of the field.
	Name *string `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type *string `pulumi:"type"`
}

type IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs struct {
	// The name of the field.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingGroupIndexingConfigurationManagedField)(nil)).Elem()
}

func (i IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs) ToIndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput() IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput {
	return i.ToIndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutputWithContext(context.Background())
}

func (i IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs) ToIndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput)
}

func (i *IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs) ToOutput(ctx context.Context) pulumix.Output[*IndexingConfigurationThingGroupIndexingConfigurationManagedFieldArgs] {
	return pulumix.Val(i)
}

type IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput struct{ *pulumi.OutputState }

func (IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingGroupIndexingConfigurationManagedField)(nil)).Elem()
}

func (o IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput) ToIndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput() IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput {
	return o
}

func (o IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput) ToIndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput {
	return o
}

func (o IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput) ToOutput(ctx context.Context) pulumix.Output[IndexingConfigurationThingGroupIndexingConfigurationManagedField] {
	return pulumix.Output[IndexingConfigurationThingGroupIndexingConfigurationManagedField]{
		OutputState: o.OutputState,
	}
}

// The name of the field.
func (o IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingGroupIndexingConfigurationManagedField](o, func(v IndexingConfigurationThingGroupIndexingConfigurationManagedField) *string { return v.Name })
}

// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
func (o IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingGroupIndexingConfigurationManagedField](o, func(v IndexingConfigurationThingGroupIndexingConfigurationManagedField) *string { return v.Type })
}

type IndexingConfigurationThingIndexingConfiguration struct {
	// Contains custom field names and their data type. See below.
	CustomFields []IndexingConfigurationThingIndexingConfigurationCustomField `pulumi:"customFields"`
	// Device Defender indexing mode. Valid values: `VIOLATIONS`, `OFF`. Default: `OFF`.
	DeviceDefenderIndexingMode *string `pulumi:"deviceDefenderIndexingMode"`
	// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
	ManagedFields []IndexingConfigurationThingIndexingConfigurationManagedField `pulumi:"managedFields"`
	// [Named shadow](https://docs.aws.amazon.com/iot/latest/developerguide/iot-device-shadows.html) indexing mode. Valid values: `ON`, `OFF`. Default: `OFF`.
	NamedShadowIndexingMode *string `pulumi:"namedShadowIndexingMode"`
	// Thing connectivity indexing mode. Valid values: `STATUS`, `OFF`. Default: `OFF`.
	ThingConnectivityIndexingMode *string `pulumi:"thingConnectivityIndexingMode"`
	// Thing indexing mode. Valid values: `REGISTRY`, `REGISTRY_AND_SHADOW`, `OFF`.
	ThingIndexingMode string `pulumi:"thingIndexingMode"`
}

type IndexingConfigurationThingIndexingConfigurationArgs struct {
	// Contains custom field names and their data type. See below.
	CustomFields pulumix.Input[[]*IndexingConfigurationThingIndexingConfigurationCustomFieldArgs] `pulumi:"customFields"`
	// Device Defender indexing mode. Valid values: `VIOLATIONS`, `OFF`. Default: `OFF`.
	DeviceDefenderIndexingMode pulumix.Input[*string] `pulumi:"deviceDefenderIndexingMode"`
	// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
	ManagedFields pulumix.Input[[]*IndexingConfigurationThingIndexingConfigurationManagedFieldArgs] `pulumi:"managedFields"`
	// [Named shadow](https://docs.aws.amazon.com/iot/latest/developerguide/iot-device-shadows.html) indexing mode. Valid values: `ON`, `OFF`. Default: `OFF`.
	NamedShadowIndexingMode pulumix.Input[*string] `pulumi:"namedShadowIndexingMode"`
	// Thing connectivity indexing mode. Valid values: `STATUS`, `OFF`. Default: `OFF`.
	ThingConnectivityIndexingMode pulumix.Input[*string] `pulumi:"thingConnectivityIndexingMode"`
	// Thing indexing mode. Valid values: `REGISTRY`, `REGISTRY_AND_SHADOW`, `OFF`.
	ThingIndexingMode pulumix.Input[string] `pulumi:"thingIndexingMode"`
}

func (IndexingConfigurationThingIndexingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingIndexingConfiguration)(nil)).Elem()
}

func (i IndexingConfigurationThingIndexingConfigurationArgs) ToIndexingConfigurationThingIndexingConfigurationOutput() IndexingConfigurationThingIndexingConfigurationOutput {
	return i.ToIndexingConfigurationThingIndexingConfigurationOutputWithContext(context.Background())
}

func (i IndexingConfigurationThingIndexingConfigurationArgs) ToIndexingConfigurationThingIndexingConfigurationOutputWithContext(ctx context.Context) IndexingConfigurationThingIndexingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingConfigurationThingIndexingConfigurationOutput)
}

func (i *IndexingConfigurationThingIndexingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*IndexingConfigurationThingIndexingConfigurationArgs] {
	return pulumix.Val(i)
}

type IndexingConfigurationThingIndexingConfigurationOutput struct{ *pulumi.OutputState }

func (IndexingConfigurationThingIndexingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingIndexingConfiguration)(nil)).Elem()
}

func (o IndexingConfigurationThingIndexingConfigurationOutput) ToIndexingConfigurationThingIndexingConfigurationOutput() IndexingConfigurationThingIndexingConfigurationOutput {
	return o
}

func (o IndexingConfigurationThingIndexingConfigurationOutput) ToIndexingConfigurationThingIndexingConfigurationOutputWithContext(ctx context.Context) IndexingConfigurationThingIndexingConfigurationOutput {
	return o
}

func (o IndexingConfigurationThingIndexingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[IndexingConfigurationThingIndexingConfiguration] {
	return pulumix.Output[IndexingConfigurationThingIndexingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Contains custom field names and their data type. See below.
func (o IndexingConfigurationThingIndexingConfigurationOutput) CustomFields() pulumix.GArrayOutput[IndexingConfigurationThingIndexingConfigurationCustomField, IndexingConfigurationThingIndexingConfigurationCustomFieldOutput] {
	value := pulumix.Apply[IndexingConfigurationThingIndexingConfiguration](o, func(v IndexingConfigurationThingIndexingConfiguration) []IndexingConfigurationThingIndexingConfigurationCustomField {
		return v.CustomFields
	})
	return pulumix.GArrayOutput[IndexingConfigurationThingIndexingConfigurationCustomField, IndexingConfigurationThingIndexingConfigurationCustomFieldOutput]{OutputState: value.OutputState}
}

// Device Defender indexing mode. Valid values: `VIOLATIONS`, `OFF`. Default: `OFF`.
func (o IndexingConfigurationThingIndexingConfigurationOutput) DeviceDefenderIndexingMode() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfiguration](o, func(v IndexingConfigurationThingIndexingConfiguration) *string { return v.DeviceDefenderIndexingMode })
}

// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
func (o IndexingConfigurationThingIndexingConfigurationOutput) ManagedFields() pulumix.GArrayOutput[IndexingConfigurationThingIndexingConfigurationManagedField, IndexingConfigurationThingIndexingConfigurationManagedFieldOutput] {
	value := pulumix.Apply[IndexingConfigurationThingIndexingConfiguration](o, func(v IndexingConfigurationThingIndexingConfiguration) []IndexingConfigurationThingIndexingConfigurationManagedField {
		return v.ManagedFields
	})
	return pulumix.GArrayOutput[IndexingConfigurationThingIndexingConfigurationManagedField, IndexingConfigurationThingIndexingConfigurationManagedFieldOutput]{OutputState: value.OutputState}
}

// [Named shadow](https://docs.aws.amazon.com/iot/latest/developerguide/iot-device-shadows.html) indexing mode. Valid values: `ON`, `OFF`. Default: `OFF`.
func (o IndexingConfigurationThingIndexingConfigurationOutput) NamedShadowIndexingMode() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfiguration](o, func(v IndexingConfigurationThingIndexingConfiguration) *string { return v.NamedShadowIndexingMode })
}

// Thing connectivity indexing mode. Valid values: `STATUS`, `OFF`. Default: `OFF`.
func (o IndexingConfigurationThingIndexingConfigurationOutput) ThingConnectivityIndexingMode() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfiguration](o, func(v IndexingConfigurationThingIndexingConfiguration) *string {
		return v.ThingConnectivityIndexingMode
	})
}

// Thing indexing mode. Valid values: `REGISTRY`, `REGISTRY_AND_SHADOW`, `OFF`.
func (o IndexingConfigurationThingIndexingConfigurationOutput) ThingIndexingMode() pulumix.Output[string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfiguration](o, func(v IndexingConfigurationThingIndexingConfiguration) string { return v.ThingIndexingMode })
}

type IndexingConfigurationThingIndexingConfigurationCustomField struct {
	// The name of the field.
	Name *string `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type *string `pulumi:"type"`
}

type IndexingConfigurationThingIndexingConfigurationCustomFieldArgs struct {
	// The name of the field.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (IndexingConfigurationThingIndexingConfigurationCustomFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingIndexingConfigurationCustomField)(nil)).Elem()
}

func (i IndexingConfigurationThingIndexingConfigurationCustomFieldArgs) ToIndexingConfigurationThingIndexingConfigurationCustomFieldOutput() IndexingConfigurationThingIndexingConfigurationCustomFieldOutput {
	return i.ToIndexingConfigurationThingIndexingConfigurationCustomFieldOutputWithContext(context.Background())
}

func (i IndexingConfigurationThingIndexingConfigurationCustomFieldArgs) ToIndexingConfigurationThingIndexingConfigurationCustomFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingIndexingConfigurationCustomFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingConfigurationThingIndexingConfigurationCustomFieldOutput)
}

func (i *IndexingConfigurationThingIndexingConfigurationCustomFieldArgs) ToOutput(ctx context.Context) pulumix.Output[*IndexingConfigurationThingIndexingConfigurationCustomFieldArgs] {
	return pulumix.Val(i)
}

type IndexingConfigurationThingIndexingConfigurationCustomFieldOutput struct{ *pulumi.OutputState }

func (IndexingConfigurationThingIndexingConfigurationCustomFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingIndexingConfigurationCustomField)(nil)).Elem()
}

func (o IndexingConfigurationThingIndexingConfigurationCustomFieldOutput) ToIndexingConfigurationThingIndexingConfigurationCustomFieldOutput() IndexingConfigurationThingIndexingConfigurationCustomFieldOutput {
	return o
}

func (o IndexingConfigurationThingIndexingConfigurationCustomFieldOutput) ToIndexingConfigurationThingIndexingConfigurationCustomFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingIndexingConfigurationCustomFieldOutput {
	return o
}

func (o IndexingConfigurationThingIndexingConfigurationCustomFieldOutput) ToOutput(ctx context.Context) pulumix.Output[IndexingConfigurationThingIndexingConfigurationCustomField] {
	return pulumix.Output[IndexingConfigurationThingIndexingConfigurationCustomField]{
		OutputState: o.OutputState,
	}
}

// The name of the field.
func (o IndexingConfigurationThingIndexingConfigurationCustomFieldOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfigurationCustomField](o, func(v IndexingConfigurationThingIndexingConfigurationCustomField) *string { return v.Name })
}

// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
func (o IndexingConfigurationThingIndexingConfigurationCustomFieldOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfigurationCustomField](o, func(v IndexingConfigurationThingIndexingConfigurationCustomField) *string { return v.Type })
}

type IndexingConfigurationThingIndexingConfigurationManagedField struct {
	// The name of the field.
	Name *string `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type *string `pulumi:"type"`
}

type IndexingConfigurationThingIndexingConfigurationManagedFieldArgs struct {
	// The name of the field.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (IndexingConfigurationThingIndexingConfigurationManagedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingIndexingConfigurationManagedField)(nil)).Elem()
}

func (i IndexingConfigurationThingIndexingConfigurationManagedFieldArgs) ToIndexingConfigurationThingIndexingConfigurationManagedFieldOutput() IndexingConfigurationThingIndexingConfigurationManagedFieldOutput {
	return i.ToIndexingConfigurationThingIndexingConfigurationManagedFieldOutputWithContext(context.Background())
}

func (i IndexingConfigurationThingIndexingConfigurationManagedFieldArgs) ToIndexingConfigurationThingIndexingConfigurationManagedFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingIndexingConfigurationManagedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingConfigurationThingIndexingConfigurationManagedFieldOutput)
}

func (i *IndexingConfigurationThingIndexingConfigurationManagedFieldArgs) ToOutput(ctx context.Context) pulumix.Output[*IndexingConfigurationThingIndexingConfigurationManagedFieldArgs] {
	return pulumix.Val(i)
}

type IndexingConfigurationThingIndexingConfigurationManagedFieldOutput struct{ *pulumi.OutputState }

func (IndexingConfigurationThingIndexingConfigurationManagedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingConfigurationThingIndexingConfigurationManagedField)(nil)).Elem()
}

func (o IndexingConfigurationThingIndexingConfigurationManagedFieldOutput) ToIndexingConfigurationThingIndexingConfigurationManagedFieldOutput() IndexingConfigurationThingIndexingConfigurationManagedFieldOutput {
	return o
}

func (o IndexingConfigurationThingIndexingConfigurationManagedFieldOutput) ToIndexingConfigurationThingIndexingConfigurationManagedFieldOutputWithContext(ctx context.Context) IndexingConfigurationThingIndexingConfigurationManagedFieldOutput {
	return o
}

func (o IndexingConfigurationThingIndexingConfigurationManagedFieldOutput) ToOutput(ctx context.Context) pulumix.Output[IndexingConfigurationThingIndexingConfigurationManagedField] {
	return pulumix.Output[IndexingConfigurationThingIndexingConfigurationManagedField]{
		OutputState: o.OutputState,
	}
}

// The name of the field.
func (o IndexingConfigurationThingIndexingConfigurationManagedFieldOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfigurationManagedField](o, func(v IndexingConfigurationThingIndexingConfigurationManagedField) *string { return v.Name })
}

// The data type of the field. Valid values: `Number`, `String`, `Boolean`.
func (o IndexingConfigurationThingIndexingConfigurationManagedFieldOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[IndexingConfigurationThingIndexingConfigurationManagedField](o, func(v IndexingConfigurationThingIndexingConfigurationManagedField) *string { return v.Type })
}

type ProvisioningTemplatePreProvisioningHook struct {
	// The version of the payload that was sent to the target function. The only valid (and the default) payload version is `"2020-04-01"`.
	PayloadVersion *string `pulumi:"payloadVersion"`
	// The ARN of the target function.
	TargetArn string `pulumi:"targetArn"`
}

type ProvisioningTemplatePreProvisioningHookArgs struct {
	// The version of the payload that was sent to the target function. The only valid (and the default) payload version is `"2020-04-01"`.
	PayloadVersion pulumix.Input[*string] `pulumi:"payloadVersion"`
	// The ARN of the target function.
	TargetArn pulumix.Input[string] `pulumi:"targetArn"`
}

func (ProvisioningTemplatePreProvisioningHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningTemplatePreProvisioningHook)(nil)).Elem()
}

func (i ProvisioningTemplatePreProvisioningHookArgs) ToProvisioningTemplatePreProvisioningHookOutput() ProvisioningTemplatePreProvisioningHookOutput {
	return i.ToProvisioningTemplatePreProvisioningHookOutputWithContext(context.Background())
}

func (i ProvisioningTemplatePreProvisioningHookArgs) ToProvisioningTemplatePreProvisioningHookOutputWithContext(ctx context.Context) ProvisioningTemplatePreProvisioningHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningTemplatePreProvisioningHookOutput)
}

func (i *ProvisioningTemplatePreProvisioningHookArgs) ToOutput(ctx context.Context) pulumix.Output[*ProvisioningTemplatePreProvisioningHookArgs] {
	return pulumix.Val(i)
}

type ProvisioningTemplatePreProvisioningHookOutput struct{ *pulumi.OutputState }

func (ProvisioningTemplatePreProvisioningHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningTemplatePreProvisioningHook)(nil)).Elem()
}

func (o ProvisioningTemplatePreProvisioningHookOutput) ToProvisioningTemplatePreProvisioningHookOutput() ProvisioningTemplatePreProvisioningHookOutput {
	return o
}

func (o ProvisioningTemplatePreProvisioningHookOutput) ToProvisioningTemplatePreProvisioningHookOutputWithContext(ctx context.Context) ProvisioningTemplatePreProvisioningHookOutput {
	return o
}

func (o ProvisioningTemplatePreProvisioningHookOutput) ToOutput(ctx context.Context) pulumix.Output[ProvisioningTemplatePreProvisioningHook] {
	return pulumix.Output[ProvisioningTemplatePreProvisioningHook]{
		OutputState: o.OutputState,
	}
}

// The version of the payload that was sent to the target function. The only valid (and the default) payload version is `"2020-04-01"`.
func (o ProvisioningTemplatePreProvisioningHookOutput) PayloadVersion() pulumix.Output[*string] {
	return pulumix.Apply[ProvisioningTemplatePreProvisioningHook](o, func(v ProvisioningTemplatePreProvisioningHook) *string { return v.PayloadVersion })
}

// The ARN of the target function.
func (o ProvisioningTemplatePreProvisioningHookOutput) TargetArn() pulumix.Output[string] {
	return pulumix.Apply[ProvisioningTemplatePreProvisioningHook](o, func(v ProvisioningTemplatePreProvisioningHook) string { return v.TargetArn })
}

type ThingGroupMetadata struct {
	CreationDate *string `pulumi:"creationDate"`
	// The name of the parent Thing Group.
	ParentGroupName    *string                               `pulumi:"parentGroupName"`
	RootToParentGroups []ThingGroupMetadataRootToParentGroup `pulumi:"rootToParentGroups"`
}

type ThingGroupMetadataArgs struct {
	CreationDate pulumix.Input[*string] `pulumi:"creationDate"`
	// The name of the parent Thing Group.
	ParentGroupName    pulumix.Input[*string]                                    `pulumi:"parentGroupName"`
	RootToParentGroups pulumix.Input[[]*ThingGroupMetadataRootToParentGroupArgs] `pulumi:"rootToParentGroups"`
}

func (ThingGroupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupMetadata)(nil)).Elem()
}

func (i ThingGroupMetadataArgs) ToThingGroupMetadataOutput() ThingGroupMetadataOutput {
	return i.ToThingGroupMetadataOutputWithContext(context.Background())
}

func (i ThingGroupMetadataArgs) ToThingGroupMetadataOutputWithContext(ctx context.Context) ThingGroupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThingGroupMetadataOutput)
}

func (i *ThingGroupMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[*ThingGroupMetadataArgs] {
	return pulumix.Val(i)
}

type ThingGroupMetadataOutput struct{ *pulumi.OutputState }

func (ThingGroupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupMetadata)(nil)).Elem()
}

func (o ThingGroupMetadataOutput) ToThingGroupMetadataOutput() ThingGroupMetadataOutput {
	return o
}

func (o ThingGroupMetadataOutput) ToThingGroupMetadataOutputWithContext(ctx context.Context) ThingGroupMetadataOutput {
	return o
}

func (o ThingGroupMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[ThingGroupMetadata] {
	return pulumix.Output[ThingGroupMetadata]{
		OutputState: o.OutputState,
	}
}

func (o ThingGroupMetadataOutput) CreationDate() pulumix.Output[*string] {
	return pulumix.Apply[ThingGroupMetadata](o, func(v ThingGroupMetadata) *string { return v.CreationDate })
}

// The name of the parent Thing Group.
func (o ThingGroupMetadataOutput) ParentGroupName() pulumix.Output[*string] {
	return pulumix.Apply[ThingGroupMetadata](o, func(v ThingGroupMetadata) *string { return v.ParentGroupName })
}

func (o ThingGroupMetadataOutput) RootToParentGroups() pulumix.GArrayOutput[ThingGroupMetadataRootToParentGroup, ThingGroupMetadataRootToParentGroupOutput] {
	value := pulumix.Apply[ThingGroupMetadata](o, func(v ThingGroupMetadata) []ThingGroupMetadataRootToParentGroup { return v.RootToParentGroups })
	return pulumix.GArrayOutput[ThingGroupMetadataRootToParentGroup, ThingGroupMetadataRootToParentGroupOutput]{OutputState: value.OutputState}
}

type ThingGroupMetadataRootToParentGroup struct {
	GroupArn  *string `pulumi:"groupArn"`
	GroupName *string `pulumi:"groupName"`
}

type ThingGroupMetadataRootToParentGroupArgs struct {
	GroupArn  pulumix.Input[*string] `pulumi:"groupArn"`
	GroupName pulumix.Input[*string] `pulumi:"groupName"`
}

func (ThingGroupMetadataRootToParentGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupMetadataRootToParentGroup)(nil)).Elem()
}

func (i ThingGroupMetadataRootToParentGroupArgs) ToThingGroupMetadataRootToParentGroupOutput() ThingGroupMetadataRootToParentGroupOutput {
	return i.ToThingGroupMetadataRootToParentGroupOutputWithContext(context.Background())
}

func (i ThingGroupMetadataRootToParentGroupArgs) ToThingGroupMetadataRootToParentGroupOutputWithContext(ctx context.Context) ThingGroupMetadataRootToParentGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThingGroupMetadataRootToParentGroupOutput)
}

func (i *ThingGroupMetadataRootToParentGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*ThingGroupMetadataRootToParentGroupArgs] {
	return pulumix.Val(i)
}

type ThingGroupMetadataRootToParentGroupOutput struct{ *pulumi.OutputState }

func (ThingGroupMetadataRootToParentGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupMetadataRootToParentGroup)(nil)).Elem()
}

func (o ThingGroupMetadataRootToParentGroupOutput) ToThingGroupMetadataRootToParentGroupOutput() ThingGroupMetadataRootToParentGroupOutput {
	return o
}

func (o ThingGroupMetadataRootToParentGroupOutput) ToThingGroupMetadataRootToParentGroupOutputWithContext(ctx context.Context) ThingGroupMetadataRootToParentGroupOutput {
	return o
}

func (o ThingGroupMetadataRootToParentGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ThingGroupMetadataRootToParentGroup] {
	return pulumix.Output[ThingGroupMetadataRootToParentGroup]{
		OutputState: o.OutputState,
	}
}

func (o ThingGroupMetadataRootToParentGroupOutput) GroupArn() pulumix.Output[*string] {
	return pulumix.Apply[ThingGroupMetadataRootToParentGroup](o, func(v ThingGroupMetadataRootToParentGroup) *string { return v.GroupArn })
}

func (o ThingGroupMetadataRootToParentGroupOutput) GroupName() pulumix.Output[*string] {
	return pulumix.Apply[ThingGroupMetadataRootToParentGroup](o, func(v ThingGroupMetadataRootToParentGroup) *string { return v.GroupName })
}

type ThingGroupProperties struct {
	// The Thing Group attributes. Defined below.
	AttributePayload *ThingGroupPropertiesAttributePayload `pulumi:"attributePayload"`
	// A description of the Thing Group.
	Description *string `pulumi:"description"`
}

type ThingGroupPropertiesArgs struct {
	// The Thing Group attributes. Defined below.
	AttributePayload pulumix.Input[*ThingGroupPropertiesAttributePayloadArgs] `pulumi:"attributePayload"`
	// A description of the Thing Group.
	Description pulumix.Input[*string] `pulumi:"description"`
}

func (ThingGroupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupProperties)(nil)).Elem()
}

func (i ThingGroupPropertiesArgs) ToThingGroupPropertiesOutput() ThingGroupPropertiesOutput {
	return i.ToThingGroupPropertiesOutputWithContext(context.Background())
}

func (i ThingGroupPropertiesArgs) ToThingGroupPropertiesOutputWithContext(ctx context.Context) ThingGroupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThingGroupPropertiesOutput)
}

func (i *ThingGroupPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*ThingGroupPropertiesArgs] {
	return pulumix.Val(i)
}

type ThingGroupPropertiesOutput struct{ *pulumi.OutputState }

func (ThingGroupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupProperties)(nil)).Elem()
}

func (o ThingGroupPropertiesOutput) ToThingGroupPropertiesOutput() ThingGroupPropertiesOutput {
	return o
}

func (o ThingGroupPropertiesOutput) ToThingGroupPropertiesOutputWithContext(ctx context.Context) ThingGroupPropertiesOutput {
	return o
}

func (o ThingGroupPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ThingGroupProperties] {
	return pulumix.Output[ThingGroupProperties]{
		OutputState: o.OutputState,
	}
}

// The Thing Group attributes. Defined below.
func (o ThingGroupPropertiesOutput) AttributePayload() pulumix.GPtrOutput[ThingGroupPropertiesAttributePayload, ThingGroupPropertiesAttributePayloadOutput] {
	value := pulumix.Apply[ThingGroupProperties](o, func(v ThingGroupProperties) *ThingGroupPropertiesAttributePayload { return v.AttributePayload })
	return pulumix.GPtrOutput[ThingGroupPropertiesAttributePayload, ThingGroupPropertiesAttributePayloadOutput]{OutputState: value.OutputState}
}

// A description of the Thing Group.
func (o ThingGroupPropertiesOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ThingGroupProperties](o, func(v ThingGroupProperties) *string { return v.Description })
}

type ThingGroupPropertiesAttributePayload struct {
	// Key-value map.
	Attributes map[string]string `pulumi:"attributes"`
}

type ThingGroupPropertiesAttributePayloadArgs struct {
	// Key-value map.
	Attributes pulumix.Input[map[string]string] `pulumi:"attributes"`
}

func (ThingGroupPropertiesAttributePayloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupPropertiesAttributePayload)(nil)).Elem()
}

func (i ThingGroupPropertiesAttributePayloadArgs) ToThingGroupPropertiesAttributePayloadOutput() ThingGroupPropertiesAttributePayloadOutput {
	return i.ToThingGroupPropertiesAttributePayloadOutputWithContext(context.Background())
}

func (i ThingGroupPropertiesAttributePayloadArgs) ToThingGroupPropertiesAttributePayloadOutputWithContext(ctx context.Context) ThingGroupPropertiesAttributePayloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThingGroupPropertiesAttributePayloadOutput)
}

func (i *ThingGroupPropertiesAttributePayloadArgs) ToOutput(ctx context.Context) pulumix.Output[*ThingGroupPropertiesAttributePayloadArgs] {
	return pulumix.Val(i)
}

type ThingGroupPropertiesAttributePayloadOutput struct{ *pulumi.OutputState }

func (ThingGroupPropertiesAttributePayloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingGroupPropertiesAttributePayload)(nil)).Elem()
}

func (o ThingGroupPropertiesAttributePayloadOutput) ToThingGroupPropertiesAttributePayloadOutput() ThingGroupPropertiesAttributePayloadOutput {
	return o
}

func (o ThingGroupPropertiesAttributePayloadOutput) ToThingGroupPropertiesAttributePayloadOutputWithContext(ctx context.Context) ThingGroupPropertiesAttributePayloadOutput {
	return o
}

func (o ThingGroupPropertiesAttributePayloadOutput) ToOutput(ctx context.Context) pulumix.Output[ThingGroupPropertiesAttributePayload] {
	return pulumix.Output[ThingGroupPropertiesAttributePayload]{
		OutputState: o.OutputState,
	}
}

// Key-value map.
func (o ThingGroupPropertiesAttributePayloadOutput) Attributes() pulumix.MapOutput[string] {
	value := pulumix.Apply[ThingGroupPropertiesAttributePayload](o, func(v ThingGroupPropertiesAttributePayload) map[string]string { return v.Attributes })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type ThingTypeProperties struct {
	// The description of the thing type.
	Description *string `pulumi:"description"`
	// A list of searchable thing attribute names.
	SearchableAttributes []string `pulumi:"searchableAttributes"`
}

type ThingTypePropertiesArgs struct {
	// The description of the thing type.
	Description pulumix.Input[*string] `pulumi:"description"`
	// A list of searchable thing attribute names.
	SearchableAttributes pulumix.Input[[]string] `pulumi:"searchableAttributes"`
}

func (ThingTypePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingTypeProperties)(nil)).Elem()
}

func (i ThingTypePropertiesArgs) ToThingTypePropertiesOutput() ThingTypePropertiesOutput {
	return i.ToThingTypePropertiesOutputWithContext(context.Background())
}

func (i ThingTypePropertiesArgs) ToThingTypePropertiesOutputWithContext(ctx context.Context) ThingTypePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThingTypePropertiesOutput)
}

func (i *ThingTypePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*ThingTypePropertiesArgs] {
	return pulumix.Val(i)
}

type ThingTypePropertiesOutput struct{ *pulumi.OutputState }

func (ThingTypePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThingTypeProperties)(nil)).Elem()
}

func (o ThingTypePropertiesOutput) ToThingTypePropertiesOutput() ThingTypePropertiesOutput {
	return o
}

func (o ThingTypePropertiesOutput) ToThingTypePropertiesOutputWithContext(ctx context.Context) ThingTypePropertiesOutput {
	return o
}

func (o ThingTypePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ThingTypeProperties] {
	return pulumix.Output[ThingTypeProperties]{
		OutputState: o.OutputState,
	}
}

// The description of the thing type.
func (o ThingTypePropertiesOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ThingTypeProperties](o, func(v ThingTypeProperties) *string { return v.Description })
}

// A list of searchable thing attribute names.
func (o ThingTypePropertiesOutput) SearchableAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ThingTypeProperties](o, func(v ThingTypeProperties) []string { return v.SearchableAttributes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type TopicRuleCloudwatchAlarm struct {
	// The CloudWatch alarm name.
	AlarmName string `pulumi:"alarmName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
	// The reason for the alarm change.
	StateReason string `pulumi:"stateReason"`
	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	StateValue string `pulumi:"stateValue"`
}

type TopicRuleCloudwatchAlarmArgs struct {
	// The CloudWatch alarm name.
	AlarmName pulumix.Input[string] `pulumi:"alarmName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The reason for the alarm change.
	StateReason pulumix.Input[string] `pulumi:"stateReason"`
	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	StateValue pulumix.Input[string] `pulumi:"stateValue"`
}

func (TopicRuleCloudwatchAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleCloudwatchAlarm)(nil)).Elem()
}

func (i TopicRuleCloudwatchAlarmArgs) ToTopicRuleCloudwatchAlarmOutput() TopicRuleCloudwatchAlarmOutput {
	return i.ToTopicRuleCloudwatchAlarmOutputWithContext(context.Background())
}

func (i TopicRuleCloudwatchAlarmArgs) ToTopicRuleCloudwatchAlarmOutputWithContext(ctx context.Context) TopicRuleCloudwatchAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleCloudwatchAlarmOutput)
}

func (i *TopicRuleCloudwatchAlarmArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleCloudwatchAlarmArgs] {
	return pulumix.Val(i)
}

type TopicRuleCloudwatchAlarmOutput struct{ *pulumi.OutputState }

func (TopicRuleCloudwatchAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleCloudwatchAlarm)(nil)).Elem()
}

func (o TopicRuleCloudwatchAlarmOutput) ToTopicRuleCloudwatchAlarmOutput() TopicRuleCloudwatchAlarmOutput {
	return o
}

func (o TopicRuleCloudwatchAlarmOutput) ToTopicRuleCloudwatchAlarmOutputWithContext(ctx context.Context) TopicRuleCloudwatchAlarmOutput {
	return o
}

func (o TopicRuleCloudwatchAlarmOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleCloudwatchAlarm] {
	return pulumix.Output[TopicRuleCloudwatchAlarm]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch alarm name.
func (o TopicRuleCloudwatchAlarmOutput) AlarmName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchAlarm](o, func(v TopicRuleCloudwatchAlarm) string { return v.AlarmName })
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleCloudwatchAlarmOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchAlarm](o, func(v TopicRuleCloudwatchAlarm) string { return v.RoleArn })
}

// The reason for the alarm change.
func (o TopicRuleCloudwatchAlarmOutput) StateReason() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchAlarm](o, func(v TopicRuleCloudwatchAlarm) string { return v.StateReason })
}

// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
func (o TopicRuleCloudwatchAlarmOutput) StateValue() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchAlarm](o, func(v TopicRuleCloudwatchAlarm) string { return v.StateValue })
}

type TopicRuleCloudwatchLog struct {
	// The CloudWatch log group name.
	LogGroupName string `pulumi:"logGroupName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleCloudwatchLogArgs struct {
	// The CloudWatch log group name.
	LogGroupName pulumix.Input[string] `pulumi:"logGroupName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleCloudwatchLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleCloudwatchLog)(nil)).Elem()
}

func (i TopicRuleCloudwatchLogArgs) ToTopicRuleCloudwatchLogOutput() TopicRuleCloudwatchLogOutput {
	return i.ToTopicRuleCloudwatchLogOutputWithContext(context.Background())
}

func (i TopicRuleCloudwatchLogArgs) ToTopicRuleCloudwatchLogOutputWithContext(ctx context.Context) TopicRuleCloudwatchLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleCloudwatchLogOutput)
}

func (i *TopicRuleCloudwatchLogArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleCloudwatchLogArgs] {
	return pulumix.Val(i)
}

type TopicRuleCloudwatchLogOutput struct{ *pulumi.OutputState }

func (TopicRuleCloudwatchLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleCloudwatchLog)(nil)).Elem()
}

func (o TopicRuleCloudwatchLogOutput) ToTopicRuleCloudwatchLogOutput() TopicRuleCloudwatchLogOutput {
	return o
}

func (o TopicRuleCloudwatchLogOutput) ToTopicRuleCloudwatchLogOutputWithContext(ctx context.Context) TopicRuleCloudwatchLogOutput {
	return o
}

func (o TopicRuleCloudwatchLogOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleCloudwatchLog] {
	return pulumix.Output[TopicRuleCloudwatchLog]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch log group name.
func (o TopicRuleCloudwatchLogOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchLog](o, func(v TopicRuleCloudwatchLog) string { return v.LogGroupName })
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleCloudwatchLogOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchLog](o, func(v TopicRuleCloudwatchLog) string { return v.RoleArn })
}

type TopicRuleCloudwatchMetric struct {
	// The CloudWatch metric name.
	MetricName string `pulumi:"metricName"`
	// The CloudWatch metric namespace name.
	MetricNamespace string `pulumi:"metricNamespace"`
	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	MetricTimestamp *string `pulumi:"metricTimestamp"`
	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	MetricUnit string `pulumi:"metricUnit"`
	// The CloudWatch metric value.
	MetricValue string `pulumi:"metricValue"`
	// The IAM role ARN that allows access to the CloudWatch metric.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleCloudwatchMetricArgs struct {
	// The CloudWatch metric name.
	MetricName pulumix.Input[string] `pulumi:"metricName"`
	// The CloudWatch metric namespace name.
	MetricNamespace pulumix.Input[string] `pulumi:"metricNamespace"`
	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	MetricTimestamp pulumix.Input[*string] `pulumi:"metricTimestamp"`
	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	MetricUnit pulumix.Input[string] `pulumi:"metricUnit"`
	// The CloudWatch metric value.
	MetricValue pulumix.Input[string] `pulumi:"metricValue"`
	// The IAM role ARN that allows access to the CloudWatch metric.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleCloudwatchMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleCloudwatchMetric)(nil)).Elem()
}

func (i TopicRuleCloudwatchMetricArgs) ToTopicRuleCloudwatchMetricOutput() TopicRuleCloudwatchMetricOutput {
	return i.ToTopicRuleCloudwatchMetricOutputWithContext(context.Background())
}

func (i TopicRuleCloudwatchMetricArgs) ToTopicRuleCloudwatchMetricOutputWithContext(ctx context.Context) TopicRuleCloudwatchMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleCloudwatchMetricOutput)
}

func (i *TopicRuleCloudwatchMetricArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleCloudwatchMetricArgs] {
	return pulumix.Val(i)
}

type TopicRuleCloudwatchMetricOutput struct{ *pulumi.OutputState }

func (TopicRuleCloudwatchMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleCloudwatchMetric)(nil)).Elem()
}

func (o TopicRuleCloudwatchMetricOutput) ToTopicRuleCloudwatchMetricOutput() TopicRuleCloudwatchMetricOutput {
	return o
}

func (o TopicRuleCloudwatchMetricOutput) ToTopicRuleCloudwatchMetricOutputWithContext(ctx context.Context) TopicRuleCloudwatchMetricOutput {
	return o
}

func (o TopicRuleCloudwatchMetricOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleCloudwatchMetric] {
	return pulumix.Output[TopicRuleCloudwatchMetric]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch metric name.
func (o TopicRuleCloudwatchMetricOutput) MetricName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchMetric](o, func(v TopicRuleCloudwatchMetric) string { return v.MetricName })
}

// The CloudWatch metric namespace name.
func (o TopicRuleCloudwatchMetricOutput) MetricNamespace() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchMetric](o, func(v TopicRuleCloudwatchMetric) string { return v.MetricNamespace })
}

// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
func (o TopicRuleCloudwatchMetricOutput) MetricTimestamp() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleCloudwatchMetric](o, func(v TopicRuleCloudwatchMetric) *string { return v.MetricTimestamp })
}

// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
func (o TopicRuleCloudwatchMetricOutput) MetricUnit() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchMetric](o, func(v TopicRuleCloudwatchMetric) string { return v.MetricUnit })
}

// The CloudWatch metric value.
func (o TopicRuleCloudwatchMetricOutput) MetricValue() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchMetric](o, func(v TopicRuleCloudwatchMetric) string { return v.MetricValue })
}

// The IAM role ARN that allows access to the CloudWatch metric.
func (o TopicRuleCloudwatchMetricOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleCloudwatchMetric](o, func(v TopicRuleCloudwatchMetric) string { return v.RoleArn })
}

type TopicRuleDestinationVpcConfiguration struct {
	// The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).
	RoleArn string `pulumi:"roleArn"`
	// The security groups of the VPC destination.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnet IDs of the VPC destination.
	SubnetIds []string `pulumi:"subnetIds"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

type TopicRuleDestinationVpcConfigurationArgs struct {
	// The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The security groups of the VPC destination.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// The subnet IDs of the VPC destination.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The ID of the VPC.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (TopicRuleDestinationVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDestinationVpcConfiguration)(nil)).Elem()
}

func (i TopicRuleDestinationVpcConfigurationArgs) ToTopicRuleDestinationVpcConfigurationOutput() TopicRuleDestinationVpcConfigurationOutput {
	return i.ToTopicRuleDestinationVpcConfigurationOutputWithContext(context.Background())
}

func (i TopicRuleDestinationVpcConfigurationArgs) ToTopicRuleDestinationVpcConfigurationOutputWithContext(ctx context.Context) TopicRuleDestinationVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleDestinationVpcConfigurationOutput)
}

func (i *TopicRuleDestinationVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleDestinationVpcConfigurationArgs] {
	return pulumix.Val(i)
}

type TopicRuleDestinationVpcConfigurationOutput struct{ *pulumi.OutputState }

func (TopicRuleDestinationVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDestinationVpcConfiguration)(nil)).Elem()
}

func (o TopicRuleDestinationVpcConfigurationOutput) ToTopicRuleDestinationVpcConfigurationOutput() TopicRuleDestinationVpcConfigurationOutput {
	return o
}

func (o TopicRuleDestinationVpcConfigurationOutput) ToTopicRuleDestinationVpcConfigurationOutputWithContext(ctx context.Context) TopicRuleDestinationVpcConfigurationOutput {
	return o
}

func (o TopicRuleDestinationVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleDestinationVpcConfiguration] {
	return pulumix.Output[TopicRuleDestinationVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).
func (o TopicRuleDestinationVpcConfigurationOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDestinationVpcConfiguration](o, func(v TopicRuleDestinationVpcConfiguration) string { return v.RoleArn })
}

// The security groups of the VPC destination.
func (o TopicRuleDestinationVpcConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TopicRuleDestinationVpcConfiguration](o, func(v TopicRuleDestinationVpcConfiguration) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The subnet IDs of the VPC destination.
func (o TopicRuleDestinationVpcConfigurationOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TopicRuleDestinationVpcConfiguration](o, func(v TopicRuleDestinationVpcConfiguration) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The ID of the VPC.
func (o TopicRuleDestinationVpcConfigurationOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDestinationVpcConfiguration](o, func(v TopicRuleDestinationVpcConfiguration) string { return v.VpcId })
}

type TopicRuleDynamodb struct {
	// The hash key name.
	HashKeyField string `pulumi:"hashKeyField"`
	// The hash key type. Valid values are "STRING" or "NUMBER".
	HashKeyType *string `pulumi:"hashKeyType"`
	// The hash key value.
	HashKeyValue string `pulumi:"hashKeyValue"`
	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	Operation *string `pulumi:"operation"`
	// The action payload.
	PayloadField *string `pulumi:"payloadField"`
	// The range key name.
	RangeKeyField *string `pulumi:"rangeKeyField"`
	// The range key type. Valid values are "STRING" or "NUMBER".
	RangeKeyType *string `pulumi:"rangeKeyType"`
	// The range key value.
	RangeKeyValue *string `pulumi:"rangeKeyValue"`
	// The ARN of the IAM role that grants access to the DynamoDB table.
	RoleArn string `pulumi:"roleArn"`
	// The name of the DynamoDB table.
	TableName string `pulumi:"tableName"`
}

type TopicRuleDynamodbArgs struct {
	// The hash key name.
	HashKeyField pulumix.Input[string] `pulumi:"hashKeyField"`
	// The hash key type. Valid values are "STRING" or "NUMBER".
	HashKeyType pulumix.Input[*string] `pulumi:"hashKeyType"`
	// The hash key value.
	HashKeyValue pulumix.Input[string] `pulumi:"hashKeyValue"`
	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	Operation pulumix.Input[*string] `pulumi:"operation"`
	// The action payload.
	PayloadField pulumix.Input[*string] `pulumi:"payloadField"`
	// The range key name.
	RangeKeyField pulumix.Input[*string] `pulumi:"rangeKeyField"`
	// The range key type. Valid values are "STRING" or "NUMBER".
	RangeKeyType pulumix.Input[*string] `pulumi:"rangeKeyType"`
	// The range key value.
	RangeKeyValue pulumix.Input[*string] `pulumi:"rangeKeyValue"`
	// The ARN of the IAM role that grants access to the DynamoDB table.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the DynamoDB table.
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (TopicRuleDynamodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDynamodb)(nil)).Elem()
}

func (i TopicRuleDynamodbArgs) ToTopicRuleDynamodbOutput() TopicRuleDynamodbOutput {
	return i.ToTopicRuleDynamodbOutputWithContext(context.Background())
}

func (i TopicRuleDynamodbArgs) ToTopicRuleDynamodbOutputWithContext(ctx context.Context) TopicRuleDynamodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleDynamodbOutput)
}

func (i *TopicRuleDynamodbArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleDynamodbArgs] {
	return pulumix.Val(i)
}

type TopicRuleDynamodbOutput struct{ *pulumi.OutputState }

func (TopicRuleDynamodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDynamodb)(nil)).Elem()
}

func (o TopicRuleDynamodbOutput) ToTopicRuleDynamodbOutput() TopicRuleDynamodbOutput {
	return o
}

func (o TopicRuleDynamodbOutput) ToTopicRuleDynamodbOutputWithContext(ctx context.Context) TopicRuleDynamodbOutput {
	return o
}

func (o TopicRuleDynamodbOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleDynamodb] {
	return pulumix.Output[TopicRuleDynamodb]{
		OutputState: o.OutputState,
	}
}

// The hash key name.
func (o TopicRuleDynamodbOutput) HashKeyField() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) string { return v.HashKeyField })
}

// The hash key type. Valid values are "STRING" or "NUMBER".
func (o TopicRuleDynamodbOutput) HashKeyType() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) *string { return v.HashKeyType })
}

// The hash key value.
func (o TopicRuleDynamodbOutput) HashKeyValue() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) string { return v.HashKeyValue })
}

// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
func (o TopicRuleDynamodbOutput) Operation() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) *string { return v.Operation })
}

// The action payload.
func (o TopicRuleDynamodbOutput) PayloadField() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) *string { return v.PayloadField })
}

// The range key name.
func (o TopicRuleDynamodbOutput) RangeKeyField() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) *string { return v.RangeKeyField })
}

// The range key type. Valid values are "STRING" or "NUMBER".
func (o TopicRuleDynamodbOutput) RangeKeyType() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) *string { return v.RangeKeyType })
}

// The range key value.
func (o TopicRuleDynamodbOutput) RangeKeyValue() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) *string { return v.RangeKeyValue })
}

// The ARN of the IAM role that grants access to the DynamoDB table.
func (o TopicRuleDynamodbOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) string { return v.RoleArn })
}

// The name of the DynamoDB table.
func (o TopicRuleDynamodbOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDynamodb](o, func(v TopicRuleDynamodb) string { return v.TableName })
}

type TopicRuleDynamodbv2 struct {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	PutItem *TopicRuleDynamodbv2PutItem `pulumi:"putItem"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleDynamodbv2Args struct {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	PutItem pulumix.Input[*TopicRuleDynamodbv2PutItemArgs] `pulumi:"putItem"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleDynamodbv2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDynamodbv2)(nil)).Elem()
}

func (i TopicRuleDynamodbv2Args) ToTopicRuleDynamodbv2Output() TopicRuleDynamodbv2Output {
	return i.ToTopicRuleDynamodbv2OutputWithContext(context.Background())
}

func (i TopicRuleDynamodbv2Args) ToTopicRuleDynamodbv2OutputWithContext(ctx context.Context) TopicRuleDynamodbv2Output {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleDynamodbv2Output)
}

func (i *TopicRuleDynamodbv2Args) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleDynamodbv2Args] {
	return pulumix.Val(i)
}

type TopicRuleDynamodbv2Output struct{ *pulumi.OutputState }

func (TopicRuleDynamodbv2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDynamodbv2)(nil)).Elem()
}

func (o TopicRuleDynamodbv2Output) ToTopicRuleDynamodbv2Output() TopicRuleDynamodbv2Output {
	return o
}

func (o TopicRuleDynamodbv2Output) ToTopicRuleDynamodbv2OutputWithContext(ctx context.Context) TopicRuleDynamodbv2Output {
	return o
}

func (o TopicRuleDynamodbv2Output) ToOutput(ctx context.Context) pulumix.Output[TopicRuleDynamodbv2] {
	return pulumix.Output[TopicRuleDynamodbv2]{
		OutputState: o.OutputState,
	}
}

// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
func (o TopicRuleDynamodbv2Output) PutItem() pulumix.GPtrOutput[TopicRuleDynamodbv2PutItem, TopicRuleDynamodbv2PutItemOutput] {
	value := pulumix.Apply[TopicRuleDynamodbv2](o, func(v TopicRuleDynamodbv2) *TopicRuleDynamodbv2PutItem { return v.PutItem })
	return pulumix.GPtrOutput[TopicRuleDynamodbv2PutItem, TopicRuleDynamodbv2PutItemOutput]{OutputState: value.OutputState}
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleDynamodbv2Output) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDynamodbv2](o, func(v TopicRuleDynamodbv2) string { return v.RoleArn })
}

type TopicRuleDynamodbv2PutItem struct {
	// The name of the DynamoDB table.
	//
	// The `dynamodbv2` object takes the following arguments:
	TableName string `pulumi:"tableName"`
}

type TopicRuleDynamodbv2PutItemArgs struct {
	// The name of the DynamoDB table.
	//
	// The `dynamodbv2` object takes the following arguments:
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (TopicRuleDynamodbv2PutItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDynamodbv2PutItem)(nil)).Elem()
}

func (i TopicRuleDynamodbv2PutItemArgs) ToTopicRuleDynamodbv2PutItemOutput() TopicRuleDynamodbv2PutItemOutput {
	return i.ToTopicRuleDynamodbv2PutItemOutputWithContext(context.Background())
}

func (i TopicRuleDynamodbv2PutItemArgs) ToTopicRuleDynamodbv2PutItemOutputWithContext(ctx context.Context) TopicRuleDynamodbv2PutItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleDynamodbv2PutItemOutput)
}

func (i *TopicRuleDynamodbv2PutItemArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleDynamodbv2PutItemArgs] {
	return pulumix.Val(i)
}

type TopicRuleDynamodbv2PutItemOutput struct{ *pulumi.OutputState }

func (TopicRuleDynamodbv2PutItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleDynamodbv2PutItem)(nil)).Elem()
}

func (o TopicRuleDynamodbv2PutItemOutput) ToTopicRuleDynamodbv2PutItemOutput() TopicRuleDynamodbv2PutItemOutput {
	return o
}

func (o TopicRuleDynamodbv2PutItemOutput) ToTopicRuleDynamodbv2PutItemOutputWithContext(ctx context.Context) TopicRuleDynamodbv2PutItemOutput {
	return o
}

func (o TopicRuleDynamodbv2PutItemOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleDynamodbv2PutItem] {
	return pulumix.Output[TopicRuleDynamodbv2PutItem]{
		OutputState: o.OutputState,
	}
}

// The name of the DynamoDB table.
//
// The `dynamodbv2` object takes the following arguments:
func (o TopicRuleDynamodbv2PutItemOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleDynamodbv2PutItem](o, func(v TopicRuleDynamodbv2PutItem) string { return v.TableName })
}

type TopicRuleElasticsearch struct {
	// The endpoint of your Elasticsearch domain.
	Endpoint string `pulumi:"endpoint"`
	// The unique identifier for the document you are storing.
	Id string `pulumi:"id"`
	// The Elasticsearch index where you want to store your data.
	Index string `pulumi:"index"`
	// The IAM role ARN that has access to Elasticsearch.
	RoleArn string `pulumi:"roleArn"`
	// The type of document you are storing.
	Type string `pulumi:"type"`
}

type TopicRuleElasticsearchArgs struct {
	// The endpoint of your Elasticsearch domain.
	Endpoint pulumix.Input[string] `pulumi:"endpoint"`
	// The unique identifier for the document you are storing.
	Id pulumix.Input[string] `pulumi:"id"`
	// The Elasticsearch index where you want to store your data.
	Index pulumix.Input[string] `pulumi:"index"`
	// The IAM role ARN that has access to Elasticsearch.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The type of document you are storing.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TopicRuleElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleElasticsearch)(nil)).Elem()
}

func (i TopicRuleElasticsearchArgs) ToTopicRuleElasticsearchOutput() TopicRuleElasticsearchOutput {
	return i.ToTopicRuleElasticsearchOutputWithContext(context.Background())
}

func (i TopicRuleElasticsearchArgs) ToTopicRuleElasticsearchOutputWithContext(ctx context.Context) TopicRuleElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleElasticsearchOutput)
}

func (i *TopicRuleElasticsearchArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleElasticsearchArgs] {
	return pulumix.Val(i)
}

type TopicRuleElasticsearchOutput struct{ *pulumi.OutputState }

func (TopicRuleElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleElasticsearch)(nil)).Elem()
}

func (o TopicRuleElasticsearchOutput) ToTopicRuleElasticsearchOutput() TopicRuleElasticsearchOutput {
	return o
}

func (o TopicRuleElasticsearchOutput) ToTopicRuleElasticsearchOutputWithContext(ctx context.Context) TopicRuleElasticsearchOutput {
	return o
}

func (o TopicRuleElasticsearchOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleElasticsearch] {
	return pulumix.Output[TopicRuleElasticsearch]{
		OutputState: o.OutputState,
	}
}

// The endpoint of your Elasticsearch domain.
func (o TopicRuleElasticsearchOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleElasticsearch](o, func(v TopicRuleElasticsearch) string { return v.Endpoint })
}

// The unique identifier for the document you are storing.
func (o TopicRuleElasticsearchOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleElasticsearch](o, func(v TopicRuleElasticsearch) string { return v.Id })
}

// The Elasticsearch index where you want to store your data.
func (o TopicRuleElasticsearchOutput) Index() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleElasticsearch](o, func(v TopicRuleElasticsearch) string { return v.Index })
}

// The IAM role ARN that has access to Elasticsearch.
func (o TopicRuleElasticsearchOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleElasticsearch](o, func(v TopicRuleElasticsearch) string { return v.RoleArn })
}

// The type of document you are storing.
func (o TopicRuleElasticsearchOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleElasticsearch](o, func(v TopicRuleElasticsearch) string { return v.Type })
}

type TopicRuleErrorAction struct {
	CloudwatchAlarm  *TopicRuleErrorActionCloudwatchAlarm  `pulumi:"cloudwatchAlarm"`
	CloudwatchLogs   *TopicRuleErrorActionCloudwatchLogs   `pulumi:"cloudwatchLogs"`
	CloudwatchMetric *TopicRuleErrorActionCloudwatchMetric `pulumi:"cloudwatchMetric"`
	Dynamodb         *TopicRuleErrorActionDynamodb         `pulumi:"dynamodb"`
	Dynamodbv2       *TopicRuleErrorActionDynamodbv2       `pulumi:"dynamodbv2"`
	Elasticsearch    *TopicRuleErrorActionElasticsearch    `pulumi:"elasticsearch"`
	Firehose         *TopicRuleErrorActionFirehose         `pulumi:"firehose"`
	Http             *TopicRuleErrorActionHttp             `pulumi:"http"`
	IotAnalytics     *TopicRuleErrorActionIotAnalytics     `pulumi:"iotAnalytics"`
	IotEvents        *TopicRuleErrorActionIotEvents        `pulumi:"iotEvents"`
	Kafka            *TopicRuleErrorActionKafka            `pulumi:"kafka"`
	Kinesis          *TopicRuleErrorActionKinesis          `pulumi:"kinesis"`
	Lambda           *TopicRuleErrorActionLambda           `pulumi:"lambda"`
	Republish        *TopicRuleErrorActionRepublish        `pulumi:"republish"`
	S3               *TopicRuleErrorActionS3               `pulumi:"s3"`
	Sns              *TopicRuleErrorActionSns              `pulumi:"sns"`
	Sqs              *TopicRuleErrorActionSqs              `pulumi:"sqs"`
	StepFunctions    *TopicRuleErrorActionStepFunctions    `pulumi:"stepFunctions"`
	Timestream       *TopicRuleErrorActionTimestream       `pulumi:"timestream"`
}

type TopicRuleErrorActionArgs struct {
	CloudwatchAlarm  pulumix.Input[*TopicRuleErrorActionCloudwatchAlarmArgs]  `pulumi:"cloudwatchAlarm"`
	CloudwatchLogs   pulumix.Input[*TopicRuleErrorActionCloudwatchLogsArgs]   `pulumi:"cloudwatchLogs"`
	CloudwatchMetric pulumix.Input[*TopicRuleErrorActionCloudwatchMetricArgs] `pulumi:"cloudwatchMetric"`
	Dynamodb         pulumix.Input[*TopicRuleErrorActionDynamodbArgs]         `pulumi:"dynamodb"`
	Dynamodbv2       pulumix.Input[*TopicRuleErrorActionDynamodbv2Args]       `pulumi:"dynamodbv2"`
	Elasticsearch    pulumix.Input[*TopicRuleErrorActionElasticsearchArgs]    `pulumi:"elasticsearch"`
	Firehose         pulumix.Input[*TopicRuleErrorActionFirehoseArgs]         `pulumi:"firehose"`
	Http             pulumix.Input[*TopicRuleErrorActionHttpArgs]             `pulumi:"http"`
	IotAnalytics     pulumix.Input[*TopicRuleErrorActionIotAnalyticsArgs]     `pulumi:"iotAnalytics"`
	IotEvents        pulumix.Input[*TopicRuleErrorActionIotEventsArgs]        `pulumi:"iotEvents"`
	Kafka            pulumix.Input[*TopicRuleErrorActionKafkaArgs]            `pulumi:"kafka"`
	Kinesis          pulumix.Input[*TopicRuleErrorActionKinesisArgs]          `pulumi:"kinesis"`
	Lambda           pulumix.Input[*TopicRuleErrorActionLambdaArgs]           `pulumi:"lambda"`
	Republish        pulumix.Input[*TopicRuleErrorActionRepublishArgs]        `pulumi:"republish"`
	S3               pulumix.Input[*TopicRuleErrorActionS3Args]               `pulumi:"s3"`
	Sns              pulumix.Input[*TopicRuleErrorActionSnsArgs]              `pulumi:"sns"`
	Sqs              pulumix.Input[*TopicRuleErrorActionSqsArgs]              `pulumi:"sqs"`
	StepFunctions    pulumix.Input[*TopicRuleErrorActionStepFunctionsArgs]    `pulumi:"stepFunctions"`
	Timestream       pulumix.Input[*TopicRuleErrorActionTimestreamArgs]       `pulumi:"timestream"`
}

func (TopicRuleErrorActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorAction)(nil)).Elem()
}

func (i TopicRuleErrorActionArgs) ToTopicRuleErrorActionOutput() TopicRuleErrorActionOutput {
	return i.ToTopicRuleErrorActionOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionArgs) ToTopicRuleErrorActionOutputWithContext(ctx context.Context) TopicRuleErrorActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionOutput)
}

func (i *TopicRuleErrorActionArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorAction)(nil)).Elem()
}

func (o TopicRuleErrorActionOutput) ToTopicRuleErrorActionOutput() TopicRuleErrorActionOutput {
	return o
}

func (o TopicRuleErrorActionOutput) ToTopicRuleErrorActionOutputWithContext(ctx context.Context) TopicRuleErrorActionOutput {
	return o
}

func (o TopicRuleErrorActionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorAction] {
	return pulumix.Output[TopicRuleErrorAction]{
		OutputState: o.OutputState,
	}
}

func (o TopicRuleErrorActionOutput) CloudwatchAlarm() pulumix.GPtrOutput[TopicRuleErrorActionCloudwatchAlarm, TopicRuleErrorActionCloudwatchAlarmOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionCloudwatchAlarm { return v.CloudwatchAlarm })
	return pulumix.GPtrOutput[TopicRuleErrorActionCloudwatchAlarm, TopicRuleErrorActionCloudwatchAlarmOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) CloudwatchLogs() pulumix.GPtrOutput[TopicRuleErrorActionCloudwatchLogs, TopicRuleErrorActionCloudwatchLogsOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionCloudwatchLogs { return v.CloudwatchLogs })
	return pulumix.GPtrOutput[TopicRuleErrorActionCloudwatchLogs, TopicRuleErrorActionCloudwatchLogsOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) CloudwatchMetric() pulumix.GPtrOutput[TopicRuleErrorActionCloudwatchMetric, TopicRuleErrorActionCloudwatchMetricOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionCloudwatchMetric { return v.CloudwatchMetric })
	return pulumix.GPtrOutput[TopicRuleErrorActionCloudwatchMetric, TopicRuleErrorActionCloudwatchMetricOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Dynamodb() pulumix.GPtrOutput[TopicRuleErrorActionDynamodb, TopicRuleErrorActionDynamodbOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionDynamodb { return v.Dynamodb })
	return pulumix.GPtrOutput[TopicRuleErrorActionDynamodb, TopicRuleErrorActionDynamodbOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Dynamodbv2() pulumix.GPtrOutput[TopicRuleErrorActionDynamodbv2, TopicRuleErrorActionDynamodbv2Output] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionDynamodbv2 { return v.Dynamodbv2 })
	return pulumix.GPtrOutput[TopicRuleErrorActionDynamodbv2, TopicRuleErrorActionDynamodbv2Output]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Elasticsearch() pulumix.GPtrOutput[TopicRuleErrorActionElasticsearch, TopicRuleErrorActionElasticsearchOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionElasticsearch { return v.Elasticsearch })
	return pulumix.GPtrOutput[TopicRuleErrorActionElasticsearch, TopicRuleErrorActionElasticsearchOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Firehose() pulumix.GPtrOutput[TopicRuleErrorActionFirehose, TopicRuleErrorActionFirehoseOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionFirehose { return v.Firehose })
	return pulumix.GPtrOutput[TopicRuleErrorActionFirehose, TopicRuleErrorActionFirehoseOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Http() pulumix.GPtrOutput[TopicRuleErrorActionHttp, TopicRuleErrorActionHttpOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionHttp { return v.Http })
	return pulumix.GPtrOutput[TopicRuleErrorActionHttp, TopicRuleErrorActionHttpOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) IotAnalytics() pulumix.GPtrOutput[TopicRuleErrorActionIotAnalytics, TopicRuleErrorActionIotAnalyticsOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionIotAnalytics { return v.IotAnalytics })
	return pulumix.GPtrOutput[TopicRuleErrorActionIotAnalytics, TopicRuleErrorActionIotAnalyticsOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) IotEvents() pulumix.GPtrOutput[TopicRuleErrorActionIotEvents, TopicRuleErrorActionIotEventsOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionIotEvents { return v.IotEvents })
	return pulumix.GPtrOutput[TopicRuleErrorActionIotEvents, TopicRuleErrorActionIotEventsOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Kafka() pulumix.GPtrOutput[TopicRuleErrorActionKafka, TopicRuleErrorActionKafkaOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionKafka { return v.Kafka })
	return pulumix.GPtrOutput[TopicRuleErrorActionKafka, TopicRuleErrorActionKafkaOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Kinesis() pulumix.GPtrOutput[TopicRuleErrorActionKinesis, TopicRuleErrorActionKinesisOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionKinesis { return v.Kinesis })
	return pulumix.GPtrOutput[TopicRuleErrorActionKinesis, TopicRuleErrorActionKinesisOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Lambda() pulumix.GPtrOutput[TopicRuleErrorActionLambda, TopicRuleErrorActionLambdaOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionLambda { return v.Lambda })
	return pulumix.GPtrOutput[TopicRuleErrorActionLambda, TopicRuleErrorActionLambdaOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Republish() pulumix.GPtrOutput[TopicRuleErrorActionRepublish, TopicRuleErrorActionRepublishOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionRepublish { return v.Republish })
	return pulumix.GPtrOutput[TopicRuleErrorActionRepublish, TopicRuleErrorActionRepublishOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) S3() pulumix.GPtrOutput[TopicRuleErrorActionS3, TopicRuleErrorActionS3Output] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionS3 { return v.S3 })
	return pulumix.GPtrOutput[TopicRuleErrorActionS3, TopicRuleErrorActionS3Output]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Sns() pulumix.GPtrOutput[TopicRuleErrorActionSns, TopicRuleErrorActionSnsOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionSns { return v.Sns })
	return pulumix.GPtrOutput[TopicRuleErrorActionSns, TopicRuleErrorActionSnsOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Sqs() pulumix.GPtrOutput[TopicRuleErrorActionSqs, TopicRuleErrorActionSqsOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionSqs { return v.Sqs })
	return pulumix.GPtrOutput[TopicRuleErrorActionSqs, TopicRuleErrorActionSqsOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) StepFunctions() pulumix.GPtrOutput[TopicRuleErrorActionStepFunctions, TopicRuleErrorActionStepFunctionsOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionStepFunctions { return v.StepFunctions })
	return pulumix.GPtrOutput[TopicRuleErrorActionStepFunctions, TopicRuleErrorActionStepFunctionsOutput]{OutputState: value.OutputState}
}

func (o TopicRuleErrorActionOutput) Timestream() pulumix.GPtrOutput[TopicRuleErrorActionTimestream, TopicRuleErrorActionTimestreamOutput] {
	value := pulumix.Apply[TopicRuleErrorAction](o, func(v TopicRuleErrorAction) *TopicRuleErrorActionTimestream { return v.Timestream })
	return pulumix.GPtrOutput[TopicRuleErrorActionTimestream, TopicRuleErrorActionTimestreamOutput]{OutputState: value.OutputState}
}

type TopicRuleErrorActionCloudwatchAlarm struct {
	// The CloudWatch alarm name.
	AlarmName string `pulumi:"alarmName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
	// The reason for the alarm change.
	StateReason string `pulumi:"stateReason"`
	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	StateValue string `pulumi:"stateValue"`
}

type TopicRuleErrorActionCloudwatchAlarmArgs struct {
	// The CloudWatch alarm name.
	AlarmName pulumix.Input[string] `pulumi:"alarmName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The reason for the alarm change.
	StateReason pulumix.Input[string] `pulumi:"stateReason"`
	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	StateValue pulumix.Input[string] `pulumi:"stateValue"`
}

func (TopicRuleErrorActionCloudwatchAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionCloudwatchAlarm)(nil)).Elem()
}

func (i TopicRuleErrorActionCloudwatchAlarmArgs) ToTopicRuleErrorActionCloudwatchAlarmOutput() TopicRuleErrorActionCloudwatchAlarmOutput {
	return i.ToTopicRuleErrorActionCloudwatchAlarmOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionCloudwatchAlarmArgs) ToTopicRuleErrorActionCloudwatchAlarmOutputWithContext(ctx context.Context) TopicRuleErrorActionCloudwatchAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionCloudwatchAlarmOutput)
}

func (i *TopicRuleErrorActionCloudwatchAlarmArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionCloudwatchAlarmArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionCloudwatchAlarmOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionCloudwatchAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionCloudwatchAlarm)(nil)).Elem()
}

func (o TopicRuleErrorActionCloudwatchAlarmOutput) ToTopicRuleErrorActionCloudwatchAlarmOutput() TopicRuleErrorActionCloudwatchAlarmOutput {
	return o
}

func (o TopicRuleErrorActionCloudwatchAlarmOutput) ToTopicRuleErrorActionCloudwatchAlarmOutputWithContext(ctx context.Context) TopicRuleErrorActionCloudwatchAlarmOutput {
	return o
}

func (o TopicRuleErrorActionCloudwatchAlarmOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionCloudwatchAlarm] {
	return pulumix.Output[TopicRuleErrorActionCloudwatchAlarm]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch alarm name.
func (o TopicRuleErrorActionCloudwatchAlarmOutput) AlarmName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchAlarm](o, func(v TopicRuleErrorActionCloudwatchAlarm) string { return v.AlarmName })
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleErrorActionCloudwatchAlarmOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchAlarm](o, func(v TopicRuleErrorActionCloudwatchAlarm) string { return v.RoleArn })
}

// The reason for the alarm change.
func (o TopicRuleErrorActionCloudwatchAlarmOutput) StateReason() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchAlarm](o, func(v TopicRuleErrorActionCloudwatchAlarm) string { return v.StateReason })
}

// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
func (o TopicRuleErrorActionCloudwatchAlarmOutput) StateValue() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchAlarm](o, func(v TopicRuleErrorActionCloudwatchAlarm) string { return v.StateValue })
}

type TopicRuleErrorActionCloudwatchLogs struct {
	// The CloudWatch log group name.
	LogGroupName string `pulumi:"logGroupName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleErrorActionCloudwatchLogsArgs struct {
	// The CloudWatch log group name.
	LogGroupName pulumix.Input[string] `pulumi:"logGroupName"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleErrorActionCloudwatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionCloudwatchLogs)(nil)).Elem()
}

func (i TopicRuleErrorActionCloudwatchLogsArgs) ToTopicRuleErrorActionCloudwatchLogsOutput() TopicRuleErrorActionCloudwatchLogsOutput {
	return i.ToTopicRuleErrorActionCloudwatchLogsOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionCloudwatchLogsArgs) ToTopicRuleErrorActionCloudwatchLogsOutputWithContext(ctx context.Context) TopicRuleErrorActionCloudwatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionCloudwatchLogsOutput)
}

func (i *TopicRuleErrorActionCloudwatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionCloudwatchLogsArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionCloudwatchLogsOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionCloudwatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionCloudwatchLogs)(nil)).Elem()
}

func (o TopicRuleErrorActionCloudwatchLogsOutput) ToTopicRuleErrorActionCloudwatchLogsOutput() TopicRuleErrorActionCloudwatchLogsOutput {
	return o
}

func (o TopicRuleErrorActionCloudwatchLogsOutput) ToTopicRuleErrorActionCloudwatchLogsOutputWithContext(ctx context.Context) TopicRuleErrorActionCloudwatchLogsOutput {
	return o
}

func (o TopicRuleErrorActionCloudwatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionCloudwatchLogs] {
	return pulumix.Output[TopicRuleErrorActionCloudwatchLogs]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch log group name.
func (o TopicRuleErrorActionCloudwatchLogsOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchLogs](o, func(v TopicRuleErrorActionCloudwatchLogs) string { return v.LogGroupName })
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleErrorActionCloudwatchLogsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchLogs](o, func(v TopicRuleErrorActionCloudwatchLogs) string { return v.RoleArn })
}

type TopicRuleErrorActionCloudwatchMetric struct {
	// The CloudWatch metric name.
	MetricName string `pulumi:"metricName"`
	// The CloudWatch metric namespace name.
	MetricNamespace string `pulumi:"metricNamespace"`
	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	MetricTimestamp *string `pulumi:"metricTimestamp"`
	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	MetricUnit string `pulumi:"metricUnit"`
	// The CloudWatch metric value.
	MetricValue string `pulumi:"metricValue"`
	// The IAM role ARN that allows access to the CloudWatch metric.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleErrorActionCloudwatchMetricArgs struct {
	// The CloudWatch metric name.
	MetricName pulumix.Input[string] `pulumi:"metricName"`
	// The CloudWatch metric namespace name.
	MetricNamespace pulumix.Input[string] `pulumi:"metricNamespace"`
	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	MetricTimestamp pulumix.Input[*string] `pulumi:"metricTimestamp"`
	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	MetricUnit pulumix.Input[string] `pulumi:"metricUnit"`
	// The CloudWatch metric value.
	MetricValue pulumix.Input[string] `pulumi:"metricValue"`
	// The IAM role ARN that allows access to the CloudWatch metric.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleErrorActionCloudwatchMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionCloudwatchMetric)(nil)).Elem()
}

func (i TopicRuleErrorActionCloudwatchMetricArgs) ToTopicRuleErrorActionCloudwatchMetricOutput() TopicRuleErrorActionCloudwatchMetricOutput {
	return i.ToTopicRuleErrorActionCloudwatchMetricOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionCloudwatchMetricArgs) ToTopicRuleErrorActionCloudwatchMetricOutputWithContext(ctx context.Context) TopicRuleErrorActionCloudwatchMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionCloudwatchMetricOutput)
}

func (i *TopicRuleErrorActionCloudwatchMetricArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionCloudwatchMetricArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionCloudwatchMetricOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionCloudwatchMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionCloudwatchMetric)(nil)).Elem()
}

func (o TopicRuleErrorActionCloudwatchMetricOutput) ToTopicRuleErrorActionCloudwatchMetricOutput() TopicRuleErrorActionCloudwatchMetricOutput {
	return o
}

func (o TopicRuleErrorActionCloudwatchMetricOutput) ToTopicRuleErrorActionCloudwatchMetricOutputWithContext(ctx context.Context) TopicRuleErrorActionCloudwatchMetricOutput {
	return o
}

func (o TopicRuleErrorActionCloudwatchMetricOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionCloudwatchMetric] {
	return pulumix.Output[TopicRuleErrorActionCloudwatchMetric]{
		OutputState: o.OutputState,
	}
}

// The CloudWatch metric name.
func (o TopicRuleErrorActionCloudwatchMetricOutput) MetricName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchMetric](o, func(v TopicRuleErrorActionCloudwatchMetric) string { return v.MetricName })
}

// The CloudWatch metric namespace name.
func (o TopicRuleErrorActionCloudwatchMetricOutput) MetricNamespace() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchMetric](o, func(v TopicRuleErrorActionCloudwatchMetric) string { return v.MetricNamespace })
}

// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
func (o TopicRuleErrorActionCloudwatchMetricOutput) MetricTimestamp() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchMetric](o, func(v TopicRuleErrorActionCloudwatchMetric) *string { return v.MetricTimestamp })
}

// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
func (o TopicRuleErrorActionCloudwatchMetricOutput) MetricUnit() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchMetric](o, func(v TopicRuleErrorActionCloudwatchMetric) string { return v.MetricUnit })
}

// The CloudWatch metric value.
func (o TopicRuleErrorActionCloudwatchMetricOutput) MetricValue() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchMetric](o, func(v TopicRuleErrorActionCloudwatchMetric) string { return v.MetricValue })
}

// The IAM role ARN that allows access to the CloudWatch metric.
func (o TopicRuleErrorActionCloudwatchMetricOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionCloudwatchMetric](o, func(v TopicRuleErrorActionCloudwatchMetric) string { return v.RoleArn })
}

type TopicRuleErrorActionDynamodb struct {
	// The hash key name.
	HashKeyField string `pulumi:"hashKeyField"`
	// The hash key type. Valid values are "STRING" or "NUMBER".
	HashKeyType *string `pulumi:"hashKeyType"`
	// The hash key value.
	HashKeyValue string `pulumi:"hashKeyValue"`
	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	Operation *string `pulumi:"operation"`
	// The action payload.
	PayloadField *string `pulumi:"payloadField"`
	// The range key name.
	RangeKeyField *string `pulumi:"rangeKeyField"`
	// The range key type. Valid values are "STRING" or "NUMBER".
	RangeKeyType *string `pulumi:"rangeKeyType"`
	// The range key value.
	RangeKeyValue *string `pulumi:"rangeKeyValue"`
	// The ARN of the IAM role that grants access to the DynamoDB table.
	RoleArn string `pulumi:"roleArn"`
	// The name of the DynamoDB table.
	TableName string `pulumi:"tableName"`
}

type TopicRuleErrorActionDynamodbArgs struct {
	// The hash key name.
	HashKeyField pulumix.Input[string] `pulumi:"hashKeyField"`
	// The hash key type. Valid values are "STRING" or "NUMBER".
	HashKeyType pulumix.Input[*string] `pulumi:"hashKeyType"`
	// The hash key value.
	HashKeyValue pulumix.Input[string] `pulumi:"hashKeyValue"`
	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	Operation pulumix.Input[*string] `pulumi:"operation"`
	// The action payload.
	PayloadField pulumix.Input[*string] `pulumi:"payloadField"`
	// The range key name.
	RangeKeyField pulumix.Input[*string] `pulumi:"rangeKeyField"`
	// The range key type. Valid values are "STRING" or "NUMBER".
	RangeKeyType pulumix.Input[*string] `pulumi:"rangeKeyType"`
	// The range key value.
	RangeKeyValue pulumix.Input[*string] `pulumi:"rangeKeyValue"`
	// The ARN of the IAM role that grants access to the DynamoDB table.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the DynamoDB table.
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (TopicRuleErrorActionDynamodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionDynamodb)(nil)).Elem()
}

func (i TopicRuleErrorActionDynamodbArgs) ToTopicRuleErrorActionDynamodbOutput() TopicRuleErrorActionDynamodbOutput {
	return i.ToTopicRuleErrorActionDynamodbOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionDynamodbArgs) ToTopicRuleErrorActionDynamodbOutputWithContext(ctx context.Context) TopicRuleErrorActionDynamodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionDynamodbOutput)
}

func (i *TopicRuleErrorActionDynamodbArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionDynamodbArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionDynamodbOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionDynamodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionDynamodb)(nil)).Elem()
}

func (o TopicRuleErrorActionDynamodbOutput) ToTopicRuleErrorActionDynamodbOutput() TopicRuleErrorActionDynamodbOutput {
	return o
}

func (o TopicRuleErrorActionDynamodbOutput) ToTopicRuleErrorActionDynamodbOutputWithContext(ctx context.Context) TopicRuleErrorActionDynamodbOutput {
	return o
}

func (o TopicRuleErrorActionDynamodbOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionDynamodb] {
	return pulumix.Output[TopicRuleErrorActionDynamodb]{
		OutputState: o.OutputState,
	}
}

// The hash key name.
func (o TopicRuleErrorActionDynamodbOutput) HashKeyField() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) string { return v.HashKeyField })
}

// The hash key type. Valid values are "STRING" or "NUMBER".
func (o TopicRuleErrorActionDynamodbOutput) HashKeyType() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) *string { return v.HashKeyType })
}

// The hash key value.
func (o TopicRuleErrorActionDynamodbOutput) HashKeyValue() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) string { return v.HashKeyValue })
}

// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
func (o TopicRuleErrorActionDynamodbOutput) Operation() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) *string { return v.Operation })
}

// The action payload.
func (o TopicRuleErrorActionDynamodbOutput) PayloadField() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) *string { return v.PayloadField })
}

// The range key name.
func (o TopicRuleErrorActionDynamodbOutput) RangeKeyField() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) *string { return v.RangeKeyField })
}

// The range key type. Valid values are "STRING" or "NUMBER".
func (o TopicRuleErrorActionDynamodbOutput) RangeKeyType() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) *string { return v.RangeKeyType })
}

// The range key value.
func (o TopicRuleErrorActionDynamodbOutput) RangeKeyValue() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) *string { return v.RangeKeyValue })
}

// The ARN of the IAM role that grants access to the DynamoDB table.
func (o TopicRuleErrorActionDynamodbOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) string { return v.RoleArn })
}

// The name of the DynamoDB table.
func (o TopicRuleErrorActionDynamodbOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodb](o, func(v TopicRuleErrorActionDynamodb) string { return v.TableName })
}

type TopicRuleErrorActionDynamodbv2 struct {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	PutItem *TopicRuleErrorActionDynamodbv2PutItem `pulumi:"putItem"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleErrorActionDynamodbv2Args struct {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	PutItem pulumix.Input[*TopicRuleErrorActionDynamodbv2PutItemArgs] `pulumi:"putItem"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleErrorActionDynamodbv2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionDynamodbv2)(nil)).Elem()
}

func (i TopicRuleErrorActionDynamodbv2Args) ToTopicRuleErrorActionDynamodbv2Output() TopicRuleErrorActionDynamodbv2Output {
	return i.ToTopicRuleErrorActionDynamodbv2OutputWithContext(context.Background())
}

func (i TopicRuleErrorActionDynamodbv2Args) ToTopicRuleErrorActionDynamodbv2OutputWithContext(ctx context.Context) TopicRuleErrorActionDynamodbv2Output {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionDynamodbv2Output)
}

func (i *TopicRuleErrorActionDynamodbv2Args) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionDynamodbv2Args] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionDynamodbv2Output struct{ *pulumi.OutputState }

func (TopicRuleErrorActionDynamodbv2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionDynamodbv2)(nil)).Elem()
}

func (o TopicRuleErrorActionDynamodbv2Output) ToTopicRuleErrorActionDynamodbv2Output() TopicRuleErrorActionDynamodbv2Output {
	return o
}

func (o TopicRuleErrorActionDynamodbv2Output) ToTopicRuleErrorActionDynamodbv2OutputWithContext(ctx context.Context) TopicRuleErrorActionDynamodbv2Output {
	return o
}

func (o TopicRuleErrorActionDynamodbv2Output) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionDynamodbv2] {
	return pulumix.Output[TopicRuleErrorActionDynamodbv2]{
		OutputState: o.OutputState,
	}
}

// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
func (o TopicRuleErrorActionDynamodbv2Output) PutItem() pulumix.GPtrOutput[TopicRuleErrorActionDynamodbv2PutItem, TopicRuleErrorActionDynamodbv2PutItemOutput] {
	value := pulumix.Apply[TopicRuleErrorActionDynamodbv2](o, func(v TopicRuleErrorActionDynamodbv2) *TopicRuleErrorActionDynamodbv2PutItem { return v.PutItem })
	return pulumix.GPtrOutput[TopicRuleErrorActionDynamodbv2PutItem, TopicRuleErrorActionDynamodbv2PutItemOutput]{OutputState: value.OutputState}
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleErrorActionDynamodbv2Output) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodbv2](o, func(v TopicRuleErrorActionDynamodbv2) string { return v.RoleArn })
}

type TopicRuleErrorActionDynamodbv2PutItem struct {
	// The name of the DynamoDB table.
	//
	// The `dynamodbv2` object takes the following arguments:
	TableName string `pulumi:"tableName"`
}

type TopicRuleErrorActionDynamodbv2PutItemArgs struct {
	// The name of the DynamoDB table.
	//
	// The `dynamodbv2` object takes the following arguments:
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (TopicRuleErrorActionDynamodbv2PutItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionDynamodbv2PutItem)(nil)).Elem()
}

func (i TopicRuleErrorActionDynamodbv2PutItemArgs) ToTopicRuleErrorActionDynamodbv2PutItemOutput() TopicRuleErrorActionDynamodbv2PutItemOutput {
	return i.ToTopicRuleErrorActionDynamodbv2PutItemOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionDynamodbv2PutItemArgs) ToTopicRuleErrorActionDynamodbv2PutItemOutputWithContext(ctx context.Context) TopicRuleErrorActionDynamodbv2PutItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionDynamodbv2PutItemOutput)
}

func (i *TopicRuleErrorActionDynamodbv2PutItemArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionDynamodbv2PutItemArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionDynamodbv2PutItemOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionDynamodbv2PutItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionDynamodbv2PutItem)(nil)).Elem()
}

func (o TopicRuleErrorActionDynamodbv2PutItemOutput) ToTopicRuleErrorActionDynamodbv2PutItemOutput() TopicRuleErrorActionDynamodbv2PutItemOutput {
	return o
}

func (o TopicRuleErrorActionDynamodbv2PutItemOutput) ToTopicRuleErrorActionDynamodbv2PutItemOutputWithContext(ctx context.Context) TopicRuleErrorActionDynamodbv2PutItemOutput {
	return o
}

func (o TopicRuleErrorActionDynamodbv2PutItemOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionDynamodbv2PutItem] {
	return pulumix.Output[TopicRuleErrorActionDynamodbv2PutItem]{
		OutputState: o.OutputState,
	}
}

// The name of the DynamoDB table.
//
// The `dynamodbv2` object takes the following arguments:
func (o TopicRuleErrorActionDynamodbv2PutItemOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionDynamodbv2PutItem](o, func(v TopicRuleErrorActionDynamodbv2PutItem) string { return v.TableName })
}

type TopicRuleErrorActionElasticsearch struct {
	// The endpoint of your Elasticsearch domain.
	Endpoint string `pulumi:"endpoint"`
	// The unique identifier for the document you are storing.
	Id string `pulumi:"id"`
	// The Elasticsearch index where you want to store your data.
	Index string `pulumi:"index"`
	// The IAM role ARN that has access to Elasticsearch.
	RoleArn string `pulumi:"roleArn"`
	// The type of document you are storing.
	Type string `pulumi:"type"`
}

type TopicRuleErrorActionElasticsearchArgs struct {
	// The endpoint of your Elasticsearch domain.
	Endpoint pulumix.Input[string] `pulumi:"endpoint"`
	// The unique identifier for the document you are storing.
	Id pulumix.Input[string] `pulumi:"id"`
	// The Elasticsearch index where you want to store your data.
	Index pulumix.Input[string] `pulumi:"index"`
	// The IAM role ARN that has access to Elasticsearch.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The type of document you are storing.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (TopicRuleErrorActionElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionElasticsearch)(nil)).Elem()
}

func (i TopicRuleErrorActionElasticsearchArgs) ToTopicRuleErrorActionElasticsearchOutput() TopicRuleErrorActionElasticsearchOutput {
	return i.ToTopicRuleErrorActionElasticsearchOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionElasticsearchArgs) ToTopicRuleErrorActionElasticsearchOutputWithContext(ctx context.Context) TopicRuleErrorActionElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionElasticsearchOutput)
}

func (i *TopicRuleErrorActionElasticsearchArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionElasticsearchArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionElasticsearchOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionElasticsearch)(nil)).Elem()
}

func (o TopicRuleErrorActionElasticsearchOutput) ToTopicRuleErrorActionElasticsearchOutput() TopicRuleErrorActionElasticsearchOutput {
	return o
}

func (o TopicRuleErrorActionElasticsearchOutput) ToTopicRuleErrorActionElasticsearchOutputWithContext(ctx context.Context) TopicRuleErrorActionElasticsearchOutput {
	return o
}

func (o TopicRuleErrorActionElasticsearchOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionElasticsearch] {
	return pulumix.Output[TopicRuleErrorActionElasticsearch]{
		OutputState: o.OutputState,
	}
}

// The endpoint of your Elasticsearch domain.
func (o TopicRuleErrorActionElasticsearchOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionElasticsearch](o, func(v TopicRuleErrorActionElasticsearch) string { return v.Endpoint })
}

// The unique identifier for the document you are storing.
func (o TopicRuleErrorActionElasticsearchOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionElasticsearch](o, func(v TopicRuleErrorActionElasticsearch) string { return v.Id })
}

// The Elasticsearch index where you want to store your data.
func (o TopicRuleErrorActionElasticsearchOutput) Index() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionElasticsearch](o, func(v TopicRuleErrorActionElasticsearch) string { return v.Index })
}

// The IAM role ARN that has access to Elasticsearch.
func (o TopicRuleErrorActionElasticsearchOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionElasticsearch](o, func(v TopicRuleErrorActionElasticsearch) string { return v.RoleArn })
}

// The type of document you are storing.
func (o TopicRuleErrorActionElasticsearchOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionElasticsearch](o, func(v TopicRuleErrorActionElasticsearch) string { return v.Type })
}

type TopicRuleErrorActionFirehose struct {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	BatchMode *bool `pulumi:"batchMode"`
	// The delivery stream name.
	DeliveryStreamName string `pulumi:"deliveryStreamName"`
	// The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
	RoleArn string `pulumi:"roleArn"`
	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	Separator *string `pulumi:"separator"`
}

type TopicRuleErrorActionFirehoseArgs struct {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	BatchMode pulumix.Input[*bool] `pulumi:"batchMode"`
	// The delivery stream name.
	DeliveryStreamName pulumix.Input[string] `pulumi:"deliveryStreamName"`
	// The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	Separator pulumix.Input[*string] `pulumi:"separator"`
}

func (TopicRuleErrorActionFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionFirehose)(nil)).Elem()
}

func (i TopicRuleErrorActionFirehoseArgs) ToTopicRuleErrorActionFirehoseOutput() TopicRuleErrorActionFirehoseOutput {
	return i.ToTopicRuleErrorActionFirehoseOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionFirehoseArgs) ToTopicRuleErrorActionFirehoseOutputWithContext(ctx context.Context) TopicRuleErrorActionFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionFirehoseOutput)
}

func (i *TopicRuleErrorActionFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionFirehoseArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionFirehoseOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionFirehose)(nil)).Elem()
}

func (o TopicRuleErrorActionFirehoseOutput) ToTopicRuleErrorActionFirehoseOutput() TopicRuleErrorActionFirehoseOutput {
	return o
}

func (o TopicRuleErrorActionFirehoseOutput) ToTopicRuleErrorActionFirehoseOutputWithContext(ctx context.Context) TopicRuleErrorActionFirehoseOutput {
	return o
}

func (o TopicRuleErrorActionFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionFirehose] {
	return pulumix.Output[TopicRuleErrorActionFirehose]{
		OutputState: o.OutputState,
	}
}

// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
func (o TopicRuleErrorActionFirehoseOutput) BatchMode() pulumix.Output[*bool] {
	return pulumix.Apply[TopicRuleErrorActionFirehose](o, func(v TopicRuleErrorActionFirehose) *bool { return v.BatchMode })
}

// The delivery stream name.
func (o TopicRuleErrorActionFirehoseOutput) DeliveryStreamName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionFirehose](o, func(v TopicRuleErrorActionFirehose) string { return v.DeliveryStreamName })
}

// The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
func (o TopicRuleErrorActionFirehoseOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionFirehose](o, func(v TopicRuleErrorActionFirehose) string { return v.RoleArn })
}

// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
func (o TopicRuleErrorActionFirehoseOutput) Separator() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionFirehose](o, func(v TopicRuleErrorActionFirehose) *string { return v.Separator })
}

type TopicRuleErrorActionHttp struct {
	// The HTTPS URL used to verify ownership of `url`.
	ConfirmationUrl *string `pulumi:"confirmationUrl"`
	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	HttpHeaders []TopicRuleErrorActionHttpHttpHeader `pulumi:"httpHeaders"`
	// The HTTPS URL.
	Url string `pulumi:"url"`
}

type TopicRuleErrorActionHttpArgs struct {
	// The HTTPS URL used to verify ownership of `url`.
	ConfirmationUrl pulumix.Input[*string] `pulumi:"confirmationUrl"`
	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	HttpHeaders pulumix.Input[[]*TopicRuleErrorActionHttpHttpHeaderArgs] `pulumi:"httpHeaders"`
	// The HTTPS URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (TopicRuleErrorActionHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionHttp)(nil)).Elem()
}

func (i TopicRuleErrorActionHttpArgs) ToTopicRuleErrorActionHttpOutput() TopicRuleErrorActionHttpOutput {
	return i.ToTopicRuleErrorActionHttpOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionHttpArgs) ToTopicRuleErrorActionHttpOutputWithContext(ctx context.Context) TopicRuleErrorActionHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionHttpOutput)
}

func (i *TopicRuleErrorActionHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionHttpArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionHttpOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionHttp)(nil)).Elem()
}

func (o TopicRuleErrorActionHttpOutput) ToTopicRuleErrorActionHttpOutput() TopicRuleErrorActionHttpOutput {
	return o
}

func (o TopicRuleErrorActionHttpOutput) ToTopicRuleErrorActionHttpOutputWithContext(ctx context.Context) TopicRuleErrorActionHttpOutput {
	return o
}

func (o TopicRuleErrorActionHttpOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionHttp] {
	return pulumix.Output[TopicRuleErrorActionHttp]{
		OutputState: o.OutputState,
	}
}

// The HTTPS URL used to verify ownership of `url`.
func (o TopicRuleErrorActionHttpOutput) ConfirmationUrl() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionHttp](o, func(v TopicRuleErrorActionHttp) *string { return v.ConfirmationUrl })
}

// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
func (o TopicRuleErrorActionHttpOutput) HttpHeaders() pulumix.GArrayOutput[TopicRuleErrorActionHttpHttpHeader, TopicRuleErrorActionHttpHttpHeaderOutput] {
	value := pulumix.Apply[TopicRuleErrorActionHttp](o, func(v TopicRuleErrorActionHttp) []TopicRuleErrorActionHttpHttpHeader { return v.HttpHeaders })
	return pulumix.GArrayOutput[TopicRuleErrorActionHttpHttpHeader, TopicRuleErrorActionHttpHttpHeaderOutput]{OutputState: value.OutputState}
}

// The HTTPS URL.
func (o TopicRuleErrorActionHttpOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionHttp](o, func(v TopicRuleErrorActionHttp) string { return v.Url })
}

type TopicRuleErrorActionHttpHttpHeader struct {
	// The name of the HTTP header.
	Key string `pulumi:"key"`
	// The value of the HTTP header.
	Value string `pulumi:"value"`
}

type TopicRuleErrorActionHttpHttpHeaderArgs struct {
	// The name of the HTTP header.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value of the HTTP header.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (TopicRuleErrorActionHttpHttpHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionHttpHttpHeader)(nil)).Elem()
}

func (i TopicRuleErrorActionHttpHttpHeaderArgs) ToTopicRuleErrorActionHttpHttpHeaderOutput() TopicRuleErrorActionHttpHttpHeaderOutput {
	return i.ToTopicRuleErrorActionHttpHttpHeaderOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionHttpHttpHeaderArgs) ToTopicRuleErrorActionHttpHttpHeaderOutputWithContext(ctx context.Context) TopicRuleErrorActionHttpHttpHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionHttpHttpHeaderOutput)
}

func (i *TopicRuleErrorActionHttpHttpHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionHttpHttpHeaderArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionHttpHttpHeaderOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionHttpHttpHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionHttpHttpHeader)(nil)).Elem()
}

func (o TopicRuleErrorActionHttpHttpHeaderOutput) ToTopicRuleErrorActionHttpHttpHeaderOutput() TopicRuleErrorActionHttpHttpHeaderOutput {
	return o
}

func (o TopicRuleErrorActionHttpHttpHeaderOutput) ToTopicRuleErrorActionHttpHttpHeaderOutputWithContext(ctx context.Context) TopicRuleErrorActionHttpHttpHeaderOutput {
	return o
}

func (o TopicRuleErrorActionHttpHttpHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionHttpHttpHeader] {
	return pulumix.Output[TopicRuleErrorActionHttpHttpHeader]{
		OutputState: o.OutputState,
	}
}

// The name of the HTTP header.
func (o TopicRuleErrorActionHttpHttpHeaderOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionHttpHttpHeader](o, func(v TopicRuleErrorActionHttpHttpHeader) string { return v.Key })
}

// The value of the HTTP header.
func (o TopicRuleErrorActionHttpHttpHeaderOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionHttpHttpHeader](o, func(v TopicRuleErrorActionHttpHttpHeader) string { return v.Value })
}

type TopicRuleErrorActionIotAnalytics struct {
	// The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.
	BatchMode *bool `pulumi:"batchMode"`
	// Name of AWS IOT Analytics channel.
	ChannelName string `pulumi:"channelName"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleErrorActionIotAnalyticsArgs struct {
	// The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.
	BatchMode pulumix.Input[*bool] `pulumi:"batchMode"`
	// Name of AWS IOT Analytics channel.
	ChannelName pulumix.Input[string] `pulumi:"channelName"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleErrorActionIotAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionIotAnalytics)(nil)).Elem()
}

func (i TopicRuleErrorActionIotAnalyticsArgs) ToTopicRuleErrorActionIotAnalyticsOutput() TopicRuleErrorActionIotAnalyticsOutput {
	return i.ToTopicRuleErrorActionIotAnalyticsOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionIotAnalyticsArgs) ToTopicRuleErrorActionIotAnalyticsOutputWithContext(ctx context.Context) TopicRuleErrorActionIotAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionIotAnalyticsOutput)
}

func (i *TopicRuleErrorActionIotAnalyticsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionIotAnalyticsArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionIotAnalyticsOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionIotAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionIotAnalytics)(nil)).Elem()
}

func (o TopicRuleErrorActionIotAnalyticsOutput) ToTopicRuleErrorActionIotAnalyticsOutput() TopicRuleErrorActionIotAnalyticsOutput {
	return o
}

func (o TopicRuleErrorActionIotAnalyticsOutput) ToTopicRuleErrorActionIotAnalyticsOutputWithContext(ctx context.Context) TopicRuleErrorActionIotAnalyticsOutput {
	return o
}

func (o TopicRuleErrorActionIotAnalyticsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionIotAnalytics] {
	return pulumix.Output[TopicRuleErrorActionIotAnalytics]{
		OutputState: o.OutputState,
	}
}

// The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.
func (o TopicRuleErrorActionIotAnalyticsOutput) BatchMode() pulumix.Output[*bool] {
	return pulumix.Apply[TopicRuleErrorActionIotAnalytics](o, func(v TopicRuleErrorActionIotAnalytics) *bool { return v.BatchMode })
}

// Name of AWS IOT Analytics channel.
func (o TopicRuleErrorActionIotAnalyticsOutput) ChannelName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionIotAnalytics](o, func(v TopicRuleErrorActionIotAnalytics) string { return v.ChannelName })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleErrorActionIotAnalyticsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionIotAnalytics](o, func(v TopicRuleErrorActionIotAnalytics) string { return v.RoleArn })
}

type TopicRuleErrorActionIotEvents struct {
	// The payload that contains a JSON array of records will be sent to IoT Events via a batch call.
	BatchMode *bool `pulumi:"batchMode"`
	// The name of the AWS IoT Events input.
	InputName string `pulumi:"inputName"`
	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	MessageId *string `pulumi:"messageId"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleErrorActionIotEventsArgs struct {
	// The payload that contains a JSON array of records will be sent to IoT Events via a batch call.
	BatchMode pulumix.Input[*bool] `pulumi:"batchMode"`
	// The name of the AWS IoT Events input.
	InputName pulumix.Input[string] `pulumi:"inputName"`
	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	MessageId pulumix.Input[*string] `pulumi:"messageId"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleErrorActionIotEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionIotEvents)(nil)).Elem()
}

func (i TopicRuleErrorActionIotEventsArgs) ToTopicRuleErrorActionIotEventsOutput() TopicRuleErrorActionIotEventsOutput {
	return i.ToTopicRuleErrorActionIotEventsOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionIotEventsArgs) ToTopicRuleErrorActionIotEventsOutputWithContext(ctx context.Context) TopicRuleErrorActionIotEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionIotEventsOutput)
}

func (i *TopicRuleErrorActionIotEventsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionIotEventsArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionIotEventsOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionIotEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionIotEvents)(nil)).Elem()
}

func (o TopicRuleErrorActionIotEventsOutput) ToTopicRuleErrorActionIotEventsOutput() TopicRuleErrorActionIotEventsOutput {
	return o
}

func (o TopicRuleErrorActionIotEventsOutput) ToTopicRuleErrorActionIotEventsOutputWithContext(ctx context.Context) TopicRuleErrorActionIotEventsOutput {
	return o
}

func (o TopicRuleErrorActionIotEventsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionIotEvents] {
	return pulumix.Output[TopicRuleErrorActionIotEvents]{
		OutputState: o.OutputState,
	}
}

// The payload that contains a JSON array of records will be sent to IoT Events via a batch call.
func (o TopicRuleErrorActionIotEventsOutput) BatchMode() pulumix.Output[*bool] {
	return pulumix.Apply[TopicRuleErrorActionIotEvents](o, func(v TopicRuleErrorActionIotEvents) *bool { return v.BatchMode })
}

// The name of the AWS IoT Events input.
func (o TopicRuleErrorActionIotEventsOutput) InputName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionIotEvents](o, func(v TopicRuleErrorActionIotEvents) string { return v.InputName })
}

// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
func (o TopicRuleErrorActionIotEventsOutput) MessageId() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionIotEvents](o, func(v TopicRuleErrorActionIotEvents) *string { return v.MessageId })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleErrorActionIotEventsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionIotEvents](o, func(v TopicRuleErrorActionIotEvents) string { return v.RoleArn })
}

type TopicRuleErrorActionKafka struct {
	// Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).
	ClientProperties map[string]string `pulumi:"clientProperties"`
	// The ARN of Kafka action's VPC `iot.TopicRuleDestination` .
	DestinationArn string `pulumi:"destinationArn"`
	// The Kafka message key.
	Key *string `pulumi:"key"`
	// The Kafka message partition.
	Partition *string `pulumi:"partition"`
	// The Kafka topic for messages to be sent to the Kafka broker.
	Topic string `pulumi:"topic"`
}

type TopicRuleErrorActionKafkaArgs struct {
	// Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).
	ClientProperties pulumix.Input[map[string]string] `pulumi:"clientProperties"`
	// The ARN of Kafka action's VPC `iot.TopicRuleDestination` .
	DestinationArn pulumix.Input[string] `pulumi:"destinationArn"`
	// The Kafka message key.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The Kafka message partition.
	Partition pulumix.Input[*string] `pulumi:"partition"`
	// The Kafka topic for messages to be sent to the Kafka broker.
	Topic pulumix.Input[string] `pulumi:"topic"`
}

func (TopicRuleErrorActionKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionKafka)(nil)).Elem()
}

func (i TopicRuleErrorActionKafkaArgs) ToTopicRuleErrorActionKafkaOutput() TopicRuleErrorActionKafkaOutput {
	return i.ToTopicRuleErrorActionKafkaOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionKafkaArgs) ToTopicRuleErrorActionKafkaOutputWithContext(ctx context.Context) TopicRuleErrorActionKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionKafkaOutput)
}

func (i *TopicRuleErrorActionKafkaArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionKafkaArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionKafkaOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionKafka)(nil)).Elem()
}

func (o TopicRuleErrorActionKafkaOutput) ToTopicRuleErrorActionKafkaOutput() TopicRuleErrorActionKafkaOutput {
	return o
}

func (o TopicRuleErrorActionKafkaOutput) ToTopicRuleErrorActionKafkaOutputWithContext(ctx context.Context) TopicRuleErrorActionKafkaOutput {
	return o
}

func (o TopicRuleErrorActionKafkaOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionKafka] {
	return pulumix.Output[TopicRuleErrorActionKafka]{
		OutputState: o.OutputState,
	}
}

// Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).
func (o TopicRuleErrorActionKafkaOutput) ClientProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[TopicRuleErrorActionKafka](o, func(v TopicRuleErrorActionKafka) map[string]string { return v.ClientProperties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The ARN of Kafka action's VPC `iot.TopicRuleDestination` .
func (o TopicRuleErrorActionKafkaOutput) DestinationArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionKafka](o, func(v TopicRuleErrorActionKafka) string { return v.DestinationArn })
}

// The Kafka message key.
func (o TopicRuleErrorActionKafkaOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionKafka](o, func(v TopicRuleErrorActionKafka) *string { return v.Key })
}

// The Kafka message partition.
func (o TopicRuleErrorActionKafkaOutput) Partition() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionKafka](o, func(v TopicRuleErrorActionKafka) *string { return v.Partition })
}

// The Kafka topic for messages to be sent to the Kafka broker.
func (o TopicRuleErrorActionKafkaOutput) Topic() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionKafka](o, func(v TopicRuleErrorActionKafka) string { return v.Topic })
}

type TopicRuleErrorActionKinesis struct {
	// The partition key.
	PartitionKey *string `pulumi:"partitionKey"`
	// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
	// The name of the Amazon Kinesis stream.
	StreamName string `pulumi:"streamName"`
}

type TopicRuleErrorActionKinesisArgs struct {
	// The partition key.
	PartitionKey pulumix.Input[*string] `pulumi:"partitionKey"`
	// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the Amazon Kinesis stream.
	StreamName pulumix.Input[string] `pulumi:"streamName"`
}

func (TopicRuleErrorActionKinesisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionKinesis)(nil)).Elem()
}

func (i TopicRuleErrorActionKinesisArgs) ToTopicRuleErrorActionKinesisOutput() TopicRuleErrorActionKinesisOutput {
	return i.ToTopicRuleErrorActionKinesisOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionKinesisArgs) ToTopicRuleErrorActionKinesisOutputWithContext(ctx context.Context) TopicRuleErrorActionKinesisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionKinesisOutput)
}

func (i *TopicRuleErrorActionKinesisArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionKinesisArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionKinesisOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionKinesisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionKinesis)(nil)).Elem()
}

func (o TopicRuleErrorActionKinesisOutput) ToTopicRuleErrorActionKinesisOutput() TopicRuleErrorActionKinesisOutput {
	return o
}

func (o TopicRuleErrorActionKinesisOutput) ToTopicRuleErrorActionKinesisOutputWithContext(ctx context.Context) TopicRuleErrorActionKinesisOutput {
	return o
}

func (o TopicRuleErrorActionKinesisOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionKinesis] {
	return pulumix.Output[TopicRuleErrorActionKinesis]{
		OutputState: o.OutputState,
	}
}

// The partition key.
func (o TopicRuleErrorActionKinesisOutput) PartitionKey() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionKinesis](o, func(v TopicRuleErrorActionKinesis) *string { return v.PartitionKey })
}

// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
func (o TopicRuleErrorActionKinesisOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionKinesis](o, func(v TopicRuleErrorActionKinesis) string { return v.RoleArn })
}

// The name of the Amazon Kinesis stream.
func (o TopicRuleErrorActionKinesisOutput) StreamName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionKinesis](o, func(v TopicRuleErrorActionKinesis) string { return v.StreamName })
}

type TopicRuleErrorActionLambda struct {
	// The ARN of the Lambda function.
	FunctionArn string `pulumi:"functionArn"`
}

type TopicRuleErrorActionLambdaArgs struct {
	// The ARN of the Lambda function.
	FunctionArn pulumix.Input[string] `pulumi:"functionArn"`
}

func (TopicRuleErrorActionLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionLambda)(nil)).Elem()
}

func (i TopicRuleErrorActionLambdaArgs) ToTopicRuleErrorActionLambdaOutput() TopicRuleErrorActionLambdaOutput {
	return i.ToTopicRuleErrorActionLambdaOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionLambdaArgs) ToTopicRuleErrorActionLambdaOutputWithContext(ctx context.Context) TopicRuleErrorActionLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionLambdaOutput)
}

func (i *TopicRuleErrorActionLambdaArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionLambdaArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionLambdaOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionLambda)(nil)).Elem()
}

func (o TopicRuleErrorActionLambdaOutput) ToTopicRuleErrorActionLambdaOutput() TopicRuleErrorActionLambdaOutput {
	return o
}

func (o TopicRuleErrorActionLambdaOutput) ToTopicRuleErrorActionLambdaOutputWithContext(ctx context.Context) TopicRuleErrorActionLambdaOutput {
	return o
}

func (o TopicRuleErrorActionLambdaOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionLambda] {
	return pulumix.Output[TopicRuleErrorActionLambda]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lambda function.
func (o TopicRuleErrorActionLambdaOutput) FunctionArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionLambda](o, func(v TopicRuleErrorActionLambda) string { return v.FunctionArn })
}

type TopicRuleErrorActionRepublish struct {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	//
	// The `s3` object takes the following arguments:
	Qos *int `pulumi:"qos"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
	// The name of the MQTT topic the message should be republished to.
	Topic string `pulumi:"topic"`
}

type TopicRuleErrorActionRepublishArgs struct {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	//
	// The `s3` object takes the following arguments:
	Qos pulumix.Input[*int] `pulumi:"qos"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the MQTT topic the message should be republished to.
	Topic pulumix.Input[string] `pulumi:"topic"`
}

func (TopicRuleErrorActionRepublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionRepublish)(nil)).Elem()
}

func (i TopicRuleErrorActionRepublishArgs) ToTopicRuleErrorActionRepublishOutput() TopicRuleErrorActionRepublishOutput {
	return i.ToTopicRuleErrorActionRepublishOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionRepublishArgs) ToTopicRuleErrorActionRepublishOutputWithContext(ctx context.Context) TopicRuleErrorActionRepublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionRepublishOutput)
}

func (i *TopicRuleErrorActionRepublishArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionRepublishArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionRepublishOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionRepublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionRepublish)(nil)).Elem()
}

func (o TopicRuleErrorActionRepublishOutput) ToTopicRuleErrorActionRepublishOutput() TopicRuleErrorActionRepublishOutput {
	return o
}

func (o TopicRuleErrorActionRepublishOutput) ToTopicRuleErrorActionRepublishOutputWithContext(ctx context.Context) TopicRuleErrorActionRepublishOutput {
	return o
}

func (o TopicRuleErrorActionRepublishOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionRepublish] {
	return pulumix.Output[TopicRuleErrorActionRepublish]{
		OutputState: o.OutputState,
	}
}

// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
//
// The `s3` object takes the following arguments:
func (o TopicRuleErrorActionRepublishOutput) Qos() pulumix.Output[*int] {
	return pulumix.Apply[TopicRuleErrorActionRepublish](o, func(v TopicRuleErrorActionRepublish) *int { return v.Qos })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleErrorActionRepublishOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionRepublish](o, func(v TopicRuleErrorActionRepublish) string { return v.RoleArn })
}

// The name of the MQTT topic the message should be republished to.
func (o TopicRuleErrorActionRepublishOutput) Topic() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionRepublish](o, func(v TopicRuleErrorActionRepublish) string { return v.Topic })
}

type TopicRuleErrorActionS3 struct {
	// The Amazon S3 bucket name.
	BucketName string `pulumi:"bucketName"`
	// The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
	CannedAcl *string `pulumi:"cannedAcl"`
	// The name of the HTTP header.
	Key string `pulumi:"key"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleErrorActionS3Args struct {
	// The Amazon S3 bucket name.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
	CannedAcl pulumix.Input[*string] `pulumi:"cannedAcl"`
	// The name of the HTTP header.
	Key pulumix.Input[string] `pulumi:"key"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleErrorActionS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionS3)(nil)).Elem()
}

func (i TopicRuleErrorActionS3Args) ToTopicRuleErrorActionS3Output() TopicRuleErrorActionS3Output {
	return i.ToTopicRuleErrorActionS3OutputWithContext(context.Background())
}

func (i TopicRuleErrorActionS3Args) ToTopicRuleErrorActionS3OutputWithContext(ctx context.Context) TopicRuleErrorActionS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionS3Output)
}

func (i *TopicRuleErrorActionS3Args) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionS3Args] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionS3Output struct{ *pulumi.OutputState }

func (TopicRuleErrorActionS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionS3)(nil)).Elem()
}

func (o TopicRuleErrorActionS3Output) ToTopicRuleErrorActionS3Output() TopicRuleErrorActionS3Output {
	return o
}

func (o TopicRuleErrorActionS3Output) ToTopicRuleErrorActionS3OutputWithContext(ctx context.Context) TopicRuleErrorActionS3Output {
	return o
}

func (o TopicRuleErrorActionS3Output) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionS3] {
	return pulumix.Output[TopicRuleErrorActionS3]{
		OutputState: o.OutputState,
	}
}

// The Amazon S3 bucket name.
func (o TopicRuleErrorActionS3Output) BucketName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionS3](o, func(v TopicRuleErrorActionS3) string { return v.BucketName })
}

// The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
func (o TopicRuleErrorActionS3Output) CannedAcl() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionS3](o, func(v TopicRuleErrorActionS3) *string { return v.CannedAcl })
}

// The name of the HTTP header.
func (o TopicRuleErrorActionS3Output) Key() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionS3](o, func(v TopicRuleErrorActionS3) string { return v.Key })
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleErrorActionS3Output) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionS3](o, func(v TopicRuleErrorActionS3) string { return v.RoleArn })
}

type TopicRuleErrorActionSns struct {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	MessageFormat *string `pulumi:"messageFormat"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
	// The ARN of the SNS topic.
	TargetArn string `pulumi:"targetArn"`
}

type TopicRuleErrorActionSnsArgs struct {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	MessageFormat pulumix.Input[*string] `pulumi:"messageFormat"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The ARN of the SNS topic.
	TargetArn pulumix.Input[string] `pulumi:"targetArn"`
}

func (TopicRuleErrorActionSnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionSns)(nil)).Elem()
}

func (i TopicRuleErrorActionSnsArgs) ToTopicRuleErrorActionSnsOutput() TopicRuleErrorActionSnsOutput {
	return i.ToTopicRuleErrorActionSnsOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionSnsArgs) ToTopicRuleErrorActionSnsOutputWithContext(ctx context.Context) TopicRuleErrorActionSnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionSnsOutput)
}

func (i *TopicRuleErrorActionSnsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionSnsArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionSnsOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionSnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionSns)(nil)).Elem()
}

func (o TopicRuleErrorActionSnsOutput) ToTopicRuleErrorActionSnsOutput() TopicRuleErrorActionSnsOutput {
	return o
}

func (o TopicRuleErrorActionSnsOutput) ToTopicRuleErrorActionSnsOutputWithContext(ctx context.Context) TopicRuleErrorActionSnsOutput {
	return o
}

func (o TopicRuleErrorActionSnsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionSns] {
	return pulumix.Output[TopicRuleErrorActionSns]{
		OutputState: o.OutputState,
	}
}

// The message format of the message to publish. Accepted values are "JSON" and "RAW".
func (o TopicRuleErrorActionSnsOutput) MessageFormat() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionSns](o, func(v TopicRuleErrorActionSns) *string { return v.MessageFormat })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleErrorActionSnsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionSns](o, func(v TopicRuleErrorActionSns) string { return v.RoleArn })
}

// The ARN of the SNS topic.
func (o TopicRuleErrorActionSnsOutput) TargetArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionSns](o, func(v TopicRuleErrorActionSns) string { return v.TargetArn })
}

type TopicRuleErrorActionSqs struct {
	// The URL of the Amazon SQS queue.
	QueueUrl string `pulumi:"queueUrl"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
	// Specifies whether to use Base64 encoding.
	UseBase64 bool `pulumi:"useBase64"`
}

type TopicRuleErrorActionSqsArgs struct {
	// The URL of the Amazon SQS queue.
	QueueUrl pulumix.Input[string] `pulumi:"queueUrl"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Specifies whether to use Base64 encoding.
	UseBase64 pulumix.Input[bool] `pulumi:"useBase64"`
}

func (TopicRuleErrorActionSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionSqs)(nil)).Elem()
}

func (i TopicRuleErrorActionSqsArgs) ToTopicRuleErrorActionSqsOutput() TopicRuleErrorActionSqsOutput {
	return i.ToTopicRuleErrorActionSqsOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionSqsArgs) ToTopicRuleErrorActionSqsOutputWithContext(ctx context.Context) TopicRuleErrorActionSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionSqsOutput)
}

func (i *TopicRuleErrorActionSqsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionSqsArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionSqsOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionSqs)(nil)).Elem()
}

func (o TopicRuleErrorActionSqsOutput) ToTopicRuleErrorActionSqsOutput() TopicRuleErrorActionSqsOutput {
	return o
}

func (o TopicRuleErrorActionSqsOutput) ToTopicRuleErrorActionSqsOutputWithContext(ctx context.Context) TopicRuleErrorActionSqsOutput {
	return o
}

func (o TopicRuleErrorActionSqsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionSqs] {
	return pulumix.Output[TopicRuleErrorActionSqs]{
		OutputState: o.OutputState,
	}
}

// The URL of the Amazon SQS queue.
func (o TopicRuleErrorActionSqsOutput) QueueUrl() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionSqs](o, func(v TopicRuleErrorActionSqs) string { return v.QueueUrl })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleErrorActionSqsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionSqs](o, func(v TopicRuleErrorActionSqs) string { return v.RoleArn })
}

// Specifies whether to use Base64 encoding.
func (o TopicRuleErrorActionSqsOutput) UseBase64() pulumix.Output[bool] {
	return pulumix.Apply[TopicRuleErrorActionSqs](o, func(v TopicRuleErrorActionSqs) bool { return v.UseBase64 })
}

type TopicRuleErrorActionStepFunctions struct {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	ExecutionNamePrefix *string `pulumi:"executionNamePrefix"`
	// The ARN of the IAM role that grants access to start execution of the state machine.
	RoleArn string `pulumi:"roleArn"`
	// The name of the Step Functions state machine whose execution will be started.
	StateMachineName string `pulumi:"stateMachineName"`
}

type TopicRuleErrorActionStepFunctionsArgs struct {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	ExecutionNamePrefix pulumix.Input[*string] `pulumi:"executionNamePrefix"`
	// The ARN of the IAM role that grants access to start execution of the state machine.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the Step Functions state machine whose execution will be started.
	StateMachineName pulumix.Input[string] `pulumi:"stateMachineName"`
}

func (TopicRuleErrorActionStepFunctionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionStepFunctions)(nil)).Elem()
}

func (i TopicRuleErrorActionStepFunctionsArgs) ToTopicRuleErrorActionStepFunctionsOutput() TopicRuleErrorActionStepFunctionsOutput {
	return i.ToTopicRuleErrorActionStepFunctionsOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionStepFunctionsArgs) ToTopicRuleErrorActionStepFunctionsOutputWithContext(ctx context.Context) TopicRuleErrorActionStepFunctionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionStepFunctionsOutput)
}

func (i *TopicRuleErrorActionStepFunctionsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionStepFunctionsArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionStepFunctionsOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionStepFunctionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionStepFunctions)(nil)).Elem()
}

func (o TopicRuleErrorActionStepFunctionsOutput) ToTopicRuleErrorActionStepFunctionsOutput() TopicRuleErrorActionStepFunctionsOutput {
	return o
}

func (o TopicRuleErrorActionStepFunctionsOutput) ToTopicRuleErrorActionStepFunctionsOutputWithContext(ctx context.Context) TopicRuleErrorActionStepFunctionsOutput {
	return o
}

func (o TopicRuleErrorActionStepFunctionsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionStepFunctions] {
	return pulumix.Output[TopicRuleErrorActionStepFunctions]{
		OutputState: o.OutputState,
	}
}

// The prefix used to generate, along with a UUID, the unique state machine execution name.
func (o TopicRuleErrorActionStepFunctionsOutput) ExecutionNamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleErrorActionStepFunctions](o, func(v TopicRuleErrorActionStepFunctions) *string { return v.ExecutionNamePrefix })
}

// The ARN of the IAM role that grants access to start execution of the state machine.
func (o TopicRuleErrorActionStepFunctionsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionStepFunctions](o, func(v TopicRuleErrorActionStepFunctions) string { return v.RoleArn })
}

// The name of the Step Functions state machine whose execution will be started.
func (o TopicRuleErrorActionStepFunctionsOutput) StateMachineName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionStepFunctions](o, func(v TopicRuleErrorActionStepFunctions) string { return v.StateMachineName })
}

type TopicRuleErrorActionTimestream struct {
	// The name of an Amazon Timestream database.
	DatabaseName string `pulumi:"databaseName"`
	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	Dimensions []TopicRuleErrorActionTimestreamDimension `pulumi:"dimensions"`
	// The ARN of the role that grants permission to write to the Amazon Timestream database table.
	RoleArn string `pulumi:"roleArn"`
	// The name of the database table into which to write the measure records.
	TableName string `pulumi:"tableName"`
	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	Timestamp *TopicRuleErrorActionTimestreamTimestamp `pulumi:"timestamp"`
}

type TopicRuleErrorActionTimestreamArgs struct {
	// The name of an Amazon Timestream database.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	Dimensions pulumix.Input[[]*TopicRuleErrorActionTimestreamDimensionArgs] `pulumi:"dimensions"`
	// The ARN of the role that grants permission to write to the Amazon Timestream database table.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the database table into which to write the measure records.
	TableName pulumix.Input[string] `pulumi:"tableName"`
	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	Timestamp pulumix.Input[*TopicRuleErrorActionTimestreamTimestampArgs] `pulumi:"timestamp"`
}

func (TopicRuleErrorActionTimestreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionTimestream)(nil)).Elem()
}

func (i TopicRuleErrorActionTimestreamArgs) ToTopicRuleErrorActionTimestreamOutput() TopicRuleErrorActionTimestreamOutput {
	return i.ToTopicRuleErrorActionTimestreamOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionTimestreamArgs) ToTopicRuleErrorActionTimestreamOutputWithContext(ctx context.Context) TopicRuleErrorActionTimestreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionTimestreamOutput)
}

func (i *TopicRuleErrorActionTimestreamArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionTimestreamArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionTimestreamOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionTimestreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionTimestream)(nil)).Elem()
}

func (o TopicRuleErrorActionTimestreamOutput) ToTopicRuleErrorActionTimestreamOutput() TopicRuleErrorActionTimestreamOutput {
	return o
}

func (o TopicRuleErrorActionTimestreamOutput) ToTopicRuleErrorActionTimestreamOutputWithContext(ctx context.Context) TopicRuleErrorActionTimestreamOutput {
	return o
}

func (o TopicRuleErrorActionTimestreamOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionTimestream] {
	return pulumix.Output[TopicRuleErrorActionTimestream]{
		OutputState: o.OutputState,
	}
}

// The name of an Amazon Timestream database.
func (o TopicRuleErrorActionTimestreamOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestream](o, func(v TopicRuleErrorActionTimestream) string { return v.DatabaseName })
}

// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
func (o TopicRuleErrorActionTimestreamOutput) Dimensions() pulumix.GArrayOutput[TopicRuleErrorActionTimestreamDimension, TopicRuleErrorActionTimestreamDimensionOutput] {
	value := pulumix.Apply[TopicRuleErrorActionTimestream](o, func(v TopicRuleErrorActionTimestream) []TopicRuleErrorActionTimestreamDimension { return v.Dimensions })
	return pulumix.GArrayOutput[TopicRuleErrorActionTimestreamDimension, TopicRuleErrorActionTimestreamDimensionOutput]{OutputState: value.OutputState}
}

// The ARN of the role that grants permission to write to the Amazon Timestream database table.
func (o TopicRuleErrorActionTimestreamOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestream](o, func(v TopicRuleErrorActionTimestream) string { return v.RoleArn })
}

// The name of the database table into which to write the measure records.
func (o TopicRuleErrorActionTimestreamOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestream](o, func(v TopicRuleErrorActionTimestream) string { return v.TableName })
}

// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
func (o TopicRuleErrorActionTimestreamOutput) Timestamp() pulumix.GPtrOutput[TopicRuleErrorActionTimestreamTimestamp, TopicRuleErrorActionTimestreamTimestampOutput] {
	value := pulumix.Apply[TopicRuleErrorActionTimestream](o, func(v TopicRuleErrorActionTimestream) *TopicRuleErrorActionTimestreamTimestamp { return v.Timestamp })
	return pulumix.GPtrOutput[TopicRuleErrorActionTimestreamTimestamp, TopicRuleErrorActionTimestreamTimestampOutput]{OutputState: value.OutputState}
}

type TopicRuleErrorActionTimestreamDimension struct {
	// The name of the rule.
	Name string `pulumi:"name"`
	// The value of the HTTP header.
	Value string `pulumi:"value"`
}

type TopicRuleErrorActionTimestreamDimensionArgs struct {
	// The name of the rule.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the HTTP header.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (TopicRuleErrorActionTimestreamDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionTimestreamDimension)(nil)).Elem()
}

func (i TopicRuleErrorActionTimestreamDimensionArgs) ToTopicRuleErrorActionTimestreamDimensionOutput() TopicRuleErrorActionTimestreamDimensionOutput {
	return i.ToTopicRuleErrorActionTimestreamDimensionOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionTimestreamDimensionArgs) ToTopicRuleErrorActionTimestreamDimensionOutputWithContext(ctx context.Context) TopicRuleErrorActionTimestreamDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionTimestreamDimensionOutput)
}

func (i *TopicRuleErrorActionTimestreamDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionTimestreamDimensionArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionTimestreamDimensionOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionTimestreamDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionTimestreamDimension)(nil)).Elem()
}

func (o TopicRuleErrorActionTimestreamDimensionOutput) ToTopicRuleErrorActionTimestreamDimensionOutput() TopicRuleErrorActionTimestreamDimensionOutput {
	return o
}

func (o TopicRuleErrorActionTimestreamDimensionOutput) ToTopicRuleErrorActionTimestreamDimensionOutputWithContext(ctx context.Context) TopicRuleErrorActionTimestreamDimensionOutput {
	return o
}

func (o TopicRuleErrorActionTimestreamDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionTimestreamDimension] {
	return pulumix.Output[TopicRuleErrorActionTimestreamDimension]{
		OutputState: o.OutputState,
	}
}

// The name of the rule.
func (o TopicRuleErrorActionTimestreamDimensionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestreamDimension](o, func(v TopicRuleErrorActionTimestreamDimension) string { return v.Name })
}

// The value of the HTTP header.
func (o TopicRuleErrorActionTimestreamDimensionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestreamDimension](o, func(v TopicRuleErrorActionTimestreamDimension) string { return v.Value })
}

type TopicRuleErrorActionTimestreamTimestamp struct {
	// The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.
	Unit string `pulumi:"unit"`
	// The value of the HTTP header.
	Value string `pulumi:"value"`
}

type TopicRuleErrorActionTimestreamTimestampArgs struct {
	// The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The value of the HTTP header.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (TopicRuleErrorActionTimestreamTimestampArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionTimestreamTimestamp)(nil)).Elem()
}

func (i TopicRuleErrorActionTimestreamTimestampArgs) ToTopicRuleErrorActionTimestreamTimestampOutput() TopicRuleErrorActionTimestreamTimestampOutput {
	return i.ToTopicRuleErrorActionTimestreamTimestampOutputWithContext(context.Background())
}

func (i TopicRuleErrorActionTimestreamTimestampArgs) ToTopicRuleErrorActionTimestreamTimestampOutputWithContext(ctx context.Context) TopicRuleErrorActionTimestreamTimestampOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleErrorActionTimestreamTimestampOutput)
}

func (i *TopicRuleErrorActionTimestreamTimestampArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleErrorActionTimestreamTimestampArgs] {
	return pulumix.Val(i)
}

type TopicRuleErrorActionTimestreamTimestampOutput struct{ *pulumi.OutputState }

func (TopicRuleErrorActionTimestreamTimestampOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleErrorActionTimestreamTimestamp)(nil)).Elem()
}

func (o TopicRuleErrorActionTimestreamTimestampOutput) ToTopicRuleErrorActionTimestreamTimestampOutput() TopicRuleErrorActionTimestreamTimestampOutput {
	return o
}

func (o TopicRuleErrorActionTimestreamTimestampOutput) ToTopicRuleErrorActionTimestreamTimestampOutputWithContext(ctx context.Context) TopicRuleErrorActionTimestreamTimestampOutput {
	return o
}

func (o TopicRuleErrorActionTimestreamTimestampOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleErrorActionTimestreamTimestamp] {
	return pulumix.Output[TopicRuleErrorActionTimestreamTimestamp]{
		OutputState: o.OutputState,
	}
}

// The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.
func (o TopicRuleErrorActionTimestreamTimestampOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestreamTimestamp](o, func(v TopicRuleErrorActionTimestreamTimestamp) string { return v.Unit })
}

// The value of the HTTP header.
func (o TopicRuleErrorActionTimestreamTimestampOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleErrorActionTimestreamTimestamp](o, func(v TopicRuleErrorActionTimestreamTimestamp) string { return v.Value })
}

type TopicRuleFirehose struct {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	BatchMode *bool `pulumi:"batchMode"`
	// The delivery stream name.
	DeliveryStreamName string `pulumi:"deliveryStreamName"`
	// The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
	RoleArn string `pulumi:"roleArn"`
	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	Separator *string `pulumi:"separator"`
}

type TopicRuleFirehoseArgs struct {
	// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
	BatchMode pulumix.Input[*bool] `pulumi:"batchMode"`
	// The delivery stream name.
	DeliveryStreamName pulumix.Input[string] `pulumi:"deliveryStreamName"`
	// The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	Separator pulumix.Input[*string] `pulumi:"separator"`
}

func (TopicRuleFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleFirehose)(nil)).Elem()
}

func (i TopicRuleFirehoseArgs) ToTopicRuleFirehoseOutput() TopicRuleFirehoseOutput {
	return i.ToTopicRuleFirehoseOutputWithContext(context.Background())
}

func (i TopicRuleFirehoseArgs) ToTopicRuleFirehoseOutputWithContext(ctx context.Context) TopicRuleFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleFirehoseOutput)
}

func (i *TopicRuleFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleFirehoseArgs] {
	return pulumix.Val(i)
}

type TopicRuleFirehoseOutput struct{ *pulumi.OutputState }

func (TopicRuleFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleFirehose)(nil)).Elem()
}

func (o TopicRuleFirehoseOutput) ToTopicRuleFirehoseOutput() TopicRuleFirehoseOutput {
	return o
}

func (o TopicRuleFirehoseOutput) ToTopicRuleFirehoseOutputWithContext(ctx context.Context) TopicRuleFirehoseOutput {
	return o
}

func (o TopicRuleFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleFirehose] {
	return pulumix.Output[TopicRuleFirehose]{
		OutputState: o.OutputState,
	}
}

// The payload that contains a JSON array of records will be sent to Kinesis Firehose via a batch call.
func (o TopicRuleFirehoseOutput) BatchMode() pulumix.Output[*bool] {
	return pulumix.Apply[TopicRuleFirehose](o, func(v TopicRuleFirehose) *bool { return v.BatchMode })
}

// The delivery stream name.
func (o TopicRuleFirehoseOutput) DeliveryStreamName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleFirehose](o, func(v TopicRuleFirehose) string { return v.DeliveryStreamName })
}

// The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
func (o TopicRuleFirehoseOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleFirehose](o, func(v TopicRuleFirehose) string { return v.RoleArn })
}

// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
func (o TopicRuleFirehoseOutput) Separator() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleFirehose](o, func(v TopicRuleFirehose) *string { return v.Separator })
}

type TopicRuleHttp struct {
	// The HTTPS URL used to verify ownership of `url`.
	ConfirmationUrl *string `pulumi:"confirmationUrl"`
	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	HttpHeaders []TopicRuleHttpHttpHeader `pulumi:"httpHeaders"`
	// The HTTPS URL.
	Url string `pulumi:"url"`
}

type TopicRuleHttpArgs struct {
	// The HTTPS URL used to verify ownership of `url`.
	ConfirmationUrl pulumix.Input[*string] `pulumi:"confirmationUrl"`
	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	HttpHeaders pulumix.Input[[]*TopicRuleHttpHttpHeaderArgs] `pulumi:"httpHeaders"`
	// The HTTPS URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (TopicRuleHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleHttp)(nil)).Elem()
}

func (i TopicRuleHttpArgs) ToTopicRuleHttpOutput() TopicRuleHttpOutput {
	return i.ToTopicRuleHttpOutputWithContext(context.Background())
}

func (i TopicRuleHttpArgs) ToTopicRuleHttpOutputWithContext(ctx context.Context) TopicRuleHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleHttpOutput)
}

func (i *TopicRuleHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleHttpArgs] {
	return pulumix.Val(i)
}

type TopicRuleHttpOutput struct{ *pulumi.OutputState }

func (TopicRuleHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleHttp)(nil)).Elem()
}

func (o TopicRuleHttpOutput) ToTopicRuleHttpOutput() TopicRuleHttpOutput {
	return o
}

func (o TopicRuleHttpOutput) ToTopicRuleHttpOutputWithContext(ctx context.Context) TopicRuleHttpOutput {
	return o
}

func (o TopicRuleHttpOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleHttp] {
	return pulumix.Output[TopicRuleHttp]{
		OutputState: o.OutputState,
	}
}

// The HTTPS URL used to verify ownership of `url`.
func (o TopicRuleHttpOutput) ConfirmationUrl() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleHttp](o, func(v TopicRuleHttp) *string { return v.ConfirmationUrl })
}

// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
func (o TopicRuleHttpOutput) HttpHeaders() pulumix.GArrayOutput[TopicRuleHttpHttpHeader, TopicRuleHttpHttpHeaderOutput] {
	value := pulumix.Apply[TopicRuleHttp](o, func(v TopicRuleHttp) []TopicRuleHttpHttpHeader { return v.HttpHeaders })
	return pulumix.GArrayOutput[TopicRuleHttpHttpHeader, TopicRuleHttpHttpHeaderOutput]{OutputState: value.OutputState}
}

// The HTTPS URL.
func (o TopicRuleHttpOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleHttp](o, func(v TopicRuleHttp) string { return v.Url })
}

type TopicRuleHttpHttpHeader struct {
	// The name of the HTTP header.
	Key string `pulumi:"key"`
	// The value of the HTTP header.
	Value string `pulumi:"value"`
}

type TopicRuleHttpHttpHeaderArgs struct {
	// The name of the HTTP header.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value of the HTTP header.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (TopicRuleHttpHttpHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleHttpHttpHeader)(nil)).Elem()
}

func (i TopicRuleHttpHttpHeaderArgs) ToTopicRuleHttpHttpHeaderOutput() TopicRuleHttpHttpHeaderOutput {
	return i.ToTopicRuleHttpHttpHeaderOutputWithContext(context.Background())
}

func (i TopicRuleHttpHttpHeaderArgs) ToTopicRuleHttpHttpHeaderOutputWithContext(ctx context.Context) TopicRuleHttpHttpHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleHttpHttpHeaderOutput)
}

func (i *TopicRuleHttpHttpHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleHttpHttpHeaderArgs] {
	return pulumix.Val(i)
}

type TopicRuleHttpHttpHeaderOutput struct{ *pulumi.OutputState }

func (TopicRuleHttpHttpHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleHttpHttpHeader)(nil)).Elem()
}

func (o TopicRuleHttpHttpHeaderOutput) ToTopicRuleHttpHttpHeaderOutput() TopicRuleHttpHttpHeaderOutput {
	return o
}

func (o TopicRuleHttpHttpHeaderOutput) ToTopicRuleHttpHttpHeaderOutputWithContext(ctx context.Context) TopicRuleHttpHttpHeaderOutput {
	return o
}

func (o TopicRuleHttpHttpHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleHttpHttpHeader] {
	return pulumix.Output[TopicRuleHttpHttpHeader]{
		OutputState: o.OutputState,
	}
}

// The name of the HTTP header.
func (o TopicRuleHttpHttpHeaderOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleHttpHttpHeader](o, func(v TopicRuleHttpHttpHeader) string { return v.Key })
}

// The value of the HTTP header.
func (o TopicRuleHttpHttpHeaderOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleHttpHttpHeader](o, func(v TopicRuleHttpHttpHeader) string { return v.Value })
}

type TopicRuleIotAnalytic struct {
	// The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.
	BatchMode *bool `pulumi:"batchMode"`
	// Name of AWS IOT Analytics channel.
	ChannelName string `pulumi:"channelName"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleIotAnalyticArgs struct {
	// The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.
	BatchMode pulumix.Input[*bool] `pulumi:"batchMode"`
	// Name of AWS IOT Analytics channel.
	ChannelName pulumix.Input[string] `pulumi:"channelName"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleIotAnalyticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleIotAnalytic)(nil)).Elem()
}

func (i TopicRuleIotAnalyticArgs) ToTopicRuleIotAnalyticOutput() TopicRuleIotAnalyticOutput {
	return i.ToTopicRuleIotAnalyticOutputWithContext(context.Background())
}

func (i TopicRuleIotAnalyticArgs) ToTopicRuleIotAnalyticOutputWithContext(ctx context.Context) TopicRuleIotAnalyticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleIotAnalyticOutput)
}

func (i *TopicRuleIotAnalyticArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleIotAnalyticArgs] {
	return pulumix.Val(i)
}

type TopicRuleIotAnalyticOutput struct{ *pulumi.OutputState }

func (TopicRuleIotAnalyticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleIotAnalytic)(nil)).Elem()
}

func (o TopicRuleIotAnalyticOutput) ToTopicRuleIotAnalyticOutput() TopicRuleIotAnalyticOutput {
	return o
}

func (o TopicRuleIotAnalyticOutput) ToTopicRuleIotAnalyticOutputWithContext(ctx context.Context) TopicRuleIotAnalyticOutput {
	return o
}

func (o TopicRuleIotAnalyticOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleIotAnalytic] {
	return pulumix.Output[TopicRuleIotAnalytic]{
		OutputState: o.OutputState,
	}
}

// The payload that contains a JSON array of records will be sent to IoT Analytics via a batch call.
func (o TopicRuleIotAnalyticOutput) BatchMode() pulumix.Output[*bool] {
	return pulumix.Apply[TopicRuleIotAnalytic](o, func(v TopicRuleIotAnalytic) *bool { return v.BatchMode })
}

// Name of AWS IOT Analytics channel.
func (o TopicRuleIotAnalyticOutput) ChannelName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleIotAnalytic](o, func(v TopicRuleIotAnalytic) string { return v.ChannelName })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleIotAnalyticOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleIotAnalytic](o, func(v TopicRuleIotAnalytic) string { return v.RoleArn })
}

type TopicRuleIotEvent struct {
	// The payload that contains a JSON array of records will be sent to IoT Events via a batch call.
	BatchMode *bool `pulumi:"batchMode"`
	// The name of the AWS IoT Events input.
	InputName string `pulumi:"inputName"`
	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	MessageId *string `pulumi:"messageId"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleIotEventArgs struct {
	// The payload that contains a JSON array of records will be sent to IoT Events via a batch call.
	BatchMode pulumix.Input[*bool] `pulumi:"batchMode"`
	// The name of the AWS IoT Events input.
	InputName pulumix.Input[string] `pulumi:"inputName"`
	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	MessageId pulumix.Input[*string] `pulumi:"messageId"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleIotEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleIotEvent)(nil)).Elem()
}

func (i TopicRuleIotEventArgs) ToTopicRuleIotEventOutput() TopicRuleIotEventOutput {
	return i.ToTopicRuleIotEventOutputWithContext(context.Background())
}

func (i TopicRuleIotEventArgs) ToTopicRuleIotEventOutputWithContext(ctx context.Context) TopicRuleIotEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleIotEventOutput)
}

func (i *TopicRuleIotEventArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleIotEventArgs] {
	return pulumix.Val(i)
}

type TopicRuleIotEventOutput struct{ *pulumi.OutputState }

func (TopicRuleIotEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleIotEvent)(nil)).Elem()
}

func (o TopicRuleIotEventOutput) ToTopicRuleIotEventOutput() TopicRuleIotEventOutput {
	return o
}

func (o TopicRuleIotEventOutput) ToTopicRuleIotEventOutputWithContext(ctx context.Context) TopicRuleIotEventOutput {
	return o
}

func (o TopicRuleIotEventOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleIotEvent] {
	return pulumix.Output[TopicRuleIotEvent]{
		OutputState: o.OutputState,
	}
}

// The payload that contains a JSON array of records will be sent to IoT Events via a batch call.
func (o TopicRuleIotEventOutput) BatchMode() pulumix.Output[*bool] {
	return pulumix.Apply[TopicRuleIotEvent](o, func(v TopicRuleIotEvent) *bool { return v.BatchMode })
}

// The name of the AWS IoT Events input.
func (o TopicRuleIotEventOutput) InputName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleIotEvent](o, func(v TopicRuleIotEvent) string { return v.InputName })
}

// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
func (o TopicRuleIotEventOutput) MessageId() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleIotEvent](o, func(v TopicRuleIotEvent) *string { return v.MessageId })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleIotEventOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleIotEvent](o, func(v TopicRuleIotEvent) string { return v.RoleArn })
}

type TopicRuleKafka struct {
	// Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).
	ClientProperties map[string]string `pulumi:"clientProperties"`
	// The ARN of Kafka action's VPC `iot.TopicRuleDestination` .
	DestinationArn string `pulumi:"destinationArn"`
	// The Kafka message key.
	Key *string `pulumi:"key"`
	// The Kafka message partition.
	Partition *string `pulumi:"partition"`
	// The Kafka topic for messages to be sent to the Kafka broker.
	Topic string `pulumi:"topic"`
}

type TopicRuleKafkaArgs struct {
	// Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).
	ClientProperties pulumix.Input[map[string]string] `pulumi:"clientProperties"`
	// The ARN of Kafka action's VPC `iot.TopicRuleDestination` .
	DestinationArn pulumix.Input[string] `pulumi:"destinationArn"`
	// The Kafka message key.
	Key pulumix.Input[*string] `pulumi:"key"`
	// The Kafka message partition.
	Partition pulumix.Input[*string] `pulumi:"partition"`
	// The Kafka topic for messages to be sent to the Kafka broker.
	Topic pulumix.Input[string] `pulumi:"topic"`
}

func (TopicRuleKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleKafka)(nil)).Elem()
}

func (i TopicRuleKafkaArgs) ToTopicRuleKafkaOutput() TopicRuleKafkaOutput {
	return i.ToTopicRuleKafkaOutputWithContext(context.Background())
}

func (i TopicRuleKafkaArgs) ToTopicRuleKafkaOutputWithContext(ctx context.Context) TopicRuleKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleKafkaOutput)
}

func (i *TopicRuleKafkaArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleKafkaArgs] {
	return pulumix.Val(i)
}

type TopicRuleKafkaOutput struct{ *pulumi.OutputState }

func (TopicRuleKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleKafka)(nil)).Elem()
}

func (o TopicRuleKafkaOutput) ToTopicRuleKafkaOutput() TopicRuleKafkaOutput {
	return o
}

func (o TopicRuleKafkaOutput) ToTopicRuleKafkaOutputWithContext(ctx context.Context) TopicRuleKafkaOutput {
	return o
}

func (o TopicRuleKafkaOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleKafka] {
	return pulumix.Output[TopicRuleKafka]{
		OutputState: o.OutputState,
	}
}

// Properties of the Apache Kafka producer client. For more info, see the [AWS documentation](https://docs.aws.amazon.com/iot/latest/developerguide/apache-kafka-rule-action.html).
func (o TopicRuleKafkaOutput) ClientProperties() pulumix.MapOutput[string] {
	value := pulumix.Apply[TopicRuleKafka](o, func(v TopicRuleKafka) map[string]string { return v.ClientProperties })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The ARN of Kafka action's VPC `iot.TopicRuleDestination` .
func (o TopicRuleKafkaOutput) DestinationArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleKafka](o, func(v TopicRuleKafka) string { return v.DestinationArn })
}

// The Kafka message key.
func (o TopicRuleKafkaOutput) Key() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleKafka](o, func(v TopicRuleKafka) *string { return v.Key })
}

// The Kafka message partition.
func (o TopicRuleKafkaOutput) Partition() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleKafka](o, func(v TopicRuleKafka) *string { return v.Partition })
}

// The Kafka topic for messages to be sent to the Kafka broker.
func (o TopicRuleKafkaOutput) Topic() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleKafka](o, func(v TopicRuleKafka) string { return v.Topic })
}

type TopicRuleKinesis struct {
	// The partition key.
	PartitionKey *string `pulumi:"partitionKey"`
	// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
	RoleArn string `pulumi:"roleArn"`
	// The name of the Amazon Kinesis stream.
	StreamName string `pulumi:"streamName"`
}

type TopicRuleKinesisArgs struct {
	// The partition key.
	PartitionKey pulumix.Input[*string] `pulumi:"partitionKey"`
	// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the Amazon Kinesis stream.
	StreamName pulumix.Input[string] `pulumi:"streamName"`
}

func (TopicRuleKinesisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleKinesis)(nil)).Elem()
}

func (i TopicRuleKinesisArgs) ToTopicRuleKinesisOutput() TopicRuleKinesisOutput {
	return i.ToTopicRuleKinesisOutputWithContext(context.Background())
}

func (i TopicRuleKinesisArgs) ToTopicRuleKinesisOutputWithContext(ctx context.Context) TopicRuleKinesisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleKinesisOutput)
}

func (i *TopicRuleKinesisArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleKinesisArgs] {
	return pulumix.Val(i)
}

type TopicRuleKinesisOutput struct{ *pulumi.OutputState }

func (TopicRuleKinesisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleKinesis)(nil)).Elem()
}

func (o TopicRuleKinesisOutput) ToTopicRuleKinesisOutput() TopicRuleKinesisOutput {
	return o
}

func (o TopicRuleKinesisOutput) ToTopicRuleKinesisOutputWithContext(ctx context.Context) TopicRuleKinesisOutput {
	return o
}

func (o TopicRuleKinesisOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleKinesis] {
	return pulumix.Output[TopicRuleKinesis]{
		OutputState: o.OutputState,
	}
}

// The partition key.
func (o TopicRuleKinesisOutput) PartitionKey() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleKinesis](o, func(v TopicRuleKinesis) *string { return v.PartitionKey })
}

// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
func (o TopicRuleKinesisOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleKinesis](o, func(v TopicRuleKinesis) string { return v.RoleArn })
}

// The name of the Amazon Kinesis stream.
func (o TopicRuleKinesisOutput) StreamName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleKinesis](o, func(v TopicRuleKinesis) string { return v.StreamName })
}

type TopicRuleLambda struct {
	// The ARN of the Lambda function.
	FunctionArn string `pulumi:"functionArn"`
}

type TopicRuleLambdaArgs struct {
	// The ARN of the Lambda function.
	FunctionArn pulumix.Input[string] `pulumi:"functionArn"`
}

func (TopicRuleLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleLambda)(nil)).Elem()
}

func (i TopicRuleLambdaArgs) ToTopicRuleLambdaOutput() TopicRuleLambdaOutput {
	return i.ToTopicRuleLambdaOutputWithContext(context.Background())
}

func (i TopicRuleLambdaArgs) ToTopicRuleLambdaOutputWithContext(ctx context.Context) TopicRuleLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleLambdaOutput)
}

func (i *TopicRuleLambdaArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleLambdaArgs] {
	return pulumix.Val(i)
}

type TopicRuleLambdaOutput struct{ *pulumi.OutputState }

func (TopicRuleLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleLambda)(nil)).Elem()
}

func (o TopicRuleLambdaOutput) ToTopicRuleLambdaOutput() TopicRuleLambdaOutput {
	return o
}

func (o TopicRuleLambdaOutput) ToTopicRuleLambdaOutputWithContext(ctx context.Context) TopicRuleLambdaOutput {
	return o
}

func (o TopicRuleLambdaOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleLambda] {
	return pulumix.Output[TopicRuleLambda]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Lambda function.
func (o TopicRuleLambdaOutput) FunctionArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleLambda](o, func(v TopicRuleLambda) string { return v.FunctionArn })
}

type TopicRuleRepublish struct {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	//
	// The `s3` object takes the following arguments:
	Qos *int `pulumi:"qos"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
	// The name of the MQTT topic the message should be republished to.
	Topic string `pulumi:"topic"`
}

type TopicRuleRepublishArgs struct {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	//
	// The `s3` object takes the following arguments:
	Qos pulumix.Input[*int] `pulumi:"qos"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the MQTT topic the message should be republished to.
	Topic pulumix.Input[string] `pulumi:"topic"`
}

func (TopicRuleRepublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleRepublish)(nil)).Elem()
}

func (i TopicRuleRepublishArgs) ToTopicRuleRepublishOutput() TopicRuleRepublishOutput {
	return i.ToTopicRuleRepublishOutputWithContext(context.Background())
}

func (i TopicRuleRepublishArgs) ToTopicRuleRepublishOutputWithContext(ctx context.Context) TopicRuleRepublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleRepublishOutput)
}

func (i *TopicRuleRepublishArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleRepublishArgs] {
	return pulumix.Val(i)
}

type TopicRuleRepublishOutput struct{ *pulumi.OutputState }

func (TopicRuleRepublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleRepublish)(nil)).Elem()
}

func (o TopicRuleRepublishOutput) ToTopicRuleRepublishOutput() TopicRuleRepublishOutput {
	return o
}

func (o TopicRuleRepublishOutput) ToTopicRuleRepublishOutputWithContext(ctx context.Context) TopicRuleRepublishOutput {
	return o
}

func (o TopicRuleRepublishOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleRepublish] {
	return pulumix.Output[TopicRuleRepublish]{
		OutputState: o.OutputState,
	}
}

// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
//
// The `s3` object takes the following arguments:
func (o TopicRuleRepublishOutput) Qos() pulumix.Output[*int] {
	return pulumix.Apply[TopicRuleRepublish](o, func(v TopicRuleRepublish) *int { return v.Qos })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleRepublishOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleRepublish](o, func(v TopicRuleRepublish) string { return v.RoleArn })
}

// The name of the MQTT topic the message should be republished to.
func (o TopicRuleRepublishOutput) Topic() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleRepublish](o, func(v TopicRuleRepublish) string { return v.Topic })
}

type TopicRuleS3 struct {
	// The Amazon S3 bucket name.
	BucketName string `pulumi:"bucketName"`
	// The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
	CannedAcl *string `pulumi:"cannedAcl"`
	// The name of the HTTP header.
	Key string `pulumi:"key"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn string `pulumi:"roleArn"`
}

type TopicRuleS3Args struct {
	// The Amazon S3 bucket name.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
	CannedAcl pulumix.Input[*string] `pulumi:"cannedAcl"`
	// The name of the HTTP header.
	Key pulumix.Input[string] `pulumi:"key"`
	// The IAM role ARN that allows access to the CloudWatch alarm.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
}

func (TopicRuleS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleS3)(nil)).Elem()
}

func (i TopicRuleS3Args) ToTopicRuleS3Output() TopicRuleS3Output {
	return i.ToTopicRuleS3OutputWithContext(context.Background())
}

func (i TopicRuleS3Args) ToTopicRuleS3OutputWithContext(ctx context.Context) TopicRuleS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleS3Output)
}

func (i *TopicRuleS3Args) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleS3Args] {
	return pulumix.Val(i)
}

type TopicRuleS3Output struct{ *pulumi.OutputState }

func (TopicRuleS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleS3)(nil)).Elem()
}

func (o TopicRuleS3Output) ToTopicRuleS3Output() TopicRuleS3Output {
	return o
}

func (o TopicRuleS3Output) ToTopicRuleS3OutputWithContext(ctx context.Context) TopicRuleS3Output {
	return o
}

func (o TopicRuleS3Output) ToOutput(ctx context.Context) pulumix.Output[TopicRuleS3] {
	return pulumix.Output[TopicRuleS3]{
		OutputState: o.OutputState,
	}
}

// The Amazon S3 bucket name.
func (o TopicRuleS3Output) BucketName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleS3](o, func(v TopicRuleS3) string { return v.BucketName })
}

// The Amazon S3 canned ACL that controls access to the object identified by the object key. [Valid values](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
func (o TopicRuleS3Output) CannedAcl() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleS3](o, func(v TopicRuleS3) *string { return v.CannedAcl })
}

// The name of the HTTP header.
func (o TopicRuleS3Output) Key() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleS3](o, func(v TopicRuleS3) string { return v.Key })
}

// The IAM role ARN that allows access to the CloudWatch alarm.
func (o TopicRuleS3Output) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleS3](o, func(v TopicRuleS3) string { return v.RoleArn })
}

type TopicRuleSns struct {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	MessageFormat *string `pulumi:"messageFormat"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
	// The ARN of the SNS topic.
	TargetArn string `pulumi:"targetArn"`
}

type TopicRuleSnsArgs struct {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	MessageFormat pulumix.Input[*string] `pulumi:"messageFormat"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The ARN of the SNS topic.
	TargetArn pulumix.Input[string] `pulumi:"targetArn"`
}

func (TopicRuleSnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleSns)(nil)).Elem()
}

func (i TopicRuleSnsArgs) ToTopicRuleSnsOutput() TopicRuleSnsOutput {
	return i.ToTopicRuleSnsOutputWithContext(context.Background())
}

func (i TopicRuleSnsArgs) ToTopicRuleSnsOutputWithContext(ctx context.Context) TopicRuleSnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleSnsOutput)
}

func (i *TopicRuleSnsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleSnsArgs] {
	return pulumix.Val(i)
}

type TopicRuleSnsOutput struct{ *pulumi.OutputState }

func (TopicRuleSnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleSns)(nil)).Elem()
}

func (o TopicRuleSnsOutput) ToTopicRuleSnsOutput() TopicRuleSnsOutput {
	return o
}

func (o TopicRuleSnsOutput) ToTopicRuleSnsOutputWithContext(ctx context.Context) TopicRuleSnsOutput {
	return o
}

func (o TopicRuleSnsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleSns] {
	return pulumix.Output[TopicRuleSns]{
		OutputState: o.OutputState,
	}
}

// The message format of the message to publish. Accepted values are "JSON" and "RAW".
func (o TopicRuleSnsOutput) MessageFormat() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleSns](o, func(v TopicRuleSns) *string { return v.MessageFormat })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleSnsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleSns](o, func(v TopicRuleSns) string { return v.RoleArn })
}

// The ARN of the SNS topic.
func (o TopicRuleSnsOutput) TargetArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleSns](o, func(v TopicRuleSns) string { return v.TargetArn })
}

type TopicRuleSqs struct {
	// The URL of the Amazon SQS queue.
	QueueUrl string `pulumi:"queueUrl"`
	// The ARN of the IAM role that grants access.
	RoleArn string `pulumi:"roleArn"`
	// Specifies whether to use Base64 encoding.
	UseBase64 bool `pulumi:"useBase64"`
}

type TopicRuleSqsArgs struct {
	// The URL of the Amazon SQS queue.
	QueueUrl pulumix.Input[string] `pulumi:"queueUrl"`
	// The ARN of the IAM role that grants access.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Specifies whether to use Base64 encoding.
	UseBase64 pulumix.Input[bool] `pulumi:"useBase64"`
}

func (TopicRuleSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleSqs)(nil)).Elem()
}

func (i TopicRuleSqsArgs) ToTopicRuleSqsOutput() TopicRuleSqsOutput {
	return i.ToTopicRuleSqsOutputWithContext(context.Background())
}

func (i TopicRuleSqsArgs) ToTopicRuleSqsOutputWithContext(ctx context.Context) TopicRuleSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleSqsOutput)
}

func (i *TopicRuleSqsArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleSqsArgs] {
	return pulumix.Val(i)
}

type TopicRuleSqsOutput struct{ *pulumi.OutputState }

func (TopicRuleSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleSqs)(nil)).Elem()
}

func (o TopicRuleSqsOutput) ToTopicRuleSqsOutput() TopicRuleSqsOutput {
	return o
}

func (o TopicRuleSqsOutput) ToTopicRuleSqsOutputWithContext(ctx context.Context) TopicRuleSqsOutput {
	return o
}

func (o TopicRuleSqsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleSqs] {
	return pulumix.Output[TopicRuleSqs]{
		OutputState: o.OutputState,
	}
}

// The URL of the Amazon SQS queue.
func (o TopicRuleSqsOutput) QueueUrl() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleSqs](o, func(v TopicRuleSqs) string { return v.QueueUrl })
}

// The ARN of the IAM role that grants access.
func (o TopicRuleSqsOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleSqs](o, func(v TopicRuleSqs) string { return v.RoleArn })
}

// Specifies whether to use Base64 encoding.
func (o TopicRuleSqsOutput) UseBase64() pulumix.Output[bool] {
	return pulumix.Apply[TopicRuleSqs](o, func(v TopicRuleSqs) bool { return v.UseBase64 })
}

type TopicRuleStepFunction struct {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	ExecutionNamePrefix *string `pulumi:"executionNamePrefix"`
	// The ARN of the IAM role that grants access to start execution of the state machine.
	RoleArn string `pulumi:"roleArn"`
	// The name of the Step Functions state machine whose execution will be started.
	StateMachineName string `pulumi:"stateMachineName"`
}

type TopicRuleStepFunctionArgs struct {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	ExecutionNamePrefix pulumix.Input[*string] `pulumi:"executionNamePrefix"`
	// The ARN of the IAM role that grants access to start execution of the state machine.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the Step Functions state machine whose execution will be started.
	StateMachineName pulumix.Input[string] `pulumi:"stateMachineName"`
}

func (TopicRuleStepFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleStepFunction)(nil)).Elem()
}

func (i TopicRuleStepFunctionArgs) ToTopicRuleStepFunctionOutput() TopicRuleStepFunctionOutput {
	return i.ToTopicRuleStepFunctionOutputWithContext(context.Background())
}

func (i TopicRuleStepFunctionArgs) ToTopicRuleStepFunctionOutputWithContext(ctx context.Context) TopicRuleStepFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleStepFunctionOutput)
}

func (i *TopicRuleStepFunctionArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleStepFunctionArgs] {
	return pulumix.Val(i)
}

type TopicRuleStepFunctionOutput struct{ *pulumi.OutputState }

func (TopicRuleStepFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleStepFunction)(nil)).Elem()
}

func (o TopicRuleStepFunctionOutput) ToTopicRuleStepFunctionOutput() TopicRuleStepFunctionOutput {
	return o
}

func (o TopicRuleStepFunctionOutput) ToTopicRuleStepFunctionOutputWithContext(ctx context.Context) TopicRuleStepFunctionOutput {
	return o
}

func (o TopicRuleStepFunctionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleStepFunction] {
	return pulumix.Output[TopicRuleStepFunction]{
		OutputState: o.OutputState,
	}
}

// The prefix used to generate, along with a UUID, the unique state machine execution name.
func (o TopicRuleStepFunctionOutput) ExecutionNamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[TopicRuleStepFunction](o, func(v TopicRuleStepFunction) *string { return v.ExecutionNamePrefix })
}

// The ARN of the IAM role that grants access to start execution of the state machine.
func (o TopicRuleStepFunctionOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleStepFunction](o, func(v TopicRuleStepFunction) string { return v.RoleArn })
}

// The name of the Step Functions state machine whose execution will be started.
func (o TopicRuleStepFunctionOutput) StateMachineName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleStepFunction](o, func(v TopicRuleStepFunction) string { return v.StateMachineName })
}

type TopicRuleTimestream struct {
	// The name of an Amazon Timestream database.
	DatabaseName string `pulumi:"databaseName"`
	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	Dimensions []TopicRuleTimestreamDimension `pulumi:"dimensions"`
	// The ARN of the role that grants permission to write to the Amazon Timestream database table.
	RoleArn string `pulumi:"roleArn"`
	// The name of the database table into which to write the measure records.
	TableName string `pulumi:"tableName"`
	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	Timestamp *TopicRuleTimestreamTimestamp `pulumi:"timestamp"`
}

type TopicRuleTimestreamArgs struct {
	// The name of an Amazon Timestream database.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	Dimensions pulumix.Input[[]*TopicRuleTimestreamDimensionArgs] `pulumi:"dimensions"`
	// The ARN of the role that grants permission to write to the Amazon Timestream database table.
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// The name of the database table into which to write the measure records.
	TableName pulumix.Input[string] `pulumi:"tableName"`
	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	Timestamp pulumix.Input[*TopicRuleTimestreamTimestampArgs] `pulumi:"timestamp"`
}

func (TopicRuleTimestreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleTimestream)(nil)).Elem()
}

func (i TopicRuleTimestreamArgs) ToTopicRuleTimestreamOutput() TopicRuleTimestreamOutput {
	return i.ToTopicRuleTimestreamOutputWithContext(context.Background())
}

func (i TopicRuleTimestreamArgs) ToTopicRuleTimestreamOutputWithContext(ctx context.Context) TopicRuleTimestreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleTimestreamOutput)
}

func (i *TopicRuleTimestreamArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleTimestreamArgs] {
	return pulumix.Val(i)
}

type TopicRuleTimestreamOutput struct{ *pulumi.OutputState }

func (TopicRuleTimestreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleTimestream)(nil)).Elem()
}

func (o TopicRuleTimestreamOutput) ToTopicRuleTimestreamOutput() TopicRuleTimestreamOutput {
	return o
}

func (o TopicRuleTimestreamOutput) ToTopicRuleTimestreamOutputWithContext(ctx context.Context) TopicRuleTimestreamOutput {
	return o
}

func (o TopicRuleTimestreamOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleTimestream] {
	return pulumix.Output[TopicRuleTimestream]{
		OutputState: o.OutputState,
	}
}

// The name of an Amazon Timestream database.
func (o TopicRuleTimestreamOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestream](o, func(v TopicRuleTimestream) string { return v.DatabaseName })
}

// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
func (o TopicRuleTimestreamOutput) Dimensions() pulumix.GArrayOutput[TopicRuleTimestreamDimension, TopicRuleTimestreamDimensionOutput] {
	value := pulumix.Apply[TopicRuleTimestream](o, func(v TopicRuleTimestream) []TopicRuleTimestreamDimension { return v.Dimensions })
	return pulumix.GArrayOutput[TopicRuleTimestreamDimension, TopicRuleTimestreamDimensionOutput]{OutputState: value.OutputState}
}

// The ARN of the role that grants permission to write to the Amazon Timestream database table.
func (o TopicRuleTimestreamOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestream](o, func(v TopicRuleTimestream) string { return v.RoleArn })
}

// The name of the database table into which to write the measure records.
func (o TopicRuleTimestreamOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestream](o, func(v TopicRuleTimestream) string { return v.TableName })
}

// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
func (o TopicRuleTimestreamOutput) Timestamp() pulumix.GPtrOutput[TopicRuleTimestreamTimestamp, TopicRuleTimestreamTimestampOutput] {
	value := pulumix.Apply[TopicRuleTimestream](o, func(v TopicRuleTimestream) *TopicRuleTimestreamTimestamp { return v.Timestamp })
	return pulumix.GPtrOutput[TopicRuleTimestreamTimestamp, TopicRuleTimestreamTimestampOutput]{OutputState: value.OutputState}
}

type TopicRuleTimestreamDimension struct {
	// The name of the rule.
	Name string `pulumi:"name"`
	// The value of the HTTP header.
	Value string `pulumi:"value"`
}

type TopicRuleTimestreamDimensionArgs struct {
	// The name of the rule.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the HTTP header.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (TopicRuleTimestreamDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleTimestreamDimension)(nil)).Elem()
}

func (i TopicRuleTimestreamDimensionArgs) ToTopicRuleTimestreamDimensionOutput() TopicRuleTimestreamDimensionOutput {
	return i.ToTopicRuleTimestreamDimensionOutputWithContext(context.Background())
}

func (i TopicRuleTimestreamDimensionArgs) ToTopicRuleTimestreamDimensionOutputWithContext(ctx context.Context) TopicRuleTimestreamDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleTimestreamDimensionOutput)
}

func (i *TopicRuleTimestreamDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleTimestreamDimensionArgs] {
	return pulumix.Val(i)
}

type TopicRuleTimestreamDimensionOutput struct{ *pulumi.OutputState }

func (TopicRuleTimestreamDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleTimestreamDimension)(nil)).Elem()
}

func (o TopicRuleTimestreamDimensionOutput) ToTopicRuleTimestreamDimensionOutput() TopicRuleTimestreamDimensionOutput {
	return o
}

func (o TopicRuleTimestreamDimensionOutput) ToTopicRuleTimestreamDimensionOutputWithContext(ctx context.Context) TopicRuleTimestreamDimensionOutput {
	return o
}

func (o TopicRuleTimestreamDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleTimestreamDimension] {
	return pulumix.Output[TopicRuleTimestreamDimension]{
		OutputState: o.OutputState,
	}
}

// The name of the rule.
func (o TopicRuleTimestreamDimensionOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestreamDimension](o, func(v TopicRuleTimestreamDimension) string { return v.Name })
}

// The value of the HTTP header.
func (o TopicRuleTimestreamDimensionOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestreamDimension](o, func(v TopicRuleTimestreamDimension) string { return v.Value })
}

type TopicRuleTimestreamTimestamp struct {
	// The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.
	Unit string `pulumi:"unit"`
	// The value of the HTTP header.
	Value string `pulumi:"value"`
}

type TopicRuleTimestreamTimestampArgs struct {
	// The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.
	Unit pulumix.Input[string] `pulumi:"unit"`
	// The value of the HTTP header.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (TopicRuleTimestreamTimestampArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleTimestreamTimestamp)(nil)).Elem()
}

func (i TopicRuleTimestreamTimestampArgs) ToTopicRuleTimestreamTimestampOutput() TopicRuleTimestreamTimestampOutput {
	return i.ToTopicRuleTimestreamTimestampOutputWithContext(context.Background())
}

func (i TopicRuleTimestreamTimestampArgs) ToTopicRuleTimestreamTimestampOutputWithContext(ctx context.Context) TopicRuleTimestreamTimestampOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleTimestreamTimestampOutput)
}

func (i *TopicRuleTimestreamTimestampArgs) ToOutput(ctx context.Context) pulumix.Output[*TopicRuleTimestreamTimestampArgs] {
	return pulumix.Val(i)
}

type TopicRuleTimestreamTimestampOutput struct{ *pulumi.OutputState }

func (TopicRuleTimestreamTimestampOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRuleTimestreamTimestamp)(nil)).Elem()
}

func (o TopicRuleTimestreamTimestampOutput) ToTopicRuleTimestreamTimestampOutput() TopicRuleTimestreamTimestampOutput {
	return o
}

func (o TopicRuleTimestreamTimestampOutput) ToTopicRuleTimestreamTimestampOutputWithContext(ctx context.Context) TopicRuleTimestreamTimestampOutput {
	return o
}

func (o TopicRuleTimestreamTimestampOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRuleTimestreamTimestamp] {
	return pulumix.Output[TopicRuleTimestreamTimestamp]{
		OutputState: o.OutputState,
	}
}

// The precision of the timestamp value that results from the expression described in value. Valid values: `SECONDS`, `MILLISECONDS`, `MICROSECONDS`, `NANOSECONDS`.
func (o TopicRuleTimestreamTimestampOutput) Unit() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestreamTimestamp](o, func(v TopicRuleTimestreamTimestamp) string { return v.Unit })
}

// The value of the HTTP header.
func (o TopicRuleTimestreamTimestampOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[TopicRuleTimestreamTimestamp](o, func(v TopicRuleTimestreamTimestamp) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(IndexingConfigurationThingGroupIndexingConfigurationOutput{})
	pulumi.RegisterOutputType(IndexingConfigurationThingGroupIndexingConfigurationCustomFieldOutput{})
	pulumi.RegisterOutputType(IndexingConfigurationThingGroupIndexingConfigurationManagedFieldOutput{})
	pulumi.RegisterOutputType(IndexingConfigurationThingIndexingConfigurationOutput{})
	pulumi.RegisterOutputType(IndexingConfigurationThingIndexingConfigurationCustomFieldOutput{})
	pulumi.RegisterOutputType(IndexingConfigurationThingIndexingConfigurationManagedFieldOutput{})
	pulumi.RegisterOutputType(ProvisioningTemplatePreProvisioningHookOutput{})
	pulumi.RegisterOutputType(ThingGroupMetadataOutput{})
	pulumi.RegisterOutputType(ThingGroupMetadataRootToParentGroupOutput{})
	pulumi.RegisterOutputType(ThingGroupPropertiesOutput{})
	pulumi.RegisterOutputType(ThingGroupPropertiesAttributePayloadOutput{})
	pulumi.RegisterOutputType(ThingTypePropertiesOutput{})
	pulumi.RegisterOutputType(TopicRuleCloudwatchAlarmOutput{})
	pulumi.RegisterOutputType(TopicRuleCloudwatchLogOutput{})
	pulumi.RegisterOutputType(TopicRuleCloudwatchMetricOutput{})
	pulumi.RegisterOutputType(TopicRuleDestinationVpcConfigurationOutput{})
	pulumi.RegisterOutputType(TopicRuleDynamodbOutput{})
	pulumi.RegisterOutputType(TopicRuleDynamodbv2Output{})
	pulumi.RegisterOutputType(TopicRuleDynamodbv2PutItemOutput{})
	pulumi.RegisterOutputType(TopicRuleElasticsearchOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionCloudwatchAlarmOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionCloudwatchLogsOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionCloudwatchMetricOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionDynamodbOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionDynamodbv2Output{})
	pulumi.RegisterOutputType(TopicRuleErrorActionDynamodbv2PutItemOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionElasticsearchOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionFirehoseOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionHttpOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionHttpHttpHeaderOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionIotAnalyticsOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionIotEventsOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionKafkaOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionKinesisOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionLambdaOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionRepublishOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionS3Output{})
	pulumi.RegisterOutputType(TopicRuleErrorActionSnsOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionSqsOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionStepFunctionsOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionTimestreamOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionTimestreamDimensionOutput{})
	pulumi.RegisterOutputType(TopicRuleErrorActionTimestreamTimestampOutput{})
	pulumi.RegisterOutputType(TopicRuleFirehoseOutput{})
	pulumi.RegisterOutputType(TopicRuleHttpOutput{})
	pulumi.RegisterOutputType(TopicRuleHttpHttpHeaderOutput{})
	pulumi.RegisterOutputType(TopicRuleIotAnalyticOutput{})
	pulumi.RegisterOutputType(TopicRuleIotEventOutput{})
	pulumi.RegisterOutputType(TopicRuleKafkaOutput{})
	pulumi.RegisterOutputType(TopicRuleKinesisOutput{})
	pulumi.RegisterOutputType(TopicRuleLambdaOutput{})
	pulumi.RegisterOutputType(TopicRuleRepublishOutput{})
	pulumi.RegisterOutputType(TopicRuleS3Output{})
	pulumi.RegisterOutputType(TopicRuleSnsOutput{})
	pulumi.RegisterOutputType(TopicRuleSqsOutput{})
	pulumi.RegisterOutputType(TopicRuleStepFunctionOutput{})
	pulumi.RegisterOutputType(TopicRuleTimestreamOutput{})
	pulumi.RegisterOutputType(TopicRuleTimestreamDimensionOutput{})
	pulumi.RegisterOutputType(TopicRuleTimestreamTimestampOutput{})
}
