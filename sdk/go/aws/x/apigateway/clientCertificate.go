// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an API Gateway Client Certificate.
type ClientCertificate struct {
	pulumi.CustomResourceState

	// ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Date when the client certificate was created.
	CreatedDate pulumix.Output[string] `pulumi:"createdDate"`
	// Description of the client certificate.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Date when the client certificate will expire.
	ExpirationDate pulumix.Output[string] `pulumi:"expirationDate"`
	// The PEM-encoded public key of the client certificate.
	PemEncodedCertificate pulumix.Output[string] `pulumi:"pemEncodedCertificate"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewClientCertificate registers a new resource with the given unique name, arguments, and options.
func NewClientCertificate(ctx *pulumi.Context,
	name string, args *ClientCertificateArgs, opts ...pulumi.ResourceOption) (*ClientCertificate, error) {
	if args == nil {
		args = &ClientCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientCertificate
	err := ctx.RegisterResource("aws:apigateway/clientCertificate:ClientCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientCertificate gets an existing ClientCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientCertificateState, opts ...pulumi.ResourceOption) (*ClientCertificate, error) {
	var resource ClientCertificate
	err := ctx.ReadResource("aws:apigateway/clientCertificate:ClientCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientCertificate resources.
type clientCertificateState struct {
	// ARN
	Arn *string `pulumi:"arn"`
	// Date when the client certificate was created.
	CreatedDate *string `pulumi:"createdDate"`
	// Description of the client certificate.
	Description *string `pulumi:"description"`
	// Date when the client certificate will expire.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The PEM-encoded public key of the client certificate.
	PemEncodedCertificate *string `pulumi:"pemEncodedCertificate"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ClientCertificateState struct {
	// ARN
	Arn pulumix.Input[*string]
	// Date when the client certificate was created.
	CreatedDate pulumix.Input[*string]
	// Description of the client certificate.
	Description pulumix.Input[*string]
	// Date when the client certificate will expire.
	ExpirationDate pulumix.Input[*string]
	// The PEM-encoded public key of the client certificate.
	PemEncodedCertificate pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ClientCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCertificateState)(nil)).Elem()
}

type clientCertificateArgs struct {
	// Description of the client certificate.
	Description *string `pulumi:"description"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ClientCertificate resource.
type ClientCertificateArgs struct {
	// Description of the client certificate.
	Description pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCertificateArgs)(nil)).Elem()
}

type ClientCertificateOutput struct{ *pulumi.OutputState }

func (ClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateOutput) ToClientCertificateOutput() ClientCertificateOutput {
	return o
}

func (o ClientCertificateOutput) ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput {
	return o
}

func (o ClientCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[ClientCertificate] {
	return pulumix.Output[ClientCertificate]{
		OutputState: o.OutputState,
	}
}

// ARN
func (o ClientCertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Date when the client certificate was created.
func (o ClientCertificateOutput) CreatedDate() pulumix.Output[string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.Output[string] { return v.CreatedDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the client certificate.
func (o ClientCertificateOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Date when the client certificate will expire.
func (o ClientCertificateOutput) ExpirationDate() pulumix.Output[string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.Output[string] { return v.ExpirationDate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The PEM-encoded public key of the client certificate.
func (o ClientCertificateOutput) PemEncodedCertificate() pulumix.Output[string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.Output[string] { return v.PemEncodedCertificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClientCertificateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClientCertificateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClientCertificate](o, func(v ClientCertificate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClientCertificateOutput{})
}
