// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a MemoryDB ACL.
//
// More information about users and ACL-s can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/clusters.acls.html).
type Acl struct {
	pulumi.CustomResourceState

	// The ARN of the ACL.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The minimum engine version supported by the ACL.
	MinimumEngineVersion pulumix.Output[string] `pulumi:"minimumEngineVersion"`
	// Name of the ACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Set of MemoryDB user names to be included in this ACL.
	UserNames pulumix.ArrayOutput[string] `pulumi:"userNames"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		args = &AclArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("aws:memorydb/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("aws:memorydb/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	// The ARN of the ACL.
	Arn *string `pulumi:"arn"`
	// The minimum engine version supported by the ACL.
	MinimumEngineVersion *string `pulumi:"minimumEngineVersion"`
	// Name of the ACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Set of MemoryDB user names to be included in this ACL.
	UserNames []string `pulumi:"userNames"`
}

type AclState struct {
	// The ARN of the ACL.
	Arn pulumix.Input[*string]
	// The minimum engine version supported by the ACL.
	MinimumEngineVersion pulumix.Input[*string]
	// Name of the ACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Set of MemoryDB user names to be included in this ACL.
	UserNames pulumix.Input[[]string]
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// Name of the ACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Set of MemoryDB user names to be included in this ACL.
	UserNames []string `pulumi:"userNames"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	// Name of the ACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Set of MemoryDB user names to be included in this ACL.
	UserNames pulumix.Input[[]string]
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

func (o AclOutput) ToOutput(ctx context.Context) pulumix.Output[Acl] {
	return pulumix.Output[Acl]{
		OutputState: o.OutputState,
	}
}

// The ARN of the ACL.
func (o AclOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The minimum engine version supported by the ACL.
func (o AclOutput) MinimumEngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.Output[string] { return v.MinimumEngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the ACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o AclOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o AclOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AclOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AclOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Set of MemoryDB user names to be included in this ACL.
func (o AclOutput) UserNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Acl](o, func(v Acl) pulumix.ArrayOutput[string] { return v.UserNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AclOutput{})
}
