// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates a certificate with an AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority). An ACM PCA Certificate Authority is unable to issue certificates until it has a certificate associated with it. A root level ACM PCA Certificate Authority is able to self-sign its own root certificate.
type CertificateAuthorityCertificate struct {
	pulumi.CustomResourceState

	// PEM-encoded certificate for the Certificate Authority.
	Certificate pulumix.Output[string] `pulumi:"certificate"`
	// ARN of the Certificate Authority.
	CertificateAuthorityArn pulumix.Output[string] `pulumi:"certificateAuthorityArn"`
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
	CertificateChain pulumix.Output[*string] `pulumi:"certificateChain"`
}

// NewCertificateAuthorityCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthorityCertificate(ctx *pulumi.Context,
	name string, args *CertificateAuthorityCertificateArgs, opts ...pulumi.ResourceOption) (*CertificateAuthorityCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.CertificateAuthorityArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateAuthorityCertificate
	err := ctx.RegisterResource("aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthorityCertificate gets an existing CertificateAuthorityCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthorityCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthorityCertificateState, opts ...pulumi.ResourceOption) (*CertificateAuthorityCertificate, error) {
	var resource CertificateAuthorityCertificate
	err := ctx.ReadResource("aws:acmpca/certificateAuthorityCertificate:CertificateAuthorityCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthorityCertificate resources.
type certificateAuthorityCertificateState struct {
	// PEM-encoded certificate for the Certificate Authority.
	Certificate *string `pulumi:"certificate"`
	// ARN of the Certificate Authority.
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
	CertificateChain *string `pulumi:"certificateChain"`
}

type CertificateAuthorityCertificateState struct {
	// PEM-encoded certificate for the Certificate Authority.
	Certificate pulumix.Input[*string]
	// ARN of the Certificate Authority.
	CertificateAuthorityArn pulumix.Input[*string]
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
	CertificateChain pulumix.Input[*string]
}

func (CertificateAuthorityCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityCertificateState)(nil)).Elem()
}

type certificateAuthorityCertificateArgs struct {
	// PEM-encoded certificate for the Certificate Authority.
	Certificate string `pulumi:"certificate"`
	// ARN of the Certificate Authority.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
	CertificateChain *string `pulumi:"certificateChain"`
}

// The set of arguments for constructing a CertificateAuthorityCertificate resource.
type CertificateAuthorityCertificateArgs struct {
	// PEM-encoded certificate for the Certificate Authority.
	Certificate pulumix.Input[string]
	// ARN of the Certificate Authority.
	CertificateAuthorityArn pulumix.Input[string]
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
	CertificateChain pulumix.Input[*string]
}

func (CertificateAuthorityCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityCertificateArgs)(nil)).Elem()
}

type CertificateAuthorityCertificateOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityCertificate)(nil)).Elem()
}

func (o CertificateAuthorityCertificateOutput) ToCertificateAuthorityCertificateOutput() CertificateAuthorityCertificateOutput {
	return o
}

func (o CertificateAuthorityCertificateOutput) ToCertificateAuthorityCertificateOutputWithContext(ctx context.Context) CertificateAuthorityCertificateOutput {
	return o
}

func (o CertificateAuthorityCertificateOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateAuthorityCertificate] {
	return pulumix.Output[CertificateAuthorityCertificate]{
		OutputState: o.OutputState,
	}
}

// PEM-encoded certificate for the Certificate Authority.
func (o CertificateAuthorityCertificateOutput) Certificate() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthorityCertificate](o, func(v CertificateAuthorityCertificate) pulumix.Output[string] { return v.Certificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the Certificate Authority.
func (o CertificateAuthorityCertificateOutput) CertificateAuthorityArn() pulumix.Output[string] {
	value := pulumix.Apply[CertificateAuthorityCertificate](o, func(v CertificateAuthorityCertificate) pulumix.Output[string] { return v.CertificateAuthorityArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.
func (o CertificateAuthorityCertificateOutput) CertificateChain() pulumix.Output[*string] {
	value := pulumix.Apply[CertificateAuthorityCertificate](o, func(v CertificateAuthorityCertificate) pulumix.Output[*string] { return v.CertificateChain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(CertificateAuthorityCertificateOutput{})
}
