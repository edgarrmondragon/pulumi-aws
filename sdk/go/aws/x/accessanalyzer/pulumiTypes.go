// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accessanalyzer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ArchiveRuleFilter struct {
	// Contains comparator.
	Contains []string `pulumi:"contains"`
	// Filter criteria.
	Criteria string `pulumi:"criteria"`
	// Equals comparator.
	Eqs []string `pulumi:"eqs"`
	// Boolean comparator.
	Exists *string `pulumi:"exists"`
	// Not Equals comparator.
	Neqs []string `pulumi:"neqs"`
}

type ArchiveRuleFilterArgs struct {
	// Contains comparator.
	Contains pulumix.Input[[]string] `pulumi:"contains"`
	// Filter criteria.
	Criteria pulumix.Input[string] `pulumi:"criteria"`
	// Equals comparator.
	Eqs pulumix.Input[[]string] `pulumi:"eqs"`
	// Boolean comparator.
	Exists pulumix.Input[*string] `pulumi:"exists"`
	// Not Equals comparator.
	Neqs pulumix.Input[[]string] `pulumi:"neqs"`
}

func (ArchiveRuleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveRuleFilter)(nil)).Elem()
}

func (i ArchiveRuleFilterArgs) ToArchiveRuleFilterOutput() ArchiveRuleFilterOutput {
	return i.ToArchiveRuleFilterOutputWithContext(context.Background())
}

func (i ArchiveRuleFilterArgs) ToArchiveRuleFilterOutputWithContext(ctx context.Context) ArchiveRuleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveRuleFilterOutput)
}

func (i *ArchiveRuleFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*ArchiveRuleFilterArgs] {
	return pulumix.Val(i)
}

type ArchiveRuleFilterOutput struct{ *pulumi.OutputState }

func (ArchiveRuleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveRuleFilter)(nil)).Elem()
}

func (o ArchiveRuleFilterOutput) ToArchiveRuleFilterOutput() ArchiveRuleFilterOutput {
	return o
}

func (o ArchiveRuleFilterOutput) ToArchiveRuleFilterOutputWithContext(ctx context.Context) ArchiveRuleFilterOutput {
	return o
}

func (o ArchiveRuleFilterOutput) ToOutput(ctx context.Context) pulumix.Output[ArchiveRuleFilter] {
	return pulumix.Output[ArchiveRuleFilter]{
		OutputState: o.OutputState,
	}
}

// Contains comparator.
func (o ArchiveRuleFilterOutput) Contains() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ArchiveRuleFilter](o, func(v ArchiveRuleFilter) []string { return v.Contains })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Filter criteria.
func (o ArchiveRuleFilterOutput) Criteria() pulumix.Output[string] {
	return pulumix.Apply[ArchiveRuleFilter](o, func(v ArchiveRuleFilter) string { return v.Criteria })
}

// Equals comparator.
func (o ArchiveRuleFilterOutput) Eqs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ArchiveRuleFilter](o, func(v ArchiveRuleFilter) []string { return v.Eqs })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Boolean comparator.
func (o ArchiveRuleFilterOutput) Exists() pulumix.Output[*string] {
	return pulumix.Apply[ArchiveRuleFilter](o, func(v ArchiveRuleFilter) *string { return v.Exists })
}

// Not Equals comparator.
func (o ArchiveRuleFilterOutput) Neqs() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ArchiveRuleFilter](o, func(v ArchiveRuleFilter) []string { return v.Neqs })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ArchiveRuleFilterOutput{})
}
