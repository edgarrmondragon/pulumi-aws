// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ConnectionAliasTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
	Update *string `pulumi:"update"`
}

type ConnectionAliasTimeoutsArgs struct {
	Create pulumix.Input[*string] `pulumi:"create"`
	Delete pulumix.Input[*string] `pulumi:"delete"`
	Update pulumix.Input[*string] `pulumi:"update"`
}

func (ConnectionAliasTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAliasTimeouts)(nil)).Elem()
}

func (i ConnectionAliasTimeoutsArgs) ToConnectionAliasTimeoutsOutput() ConnectionAliasTimeoutsOutput {
	return i.ToConnectionAliasTimeoutsOutputWithContext(context.Background())
}

func (i ConnectionAliasTimeoutsArgs) ToConnectionAliasTimeoutsOutputWithContext(ctx context.Context) ConnectionAliasTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAliasTimeoutsOutput)
}

func (i *ConnectionAliasTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectionAliasTimeoutsArgs] {
	return pulumix.Val(i)
}

type ConnectionAliasTimeoutsOutput struct{ *pulumi.OutputState }

func (ConnectionAliasTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAliasTimeouts)(nil)).Elem()
}

func (o ConnectionAliasTimeoutsOutput) ToConnectionAliasTimeoutsOutput() ConnectionAliasTimeoutsOutput {
	return o
}

func (o ConnectionAliasTimeoutsOutput) ToConnectionAliasTimeoutsOutputWithContext(ctx context.Context) ConnectionAliasTimeoutsOutput {
	return o
}

func (o ConnectionAliasTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionAliasTimeouts] {
	return pulumix.Output[ConnectionAliasTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionAliasTimeoutsOutput) Create() pulumix.Output[*string] {
	return pulumix.Apply[ConnectionAliasTimeouts](o, func(v ConnectionAliasTimeouts) *string { return v.Create })
}

func (o ConnectionAliasTimeoutsOutput) Delete() pulumix.Output[*string] {
	return pulumix.Apply[ConnectionAliasTimeouts](o, func(v ConnectionAliasTimeouts) *string { return v.Delete })
}

func (o ConnectionAliasTimeoutsOutput) Update() pulumix.Output[*string] {
	return pulumix.Apply[ConnectionAliasTimeouts](o, func(v ConnectionAliasTimeouts) *string { return v.Update })
}

type DirectorySelfServicePermissions struct {
	// Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default `false`.
	ChangeComputeType *bool `pulumi:"changeComputeType"`
	// Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default `false`.
	IncreaseVolumeSize *bool `pulumi:"increaseVolumeSize"`
	// Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default `false`.
	RebuildWorkspace *bool `pulumi:"rebuildWorkspace"`
	// Whether WorkSpaces directory users can restart their workspace. Default `true`.
	RestartWorkspace *bool `pulumi:"restartWorkspace"`
	// Whether WorkSpaces directory users can switch the running mode of their workspace. Default `false`.
	SwitchRunningMode *bool `pulumi:"switchRunningMode"`
}

type DirectorySelfServicePermissionsArgs struct {
	// Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default `false`.
	ChangeComputeType pulumix.Input[*bool] `pulumi:"changeComputeType"`
	// Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default `false`.
	IncreaseVolumeSize pulumix.Input[*bool] `pulumi:"increaseVolumeSize"`
	// Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default `false`.
	RebuildWorkspace pulumix.Input[*bool] `pulumi:"rebuildWorkspace"`
	// Whether WorkSpaces directory users can restart their workspace. Default `true`.
	RestartWorkspace pulumix.Input[*bool] `pulumi:"restartWorkspace"`
	// Whether WorkSpaces directory users can switch the running mode of their workspace. Default `false`.
	SwitchRunningMode pulumix.Input[*bool] `pulumi:"switchRunningMode"`
}

func (DirectorySelfServicePermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectorySelfServicePermissions)(nil)).Elem()
}

func (i DirectorySelfServicePermissionsArgs) ToDirectorySelfServicePermissionsOutput() DirectorySelfServicePermissionsOutput {
	return i.ToDirectorySelfServicePermissionsOutputWithContext(context.Background())
}

func (i DirectorySelfServicePermissionsArgs) ToDirectorySelfServicePermissionsOutputWithContext(ctx context.Context) DirectorySelfServicePermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectorySelfServicePermissionsOutput)
}

func (i *DirectorySelfServicePermissionsArgs) ToOutput(ctx context.Context) pulumix.Output[*DirectorySelfServicePermissionsArgs] {
	return pulumix.Val(i)
}

type DirectorySelfServicePermissionsOutput struct{ *pulumi.OutputState }

func (DirectorySelfServicePermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectorySelfServicePermissions)(nil)).Elem()
}

func (o DirectorySelfServicePermissionsOutput) ToDirectorySelfServicePermissionsOutput() DirectorySelfServicePermissionsOutput {
	return o
}

func (o DirectorySelfServicePermissionsOutput) ToDirectorySelfServicePermissionsOutputWithContext(ctx context.Context) DirectorySelfServicePermissionsOutput {
	return o
}

func (o DirectorySelfServicePermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[DirectorySelfServicePermissions] {
	return pulumix.Output[DirectorySelfServicePermissions]{
		OutputState: o.OutputState,
	}
}

// Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default `false`.
func (o DirectorySelfServicePermissionsOutput) ChangeComputeType() pulumix.Output[*bool] {
	return pulumix.Apply[DirectorySelfServicePermissions](o, func(v DirectorySelfServicePermissions) *bool { return v.ChangeComputeType })
}

// Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default `false`.
func (o DirectorySelfServicePermissionsOutput) IncreaseVolumeSize() pulumix.Output[*bool] {
	return pulumix.Apply[DirectorySelfServicePermissions](o, func(v DirectorySelfServicePermissions) *bool { return v.IncreaseVolumeSize })
}

// Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default `false`.
func (o DirectorySelfServicePermissionsOutput) RebuildWorkspace() pulumix.Output[*bool] {
	return pulumix.Apply[DirectorySelfServicePermissions](o, func(v DirectorySelfServicePermissions) *bool { return v.RebuildWorkspace })
}

// Whether WorkSpaces directory users can restart their workspace. Default `true`.
func (o DirectorySelfServicePermissionsOutput) RestartWorkspace() pulumix.Output[*bool] {
	return pulumix.Apply[DirectorySelfServicePermissions](o, func(v DirectorySelfServicePermissions) *bool { return v.RestartWorkspace })
}

// Whether WorkSpaces directory users can switch the running mode of their workspace. Default `false`.
func (o DirectorySelfServicePermissionsOutput) SwitchRunningMode() pulumix.Output[*bool] {
	return pulumix.Apply[DirectorySelfServicePermissions](o, func(v DirectorySelfServicePermissions) *bool { return v.SwitchRunningMode })
}

type DirectoryWorkspaceAccessProperties struct {
	// Indicates whether users can use Android devices to access their WorkSpaces.
	DeviceTypeAndroid *string `pulumi:"deviceTypeAndroid"`
	// Indicates whether users can use Chromebooks to access their WorkSpaces.
	DeviceTypeChromeos *string `pulumi:"deviceTypeChromeos"`
	// Indicates whether users can use iOS devices to access their WorkSpaces.
	DeviceTypeIos *string `pulumi:"deviceTypeIos"`
	// Indicates whether users can use Linux clients to access their WorkSpaces.
	DeviceTypeLinux *string `pulumi:"deviceTypeLinux"`
	// Indicates whether users can use macOS clients to access their WorkSpaces.
	DeviceTypeOsx *string `pulumi:"deviceTypeOsx"`
	// Indicates whether users can access their WorkSpaces through a web browser.
	DeviceTypeWeb *string `pulumi:"deviceTypeWeb"`
	// Indicates whether users can use Windows clients to access their WorkSpaces.
	DeviceTypeWindows *string `pulumi:"deviceTypeWindows"`
	// Indicates whether users can use zero client devices to access their WorkSpaces.
	DeviceTypeZeroclient *string `pulumi:"deviceTypeZeroclient"`
}

type DirectoryWorkspaceAccessPropertiesArgs struct {
	// Indicates whether users can use Android devices to access their WorkSpaces.
	DeviceTypeAndroid pulumix.Input[*string] `pulumi:"deviceTypeAndroid"`
	// Indicates whether users can use Chromebooks to access their WorkSpaces.
	DeviceTypeChromeos pulumix.Input[*string] `pulumi:"deviceTypeChromeos"`
	// Indicates whether users can use iOS devices to access their WorkSpaces.
	DeviceTypeIos pulumix.Input[*string] `pulumi:"deviceTypeIos"`
	// Indicates whether users can use Linux clients to access their WorkSpaces.
	DeviceTypeLinux pulumix.Input[*string] `pulumi:"deviceTypeLinux"`
	// Indicates whether users can use macOS clients to access their WorkSpaces.
	DeviceTypeOsx pulumix.Input[*string] `pulumi:"deviceTypeOsx"`
	// Indicates whether users can access their WorkSpaces through a web browser.
	DeviceTypeWeb pulumix.Input[*string] `pulumi:"deviceTypeWeb"`
	// Indicates whether users can use Windows clients to access their WorkSpaces.
	DeviceTypeWindows pulumix.Input[*string] `pulumi:"deviceTypeWindows"`
	// Indicates whether users can use zero client devices to access their WorkSpaces.
	DeviceTypeZeroclient pulumix.Input[*string] `pulumi:"deviceTypeZeroclient"`
}

func (DirectoryWorkspaceAccessPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryWorkspaceAccessProperties)(nil)).Elem()
}

func (i DirectoryWorkspaceAccessPropertiesArgs) ToDirectoryWorkspaceAccessPropertiesOutput() DirectoryWorkspaceAccessPropertiesOutput {
	return i.ToDirectoryWorkspaceAccessPropertiesOutputWithContext(context.Background())
}

func (i DirectoryWorkspaceAccessPropertiesArgs) ToDirectoryWorkspaceAccessPropertiesOutputWithContext(ctx context.Context) DirectoryWorkspaceAccessPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryWorkspaceAccessPropertiesOutput)
}

func (i *DirectoryWorkspaceAccessPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DirectoryWorkspaceAccessPropertiesArgs] {
	return pulumix.Val(i)
}

type DirectoryWorkspaceAccessPropertiesOutput struct{ *pulumi.OutputState }

func (DirectoryWorkspaceAccessPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryWorkspaceAccessProperties)(nil)).Elem()
}

func (o DirectoryWorkspaceAccessPropertiesOutput) ToDirectoryWorkspaceAccessPropertiesOutput() DirectoryWorkspaceAccessPropertiesOutput {
	return o
}

func (o DirectoryWorkspaceAccessPropertiesOutput) ToDirectoryWorkspaceAccessPropertiesOutputWithContext(ctx context.Context) DirectoryWorkspaceAccessPropertiesOutput {
	return o
}

func (o DirectoryWorkspaceAccessPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DirectoryWorkspaceAccessProperties] {
	return pulumix.Output[DirectoryWorkspaceAccessProperties]{
		OutputState: o.OutputState,
	}
}

// Indicates whether users can use Android devices to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeAndroid() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeAndroid })
}

// Indicates whether users can use Chromebooks to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeChromeos() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeChromeos })
}

// Indicates whether users can use iOS devices to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeIos() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeIos })
}

// Indicates whether users can use Linux clients to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeLinux() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeLinux })
}

// Indicates whether users can use macOS clients to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeOsx() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeOsx })
}

// Indicates whether users can access their WorkSpaces through a web browser.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeWeb() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeWeb })
}

// Indicates whether users can use Windows clients to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeWindows() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeWindows })
}

// Indicates whether users can use zero client devices to access their WorkSpaces.
func (o DirectoryWorkspaceAccessPropertiesOutput) DeviceTypeZeroclient() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceAccessProperties](o, func(v DirectoryWorkspaceAccessProperties) *string { return v.DeviceTypeZeroclient })
}

type DirectoryWorkspaceCreationProperties struct {
	// The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
	CustomSecurityGroupId *string `pulumi:"customSecurityGroupId"`
	// The default organizational unit (OU) for your WorkSpace directories. Should conform `"OU=<value>,DC=<value>,...,DC=<value>"` pattern.
	DefaultOu *string `pulumi:"defaultOu"`
	// Indicates whether internet access is enabled for your WorkSpaces.
	EnableInternetAccess *bool `pulumi:"enableInternetAccess"`
	// Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html)..
	EnableMaintenanceMode *bool `pulumi:"enableMaintenanceMode"`
	// Indicates whether users are local administrators of their WorkSpaces.
	UserEnabledAsLocalAdministrator *bool `pulumi:"userEnabledAsLocalAdministrator"`
}

type DirectoryWorkspaceCreationPropertiesArgs struct {
	// The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
	CustomSecurityGroupId pulumix.Input[*string] `pulumi:"customSecurityGroupId"`
	// The default organizational unit (OU) for your WorkSpace directories. Should conform `"OU=<value>,DC=<value>,...,DC=<value>"` pattern.
	DefaultOu pulumix.Input[*string] `pulumi:"defaultOu"`
	// Indicates whether internet access is enabled for your WorkSpaces.
	EnableInternetAccess pulumix.Input[*bool] `pulumi:"enableInternetAccess"`
	// Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html)..
	EnableMaintenanceMode pulumix.Input[*bool] `pulumi:"enableMaintenanceMode"`
	// Indicates whether users are local administrators of their WorkSpaces.
	UserEnabledAsLocalAdministrator pulumix.Input[*bool] `pulumi:"userEnabledAsLocalAdministrator"`
}

func (DirectoryWorkspaceCreationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryWorkspaceCreationProperties)(nil)).Elem()
}

func (i DirectoryWorkspaceCreationPropertiesArgs) ToDirectoryWorkspaceCreationPropertiesOutput() DirectoryWorkspaceCreationPropertiesOutput {
	return i.ToDirectoryWorkspaceCreationPropertiesOutputWithContext(context.Background())
}

func (i DirectoryWorkspaceCreationPropertiesArgs) ToDirectoryWorkspaceCreationPropertiesOutputWithContext(ctx context.Context) DirectoryWorkspaceCreationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryWorkspaceCreationPropertiesOutput)
}

func (i *DirectoryWorkspaceCreationPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*DirectoryWorkspaceCreationPropertiesArgs] {
	return pulumix.Val(i)
}

type DirectoryWorkspaceCreationPropertiesOutput struct{ *pulumi.OutputState }

func (DirectoryWorkspaceCreationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryWorkspaceCreationProperties)(nil)).Elem()
}

func (o DirectoryWorkspaceCreationPropertiesOutput) ToDirectoryWorkspaceCreationPropertiesOutput() DirectoryWorkspaceCreationPropertiesOutput {
	return o
}

func (o DirectoryWorkspaceCreationPropertiesOutput) ToDirectoryWorkspaceCreationPropertiesOutputWithContext(ctx context.Context) DirectoryWorkspaceCreationPropertiesOutput {
	return o
}

func (o DirectoryWorkspaceCreationPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DirectoryWorkspaceCreationProperties] {
	return pulumix.Output[DirectoryWorkspaceCreationProperties]{
		OutputState: o.OutputState,
	}
}

// The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
func (o DirectoryWorkspaceCreationPropertiesOutput) CustomSecurityGroupId() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceCreationProperties](o, func(v DirectoryWorkspaceCreationProperties) *string { return v.CustomSecurityGroupId })
}

// The default organizational unit (OU) for your WorkSpace directories. Should conform `"OU=<value>,DC=<value>,...,DC=<value>"` pattern.
func (o DirectoryWorkspaceCreationPropertiesOutput) DefaultOu() pulumix.Output[*string] {
	return pulumix.Apply[DirectoryWorkspaceCreationProperties](o, func(v DirectoryWorkspaceCreationProperties) *string { return v.DefaultOu })
}

// Indicates whether internet access is enabled for your WorkSpaces.
func (o DirectoryWorkspaceCreationPropertiesOutput) EnableInternetAccess() pulumix.Output[*bool] {
	return pulumix.Apply[DirectoryWorkspaceCreationProperties](o, func(v DirectoryWorkspaceCreationProperties) *bool { return v.EnableInternetAccess })
}

// Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html)..
func (o DirectoryWorkspaceCreationPropertiesOutput) EnableMaintenanceMode() pulumix.Output[*bool] {
	return pulumix.Apply[DirectoryWorkspaceCreationProperties](o, func(v DirectoryWorkspaceCreationProperties) *bool { return v.EnableMaintenanceMode })
}

// Indicates whether users are local administrators of their WorkSpaces.
func (o DirectoryWorkspaceCreationPropertiesOutput) UserEnabledAsLocalAdministrator() pulumix.Output[*bool] {
	return pulumix.Apply[DirectoryWorkspaceCreationProperties](o, func(v DirectoryWorkspaceCreationProperties) *bool { return v.UserEnabledAsLocalAdministrator })
}

type IpGroupRule struct {
	// The description of the IP group.
	Description *string `pulumi:"description"`
	// The IP address range, in CIDR notation, e.g., `10.0.0.0/16`
	Source string `pulumi:"source"`
}

type IpGroupRuleArgs struct {
	// The description of the IP group.
	Description pulumix.Input[*string] `pulumi:"description"`
	// The IP address range, in CIDR notation, e.g., `10.0.0.0/16`
	Source pulumix.Input[string] `pulumi:"source"`
}

func (IpGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpGroupRule)(nil)).Elem()
}

func (i IpGroupRuleArgs) ToIpGroupRuleOutput() IpGroupRuleOutput {
	return i.ToIpGroupRuleOutputWithContext(context.Background())
}

func (i IpGroupRuleArgs) ToIpGroupRuleOutputWithContext(ctx context.Context) IpGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupRuleOutput)
}

func (i *IpGroupRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*IpGroupRuleArgs] {
	return pulumix.Val(i)
}

type IpGroupRuleOutput struct{ *pulumi.OutputState }

func (IpGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpGroupRule)(nil)).Elem()
}

func (o IpGroupRuleOutput) ToIpGroupRuleOutput() IpGroupRuleOutput {
	return o
}

func (o IpGroupRuleOutput) ToIpGroupRuleOutputWithContext(ctx context.Context) IpGroupRuleOutput {
	return o
}

func (o IpGroupRuleOutput) ToOutput(ctx context.Context) pulumix.Output[IpGroupRule] {
	return pulumix.Output[IpGroupRule]{
		OutputState: o.OutputState,
	}
}

// The description of the IP group.
func (o IpGroupRuleOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[IpGroupRule](o, func(v IpGroupRule) *string { return v.Description })
}

// The IP address range, in CIDR notation, e.g., `10.0.0.0/16`
func (o IpGroupRuleOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[IpGroupRule](o, func(v IpGroupRule) string { return v.Source })
}

type WorkspaceWorkspaceProperties struct {
	// The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO`, `GRAPHICSPRO`, `GRAPHICS_G4DN`, and `GRAPHICSPRO_G4DN`.
	ComputeTypeName *string `pulumi:"computeTypeName"`
	// The size of the root volume.
	RootVolumeSizeGib *int `pulumi:"rootVolumeSizeGib"`
	// The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
	RunningMode *string `pulumi:"runningMode"`
	// The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
	RunningModeAutoStopTimeoutInMinutes *int `pulumi:"runningModeAutoStopTimeoutInMinutes"`
	// The size of the user storage.
	UserVolumeSizeGib *int `pulumi:"userVolumeSizeGib"`
}

type WorkspaceWorkspacePropertiesArgs struct {
	// The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO`, `GRAPHICSPRO`, `GRAPHICS_G4DN`, and `GRAPHICSPRO_G4DN`.
	ComputeTypeName pulumix.Input[*string] `pulumi:"computeTypeName"`
	// The size of the root volume.
	RootVolumeSizeGib pulumix.Input[*int] `pulumi:"rootVolumeSizeGib"`
	// The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
	RunningMode pulumix.Input[*string] `pulumi:"runningMode"`
	// The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
	RunningModeAutoStopTimeoutInMinutes pulumix.Input[*int] `pulumi:"runningModeAutoStopTimeoutInMinutes"`
	// The size of the user storage.
	UserVolumeSizeGib pulumix.Input[*int] `pulumi:"userVolumeSizeGib"`
}

func (WorkspaceWorkspacePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceWorkspaceProperties)(nil)).Elem()
}

func (i WorkspaceWorkspacePropertiesArgs) ToWorkspaceWorkspacePropertiesOutput() WorkspaceWorkspacePropertiesOutput {
	return i.ToWorkspaceWorkspacePropertiesOutputWithContext(context.Background())
}

func (i WorkspaceWorkspacePropertiesArgs) ToWorkspaceWorkspacePropertiesOutputWithContext(ctx context.Context) WorkspaceWorkspacePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceWorkspacePropertiesOutput)
}

func (i *WorkspaceWorkspacePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceWorkspacePropertiesArgs] {
	return pulumix.Val(i)
}

type WorkspaceWorkspacePropertiesOutput struct{ *pulumi.OutputState }

func (WorkspaceWorkspacePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceWorkspaceProperties)(nil)).Elem()
}

func (o WorkspaceWorkspacePropertiesOutput) ToWorkspaceWorkspacePropertiesOutput() WorkspaceWorkspacePropertiesOutput {
	return o
}

func (o WorkspaceWorkspacePropertiesOutput) ToWorkspaceWorkspacePropertiesOutputWithContext(ctx context.Context) WorkspaceWorkspacePropertiesOutput {
	return o
}

func (o WorkspaceWorkspacePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceWorkspaceProperties] {
	return pulumix.Output[WorkspaceWorkspaceProperties]{
		OutputState: o.OutputState,
	}
}

// The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO`, `GRAPHICSPRO`, `GRAPHICS_G4DN`, and `GRAPHICSPRO_G4DN`.
func (o WorkspaceWorkspacePropertiesOutput) ComputeTypeName() pulumix.Output[*string] {
	return pulumix.Apply[WorkspaceWorkspaceProperties](o, func(v WorkspaceWorkspaceProperties) *string { return v.ComputeTypeName })
}

// The size of the root volume.
func (o WorkspaceWorkspacePropertiesOutput) RootVolumeSizeGib() pulumix.Output[*int] {
	return pulumix.Apply[WorkspaceWorkspaceProperties](o, func(v WorkspaceWorkspaceProperties) *int { return v.RootVolumeSizeGib })
}

// The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
func (o WorkspaceWorkspacePropertiesOutput) RunningMode() pulumix.Output[*string] {
	return pulumix.Apply[WorkspaceWorkspaceProperties](o, func(v WorkspaceWorkspaceProperties) *string { return v.RunningMode })
}

// The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
func (o WorkspaceWorkspacePropertiesOutput) RunningModeAutoStopTimeoutInMinutes() pulumix.Output[*int] {
	return pulumix.Apply[WorkspaceWorkspaceProperties](o, func(v WorkspaceWorkspaceProperties) *int { return v.RunningModeAutoStopTimeoutInMinutes })
}

// The size of the user storage.
func (o WorkspaceWorkspacePropertiesOutput) UserVolumeSizeGib() pulumix.Output[*int] {
	return pulumix.Apply[WorkspaceWorkspaceProperties](o, func(v WorkspaceWorkspaceProperties) *int { return v.UserVolumeSizeGib })
}

type GetBundleComputeType struct {
	// Name of the bundle. You cannot combine this parameter with `bundleId`.
	Name string `pulumi:"name"`
}

type GetBundleComputeTypeArgs struct {
	// Name of the bundle. You cannot combine this parameter with `bundleId`.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetBundleComputeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleComputeType)(nil)).Elem()
}

func (i GetBundleComputeTypeArgs) ToGetBundleComputeTypeOutput() GetBundleComputeTypeOutput {
	return i.ToGetBundleComputeTypeOutputWithContext(context.Background())
}

func (i GetBundleComputeTypeArgs) ToGetBundleComputeTypeOutputWithContext(ctx context.Context) GetBundleComputeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBundleComputeTypeOutput)
}

func (i *GetBundleComputeTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBundleComputeTypeArgs] {
	return pulumix.Val(i)
}

type GetBundleComputeTypeOutput struct{ *pulumi.OutputState }

func (GetBundleComputeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleComputeType)(nil)).Elem()
}

func (o GetBundleComputeTypeOutput) ToGetBundleComputeTypeOutput() GetBundleComputeTypeOutput {
	return o
}

func (o GetBundleComputeTypeOutput) ToGetBundleComputeTypeOutputWithContext(ctx context.Context) GetBundleComputeTypeOutput {
	return o
}

func (o GetBundleComputeTypeOutput) ToOutput(ctx context.Context) pulumix.Output[GetBundleComputeType] {
	return pulumix.Output[GetBundleComputeType]{
		OutputState: o.OutputState,
	}
}

// Name of the bundle. You cannot combine this parameter with `bundleId`.
func (o GetBundleComputeTypeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetBundleComputeType](o, func(v GetBundleComputeType) string { return v.Name })
}

type GetBundleRootStorage struct {
	// Size of the user storage.
	Capacity string `pulumi:"capacity"`
}

type GetBundleRootStorageArgs struct {
	// Size of the user storage.
	Capacity pulumix.Input[string] `pulumi:"capacity"`
}

func (GetBundleRootStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleRootStorage)(nil)).Elem()
}

func (i GetBundleRootStorageArgs) ToGetBundleRootStorageOutput() GetBundleRootStorageOutput {
	return i.ToGetBundleRootStorageOutputWithContext(context.Background())
}

func (i GetBundleRootStorageArgs) ToGetBundleRootStorageOutputWithContext(ctx context.Context) GetBundleRootStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBundleRootStorageOutput)
}

func (i *GetBundleRootStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBundleRootStorageArgs] {
	return pulumix.Val(i)
}

type GetBundleRootStorageOutput struct{ *pulumi.OutputState }

func (GetBundleRootStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleRootStorage)(nil)).Elem()
}

func (o GetBundleRootStorageOutput) ToGetBundleRootStorageOutput() GetBundleRootStorageOutput {
	return o
}

func (o GetBundleRootStorageOutput) ToGetBundleRootStorageOutputWithContext(ctx context.Context) GetBundleRootStorageOutput {
	return o
}

func (o GetBundleRootStorageOutput) ToOutput(ctx context.Context) pulumix.Output[GetBundleRootStorage] {
	return pulumix.Output[GetBundleRootStorage]{
		OutputState: o.OutputState,
	}
}

// Size of the user storage.
func (o GetBundleRootStorageOutput) Capacity() pulumix.Output[string] {
	return pulumix.Apply[GetBundleRootStorage](o, func(v GetBundleRootStorage) string { return v.Capacity })
}

type GetBundleUserStorage struct {
	// Size of the user storage.
	Capacity string `pulumi:"capacity"`
}

type GetBundleUserStorageArgs struct {
	// Size of the user storage.
	Capacity pulumix.Input[string] `pulumi:"capacity"`
}

func (GetBundleUserStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleUserStorage)(nil)).Elem()
}

func (i GetBundleUserStorageArgs) ToGetBundleUserStorageOutput() GetBundleUserStorageOutput {
	return i.ToGetBundleUserStorageOutputWithContext(context.Background())
}

func (i GetBundleUserStorageArgs) ToGetBundleUserStorageOutputWithContext(ctx context.Context) GetBundleUserStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBundleUserStorageOutput)
}

func (i *GetBundleUserStorageArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBundleUserStorageArgs] {
	return pulumix.Val(i)
}

type GetBundleUserStorageOutput struct{ *pulumi.OutputState }

func (GetBundleUserStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleUserStorage)(nil)).Elem()
}

func (o GetBundleUserStorageOutput) ToGetBundleUserStorageOutput() GetBundleUserStorageOutput {
	return o
}

func (o GetBundleUserStorageOutput) ToGetBundleUserStorageOutputWithContext(ctx context.Context) GetBundleUserStorageOutput {
	return o
}

func (o GetBundleUserStorageOutput) ToOutput(ctx context.Context) pulumix.Output[GetBundleUserStorage] {
	return pulumix.Output[GetBundleUserStorage]{
		OutputState: o.OutputState,
	}
}

// Size of the user storage.
func (o GetBundleUserStorageOutput) Capacity() pulumix.Output[string] {
	return pulumix.Apply[GetBundleUserStorage](o, func(v GetBundleUserStorage) string { return v.Capacity })
}

type GetDirectorySelfServicePermission struct {
	// Whether WorkSpaces directory users can change the compute type (bundle) for their workspace.
	ChangeComputeType bool `pulumi:"changeComputeType"`
	// Whether WorkSpaces directory users can increase the volume size of the drives on their workspace.
	IncreaseVolumeSize bool `pulumi:"increaseVolumeSize"`
	// Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state.
	RebuildWorkspace bool `pulumi:"rebuildWorkspace"`
	// Whether WorkSpaces directory users can restart their workspace.
	RestartWorkspace bool `pulumi:"restartWorkspace"`
	// Whether WorkSpaces directory users can switch the running mode of their workspace.
	SwitchRunningMode bool `pulumi:"switchRunningMode"`
}

type GetDirectorySelfServicePermissionArgs struct {
	// Whether WorkSpaces directory users can change the compute type (bundle) for their workspace.
	ChangeComputeType pulumix.Input[bool] `pulumi:"changeComputeType"`
	// Whether WorkSpaces directory users can increase the volume size of the drives on their workspace.
	IncreaseVolumeSize pulumix.Input[bool] `pulumi:"increaseVolumeSize"`
	// Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state.
	RebuildWorkspace pulumix.Input[bool] `pulumi:"rebuildWorkspace"`
	// Whether WorkSpaces directory users can restart their workspace.
	RestartWorkspace pulumix.Input[bool] `pulumi:"restartWorkspace"`
	// Whether WorkSpaces directory users can switch the running mode of their workspace.
	SwitchRunningMode pulumix.Input[bool] `pulumi:"switchRunningMode"`
}

func (GetDirectorySelfServicePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectorySelfServicePermission)(nil)).Elem()
}

func (i GetDirectorySelfServicePermissionArgs) ToGetDirectorySelfServicePermissionOutput() GetDirectorySelfServicePermissionOutput {
	return i.ToGetDirectorySelfServicePermissionOutputWithContext(context.Background())
}

func (i GetDirectorySelfServicePermissionArgs) ToGetDirectorySelfServicePermissionOutputWithContext(ctx context.Context) GetDirectorySelfServicePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectorySelfServicePermissionOutput)
}

func (i *GetDirectorySelfServicePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDirectorySelfServicePermissionArgs] {
	return pulumix.Val(i)
}

type GetDirectorySelfServicePermissionOutput struct{ *pulumi.OutputState }

func (GetDirectorySelfServicePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectorySelfServicePermission)(nil)).Elem()
}

func (o GetDirectorySelfServicePermissionOutput) ToGetDirectorySelfServicePermissionOutput() GetDirectorySelfServicePermissionOutput {
	return o
}

func (o GetDirectorySelfServicePermissionOutput) ToGetDirectorySelfServicePermissionOutputWithContext(ctx context.Context) GetDirectorySelfServicePermissionOutput {
	return o
}

func (o GetDirectorySelfServicePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectorySelfServicePermission] {
	return pulumix.Output[GetDirectorySelfServicePermission]{
		OutputState: o.OutputState,
	}
}

// Whether WorkSpaces directory users can change the compute type (bundle) for their workspace.
func (o GetDirectorySelfServicePermissionOutput) ChangeComputeType() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectorySelfServicePermission](o, func(v GetDirectorySelfServicePermission) bool { return v.ChangeComputeType })
}

// Whether WorkSpaces directory users can increase the volume size of the drives on their workspace.
func (o GetDirectorySelfServicePermissionOutput) IncreaseVolumeSize() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectorySelfServicePermission](o, func(v GetDirectorySelfServicePermission) bool { return v.IncreaseVolumeSize })
}

// Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state.
func (o GetDirectorySelfServicePermissionOutput) RebuildWorkspace() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectorySelfServicePermission](o, func(v GetDirectorySelfServicePermission) bool { return v.RebuildWorkspace })
}

// Whether WorkSpaces directory users can restart their workspace.
func (o GetDirectorySelfServicePermissionOutput) RestartWorkspace() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectorySelfServicePermission](o, func(v GetDirectorySelfServicePermission) bool { return v.RestartWorkspace })
}

// Whether WorkSpaces directory users can switch the running mode of their workspace.
func (o GetDirectorySelfServicePermissionOutput) SwitchRunningMode() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectorySelfServicePermission](o, func(v GetDirectorySelfServicePermission) bool { return v.SwitchRunningMode })
}

type GetDirectoryWorkspaceAccessProperty struct {
	// (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
	DeviceTypeAndroid string `pulumi:"deviceTypeAndroid"`
	// (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
	DeviceTypeChromeos string `pulumi:"deviceTypeChromeos"`
	// (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
	DeviceTypeIos string `pulumi:"deviceTypeIos"`
	// (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
	DeviceTypeLinux string `pulumi:"deviceTypeLinux"`
	// (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
	DeviceTypeOsx string `pulumi:"deviceTypeOsx"`
	// (Optional) Indicates whether users can access their WorkSpaces through a web browser.
	DeviceTypeWeb string `pulumi:"deviceTypeWeb"`
	// (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
	DeviceTypeWindows string `pulumi:"deviceTypeWindows"`
	// (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.
	DeviceTypeZeroclient string `pulumi:"deviceTypeZeroclient"`
}

type GetDirectoryWorkspaceAccessPropertyArgs struct {
	// (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
	DeviceTypeAndroid pulumix.Input[string] `pulumi:"deviceTypeAndroid"`
	// (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
	DeviceTypeChromeos pulumix.Input[string] `pulumi:"deviceTypeChromeos"`
	// (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
	DeviceTypeIos pulumix.Input[string] `pulumi:"deviceTypeIos"`
	// (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
	DeviceTypeLinux pulumix.Input[string] `pulumi:"deviceTypeLinux"`
	// (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
	DeviceTypeOsx pulumix.Input[string] `pulumi:"deviceTypeOsx"`
	// (Optional) Indicates whether users can access their WorkSpaces through a web browser.
	DeviceTypeWeb pulumix.Input[string] `pulumi:"deviceTypeWeb"`
	// (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
	DeviceTypeWindows pulumix.Input[string] `pulumi:"deviceTypeWindows"`
	// (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.
	DeviceTypeZeroclient pulumix.Input[string] `pulumi:"deviceTypeZeroclient"`
}

func (GetDirectoryWorkspaceAccessPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryWorkspaceAccessProperty)(nil)).Elem()
}

func (i GetDirectoryWorkspaceAccessPropertyArgs) ToGetDirectoryWorkspaceAccessPropertyOutput() GetDirectoryWorkspaceAccessPropertyOutput {
	return i.ToGetDirectoryWorkspaceAccessPropertyOutputWithContext(context.Background())
}

func (i GetDirectoryWorkspaceAccessPropertyArgs) ToGetDirectoryWorkspaceAccessPropertyOutputWithContext(ctx context.Context) GetDirectoryWorkspaceAccessPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryWorkspaceAccessPropertyOutput)
}

func (i *GetDirectoryWorkspaceAccessPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDirectoryWorkspaceAccessPropertyArgs] {
	return pulumix.Val(i)
}

type GetDirectoryWorkspaceAccessPropertyOutput struct{ *pulumi.OutputState }

func (GetDirectoryWorkspaceAccessPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryWorkspaceAccessProperty)(nil)).Elem()
}

func (o GetDirectoryWorkspaceAccessPropertyOutput) ToGetDirectoryWorkspaceAccessPropertyOutput() GetDirectoryWorkspaceAccessPropertyOutput {
	return o
}

func (o GetDirectoryWorkspaceAccessPropertyOutput) ToGetDirectoryWorkspaceAccessPropertyOutputWithContext(ctx context.Context) GetDirectoryWorkspaceAccessPropertyOutput {
	return o
}

func (o GetDirectoryWorkspaceAccessPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectoryWorkspaceAccessProperty] {
	return pulumix.Output[GetDirectoryWorkspaceAccessProperty]{
		OutputState: o.OutputState,
	}
}

// (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeAndroid() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeAndroid })
}

// (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeChromeos() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeChromeos })
}

// (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeIos() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeIos })
}

// (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeLinux() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeLinux })
}

// (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeOsx() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeOsx })
}

// (Optional) Indicates whether users can access their WorkSpaces through a web browser.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeWeb() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeWeb })
}

// (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeWindows() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeWindows })
}

// (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.
func (o GetDirectoryWorkspaceAccessPropertyOutput) DeviceTypeZeroclient() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceAccessProperty](o, func(v GetDirectoryWorkspaceAccessProperty) string { return v.DeviceTypeZeroclient })
}

type GetDirectoryWorkspaceCreationProperty struct {
	// The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
	CustomSecurityGroupId string `pulumi:"customSecurityGroupId"`
	// The default organizational unit (OU) for your WorkSpace directories.
	DefaultOu string `pulumi:"defaultOu"`
	// Indicates whether internet access is enabled for your WorkSpaces.
	EnableInternetAccess bool `pulumi:"enableInternetAccess"`
	// Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html).
	EnableMaintenanceMode bool `pulumi:"enableMaintenanceMode"`
	// Indicates whether users are local administrators of their WorkSpaces.
	UserEnabledAsLocalAdministrator bool `pulumi:"userEnabledAsLocalAdministrator"`
}

type GetDirectoryWorkspaceCreationPropertyArgs struct {
	// The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
	CustomSecurityGroupId pulumix.Input[string] `pulumi:"customSecurityGroupId"`
	// The default organizational unit (OU) for your WorkSpace directories.
	DefaultOu pulumix.Input[string] `pulumi:"defaultOu"`
	// Indicates whether internet access is enabled for your WorkSpaces.
	EnableInternetAccess pulumix.Input[bool] `pulumi:"enableInternetAccess"`
	// Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html).
	EnableMaintenanceMode pulumix.Input[bool] `pulumi:"enableMaintenanceMode"`
	// Indicates whether users are local administrators of their WorkSpaces.
	UserEnabledAsLocalAdministrator pulumix.Input[bool] `pulumi:"userEnabledAsLocalAdministrator"`
}

func (GetDirectoryWorkspaceCreationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryWorkspaceCreationProperty)(nil)).Elem()
}

func (i GetDirectoryWorkspaceCreationPropertyArgs) ToGetDirectoryWorkspaceCreationPropertyOutput() GetDirectoryWorkspaceCreationPropertyOutput {
	return i.ToGetDirectoryWorkspaceCreationPropertyOutputWithContext(context.Background())
}

func (i GetDirectoryWorkspaceCreationPropertyArgs) ToGetDirectoryWorkspaceCreationPropertyOutputWithContext(ctx context.Context) GetDirectoryWorkspaceCreationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryWorkspaceCreationPropertyOutput)
}

func (i *GetDirectoryWorkspaceCreationPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDirectoryWorkspaceCreationPropertyArgs] {
	return pulumix.Val(i)
}

type GetDirectoryWorkspaceCreationPropertyOutput struct{ *pulumi.OutputState }

func (GetDirectoryWorkspaceCreationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryWorkspaceCreationProperty)(nil)).Elem()
}

func (o GetDirectoryWorkspaceCreationPropertyOutput) ToGetDirectoryWorkspaceCreationPropertyOutput() GetDirectoryWorkspaceCreationPropertyOutput {
	return o
}

func (o GetDirectoryWorkspaceCreationPropertyOutput) ToGetDirectoryWorkspaceCreationPropertyOutputWithContext(ctx context.Context) GetDirectoryWorkspaceCreationPropertyOutput {
	return o
}

func (o GetDirectoryWorkspaceCreationPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectoryWorkspaceCreationProperty] {
	return pulumix.Output[GetDirectoryWorkspaceCreationProperty]{
		OutputState: o.OutputState,
	}
}

// The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
func (o GetDirectoryWorkspaceCreationPropertyOutput) CustomSecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceCreationProperty](o, func(v GetDirectoryWorkspaceCreationProperty) string { return v.CustomSecurityGroupId })
}

// The default organizational unit (OU) for your WorkSpace directories.
func (o GetDirectoryWorkspaceCreationPropertyOutput) DefaultOu() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryWorkspaceCreationProperty](o, func(v GetDirectoryWorkspaceCreationProperty) string { return v.DefaultOu })
}

// Indicates whether internet access is enabled for your WorkSpaces.
func (o GetDirectoryWorkspaceCreationPropertyOutput) EnableInternetAccess() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectoryWorkspaceCreationProperty](o, func(v GetDirectoryWorkspaceCreationProperty) bool { return v.EnableInternetAccess })
}

// Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html).
func (o GetDirectoryWorkspaceCreationPropertyOutput) EnableMaintenanceMode() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectoryWorkspaceCreationProperty](o, func(v GetDirectoryWorkspaceCreationProperty) bool { return v.EnableMaintenanceMode })
}

// Indicates whether users are local administrators of their WorkSpaces.
func (o GetDirectoryWorkspaceCreationPropertyOutput) UserEnabledAsLocalAdministrator() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectoryWorkspaceCreationProperty](o, func(v GetDirectoryWorkspaceCreationProperty) bool { return v.UserEnabledAsLocalAdministrator })
}

type GetWorkspaceWorkspaceProperty struct {
	// Compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO` and `GRAPHICSPRO`.
	ComputeTypeName string `pulumi:"computeTypeName"`
	// Size of the root volume.
	RootVolumeSizeGib int `pulumi:"rootVolumeSizeGib"`
	// Running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
	RunningMode string `pulumi:"runningMode"`
	// Time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
	RunningModeAutoStopTimeoutInMinutes int `pulumi:"runningModeAutoStopTimeoutInMinutes"`
	// Size of the user storage.
	UserVolumeSizeGib int `pulumi:"userVolumeSizeGib"`
}

type GetWorkspaceWorkspacePropertyArgs struct {
	// Compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO` and `GRAPHICSPRO`.
	ComputeTypeName pulumix.Input[string] `pulumi:"computeTypeName"`
	// Size of the root volume.
	RootVolumeSizeGib pulumix.Input[int] `pulumi:"rootVolumeSizeGib"`
	// Running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
	RunningMode pulumix.Input[string] `pulumi:"runningMode"`
	// Time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
	RunningModeAutoStopTimeoutInMinutes pulumix.Input[int] `pulumi:"runningModeAutoStopTimeoutInMinutes"`
	// Size of the user storage.
	UserVolumeSizeGib pulumix.Input[int] `pulumi:"userVolumeSizeGib"`
}

func (GetWorkspaceWorkspacePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceWorkspaceProperty)(nil)).Elem()
}

func (i GetWorkspaceWorkspacePropertyArgs) ToGetWorkspaceWorkspacePropertyOutput() GetWorkspaceWorkspacePropertyOutput {
	return i.ToGetWorkspaceWorkspacePropertyOutputWithContext(context.Background())
}

func (i GetWorkspaceWorkspacePropertyArgs) ToGetWorkspaceWorkspacePropertyOutputWithContext(ctx context.Context) GetWorkspaceWorkspacePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceWorkspacePropertyOutput)
}

func (i *GetWorkspaceWorkspacePropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetWorkspaceWorkspacePropertyArgs] {
	return pulumix.Val(i)
}

type GetWorkspaceWorkspacePropertyOutput struct{ *pulumi.OutputState }

func (GetWorkspaceWorkspacePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceWorkspaceProperty)(nil)).Elem()
}

func (o GetWorkspaceWorkspacePropertyOutput) ToGetWorkspaceWorkspacePropertyOutput() GetWorkspaceWorkspacePropertyOutput {
	return o
}

func (o GetWorkspaceWorkspacePropertyOutput) ToGetWorkspaceWorkspacePropertyOutputWithContext(ctx context.Context) GetWorkspaceWorkspacePropertyOutput {
	return o
}

func (o GetWorkspaceWorkspacePropertyOutput) ToOutput(ctx context.Context) pulumix.Output[GetWorkspaceWorkspaceProperty] {
	return pulumix.Output[GetWorkspaceWorkspaceProperty]{
		OutputState: o.OutputState,
	}
}

// Compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO` and `GRAPHICSPRO`.
func (o GetWorkspaceWorkspacePropertyOutput) ComputeTypeName() pulumix.Output[string] {
	return pulumix.Apply[GetWorkspaceWorkspaceProperty](o, func(v GetWorkspaceWorkspaceProperty) string { return v.ComputeTypeName })
}

// Size of the root volume.
func (o GetWorkspaceWorkspacePropertyOutput) RootVolumeSizeGib() pulumix.Output[int] {
	return pulumix.Apply[GetWorkspaceWorkspaceProperty](o, func(v GetWorkspaceWorkspaceProperty) int { return v.RootVolumeSizeGib })
}

// Running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
func (o GetWorkspaceWorkspacePropertyOutput) RunningMode() pulumix.Output[string] {
	return pulumix.Apply[GetWorkspaceWorkspaceProperty](o, func(v GetWorkspaceWorkspaceProperty) string { return v.RunningMode })
}

// Time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
func (o GetWorkspaceWorkspacePropertyOutput) RunningModeAutoStopTimeoutInMinutes() pulumix.Output[int] {
	return pulumix.Apply[GetWorkspaceWorkspaceProperty](o, func(v GetWorkspaceWorkspaceProperty) int { return v.RunningModeAutoStopTimeoutInMinutes })
}

// Size of the user storage.
func (o GetWorkspaceWorkspacePropertyOutput) UserVolumeSizeGib() pulumix.Output[int] {
	return pulumix.Apply[GetWorkspaceWorkspaceProperty](o, func(v GetWorkspaceWorkspaceProperty) int { return v.UserVolumeSizeGib })
}

func init() {
	pulumi.RegisterOutputType(ConnectionAliasTimeoutsOutput{})
	pulumi.RegisterOutputType(DirectorySelfServicePermissionsOutput{})
	pulumi.RegisterOutputType(DirectoryWorkspaceAccessPropertiesOutput{})
	pulumi.RegisterOutputType(DirectoryWorkspaceCreationPropertiesOutput{})
	pulumi.RegisterOutputType(IpGroupRuleOutput{})
	pulumi.RegisterOutputType(WorkspaceWorkspacePropertiesOutput{})
	pulumi.RegisterOutputType(GetBundleComputeTypeOutput{})
	pulumi.RegisterOutputType(GetBundleRootStorageOutput{})
	pulumi.RegisterOutputType(GetBundleUserStorageOutput{})
	pulumi.RegisterOutputType(GetDirectorySelfServicePermissionOutput{})
	pulumi.RegisterOutputType(GetDirectoryWorkspaceAccessPropertyOutput{})
	pulumi.RegisterOutputType(GetDirectoryWorkspaceCreationPropertyOutput{})
	pulumi.RegisterOutputType(GetWorkspaceWorkspacePropertyOutput{})
}
