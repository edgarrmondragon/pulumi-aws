// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS VPC Lattice Listener Rule.
type ListenerRule struct {
	pulumi.CustomResourceState

	// The action for the default rule.
	Action pulumix.GPtrOutput[ListenerRuleAction, ListenerRuleActionOutput] `pulumi:"action"`
	// ARN of the target group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The ID or Amazon Resource Name (ARN) of the listener.
	ListenerIdentifier pulumix.Output[string] `pulumi:"listenerIdentifier"`
	// The rule match.
	Match pulumix.GPtrOutput[ListenerRuleMatch, ListenerRuleMatchOutput] `pulumi:"match"`
	// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name pulumix.Output[string] `pulumi:"name"`
	// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
	//
	// The following arguments are optional:
	Priority pulumix.Output[int] `pulumi:"priority"`
	// Unique identifier for the target group.
	RuleId pulumix.Output[string] `pulumi:"ruleId"`
	// The ID or Amazon Resource Identifier (ARN) of the service.
	ServiceIdentifier pulumix.Output[string] `pulumi:"serviceIdentifier"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewListenerRule registers a new resource with the given unique name, arguments, and options.
func NewListenerRule(ctx *pulumi.Context,
	name string, args *ListenerRuleArgs, opts ...pulumi.ResourceOption) (*ListenerRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ListenerIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ListenerIdentifier'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.ServiceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ServiceIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListenerRule
	err := ctx.RegisterResource("aws:vpclattice/listenerRule:ListenerRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerRule gets an existing ListenerRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerRuleState, opts ...pulumi.ResourceOption) (*ListenerRule, error) {
	var resource ListenerRule
	err := ctx.ReadResource("aws:vpclattice/listenerRule:ListenerRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerRule resources.
type listenerRuleState struct {
	// The action for the default rule.
	Action *ListenerRuleAction `pulumi:"action"`
	// ARN of the target group.
	Arn *string `pulumi:"arn"`
	// The ID or Amazon Resource Name (ARN) of the listener.
	ListenerIdentifier *string `pulumi:"listenerIdentifier"`
	// The rule match.
	Match *ListenerRuleMatch `pulumi:"match"`
	// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name *string `pulumi:"name"`
	// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
	//
	// The following arguments are optional:
	Priority *int `pulumi:"priority"`
	// Unique identifier for the target group.
	RuleId *string `pulumi:"ruleId"`
	// The ID or Amazon Resource Identifier (ARN) of the service.
	ServiceIdentifier *string `pulumi:"serviceIdentifier"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ListenerRuleState struct {
	// The action for the default rule.
	Action pulumix.Input[*ListenerRuleActionArgs]
	// ARN of the target group.
	Arn pulumix.Input[*string]
	// The ID or Amazon Resource Name (ARN) of the listener.
	ListenerIdentifier pulumix.Input[*string]
	// The rule match.
	Match pulumix.Input[*ListenerRuleMatchArgs]
	// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name pulumix.Input[*string]
	// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
	//
	// The following arguments are optional:
	Priority pulumix.Input[*int]
	// Unique identifier for the target group.
	RuleId pulumix.Input[*string]
	// The ID or Amazon Resource Identifier (ARN) of the service.
	ServiceIdentifier pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ListenerRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerRuleState)(nil)).Elem()
}

type listenerRuleArgs struct {
	// The action for the default rule.
	Action ListenerRuleAction `pulumi:"action"`
	// The ID or Amazon Resource Name (ARN) of the listener.
	ListenerIdentifier string `pulumi:"listenerIdentifier"`
	// The rule match.
	Match ListenerRuleMatch `pulumi:"match"`
	// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name *string `pulumi:"name"`
	// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
	//
	// The following arguments are optional:
	Priority int `pulumi:"priority"`
	// The ID or Amazon Resource Identifier (ARN) of the service.
	ServiceIdentifier string `pulumi:"serviceIdentifier"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ListenerRule resource.
type ListenerRuleArgs struct {
	// The action for the default rule.
	Action pulumix.Input[*ListenerRuleActionArgs]
	// The ID or Amazon Resource Name (ARN) of the listener.
	ListenerIdentifier pulumix.Input[string]
	// The rule match.
	Match pulumix.Input[*ListenerRuleMatchArgs]
	// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name pulumix.Input[*string]
	// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
	//
	// The following arguments are optional:
	Priority pulumix.Input[int]
	// The ID or Amazon Resource Identifier (ARN) of the service.
	ServiceIdentifier pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ListenerRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerRuleArgs)(nil)).Elem()
}

type ListenerRuleOutput struct{ *pulumi.OutputState }

func (ListenerRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerRule)(nil)).Elem()
}

func (o ListenerRuleOutput) ToListenerRuleOutput() ListenerRuleOutput {
	return o
}

func (o ListenerRuleOutput) ToListenerRuleOutputWithContext(ctx context.Context) ListenerRuleOutput {
	return o
}

func (o ListenerRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerRule] {
	return pulumix.Output[ListenerRule]{
		OutputState: o.OutputState,
	}
}

// The action for the default rule.
func (o ListenerRuleOutput) Action() pulumix.GPtrOutput[ListenerRuleAction, ListenerRuleActionOutput] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.GPtrOutput[ListenerRuleAction, ListenerRuleActionOutput] { return v.Action })
	unwrapped := pulumix.Flatten[*ListenerRuleAction, pulumix.GPtrOutput[ListenerRuleAction, ListenerRuleActionOutput]](value)
	return pulumix.GPtrOutput[ListenerRuleAction, ListenerRuleActionOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the target group.
func (o ListenerRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID or Amazon Resource Name (ARN) of the listener.
func (o ListenerRuleOutput) ListenerIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.ListenerIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The rule match.
func (o ListenerRuleOutput) Match() pulumix.GPtrOutput[ListenerRuleMatch, ListenerRuleMatchOutput] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.GPtrOutput[ListenerRuleMatch, ListenerRuleMatchOutput] { return v.Match })
	unwrapped := pulumix.Flatten[*ListenerRuleMatch, pulumix.GPtrOutput[ListenerRuleMatch, ListenerRuleMatchOutput]](value)
	return pulumix.GPtrOutput[ListenerRuleMatch, ListenerRuleMatchOutput]{OutputState: unwrapped.OutputState}
}

// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
func (o ListenerRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
//
// The following arguments are optional:
func (o ListenerRuleOutput) Priority() pulumix.Output[int] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[int] { return v.Priority })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Unique identifier for the target group.
func (o ListenerRuleOutput) RuleId() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.RuleId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID or Amazon Resource Identifier (ARN) of the service.
func (o ListenerRuleOutput) ServiceIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.Output[string] { return v.ServiceIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ListenerRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ListenerRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ListenerRule](o, func(v ListenerRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ListenerRuleOutput{})
}
