// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a SageMaker Human Task UI resource.
type HumanTaskUI struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned by AWS to this Human Task UI.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the Human Task UI.
	HumanTaskUiName pulumix.Output[string] `pulumi:"humanTaskUiName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The Liquid template for the worker user interface. See UI Template below.
	UiTemplate pulumix.GPtrOutput[HumanTaskUIUiTemplate, HumanTaskUIUiTemplateOutput] `pulumi:"uiTemplate"`
}

// NewHumanTaskUI registers a new resource with the given unique name, arguments, and options.
func NewHumanTaskUI(ctx *pulumi.Context,
	name string, args *HumanTaskUIArgs, opts ...pulumi.ResourceOption) (*HumanTaskUI, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HumanTaskUiName == nil {
		return nil, errors.New("invalid value for required argument 'HumanTaskUiName'")
	}
	if args.UiTemplate == nil {
		return nil, errors.New("invalid value for required argument 'UiTemplate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HumanTaskUI
	err := ctx.RegisterResource("aws:sagemaker/humanTaskUI:HumanTaskUI", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHumanTaskUI gets an existing HumanTaskUI resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHumanTaskUI(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HumanTaskUIState, opts ...pulumi.ResourceOption) (*HumanTaskUI, error) {
	var resource HumanTaskUI
	err := ctx.ReadResource("aws:sagemaker/humanTaskUI:HumanTaskUI", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HumanTaskUI resources.
type humanTaskUIState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Human Task UI.
	Arn *string `pulumi:"arn"`
	// The name of the Human Task UI.
	HumanTaskUiName *string `pulumi:"humanTaskUiName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The Liquid template for the worker user interface. See UI Template below.
	UiTemplate *HumanTaskUIUiTemplate `pulumi:"uiTemplate"`
}

type HumanTaskUIState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this Human Task UI.
	Arn pulumix.Input[*string]
	// The name of the Human Task UI.
	HumanTaskUiName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The Liquid template for the worker user interface. See UI Template below.
	UiTemplate pulumix.Input[*HumanTaskUIUiTemplateArgs]
}

func (HumanTaskUIState) ElementType() reflect.Type {
	return reflect.TypeOf((*humanTaskUIState)(nil)).Elem()
}

type humanTaskUIArgs struct {
	// The name of the Human Task UI.
	HumanTaskUiName string `pulumi:"humanTaskUiName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The Liquid template for the worker user interface. See UI Template below.
	UiTemplate HumanTaskUIUiTemplate `pulumi:"uiTemplate"`
}

// The set of arguments for constructing a HumanTaskUI resource.
type HumanTaskUIArgs struct {
	// The name of the Human Task UI.
	HumanTaskUiName pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The Liquid template for the worker user interface. See UI Template below.
	UiTemplate pulumix.Input[*HumanTaskUIUiTemplateArgs]
}

func (HumanTaskUIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*humanTaskUIArgs)(nil)).Elem()
}

type HumanTaskUIOutput struct{ *pulumi.OutputState }

func (HumanTaskUIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HumanTaskUI)(nil)).Elem()
}

func (o HumanTaskUIOutput) ToHumanTaskUIOutput() HumanTaskUIOutput {
	return o
}

func (o HumanTaskUIOutput) ToHumanTaskUIOutputWithContext(ctx context.Context) HumanTaskUIOutput {
	return o
}

func (o HumanTaskUIOutput) ToOutput(ctx context.Context) pulumix.Output[HumanTaskUI] {
	return pulumix.Output[HumanTaskUI]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) assigned by AWS to this Human Task UI.
func (o HumanTaskUIOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[HumanTaskUI](o, func(v HumanTaskUI) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Human Task UI.
func (o HumanTaskUIOutput) HumanTaskUiName() pulumix.Output[string] {
	value := pulumix.Apply[HumanTaskUI](o, func(v HumanTaskUI) pulumix.Output[string] { return v.HumanTaskUiName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HumanTaskUIOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[HumanTaskUI](o, func(v HumanTaskUI) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HumanTaskUIOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[HumanTaskUI](o, func(v HumanTaskUI) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The Liquid template for the worker user interface. See UI Template below.
func (o HumanTaskUIOutput) UiTemplate() pulumix.GPtrOutput[HumanTaskUIUiTemplate, HumanTaskUIUiTemplateOutput] {
	value := pulumix.Apply[HumanTaskUI](o, func(v HumanTaskUI) pulumix.GPtrOutput[HumanTaskUIUiTemplate, HumanTaskUIUiTemplateOutput] {
		return v.UiTemplate
	})
	unwrapped := pulumix.Flatten[*HumanTaskUIUiTemplate, pulumix.GPtrOutput[HumanTaskUIUiTemplate, HumanTaskUIUiTemplateOutput]](value)
	return pulumix.GPtrOutput[HumanTaskUIUiTemplate, HumanTaskUIUiTemplateOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(HumanTaskUIOutput{})
}
