// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a successful verification of an SES domain identity.
//
// Most commonly, this resource is used together with `route53.Record` and
// `ses.DomainIdentity` to request an SES domain identity,
// deploy the required DNS verification records, and wait for verification to complete.
//
// > **WARNING:** This resource implements a part of the verification workflow. It does not represent a real-world entity in AWS, therefore changing or deleting this resource on its own has no immediate effect.
type DomainIdentityVerification struct {
	pulumi.CustomResourceState

	// The ARN of the domain identity.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The domain name of the SES domain identity to verify.
	Domain pulumix.Output[string] `pulumi:"domain"`
}

// NewDomainIdentityVerification registers a new resource with the given unique name, arguments, and options.
func NewDomainIdentityVerification(ctx *pulumi.Context,
	name string, args *DomainIdentityVerificationArgs, opts ...pulumi.ResourceOption) (*DomainIdentityVerification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainIdentityVerification
	err := ctx.RegisterResource("aws:ses/domainIdentityVerification:DomainIdentityVerification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainIdentityVerification gets an existing DomainIdentityVerification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainIdentityVerification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainIdentityVerificationState, opts ...pulumi.ResourceOption) (*DomainIdentityVerification, error) {
	var resource DomainIdentityVerification
	err := ctx.ReadResource("aws:ses/domainIdentityVerification:DomainIdentityVerification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainIdentityVerification resources.
type domainIdentityVerificationState struct {
	// The ARN of the domain identity.
	Arn *string `pulumi:"arn"`
	// The domain name of the SES domain identity to verify.
	Domain *string `pulumi:"domain"`
}

type DomainIdentityVerificationState struct {
	// The ARN of the domain identity.
	Arn pulumix.Input[*string]
	// The domain name of the SES domain identity to verify.
	Domain pulumix.Input[*string]
}

func (DomainIdentityVerificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainIdentityVerificationState)(nil)).Elem()
}

type domainIdentityVerificationArgs struct {
	// The domain name of the SES domain identity to verify.
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a DomainIdentityVerification resource.
type DomainIdentityVerificationArgs struct {
	// The domain name of the SES domain identity to verify.
	Domain pulumix.Input[string]
}

func (DomainIdentityVerificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainIdentityVerificationArgs)(nil)).Elem()
}

type DomainIdentityVerificationOutput struct{ *pulumi.OutputState }

func (DomainIdentityVerificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainIdentityVerification)(nil)).Elem()
}

func (o DomainIdentityVerificationOutput) ToDomainIdentityVerificationOutput() DomainIdentityVerificationOutput {
	return o
}

func (o DomainIdentityVerificationOutput) ToDomainIdentityVerificationOutputWithContext(ctx context.Context) DomainIdentityVerificationOutput {
	return o
}

func (o DomainIdentityVerificationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainIdentityVerification] {
	return pulumix.Output[DomainIdentityVerification]{
		OutputState: o.OutputState,
	}
}

// The ARN of the domain identity.
func (o DomainIdentityVerificationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[DomainIdentityVerification](o, func(v DomainIdentityVerification) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The domain name of the SES domain identity to verify.
func (o DomainIdentityVerificationOutput) Domain() pulumix.Output[string] {
	value := pulumix.Apply[DomainIdentityVerification](o, func(v DomainIdentityVerification) pulumix.Output[string] { return v.Domain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainIdentityVerificationOutput{})
}
