// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about a SSH public key associated with the specified IAM user.
func GetUserSshKey(ctx *pulumi.Context, args *GetUserSshKeyArgs, opts ...pulumi.InvokeOption) (*GetUserSshKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserSshKeyResult
	err := ctx.Invoke("aws:iam/getUserSshKey:getUserSshKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserSshKey.
type GetUserSshKeyArgs struct {
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding string `pulumi:"encoding"`
	// Unique identifier for the SSH public key.
	SshPublicKeyId string `pulumi:"sshPublicKeyId"`
	// Name of the IAM user associated with the SSH public key.
	Username string `pulumi:"username"`
}

// A collection of values returned by getUserSshKey.
type GetUserSshKeyResult struct {
	Encoding string `pulumi:"encoding"`
	// MD5 message digest of the SSH public key.
	Fingerprint string `pulumi:"fingerprint"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// SSH public key.
	PublicKey      string `pulumi:"publicKey"`
	SshPublicKeyId string `pulumi:"sshPublicKeyId"`
	// Status of the SSH public key. Active means that the key can be used for authentication with an CodeCommit repository. Inactive means that the key cannot be used.
	Status   string `pulumi:"status"`
	Username string `pulumi:"username"`
}

func GetUserSshKeyOutput(ctx *pulumi.Context, args GetUserSshKeyOutputArgs, opts ...pulumi.InvokeOption) GetUserSshKeyResultOutput {
	outputResult := pulumix.ApplyErr[*GetUserSshKeyArgs](args.ToOutput(), func(plainArgs *GetUserSshKeyArgs) (*GetUserSshKeyResult, error) {
		return GetUserSshKey(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetUserSshKeyResultOutput, *GetUserSshKeyResult](outputResult)
}

// A collection of arguments for invoking getUserSshKey.
type GetUserSshKeyOutputArgs struct {
	// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use `SSH`. To retrieve the public key in PEM format, use `PEM`.
	Encoding pulumix.Input[string] `pulumi:"encoding"`
	// Unique identifier for the SSH public key.
	SshPublicKeyId pulumix.Input[string] `pulumi:"sshPublicKeyId"`
	// Name of the IAM user associated with the SSH public key.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (args GetUserSshKeyOutputArgs) ToOutput() pulumix.Output[*GetUserSshKeyArgs] {
	allArgs := pulumix.All(
		args.Encoding.ToOutput(context.Background()).AsAny(),
		args.SshPublicKeyId.ToOutput(context.Background()).AsAny(),
		args.Username.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetUserSshKeyArgs {
		return &GetUserSshKeyArgs{
			Encoding:       resolvedArgs[0].(string),
			SshPublicKeyId: resolvedArgs[1].(string),
			Username:       resolvedArgs[2].(string),
		}
	})
}

type GetUserSshKeyResultOutput struct{ *pulumi.OutputState }

func (GetUserSshKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshKeyResult)(nil)).Elem()
}

func (o GetUserSshKeyResultOutput) ToOutput(context.Context) pulumix.Output[*GetUserSshKeyResult] {
	return pulumix.Output[*GetUserSshKeyResult]{
		OutputState: o.OutputState,
	}
}

func (o GetUserSshKeyResultOutput) Encoding() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.Encoding })
}

func (o GetUserSshKeyResultOutput) Fingerprint() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.Fingerprint })
}

func (o GetUserSshKeyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.Id })
}

func (o GetUserSshKeyResultOutput) PublicKey() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.PublicKey })
}

func (o GetUserSshKeyResultOutput) SshPublicKeyId() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.SshPublicKeyId })
}

func (o GetUserSshKeyResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.Status })
}

func (o GetUserSshKeyResultOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[*GetUserSshKeyResult](o, func(v *GetUserSshKeyResult) string { return v.Username })
}
