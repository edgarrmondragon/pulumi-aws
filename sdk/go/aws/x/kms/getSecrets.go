// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Decrypt multiple secrets from data encrypted with the AWS KMS service.
func GetSecrets(ctx *pulumi.Context, args *GetSecretsArgs, opts ...pulumi.InvokeOption) (*GetSecretsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecretsResult
	err := ctx.Invoke("aws:kms/getSecrets:getSecrets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecrets.
type GetSecretsArgs struct {
	// One or more encrypted payload definitions from the KMS service. See the Secret Definitions below.
	Secrets []GetSecretsSecret `pulumi:"secrets"`
}

// A collection of values returned by getSecrets.
type GetSecretsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Map containing each `secret` `name` as the key with its decrypted plaintext value
	Plaintext map[string]string  `pulumi:"plaintext"`
	Secrets   []GetSecretsSecret `pulumi:"secrets"`
}

func GetSecretsOutput(ctx *pulumi.Context, args GetSecretsOutputArgs, opts ...pulumi.InvokeOption) GetSecretsResultOutput {
	outputResult := pulumix.ApplyErr[*GetSecretsArgs](args.ToOutput(), func(plainArgs *GetSecretsArgs) (*GetSecretsResult, error) {
		return GetSecrets(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSecretsResultOutput, *GetSecretsResult](outputResult)
}

// A collection of arguments for invoking getSecrets.
type GetSecretsOutputArgs struct {
	// One or more encrypted payload definitions from the KMS service. See the Secret Definitions below.
	Secrets pulumix.Input[[]*GetSecretsSecretArgs] `pulumi:"secrets"`
}

func (args GetSecretsOutputArgs) ToOutput() pulumix.Output[*GetSecretsArgs] {
	allArgs := pulumix.All(
		args.Secrets.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSecretsArgs {
		return &GetSecretsArgs{
			Secrets: resolvedArgs[0].([]GetSecretsSecret),
		}
	})
}

type GetSecretsResultOutput struct{ *pulumi.OutputState }

func (GetSecretsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsResult)(nil)).Elem()
}

func (o GetSecretsResultOutput) ToOutput(context.Context) pulumix.Output[*GetSecretsResult] {
	return pulumix.Output[*GetSecretsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSecretsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSecretsResult](o, func(v *GetSecretsResult) string { return v.Id })
}

func (o GetSecretsResultOutput) Plaintext() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetSecretsResult](o, func(v *GetSecretsResult) map[string]string { return v.Plaintext })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSecretsResultOutput) Secrets() pulumix.GArrayOutput[GetSecretsSecret, GetSecretsSecretOutput] {
	value := pulumix.Apply[*GetSecretsResult](o, func(v *GetSecretsResult) []GetSecretsSecret { return v.Secrets })
	return pulumix.GArrayOutput[GetSecretsSecret, GetSecretsSecretOutput]{
		OutputState: value.OutputState,
	}
}
