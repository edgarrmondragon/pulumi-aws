// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Traffic mirror target.\
// Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring
type TrafficMirrorTarget struct {
	pulumi.CustomResourceState

	// The ARN of the traffic mirror target.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description of the traffic mirror session.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The VPC Endpoint Id of the Gateway Load Balancer that is associated with the target.
	GatewayLoadBalancerEndpointId pulumix.Output[*string] `pulumi:"gatewayLoadBalancerEndpointId"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumix.Output[*string] `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumix.Output[*string] `pulumi:"networkLoadBalancerArn"`
	// The ID of the AWS account that owns the traffic mirror target.
	OwnerId pulumix.Output[string] `pulumi:"ownerId"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// **NOTE:** Either `networkInterfaceId` or `networkLoadBalancerArn` should be specified and both should not be specified together
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewTrafficMirrorTarget registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorTarget(ctx *pulumi.Context,
	name string, args *TrafficMirrorTargetArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	if args == nil {
		args = &TrafficMirrorTargetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorTarget
	err := ctx.RegisterResource("aws:ec2/trafficMirrorTarget:TrafficMirrorTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorTarget gets an existing TrafficMirrorTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorTargetState, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	var resource TrafficMirrorTarget
	err := ctx.ReadResource("aws:ec2/trafficMirrorTarget:TrafficMirrorTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorTarget resources.
type trafficMirrorTargetState struct {
	// The ARN of the traffic mirror target.
	Arn *string `pulumi:"arn"`
	// A description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// The VPC Endpoint Id of the Gateway Load Balancer that is associated with the target.
	GatewayLoadBalancerEndpointId *string `pulumi:"gatewayLoadBalancerEndpointId"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn *string `pulumi:"networkLoadBalancerArn"`
	// The ID of the AWS account that owns the traffic mirror target.
	OwnerId *string `pulumi:"ownerId"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// **NOTE:** Either `networkInterfaceId` or `networkLoadBalancerArn` should be specified and both should not be specified together
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type TrafficMirrorTargetState struct {
	// The ARN of the traffic mirror target.
	Arn pulumix.Input[*string]
	// A description of the traffic mirror session.
	Description pulumix.Input[*string]
	// The VPC Endpoint Id of the Gateway Load Balancer that is associated with the target.
	GatewayLoadBalancerEndpointId pulumix.Input[*string]
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumix.Input[*string]
	// The ID of the AWS account that owns the traffic mirror target.
	OwnerId pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// **NOTE:** Either `networkInterfaceId` or `networkLoadBalancerArn` should be specified and both should not be specified together
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (TrafficMirrorTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetState)(nil)).Elem()
}

type trafficMirrorTargetArgs struct {
	// A description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// The VPC Endpoint Id of the Gateway Load Balancer that is associated with the target.
	GatewayLoadBalancerEndpointId *string `pulumi:"gatewayLoadBalancerEndpointId"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn *string `pulumi:"networkLoadBalancerArn"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// **NOTE:** Either `networkInterfaceId` or `networkLoadBalancerArn` should be specified and both should not be specified together
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a TrafficMirrorTarget resource.
type TrafficMirrorTargetArgs struct {
	// A description of the traffic mirror session.
	Description pulumix.Input[*string]
	// The VPC Endpoint Id of the Gateway Load Balancer that is associated with the target.
	GatewayLoadBalancerEndpointId pulumix.Input[*string]
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	//
	// **NOTE:** Either `networkInterfaceId` or `networkLoadBalancerArn` should be specified and both should not be specified together
	Tags pulumix.Input[map[string]string]
}

func (TrafficMirrorTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetArgs)(nil)).Elem()
}

type TrafficMirrorTargetOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorTarget)(nil)).Elem()
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) ToOutput(ctx context.Context) pulumix.Output[TrafficMirrorTarget] {
	return pulumix.Output[TrafficMirrorTarget]{
		OutputState: o.OutputState,
	}
}

// The ARN of the traffic mirror target.
func (o TrafficMirrorTargetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the traffic mirror session.
func (o TrafficMirrorTargetOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The VPC Endpoint Id of the Gateway Load Balancer that is associated with the target.
func (o TrafficMirrorTargetOutput) GatewayLoadBalancerEndpointId() pulumix.Output[*string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.Output[*string] { return v.GatewayLoadBalancerEndpointId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The network interface ID that is associated with the target.
func (o TrafficMirrorTargetOutput) NetworkInterfaceId() pulumix.Output[*string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.Output[*string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
func (o TrafficMirrorTargetOutput) NetworkLoadBalancerArn() pulumix.Output[*string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.Output[*string] { return v.NetworkLoadBalancerArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the AWS account that owns the traffic mirror target.
func (o TrafficMirrorTargetOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
//
// **NOTE:** Either `networkInterfaceId` or `networkLoadBalancerArn` should be specified and both should not be specified together
func (o TrafficMirrorTargetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TrafficMirrorTargetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[TrafficMirrorTarget](o, func(v TrafficMirrorTarget) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(TrafficMirrorTargetOutput{})
}
