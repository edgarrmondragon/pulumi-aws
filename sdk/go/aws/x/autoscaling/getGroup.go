// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information on an existing autoscaling group.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("aws:autoscaling/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// Specify the exact name of the desired autoscaling group.
	Name string `pulumi:"name"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	// ARN of the Auto Scaling group.
	Arn string `pulumi:"arn"`
	// One or more Availability Zones for the group.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	DefaultCooldown   int      `pulumi:"defaultCooldown"`
	// Desired size of the group.
	DesiredCapacity int `pulumi:"desiredCapacity"`
	// The unit of measurement for the value returned for `desiredCapacity`.
	DesiredCapacityType string `pulumi:"desiredCapacityType"`
	// List of metrics enabled for collection.
	EnabledMetrics []string `pulumi:"enabledMetrics"`
	// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
	HealthCheckGracePeriod int `pulumi:"healthCheckGracePeriod"`
	// Service to use for the health checks. The valid values are EC2 and ELB.
	HealthCheckType string `pulumi:"healthCheckType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the associated launch configuration.
	LaunchConfiguration string `pulumi:"launchConfiguration"`
	// List of launch templates along with the overrides.
	LaunchTemplates []GetGroupLaunchTemplate `pulumi:"launchTemplates"`
	// One or more load balancers associated with the group.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service.
	MaxInstanceLifetime int `pulumi:"maxInstanceLifetime"`
	// Maximum size of the group.
	MaxSize int `pulumi:"maxSize"`
	// Minimum number of instances to maintain in the warm pool.
	MinSize int `pulumi:"minSize"`
	// List of mixed instances policy objects for the group.
	MixedInstancesPolicies []GetGroupMixedInstancesPolicy `pulumi:"mixedInstancesPolicies"`
	// Name of the Auto Scaling Group.
	Name                             string `pulumi:"name"`
	NewInstancesProtectedFromScaleIn bool   `pulumi:"newInstancesProtectedFromScaleIn"`
	// Name of the placement group into which to launch your instances, if any. For more information, see Placement Groups (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon Elastic Compute Cloud User Guide.
	PlacementGroup string `pulumi:"placementGroup"`
	// Predicted capacity of the group.
	PredictedCapacity int `pulumi:"predictedCapacity"`
	// ARN of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.
	ServiceLinkedRoleArn string `pulumi:"serviceLinkedRoleArn"`
	// Current state of the group when DeleteAutoScalingGroup is in progress.
	Status string `pulumi:"status"`
	// List of processes suspended processes for the Auto Scaling Group.
	SuspendedProcesses []string `pulumi:"suspendedProcesses"`
	// List of tags for the group.
	Tags []GetGroupTag `pulumi:"tags"`
	// ARNs of the target groups for your load balancer.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// The termination policies for the group.
	TerminationPolicies []string `pulumi:"terminationPolicies"`
	// Traffic sources.
	TrafficSources []GetGroupTrafficSource `pulumi:"trafficSources"`
	// VPC ID for the group.
	VpcZoneIdentifier string `pulumi:"vpcZoneIdentifier"`
	// Current size of the warm pool.
	WarmPoolSize int `pulumi:"warmPoolSize"`
	// List of warm pool configuration objects.
	WarmPools []GetGroupWarmPool `pulumi:"warmPools"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupGroupArgs](args.ToOutput(), func(plainArgs *LookupGroupArgs) (*LookupGroupResult, error) {
		return LookupGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupGroupResultOutput, *LookupGroupResult](outputResult)
}

// A collection of arguments for invoking getGroup.
type LookupGroupOutputArgs struct {
	// Specify the exact name of the desired autoscaling group.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupGroupOutputArgs) ToOutput() pulumix.Output[*LookupGroupArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupGroupArgs {
		return &LookupGroupArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupGroupResult] {
	return pulumix.Output[*LookupGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Arn })
}

func (o LookupGroupResultOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) DefaultCooldown() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.DefaultCooldown })
}

func (o LookupGroupResultOutput) DesiredCapacity() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.DesiredCapacity })
}

func (o LookupGroupResultOutput) DesiredCapacityType() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.DesiredCapacityType })
}

func (o LookupGroupResultOutput) EnabledMetrics() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.EnabledMetrics })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) HealthCheckGracePeriod() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.HealthCheckGracePeriod })
}

func (o LookupGroupResultOutput) HealthCheckType() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.HealthCheckType })
}

func (o LookupGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Id })
}

func (o LookupGroupResultOutput) LaunchConfiguration() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.LaunchConfiguration })
}

func (o LookupGroupResultOutput) LaunchTemplates() pulumix.GArrayOutput[GetGroupLaunchTemplate, GetGroupLaunchTemplateOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupLaunchTemplate { return v.LaunchTemplates })
	return pulumix.GArrayOutput[GetGroupLaunchTemplate, GetGroupLaunchTemplateOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) LoadBalancers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.LoadBalancers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) MaxInstanceLifetime() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.MaxInstanceLifetime })
}

func (o LookupGroupResultOutput) MaxSize() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.MaxSize })
}

func (o LookupGroupResultOutput) MinSize() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.MinSize })
}

func (o LookupGroupResultOutput) MixedInstancesPolicies() pulumix.GArrayOutput[GetGroupMixedInstancesPolicy, GetGroupMixedInstancesPolicyOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupMixedInstancesPolicy { return v.MixedInstancesPolicies })
	return pulumix.GArrayOutput[GetGroupMixedInstancesPolicy, GetGroupMixedInstancesPolicyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Name })
}

func (o LookupGroupResultOutput) NewInstancesProtectedFromScaleIn() pulumix.Output[bool] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) bool { return v.NewInstancesProtectedFromScaleIn })
}

func (o LookupGroupResultOutput) PlacementGroup() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.PlacementGroup })
}

func (o LookupGroupResultOutput) PredictedCapacity() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.PredictedCapacity })
}

func (o LookupGroupResultOutput) ServiceLinkedRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.ServiceLinkedRoleArn })
}

func (o LookupGroupResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Status })
}

func (o LookupGroupResultOutput) SuspendedProcesses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.SuspendedProcesses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) Tags() pulumix.GArrayOutput[GetGroupTag, GetGroupTagOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupTag { return v.Tags })
	return pulumix.GArrayOutput[GetGroupTag, GetGroupTagOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) TargetGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.TargetGroupArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) TerminationPolicies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.TerminationPolicies })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) TrafficSources() pulumix.GArrayOutput[GetGroupTrafficSource, GetGroupTrafficSourceOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupTrafficSource { return v.TrafficSources })
	return pulumix.GArrayOutput[GetGroupTrafficSource, GetGroupTrafficSourceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) VpcZoneIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.VpcZoneIdentifier })
}

func (o LookupGroupResultOutput) WarmPoolSize() pulumix.Output[int] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) int { return v.WarmPoolSize })
}

func (o LookupGroupResultOutput) WarmPools() pulumix.GArrayOutput[GetGroupWarmPool, GetGroupWarmPoolOutput] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []GetGroupWarmPool { return v.WarmPools })
	return pulumix.GArrayOutput[GetGroupWarmPool, GetGroupWarmPoolOutput]{
		OutputState: value.OutputState,
	}
}
