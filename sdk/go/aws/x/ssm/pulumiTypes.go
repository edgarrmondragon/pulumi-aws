// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AssociationOutputLocation struct {
	// The S3 bucket name.
	S3BucketName string `pulumi:"s3BucketName"`
	// The S3 bucket prefix. Results stored in the root if not configured.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
	// The S3 bucket region.
	//
	// Targets specify what instance IDs or tags to apply the document to and has these keys:
	S3Region *string `pulumi:"s3Region"`
}

type AssociationOutputLocationArgs struct {
	// The S3 bucket name.
	S3BucketName pulumix.Input[string] `pulumi:"s3BucketName"`
	// The S3 bucket prefix. Results stored in the root if not configured.
	S3KeyPrefix pulumix.Input[*string] `pulumi:"s3KeyPrefix"`
	// The S3 bucket region.
	//
	// Targets specify what instance IDs or tags to apply the document to and has these keys:
	S3Region pulumix.Input[*string] `pulumi:"s3Region"`
}

func (AssociationOutputLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssociationOutputLocation)(nil)).Elem()
}

func (i AssociationOutputLocationArgs) ToAssociationOutputLocationOutput() AssociationOutputLocationOutput {
	return i.ToAssociationOutputLocationOutputWithContext(context.Background())
}

func (i AssociationOutputLocationArgs) ToAssociationOutputLocationOutputWithContext(ctx context.Context) AssociationOutputLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationOutputLocationOutput)
}

func (i *AssociationOutputLocationArgs) ToOutput(ctx context.Context) pulumix.Output[*AssociationOutputLocationArgs] {
	return pulumix.Val(i)
}

type AssociationOutputLocationOutput struct{ *pulumi.OutputState }

func (AssociationOutputLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssociationOutputLocation)(nil)).Elem()
}

func (o AssociationOutputLocationOutput) ToAssociationOutputLocationOutput() AssociationOutputLocationOutput {
	return o
}

func (o AssociationOutputLocationOutput) ToAssociationOutputLocationOutputWithContext(ctx context.Context) AssociationOutputLocationOutput {
	return o
}

func (o AssociationOutputLocationOutput) ToOutput(ctx context.Context) pulumix.Output[AssociationOutputLocation] {
	return pulumix.Output[AssociationOutputLocation]{
		OutputState: o.OutputState,
	}
}

// The S3 bucket name.
func (o AssociationOutputLocationOutput) S3BucketName() pulumix.Output[string] {
	return pulumix.Apply[AssociationOutputLocation](o, func(v AssociationOutputLocation) string { return v.S3BucketName })
}

// The S3 bucket prefix. Results stored in the root if not configured.
func (o AssociationOutputLocationOutput) S3KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[AssociationOutputLocation](o, func(v AssociationOutputLocation) *string { return v.S3KeyPrefix })
}

// The S3 bucket region.
//
// Targets specify what instance IDs or tags to apply the document to and has these keys:
func (o AssociationOutputLocationOutput) S3Region() pulumix.Output[*string] {
	return pulumix.Apply[AssociationOutputLocation](o, func(v AssociationOutputLocation) *string { return v.S3Region })
}

type AssociationTarget struct {
	// Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
	Key string `pulumi:"key"`
	// A list of instance IDs or tag values. AWS currently limits this list size to one value.
	Values []string `pulumi:"values"`
}

type AssociationTargetArgs struct {
	// Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
	Key pulumix.Input[string] `pulumi:"key"`
	// A list of instance IDs or tag values. AWS currently limits this list size to one value.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (AssociationTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssociationTarget)(nil)).Elem()
}

func (i AssociationTargetArgs) ToAssociationTargetOutput() AssociationTargetOutput {
	return i.ToAssociationTargetOutputWithContext(context.Background())
}

func (i AssociationTargetArgs) ToAssociationTargetOutputWithContext(ctx context.Context) AssociationTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationTargetOutput)
}

func (i *AssociationTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*AssociationTargetArgs] {
	return pulumix.Val(i)
}

type AssociationTargetOutput struct{ *pulumi.OutputState }

func (AssociationTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssociationTarget)(nil)).Elem()
}

func (o AssociationTargetOutput) ToAssociationTargetOutput() AssociationTargetOutput {
	return o
}

func (o AssociationTargetOutput) ToAssociationTargetOutputWithContext(ctx context.Context) AssociationTargetOutput {
	return o
}

func (o AssociationTargetOutput) ToOutput(ctx context.Context) pulumix.Output[AssociationTarget] {
	return pulumix.Output[AssociationTarget]{
		OutputState: o.OutputState,
	}
}

// Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
func (o AssociationTargetOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[AssociationTarget](o, func(v AssociationTarget) string { return v.Key })
}

// A list of instance IDs or tag values. AWS currently limits this list size to one value.
func (o AssociationTargetOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AssociationTarget](o, func(v AssociationTarget) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DocumentAttachmentsSource struct {
	// The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
	Key string `pulumi:"key"`
	// The name of the document attachment file
	Name *string `pulumi:"name"`
	// The value describing the location of an attachment to a document
	Values []string `pulumi:"values"`
}

type DocumentAttachmentsSourceArgs struct {
	// The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
	Key pulumix.Input[string] `pulumi:"key"`
	// The name of the document attachment file
	Name pulumix.Input[*string] `pulumi:"name"`
	// The value describing the location of an attachment to a document
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (DocumentAttachmentsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentAttachmentsSource)(nil)).Elem()
}

func (i DocumentAttachmentsSourceArgs) ToDocumentAttachmentsSourceOutput() DocumentAttachmentsSourceOutput {
	return i.ToDocumentAttachmentsSourceOutputWithContext(context.Background())
}

func (i DocumentAttachmentsSourceArgs) ToDocumentAttachmentsSourceOutputWithContext(ctx context.Context) DocumentAttachmentsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentAttachmentsSourceOutput)
}

func (i *DocumentAttachmentsSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentAttachmentsSourceArgs] {
	return pulumix.Val(i)
}

type DocumentAttachmentsSourceOutput struct{ *pulumi.OutputState }

func (DocumentAttachmentsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentAttachmentsSource)(nil)).Elem()
}

func (o DocumentAttachmentsSourceOutput) ToDocumentAttachmentsSourceOutput() DocumentAttachmentsSourceOutput {
	return o
}

func (o DocumentAttachmentsSourceOutput) ToDocumentAttachmentsSourceOutputWithContext(ctx context.Context) DocumentAttachmentsSourceOutput {
	return o
}

func (o DocumentAttachmentsSourceOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentAttachmentsSource] {
	return pulumix.Output[DocumentAttachmentsSource]{
		OutputState: o.OutputState,
	}
}

// The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
func (o DocumentAttachmentsSourceOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[DocumentAttachmentsSource](o, func(v DocumentAttachmentsSource) string { return v.Key })
}

// The name of the document attachment file
func (o DocumentAttachmentsSourceOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DocumentAttachmentsSource](o, func(v DocumentAttachmentsSource) *string { return v.Name })
}

// The value describing the location of an attachment to a document
func (o DocumentAttachmentsSourceOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DocumentAttachmentsSource](o, func(v DocumentAttachmentsSource) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type DocumentParameter struct {
	DefaultValue *string `pulumi:"defaultValue"`
	// The description of the document.
	Description *string `pulumi:"description"`
	// The name of the document.
	Name *string `pulumi:"name"`
	Type *string `pulumi:"type"`
}

type DocumentParameterArgs struct {
	DefaultValue pulumix.Input[*string] `pulumi:"defaultValue"`
	// The description of the document.
	Description pulumix.Input[*string] `pulumi:"description"`
	// The name of the document.
	Name pulumix.Input[*string] `pulumi:"name"`
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (DocumentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentParameter)(nil)).Elem()
}

func (i DocumentParameterArgs) ToDocumentParameterOutput() DocumentParameterOutput {
	return i.ToDocumentParameterOutputWithContext(context.Background())
}

func (i DocumentParameterArgs) ToDocumentParameterOutputWithContext(ctx context.Context) DocumentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentParameterOutput)
}

func (i *DocumentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*DocumentParameterArgs] {
	return pulumix.Val(i)
}

type DocumentParameterOutput struct{ *pulumi.OutputState }

func (DocumentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentParameter)(nil)).Elem()
}

func (o DocumentParameterOutput) ToDocumentParameterOutput() DocumentParameterOutput {
	return o
}

func (o DocumentParameterOutput) ToDocumentParameterOutputWithContext(ctx context.Context) DocumentParameterOutput {
	return o
}

func (o DocumentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentParameter] {
	return pulumix.Output[DocumentParameter]{
		OutputState: o.OutputState,
	}
}

func (o DocumentParameterOutput) DefaultValue() pulumix.Output[*string] {
	return pulumix.Apply[DocumentParameter](o, func(v DocumentParameter) *string { return v.DefaultValue })
}

// The description of the document.
func (o DocumentParameterOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[DocumentParameter](o, func(v DocumentParameter) *string { return v.Description })
}

// The name of the document.
func (o DocumentParameterOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[DocumentParameter](o, func(v DocumentParameter) *string { return v.Name })
}

func (o DocumentParameterOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[DocumentParameter](o, func(v DocumentParameter) *string { return v.Type })
}

type MaintenanceWindowTargetTarget struct {
	Key    string   `pulumi:"key"`
	Values []string `pulumi:"values"`
}

type MaintenanceWindowTargetTargetArgs struct {
	Key    pulumix.Input[string]   `pulumi:"key"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (MaintenanceWindowTargetTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTargetTarget)(nil)).Elem()
}

func (i MaintenanceWindowTargetTargetArgs) ToMaintenanceWindowTargetTargetOutput() MaintenanceWindowTargetTargetOutput {
	return i.ToMaintenanceWindowTargetTargetOutputWithContext(context.Background())
}

func (i MaintenanceWindowTargetTargetArgs) ToMaintenanceWindowTargetTargetOutputWithContext(ctx context.Context) MaintenanceWindowTargetTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTargetTargetOutput)
}

func (i *MaintenanceWindowTargetTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTargetTargetArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTargetTargetOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTargetTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTargetTarget)(nil)).Elem()
}

func (o MaintenanceWindowTargetTargetOutput) ToMaintenanceWindowTargetTargetOutput() MaintenanceWindowTargetTargetOutput {
	return o
}

func (o MaintenanceWindowTargetTargetOutput) ToMaintenanceWindowTargetTargetOutputWithContext(ctx context.Context) MaintenanceWindowTargetTargetOutput {
	return o
}

func (o MaintenanceWindowTargetTargetOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTargetTarget] {
	return pulumix.Output[MaintenanceWindowTargetTarget]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceWindowTargetTargetOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[MaintenanceWindowTargetTarget](o, func(v MaintenanceWindowTargetTarget) string { return v.Key })
}

func (o MaintenanceWindowTargetTargetOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MaintenanceWindowTargetTarget](o, func(v MaintenanceWindowTargetTarget) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type MaintenanceWindowTaskTarget struct {
	Key string `pulumi:"key"`
	// The array of strings.
	Values []string `pulumi:"values"`
}

type MaintenanceWindowTaskTargetArgs struct {
	Key pulumix.Input[string] `pulumi:"key"`
	// The array of strings.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (MaintenanceWindowTaskTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTarget)(nil)).Elem()
}

func (i MaintenanceWindowTaskTargetArgs) ToMaintenanceWindowTaskTargetOutput() MaintenanceWindowTaskTargetOutput {
	return i.ToMaintenanceWindowTaskTargetOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTargetArgs) ToMaintenanceWindowTaskTargetOutputWithContext(ctx context.Context) MaintenanceWindowTaskTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTargetOutput)
}

func (i *MaintenanceWindowTaskTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTargetArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTargetOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTarget)(nil)).Elem()
}

func (o MaintenanceWindowTaskTargetOutput) ToMaintenanceWindowTaskTargetOutput() MaintenanceWindowTaskTargetOutput {
	return o
}

func (o MaintenanceWindowTaskTargetOutput) ToMaintenanceWindowTaskTargetOutputWithContext(ctx context.Context) MaintenanceWindowTaskTargetOutput {
	return o
}

func (o MaintenanceWindowTaskTargetOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTarget] {
	return pulumix.Output[MaintenanceWindowTaskTarget]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceWindowTaskTargetOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[MaintenanceWindowTaskTarget](o, func(v MaintenanceWindowTaskTarget) string { return v.Key })
}

// The array of strings.
func (o MaintenanceWindowTaskTargetOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MaintenanceWindowTaskTarget](o, func(v MaintenanceWindowTaskTarget) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type MaintenanceWindowTaskTaskInvocationParameters struct {
	// The parameters for an AUTOMATION task type. Documented below.
	AutomationParameters *MaintenanceWindowTaskTaskInvocationParametersAutomationParameters `pulumi:"automationParameters"`
	// The parameters for a LAMBDA task type. Documented below.
	LambdaParameters *MaintenanceWindowTaskTaskInvocationParametersLambdaParameters `pulumi:"lambdaParameters"`
	// The parameters for a RUN_COMMAND task type. Documented below.
	RunCommandParameters *MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters `pulumi:"runCommandParameters"`
	// The parameters for a STEP_FUNCTIONS task type. Documented below.
	StepFunctionsParameters *MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters `pulumi:"stepFunctionsParameters"`
}

type MaintenanceWindowTaskTaskInvocationParametersArgs struct {
	// The parameters for an AUTOMATION task type. Documented below.
	AutomationParameters pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs] `pulumi:"automationParameters"`
	// The parameters for a LAMBDA task type. Documented below.
	LambdaParameters pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs] `pulumi:"lambdaParameters"`
	// The parameters for a RUN_COMMAND task type. Documented below.
	RunCommandParameters pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs] `pulumi:"runCommandParameters"`
	// The parameters for a STEP_FUNCTIONS task type. Documented below.
	StepFunctionsParameters pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs] `pulumi:"stepFunctionsParameters"`
}

func (MaintenanceWindowTaskTaskInvocationParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParameters)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersOutput() MaintenanceWindowTaskTaskInvocationParametersOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParameters)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersOutput() MaintenanceWindowTaskTaskInvocationParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParameters] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParameters]{
		OutputState: o.OutputState,
	}
}

// The parameters for an AUTOMATION task type. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersOutput) AutomationParameters() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersAutomationParameters, MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParameters](o, func(v MaintenanceWindowTaskTaskInvocationParameters) *MaintenanceWindowTaskTaskInvocationParametersAutomationParameters {
		return v.AutomationParameters
	})
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersAutomationParameters, MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput]{OutputState: value.OutputState}
}

// The parameters for a LAMBDA task type. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersOutput) LambdaParameters() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters, MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParameters](o, func(v MaintenanceWindowTaskTaskInvocationParameters) *MaintenanceWindowTaskTaskInvocationParametersLambdaParameters {
		return v.LambdaParameters
	})
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters, MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput]{OutputState: value.OutputState}
}

// The parameters for a RUN_COMMAND task type. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersOutput) RunCommandParameters() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParameters](o, func(v MaintenanceWindowTaskTaskInvocationParameters) *MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters {
		return v.RunCommandParameters
	})
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput]{OutputState: value.OutputState}
}

// The parameters for a STEP_FUNCTIONS task type. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersOutput) StepFunctionsParameters() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters, MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParameters](o, func(v MaintenanceWindowTaskTaskInvocationParameters) *MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters {
		return v.StepFunctionsParameters
	})
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters, MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput]{OutputState: value.OutputState}
}

type MaintenanceWindowTaskTaskInvocationParametersAutomationParameters struct {
	// The version of an Automation document to use during task execution.
	DocumentVersion *string `pulumi:"documentVersion"`
	// The parameters for the RUN_COMMAND task execution. Documented below.
	Parameters []MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter `pulumi:"parameters"`
}

type MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs struct {
	// The version of an Automation document to use during task execution.
	DocumentVersion pulumix.Input[*string] `pulumi:"documentVersion"`
	// The parameters for the RUN_COMMAND task execution. Documented below.
	Parameters pulumix.Input[[]*MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs] `pulumi:"parameters"`
}

func (MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersAutomationParameters)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput() MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersAutomationParametersArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersAutomationParameters)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput() MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersAutomationParameters] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersAutomationParameters]{
		OutputState: o.OutputState,
	}
}

// The version of an Automation document to use during task execution.
func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput) DocumentVersion() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersAutomationParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersAutomationParameters) *string {
		return v.DocumentVersion
	})
}

// The parameters for the RUN_COMMAND task execution. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput) Parameters() pulumix.GArrayOutput[MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter, MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersAutomationParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersAutomationParameters) []MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter, MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput]{OutputState: value.OutputState}
}

type MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter struct {
	// The parameter name.
	Name string `pulumi:"name"`
	// The array of strings.
	Values []string `pulumi:"values"`
}

type MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs struct {
	// The parameter name.
	Name pulumix.Input[string] `pulumi:"name"`
	// The array of strings.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput() MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput() MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput) ToMaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter]{
		OutputState: o.OutputState,
	}
}

// The parameter name.
func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter](o, func(v MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter) string {
		return v.Name
	})
}

// The array of strings.
func (o MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter](o, func(v MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter) []string {
		return v.Values
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type MaintenanceWindowTaskTaskInvocationParametersLambdaParameters struct {
	// Pass client-specific information to the Lambda function that you are invoking.
	ClientContext *string `pulumi:"clientContext"`
	// JSON to provide to your Lambda function as input.
	Payload *string `pulumi:"payload"`
	// Specify a Lambda function version or alias name.
	Qualifier *string `pulumi:"qualifier"`
}

type MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs struct {
	// Pass client-specific information to the Lambda function that you are invoking.
	ClientContext pulumix.Input[*string] `pulumi:"clientContext"`
	// JSON to provide to your Lambda function as input.
	Payload pulumix.Input[*string] `pulumi:"payload"`
	// Specify a Lambda function version or alias name.
	Qualifier pulumix.Input[*string] `pulumi:"qualifier"`
}

func (MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersLambdaParameters)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput() MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersLambdaParametersArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersLambdaParameters)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput() MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters]{
		OutputState: o.OutputState,
	}
}

// Pass client-specific information to the Lambda function that you are invoking.
func (o MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) ClientContext() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersLambdaParameters) *string { return v.ClientContext })
}

// JSON to provide to your Lambda function as input.
func (o MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) Payload() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersLambdaParameters) *string { return v.Payload })
}

// Specify a Lambda function version or alias name.
func (o MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput) Qualifier() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersLambdaParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersLambdaParameters) *string { return v.Qualifier })
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters struct {
	// Configuration options for sending command output to CloudWatch Logs. Documented below.
	CloudwatchConfig *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig `pulumi:"cloudwatchConfig"`
	// Information about the command(s) to execute.
	Comment *string `pulumi:"comment"`
	// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
	DocumentHash *string `pulumi:"documentHash"`
	// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
	DocumentHashType *string `pulumi:"documentHashType"`
	// The version of an Automation document to use during task execution.
	DocumentVersion *string `pulumi:"documentVersion"`
	// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
	NotificationConfig *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig `pulumi:"notificationConfig"`
	// The name of the Amazon S3 bucket.
	OutputS3Bucket *string `pulumi:"outputS3Bucket"`
	// The Amazon S3 bucket subfolder.
	OutputS3KeyPrefix *string `pulumi:"outputS3KeyPrefix"`
	// The parameters for the RUN_COMMAND task execution. Documented below.
	Parameters []MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// If this time is reached and the command has not already started executing, it doesn't run.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs struct {
	// Configuration options for sending command output to CloudWatch Logs. Documented below.
	CloudwatchConfig pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs] `pulumi:"cloudwatchConfig"`
	// Information about the command(s) to execute.
	Comment pulumix.Input[*string] `pulumi:"comment"`
	// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
	DocumentHash pulumix.Input[*string] `pulumi:"documentHash"`
	// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
	DocumentHashType pulumix.Input[*string] `pulumi:"documentHashType"`
	// The version of an Automation document to use during task execution.
	DocumentVersion pulumix.Input[*string] `pulumi:"documentVersion"`
	// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
	NotificationConfig pulumix.Input[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs] `pulumi:"notificationConfig"`
	// The name of the Amazon S3 bucket.
	OutputS3Bucket pulumix.Input[*string] `pulumi:"outputS3Bucket"`
	// The Amazon S3 bucket subfolder.
	OutputS3KeyPrefix pulumix.Input[*string] `pulumi:"outputS3KeyPrefix"`
	// The parameters for the RUN_COMMAND task execution. Documented below.
	Parameters pulumix.Input[[]*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs] `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.
	ServiceRoleArn pulumix.Input[*string] `pulumi:"serviceRoleArn"`
	// If this time is reached and the command has not already started executing, it doesn't run.
	TimeoutSeconds pulumix.Input[*int] `pulumi:"timeoutSeconds"`
}

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters]{
		OutputState: o.OutputState,
	}
}

// Configuration options for sending command output to CloudWatch Logs. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) CloudwatchConfig() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig {
		return v.CloudwatchConfig
	})
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput]{OutputState: value.OutputState}
}

// Information about the command(s) to execute.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) Comment() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string { return v.Comment })
}

// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) DocumentHash() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string {
		return v.DocumentHash
	})
}

// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) DocumentHashType() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string {
		return v.DocumentHashType
	})
}

// The version of an Automation document to use during task execution.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) DocumentVersion() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string {
		return v.DocumentVersion
	})
}

// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) NotificationConfig() pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig {
		return v.NotificationConfig
	})
	return pulumix.GPtrOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput]{OutputState: value.OutputState}
}

// The name of the Amazon S3 bucket.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) OutputS3Bucket() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string {
		return v.OutputS3Bucket
	})
}

// The Amazon S3 bucket subfolder.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) OutputS3KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string {
		return v.OutputS3KeyPrefix
	})
}

// The parameters for the RUN_COMMAND task execution. Documented below.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) Parameters() pulumix.GArrayOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) []MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter {
		return v.Parameters
	})
	return pulumix.GArrayOutput[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter, MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput]{OutputState: value.OutputState}
}

// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) ServiceRoleArn() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *string {
		return v.ServiceRoleArn
	})
}

// If this time is reached and the command has not already started executing, it doesn't run.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput) TimeoutSeconds() pulumix.Output[*int] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters) *int {
		return v.TimeoutSeconds
	})
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig struct {
	// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
	CloudwatchLogGroupName *string `pulumi:"cloudwatchLogGroupName"`
	// Enables Systems Manager to send command output to CloudWatch Logs.
	CloudwatchOutputEnabled *bool `pulumi:"cloudwatchOutputEnabled"`
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs struct {
	// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
	CloudwatchLogGroupName pulumix.Input[*string] `pulumi:"cloudwatchLogGroupName"`
	// Enables Systems Manager to send command output to CloudWatch Logs.
	CloudwatchOutputEnabled pulumix.Input[*bool] `pulumi:"cloudwatchOutputEnabled"`
}

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput) CloudwatchLogGroupName() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig) *string {
		return v.CloudwatchLogGroupName
	})
}

// Enables Systems Manager to send command output to CloudWatch Logs.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput) CloudwatchOutputEnabled() pulumix.Output[*bool] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfig) *bool {
		return v.CloudwatchOutputEnabled
	})
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig struct {
	// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
	NotificationArn *string `pulumi:"notificationArn"`
	// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
	NotificationEvents []string `pulumi:"notificationEvents"`
	// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
	NotificationType *string `pulumi:"notificationType"`
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs struct {
	// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
	NotificationArn pulumix.Input[*string] `pulumi:"notificationArn"`
	// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
	NotificationEvents pulumix.Input[[]string] `pulumi:"notificationEvents"`
	// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
	NotificationType pulumix.Input[*string] `pulumi:"notificationType"`
}

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig]{
		OutputState: o.OutputState,
	}
}

// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) NotificationArn() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *string {
		return v.NotificationArn
	})
}

// The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) NotificationEvents() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) []string {
		return v.NotificationEvents
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput) NotificationType() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig) *string {
		return v.NotificationType
	})
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter struct {
	// The parameter name.
	Name string `pulumi:"name"`
	// The array of strings.
	Values []string `pulumi:"values"`
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs struct {
	// The parameter name.
	Name pulumix.Input[string] `pulumi:"name"`
	// The array of strings.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput() MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput) ToMaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter]{
		OutputState: o.OutputState,
	}
}

// The parameter name.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter) string {
		return v.Name
	})
}

// The array of strings.
func (o MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter](o, func(v MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter) []string {
		return v.Values
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters struct {
	// The inputs for the STEP_FUNCTION task.
	Input *string `pulumi:"input"`
	// The name of the STEP_FUNCTION task.
	Name *string `pulumi:"name"`
}

type MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs struct {
	// The inputs for the STEP_FUNCTION task.
	Input pulumix.Input[*string] `pulumi:"input"`
	// The name of the STEP_FUNCTION task.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters)(nil)).Elem()
}

func (i MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput() MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput {
	return i.ToMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutputWithContext(context.Background())
}

func (i MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs) ToMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput)
}

func (i *MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersArgs] {
	return pulumix.Val(i)
}

type MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters)(nil)).Elem()
}

func (o MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput() MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput) ToMaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutputWithContext(ctx context.Context) MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput {
	return o
}

func (o MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters] {
	return pulumix.Output[MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters]{
		OutputState: o.OutputState,
	}
}

// The inputs for the STEP_FUNCTION task.
func (o MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput) Input() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters) *string { return v.Input })
}

// The name of the STEP_FUNCTION task.
func (o MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters](o, func(v MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters) *string { return v.Name })
}

type PatchBaselineApprovalRule struct {
	// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
	// Valid Range: 0 to 100.
	// Conflicts with `approveUntilDate`.
	ApproveAfterDays *int `pulumi:"approveAfterDays"`
	// The cutoff date for auto approval of released patches.
	// Any patches released on or before this date are installed automatically.
	// Date is formatted as `YYYY-MM-DD`.
	// Conflicts with `approveAfterDays`
	ApproveUntilDate *string `pulumi:"approveUntilDate"`
	// The compliance level for patches approved by this rule.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, and `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ComplianceLevel *string `pulumi:"complianceLevel"`
	// Boolean enabling the application of non-security updates.
	// The default value is `false`.
	// Valid for Linux instances only.
	EnableNonSecurity *bool `pulumi:"enableNonSecurity"`
	// The patch filter group that defines the criteria for the rule.
	// Up to 5 patch filters can be specified per approval rule using Key/Value pairs.
	// Valid combinations of these Keys and the `operatingSystem` value can be found in the [SSM DescribePatchProperties API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribePatchProperties.html).
	// Valid Values are exact values for the patch property given as the key, or a wildcard `*`, which matches all values.
	PatchFilters []PatchBaselineApprovalRulePatchFilter `pulumi:"patchFilters"`
}

type PatchBaselineApprovalRuleArgs struct {
	// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
	// Valid Range: 0 to 100.
	// Conflicts with `approveUntilDate`.
	ApproveAfterDays pulumix.Input[*int] `pulumi:"approveAfterDays"`
	// The cutoff date for auto approval of released patches.
	// Any patches released on or before this date are installed automatically.
	// Date is formatted as `YYYY-MM-DD`.
	// Conflicts with `approveAfterDays`
	ApproveUntilDate pulumix.Input[*string] `pulumi:"approveUntilDate"`
	// The compliance level for patches approved by this rule.
	// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, and `UNSPECIFIED`.
	// The default value is `UNSPECIFIED`.
	ComplianceLevel pulumix.Input[*string] `pulumi:"complianceLevel"`
	// Boolean enabling the application of non-security updates.
	// The default value is `false`.
	// Valid for Linux instances only.
	EnableNonSecurity pulumix.Input[*bool] `pulumi:"enableNonSecurity"`
	// The patch filter group that defines the criteria for the rule.
	// Up to 5 patch filters can be specified per approval rule using Key/Value pairs.
	// Valid combinations of these Keys and the `operatingSystem` value can be found in the [SSM DescribePatchProperties API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribePatchProperties.html).
	// Valid Values are exact values for the patch property given as the key, or a wildcard `*`, which matches all values.
	PatchFilters pulumix.Input[[]*PatchBaselineApprovalRulePatchFilterArgs] `pulumi:"patchFilters"`
}

func (PatchBaselineApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineApprovalRule)(nil)).Elem()
}

func (i PatchBaselineApprovalRuleArgs) ToPatchBaselineApprovalRuleOutput() PatchBaselineApprovalRuleOutput {
	return i.ToPatchBaselineApprovalRuleOutputWithContext(context.Background())
}

func (i PatchBaselineApprovalRuleArgs) ToPatchBaselineApprovalRuleOutputWithContext(ctx context.Context) PatchBaselineApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineApprovalRuleOutput)
}

func (i *PatchBaselineApprovalRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*PatchBaselineApprovalRuleArgs] {
	return pulumix.Val(i)
}

type PatchBaselineApprovalRuleOutput struct{ *pulumi.OutputState }

func (PatchBaselineApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineApprovalRule)(nil)).Elem()
}

func (o PatchBaselineApprovalRuleOutput) ToPatchBaselineApprovalRuleOutput() PatchBaselineApprovalRuleOutput {
	return o
}

func (o PatchBaselineApprovalRuleOutput) ToPatchBaselineApprovalRuleOutputWithContext(ctx context.Context) PatchBaselineApprovalRuleOutput {
	return o
}

func (o PatchBaselineApprovalRuleOutput) ToOutput(ctx context.Context) pulumix.Output[PatchBaselineApprovalRule] {
	return pulumix.Output[PatchBaselineApprovalRule]{
		OutputState: o.OutputState,
	}
}

// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
// Valid Range: 0 to 100.
// Conflicts with `approveUntilDate`.
func (o PatchBaselineApprovalRuleOutput) ApproveAfterDays() pulumix.Output[*int] {
	return pulumix.Apply[PatchBaselineApprovalRule](o, func(v PatchBaselineApprovalRule) *int { return v.ApproveAfterDays })
}

// The cutoff date for auto approval of released patches.
// Any patches released on or before this date are installed automatically.
// Date is formatted as `YYYY-MM-DD`.
// Conflicts with `approveAfterDays`
func (o PatchBaselineApprovalRuleOutput) ApproveUntilDate() pulumix.Output[*string] {
	return pulumix.Apply[PatchBaselineApprovalRule](o, func(v PatchBaselineApprovalRule) *string { return v.ApproveUntilDate })
}

// The compliance level for patches approved by this rule.
// Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, and `UNSPECIFIED`.
// The default value is `UNSPECIFIED`.
func (o PatchBaselineApprovalRuleOutput) ComplianceLevel() pulumix.Output[*string] {
	return pulumix.Apply[PatchBaselineApprovalRule](o, func(v PatchBaselineApprovalRule) *string { return v.ComplianceLevel })
}

// Boolean enabling the application of non-security updates.
// The default value is `false`.
// Valid for Linux instances only.
func (o PatchBaselineApprovalRuleOutput) EnableNonSecurity() pulumix.Output[*bool] {
	return pulumix.Apply[PatchBaselineApprovalRule](o, func(v PatchBaselineApprovalRule) *bool { return v.EnableNonSecurity })
}

// The patch filter group that defines the criteria for the rule.
// Up to 5 patch filters can be specified per approval rule using Key/Value pairs.
// Valid combinations of these Keys and the `operatingSystem` value can be found in the [SSM DescribePatchProperties API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribePatchProperties.html).
// Valid Values are exact values for the patch property given as the key, or a wildcard `*`, which matches all values.
func (o PatchBaselineApprovalRuleOutput) PatchFilters() pulumix.GArrayOutput[PatchBaselineApprovalRulePatchFilter, PatchBaselineApprovalRulePatchFilterOutput] {
	value := pulumix.Apply[PatchBaselineApprovalRule](o, func(v PatchBaselineApprovalRule) []PatchBaselineApprovalRulePatchFilter { return v.PatchFilters })
	return pulumix.GArrayOutput[PatchBaselineApprovalRulePatchFilter, PatchBaselineApprovalRulePatchFilterOutput]{OutputState: value.OutputState}
}

type PatchBaselineApprovalRulePatchFilter struct {
	Key    string   `pulumi:"key"`
	Values []string `pulumi:"values"`
}

type PatchBaselineApprovalRulePatchFilterArgs struct {
	Key    pulumix.Input[string]   `pulumi:"key"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (PatchBaselineApprovalRulePatchFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineApprovalRulePatchFilter)(nil)).Elem()
}

func (i PatchBaselineApprovalRulePatchFilterArgs) ToPatchBaselineApprovalRulePatchFilterOutput() PatchBaselineApprovalRulePatchFilterOutput {
	return i.ToPatchBaselineApprovalRulePatchFilterOutputWithContext(context.Background())
}

func (i PatchBaselineApprovalRulePatchFilterArgs) ToPatchBaselineApprovalRulePatchFilterOutputWithContext(ctx context.Context) PatchBaselineApprovalRulePatchFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineApprovalRulePatchFilterOutput)
}

func (i *PatchBaselineApprovalRulePatchFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*PatchBaselineApprovalRulePatchFilterArgs] {
	return pulumix.Val(i)
}

type PatchBaselineApprovalRulePatchFilterOutput struct{ *pulumi.OutputState }

func (PatchBaselineApprovalRulePatchFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineApprovalRulePatchFilter)(nil)).Elem()
}

func (o PatchBaselineApprovalRulePatchFilterOutput) ToPatchBaselineApprovalRulePatchFilterOutput() PatchBaselineApprovalRulePatchFilterOutput {
	return o
}

func (o PatchBaselineApprovalRulePatchFilterOutput) ToPatchBaselineApprovalRulePatchFilterOutputWithContext(ctx context.Context) PatchBaselineApprovalRulePatchFilterOutput {
	return o
}

func (o PatchBaselineApprovalRulePatchFilterOutput) ToOutput(ctx context.Context) pulumix.Output[PatchBaselineApprovalRulePatchFilter] {
	return pulumix.Output[PatchBaselineApprovalRulePatchFilter]{
		OutputState: o.OutputState,
	}
}

func (o PatchBaselineApprovalRulePatchFilterOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[PatchBaselineApprovalRulePatchFilter](o, func(v PatchBaselineApprovalRulePatchFilter) string { return v.Key })
}

func (o PatchBaselineApprovalRulePatchFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PatchBaselineApprovalRulePatchFilter](o, func(v PatchBaselineApprovalRulePatchFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PatchBaselineGlobalFilter struct {
	Key    string   `pulumi:"key"`
	Values []string `pulumi:"values"`
}

type PatchBaselineGlobalFilterArgs struct {
	Key    pulumix.Input[string]   `pulumi:"key"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (PatchBaselineGlobalFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineGlobalFilter)(nil)).Elem()
}

func (i PatchBaselineGlobalFilterArgs) ToPatchBaselineGlobalFilterOutput() PatchBaselineGlobalFilterOutput {
	return i.ToPatchBaselineGlobalFilterOutputWithContext(context.Background())
}

func (i PatchBaselineGlobalFilterArgs) ToPatchBaselineGlobalFilterOutputWithContext(ctx context.Context) PatchBaselineGlobalFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineGlobalFilterOutput)
}

func (i *PatchBaselineGlobalFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*PatchBaselineGlobalFilterArgs] {
	return pulumix.Val(i)
}

type PatchBaselineGlobalFilterOutput struct{ *pulumi.OutputState }

func (PatchBaselineGlobalFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineGlobalFilter)(nil)).Elem()
}

func (o PatchBaselineGlobalFilterOutput) ToPatchBaselineGlobalFilterOutput() PatchBaselineGlobalFilterOutput {
	return o
}

func (o PatchBaselineGlobalFilterOutput) ToPatchBaselineGlobalFilterOutputWithContext(ctx context.Context) PatchBaselineGlobalFilterOutput {
	return o
}

func (o PatchBaselineGlobalFilterOutput) ToOutput(ctx context.Context) pulumix.Output[PatchBaselineGlobalFilter] {
	return pulumix.Output[PatchBaselineGlobalFilter]{
		OutputState: o.OutputState,
	}
}

func (o PatchBaselineGlobalFilterOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[PatchBaselineGlobalFilter](o, func(v PatchBaselineGlobalFilter) string { return v.Key })
}

func (o PatchBaselineGlobalFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PatchBaselineGlobalFilter](o, func(v PatchBaselineGlobalFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PatchBaselineSource struct {
	// The value of the yum repo configuration.
	// For information about other options available for your yum repository configuration, see the [`dnf.conf` documentation](https://man7.org/linux/man-pages/man5/dnf.conf.5.html)
	Configuration string `pulumi:"configuration"`
	// The name specified to identify the patch source.
	Name string `pulumi:"name"`
	// The specific operating system versions a patch repository applies to, such as `"Ubuntu16.04"`, `"AmazonLinux2016.09"`, `"RedhatEnterpriseLinux7.2"` or `"Suse12.7"`.
	// For lists of supported product values, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html).
	Products []string `pulumi:"products"`
}

type PatchBaselineSourceArgs struct {
	// The value of the yum repo configuration.
	// For information about other options available for your yum repository configuration, see the [`dnf.conf` documentation](https://man7.org/linux/man-pages/man5/dnf.conf.5.html)
	Configuration pulumix.Input[string] `pulumi:"configuration"`
	// The name specified to identify the patch source.
	Name pulumix.Input[string] `pulumi:"name"`
	// The specific operating system versions a patch repository applies to, such as `"Ubuntu16.04"`, `"AmazonLinux2016.09"`, `"RedhatEnterpriseLinux7.2"` or `"Suse12.7"`.
	// For lists of supported product values, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html).
	Products pulumix.Input[[]string] `pulumi:"products"`
}

func (PatchBaselineSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineSource)(nil)).Elem()
}

func (i PatchBaselineSourceArgs) ToPatchBaselineSourceOutput() PatchBaselineSourceOutput {
	return i.ToPatchBaselineSourceOutputWithContext(context.Background())
}

func (i PatchBaselineSourceArgs) ToPatchBaselineSourceOutputWithContext(ctx context.Context) PatchBaselineSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineSourceOutput)
}

func (i *PatchBaselineSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*PatchBaselineSourceArgs] {
	return pulumix.Val(i)
}

type PatchBaselineSourceOutput struct{ *pulumi.OutputState }

func (PatchBaselineSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchBaselineSource)(nil)).Elem()
}

func (o PatchBaselineSourceOutput) ToPatchBaselineSourceOutput() PatchBaselineSourceOutput {
	return o
}

func (o PatchBaselineSourceOutput) ToPatchBaselineSourceOutputWithContext(ctx context.Context) PatchBaselineSourceOutput {
	return o
}

func (o PatchBaselineSourceOutput) ToOutput(ctx context.Context) pulumix.Output[PatchBaselineSource] {
	return pulumix.Output[PatchBaselineSource]{
		OutputState: o.OutputState,
	}
}

// The value of the yum repo configuration.
// For information about other options available for your yum repository configuration, see the [`dnf.conf` documentation](https://man7.org/linux/man-pages/man5/dnf.conf.5.html)
func (o PatchBaselineSourceOutput) Configuration() pulumix.Output[string] {
	return pulumix.Apply[PatchBaselineSource](o, func(v PatchBaselineSource) string { return v.Configuration })
}

// The name specified to identify the patch source.
func (o PatchBaselineSourceOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PatchBaselineSource](o, func(v PatchBaselineSource) string { return v.Name })
}

// The specific operating system versions a patch repository applies to, such as `"Ubuntu16.04"`, `"AmazonLinux2016.09"`, `"RedhatEnterpriseLinux7.2"` or `"Suse12.7"`.
// For lists of supported product values, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html).
func (o PatchBaselineSourceOutput) Products() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PatchBaselineSource](o, func(v PatchBaselineSource) []string { return v.Products })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ResourceDataSyncS3Destination struct {
	// Name of S3 bucket where the aggregated data is stored.
	BucketName string `pulumi:"bucketName"`
	// ARN of an encryption key for a destination in Amazon S3.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Prefix for the bucket.
	Prefix *string `pulumi:"prefix"`
	// Region with the bucket targeted by the Resource Data Sync.
	Region string `pulumi:"region"`
	// A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
	SyncFormat *string `pulumi:"syncFormat"`
}

type ResourceDataSyncS3DestinationArgs struct {
	// Name of S3 bucket where the aggregated data is stored.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// ARN of an encryption key for a destination in Amazon S3.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// Prefix for the bucket.
	Prefix pulumix.Input[*string] `pulumi:"prefix"`
	// Region with the bucket targeted by the Resource Data Sync.
	Region pulumix.Input[string] `pulumi:"region"`
	// A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
	SyncFormat pulumix.Input[*string] `pulumi:"syncFormat"`
}

func (ResourceDataSyncS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDataSyncS3Destination)(nil)).Elem()
}

func (i ResourceDataSyncS3DestinationArgs) ToResourceDataSyncS3DestinationOutput() ResourceDataSyncS3DestinationOutput {
	return i.ToResourceDataSyncS3DestinationOutputWithContext(context.Background())
}

func (i ResourceDataSyncS3DestinationArgs) ToResourceDataSyncS3DestinationOutputWithContext(ctx context.Context) ResourceDataSyncS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDataSyncS3DestinationOutput)
}

func (i *ResourceDataSyncS3DestinationArgs) ToOutput(ctx context.Context) pulumix.Output[*ResourceDataSyncS3DestinationArgs] {
	return pulumix.Val(i)
}

type ResourceDataSyncS3DestinationOutput struct{ *pulumi.OutputState }

func (ResourceDataSyncS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDataSyncS3Destination)(nil)).Elem()
}

func (o ResourceDataSyncS3DestinationOutput) ToResourceDataSyncS3DestinationOutput() ResourceDataSyncS3DestinationOutput {
	return o
}

func (o ResourceDataSyncS3DestinationOutput) ToResourceDataSyncS3DestinationOutputWithContext(ctx context.Context) ResourceDataSyncS3DestinationOutput {
	return o
}

func (o ResourceDataSyncS3DestinationOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceDataSyncS3Destination] {
	return pulumix.Output[ResourceDataSyncS3Destination]{
		OutputState: o.OutputState,
	}
}

// Name of S3 bucket where the aggregated data is stored.
func (o ResourceDataSyncS3DestinationOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ResourceDataSyncS3Destination](o, func(v ResourceDataSyncS3Destination) string { return v.BucketName })
}

// ARN of an encryption key for a destination in Amazon S3.
func (o ResourceDataSyncS3DestinationOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[ResourceDataSyncS3Destination](o, func(v ResourceDataSyncS3Destination) *string { return v.KmsKeyArn })
}

// Prefix for the bucket.
func (o ResourceDataSyncS3DestinationOutput) Prefix() pulumix.Output[*string] {
	return pulumix.Apply[ResourceDataSyncS3Destination](o, func(v ResourceDataSyncS3Destination) *string { return v.Prefix })
}

// Region with the bucket targeted by the Resource Data Sync.
func (o ResourceDataSyncS3DestinationOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[ResourceDataSyncS3Destination](o, func(v ResourceDataSyncS3Destination) string { return v.Region })
}

// A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
func (o ResourceDataSyncS3DestinationOutput) SyncFormat() pulumix.Output[*string] {
	return pulumix.Apply[ResourceDataSyncS3Destination](o, func(v ResourceDataSyncS3Destination) *string { return v.SyncFormat })
}

type GetInstancesFilter struct {
	// Name of the filter field. Valid values can be found in the [SSM InstanceInformationStringFilter API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_InstanceInformationStringFilter.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetInstancesFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [SSM InstanceInformationStringFilter API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_InstanceInformationStringFilter.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetInstancesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesFilter)(nil)).Elem()
}

func (i GetInstancesFilterArgs) ToGetInstancesFilterOutput() GetInstancesFilterOutput {
	return i.ToGetInstancesFilterOutputWithContext(context.Background())
}

func (i GetInstancesFilterArgs) ToGetInstancesFilterOutputWithContext(ctx context.Context) GetInstancesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesFilterOutput)
}

func (i *GetInstancesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstancesFilterArgs] {
	return pulumix.Val(i)
}

type GetInstancesFilterOutput struct{ *pulumi.OutputState }

func (GetInstancesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesFilter)(nil)).Elem()
}

func (o GetInstancesFilterOutput) ToGetInstancesFilterOutput() GetInstancesFilterOutput {
	return o
}

func (o GetInstancesFilterOutput) ToGetInstancesFilterOutputWithContext(ctx context.Context) GetInstancesFilterOutput {
	return o
}

func (o GetInstancesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstancesFilter] {
	return pulumix.Output[GetInstancesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [SSM InstanceInformationStringFilter API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_InstanceInformationStringFilter.html).
func (o GetInstancesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetInstancesFilter](o, func(v GetInstancesFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetInstancesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetInstancesFilter](o, func(v GetInstancesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetMaintenanceWindowsFilter struct {
	// Name of the filter field. Valid values can be found in the [SSM DescribeMaintenanceWindows API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribeMaintenanceWindows.html#API_DescribeMaintenanceWindows_RequestSyntax).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetMaintenanceWindowsFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [SSM DescribeMaintenanceWindows API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribeMaintenanceWindows.html#API_DescribeMaintenanceWindows_RequestSyntax).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetMaintenanceWindowsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaintenanceWindowsFilter)(nil)).Elem()
}

func (i GetMaintenanceWindowsFilterArgs) ToGetMaintenanceWindowsFilterOutput() GetMaintenanceWindowsFilterOutput {
	return i.ToGetMaintenanceWindowsFilterOutputWithContext(context.Background())
}

func (i GetMaintenanceWindowsFilterArgs) ToGetMaintenanceWindowsFilterOutputWithContext(ctx context.Context) GetMaintenanceWindowsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaintenanceWindowsFilterOutput)
}

func (i *GetMaintenanceWindowsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetMaintenanceWindowsFilterArgs] {
	return pulumix.Val(i)
}

type GetMaintenanceWindowsFilterOutput struct{ *pulumi.OutputState }

func (GetMaintenanceWindowsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaintenanceWindowsFilter)(nil)).Elem()
}

func (o GetMaintenanceWindowsFilterOutput) ToGetMaintenanceWindowsFilterOutput() GetMaintenanceWindowsFilterOutput {
	return o
}

func (o GetMaintenanceWindowsFilterOutput) ToGetMaintenanceWindowsFilterOutputWithContext(ctx context.Context) GetMaintenanceWindowsFilterOutput {
	return o
}

func (o GetMaintenanceWindowsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetMaintenanceWindowsFilter] {
	return pulumix.Output[GetMaintenanceWindowsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [SSM DescribeMaintenanceWindows API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribeMaintenanceWindows.html#API_DescribeMaintenanceWindows_RequestSyntax).
func (o GetMaintenanceWindowsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetMaintenanceWindowsFilter](o, func(v GetMaintenanceWindowsFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetMaintenanceWindowsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetMaintenanceWindowsFilter](o, func(v GetMaintenanceWindowsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetPatchBaselineApprovalRule struct {
	// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
	ApproveAfterDays int `pulumi:"approveAfterDays"`
	// The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approveAfterDays`
	ApproveUntilDate string `pulumi:"approveUntilDate"`
	// The compliance level for patches approved by this rule.
	ComplianceLevel string `pulumi:"complianceLevel"`
	// Boolean enabling the application of non-security updates.
	EnableNonSecurity bool `pulumi:"enableNonSecurity"`
	// The patch filter group that defines the criteria for the rule.
	PatchFilters []GetPatchBaselineApprovalRulePatchFilter `pulumi:"patchFilters"`
}

type GetPatchBaselineApprovalRuleArgs struct {
	// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
	ApproveAfterDays pulumix.Input[int] `pulumi:"approveAfterDays"`
	// The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approveAfterDays`
	ApproveUntilDate pulumix.Input[string] `pulumi:"approveUntilDate"`
	// The compliance level for patches approved by this rule.
	ComplianceLevel pulumix.Input[string] `pulumi:"complianceLevel"`
	// Boolean enabling the application of non-security updates.
	EnableNonSecurity pulumix.Input[bool] `pulumi:"enableNonSecurity"`
	// The patch filter group that defines the criteria for the rule.
	PatchFilters pulumix.Input[[]*GetPatchBaselineApprovalRulePatchFilterArgs] `pulumi:"patchFilters"`
}

func (GetPatchBaselineApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineApprovalRule)(nil)).Elem()
}

func (i GetPatchBaselineApprovalRuleArgs) ToGetPatchBaselineApprovalRuleOutput() GetPatchBaselineApprovalRuleOutput {
	return i.ToGetPatchBaselineApprovalRuleOutputWithContext(context.Background())
}

func (i GetPatchBaselineApprovalRuleArgs) ToGetPatchBaselineApprovalRuleOutputWithContext(ctx context.Context) GetPatchBaselineApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPatchBaselineApprovalRuleOutput)
}

func (i *GetPatchBaselineApprovalRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPatchBaselineApprovalRuleArgs] {
	return pulumix.Val(i)
}

type GetPatchBaselineApprovalRuleOutput struct{ *pulumi.OutputState }

func (GetPatchBaselineApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineApprovalRule)(nil)).Elem()
}

func (o GetPatchBaselineApprovalRuleOutput) ToGetPatchBaselineApprovalRuleOutput() GetPatchBaselineApprovalRuleOutput {
	return o
}

func (o GetPatchBaselineApprovalRuleOutput) ToGetPatchBaselineApprovalRuleOutputWithContext(ctx context.Context) GetPatchBaselineApprovalRuleOutput {
	return o
}

func (o GetPatchBaselineApprovalRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetPatchBaselineApprovalRule] {
	return pulumix.Output[GetPatchBaselineApprovalRule]{
		OutputState: o.OutputState,
	}
}

// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
func (o GetPatchBaselineApprovalRuleOutput) ApproveAfterDays() pulumix.Output[int] {
	return pulumix.Apply[GetPatchBaselineApprovalRule](o, func(v GetPatchBaselineApprovalRule) int { return v.ApproveAfterDays })
}

// The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approveAfterDays`
func (o GetPatchBaselineApprovalRuleOutput) ApproveUntilDate() pulumix.Output[string] {
	return pulumix.Apply[GetPatchBaselineApprovalRule](o, func(v GetPatchBaselineApprovalRule) string { return v.ApproveUntilDate })
}

// The compliance level for patches approved by this rule.
func (o GetPatchBaselineApprovalRuleOutput) ComplianceLevel() pulumix.Output[string] {
	return pulumix.Apply[GetPatchBaselineApprovalRule](o, func(v GetPatchBaselineApprovalRule) string { return v.ComplianceLevel })
}

// Boolean enabling the application of non-security updates.
func (o GetPatchBaselineApprovalRuleOutput) EnableNonSecurity() pulumix.Output[bool] {
	return pulumix.Apply[GetPatchBaselineApprovalRule](o, func(v GetPatchBaselineApprovalRule) bool { return v.EnableNonSecurity })
}

// The patch filter group that defines the criteria for the rule.
func (o GetPatchBaselineApprovalRuleOutput) PatchFilters() pulumix.GArrayOutput[GetPatchBaselineApprovalRulePatchFilter, GetPatchBaselineApprovalRulePatchFilterOutput] {
	value := pulumix.Apply[GetPatchBaselineApprovalRule](o, func(v GetPatchBaselineApprovalRule) []GetPatchBaselineApprovalRulePatchFilter { return v.PatchFilters })
	return pulumix.GArrayOutput[GetPatchBaselineApprovalRulePatchFilter, GetPatchBaselineApprovalRulePatchFilterOutput]{OutputState: value.OutputState}
}

type GetPatchBaselineApprovalRulePatchFilter struct {
	// The key for the filter.
	Key string `pulumi:"key"`
	// The value for the filter.
	Values []string `pulumi:"values"`
}

type GetPatchBaselineApprovalRulePatchFilterArgs struct {
	// The key for the filter.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value for the filter.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetPatchBaselineApprovalRulePatchFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineApprovalRulePatchFilter)(nil)).Elem()
}

func (i GetPatchBaselineApprovalRulePatchFilterArgs) ToGetPatchBaselineApprovalRulePatchFilterOutput() GetPatchBaselineApprovalRulePatchFilterOutput {
	return i.ToGetPatchBaselineApprovalRulePatchFilterOutputWithContext(context.Background())
}

func (i GetPatchBaselineApprovalRulePatchFilterArgs) ToGetPatchBaselineApprovalRulePatchFilterOutputWithContext(ctx context.Context) GetPatchBaselineApprovalRulePatchFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPatchBaselineApprovalRulePatchFilterOutput)
}

func (i *GetPatchBaselineApprovalRulePatchFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPatchBaselineApprovalRulePatchFilterArgs] {
	return pulumix.Val(i)
}

type GetPatchBaselineApprovalRulePatchFilterOutput struct{ *pulumi.OutputState }

func (GetPatchBaselineApprovalRulePatchFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineApprovalRulePatchFilter)(nil)).Elem()
}

func (o GetPatchBaselineApprovalRulePatchFilterOutput) ToGetPatchBaselineApprovalRulePatchFilterOutput() GetPatchBaselineApprovalRulePatchFilterOutput {
	return o
}

func (o GetPatchBaselineApprovalRulePatchFilterOutput) ToGetPatchBaselineApprovalRulePatchFilterOutputWithContext(ctx context.Context) GetPatchBaselineApprovalRulePatchFilterOutput {
	return o
}

func (o GetPatchBaselineApprovalRulePatchFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetPatchBaselineApprovalRulePatchFilter] {
	return pulumix.Output[GetPatchBaselineApprovalRulePatchFilter]{
		OutputState: o.OutputState,
	}
}

// The key for the filter.
func (o GetPatchBaselineApprovalRulePatchFilterOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetPatchBaselineApprovalRulePatchFilter](o, func(v GetPatchBaselineApprovalRulePatchFilter) string { return v.Key })
}

// The value for the filter.
func (o GetPatchBaselineApprovalRulePatchFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPatchBaselineApprovalRulePatchFilter](o, func(v GetPatchBaselineApprovalRulePatchFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetPatchBaselineGlobalFilter struct {
	// The key for the filter.
	Key string `pulumi:"key"`
	// The value for the filter.
	Values []string `pulumi:"values"`
}

type GetPatchBaselineGlobalFilterArgs struct {
	// The key for the filter.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value for the filter.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetPatchBaselineGlobalFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineGlobalFilter)(nil)).Elem()
}

func (i GetPatchBaselineGlobalFilterArgs) ToGetPatchBaselineGlobalFilterOutput() GetPatchBaselineGlobalFilterOutput {
	return i.ToGetPatchBaselineGlobalFilterOutputWithContext(context.Background())
}

func (i GetPatchBaselineGlobalFilterArgs) ToGetPatchBaselineGlobalFilterOutputWithContext(ctx context.Context) GetPatchBaselineGlobalFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPatchBaselineGlobalFilterOutput)
}

func (i *GetPatchBaselineGlobalFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPatchBaselineGlobalFilterArgs] {
	return pulumix.Val(i)
}

type GetPatchBaselineGlobalFilterOutput struct{ *pulumi.OutputState }

func (GetPatchBaselineGlobalFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineGlobalFilter)(nil)).Elem()
}

func (o GetPatchBaselineGlobalFilterOutput) ToGetPatchBaselineGlobalFilterOutput() GetPatchBaselineGlobalFilterOutput {
	return o
}

func (o GetPatchBaselineGlobalFilterOutput) ToGetPatchBaselineGlobalFilterOutputWithContext(ctx context.Context) GetPatchBaselineGlobalFilterOutput {
	return o
}

func (o GetPatchBaselineGlobalFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetPatchBaselineGlobalFilter] {
	return pulumix.Output[GetPatchBaselineGlobalFilter]{
		OutputState: o.OutputState,
	}
}

// The key for the filter.
func (o GetPatchBaselineGlobalFilterOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetPatchBaselineGlobalFilter](o, func(v GetPatchBaselineGlobalFilter) string { return v.Key })
}

// The value for the filter.
func (o GetPatchBaselineGlobalFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPatchBaselineGlobalFilter](o, func(v GetPatchBaselineGlobalFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetPatchBaselineSource struct {
	// The value of the yum repo configuration.
	Configuration string `pulumi:"configuration"`
	// The name specified to identify the patch source.
	Name string `pulumi:"name"`
	// The specific operating system versions a patch repository applies to.
	Products []string `pulumi:"products"`
}

type GetPatchBaselineSourceArgs struct {
	// The value of the yum repo configuration.
	Configuration pulumix.Input[string] `pulumi:"configuration"`
	// The name specified to identify the patch source.
	Name pulumix.Input[string] `pulumi:"name"`
	// The specific operating system versions a patch repository applies to.
	Products pulumix.Input[[]string] `pulumi:"products"`
}

func (GetPatchBaselineSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineSource)(nil)).Elem()
}

func (i GetPatchBaselineSourceArgs) ToGetPatchBaselineSourceOutput() GetPatchBaselineSourceOutput {
	return i.ToGetPatchBaselineSourceOutputWithContext(context.Background())
}

func (i GetPatchBaselineSourceArgs) ToGetPatchBaselineSourceOutputWithContext(ctx context.Context) GetPatchBaselineSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPatchBaselineSourceOutput)
}

func (i *GetPatchBaselineSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetPatchBaselineSourceArgs] {
	return pulumix.Val(i)
}

type GetPatchBaselineSourceOutput struct{ *pulumi.OutputState }

func (GetPatchBaselineSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchBaselineSource)(nil)).Elem()
}

func (o GetPatchBaselineSourceOutput) ToGetPatchBaselineSourceOutput() GetPatchBaselineSourceOutput {
	return o
}

func (o GetPatchBaselineSourceOutput) ToGetPatchBaselineSourceOutputWithContext(ctx context.Context) GetPatchBaselineSourceOutput {
	return o
}

func (o GetPatchBaselineSourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetPatchBaselineSource] {
	return pulumix.Output[GetPatchBaselineSource]{
		OutputState: o.OutputState,
	}
}

// The value of the yum repo configuration.
func (o GetPatchBaselineSourceOutput) Configuration() pulumix.Output[string] {
	return pulumix.Apply[GetPatchBaselineSource](o, func(v GetPatchBaselineSource) string { return v.Configuration })
}

// The name specified to identify the patch source.
func (o GetPatchBaselineSourceOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetPatchBaselineSource](o, func(v GetPatchBaselineSource) string { return v.Name })
}

// The specific operating system versions a patch repository applies to.
func (o GetPatchBaselineSourceOutput) Products() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetPatchBaselineSource](o, func(v GetPatchBaselineSource) []string { return v.Products })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AssociationOutputLocationOutput{})
	pulumi.RegisterOutputType(AssociationTargetOutput{})
	pulumi.RegisterOutputType(DocumentAttachmentsSourceOutput{})
	pulumi.RegisterOutputType(DocumentParameterOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTargetTargetOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTargetOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersAutomationParametersOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameterOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersLambdaParametersOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersCloudwatchConfigOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfigOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameterOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParametersOutput{})
	pulumi.RegisterOutputType(PatchBaselineApprovalRuleOutput{})
	pulumi.RegisterOutputType(PatchBaselineApprovalRulePatchFilterOutput{})
	pulumi.RegisterOutputType(PatchBaselineGlobalFilterOutput{})
	pulumi.RegisterOutputType(PatchBaselineSourceOutput{})
	pulumi.RegisterOutputType(ResourceDataSyncS3DestinationOutput{})
	pulumi.RegisterOutputType(GetInstancesFilterOutput{})
	pulumi.RegisterOutputType(GetMaintenanceWindowsFilterOutput{})
	pulumi.RegisterOutputType(GetPatchBaselineApprovalRuleOutput{})
	pulumi.RegisterOutputType(GetPatchBaselineApprovalRulePatchFilterOutput{})
	pulumi.RegisterOutputType(GetPatchBaselineGlobalFilterOutput{})
	pulumi.RegisterOutputType(GetPatchBaselineSourceOutput{})
}
