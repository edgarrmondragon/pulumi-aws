// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CachePolicy struct {
	pulumi.CustomResourceState

	// Description for the cache policy.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
	DefaultTtl pulumix.Output[*int] `pulumi:"defaultTtl"`
	// Current version of the cache policy.
	Etag pulumix.Output[string] `pulumi:"etag"`
	// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MaxTtl pulumix.Output[*int] `pulumi:"maxTtl"`
	// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
	MinTtl pulumix.Output[*int] `pulumi:"minTtl"`
	// Unique name used to identify the cache policy.
	Name pulumix.Output[string] `pulumi:"name"`
	// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
	ParametersInCacheKeyAndForwardedToOrigin pulumix.GPtrOutput[CachePolicyParametersInCacheKeyAndForwardedToOrigin, CachePolicyParametersInCacheKeyAndForwardedToOriginOutput] `pulumi:"parametersInCacheKeyAndForwardedToOrigin"`
}

// NewCachePolicy registers a new resource with the given unique name, arguments, and options.
func NewCachePolicy(ctx *pulumi.Context,
	name string, args *CachePolicyArgs, opts ...pulumi.ResourceOption) (*CachePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParametersInCacheKeyAndForwardedToOrigin == nil {
		return nil, errors.New("invalid value for required argument 'ParametersInCacheKeyAndForwardedToOrigin'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CachePolicy
	err := ctx.RegisterResource("aws:cloudfront/cachePolicy:CachePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCachePolicy gets an existing CachePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachePolicyState, opts ...pulumi.ResourceOption) (*CachePolicy, error) {
	var resource CachePolicy
	err := ctx.ReadResource("aws:cloudfront/cachePolicy:CachePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CachePolicy resources.
type cachePolicyState struct {
	// Description for the cache policy.
	Comment *string `pulumi:"comment"`
	// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Current version of the cache policy.
	Etag *string `pulumi:"etag"`
	// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MaxTtl *int `pulumi:"maxTtl"`
	// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
	MinTtl *int `pulumi:"minTtl"`
	// Unique name used to identify the cache policy.
	Name *string `pulumi:"name"`
	// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
	ParametersInCacheKeyAndForwardedToOrigin *CachePolicyParametersInCacheKeyAndForwardedToOrigin `pulumi:"parametersInCacheKeyAndForwardedToOrigin"`
}

type CachePolicyState struct {
	// Description for the cache policy.
	Comment pulumix.Input[*string]
	// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
	DefaultTtl pulumix.Input[*int]
	// Current version of the cache policy.
	Etag pulumix.Input[*string]
	// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MaxTtl pulumix.Input[*int]
	// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
	MinTtl pulumix.Input[*int]
	// Unique name used to identify the cache policy.
	Name pulumix.Input[*string]
	// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
	ParametersInCacheKeyAndForwardedToOrigin pulumix.Input[*CachePolicyParametersInCacheKeyAndForwardedToOriginArgs]
}

func (CachePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachePolicyState)(nil)).Elem()
}

type cachePolicyArgs struct {
	// Description for the cache policy.
	Comment *string `pulumi:"comment"`
	// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MaxTtl *int `pulumi:"maxTtl"`
	// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
	MinTtl *int `pulumi:"minTtl"`
	// Unique name used to identify the cache policy.
	Name *string `pulumi:"name"`
	// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
	ParametersInCacheKeyAndForwardedToOrigin CachePolicyParametersInCacheKeyAndForwardedToOrigin `pulumi:"parametersInCacheKeyAndForwardedToOrigin"`
}

// The set of arguments for constructing a CachePolicy resource.
type CachePolicyArgs struct {
	// Description for the cache policy.
	Comment pulumix.Input[*string]
	// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
	DefaultTtl pulumix.Input[*int]
	// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	MaxTtl pulumix.Input[*int]
	// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
	MinTtl pulumix.Input[*int]
	// Unique name used to identify the cache policy.
	Name pulumix.Input[*string]
	// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
	ParametersInCacheKeyAndForwardedToOrigin pulumix.Input[*CachePolicyParametersInCacheKeyAndForwardedToOriginArgs]
}

func (CachePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachePolicyArgs)(nil)).Elem()
}

type CachePolicyOutput struct{ *pulumi.OutputState }

func (CachePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CachePolicy)(nil)).Elem()
}

func (o CachePolicyOutput) ToCachePolicyOutput() CachePolicyOutput {
	return o
}

func (o CachePolicyOutput) ToCachePolicyOutputWithContext(ctx context.Context) CachePolicyOutput {
	return o
}

func (o CachePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CachePolicy] {
	return pulumix.Output[CachePolicy]{
		OutputState: o.OutputState,
	}
}

// Description for the cache policy.
func (o CachePolicyOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
func (o CachePolicyOutput) DefaultTtl() pulumix.Output[*int] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.Output[*int] { return v.DefaultTtl })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Current version of the cache policy.
func (o CachePolicyOutput) Etag() pulumix.Output[string] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.Output[string] { return v.Etag })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
func (o CachePolicyOutput) MaxTtl() pulumix.Output[*int] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.Output[*int] { return v.MaxTtl })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
func (o CachePolicyOutput) MinTtl() pulumix.Output[*int] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.Output[*int] { return v.MinTtl })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Unique name used to identify the cache policy.
func (o CachePolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
func (o CachePolicyOutput) ParametersInCacheKeyAndForwardedToOrigin() pulumix.GPtrOutput[CachePolicyParametersInCacheKeyAndForwardedToOrigin, CachePolicyParametersInCacheKeyAndForwardedToOriginOutput] {
	value := pulumix.Apply[CachePolicy](o, func(v CachePolicy) pulumix.GPtrOutput[CachePolicyParametersInCacheKeyAndForwardedToOrigin, CachePolicyParametersInCacheKeyAndForwardedToOriginOutput] {
		return v.ParametersInCacheKeyAndForwardedToOrigin
	})
	unwrapped := pulumix.Flatten[*CachePolicyParametersInCacheKeyAndForwardedToOrigin, pulumix.GPtrOutput[CachePolicyParametersInCacheKeyAndForwardedToOrigin, CachePolicyParametersInCacheKeyAndForwardedToOriginOutput]](value)
	return pulumix.GPtrOutput[CachePolicyParametersInCacheKeyAndForwardedToOrigin, CachePolicyParametersInCacheKeyAndForwardedToOriginOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CachePolicyOutput{})
}
