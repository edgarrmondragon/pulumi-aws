// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup vault policy resource.
type VaultPolicy struct {
	pulumi.CustomResourceState

	// The ARN of the vault.
	BackupVaultArn pulumix.Output[string] `pulumi:"backupVaultArn"`
	// Name of the backup vault to add policy for.
	BackupVaultName pulumix.Output[string] `pulumi:"backupVaultName"`
	// The backup vault access policy document in JSON format.
	Policy pulumix.Output[string] `pulumi:"policy"`
}

// NewVaultPolicy registers a new resource with the given unique name, arguments, and options.
func NewVaultPolicy(ctx *pulumi.Context,
	name string, args *VaultPolicyArgs, opts ...pulumi.ResourceOption) (*VaultPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupVaultName == nil {
		return nil, errors.New("invalid value for required argument 'BackupVaultName'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VaultPolicy
	err := ctx.RegisterResource("aws:backup/vaultPolicy:VaultPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVaultPolicy gets an existing VaultPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVaultPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultPolicyState, opts ...pulumi.ResourceOption) (*VaultPolicy, error) {
	var resource VaultPolicy
	err := ctx.ReadResource("aws:backup/vaultPolicy:VaultPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VaultPolicy resources.
type vaultPolicyState struct {
	// The ARN of the vault.
	BackupVaultArn *string `pulumi:"backupVaultArn"`
	// Name of the backup vault to add policy for.
	BackupVaultName *string `pulumi:"backupVaultName"`
	// The backup vault access policy document in JSON format.
	Policy *string `pulumi:"policy"`
}

type VaultPolicyState struct {
	// The ARN of the vault.
	BackupVaultArn pulumix.Input[*string]
	// Name of the backup vault to add policy for.
	BackupVaultName pulumix.Input[*string]
	// The backup vault access policy document in JSON format.
	Policy pulumix.Input[*string]
}

func (VaultPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultPolicyState)(nil)).Elem()
}

type vaultPolicyArgs struct {
	// Name of the backup vault to add policy for.
	BackupVaultName string `pulumi:"backupVaultName"`
	// The backup vault access policy document in JSON format.
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a VaultPolicy resource.
type VaultPolicyArgs struct {
	// Name of the backup vault to add policy for.
	BackupVaultName pulumix.Input[string]
	// The backup vault access policy document in JSON format.
	Policy pulumix.Input[string]
}

func (VaultPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultPolicyArgs)(nil)).Elem()
}

type VaultPolicyOutput struct{ *pulumi.OutputState }

func (VaultPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultPolicy)(nil)).Elem()
}

func (o VaultPolicyOutput) ToVaultPolicyOutput() VaultPolicyOutput {
	return o
}

func (o VaultPolicyOutput) ToVaultPolicyOutputWithContext(ctx context.Context) VaultPolicyOutput {
	return o
}

func (o VaultPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[VaultPolicy] {
	return pulumix.Output[VaultPolicy]{
		OutputState: o.OutputState,
	}
}

// The ARN of the vault.
func (o VaultPolicyOutput) BackupVaultArn() pulumix.Output[string] {
	value := pulumix.Apply[VaultPolicy](o, func(v VaultPolicy) pulumix.Output[string] { return v.BackupVaultArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the backup vault to add policy for.
func (o VaultPolicyOutput) BackupVaultName() pulumix.Output[string] {
	value := pulumix.Apply[VaultPolicy](o, func(v VaultPolicy) pulumix.Output[string] { return v.BackupVaultName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The backup vault access policy document in JSON format.
func (o VaultPolicyOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[VaultPolicy](o, func(v VaultPolicy) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VaultPolicyOutput{})
}
