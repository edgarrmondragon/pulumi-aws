// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS QuickSight Namespace.
type Namespace struct {
	pulumi.CustomResourceState

	// ARN of the Namespace.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// Namespace AWS Region.
	CapacityRegion pulumix.Output[string] `pulumi:"capacityRegion"`
	// Creation status of the namespace.
	CreationStatus pulumix.Output[string] `pulumi:"creationStatus"`
	// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
	IdentityStore pulumix.Output[string] `pulumi:"identityStore"`
	// Name of the namespace.
	//
	// The following arguments are optional:
	Namespace pulumix.Output[string] `pulumi:"namespace"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumix.MapOutput[string]                                      `pulumi:"tagsAll"`
	Timeouts pulumix.GPtrOutput[NamespaceTimeouts, NamespaceTimeoutsOutput] `pulumi:"timeouts"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("aws:quicksight/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("aws:quicksight/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// ARN of the Namespace.
	Arn *string `pulumi:"arn"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Namespace AWS Region.
	CapacityRegion *string `pulumi:"capacityRegion"`
	// Creation status of the namespace.
	CreationStatus *string `pulumi:"creationStatus"`
	// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
	IdentityStore *string `pulumi:"identityStore"`
	// Name of the namespace.
	//
	// The following arguments are optional:
	Namespace *string `pulumi:"namespace"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string  `pulumi:"tagsAll"`
	Timeouts *NamespaceTimeouts `pulumi:"timeouts"`
}

type NamespaceState struct {
	// ARN of the Namespace.
	Arn pulumix.Input[*string]
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// Namespace AWS Region.
	CapacityRegion pulumix.Input[*string]
	// Creation status of the namespace.
	CreationStatus pulumix.Input[*string]
	// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
	IdentityStore pulumix.Input[*string]
	// Name of the namespace.
	//
	// The following arguments are optional:
	Namespace pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumix.Input[map[string]string]
	Timeouts pulumix.Input[*NamespaceTimeoutsArgs]
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
	IdentityStore *string `pulumi:"identityStore"`
	// Name of the namespace.
	//
	// The following arguments are optional:
	Namespace string `pulumi:"namespace"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string  `pulumi:"tags"`
	Timeouts *NamespaceTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
	IdentityStore pulumix.Input[*string]
	// Name of the namespace.
	//
	// The following arguments are optional:
	Namespace pulumix.Input[string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumix.Input[map[string]string]
	Timeouts pulumix.Input[*NamespaceTimeoutsArgs]
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[Namespace] {
	return pulumix.Output[Namespace]{
		OutputState: o.OutputState,
	}
}

// ARN of the Namespace.
func (o NamespaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID.
func (o NamespaceOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Namespace AWS Region.
func (o NamespaceOutput) CapacityRegion() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.CapacityRegion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creation status of the namespace.
func (o NamespaceOutput) CreationStatus() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.CreationStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// User identity directory type. Defaults to `QUICKSIGHT`, the only current valid value.
func (o NamespaceOutput) IdentityStore() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.IdentityStore })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the namespace.
//
// The following arguments are optional:
func (o NamespaceOutput) Namespace() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.Namespace })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NamespaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NamespaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o NamespaceOutput) Timeouts() pulumix.GPtrOutput[NamespaceTimeouts, NamespaceTimeoutsOutput] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.GPtrOutput[NamespaceTimeouts, NamespaceTimeoutsOutput] { return v.Timeouts })
	unwrapped := pulumix.Flatten[*NamespaceTimeouts, pulumix.GPtrOutput[NamespaceTimeouts, NamespaceTimeoutsOutput]](value)
	return pulumix.GPtrOutput[NamespaceTimeouts, NamespaceTimeoutsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(NamespaceOutput{})
}
