// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route53 CIDR collection resource.
type CidrCollection struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the CIDR collection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Unique name for the CIDR collection.
	Name pulumix.Output[string] `pulumi:"name"`
	// The lastest version of the CIDR collection.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewCidrCollection registers a new resource with the given unique name, arguments, and options.
func NewCidrCollection(ctx *pulumi.Context,
	name string, args *CidrCollectionArgs, opts ...pulumi.ResourceOption) (*CidrCollection, error) {
	if args == nil {
		args = &CidrCollectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CidrCollection
	err := ctx.RegisterResource("aws:route53/cidrCollection:CidrCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCidrCollection gets an existing CidrCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCidrCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CidrCollectionState, opts ...pulumi.ResourceOption) (*CidrCollection, error) {
	var resource CidrCollection
	err := ctx.ReadResource("aws:route53/cidrCollection:CidrCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CidrCollection resources.
type cidrCollectionState struct {
	// The Amazon Resource Name (ARN) of the CIDR collection.
	Arn *string `pulumi:"arn"`
	// Unique name for the CIDR collection.
	Name *string `pulumi:"name"`
	// The lastest version of the CIDR collection.
	Version *int `pulumi:"version"`
}

type CidrCollectionState struct {
	// The Amazon Resource Name (ARN) of the CIDR collection.
	Arn pulumix.Input[*string]
	// Unique name for the CIDR collection.
	Name pulumix.Input[*string]
	// The lastest version of the CIDR collection.
	Version pulumix.Input[*int]
}

func (CidrCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrCollectionState)(nil)).Elem()
}

type cidrCollectionArgs struct {
	// Unique name for the CIDR collection.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CidrCollection resource.
type CidrCollectionArgs struct {
	// Unique name for the CIDR collection.
	Name pulumix.Input[*string]
}

func (CidrCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrCollectionArgs)(nil)).Elem()
}

type CidrCollectionOutput struct{ *pulumi.OutputState }

func (CidrCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrCollection)(nil)).Elem()
}

func (o CidrCollectionOutput) ToCidrCollectionOutput() CidrCollectionOutput {
	return o
}

func (o CidrCollectionOutput) ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput {
	return o
}

func (o CidrCollectionOutput) ToOutput(ctx context.Context) pulumix.Output[CidrCollection] {
	return pulumix.Output[CidrCollection]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the CIDR collection.
func (o CidrCollectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CidrCollection](o, func(v CidrCollection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique name for the CIDR collection.
func (o CidrCollectionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CidrCollection](o, func(v CidrCollection) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The lastest version of the CIDR collection.
func (o CidrCollectionOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[CidrCollection](o, func(v CidrCollection) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(CidrCollectionOutput{})
}
