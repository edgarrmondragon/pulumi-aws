// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AppAutoBranchCreationConfig struct {
	// Basic authorization credentials for the autocreated branch.
	BasicAuthCredentials *string `pulumi:"basicAuthCredentials"`
	// Build specification (build spec) for the autocreated branch.
	BuildSpec *string `pulumi:"buildSpec"`
	// Enables auto building for the autocreated branch.
	EnableAutoBuild *bool `pulumi:"enableAutoBuild"`
	// Enables basic authorization for the autocreated branch.
	EnableBasicAuth *bool `pulumi:"enableBasicAuth"`
	// Enables performance mode for the branch.
	EnablePerformanceMode *bool `pulumi:"enablePerformanceMode"`
	// Enables pull request previews for the autocreated branch.
	EnablePullRequestPreview *bool `pulumi:"enablePullRequestPreview"`
	// Environment variables for the autocreated branch.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Framework for the autocreated branch.
	Framework *string `pulumi:"framework"`
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName *string `pulumi:"pullRequestEnvironmentName"`
	// Describes the current stage for the autocreated branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage *string `pulumi:"stage"`
}

type AppAutoBranchCreationConfigArgs struct {
	// Basic authorization credentials for the autocreated branch.
	BasicAuthCredentials pulumix.Input[*string] `pulumi:"basicAuthCredentials"`
	// Build specification (build spec) for the autocreated branch.
	BuildSpec pulumix.Input[*string] `pulumi:"buildSpec"`
	// Enables auto building for the autocreated branch.
	EnableAutoBuild pulumix.Input[*bool] `pulumi:"enableAutoBuild"`
	// Enables basic authorization for the autocreated branch.
	EnableBasicAuth pulumix.Input[*bool] `pulumi:"enableBasicAuth"`
	// Enables performance mode for the branch.
	EnablePerformanceMode pulumix.Input[*bool] `pulumi:"enablePerformanceMode"`
	// Enables pull request previews for the autocreated branch.
	EnablePullRequestPreview pulumix.Input[*bool] `pulumi:"enablePullRequestPreview"`
	// Environment variables for the autocreated branch.
	EnvironmentVariables pulumix.Input[map[string]string] `pulumi:"environmentVariables"`
	// Framework for the autocreated branch.
	Framework pulumix.Input[*string] `pulumi:"framework"`
	// Amplify environment name for the pull request.
	PullRequestEnvironmentName pulumix.Input[*string] `pulumi:"pullRequestEnvironmentName"`
	// Describes the current stage for the autocreated branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
	Stage pulumix.Input[*string] `pulumi:"stage"`
}

func (AppAutoBranchCreationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAutoBranchCreationConfig)(nil)).Elem()
}

func (i AppAutoBranchCreationConfigArgs) ToAppAutoBranchCreationConfigOutput() AppAutoBranchCreationConfigOutput {
	return i.ToAppAutoBranchCreationConfigOutputWithContext(context.Background())
}

func (i AppAutoBranchCreationConfigArgs) ToAppAutoBranchCreationConfigOutputWithContext(ctx context.Context) AppAutoBranchCreationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppAutoBranchCreationConfigOutput)
}

func (i *AppAutoBranchCreationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*AppAutoBranchCreationConfigArgs] {
	return pulumix.Val(i)
}

type AppAutoBranchCreationConfigOutput struct{ *pulumi.OutputState }

func (AppAutoBranchCreationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAutoBranchCreationConfig)(nil)).Elem()
}

func (o AppAutoBranchCreationConfigOutput) ToAppAutoBranchCreationConfigOutput() AppAutoBranchCreationConfigOutput {
	return o
}

func (o AppAutoBranchCreationConfigOutput) ToAppAutoBranchCreationConfigOutputWithContext(ctx context.Context) AppAutoBranchCreationConfigOutput {
	return o
}

func (o AppAutoBranchCreationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AppAutoBranchCreationConfig] {
	return pulumix.Output[AppAutoBranchCreationConfig]{
		OutputState: o.OutputState,
	}
}

// Basic authorization credentials for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) BasicAuthCredentials() pulumix.Output[*string] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *string { return v.BasicAuthCredentials })
}

// Build specification (build spec) for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) BuildSpec() pulumix.Output[*string] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *string { return v.BuildSpec })
}

// Enables auto building for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) EnableAutoBuild() pulumix.Output[*bool] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *bool { return v.EnableAutoBuild })
}

// Enables basic authorization for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) EnableBasicAuth() pulumix.Output[*bool] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *bool { return v.EnableBasicAuth })
}

// Enables performance mode for the branch.
func (o AppAutoBranchCreationConfigOutput) EnablePerformanceMode() pulumix.Output[*bool] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *bool { return v.EnablePerformanceMode })
}

// Enables pull request previews for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) EnablePullRequestPreview() pulumix.Output[*bool] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *bool { return v.EnablePullRequestPreview })
}

// Environment variables for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) EnvironmentVariables() pulumix.MapOutput[string] {
	value := pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) map[string]string { return v.EnvironmentVariables })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Framework for the autocreated branch.
func (o AppAutoBranchCreationConfigOutput) Framework() pulumix.Output[*string] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *string { return v.Framework })
}

// Amplify environment name for the pull request.
func (o AppAutoBranchCreationConfigOutput) PullRequestEnvironmentName() pulumix.Output[*string] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *string { return v.PullRequestEnvironmentName })
}

// Describes the current stage for the autocreated branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
func (o AppAutoBranchCreationConfigOutput) Stage() pulumix.Output[*string] {
	return pulumix.Apply[AppAutoBranchCreationConfig](o, func(v AppAutoBranchCreationConfig) *string { return v.Stage })
}

type AppCustomRule struct {
	// Condition for a URL rewrite or redirect rule, such as a country code.
	Condition *string `pulumi:"condition"`
	// Source pattern for a URL rewrite or redirect rule.
	Source string `pulumi:"source"`
	// Status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.
	Status *string `pulumi:"status"`
	// Target pattern for a URL rewrite or redirect rule.
	Target string `pulumi:"target"`
}

type AppCustomRuleArgs struct {
	// Condition for a URL rewrite or redirect rule, such as a country code.
	Condition pulumix.Input[*string] `pulumi:"condition"`
	// Source pattern for a URL rewrite or redirect rule.
	Source pulumix.Input[string] `pulumi:"source"`
	// Status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Target pattern for a URL rewrite or redirect rule.
	Target pulumix.Input[string] `pulumi:"target"`
}

func (AppCustomRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppCustomRule)(nil)).Elem()
}

func (i AppCustomRuleArgs) ToAppCustomRuleOutput() AppCustomRuleOutput {
	return i.ToAppCustomRuleOutputWithContext(context.Background())
}

func (i AppCustomRuleArgs) ToAppCustomRuleOutputWithContext(ctx context.Context) AppCustomRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCustomRuleOutput)
}

func (i *AppCustomRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*AppCustomRuleArgs] {
	return pulumix.Val(i)
}

type AppCustomRuleOutput struct{ *pulumi.OutputState }

func (AppCustomRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppCustomRule)(nil)).Elem()
}

func (o AppCustomRuleOutput) ToAppCustomRuleOutput() AppCustomRuleOutput {
	return o
}

func (o AppCustomRuleOutput) ToAppCustomRuleOutputWithContext(ctx context.Context) AppCustomRuleOutput {
	return o
}

func (o AppCustomRuleOutput) ToOutput(ctx context.Context) pulumix.Output[AppCustomRule] {
	return pulumix.Output[AppCustomRule]{
		OutputState: o.OutputState,
	}
}

// Condition for a URL rewrite or redirect rule, such as a country code.
func (o AppCustomRuleOutput) Condition() pulumix.Output[*string] {
	return pulumix.Apply[AppCustomRule](o, func(v AppCustomRule) *string { return v.Condition })
}

// Source pattern for a URL rewrite or redirect rule.
func (o AppCustomRuleOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[AppCustomRule](o, func(v AppCustomRule) string { return v.Source })
}

// Status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.
func (o AppCustomRuleOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[AppCustomRule](o, func(v AppCustomRule) *string { return v.Status })
}

// Target pattern for a URL rewrite or redirect rule.
func (o AppCustomRuleOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[AppCustomRule](o, func(v AppCustomRule) string { return v.Target })
}

type AppProductionBranch struct {
	// Branch name for the production branch.
	BranchName *string `pulumi:"branchName"`
	// Last deploy time of the production branch.
	LastDeployTime *string `pulumi:"lastDeployTime"`
	// Status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.
	Status *string `pulumi:"status"`
	// Thumbnail URL for the production branch.
	ThumbnailUrl *string `pulumi:"thumbnailUrl"`
}

type AppProductionBranchArgs struct {
	// Branch name for the production branch.
	BranchName pulumix.Input[*string] `pulumi:"branchName"`
	// Last deploy time of the production branch.
	LastDeployTime pulumix.Input[*string] `pulumi:"lastDeployTime"`
	// Status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Thumbnail URL for the production branch.
	ThumbnailUrl pulumix.Input[*string] `pulumi:"thumbnailUrl"`
}

func (AppProductionBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProductionBranch)(nil)).Elem()
}

func (i AppProductionBranchArgs) ToAppProductionBranchOutput() AppProductionBranchOutput {
	return i.ToAppProductionBranchOutputWithContext(context.Background())
}

func (i AppProductionBranchArgs) ToAppProductionBranchOutputWithContext(ctx context.Context) AppProductionBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProductionBranchOutput)
}

func (i *AppProductionBranchArgs) ToOutput(ctx context.Context) pulumix.Output[*AppProductionBranchArgs] {
	return pulumix.Val(i)
}

type AppProductionBranchOutput struct{ *pulumi.OutputState }

func (AppProductionBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppProductionBranch)(nil)).Elem()
}

func (o AppProductionBranchOutput) ToAppProductionBranchOutput() AppProductionBranchOutput {
	return o
}

func (o AppProductionBranchOutput) ToAppProductionBranchOutputWithContext(ctx context.Context) AppProductionBranchOutput {
	return o
}

func (o AppProductionBranchOutput) ToOutput(ctx context.Context) pulumix.Output[AppProductionBranch] {
	return pulumix.Output[AppProductionBranch]{
		OutputState: o.OutputState,
	}
}

// Branch name for the production branch.
func (o AppProductionBranchOutput) BranchName() pulumix.Output[*string] {
	return pulumix.Apply[AppProductionBranch](o, func(v AppProductionBranch) *string { return v.BranchName })
}

// Last deploy time of the production branch.
func (o AppProductionBranchOutput) LastDeployTime() pulumix.Output[*string] {
	return pulumix.Apply[AppProductionBranch](o, func(v AppProductionBranch) *string { return v.LastDeployTime })
}

// Status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.
func (o AppProductionBranchOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[AppProductionBranch](o, func(v AppProductionBranch) *string { return v.Status })
}

// Thumbnail URL for the production branch.
func (o AppProductionBranchOutput) ThumbnailUrl() pulumix.Output[*string] {
	return pulumix.Apply[AppProductionBranch](o, func(v AppProductionBranch) *string { return v.ThumbnailUrl })
}

type DomainAssociationSubDomain struct {
	// Branch name setting for the subdomain.
	BranchName string `pulumi:"branchName"`
	// DNS record for the subdomain.
	DnsRecord *string `pulumi:"dnsRecord"`
	// Prefix setting for the subdomain.
	Prefix string `pulumi:"prefix"`
	// Verified status of the subdomain.
	Verified *bool `pulumi:"verified"`
}

type DomainAssociationSubDomainArgs struct {
	// Branch name setting for the subdomain.
	BranchName pulumix.Input[string] `pulumi:"branchName"`
	// DNS record for the subdomain.
	DnsRecord pulumix.Input[*string] `pulumi:"dnsRecord"`
	// Prefix setting for the subdomain.
	Prefix pulumix.Input[string] `pulumi:"prefix"`
	// Verified status of the subdomain.
	Verified pulumix.Input[*bool] `pulumi:"verified"`
}

func (DomainAssociationSubDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAssociationSubDomain)(nil)).Elem()
}

func (i DomainAssociationSubDomainArgs) ToDomainAssociationSubDomainOutput() DomainAssociationSubDomainOutput {
	return i.ToDomainAssociationSubDomainOutputWithContext(context.Background())
}

func (i DomainAssociationSubDomainArgs) ToDomainAssociationSubDomainOutputWithContext(ctx context.Context) DomainAssociationSubDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAssociationSubDomainOutput)
}

func (i *DomainAssociationSubDomainArgs) ToOutput(ctx context.Context) pulumix.Output[*DomainAssociationSubDomainArgs] {
	return pulumix.Val(i)
}

type DomainAssociationSubDomainOutput struct{ *pulumi.OutputState }

func (DomainAssociationSubDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAssociationSubDomain)(nil)).Elem()
}

func (o DomainAssociationSubDomainOutput) ToDomainAssociationSubDomainOutput() DomainAssociationSubDomainOutput {
	return o
}

func (o DomainAssociationSubDomainOutput) ToDomainAssociationSubDomainOutputWithContext(ctx context.Context) DomainAssociationSubDomainOutput {
	return o
}

func (o DomainAssociationSubDomainOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAssociationSubDomain] {
	return pulumix.Output[DomainAssociationSubDomain]{
		OutputState: o.OutputState,
	}
}

// Branch name setting for the subdomain.
func (o DomainAssociationSubDomainOutput) BranchName() pulumix.Output[string] {
	return pulumix.Apply[DomainAssociationSubDomain](o, func(v DomainAssociationSubDomain) string { return v.BranchName })
}

// DNS record for the subdomain.
func (o DomainAssociationSubDomainOutput) DnsRecord() pulumix.Output[*string] {
	return pulumix.Apply[DomainAssociationSubDomain](o, func(v DomainAssociationSubDomain) *string { return v.DnsRecord })
}

// Prefix setting for the subdomain.
func (o DomainAssociationSubDomainOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[DomainAssociationSubDomain](o, func(v DomainAssociationSubDomain) string { return v.Prefix })
}

// Verified status of the subdomain.
func (o DomainAssociationSubDomainOutput) Verified() pulumix.Output[*bool] {
	return pulumix.Apply[DomainAssociationSubDomain](o, func(v DomainAssociationSubDomain) *bool { return v.Verified })
}

func init() {
	pulumi.RegisterOutputType(AppAutoBranchCreationConfigOutput{})
	pulumi.RegisterOutputType(AppCustomRuleOutput{})
	pulumi.RegisterOutputType(AppProductionBranchOutput{})
	pulumi.RegisterOutputType(DomainAssociationSubDomainOutput{})
}
