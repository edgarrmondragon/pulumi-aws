// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a single EBS volume.
type Volume struct {
	pulumi.CustomResourceState

	// The volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The AZ where the EBS volume will exist.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// If true, the disk will be encrypted.
	Encrypted pulumix.Output[bool] `pulumi:"encrypted"`
	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	FinalSnapshot pulumix.Output[*bool] `pulumi:"finalSnapshot"`
	// The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
	Iops pulumix.Output[int] `pulumi:"iops"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
	MultiAttachEnabled pulumix.Output[*bool] `pulumi:"multiAttachEnabled"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumix.Output[*string] `pulumi:"outpostArn"`
	// The size of the drive in GiBs.
	Size pulumix.Output[int] `pulumi:"size"`
	// A snapshot to base the EBS volume off of.
	SnapshotId pulumix.Output[string] `pulumi:"snapshotId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
	//
	// > **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
	Throughput pulumix.Output[int] `pulumi:"throughput"`
	// The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("aws:ebs/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("aws:ebs/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// The volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn *string `pulumi:"arn"`
	// The AZ where the EBS volume will exist.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// If true, the disk will be encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	FinalSnapshot *bool `pulumi:"finalSnapshot"`
	// The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
	Iops *int `pulumi:"iops"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
	MultiAttachEnabled *bool `pulumi:"multiAttachEnabled"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn *string `pulumi:"outpostArn"`
	// The size of the drive in GiBs.
	Size *int `pulumi:"size"`
	// A snapshot to base the EBS volume off of.
	SnapshotId *string `pulumi:"snapshotId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
	//
	// > **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
	Throughput *int `pulumi:"throughput"`
	// The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
	Type *string `pulumi:"type"`
}

type VolumeState struct {
	// The volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn pulumix.Input[*string]
	// The AZ where the EBS volume will exist.
	AvailabilityZone pulumix.Input[*string]
	// If true, the disk will be encrypted.
	Encrypted pulumix.Input[*bool]
	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	FinalSnapshot pulumix.Input[*bool]
	// The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
	Iops pulumix.Input[*int]
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
	KmsKeyId pulumix.Input[*string]
	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
	MultiAttachEnabled pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumix.Input[*string]
	// The size of the drive in GiBs.
	Size pulumix.Input[*int]
	// A snapshot to base the EBS volume off of.
	SnapshotId pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
	//
	// > **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
	Throughput pulumix.Input[*int]
	// The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
	Type pulumix.Input[*string]
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The AZ where the EBS volume will exist.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// If true, the disk will be encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	FinalSnapshot *bool `pulumi:"finalSnapshot"`
	// The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
	Iops *int `pulumi:"iops"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
	MultiAttachEnabled *bool `pulumi:"multiAttachEnabled"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn *string `pulumi:"outpostArn"`
	// The size of the drive in GiBs.
	Size *int `pulumi:"size"`
	// A snapshot to base the EBS volume off of.
	SnapshotId *string `pulumi:"snapshotId"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
	//
	// > **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
	Throughput *int `pulumi:"throughput"`
	// The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The AZ where the EBS volume will exist.
	AvailabilityZone pulumix.Input[string]
	// If true, the disk will be encrypted.
	Encrypted pulumix.Input[*bool]
	// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
	FinalSnapshot pulumix.Input[*bool]
	// The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
	Iops pulumix.Input[*int]
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
	KmsKeyId pulumix.Input[*string]
	// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
	MultiAttachEnabled pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumix.Input[*string]
	// The size of the drive in GiBs.
	Size pulumix.Input[*int]
	// A snapshot to base the EBS volume off of.
	SnapshotId pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
	//
	// > **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
	Throughput pulumix.Input[*int]
	// The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
	Type pulumix.Input[*string]
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) ToOutput(ctx context.Context) pulumix.Output[Volume] {
	return pulumix.Output[Volume]{
		OutputState: o.OutputState,
	}
}

// The volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
func (o VolumeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AZ where the EBS volume will exist.
func (o VolumeOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If true, the disk will be encrypted.
func (o VolumeOutput) Encrypted() pulumix.Output[bool] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[bool] { return v.Encrypted })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// If true, snapshot will be created before volume deletion. Any tags on the volume will be migrated to the snapshot. By default set to false
func (o VolumeOutput) FinalSnapshot() pulumix.Output[*bool] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[*bool] { return v.FinalSnapshot })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The amount of IOPS to provision for the disk. Only valid for `type` of `io1`, `io2` or `gp3`.
func (o VolumeOutput) Iops() pulumix.Output[int] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[int] { return v.Iops })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true. Note: The provider must be running with credentials which have the `GenerateDataKeyWithoutPlaintext` permission on the specified KMS key as required by the [EBS KMS CMK volume provisioning process](https://docs.aws.amazon.com/kms/latest/developerguide/services-ebs.html#ebs-cmk) to prevent a volume from being created and almost immediately deleted.
func (o VolumeOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether to enable Amazon EBS Multi-Attach. Multi-Attach is supported on `io1` and `io2` volumes.
func (o VolumeOutput) MultiAttachEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[*bool] { return v.MultiAttachEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Resource Name (ARN) of the Outpost.
func (o VolumeOutput) OutpostArn() pulumix.Output[*string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[*string] { return v.OutpostArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The size of the drive in GiBs.
func (o VolumeOutput) Size() pulumix.Output[int] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[int] { return v.Size })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A snapshot to base the EBS volume off of.
func (o VolumeOutput) SnapshotId() pulumix.Output[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[string] { return v.SnapshotId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VolumeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VolumeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The throughput that the volume supports, in MiB/s. Only valid for `type` of `gp3`.
//
// > **NOTE:** When changing the `size`, `iops` or `type` of an instance, there are [considerations](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/considerations.html) to be aware of.
func (o VolumeOutput) Throughput() pulumix.Output[int] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[int] { return v.Throughput })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The type of EBS volume. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
func (o VolumeOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Volume](o, func(v Volume) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VolumeOutput{})
}
