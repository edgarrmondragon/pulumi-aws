// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type PartitionIndex struct {
	pulumi.CustomResourceState

	// The catalog ID where the table resides.
	CatalogId pulumix.Output[string] `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName pulumix.Output[string] `pulumi:"databaseName"`
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex pulumix.GPtrOutput[PartitionIndexPartitionIndex, PartitionIndexPartitionIndexOutput] `pulumi:"partitionIndex"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName pulumix.Output[string] `pulumi:"tableName"`
}

// NewPartitionIndex registers a new resource with the given unique name, arguments, and options.
func NewPartitionIndex(ctx *pulumi.Context,
	name string, args *PartitionIndexArgs, opts ...pulumi.ResourceOption) (*PartitionIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.PartitionIndex == nil {
		return nil, errors.New("invalid value for required argument 'PartitionIndex'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartitionIndex
	err := ctx.RegisterResource("aws:glue/partitionIndex:PartitionIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartitionIndex gets an existing PartitionIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartitionIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartitionIndexState, opts ...pulumi.ResourceOption) (*PartitionIndex, error) {
	var resource PartitionIndex
	err := ctx.ReadResource("aws:glue/partitionIndex:PartitionIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartitionIndex resources.
type partitionIndexState struct {
	// The catalog ID where the table resides.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName *string `pulumi:"databaseName"`
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex *PartitionIndexPartitionIndex `pulumi:"partitionIndex"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName *string `pulumi:"tableName"`
}

type PartitionIndexState struct {
	// The catalog ID where the table resides.
	CatalogId pulumix.Input[*string]
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName pulumix.Input[*string]
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex pulumix.Input[*PartitionIndexPartitionIndexArgs]
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName pulumix.Input[*string]
}

func (PartitionIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionIndexState)(nil)).Elem()
}

type partitionIndexArgs struct {
	// The catalog ID where the table resides.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName string `pulumi:"databaseName"`
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex PartitionIndexPartitionIndex `pulumi:"partitionIndex"`
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a PartitionIndex resource.
type PartitionIndexArgs struct {
	// The catalog ID where the table resides.
	CatalogId pulumix.Input[*string]
	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	DatabaseName pulumix.Input[string]
	// Configuration block for a partition index. See `partitionIndex` below.
	PartitionIndex pulumix.Input[*PartitionIndexPartitionIndexArgs]
	// Name of the table. For Hive compatibility, this must be entirely lowercase.
	TableName pulumix.Input[string]
}

func (PartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partitionIndexArgs)(nil)).Elem()
}

type PartitionIndexOutput struct{ *pulumi.OutputState }

func (PartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionIndex)(nil)).Elem()
}

func (o PartitionIndexOutput) ToPartitionIndexOutput() PartitionIndexOutput {
	return o
}

func (o PartitionIndexOutput) ToPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexOutput {
	return o
}

func (o PartitionIndexOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionIndex] {
	return pulumix.Output[PartitionIndex]{
		OutputState: o.OutputState,
	}
}

// The catalog ID where the table resides.
func (o PartitionIndexOutput) CatalogId() pulumix.Output[string] {
	value := pulumix.Apply[PartitionIndex](o, func(v PartitionIndex) pulumix.Output[string] { return v.CatalogId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
func (o PartitionIndexOutput) DatabaseName() pulumix.Output[string] {
	value := pulumix.Apply[PartitionIndex](o, func(v PartitionIndex) pulumix.Output[string] { return v.DatabaseName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for a partition index. See `partitionIndex` below.
func (o PartitionIndexOutput) PartitionIndex() pulumix.GPtrOutput[PartitionIndexPartitionIndex, PartitionIndexPartitionIndexOutput] {
	value := pulumix.Apply[PartitionIndex](o, func(v PartitionIndex) pulumix.GPtrOutput[PartitionIndexPartitionIndex, PartitionIndexPartitionIndexOutput] {
		return v.PartitionIndex
	})
	unwrapped := pulumix.Flatten[*PartitionIndexPartitionIndex, pulumix.GPtrOutput[PartitionIndexPartitionIndex, PartitionIndexPartitionIndexOutput]](value)
	return pulumix.GPtrOutput[PartitionIndexPartitionIndex, PartitionIndexPartitionIndexOutput]{OutputState: unwrapped.OutputState}
}

// Name of the table. For Hive compatibility, this must be entirely lowercase.
func (o PartitionIndexOutput) TableName() pulumix.Output[string] {
	value := pulumix.Apply[PartitionIndex](o, func(v PartitionIndex) pulumix.Output[string] { return v.TableName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PartitionIndexOutput{})
}
