// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The CloudFormation Stack data source allows access to stack
// outputs and other useful data including the template body.
func LookupStack(ctx *pulumi.Context, args *LookupStackArgs, opts ...pulumi.InvokeOption) (*LookupStackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStackResult
	err := ctx.Invoke("aws:cloudformation/getStack:getStack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStack.
type LookupStackArgs struct {
	// Name of the stack
	Name string `pulumi:"name"`
	// Map of tags associated with this stack.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getStack.
type LookupStackResult struct {
	// List of capabilities
	Capabilities []string `pulumi:"capabilities"`
	// Description of the stack
	Description string `pulumi:"description"`
	// Whether the rollback of the stack is disabled when stack creation fails
	DisableRollback bool `pulumi:"disableRollback"`
	// ARN of the IAM role used to create the stack.
	IamRoleArn string `pulumi:"iamRoleArn"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// List of SNS topic ARNs to publish stack related events
	NotificationArns []string `pulumi:"notificationArns"`
	// Map of outputs from the stack.
	Outputs map[string]string `pulumi:"outputs"`
	// Map of parameters that specify input parameters for the stack.
	Parameters map[string]string `pulumi:"parameters"`
	// Map of tags associated with this stack.
	Tags map[string]string `pulumi:"tags"`
	// Structure containing the template body.
	TemplateBody string `pulumi:"templateBody"`
	// Amount of time that can pass before the stack status becomes `CREATE_FAILED`
	TimeoutInMinutes int `pulumi:"timeoutInMinutes"`
}

func LookupStackOutput(ctx *pulumi.Context, args LookupStackOutputArgs, opts ...pulumi.InvokeOption) LookupStackResultOutput {
	outputResult := pulumix.ApplyErr[*LookupStackArgs](args.ToOutput(), func(plainArgs *LookupStackArgs) (*LookupStackResult, error) {
		return LookupStack(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupStackResultOutput, *LookupStackResult](outputResult)
}

// A collection of arguments for invoking getStack.
type LookupStackOutputArgs struct {
	// Name of the stack
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags associated with this stack.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupStackOutputArgs) ToOutput() pulumix.Output[*LookupStackArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupStackArgs {
		return &LookupStackArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupStackResultOutput struct{ *pulumi.OutputState }

func (LookupStackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStackResult)(nil)).Elem()
}

func (o LookupStackResultOutput) ToOutput(context.Context) pulumix.Output[*LookupStackResult] {
	return pulumix.Output[*LookupStackResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupStackResultOutput) Capabilities() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) []string { return v.Capabilities })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStackResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) string { return v.Description })
}

func (o LookupStackResultOutput) DisableRollback() pulumix.Output[bool] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) bool { return v.DisableRollback })
}

func (o LookupStackResultOutput) IamRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) string { return v.IamRoleArn })
}

func (o LookupStackResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) string { return v.Id })
}

func (o LookupStackResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) string { return v.Name })
}

func (o LookupStackResultOutput) NotificationArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) []string { return v.NotificationArns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStackResultOutput) Outputs() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) map[string]string { return v.Outputs })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStackResultOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStackResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupStackResultOutput) TemplateBody() pulumix.Output[string] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) string { return v.TemplateBody })
}

func (o LookupStackResultOutput) TimeoutInMinutes() pulumix.Output[int] {
	return pulumix.Apply[*LookupStackResult](o, func(v *LookupStackResult) int { return v.TimeoutInMinutes })
}
