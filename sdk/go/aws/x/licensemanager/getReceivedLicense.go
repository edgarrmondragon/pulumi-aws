// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can be used to get data on a received license using an ARN. This can be helpful for pulling in data on a license from the AWS marketplace and sharing that license with another account.
func GetReceivedLicense(ctx *pulumi.Context, args *GetReceivedLicenseArgs, opts ...pulumi.InvokeOption) (*GetReceivedLicenseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetReceivedLicenseResult
	err := ctx.Invoke("aws:licensemanager/getReceivedLicense:getReceivedLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReceivedLicense.
type GetReceivedLicenseArgs struct {
	// The ARN of the received license you want data for.
	LicenseArn string `pulumi:"licenseArn"`
}

// A collection of values returned by getReceivedLicense.
type GetReceivedLicenseResult struct {
	// Granted license beneficiary. This is in the form of the ARN of the root user of the account.
	Beneficiary string `pulumi:"beneficiary"`
	// Configuration for consumption of the license. Detailed below
	ConsumptionConfigurations []GetReceivedLicenseConsumptionConfiguration `pulumi:"consumptionConfigurations"`
	// Creation time of the granted license in RFC 3339 format.
	CreateTime string `pulumi:"createTime"`
	// License entitlements. Detailed below
	Entitlements []GetReceivedLicenseEntitlement `pulumi:"entitlements"`
	// Home Region of the granted license.
	HomeRegion string `pulumi:"homeRegion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Granted license issuer. Detailed below
	Issuers []GetReceivedLicenseIssuer `pulumi:"issuers"`
	// Amazon Resource Name (ARN) of the license.
	LicenseArn string `pulumi:"licenseArn"`
	// Granted license metadata. This is in the form of a set of all meta data. Detailed below
	LicenseMetadatas []GetReceivedLicenseLicenseMetadata `pulumi:"licenseMetadatas"`
	// License name.
	LicenseName string `pulumi:"licenseName"`
	// Product name.
	// * ` productSku  ` - Product SKU.
	ProductName string `pulumi:"productName"`
	ProductSku  string `pulumi:"productSku"`
	// Granted license received metadata. Detailed below
	ReceivedMetadatas []GetReceivedLicenseReceivedMetadata `pulumi:"receivedMetadatas"`
	// Granted license status.
	Status string `pulumi:"status"`
	// Date and time range during which the granted license is valid, in ISO8601-UTC format. Detailed below
	Validities []GetReceivedLicenseValidity `pulumi:"validities"`
	// Version of the granted license.
	Version string `pulumi:"version"`
}

func GetReceivedLicenseOutput(ctx *pulumi.Context, args GetReceivedLicenseOutputArgs, opts ...pulumi.InvokeOption) GetReceivedLicenseResultOutput {
	outputResult := pulumix.ApplyErr[*GetReceivedLicenseArgs](args.ToOutput(), func(plainArgs *GetReceivedLicenseArgs) (*GetReceivedLicenseResult, error) {
		return GetReceivedLicense(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetReceivedLicenseResultOutput, *GetReceivedLicenseResult](outputResult)
}

// A collection of arguments for invoking getReceivedLicense.
type GetReceivedLicenseOutputArgs struct {
	// The ARN of the received license you want data for.
	LicenseArn pulumix.Input[string] `pulumi:"licenseArn"`
}

func (args GetReceivedLicenseOutputArgs) ToOutput() pulumix.Output[*GetReceivedLicenseArgs] {
	allArgs := pulumix.All(
		args.LicenseArn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetReceivedLicenseArgs {
		return &GetReceivedLicenseArgs{
			LicenseArn: resolvedArgs[0].(string),
		}
	})
}

type GetReceivedLicenseResultOutput struct{ *pulumi.OutputState }

func (GetReceivedLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceivedLicenseResult)(nil)).Elem()
}

func (o GetReceivedLicenseResultOutput) ToOutput(context.Context) pulumix.Output[*GetReceivedLicenseResult] {
	return pulumix.Output[*GetReceivedLicenseResult]{
		OutputState: o.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) Beneficiary() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.Beneficiary })
}

func (o GetReceivedLicenseResultOutput) ConsumptionConfigurations() pulumix.GArrayOutput[GetReceivedLicenseConsumptionConfiguration, GetReceivedLicenseConsumptionConfigurationOutput] {
	value := pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) []GetReceivedLicenseConsumptionConfiguration {
		return v.ConsumptionConfigurations
	})
	return pulumix.GArrayOutput[GetReceivedLicenseConsumptionConfiguration, GetReceivedLicenseConsumptionConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.CreateTime })
}

func (o GetReceivedLicenseResultOutput) Entitlements() pulumix.GArrayOutput[GetReceivedLicenseEntitlement, GetReceivedLicenseEntitlementOutput] {
	value := pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) []GetReceivedLicenseEntitlement { return v.Entitlements })
	return pulumix.GArrayOutput[GetReceivedLicenseEntitlement, GetReceivedLicenseEntitlementOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) HomeRegion() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.HomeRegion })
}

func (o GetReceivedLicenseResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.Id })
}

func (o GetReceivedLicenseResultOutput) Issuers() pulumix.GArrayOutput[GetReceivedLicenseIssuer, GetReceivedLicenseIssuerOutput] {
	value := pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) []GetReceivedLicenseIssuer { return v.Issuers })
	return pulumix.GArrayOutput[GetReceivedLicenseIssuer, GetReceivedLicenseIssuerOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) LicenseArn() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.LicenseArn })
}

func (o GetReceivedLicenseResultOutput) LicenseMetadatas() pulumix.GArrayOutput[GetReceivedLicenseLicenseMetadata, GetReceivedLicenseLicenseMetadataOutput] {
	value := pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) []GetReceivedLicenseLicenseMetadata { return v.LicenseMetadatas })
	return pulumix.GArrayOutput[GetReceivedLicenseLicenseMetadata, GetReceivedLicenseLicenseMetadataOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) LicenseName() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.LicenseName })
}

func (o GetReceivedLicenseResultOutput) ProductName() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.ProductName })
}

func (o GetReceivedLicenseResultOutput) ProductSku() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.ProductSku })
}

func (o GetReceivedLicenseResultOutput) ReceivedMetadatas() pulumix.GArrayOutput[GetReceivedLicenseReceivedMetadata, GetReceivedLicenseReceivedMetadataOutput] {
	value := pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) []GetReceivedLicenseReceivedMetadata { return v.ReceivedMetadatas })
	return pulumix.GArrayOutput[GetReceivedLicenseReceivedMetadata, GetReceivedLicenseReceivedMetadataOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.Status })
}

func (o GetReceivedLicenseResultOutput) Validities() pulumix.GArrayOutput[GetReceivedLicenseValidity, GetReceivedLicenseValidityOutput] {
	value := pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) []GetReceivedLicenseValidity { return v.Validities })
	return pulumix.GArrayOutput[GetReceivedLicenseValidity, GetReceivedLicenseValidityOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetReceivedLicenseResultOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[*GetReceivedLicenseResult](o, func(v *GetReceivedLicenseResult) string { return v.Version })
}
