// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Athena Workgroup.
type Workgroup struct {
	pulumi.CustomResourceState

	// ARN of the workgroup
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration pulumix.GPtrOutput[WorkgroupConfiguration, WorkgroupConfigurationOutput] `pulumi:"configuration"`
	// Description of the workgroup.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	ForceDestroy pulumix.Output[*bool] `pulumi:"forceDestroy"`
	// Name of the workgroup.
	Name pulumix.Output[string] `pulumi:"name"`
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State pulumix.Output[*string] `pulumi:"state"`
	// Key-value map of resource tags for the workgroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewWorkgroup registers a new resource with the given unique name, arguments, and options.
func NewWorkgroup(ctx *pulumi.Context,
	name string, args *WorkgroupArgs, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	if args == nil {
		args = &WorkgroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workgroup
	err := ctx.RegisterResource("aws:athena/workgroup:Workgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkgroup gets an existing Workgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkgroupState, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	var resource Workgroup
	err := ctx.ReadResource("aws:athena/workgroup:Workgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workgroup resources.
type workgroupState struct {
	// ARN of the workgroup
	Arn *string `pulumi:"arn"`
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration *WorkgroupConfiguration `pulumi:"configuration"`
	// Description of the workgroup.
	Description *string `pulumi:"description"`
	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Name of the workgroup.
	Name *string `pulumi:"name"`
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State *string `pulumi:"state"`
	// Key-value map of resource tags for the workgroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type WorkgroupState struct {
	// ARN of the workgroup
	Arn pulumix.Input[*string]
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration pulumix.Input[*WorkgroupConfigurationArgs]
	// Description of the workgroup.
	Description pulumix.Input[*string]
	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	ForceDestroy pulumix.Input[*bool]
	// Name of the workgroup.
	Name pulumix.Input[*string]
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State pulumix.Input[*string]
	// Key-value map of resource tags for the workgroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (WorkgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupState)(nil)).Elem()
}

type workgroupArgs struct {
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration *WorkgroupConfiguration `pulumi:"configuration"`
	// Description of the workgroup.
	Description *string `pulumi:"description"`
	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Name of the workgroup.
	Name *string `pulumi:"name"`
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State *string `pulumi:"state"`
	// Key-value map of resource tags for the workgroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Workgroup resource.
type WorkgroupArgs struct {
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration pulumix.Input[*WorkgroupConfigurationArgs]
	// Description of the workgroup.
	Description pulumix.Input[*string]
	// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
	ForceDestroy pulumix.Input[*bool]
	// Name of the workgroup.
	Name pulumix.Input[*string]
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State pulumix.Input[*string]
	// Key-value map of resource tags for the workgroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (WorkgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupArgs)(nil)).Elem()
}

type WorkgroupOutput struct{ *pulumi.OutputState }

func (WorkgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Workgroup)(nil)).Elem()
}

func (o WorkgroupOutput) ToWorkgroupOutput() WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToOutput(ctx context.Context) pulumix.Output[Workgroup] {
	return pulumix.Output[Workgroup]{
		OutputState: o.OutputState,
	}
}

// ARN of the workgroup
func (o WorkgroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block with various settings for the workgroup. Documented below.
func (o WorkgroupOutput) Configuration() pulumix.GPtrOutput[WorkgroupConfiguration, WorkgroupConfigurationOutput] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.GPtrOutput[WorkgroupConfiguration, WorkgroupConfigurationOutput] {
		return v.Configuration
	})
	unwrapped := pulumix.Flatten[*WorkgroupConfiguration, pulumix.GPtrOutput[WorkgroupConfiguration, WorkgroupConfigurationOutput]](value)
	return pulumix.GPtrOutput[WorkgroupConfiguration, WorkgroupConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Description of the workgroup.
func (o WorkgroupOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Option to delete the workgroup and its contents even if the workgroup contains any named queries.
func (o WorkgroupOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the workgroup.
func (o WorkgroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
func (o WorkgroupOutput) State() pulumix.Output[*string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.Output[*string] { return v.State })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags for the workgroup. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o WorkgroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o WorkgroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Workgroup](o, func(v Workgroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(WorkgroupOutput{})
}
