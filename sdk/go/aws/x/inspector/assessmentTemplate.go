// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Inspector Classic Assessment Template
type AssessmentTemplate struct {
	pulumi.CustomResourceState

	// The template assessment ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The duration of the inspector run.
	Duration pulumix.Output[int] `pulumi:"duration"`
	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	EventSubscriptions pulumix.GArrayOutput[AssessmentTemplateEventSubscription, AssessmentTemplateEventSubscriptionOutput] `pulumi:"eventSubscriptions"`
	// The name of the assessment template.
	Name pulumix.Output[string] `pulumi:"name"`
	// The rules to be used during the run.
	RulesPackageArns pulumix.ArrayOutput[string] `pulumi:"rulesPackageArns"`
	// Key-value map of tags for the Inspector assessment template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The assessment target ARN to attach the template to.
	TargetArn pulumix.Output[string] `pulumi:"targetArn"`
}

// NewAssessmentTemplate registers a new resource with the given unique name, arguments, and options.
func NewAssessmentTemplate(ctx *pulumi.Context,
	name string, args *AssessmentTemplateArgs, opts ...pulumi.ResourceOption) (*AssessmentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.RulesPackageArns == nil {
		return nil, errors.New("invalid value for required argument 'RulesPackageArns'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssessmentTemplate
	err := ctx.RegisterResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentTemplate gets an existing AssessmentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentTemplateState, opts ...pulumi.ResourceOption) (*AssessmentTemplate, error) {
	var resource AssessmentTemplate
	err := ctx.ReadResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentTemplate resources.
type assessmentTemplateState struct {
	// The template assessment ARN.
	Arn *string `pulumi:"arn"`
	// The duration of the inspector run.
	Duration *int `pulumi:"duration"`
	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	EventSubscriptions []AssessmentTemplateEventSubscription `pulumi:"eventSubscriptions"`
	// The name of the assessment template.
	Name *string `pulumi:"name"`
	// The rules to be used during the run.
	RulesPackageArns []string `pulumi:"rulesPackageArns"`
	// Key-value map of tags for the Inspector assessment template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The assessment target ARN to attach the template to.
	TargetArn *string `pulumi:"targetArn"`
}

type AssessmentTemplateState struct {
	// The template assessment ARN.
	Arn pulumix.Input[*string]
	// The duration of the inspector run.
	Duration pulumix.Input[*int]
	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	EventSubscriptions pulumix.Input[[]*AssessmentTemplateEventSubscriptionArgs]
	// The name of the assessment template.
	Name pulumix.Input[*string]
	// The rules to be used during the run.
	RulesPackageArns pulumix.Input[[]string]
	// Key-value map of tags for the Inspector assessment template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The assessment target ARN to attach the template to.
	TargetArn pulumix.Input[*string]
}

func (AssessmentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentTemplateState)(nil)).Elem()
}

type assessmentTemplateArgs struct {
	// The duration of the inspector run.
	Duration int `pulumi:"duration"`
	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	EventSubscriptions []AssessmentTemplateEventSubscription `pulumi:"eventSubscriptions"`
	// The name of the assessment template.
	Name *string `pulumi:"name"`
	// The rules to be used during the run.
	RulesPackageArns []string `pulumi:"rulesPackageArns"`
	// Key-value map of tags for the Inspector assessment template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The assessment target ARN to attach the template to.
	TargetArn string `pulumi:"targetArn"`
}

// The set of arguments for constructing a AssessmentTemplate resource.
type AssessmentTemplateArgs struct {
	// The duration of the inspector run.
	Duration pulumix.Input[int]
	// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
	EventSubscriptions pulumix.Input[[]*AssessmentTemplateEventSubscriptionArgs]
	// The name of the assessment template.
	Name pulumix.Input[*string]
	// The rules to be used during the run.
	RulesPackageArns pulumix.Input[[]string]
	// Key-value map of tags for the Inspector assessment template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The assessment target ARN to attach the template to.
	TargetArn pulumix.Input[string]
}

func (AssessmentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentTemplateArgs)(nil)).Elem()
}

type AssessmentTemplateOutput struct{ *pulumi.OutputState }

func (AssessmentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentTemplate)(nil)).Elem()
}

func (o AssessmentTemplateOutput) ToAssessmentTemplateOutput() AssessmentTemplateOutput {
	return o
}

func (o AssessmentTemplateOutput) ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput {
	return o
}

func (o AssessmentTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentTemplate] {
	return pulumix.Output[AssessmentTemplate]{
		OutputState: o.OutputState,
	}
}

// The template assessment ARN.
func (o AssessmentTemplateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The duration of the inspector run.
func (o AssessmentTemplateOutput) Duration() pulumix.Output[int] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.Output[int] { return v.Duration })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
func (o AssessmentTemplateOutput) EventSubscriptions() pulumix.GArrayOutput[AssessmentTemplateEventSubscription, AssessmentTemplateEventSubscriptionOutput] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.GArrayOutput[AssessmentTemplateEventSubscription, AssessmentTemplateEventSubscriptionOutput] {
		return v.EventSubscriptions
	})
	unwrapped := pulumix.Flatten[[]AssessmentTemplateEventSubscription, pulumix.GArrayOutput[AssessmentTemplateEventSubscription, AssessmentTemplateEventSubscriptionOutput]](value)
	return pulumix.GArrayOutput[AssessmentTemplateEventSubscription, AssessmentTemplateEventSubscriptionOutput]{OutputState: unwrapped.OutputState}
}

// The name of the assessment template.
func (o AssessmentTemplateOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The rules to be used during the run.
func (o AssessmentTemplateOutput) RulesPackageArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.ArrayOutput[string] { return v.RulesPackageArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key-value map of tags for the Inspector assessment template. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o AssessmentTemplateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o AssessmentTemplateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The assessment target ARN to attach the template to.
func (o AssessmentTemplateOutput) TargetArn() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentTemplate](o, func(v AssessmentTemplate) pulumix.Output[string] { return v.TargetArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AssessmentTemplateOutput{})
}
