// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The App Mesh Route data source allows details of an App Mesh Route to be retrieved by its name, mesh_name, virtual_router_name, and optionally the mesh_owner.
func LookupRoute(ctx *pulumi.Context, args *LookupRouteArgs, opts ...pulumi.InvokeOption) (*LookupRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteResult
	err := ctx.Invoke("aws:appmesh/getRoute:getRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoute.
type LookupRouteArgs struct {
	// Name of the service mesh in which the virtual router exists.
	MeshName string `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner.
	MeshOwner *string `pulumi:"meshOwner"`
	// Name of the route.
	Name string `pulumi:"name"`
	// Map of tags.
	Tags map[string]string `pulumi:"tags"`
	// Name of the virtual router in which the route exists.
	VirtualRouterName string `pulumi:"virtualRouterName"`
}

// A collection of values returned by getRoute.
type LookupRouteResult struct {
	// ARN of the route.
	Arn string `pulumi:"arn"`
	// Creation date of the route.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Last update date of the route.
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	MeshName        string `pulumi:"meshName"`
	MeshOwner       string `pulumi:"meshOwner"`
	Name            string `pulumi:"name"`
	// Resource owner's AWS account ID.
	ResourceOwner string `pulumi:"resourceOwner"`
	// Route specification. See the `appmesh.Route` resource for details.
	Specs []GetRouteSpec `pulumi:"specs"`
	// Map of tags.
	Tags              map[string]string `pulumi:"tags"`
	VirtualRouterName string            `pulumi:"virtualRouterName"`
}

func LookupRouteOutput(ctx *pulumi.Context, args LookupRouteOutputArgs, opts ...pulumi.InvokeOption) LookupRouteResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRouteArgs](args.ToOutput(), func(plainArgs *LookupRouteArgs) (*LookupRouteResult, error) {
		return LookupRoute(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRouteResultOutput, *LookupRouteResult](outputResult)
}

// A collection of arguments for invoking getRoute.
type LookupRouteOutputArgs struct {
	// Name of the service mesh in which the virtual router exists.
	MeshName pulumix.Input[string] `pulumi:"meshName"`
	// AWS account ID of the service mesh's owner.
	MeshOwner pulumix.Input[*string] `pulumi:"meshOwner"`
	// Name of the route.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Name of the virtual router in which the route exists.
	VirtualRouterName pulumix.Input[string] `pulumi:"virtualRouterName"`
}

func (args LookupRouteOutputArgs) ToOutput() pulumix.Output[*LookupRouteArgs] {
	allArgs := pulumix.All(
		args.MeshName.ToOutput(context.Background()).AsAny(),
		args.MeshOwner.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VirtualRouterName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRouteArgs {
		return &LookupRouteArgs{
			MeshName:          resolvedArgs[0].(string),
			MeshOwner:         resolvedArgs[1].(*string),
			Name:              resolvedArgs[2].(string),
			Tags:              resolvedArgs[3].(map[string]string),
			VirtualRouterName: resolvedArgs[4].(string),
		}
	})
}

type LookupRouteResultOutput struct{ *pulumi.OutputState }

func (LookupRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteResult)(nil)).Elem()
}

func (o LookupRouteResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRouteResult] {
	return pulumix.Output[*LookupRouteResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRouteResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.Arn })
}

func (o LookupRouteResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.CreatedDate })
}

func (o LookupRouteResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.Id })
}

func (o LookupRouteResultOutput) LastUpdatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.LastUpdatedDate })
}

func (o LookupRouteResultOutput) MeshName() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.MeshName })
}

func (o LookupRouteResultOutput) MeshOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.MeshOwner })
}

func (o LookupRouteResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.Name })
}

func (o LookupRouteResultOutput) ResourceOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.ResourceOwner })
}

func (o LookupRouteResultOutput) Specs() pulumix.GArrayOutput[GetRouteSpec, GetRouteSpecOutput] {
	value := pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) []GetRouteSpec { return v.Specs })
	return pulumix.GArrayOutput[GetRouteSpec, GetRouteSpecOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteResultOutput) VirtualRouterName() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteResult](o, func(v *LookupRouteResult) string { return v.VirtualRouterName })
}
