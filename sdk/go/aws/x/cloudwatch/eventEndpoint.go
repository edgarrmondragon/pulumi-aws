// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create an EventBridge Global Endpoint.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
type EventEndpoint struct {
	pulumi.CustomResourceState

	// The ARN of the endpoint that was created.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description of the global endpoint.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The URL of the endpoint that was created.
	EndpointUrl pulumix.Output[string] `pulumi:"endpointUrl"`
	// The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
	EventBuses pulumix.GArrayOutput[EventEndpointEventBus, EventEndpointEventBusOutput] `pulumi:"eventBuses"`
	// The name of the global endpoint.
	Name pulumix.Output[string] `pulumi:"name"`
	// Parameters used for replication. Documented below.
	ReplicationConfig pulumix.GPtrOutput[EventEndpointReplicationConfig, EventEndpointReplicationConfigOutput] `pulumi:"replicationConfig"`
	// The ARN of the IAM role used for replication between event buses.
	RoleArn pulumix.Output[*string] `pulumi:"roleArn"`
	// Parameters used for routing, including the health check and secondary Region. Documented below.
	RoutingConfig pulumix.GPtrOutput[EventEndpointRoutingConfig, EventEndpointRoutingConfigOutput] `pulumi:"routingConfig"`
}

// NewEventEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEventEndpoint(ctx *pulumi.Context,
	name string, args *EventEndpointArgs, opts ...pulumi.ResourceOption) (*EventEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventBuses == nil {
		return nil, errors.New("invalid value for required argument 'EventBuses'")
	}
	if args.RoutingConfig == nil {
		return nil, errors.New("invalid value for required argument 'RoutingConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventEndpoint
	err := ctx.RegisterResource("aws:cloudwatch/eventEndpoint:EventEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventEndpoint gets an existing EventEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventEndpointState, opts ...pulumi.ResourceOption) (*EventEndpoint, error) {
	var resource EventEndpoint
	err := ctx.ReadResource("aws:cloudwatch/eventEndpoint:EventEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventEndpoint resources.
type eventEndpointState struct {
	// The ARN of the endpoint that was created.
	Arn *string `pulumi:"arn"`
	// A description of the global endpoint.
	Description *string `pulumi:"description"`
	// The URL of the endpoint that was created.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
	EventBuses []EventEndpointEventBus `pulumi:"eventBuses"`
	// The name of the global endpoint.
	Name *string `pulumi:"name"`
	// Parameters used for replication. Documented below.
	ReplicationConfig *EventEndpointReplicationConfig `pulumi:"replicationConfig"`
	// The ARN of the IAM role used for replication between event buses.
	RoleArn *string `pulumi:"roleArn"`
	// Parameters used for routing, including the health check and secondary Region. Documented below.
	RoutingConfig *EventEndpointRoutingConfig `pulumi:"routingConfig"`
}

type EventEndpointState struct {
	// The ARN of the endpoint that was created.
	Arn pulumix.Input[*string]
	// A description of the global endpoint.
	Description pulumix.Input[*string]
	// The URL of the endpoint that was created.
	EndpointUrl pulumix.Input[*string]
	// The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
	EventBuses pulumix.Input[[]*EventEndpointEventBusArgs]
	// The name of the global endpoint.
	Name pulumix.Input[*string]
	// Parameters used for replication. Documented below.
	ReplicationConfig pulumix.Input[*EventEndpointReplicationConfigArgs]
	// The ARN of the IAM role used for replication between event buses.
	RoleArn pulumix.Input[*string]
	// Parameters used for routing, including the health check and secondary Region. Documented below.
	RoutingConfig pulumix.Input[*EventEndpointRoutingConfigArgs]
}

func (EventEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventEndpointState)(nil)).Elem()
}

type eventEndpointArgs struct {
	// A description of the global endpoint.
	Description *string `pulumi:"description"`
	// The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
	EventBuses []EventEndpointEventBus `pulumi:"eventBuses"`
	// The name of the global endpoint.
	Name *string `pulumi:"name"`
	// Parameters used for replication. Documented below.
	ReplicationConfig *EventEndpointReplicationConfig `pulumi:"replicationConfig"`
	// The ARN of the IAM role used for replication between event buses.
	RoleArn *string `pulumi:"roleArn"`
	// Parameters used for routing, including the health check and secondary Region. Documented below.
	RoutingConfig EventEndpointRoutingConfig `pulumi:"routingConfig"`
}

// The set of arguments for constructing a EventEndpoint resource.
type EventEndpointArgs struct {
	// A description of the global endpoint.
	Description pulumix.Input[*string]
	// The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
	EventBuses pulumix.Input[[]*EventEndpointEventBusArgs]
	// The name of the global endpoint.
	Name pulumix.Input[*string]
	// Parameters used for replication. Documented below.
	ReplicationConfig pulumix.Input[*EventEndpointReplicationConfigArgs]
	// The ARN of the IAM role used for replication between event buses.
	RoleArn pulumix.Input[*string]
	// Parameters used for routing, including the health check and secondary Region. Documented below.
	RoutingConfig pulumix.Input[*EventEndpointRoutingConfigArgs]
}

func (EventEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventEndpointArgs)(nil)).Elem()
}

type EventEndpointOutput struct{ *pulumi.OutputState }

func (EventEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventEndpoint)(nil)).Elem()
}

func (o EventEndpointOutput) ToEventEndpointOutput() EventEndpointOutput {
	return o
}

func (o EventEndpointOutput) ToEventEndpointOutputWithContext(ctx context.Context) EventEndpointOutput {
	return o
}

func (o EventEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EventEndpoint] {
	return pulumix.Output[EventEndpoint]{
		OutputState: o.OutputState,
	}
}

// The ARN of the endpoint that was created.
func (o EventEndpointOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the global endpoint.
func (o EventEndpointOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The URL of the endpoint that was created.
func (o EventEndpointOutput) EndpointUrl() pulumix.Output[string] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.Output[string] { return v.EndpointUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The event buses to use. The names of the event buses must be identical in each Region. Exactly two event buses are required. Documented below.
func (o EventEndpointOutput) EventBuses() pulumix.GArrayOutput[EventEndpointEventBus, EventEndpointEventBusOutput] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.GArrayOutput[EventEndpointEventBus, EventEndpointEventBusOutput] {
		return v.EventBuses
	})
	unwrapped := pulumix.Flatten[[]EventEndpointEventBus, pulumix.GArrayOutput[EventEndpointEventBus, EventEndpointEventBusOutput]](value)
	return pulumix.GArrayOutput[EventEndpointEventBus, EventEndpointEventBusOutput]{OutputState: unwrapped.OutputState}
}

// The name of the global endpoint.
func (o EventEndpointOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Parameters used for replication. Documented below.
func (o EventEndpointOutput) ReplicationConfig() pulumix.GPtrOutput[EventEndpointReplicationConfig, EventEndpointReplicationConfigOutput] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.GPtrOutput[EventEndpointReplicationConfig, EventEndpointReplicationConfigOutput] {
		return v.ReplicationConfig
	})
	unwrapped := pulumix.Flatten[*EventEndpointReplicationConfig, pulumix.GPtrOutput[EventEndpointReplicationConfig, EventEndpointReplicationConfigOutput]](value)
	return pulumix.GPtrOutput[EventEndpointReplicationConfig, EventEndpointReplicationConfigOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the IAM role used for replication between event buses.
func (o EventEndpointOutput) RoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.Output[*string] { return v.RoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Parameters used for routing, including the health check and secondary Region. Documented below.
func (o EventEndpointOutput) RoutingConfig() pulumix.GPtrOutput[EventEndpointRoutingConfig, EventEndpointRoutingConfigOutput] {
	value := pulumix.Apply[EventEndpoint](o, func(v EventEndpoint) pulumix.GPtrOutput[EventEndpointRoutingConfig, EventEndpointRoutingConfigOutput] {
		return v.RoutingConfig
	})
	unwrapped := pulumix.Flatten[*EventEndpointRoutingConfig, pulumix.GPtrOutput[EventEndpointRoutingConfig, EventEndpointRoutingConfigOutput]](value)
	return pulumix.GPtrOutput[EventEndpointRoutingConfig, EventEndpointRoutingConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EventEndpointOutput{})
}
