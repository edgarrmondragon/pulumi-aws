// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ServiceDnsConfig struct {
	// An array that contains one DnsRecord object for each resource record set.
	DnsRecords []ServiceDnsConfigDnsRecord `pulumi:"dnsRecords"`
	// The ID of the namespace to use for DNS configuration.
	NamespaceId string `pulumi:"namespaceId"`
	// The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
	RoutingPolicy *string `pulumi:"routingPolicy"`
}

type ServiceDnsConfigArgs struct {
	// An array that contains one DnsRecord object for each resource record set.
	DnsRecords pulumix.Input[[]*ServiceDnsConfigDnsRecordArgs] `pulumi:"dnsRecords"`
	// The ID of the namespace to use for DNS configuration.
	NamespaceId pulumix.Input[string] `pulumi:"namespaceId"`
	// The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
	RoutingPolicy pulumix.Input[*string] `pulumi:"routingPolicy"`
}

func (ServiceDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsConfig)(nil)).Elem()
}

func (i ServiceDnsConfigArgs) ToServiceDnsConfigOutput() ServiceDnsConfigOutput {
	return i.ToServiceDnsConfigOutputWithContext(context.Background())
}

func (i ServiceDnsConfigArgs) ToServiceDnsConfigOutputWithContext(ctx context.Context) ServiceDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDnsConfigOutput)
}

func (i *ServiceDnsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceDnsConfigArgs] {
	return pulumix.Val(i)
}

type ServiceDnsConfigOutput struct{ *pulumi.OutputState }

func (ServiceDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsConfig)(nil)).Elem()
}

func (o ServiceDnsConfigOutput) ToServiceDnsConfigOutput() ServiceDnsConfigOutput {
	return o
}

func (o ServiceDnsConfigOutput) ToServiceDnsConfigOutputWithContext(ctx context.Context) ServiceDnsConfigOutput {
	return o
}

func (o ServiceDnsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceDnsConfig] {
	return pulumix.Output[ServiceDnsConfig]{
		OutputState: o.OutputState,
	}
}

// An array that contains one DnsRecord object for each resource record set.
func (o ServiceDnsConfigOutput) DnsRecords() pulumix.GArrayOutput[ServiceDnsConfigDnsRecord, ServiceDnsConfigDnsRecordOutput] {
	value := pulumix.Apply[ServiceDnsConfig](o, func(v ServiceDnsConfig) []ServiceDnsConfigDnsRecord { return v.DnsRecords })
	return pulumix.GArrayOutput[ServiceDnsConfigDnsRecord, ServiceDnsConfigDnsRecordOutput]{OutputState: value.OutputState}
}

// The ID of the namespace to use for DNS configuration.
func (o ServiceDnsConfigOutput) NamespaceId() pulumix.Output[string] {
	return pulumix.Apply[ServiceDnsConfig](o, func(v ServiceDnsConfig) string { return v.NamespaceId })
}

// The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
func (o ServiceDnsConfigOutput) RoutingPolicy() pulumix.Output[*string] {
	return pulumix.Apply[ServiceDnsConfig](o, func(v ServiceDnsConfig) *string { return v.RoutingPolicy })
}

type ServiceDnsConfigDnsRecord struct {
	// The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
	Ttl int `pulumi:"ttl"`
	// The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME
	Type string `pulumi:"type"`
}

type ServiceDnsConfigDnsRecordArgs struct {
	// The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
	Ttl pulumix.Input[int] `pulumi:"ttl"`
	// The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ServiceDnsConfigDnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsConfigDnsRecord)(nil)).Elem()
}

func (i ServiceDnsConfigDnsRecordArgs) ToServiceDnsConfigDnsRecordOutput() ServiceDnsConfigDnsRecordOutput {
	return i.ToServiceDnsConfigDnsRecordOutputWithContext(context.Background())
}

func (i ServiceDnsConfigDnsRecordArgs) ToServiceDnsConfigDnsRecordOutputWithContext(ctx context.Context) ServiceDnsConfigDnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDnsConfigDnsRecordOutput)
}

func (i *ServiceDnsConfigDnsRecordArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceDnsConfigDnsRecordArgs] {
	return pulumix.Val(i)
}

type ServiceDnsConfigDnsRecordOutput struct{ *pulumi.OutputState }

func (ServiceDnsConfigDnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsConfigDnsRecord)(nil)).Elem()
}

func (o ServiceDnsConfigDnsRecordOutput) ToServiceDnsConfigDnsRecordOutput() ServiceDnsConfigDnsRecordOutput {
	return o
}

func (o ServiceDnsConfigDnsRecordOutput) ToServiceDnsConfigDnsRecordOutputWithContext(ctx context.Context) ServiceDnsConfigDnsRecordOutput {
	return o
}

func (o ServiceDnsConfigDnsRecordOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceDnsConfigDnsRecord] {
	return pulumix.Output[ServiceDnsConfigDnsRecord]{
		OutputState: o.OutputState,
	}
}

// The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
func (o ServiceDnsConfigDnsRecordOutput) Ttl() pulumix.Output[int] {
	return pulumix.Apply[ServiceDnsConfigDnsRecord](o, func(v ServiceDnsConfigDnsRecord) int { return v.Ttl })
}

// The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME
func (o ServiceDnsConfigDnsRecordOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ServiceDnsConfigDnsRecord](o, func(v ServiceDnsConfigDnsRecord) string { return v.Type })
}

type ServiceHealthCheckConfig struct {
	// The number of consecutive health checks. Maximum value of 10.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
	ResourcePath *string `pulumi:"resourcePath"`
	// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
	Type *string `pulumi:"type"`
}

type ServiceHealthCheckConfigArgs struct {
	// The number of consecutive health checks. Maximum value of 10.
	FailureThreshold pulumix.Input[*int] `pulumi:"failureThreshold"`
	// The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
	ResourcePath pulumix.Input[*string] `pulumi:"resourcePath"`
	// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (ServiceHealthCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHealthCheckConfig)(nil)).Elem()
}

func (i ServiceHealthCheckConfigArgs) ToServiceHealthCheckConfigOutput() ServiceHealthCheckConfigOutput {
	return i.ToServiceHealthCheckConfigOutputWithContext(context.Background())
}

func (i ServiceHealthCheckConfigArgs) ToServiceHealthCheckConfigOutputWithContext(ctx context.Context) ServiceHealthCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceHealthCheckConfigOutput)
}

func (i *ServiceHealthCheckConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceHealthCheckConfigArgs] {
	return pulumix.Val(i)
}

type ServiceHealthCheckConfigOutput struct{ *pulumi.OutputState }

func (ServiceHealthCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHealthCheckConfig)(nil)).Elem()
}

func (o ServiceHealthCheckConfigOutput) ToServiceHealthCheckConfigOutput() ServiceHealthCheckConfigOutput {
	return o
}

func (o ServiceHealthCheckConfigOutput) ToServiceHealthCheckConfigOutputWithContext(ctx context.Context) ServiceHealthCheckConfigOutput {
	return o
}

func (o ServiceHealthCheckConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceHealthCheckConfig] {
	return pulumix.Output[ServiceHealthCheckConfig]{
		OutputState: o.OutputState,
	}
}

// The number of consecutive health checks. Maximum value of 10.
func (o ServiceHealthCheckConfigOutput) FailureThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ServiceHealthCheckConfig](o, func(v ServiceHealthCheckConfig) *int { return v.FailureThreshold })
}

// The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
func (o ServiceHealthCheckConfigOutput) ResourcePath() pulumix.Output[*string] {
	return pulumix.Apply[ServiceHealthCheckConfig](o, func(v ServiceHealthCheckConfig) *string { return v.ResourcePath })
}

// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
func (o ServiceHealthCheckConfigOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[ServiceHealthCheckConfig](o, func(v ServiceHealthCheckConfig) *string { return v.Type })
}

type ServiceHealthCheckCustomConfig struct {
	// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
	FailureThreshold *int `pulumi:"failureThreshold"`
}

type ServiceHealthCheckCustomConfigArgs struct {
	// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
	FailureThreshold pulumix.Input[*int] `pulumi:"failureThreshold"`
}

func (ServiceHealthCheckCustomConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHealthCheckCustomConfig)(nil)).Elem()
}

func (i ServiceHealthCheckCustomConfigArgs) ToServiceHealthCheckCustomConfigOutput() ServiceHealthCheckCustomConfigOutput {
	return i.ToServiceHealthCheckCustomConfigOutputWithContext(context.Background())
}

func (i ServiceHealthCheckCustomConfigArgs) ToServiceHealthCheckCustomConfigOutputWithContext(ctx context.Context) ServiceHealthCheckCustomConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceHealthCheckCustomConfigOutput)
}

func (i *ServiceHealthCheckCustomConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceHealthCheckCustomConfigArgs] {
	return pulumix.Val(i)
}

type ServiceHealthCheckCustomConfigOutput struct{ *pulumi.OutputState }

func (ServiceHealthCheckCustomConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHealthCheckCustomConfig)(nil)).Elem()
}

func (o ServiceHealthCheckCustomConfigOutput) ToServiceHealthCheckCustomConfigOutput() ServiceHealthCheckCustomConfigOutput {
	return o
}

func (o ServiceHealthCheckCustomConfigOutput) ToServiceHealthCheckCustomConfigOutputWithContext(ctx context.Context) ServiceHealthCheckCustomConfigOutput {
	return o
}

func (o ServiceHealthCheckCustomConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceHealthCheckCustomConfig] {
	return pulumix.Output[ServiceHealthCheckCustomConfig]{
		OutputState: o.OutputState,
	}
}

// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
func (o ServiceHealthCheckCustomConfigOutput) FailureThreshold() pulumix.Output[*int] {
	return pulumix.Apply[ServiceHealthCheckCustomConfig](o, func(v ServiceHealthCheckCustomConfig) *int { return v.FailureThreshold })
}

type GetServiceDnsConfig struct {
	// An array that contains one DnsRecord object for each resource record set.
	DnsRecords []GetServiceDnsConfigDnsRecord `pulumi:"dnsRecords"`
	// ID of the namespace that the service belongs to.
	NamespaceId string `pulumi:"namespaceId"`
	// Routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
	RoutingPolicy string `pulumi:"routingPolicy"`
}

type GetServiceDnsConfigArgs struct {
	// An array that contains one DnsRecord object for each resource record set.
	DnsRecords pulumix.Input[[]*GetServiceDnsConfigDnsRecordArgs] `pulumi:"dnsRecords"`
	// ID of the namespace that the service belongs to.
	NamespaceId pulumix.Input[string] `pulumi:"namespaceId"`
	// Routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
	RoutingPolicy pulumix.Input[string] `pulumi:"routingPolicy"`
}

func (GetServiceDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceDnsConfig)(nil)).Elem()
}

func (i GetServiceDnsConfigArgs) ToGetServiceDnsConfigOutput() GetServiceDnsConfigOutput {
	return i.ToGetServiceDnsConfigOutputWithContext(context.Background())
}

func (i GetServiceDnsConfigArgs) ToGetServiceDnsConfigOutputWithContext(ctx context.Context) GetServiceDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceDnsConfigOutput)
}

func (i *GetServiceDnsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetServiceDnsConfigArgs] {
	return pulumix.Val(i)
}

type GetServiceDnsConfigOutput struct{ *pulumi.OutputState }

func (GetServiceDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceDnsConfig)(nil)).Elem()
}

func (o GetServiceDnsConfigOutput) ToGetServiceDnsConfigOutput() GetServiceDnsConfigOutput {
	return o
}

func (o GetServiceDnsConfigOutput) ToGetServiceDnsConfigOutputWithContext(ctx context.Context) GetServiceDnsConfigOutput {
	return o
}

func (o GetServiceDnsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceDnsConfig] {
	return pulumix.Output[GetServiceDnsConfig]{
		OutputState: o.OutputState,
	}
}

// An array that contains one DnsRecord object for each resource record set.
func (o GetServiceDnsConfigOutput) DnsRecords() pulumix.GArrayOutput[GetServiceDnsConfigDnsRecord, GetServiceDnsConfigDnsRecordOutput] {
	value := pulumix.Apply[GetServiceDnsConfig](o, func(v GetServiceDnsConfig) []GetServiceDnsConfigDnsRecord { return v.DnsRecords })
	return pulumix.GArrayOutput[GetServiceDnsConfigDnsRecord, GetServiceDnsConfigDnsRecordOutput]{OutputState: value.OutputState}
}

// ID of the namespace that the service belongs to.
func (o GetServiceDnsConfigOutput) NamespaceId() pulumix.Output[string] {
	return pulumix.Apply[GetServiceDnsConfig](o, func(v GetServiceDnsConfig) string { return v.NamespaceId })
}

// Routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
func (o GetServiceDnsConfigOutput) RoutingPolicy() pulumix.Output[string] {
	return pulumix.Apply[GetServiceDnsConfig](o, func(v GetServiceDnsConfig) string { return v.RoutingPolicy })
}

type GetServiceDnsConfigDnsRecord struct {
	// Amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
	Ttl int `pulumi:"ttl"`
	// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
	Type string `pulumi:"type"`
}

type GetServiceDnsConfigDnsRecordArgs struct {
	// Amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
	Ttl pulumix.Input[int] `pulumi:"ttl"`
	// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetServiceDnsConfigDnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceDnsConfigDnsRecord)(nil)).Elem()
}

func (i GetServiceDnsConfigDnsRecordArgs) ToGetServiceDnsConfigDnsRecordOutput() GetServiceDnsConfigDnsRecordOutput {
	return i.ToGetServiceDnsConfigDnsRecordOutputWithContext(context.Background())
}

func (i GetServiceDnsConfigDnsRecordArgs) ToGetServiceDnsConfigDnsRecordOutputWithContext(ctx context.Context) GetServiceDnsConfigDnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceDnsConfigDnsRecordOutput)
}

func (i *GetServiceDnsConfigDnsRecordArgs) ToOutput(ctx context.Context) pulumix.Output[*GetServiceDnsConfigDnsRecordArgs] {
	return pulumix.Val(i)
}

type GetServiceDnsConfigDnsRecordOutput struct{ *pulumi.OutputState }

func (GetServiceDnsConfigDnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceDnsConfigDnsRecord)(nil)).Elem()
}

func (o GetServiceDnsConfigDnsRecordOutput) ToGetServiceDnsConfigDnsRecordOutput() GetServiceDnsConfigDnsRecordOutput {
	return o
}

func (o GetServiceDnsConfigDnsRecordOutput) ToGetServiceDnsConfigDnsRecordOutputWithContext(ctx context.Context) GetServiceDnsConfigDnsRecordOutput {
	return o
}

func (o GetServiceDnsConfigDnsRecordOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceDnsConfigDnsRecord] {
	return pulumix.Output[GetServiceDnsConfigDnsRecord]{
		OutputState: o.OutputState,
	}
}

// Amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
func (o GetServiceDnsConfigDnsRecordOutput) Ttl() pulumix.Output[int] {
	return pulumix.Apply[GetServiceDnsConfigDnsRecord](o, func(v GetServiceDnsConfigDnsRecord) int { return v.Ttl })
}

// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
func (o GetServiceDnsConfigDnsRecordOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetServiceDnsConfigDnsRecord](o, func(v GetServiceDnsConfigDnsRecord) string { return v.Type })
}

type GetServiceHealthCheckConfig struct {
	// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
	FailureThreshold int `pulumi:"failureThreshold"`
	// Path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
	ResourcePath string `pulumi:"resourcePath"`
	// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
	Type string `pulumi:"type"`
}

type GetServiceHealthCheckConfigArgs struct {
	// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
	FailureThreshold pulumix.Input[int] `pulumi:"failureThreshold"`
	// Path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
	ResourcePath pulumix.Input[string] `pulumi:"resourcePath"`
	// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetServiceHealthCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthCheckConfig)(nil)).Elem()
}

func (i GetServiceHealthCheckConfigArgs) ToGetServiceHealthCheckConfigOutput() GetServiceHealthCheckConfigOutput {
	return i.ToGetServiceHealthCheckConfigOutputWithContext(context.Background())
}

func (i GetServiceHealthCheckConfigArgs) ToGetServiceHealthCheckConfigOutputWithContext(ctx context.Context) GetServiceHealthCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthCheckConfigOutput)
}

func (i *GetServiceHealthCheckConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetServiceHealthCheckConfigArgs] {
	return pulumix.Val(i)
}

type GetServiceHealthCheckConfigOutput struct{ *pulumi.OutputState }

func (GetServiceHealthCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthCheckConfig)(nil)).Elem()
}

func (o GetServiceHealthCheckConfigOutput) ToGetServiceHealthCheckConfigOutput() GetServiceHealthCheckConfigOutput {
	return o
}

func (o GetServiceHealthCheckConfigOutput) ToGetServiceHealthCheckConfigOutputWithContext(ctx context.Context) GetServiceHealthCheckConfigOutput {
	return o
}

func (o GetServiceHealthCheckConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceHealthCheckConfig] {
	return pulumix.Output[GetServiceHealthCheckConfig]{
		OutputState: o.OutputState,
	}
}

// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
func (o GetServiceHealthCheckConfigOutput) FailureThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetServiceHealthCheckConfig](o, func(v GetServiceHealthCheckConfig) int { return v.FailureThreshold })
}

// Path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
func (o GetServiceHealthCheckConfigOutput) ResourcePath() pulumix.Output[string] {
	return pulumix.Apply[GetServiceHealthCheckConfig](o, func(v GetServiceHealthCheckConfig) string { return v.ResourcePath })
}

// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
func (o GetServiceHealthCheckConfigOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetServiceHealthCheckConfig](o, func(v GetServiceHealthCheckConfig) string { return v.Type })
}

type GetServiceHealthCheckCustomConfig struct {
	// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
	FailureThreshold int `pulumi:"failureThreshold"`
}

type GetServiceHealthCheckCustomConfigArgs struct {
	// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
	FailureThreshold pulumix.Input[int] `pulumi:"failureThreshold"`
}

func (GetServiceHealthCheckCustomConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthCheckCustomConfig)(nil)).Elem()
}

func (i GetServiceHealthCheckCustomConfigArgs) ToGetServiceHealthCheckCustomConfigOutput() GetServiceHealthCheckCustomConfigOutput {
	return i.ToGetServiceHealthCheckCustomConfigOutputWithContext(context.Background())
}

func (i GetServiceHealthCheckCustomConfigArgs) ToGetServiceHealthCheckCustomConfigOutputWithContext(ctx context.Context) GetServiceHealthCheckCustomConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceHealthCheckCustomConfigOutput)
}

func (i *GetServiceHealthCheckCustomConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetServiceHealthCheckCustomConfigArgs] {
	return pulumix.Val(i)
}

type GetServiceHealthCheckCustomConfigOutput struct{ *pulumi.OutputState }

func (GetServiceHealthCheckCustomConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceHealthCheckCustomConfig)(nil)).Elem()
}

func (o GetServiceHealthCheckCustomConfigOutput) ToGetServiceHealthCheckCustomConfigOutput() GetServiceHealthCheckCustomConfigOutput {
	return o
}

func (o GetServiceHealthCheckCustomConfigOutput) ToGetServiceHealthCheckCustomConfigOutputWithContext(ctx context.Context) GetServiceHealthCheckCustomConfigOutput {
	return o
}

func (o GetServiceHealthCheckCustomConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceHealthCheckCustomConfig] {
	return pulumix.Output[GetServiceHealthCheckCustomConfig]{
		OutputState: o.OutputState,
	}
}

// The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
func (o GetServiceHealthCheckCustomConfigOutput) FailureThreshold() pulumix.Output[int] {
	return pulumix.Apply[GetServiceHealthCheckCustomConfig](o, func(v GetServiceHealthCheckCustomConfig) int { return v.FailureThreshold })
}

func init() {
	pulumi.RegisterOutputType(ServiceDnsConfigOutput{})
	pulumi.RegisterOutputType(ServiceDnsConfigDnsRecordOutput{})
	pulumi.RegisterOutputType(ServiceHealthCheckConfigOutput{})
	pulumi.RegisterOutputType(ServiceHealthCheckCustomConfigOutput{})
	pulumi.RegisterOutputType(GetServiceDnsConfigOutput{})
	pulumi.RegisterOutputType(GetServiceDnsConfigDnsRecordOutput{})
	pulumi.RegisterOutputType(GetServiceHealthCheckConfigOutput{})
	pulumi.RegisterOutputType(GetServiceHealthCheckCustomConfigOutput{})
}
