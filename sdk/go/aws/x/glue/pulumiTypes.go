// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CatalogDatabaseCreateTableDefaultPermission struct {
	// The permissions that are granted to the principal.
	Permissions []string `pulumi:"permissions"`
	// The principal who is granted permissions.. See `principal` below.
	Principal *CatalogDatabaseCreateTableDefaultPermissionPrincipal `pulumi:"principal"`
}

type CatalogDatabaseCreateTableDefaultPermissionArgs struct {
	// The permissions that are granted to the principal.
	Permissions pulumix.Input[[]string] `pulumi:"permissions"`
	// The principal who is granted permissions.. See `principal` below.
	Principal pulumix.Input[*CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs] `pulumi:"principal"`
}

func (CatalogDatabaseCreateTableDefaultPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogDatabaseCreateTableDefaultPermission)(nil)).Elem()
}

func (i CatalogDatabaseCreateTableDefaultPermissionArgs) ToCatalogDatabaseCreateTableDefaultPermissionOutput() CatalogDatabaseCreateTableDefaultPermissionOutput {
	return i.ToCatalogDatabaseCreateTableDefaultPermissionOutputWithContext(context.Background())
}

func (i CatalogDatabaseCreateTableDefaultPermissionArgs) ToCatalogDatabaseCreateTableDefaultPermissionOutputWithContext(ctx context.Context) CatalogDatabaseCreateTableDefaultPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogDatabaseCreateTableDefaultPermissionOutput)
}

func (i *CatalogDatabaseCreateTableDefaultPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogDatabaseCreateTableDefaultPermissionArgs] {
	return pulumix.Val(i)
}

type CatalogDatabaseCreateTableDefaultPermissionOutput struct{ *pulumi.OutputState }

func (CatalogDatabaseCreateTableDefaultPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogDatabaseCreateTableDefaultPermission)(nil)).Elem()
}

func (o CatalogDatabaseCreateTableDefaultPermissionOutput) ToCatalogDatabaseCreateTableDefaultPermissionOutput() CatalogDatabaseCreateTableDefaultPermissionOutput {
	return o
}

func (o CatalogDatabaseCreateTableDefaultPermissionOutput) ToCatalogDatabaseCreateTableDefaultPermissionOutputWithContext(ctx context.Context) CatalogDatabaseCreateTableDefaultPermissionOutput {
	return o
}

func (o CatalogDatabaseCreateTableDefaultPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogDatabaseCreateTableDefaultPermission] {
	return pulumix.Output[CatalogDatabaseCreateTableDefaultPermission]{
		OutputState: o.OutputState,
	}
}

// The permissions that are granted to the principal.
func (o CatalogDatabaseCreateTableDefaultPermissionOutput) Permissions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CatalogDatabaseCreateTableDefaultPermission](o, func(v CatalogDatabaseCreateTableDefaultPermission) []string { return v.Permissions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The principal who is granted permissions.. See `principal` below.
func (o CatalogDatabaseCreateTableDefaultPermissionOutput) Principal() pulumix.GPtrOutput[CatalogDatabaseCreateTableDefaultPermissionPrincipal, CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput] {
	value := pulumix.Apply[CatalogDatabaseCreateTableDefaultPermission](o, func(v CatalogDatabaseCreateTableDefaultPermission) *CatalogDatabaseCreateTableDefaultPermissionPrincipal {
		return v.Principal
	})
	return pulumix.GPtrOutput[CatalogDatabaseCreateTableDefaultPermissionPrincipal, CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput]{OutputState: value.OutputState}
}

type CatalogDatabaseCreateTableDefaultPermissionPrincipal struct {
	// An identifier for the Lake Formation principal.
	DataLakePrincipalIdentifier *string `pulumi:"dataLakePrincipalIdentifier"`
}

type CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs struct {
	// An identifier for the Lake Formation principal.
	DataLakePrincipalIdentifier pulumix.Input[*string] `pulumi:"dataLakePrincipalIdentifier"`
}

func (CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogDatabaseCreateTableDefaultPermissionPrincipal)(nil)).Elem()
}

func (i CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs) ToCatalogDatabaseCreateTableDefaultPermissionPrincipalOutput() CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput {
	return i.ToCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputWithContext(context.Background())
}

func (i CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs) ToCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputWithContext(ctx context.Context) CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput)
}

func (i *CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs] {
	return pulumix.Val(i)
}

type CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput struct{ *pulumi.OutputState }

func (CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogDatabaseCreateTableDefaultPermissionPrincipal)(nil)).Elem()
}

func (o CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput) ToCatalogDatabaseCreateTableDefaultPermissionPrincipalOutput() CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput {
	return o
}

func (o CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput) ToCatalogDatabaseCreateTableDefaultPermissionPrincipalOutputWithContext(ctx context.Context) CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput {
	return o
}

func (o CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogDatabaseCreateTableDefaultPermissionPrincipal] {
	return pulumix.Output[CatalogDatabaseCreateTableDefaultPermissionPrincipal]{
		OutputState: o.OutputState,
	}
}

// An identifier for the Lake Formation principal.
func (o CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput) DataLakePrincipalIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[CatalogDatabaseCreateTableDefaultPermissionPrincipal](o, func(v CatalogDatabaseCreateTableDefaultPermissionPrincipal) *string {
		return v.DataLakePrincipalIdentifier
	})
}

type CatalogDatabaseTargetDatabase struct {
	// ID of the Data Catalog in which the database resides.
	CatalogId string `pulumi:"catalogId"`
	// Name of the catalog database.
	DatabaseName string `pulumi:"databaseName"`
	// Region of the target database.
	Region *string `pulumi:"region"`
}

type CatalogDatabaseTargetDatabaseArgs struct {
	// ID of the Data Catalog in which the database resides.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Name of the catalog database.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Region of the target database.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (CatalogDatabaseTargetDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogDatabaseTargetDatabase)(nil)).Elem()
}

func (i CatalogDatabaseTargetDatabaseArgs) ToCatalogDatabaseTargetDatabaseOutput() CatalogDatabaseTargetDatabaseOutput {
	return i.ToCatalogDatabaseTargetDatabaseOutputWithContext(context.Background())
}

func (i CatalogDatabaseTargetDatabaseArgs) ToCatalogDatabaseTargetDatabaseOutputWithContext(ctx context.Context) CatalogDatabaseTargetDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogDatabaseTargetDatabaseOutput)
}

func (i *CatalogDatabaseTargetDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogDatabaseTargetDatabaseArgs] {
	return pulumix.Val(i)
}

type CatalogDatabaseTargetDatabaseOutput struct{ *pulumi.OutputState }

func (CatalogDatabaseTargetDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogDatabaseTargetDatabase)(nil)).Elem()
}

func (o CatalogDatabaseTargetDatabaseOutput) ToCatalogDatabaseTargetDatabaseOutput() CatalogDatabaseTargetDatabaseOutput {
	return o
}

func (o CatalogDatabaseTargetDatabaseOutput) ToCatalogDatabaseTargetDatabaseOutputWithContext(ctx context.Context) CatalogDatabaseTargetDatabaseOutput {
	return o
}

func (o CatalogDatabaseTargetDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogDatabaseTargetDatabase] {
	return pulumix.Output[CatalogDatabaseTargetDatabase]{
		OutputState: o.OutputState,
	}
}

// ID of the Data Catalog in which the database resides.
func (o CatalogDatabaseTargetDatabaseOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[CatalogDatabaseTargetDatabase](o, func(v CatalogDatabaseTargetDatabase) string { return v.CatalogId })
}

// Name of the catalog database.
func (o CatalogDatabaseTargetDatabaseOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[CatalogDatabaseTargetDatabase](o, func(v CatalogDatabaseTargetDatabase) string { return v.DatabaseName })
}

// Region of the target database.
func (o CatalogDatabaseTargetDatabaseOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[CatalogDatabaseTargetDatabase](o, func(v CatalogDatabaseTargetDatabase) *string { return v.Region })
}

type CatalogTablePartitionIndex struct {
	// Name of the partition index.
	IndexName   string  `pulumi:"indexName"`
	IndexStatus *string `pulumi:"indexStatus"`
	// Keys for the partition index.
	Keys []string `pulumi:"keys"`
}

type CatalogTablePartitionIndexArgs struct {
	// Name of the partition index.
	IndexName   pulumix.Input[string]  `pulumi:"indexName"`
	IndexStatus pulumix.Input[*string] `pulumi:"indexStatus"`
	// Keys for the partition index.
	Keys pulumix.Input[[]string] `pulumi:"keys"`
}

func (CatalogTablePartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionIndex)(nil)).Elem()
}

func (i CatalogTablePartitionIndexArgs) ToCatalogTablePartitionIndexOutput() CatalogTablePartitionIndexOutput {
	return i.ToCatalogTablePartitionIndexOutputWithContext(context.Background())
}

func (i CatalogTablePartitionIndexArgs) ToCatalogTablePartitionIndexOutputWithContext(ctx context.Context) CatalogTablePartitionIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTablePartitionIndexOutput)
}

func (i *CatalogTablePartitionIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTablePartitionIndexArgs] {
	return pulumix.Val(i)
}

type CatalogTablePartitionIndexOutput struct{ *pulumi.OutputState }

func (CatalogTablePartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionIndex)(nil)).Elem()
}

func (o CatalogTablePartitionIndexOutput) ToCatalogTablePartitionIndexOutput() CatalogTablePartitionIndexOutput {
	return o
}

func (o CatalogTablePartitionIndexOutput) ToCatalogTablePartitionIndexOutputWithContext(ctx context.Context) CatalogTablePartitionIndexOutput {
	return o
}

func (o CatalogTablePartitionIndexOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTablePartitionIndex] {
	return pulumix.Output[CatalogTablePartitionIndex]{
		OutputState: o.OutputState,
	}
}

// Name of the partition index.
func (o CatalogTablePartitionIndexOutput) IndexName() pulumix.Output[string] {
	return pulumix.Apply[CatalogTablePartitionIndex](o, func(v CatalogTablePartitionIndex) string { return v.IndexName })
}

func (o CatalogTablePartitionIndexOutput) IndexStatus() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTablePartitionIndex](o, func(v CatalogTablePartitionIndex) *string { return v.IndexStatus })
}

// Keys for the partition index.
func (o CatalogTablePartitionIndexOutput) Keys() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CatalogTablePartitionIndex](o, func(v CatalogTablePartitionIndex) []string { return v.Keys })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CatalogTablePartitionKey struct {
	// Free-form text comment.
	Comment *string `pulumi:"comment"`
	// Name of the Partition Key.
	Name string `pulumi:"name"`
	// Datatype of data in the Partition Key.
	Type *string `pulumi:"type"`
}

type CatalogTablePartitionKeyArgs struct {
	// Free-form text comment.
	Comment pulumix.Input[*string] `pulumi:"comment"`
	// Name of the Partition Key.
	Name pulumix.Input[string] `pulumi:"name"`
	// Datatype of data in the Partition Key.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (CatalogTablePartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionKey)(nil)).Elem()
}

func (i CatalogTablePartitionKeyArgs) ToCatalogTablePartitionKeyOutput() CatalogTablePartitionKeyOutput {
	return i.ToCatalogTablePartitionKeyOutputWithContext(context.Background())
}

func (i CatalogTablePartitionKeyArgs) ToCatalogTablePartitionKeyOutputWithContext(ctx context.Context) CatalogTablePartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTablePartitionKeyOutput)
}

func (i *CatalogTablePartitionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTablePartitionKeyArgs] {
	return pulumix.Val(i)
}

type CatalogTablePartitionKeyOutput struct{ *pulumi.OutputState }

func (CatalogTablePartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTablePartitionKey)(nil)).Elem()
}

func (o CatalogTablePartitionKeyOutput) ToCatalogTablePartitionKeyOutput() CatalogTablePartitionKeyOutput {
	return o
}

func (o CatalogTablePartitionKeyOutput) ToCatalogTablePartitionKeyOutputWithContext(ctx context.Context) CatalogTablePartitionKeyOutput {
	return o
}

func (o CatalogTablePartitionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTablePartitionKey] {
	return pulumix.Output[CatalogTablePartitionKey]{
		OutputState: o.OutputState,
	}
}

// Free-form text comment.
func (o CatalogTablePartitionKeyOutput) Comment() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTablePartitionKey](o, func(v CatalogTablePartitionKey) *string { return v.Comment })
}

// Name of the Partition Key.
func (o CatalogTablePartitionKeyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[CatalogTablePartitionKey](o, func(v CatalogTablePartitionKey) string { return v.Name })
}

// Datatype of data in the Partition Key.
func (o CatalogTablePartitionKeyOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTablePartitionKey](o, func(v CatalogTablePartitionKey) *string { return v.Type })
}

type CatalogTableStorageDescriptor struct {
	// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns []string `pulumi:"bucketColumns"`
	// Configuration block for columns in the table. See `columns` below.
	Columns []CatalogTableStorageDescriptorColumn `pulumi:"columns"`
	// Whether the data in the table is compressed.
	Compressed *bool `pulumi:"compressed"`
	// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat *string `pulumi:"inputFormat"`
	// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location *string `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets *int `pulumi:"numberOfBuckets"`
	// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat *string `pulumi:"outputFormat"`
	// User-supplied properties in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
	SchemaReference *CatalogTableStorageDescriptorSchemaReference `pulumi:"schemaReference"`
	// Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
	SerDeInfo *CatalogTableStorageDescriptorSerDeInfo `pulumi:"serDeInfo"`
	// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
	SkewedInfo *CatalogTableStorageDescriptorSkewedInfo `pulumi:"skewedInfo"`
	// Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
	SortColumns []CatalogTableStorageDescriptorSortColumn `pulumi:"sortColumns"`
	// Whether the table data is stored in subdirectories.
	StoredAsSubDirectories *bool `pulumi:"storedAsSubDirectories"`
}

type CatalogTableStorageDescriptorArgs struct {
	// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns pulumix.Input[[]string] `pulumi:"bucketColumns"`
	// Configuration block for columns in the table. See `columns` below.
	Columns pulumix.Input[[]*CatalogTableStorageDescriptorColumnArgs] `pulumi:"columns"`
	// Whether the data in the table is compressed.
	Compressed pulumix.Input[*bool] `pulumi:"compressed"`
	// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat pulumix.Input[*string] `pulumi:"inputFormat"`
	// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets pulumix.Input[*int] `pulumi:"numberOfBuckets"`
	// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat pulumix.Input[*string] `pulumi:"outputFormat"`
	// User-supplied properties in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
	SchemaReference pulumix.Input[*CatalogTableStorageDescriptorSchemaReferenceArgs] `pulumi:"schemaReference"`
	// Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
	SerDeInfo pulumix.Input[*CatalogTableStorageDescriptorSerDeInfoArgs] `pulumi:"serDeInfo"`
	// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
	SkewedInfo pulumix.Input[*CatalogTableStorageDescriptorSkewedInfoArgs] `pulumi:"skewedInfo"`
	// Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
	SortColumns pulumix.Input[[]*CatalogTableStorageDescriptorSortColumnArgs] `pulumi:"sortColumns"`
	// Whether the table data is stored in subdirectories.
	StoredAsSubDirectories pulumix.Input[*bool] `pulumi:"storedAsSubDirectories"`
}

func (CatalogTableStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptor)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput {
	return i.ToCatalogTableStorageDescriptorOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorArgs) ToCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorOutput)
}

func (i *CatalogTableStorageDescriptorArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptor)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorOutput() CatalogTableStorageDescriptorOutput {
	return o
}

func (o CatalogTableStorageDescriptorOutput) ToCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorOutput {
	return o
}

func (o CatalogTableStorageDescriptorOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptor] {
	return pulumix.Output[CatalogTableStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o CatalogTableStorageDescriptorOutput) BucketColumns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) []string { return v.BucketColumns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Configuration block for columns in the table. See `columns` below.
func (o CatalogTableStorageDescriptorOutput) Columns() pulumix.GArrayOutput[CatalogTableStorageDescriptorColumn, CatalogTableStorageDescriptorColumnOutput] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) []CatalogTableStorageDescriptorColumn { return v.Columns })
	return pulumix.GArrayOutput[CatalogTableStorageDescriptorColumn, CatalogTableStorageDescriptorColumnOutput]{OutputState: value.OutputState}
}

// Whether the data in the table is compressed.
func (o CatalogTableStorageDescriptorOutput) Compressed() pulumix.Output[*bool] {
	return pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *bool { return v.Compressed })
}

// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o CatalogTableStorageDescriptorOutput) InputFormat() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *string { return v.InputFormat })
}

// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o CatalogTableStorageDescriptorOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *string { return v.Location })
}

// Must be specified if the table contains any dimension columns.
func (o CatalogTableStorageDescriptorOutput) NumberOfBuckets() pulumix.Output[*int] {
	return pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *int { return v.NumberOfBuckets })
}

// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o CatalogTableStorageDescriptorOutput) OutputFormat() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *string { return v.OutputFormat })
}

// User-supplied properties in key-value form.
func (o CatalogTableStorageDescriptorOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
func (o CatalogTableStorageDescriptorOutput) SchemaReference() pulumix.GPtrOutput[CatalogTableStorageDescriptorSchemaReference, CatalogTableStorageDescriptorSchemaReferenceOutput] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSchemaReference {
		return v.SchemaReference
	})
	return pulumix.GPtrOutput[CatalogTableStorageDescriptorSchemaReference, CatalogTableStorageDescriptorSchemaReferenceOutput]{OutputState: value.OutputState}
}

// Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
func (o CatalogTableStorageDescriptorOutput) SerDeInfo() pulumix.GPtrOutput[CatalogTableStorageDescriptorSerDeInfo, CatalogTableStorageDescriptorSerDeInfoOutput] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSerDeInfo { return v.SerDeInfo })
	return pulumix.GPtrOutput[CatalogTableStorageDescriptorSerDeInfo, CatalogTableStorageDescriptorSerDeInfoOutput]{OutputState: value.OutputState}
}

// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
func (o CatalogTableStorageDescriptorOutput) SkewedInfo() pulumix.GPtrOutput[CatalogTableStorageDescriptorSkewedInfo, CatalogTableStorageDescriptorSkewedInfoOutput] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *CatalogTableStorageDescriptorSkewedInfo { return v.SkewedInfo })
	return pulumix.GPtrOutput[CatalogTableStorageDescriptorSkewedInfo, CatalogTableStorageDescriptorSkewedInfoOutput]{OutputState: value.OutputState}
}

// Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
func (o CatalogTableStorageDescriptorOutput) SortColumns() pulumix.GArrayOutput[CatalogTableStorageDescriptorSortColumn, CatalogTableStorageDescriptorSortColumnOutput] {
	value := pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) []CatalogTableStorageDescriptorSortColumn { return v.SortColumns })
	return pulumix.GArrayOutput[CatalogTableStorageDescriptorSortColumn, CatalogTableStorageDescriptorSortColumnOutput]{OutputState: value.OutputState}
}

// Whether the table data is stored in subdirectories.
func (o CatalogTableStorageDescriptorOutput) StoredAsSubDirectories() pulumix.Output[*bool] {
	return pulumix.Apply[CatalogTableStorageDescriptor](o, func(v CatalogTableStorageDescriptor) *bool { return v.StoredAsSubDirectories })
}

type CatalogTableStorageDescriptorColumn struct {
	// Free-form text comment.
	Comment *string `pulumi:"comment"`
	// Name of the Column.
	Name string `pulumi:"name"`
	// Key-value pairs defining properties associated with the column.
	Parameters map[string]string `pulumi:"parameters"`
	// Datatype of data in the Column.
	Type *string `pulumi:"type"`
}

type CatalogTableStorageDescriptorColumnArgs struct {
	// Free-form text comment.
	Comment pulumix.Input[*string] `pulumi:"comment"`
	// Name of the Column.
	Name pulumix.Input[string] `pulumi:"name"`
	// Key-value pairs defining properties associated with the column.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Datatype of data in the Column.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (CatalogTableStorageDescriptorColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorColumnArgs) ToCatalogTableStorageDescriptorColumnOutput() CatalogTableStorageDescriptorColumnOutput {
	return i.ToCatalogTableStorageDescriptorColumnOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorColumnArgs) ToCatalogTableStorageDescriptorColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorColumnOutput)
}

func (i *CatalogTableStorageDescriptorColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorColumnArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorColumnOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorColumnOutput) ToCatalogTableStorageDescriptorColumnOutput() CatalogTableStorageDescriptorColumnOutput {
	return o
}

func (o CatalogTableStorageDescriptorColumnOutput) ToCatalogTableStorageDescriptorColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorColumnOutput {
	return o
}

func (o CatalogTableStorageDescriptorColumnOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptorColumn] {
	return pulumix.Output[CatalogTableStorageDescriptorColumn]{
		OutputState: o.OutputState,
	}
}

// Free-form text comment.
func (o CatalogTableStorageDescriptorColumnOutput) Comment() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorColumn](o, func(v CatalogTableStorageDescriptorColumn) *string { return v.Comment })
}

// Name of the Column.
func (o CatalogTableStorageDescriptorColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[CatalogTableStorageDescriptorColumn](o, func(v CatalogTableStorageDescriptorColumn) string { return v.Name })
}

// Key-value pairs defining properties associated with the column.
func (o CatalogTableStorageDescriptorColumnOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptorColumn](o, func(v CatalogTableStorageDescriptorColumn) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Datatype of data in the Column.
func (o CatalogTableStorageDescriptorColumnOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorColumn](o, func(v CatalogTableStorageDescriptorColumn) *string { return v.Type })
}

type CatalogTableStorageDescriptorSchemaReference struct {
	// Configuration block that contains schema identity fields. Either this or the `schemaVersionId` has to be provided. See `schemaId` below.
	SchemaId *CatalogTableStorageDescriptorSchemaReferenceSchemaId `pulumi:"schemaId"`
	// Unique ID assigned to a version of the schema. Either this or the `schemaId` has to be provided.
	SchemaVersionId *string `pulumi:"schemaVersionId"`
	// Version number of the schema.
	SchemaVersionNumber int `pulumi:"schemaVersionNumber"`
}

type CatalogTableStorageDescriptorSchemaReferenceArgs struct {
	// Configuration block that contains schema identity fields. Either this or the `schemaVersionId` has to be provided. See `schemaId` below.
	SchemaId pulumix.Input[*CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs] `pulumi:"schemaId"`
	// Unique ID assigned to a version of the schema. Either this or the `schemaId` has to be provided.
	SchemaVersionId pulumix.Input[*string] `pulumi:"schemaVersionId"`
	// Version number of the schema.
	SchemaVersionNumber pulumix.Input[int] `pulumi:"schemaVersionNumber"`
}

func (CatalogTableStorageDescriptorSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSchemaReference)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSchemaReferenceArgs) ToCatalogTableStorageDescriptorSchemaReferenceOutput() CatalogTableStorageDescriptorSchemaReferenceOutput {
	return i.ToCatalogTableStorageDescriptorSchemaReferenceOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSchemaReferenceArgs) ToCatalogTableStorageDescriptorSchemaReferenceOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSchemaReferenceOutput)
}

func (i *CatalogTableStorageDescriptorSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorSchemaReferenceArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorSchemaReferenceOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSchemaReference)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSchemaReferenceOutput) ToCatalogTableStorageDescriptorSchemaReferenceOutput() CatalogTableStorageDescriptorSchemaReferenceOutput {
	return o
}

func (o CatalogTableStorageDescriptorSchemaReferenceOutput) ToCatalogTableStorageDescriptorSchemaReferenceOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSchemaReferenceOutput {
	return o
}

func (o CatalogTableStorageDescriptorSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptorSchemaReference] {
	return pulumix.Output[CatalogTableStorageDescriptorSchemaReference]{
		OutputState: o.OutputState,
	}
}

// Configuration block that contains schema identity fields. Either this or the `schemaVersionId` has to be provided. See `schemaId` below.
func (o CatalogTableStorageDescriptorSchemaReferenceOutput) SchemaId() pulumix.GPtrOutput[CatalogTableStorageDescriptorSchemaReferenceSchemaId, CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput] {
	value := pulumix.Apply[CatalogTableStorageDescriptorSchemaReference](o, func(v CatalogTableStorageDescriptorSchemaReference) *CatalogTableStorageDescriptorSchemaReferenceSchemaId {
		return v.SchemaId
	})
	return pulumix.GPtrOutput[CatalogTableStorageDescriptorSchemaReferenceSchemaId, CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput]{OutputState: value.OutputState}
}

// Unique ID assigned to a version of the schema. Either this or the `schemaId` has to be provided.
func (o CatalogTableStorageDescriptorSchemaReferenceOutput) SchemaVersionId() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSchemaReference](o, func(v CatalogTableStorageDescriptorSchemaReference) *string { return v.SchemaVersionId })
}

// Version number of the schema.
func (o CatalogTableStorageDescriptorSchemaReferenceOutput) SchemaVersionNumber() pulumix.Output[int] {
	return pulumix.Apply[CatalogTableStorageDescriptorSchemaReference](o, func(v CatalogTableStorageDescriptorSchemaReference) int { return v.SchemaVersionNumber })
}

type CatalogTableStorageDescriptorSchemaReferenceSchemaId struct {
	// Name of the schema registry that contains the schema. Must be provided when `schemaName` is specified and conflicts with `schemaArn`.
	RegistryName *string `pulumi:"registryName"`
	// ARN of the schema. One of `schemaArn` or `schemaName` has to be provided.
	SchemaArn *string `pulumi:"schemaArn"`
	// Name of the schema. One of `schemaArn` or `schemaName` has to be provided.
	SchemaName *string `pulumi:"schemaName"`
}

type CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs struct {
	// Name of the schema registry that contains the schema. Must be provided when `schemaName` is specified and conflicts with `schemaArn`.
	RegistryName pulumix.Input[*string] `pulumi:"registryName"`
	// ARN of the schema. One of `schemaArn` or `schemaName` has to be provided.
	SchemaArn pulumix.Input[*string] `pulumi:"schemaArn"`
	// Name of the schema. One of `schemaArn` or `schemaName` has to be provided.
	SchemaName pulumix.Input[*string] `pulumi:"schemaName"`
}

func (CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSchemaReferenceSchemaId)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ToCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput() CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return i.ToCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ToCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput)
}

func (i *CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSchemaReferenceSchemaId)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ToCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput() CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return o
}

func (o CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ToCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return o
}

func (o CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptorSchemaReferenceSchemaId] {
	return pulumix.Output[CatalogTableStorageDescriptorSchemaReferenceSchemaId]{
		OutputState: o.OutputState,
	}
}

// Name of the schema registry that contains the schema. Must be provided when `schemaName` is specified and conflicts with `schemaArn`.
func (o CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) RegistryName() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSchemaReferenceSchemaId](o, func(v CatalogTableStorageDescriptorSchemaReferenceSchemaId) *string { return v.RegistryName })
}

// ARN of the schema. One of `schemaArn` or `schemaName` has to be provided.
func (o CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) SchemaArn() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSchemaReferenceSchemaId](o, func(v CatalogTableStorageDescriptorSchemaReferenceSchemaId) *string { return v.SchemaArn })
}

// Name of the schema. One of `schemaArn` or `schemaName` has to be provided.
func (o CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) SchemaName() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSchemaReferenceSchemaId](o, func(v CatalogTableStorageDescriptorSchemaReferenceSchemaId) *string { return v.SchemaName })
}

type CatalogTableStorageDescriptorSerDeInfo struct {
	// Name of the SerDe.
	Name *string `pulumi:"name"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
	SerializationLibrary *string `pulumi:"serializationLibrary"`
}

type CatalogTableStorageDescriptorSerDeInfoArgs struct {
	// Name of the SerDe.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
	SerializationLibrary pulumix.Input[*string] `pulumi:"serializationLibrary"`
}

func (CatalogTableStorageDescriptorSerDeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSerDeInfoArgs) ToCatalogTableStorageDescriptorSerDeInfoOutput() CatalogTableStorageDescriptorSerDeInfoOutput {
	return i.ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSerDeInfoArgs) ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSerDeInfoOutput)
}

func (i *CatalogTableStorageDescriptorSerDeInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorSerDeInfoArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorSerDeInfoOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSerDeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToCatalogTableStorageDescriptorSerDeInfoOutput() CatalogTableStorageDescriptorSerDeInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToCatalogTableStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSerDeInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSerDeInfoOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptorSerDeInfo] {
	return pulumix.Output[CatalogTableStorageDescriptorSerDeInfo]{
		OutputState: o.OutputState,
	}
}

// Name of the SerDe.
func (o CatalogTableStorageDescriptorSerDeInfoOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSerDeInfo](o, func(v CatalogTableStorageDescriptorSerDeInfo) *string { return v.Name })
}

// Map of initialization parameters for the SerDe, in key-value form.
func (o CatalogTableStorageDescriptorSerDeInfoOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptorSerDeInfo](o, func(v CatalogTableStorageDescriptorSerDeInfo) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
func (o CatalogTableStorageDescriptorSerDeInfoOutput) SerializationLibrary() pulumix.Output[*string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSerDeInfo](o, func(v CatalogTableStorageDescriptorSerDeInfo) *string { return v.SerializationLibrary })
}

type CatalogTableStorageDescriptorSkewedInfo struct {
	// List of names of columns that contain skewed values.
	SkewedColumnNames []string `pulumi:"skewedColumnNames"`
	// List of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps map[string]string `pulumi:"skewedColumnValueLocationMaps"`
	// Map of skewed values to the columns that contain them.
	SkewedColumnValues []string `pulumi:"skewedColumnValues"`
}

type CatalogTableStorageDescriptorSkewedInfoArgs struct {
	// List of names of columns that contain skewed values.
	SkewedColumnNames pulumix.Input[[]string] `pulumi:"skewedColumnNames"`
	// List of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps pulumix.Input[map[string]string] `pulumi:"skewedColumnValueLocationMaps"`
	// Map of skewed values to the columns that contain them.
	SkewedColumnValues pulumix.Input[[]string] `pulumi:"skewedColumnValues"`
}

func (CatalogTableStorageDescriptorSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSkewedInfoArgs) ToCatalogTableStorageDescriptorSkewedInfoOutput() CatalogTableStorageDescriptorSkewedInfoOutput {
	return i.ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSkewedInfoArgs) ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSkewedInfoOutput)
}

func (i *CatalogTableStorageDescriptorSkewedInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorSkewedInfoArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorSkewedInfoOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToCatalogTableStorageDescriptorSkewedInfoOutput() CatalogTableStorageDescriptorSkewedInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToCatalogTableStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSkewedInfoOutput {
	return o
}

func (o CatalogTableStorageDescriptorSkewedInfoOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptorSkewedInfo] {
	return pulumix.Output[CatalogTableStorageDescriptorSkewedInfo]{
		OutputState: o.OutputState,
	}
}

// List of names of columns that contain skewed values.
func (o CatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptorSkewedInfo](o, func(v CatalogTableStorageDescriptorSkewedInfo) []string { return v.SkewedColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of values that appear so frequently as to be considered skewed.
func (o CatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumix.MapOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptorSkewedInfo](o, func(v CatalogTableStorageDescriptorSkewedInfo) map[string]string {
		return v.SkewedColumnValueLocationMaps
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Map of skewed values to the columns that contain them.
func (o CatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CatalogTableStorageDescriptorSkewedInfo](o, func(v CatalogTableStorageDescriptorSkewedInfo) []string { return v.SkewedColumnValues })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CatalogTableStorageDescriptorSortColumn struct {
	// Name of the column.
	Column string `pulumi:"column"`
	// Whether the column is sorted in ascending (`1`) or descending order (`0`).
	SortOrder int `pulumi:"sortOrder"`
}

type CatalogTableStorageDescriptorSortColumnArgs struct {
	// Name of the column.
	Column pulumix.Input[string] `pulumi:"column"`
	// Whether the column is sorted in ascending (`1`) or descending order (`0`).
	SortOrder pulumix.Input[int] `pulumi:"sortOrder"`
}

func (CatalogTableStorageDescriptorSortColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (i CatalogTableStorageDescriptorSortColumnArgs) ToCatalogTableStorageDescriptorSortColumnOutput() CatalogTableStorageDescriptorSortColumnOutput {
	return i.ToCatalogTableStorageDescriptorSortColumnOutputWithContext(context.Background())
}

func (i CatalogTableStorageDescriptorSortColumnArgs) ToCatalogTableStorageDescriptorSortColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSortColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableStorageDescriptorSortColumnOutput)
}

func (i *CatalogTableStorageDescriptorSortColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableStorageDescriptorSortColumnArgs] {
	return pulumix.Val(i)
}

type CatalogTableStorageDescriptorSortColumnOutput struct{ *pulumi.OutputState }

func (CatalogTableStorageDescriptorSortColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (o CatalogTableStorageDescriptorSortColumnOutput) ToCatalogTableStorageDescriptorSortColumnOutput() CatalogTableStorageDescriptorSortColumnOutput {
	return o
}

func (o CatalogTableStorageDescriptorSortColumnOutput) ToCatalogTableStorageDescriptorSortColumnOutputWithContext(ctx context.Context) CatalogTableStorageDescriptorSortColumnOutput {
	return o
}

func (o CatalogTableStorageDescriptorSortColumnOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableStorageDescriptorSortColumn] {
	return pulumix.Output[CatalogTableStorageDescriptorSortColumn]{
		OutputState: o.OutputState,
	}
}

// Name of the column.
func (o CatalogTableStorageDescriptorSortColumnOutput) Column() pulumix.Output[string] {
	return pulumix.Apply[CatalogTableStorageDescriptorSortColumn](o, func(v CatalogTableStorageDescriptorSortColumn) string { return v.Column })
}

// Whether the column is sorted in ascending (`1`) or descending order (`0`).
func (o CatalogTableStorageDescriptorSortColumnOutput) SortOrder() pulumix.Output[int] {
	return pulumix.Apply[CatalogTableStorageDescriptorSortColumn](o, func(v CatalogTableStorageDescriptorSortColumn) int { return v.SortOrder })
}

type CatalogTableTargetTable struct {
	// ID of the Data Catalog in which the table resides.
	CatalogId string `pulumi:"catalogId"`
	// Name of the catalog database that contains the target table.
	DatabaseName string `pulumi:"databaseName"`
	// Name of the target table.
	Name string `pulumi:"name"`
}

type CatalogTableTargetTableArgs struct {
	// ID of the Data Catalog in which the table resides.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Name of the catalog database that contains the target table.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the target table.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (CatalogTableTargetTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableTargetTable)(nil)).Elem()
}

func (i CatalogTableTargetTableArgs) ToCatalogTableTargetTableOutput() CatalogTableTargetTableOutput {
	return i.ToCatalogTableTargetTableOutputWithContext(context.Background())
}

func (i CatalogTableTargetTableArgs) ToCatalogTableTargetTableOutputWithContext(ctx context.Context) CatalogTableTargetTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogTableTargetTableOutput)
}

func (i *CatalogTableTargetTableArgs) ToOutput(ctx context.Context) pulumix.Output[*CatalogTableTargetTableArgs] {
	return pulumix.Val(i)
}

type CatalogTableTargetTableOutput struct{ *pulumi.OutputState }

func (CatalogTableTargetTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogTableTargetTable)(nil)).Elem()
}

func (o CatalogTableTargetTableOutput) ToCatalogTableTargetTableOutput() CatalogTableTargetTableOutput {
	return o
}

func (o CatalogTableTargetTableOutput) ToCatalogTableTargetTableOutputWithContext(ctx context.Context) CatalogTableTargetTableOutput {
	return o
}

func (o CatalogTableTargetTableOutput) ToOutput(ctx context.Context) pulumix.Output[CatalogTableTargetTable] {
	return pulumix.Output[CatalogTableTargetTable]{
		OutputState: o.OutputState,
	}
}

// ID of the Data Catalog in which the table resides.
func (o CatalogTableTargetTableOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[CatalogTableTargetTable](o, func(v CatalogTableTargetTable) string { return v.CatalogId })
}

// Name of the catalog database that contains the target table.
func (o CatalogTableTargetTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[CatalogTableTargetTable](o, func(v CatalogTableTargetTable) string { return v.DatabaseName })
}

// Name of the target table.
func (o CatalogTableTargetTableOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[CatalogTableTargetTable](o, func(v CatalogTableTargetTable) string { return v.Name })
}

type ClassifierCsvClassifier struct {
	// Enables the processing of files that contain only one column.
	AllowSingleColumn *bool `pulumi:"allowSingleColumn"`
	// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
	ContainsHeader *string `pulumi:"containsHeader"`
	// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
	CustomDatatypeConfigured *bool `pulumi:"customDatatypeConfigured"`
	// A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
	CustomDatatypes []string `pulumi:"customDatatypes"`
	// The delimiter used in the Csv to separate columns.
	Delimiter *string `pulumi:"delimiter"`
	// Specifies whether to trim column values.
	DisableValueTrimming *bool `pulumi:"disableValueTrimming"`
	// A list of strings representing column names.
	Headers []string `pulumi:"headers"`
	// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
	QuoteSymbol *string `pulumi:"quoteSymbol"`
}

type ClassifierCsvClassifierArgs struct {
	// Enables the processing of files that contain only one column.
	AllowSingleColumn pulumix.Input[*bool] `pulumi:"allowSingleColumn"`
	// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
	ContainsHeader pulumix.Input[*string] `pulumi:"containsHeader"`
	// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
	CustomDatatypeConfigured pulumix.Input[*bool] `pulumi:"customDatatypeConfigured"`
	// A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
	CustomDatatypes pulumix.Input[[]string] `pulumi:"customDatatypes"`
	// The delimiter used in the Csv to separate columns.
	Delimiter pulumix.Input[*string] `pulumi:"delimiter"`
	// Specifies whether to trim column values.
	DisableValueTrimming pulumix.Input[*bool] `pulumi:"disableValueTrimming"`
	// A list of strings representing column names.
	Headers pulumix.Input[[]string] `pulumi:"headers"`
	// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
	QuoteSymbol pulumix.Input[*string] `pulumi:"quoteSymbol"`
}

func (ClassifierCsvClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierCsvClassifier)(nil)).Elem()
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput {
	return i.ToClassifierCsvClassifierOutputWithContext(context.Background())
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierOutputWithContext(ctx context.Context) ClassifierCsvClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierOutput)
}

func (i *ClassifierCsvClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassifierCsvClassifierArgs] {
	return pulumix.Val(i)
}

type ClassifierCsvClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierCsvClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierCsvClassifier)(nil)).Elem()
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput {
	return o
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierOutputWithContext(ctx context.Context) ClassifierCsvClassifierOutput {
	return o
}

func (o ClassifierCsvClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierCsvClassifier] {
	return pulumix.Output[ClassifierCsvClassifier]{
		OutputState: o.OutputState,
	}
}

// Enables the processing of files that contain only one column.
func (o ClassifierCsvClassifierOutput) AllowSingleColumn() pulumix.Output[*bool] {
	return pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) *bool { return v.AllowSingleColumn })
}

// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
func (o ClassifierCsvClassifierOutput) ContainsHeader() pulumix.Output[*string] {
	return pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) *string { return v.ContainsHeader })
}

// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
func (o ClassifierCsvClassifierOutput) CustomDatatypeConfigured() pulumix.Output[*bool] {
	return pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) *bool { return v.CustomDatatypeConfigured })
}

// A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
func (o ClassifierCsvClassifierOutput) CustomDatatypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) []string { return v.CustomDatatypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The delimiter used in the Csv to separate columns.
func (o ClassifierCsvClassifierOutput) Delimiter() pulumix.Output[*string] {
	return pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) *string { return v.Delimiter })
}

// Specifies whether to trim column values.
func (o ClassifierCsvClassifierOutput) DisableValueTrimming() pulumix.Output[*bool] {
	return pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) *bool { return v.DisableValueTrimming })
}

// A list of strings representing column names.
func (o ClassifierCsvClassifierOutput) Headers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) []string { return v.Headers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
func (o ClassifierCsvClassifierOutput) QuoteSymbol() pulumix.Output[*string] {
	return pulumix.Apply[ClassifierCsvClassifier](o, func(v ClassifierCsvClassifier) *string { return v.QuoteSymbol })
}

type ClassifierGrokClassifier struct {
	// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
	Classification string `pulumi:"classification"`
	// Custom grok patterns used by this classifier.
	CustomPatterns *string `pulumi:"customPatterns"`
	// The grok pattern used by this classifier.
	GrokPattern string `pulumi:"grokPattern"`
}

type ClassifierGrokClassifierArgs struct {
	// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
	Classification pulumix.Input[string] `pulumi:"classification"`
	// Custom grok patterns used by this classifier.
	CustomPatterns pulumix.Input[*string] `pulumi:"customPatterns"`
	// The grok pattern used by this classifier.
	GrokPattern pulumix.Input[string] `pulumi:"grokPattern"`
}

func (ClassifierGrokClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return i.ToClassifierGrokClassifierOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput)
}

func (i *ClassifierGrokClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassifierGrokClassifierArgs] {
	return pulumix.Val(i)
}

type ClassifierGrokClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierGrokClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierGrokClassifier] {
	return pulumix.Output[ClassifierGrokClassifier]{
		OutputState: o.OutputState,
	}
}

// An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
func (o ClassifierGrokClassifierOutput) Classification() pulumix.Output[string] {
	return pulumix.Apply[ClassifierGrokClassifier](o, func(v ClassifierGrokClassifier) string { return v.Classification })
}

// Custom grok patterns used by this classifier.
func (o ClassifierGrokClassifierOutput) CustomPatterns() pulumix.Output[*string] {
	return pulumix.Apply[ClassifierGrokClassifier](o, func(v ClassifierGrokClassifier) *string { return v.CustomPatterns })
}

// The grok pattern used by this classifier.
func (o ClassifierGrokClassifierOutput) GrokPattern() pulumix.Output[string] {
	return pulumix.Apply[ClassifierGrokClassifier](o, func(v ClassifierGrokClassifier) string { return v.GrokPattern })
}

type ClassifierJsonClassifier struct {
	// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
	JsonPath string `pulumi:"jsonPath"`
}

type ClassifierJsonClassifierArgs struct {
	// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
	JsonPath pulumix.Input[string] `pulumi:"jsonPath"`
}

func (ClassifierJsonClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierJsonClassifier)(nil)).Elem()
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput {
	return i.ToClassifierJsonClassifierOutputWithContext(context.Background())
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierOutputWithContext(ctx context.Context) ClassifierJsonClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierOutput)
}

func (i *ClassifierJsonClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassifierJsonClassifierArgs] {
	return pulumix.Val(i)
}

type ClassifierJsonClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierJsonClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierJsonClassifier)(nil)).Elem()
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput {
	return o
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierOutputWithContext(ctx context.Context) ClassifierJsonClassifierOutput {
	return o
}

func (o ClassifierJsonClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierJsonClassifier] {
	return pulumix.Output[ClassifierJsonClassifier]{
		OutputState: o.OutputState,
	}
}

// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
func (o ClassifierJsonClassifierOutput) JsonPath() pulumix.Output[string] {
	return pulumix.Apply[ClassifierJsonClassifier](o, func(v ClassifierJsonClassifier) string { return v.JsonPath })
}

type ClassifierXmlClassifier struct {
	// An identifier of the data format that the classifier matches.
	Classification string `pulumi:"classification"`
	// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
	RowTag string `pulumi:"rowTag"`
}

type ClassifierXmlClassifierArgs struct {
	// An identifier of the data format that the classifier matches.
	Classification pulumix.Input[string] `pulumi:"classification"`
	// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
	RowTag pulumix.Input[string] `pulumi:"rowTag"`
}

func (ClassifierXmlClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return i.ToClassifierXmlClassifierOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput)
}

func (i *ClassifierXmlClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[*ClassifierXmlClassifierArgs] {
	return pulumix.Val(i)
}

type ClassifierXmlClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierXmlClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierXmlClassifier] {
	return pulumix.Output[ClassifierXmlClassifier]{
		OutputState: o.OutputState,
	}
}

// An identifier of the data format that the classifier matches.
func (o ClassifierXmlClassifierOutput) Classification() pulumix.Output[string] {
	return pulumix.Apply[ClassifierXmlClassifier](o, func(v ClassifierXmlClassifier) string { return v.Classification })
}

// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
func (o ClassifierXmlClassifierOutput) RowTag() pulumix.Output[string] {
	return pulumix.Apply[ClassifierXmlClassifier](o, func(v ClassifierXmlClassifier) string { return v.RowTag })
}

type ConnectionPhysicalConnectionRequirements struct {
	// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The security group ID list used by the connection.
	SecurityGroupIdLists []string `pulumi:"securityGroupIdLists"`
	// The subnet ID used by the connection.
	SubnetId *string `pulumi:"subnetId"`
}

type ConnectionPhysicalConnectionRequirementsArgs struct {
	// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// The security group ID list used by the connection.
	SecurityGroupIdLists pulumix.Input[[]string] `pulumi:"securityGroupIdLists"`
	// The subnet ID used by the connection.
	SubnetId pulumix.Input[*string] `pulumi:"subnetId"`
}

func (ConnectionPhysicalConnectionRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput {
	return i.ToConnectionPhysicalConnectionRequirementsOutputWithContext(context.Background())
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsOutput)
}

func (i *ConnectionPhysicalConnectionRequirementsArgs) ToOutput(ctx context.Context) pulumix.Output[*ConnectionPhysicalConnectionRequirementsArgs] {
	return pulumix.Val(i)
}

type ConnectionPhysicalConnectionRequirementsOutput struct{ *pulumi.OutputState }

func (ConnectionPhysicalConnectionRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionPhysicalConnectionRequirements] {
	return pulumix.Output[ConnectionPhysicalConnectionRequirements]{
		OutputState: o.OutputState,
	}
}

// The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
func (o ConnectionPhysicalConnectionRequirementsOutput) AvailabilityZone() pulumix.Output[*string] {
	return pulumix.Apply[ConnectionPhysicalConnectionRequirements](o, func(v ConnectionPhysicalConnectionRequirements) *string { return v.AvailabilityZone })
}

// The security group ID list used by the connection.
func (o ConnectionPhysicalConnectionRequirementsOutput) SecurityGroupIdLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ConnectionPhysicalConnectionRequirements](o, func(v ConnectionPhysicalConnectionRequirements) []string { return v.SecurityGroupIdLists })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The subnet ID used by the connection.
func (o ConnectionPhysicalConnectionRequirementsOutput) SubnetId() pulumix.Output[*string] {
	return pulumix.Apply[ConnectionPhysicalConnectionRequirements](o, func(v ConnectionPhysicalConnectionRequirements) *string { return v.SubnetId })
}

type CrawlerCatalogTarget struct {
	// The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a `NETWORK` Connection type.
	ConnectionName *string `pulumi:"connectionName"`
	// The name of the Glue database to be synchronized.
	DatabaseName string `pulumi:"databaseName"`
	// A valid Amazon SQS ARN.
	//
	// > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
	//
	// > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
	DlqEventQueueArn *string `pulumi:"dlqEventQueueArn"`
	// A valid Amazon SQS ARN.
	EventQueueArn *string `pulumi:"eventQueueArn"`
	// A list of catalog tables to be synchronized.
	Tables []string `pulumi:"tables"`
}

type CrawlerCatalogTargetArgs struct {
	// The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a `NETWORK` Connection type.
	ConnectionName pulumix.Input[*string] `pulumi:"connectionName"`
	// The name of the Glue database to be synchronized.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// A valid Amazon SQS ARN.
	//
	// > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
	//
	// > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
	DlqEventQueueArn pulumix.Input[*string] `pulumi:"dlqEventQueueArn"`
	// A valid Amazon SQS ARN.
	EventQueueArn pulumix.Input[*string] `pulumi:"eventQueueArn"`
	// A list of catalog tables to be synchronized.
	Tables pulumix.Input[[]string] `pulumi:"tables"`
}

func (CrawlerCatalogTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return i.ToCrawlerCatalogTargetOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetOutput)
}

func (i *CrawlerCatalogTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerCatalogTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerCatalogTargetOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return o
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return o
}

func (o CrawlerCatalogTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerCatalogTarget] {
	return pulumix.Output[CrawlerCatalogTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a `NETWORK` Connection type.
func (o CrawlerCatalogTargetOutput) ConnectionName() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerCatalogTarget](o, func(v CrawlerCatalogTarget) *string { return v.ConnectionName })
}

// The name of the Glue database to be synchronized.
func (o CrawlerCatalogTargetOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[CrawlerCatalogTarget](o, func(v CrawlerCatalogTarget) string { return v.DatabaseName })
}

// A valid Amazon SQS ARN.
//
// > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
//
// > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
func (o CrawlerCatalogTargetOutput) DlqEventQueueArn() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerCatalogTarget](o, func(v CrawlerCatalogTarget) *string { return v.DlqEventQueueArn })
}

// A valid Amazon SQS ARN.
func (o CrawlerCatalogTargetOutput) EventQueueArn() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerCatalogTarget](o, func(v CrawlerCatalogTarget) *string { return v.EventQueueArn })
}

// A list of catalog tables to be synchronized.
func (o CrawlerCatalogTargetOutput) Tables() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerCatalogTarget](o, func(v CrawlerCatalogTarget) []string { return v.Tables })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CrawlerDeltaTarget struct {
	// The name of the connection to use to connect to the Delta table target.
	ConnectionName *string `pulumi:"connectionName"`
	// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
	CreateNativeDeltaTable *bool `pulumi:"createNativeDeltaTable"`
	// A list of the Amazon S3 paths to the Delta tables.
	DeltaTables []string `pulumi:"deltaTables"`
	// Specifies whether to write the manifest files to the Delta table path.
	WriteManifest bool `pulumi:"writeManifest"`
}

type CrawlerDeltaTargetArgs struct {
	// The name of the connection to use to connect to the Delta table target.
	ConnectionName pulumix.Input[*string] `pulumi:"connectionName"`
	// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
	CreateNativeDeltaTable pulumix.Input[*bool] `pulumi:"createNativeDeltaTable"`
	// A list of the Amazon S3 paths to the Delta tables.
	DeltaTables pulumix.Input[[]string] `pulumi:"deltaTables"`
	// Specifies whether to write the manifest files to the Delta table path.
	WriteManifest pulumix.Input[bool] `pulumi:"writeManifest"`
}

func (CrawlerDeltaTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDeltaTarget)(nil)).Elem()
}

func (i CrawlerDeltaTargetArgs) ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput {
	return i.ToCrawlerDeltaTargetOutputWithContext(context.Background())
}

func (i CrawlerDeltaTargetArgs) ToCrawlerDeltaTargetOutputWithContext(ctx context.Context) CrawlerDeltaTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDeltaTargetOutput)
}

func (i *CrawlerDeltaTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerDeltaTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerDeltaTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDeltaTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDeltaTarget)(nil)).Elem()
}

func (o CrawlerDeltaTargetOutput) ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput {
	return o
}

func (o CrawlerDeltaTargetOutput) ToCrawlerDeltaTargetOutputWithContext(ctx context.Context) CrawlerDeltaTargetOutput {
	return o
}

func (o CrawlerDeltaTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerDeltaTarget] {
	return pulumix.Output[CrawlerDeltaTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the connection to use to connect to the Delta table target.
func (o CrawlerDeltaTargetOutput) ConnectionName() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerDeltaTarget](o, func(v CrawlerDeltaTarget) *string { return v.ConnectionName })
}

// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
func (o CrawlerDeltaTargetOutput) CreateNativeDeltaTable() pulumix.Output[*bool] {
	return pulumix.Apply[CrawlerDeltaTarget](o, func(v CrawlerDeltaTarget) *bool { return v.CreateNativeDeltaTable })
}

// A list of the Amazon S3 paths to the Delta tables.
func (o CrawlerDeltaTargetOutput) DeltaTables() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerDeltaTarget](o, func(v CrawlerDeltaTarget) []string { return v.DeltaTables })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies whether to write the manifest files to the Delta table path.
func (o CrawlerDeltaTargetOutput) WriteManifest() pulumix.Output[bool] {
	return pulumix.Apply[CrawlerDeltaTarget](o, func(v CrawlerDeltaTarget) bool { return v.WriteManifest })
}

type CrawlerDynamodbTarget struct {
	// The name of the DynamoDB table to crawl.
	Path string `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
	ScanAll *bool `pulumi:"scanAll"`
	// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
	ScanRate *float64 `pulumi:"scanRate"`
}

type CrawlerDynamodbTargetArgs struct {
	// The name of the DynamoDB table to crawl.
	Path pulumix.Input[string] `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
	ScanAll pulumix.Input[*bool] `pulumi:"scanAll"`
	// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
	ScanRate pulumix.Input[*float64] `pulumi:"scanRate"`
}

func (CrawlerDynamodbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamodbTarget)(nil)).Elem()
}

func (i CrawlerDynamodbTargetArgs) ToCrawlerDynamodbTargetOutput() CrawlerDynamodbTargetOutput {
	return i.ToCrawlerDynamodbTargetOutputWithContext(context.Background())
}

func (i CrawlerDynamodbTargetArgs) ToCrawlerDynamodbTargetOutputWithContext(ctx context.Context) CrawlerDynamodbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamodbTargetOutput)
}

func (i *CrawlerDynamodbTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerDynamodbTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerDynamodbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDynamodbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamodbTarget)(nil)).Elem()
}

func (o CrawlerDynamodbTargetOutput) ToCrawlerDynamodbTargetOutput() CrawlerDynamodbTargetOutput {
	return o
}

func (o CrawlerDynamodbTargetOutput) ToCrawlerDynamodbTargetOutputWithContext(ctx context.Context) CrawlerDynamodbTargetOutput {
	return o
}

func (o CrawlerDynamodbTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerDynamodbTarget] {
	return pulumix.Output[CrawlerDynamodbTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the DynamoDB table to crawl.
func (o CrawlerDynamodbTargetOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[CrawlerDynamodbTarget](o, func(v CrawlerDynamodbTarget) string { return v.Path })
}

// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
func (o CrawlerDynamodbTargetOutput) ScanAll() pulumix.Output[*bool] {
	return pulumix.Apply[CrawlerDynamodbTarget](o, func(v CrawlerDynamodbTarget) *bool { return v.ScanAll })
}

// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
func (o CrawlerDynamodbTargetOutput) ScanRate() pulumix.Output[*float64] {
	return pulumix.Apply[CrawlerDynamodbTarget](o, func(v CrawlerDynamodbTarget) *float64 { return v.ScanRate })
}

type CrawlerHudiTarget struct {
	// The name of the connection to use to connect to the Hudi target.
	ConnectionName *string `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Hudi metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
	MaximumTraversalDepth int `pulumi:"maximumTraversalDepth"`
	// One or more Amazon S3 paths that contains Hudi metadata folders as s3://bucket/prefix.
	Paths []string `pulumi:"paths"`
}

type CrawlerHudiTargetArgs struct {
	// The name of the connection to use to connect to the Hudi target.
	ConnectionName pulumix.Input[*string] `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumix.Input[[]string] `pulumi:"exclusions"`
	// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Hudi metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
	MaximumTraversalDepth pulumix.Input[int] `pulumi:"maximumTraversalDepth"`
	// One or more Amazon S3 paths that contains Hudi metadata folders as s3://bucket/prefix.
	Paths pulumix.Input[[]string] `pulumi:"paths"`
}

func (CrawlerHudiTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerHudiTarget)(nil)).Elem()
}

func (i CrawlerHudiTargetArgs) ToCrawlerHudiTargetOutput() CrawlerHudiTargetOutput {
	return i.ToCrawlerHudiTargetOutputWithContext(context.Background())
}

func (i CrawlerHudiTargetArgs) ToCrawlerHudiTargetOutputWithContext(ctx context.Context) CrawlerHudiTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerHudiTargetOutput)
}

func (i *CrawlerHudiTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerHudiTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerHudiTargetOutput struct{ *pulumi.OutputState }

func (CrawlerHudiTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerHudiTarget)(nil)).Elem()
}

func (o CrawlerHudiTargetOutput) ToCrawlerHudiTargetOutput() CrawlerHudiTargetOutput {
	return o
}

func (o CrawlerHudiTargetOutput) ToCrawlerHudiTargetOutputWithContext(ctx context.Context) CrawlerHudiTargetOutput {
	return o
}

func (o CrawlerHudiTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerHudiTarget] {
	return pulumix.Output[CrawlerHudiTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the connection to use to connect to the Hudi target.
func (o CrawlerHudiTargetOutput) ConnectionName() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerHudiTarget](o, func(v CrawlerHudiTarget) *string { return v.ConnectionName })
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerHudiTargetOutput) Exclusions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerHudiTarget](o, func(v CrawlerHudiTarget) []string { return v.Exclusions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Hudi metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
func (o CrawlerHudiTargetOutput) MaximumTraversalDepth() pulumix.Output[int] {
	return pulumix.Apply[CrawlerHudiTarget](o, func(v CrawlerHudiTarget) int { return v.MaximumTraversalDepth })
}

// One or more Amazon S3 paths that contains Hudi metadata folders as s3://bucket/prefix.
func (o CrawlerHudiTargetOutput) Paths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerHudiTarget](o, func(v CrawlerHudiTarget) []string { return v.Paths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CrawlerIcebergTarget struct {
	// The name of the connection to use to connect to the Iceberg target.
	ConnectionName *string `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
	MaximumTraversalDepth int `pulumi:"maximumTraversalDepth"`
	// One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix.
	Paths []string `pulumi:"paths"`
}

type CrawlerIcebergTargetArgs struct {
	// The name of the connection to use to connect to the Iceberg target.
	ConnectionName pulumix.Input[*string] `pulumi:"connectionName"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumix.Input[[]string] `pulumi:"exclusions"`
	// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
	MaximumTraversalDepth pulumix.Input[int] `pulumi:"maximumTraversalDepth"`
	// One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix.
	Paths pulumix.Input[[]string] `pulumi:"paths"`
}

func (CrawlerIcebergTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerIcebergTarget)(nil)).Elem()
}

func (i CrawlerIcebergTargetArgs) ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput {
	return i.ToCrawlerIcebergTargetOutputWithContext(context.Background())
}

func (i CrawlerIcebergTargetArgs) ToCrawlerIcebergTargetOutputWithContext(ctx context.Context) CrawlerIcebergTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerIcebergTargetOutput)
}

func (i *CrawlerIcebergTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerIcebergTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerIcebergTargetOutput struct{ *pulumi.OutputState }

func (CrawlerIcebergTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerIcebergTarget)(nil)).Elem()
}

func (o CrawlerIcebergTargetOutput) ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput {
	return o
}

func (o CrawlerIcebergTargetOutput) ToCrawlerIcebergTargetOutputWithContext(ctx context.Context) CrawlerIcebergTargetOutput {
	return o
}

func (o CrawlerIcebergTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerIcebergTarget] {
	return pulumix.Output[CrawlerIcebergTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the connection to use to connect to the Iceberg target.
func (o CrawlerIcebergTargetOutput) ConnectionName() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerIcebergTarget](o, func(v CrawlerIcebergTarget) *string { return v.ConnectionName })
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerIcebergTargetOutput) Exclusions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerIcebergTarget](o, func(v CrawlerIcebergTarget) []string { return v.Exclusions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
func (o CrawlerIcebergTargetOutput) MaximumTraversalDepth() pulumix.Output[int] {
	return pulumix.Apply[CrawlerIcebergTarget](o, func(v CrawlerIcebergTarget) int { return v.MaximumTraversalDepth })
}

// One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix.
func (o CrawlerIcebergTargetOutput) Paths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerIcebergTarget](o, func(v CrawlerIcebergTarget) []string { return v.Paths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type CrawlerJdbcTarget struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName string `pulumi:"connectionName"`
	// Specify a value of `RAWTYPES` or `COMMENTS` to enable additional metadata intable responses. `RAWTYPES` provides the native-level datatype. `COMMENTS` provides comments associated with a column or table in the database.
	EnableAdditionalMetadatas []string `pulumi:"enableAdditionalMetadatas"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The path of the JDBC target.
	Path string `pulumi:"path"`
}

type CrawlerJdbcTargetArgs struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName pulumix.Input[string] `pulumi:"connectionName"`
	// Specify a value of `RAWTYPES` or `COMMENTS` to enable additional metadata intable responses. `RAWTYPES` provides the native-level datatype. `COMMENTS` provides comments associated with a column or table in the database.
	EnableAdditionalMetadatas pulumix.Input[[]string] `pulumi:"enableAdditionalMetadatas"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumix.Input[[]string] `pulumi:"exclusions"`
	// The path of the JDBC target.
	Path pulumix.Input[string] `pulumi:"path"`
}

func (CrawlerJdbcTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return i.ToCrawlerJdbcTargetOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetOutput)
}

func (i *CrawlerJdbcTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerJdbcTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerJdbcTargetOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerJdbcTarget] {
	return pulumix.Output[CrawlerJdbcTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the connection to use to connect to the JDBC target.
func (o CrawlerJdbcTargetOutput) ConnectionName() pulumix.Output[string] {
	return pulumix.Apply[CrawlerJdbcTarget](o, func(v CrawlerJdbcTarget) string { return v.ConnectionName })
}

// Specify a value of `RAWTYPES` or `COMMENTS` to enable additional metadata intable responses. `RAWTYPES` provides the native-level datatype. `COMMENTS` provides comments associated with a column or table in the database.
func (o CrawlerJdbcTargetOutput) EnableAdditionalMetadatas() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerJdbcTarget](o, func(v CrawlerJdbcTarget) []string { return v.EnableAdditionalMetadatas })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerJdbcTargetOutput) Exclusions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerJdbcTarget](o, func(v CrawlerJdbcTarget) []string { return v.Exclusions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The path of the JDBC target.
func (o CrawlerJdbcTargetOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[CrawlerJdbcTarget](o, func(v CrawlerJdbcTarget) string { return v.Path })
}

type CrawlerLakeFormationConfiguration struct {
	// Required for cross account crawls. For same account crawls as the target data, this can omitted.
	AccountId *string `pulumi:"accountId"`
	// Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
	UseLakeFormationCredentials *bool `pulumi:"useLakeFormationCredentials"`
}

type CrawlerLakeFormationConfigurationArgs struct {
	// Required for cross account crawls. For same account crawls as the target data, this can omitted.
	AccountId pulumix.Input[*string] `pulumi:"accountId"`
	// Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
	UseLakeFormationCredentials pulumix.Input[*bool] `pulumi:"useLakeFormationCredentials"`
}

func (CrawlerLakeFormationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerLakeFormationConfiguration)(nil)).Elem()
}

func (i CrawlerLakeFormationConfigurationArgs) ToCrawlerLakeFormationConfigurationOutput() CrawlerLakeFormationConfigurationOutput {
	return i.ToCrawlerLakeFormationConfigurationOutputWithContext(context.Background())
}

func (i CrawlerLakeFormationConfigurationArgs) ToCrawlerLakeFormationConfigurationOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerLakeFormationConfigurationOutput)
}

func (i *CrawlerLakeFormationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerLakeFormationConfigurationArgs] {
	return pulumix.Val(i)
}

type CrawlerLakeFormationConfigurationOutput struct{ *pulumi.OutputState }

func (CrawlerLakeFormationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerLakeFormationConfiguration)(nil)).Elem()
}

func (o CrawlerLakeFormationConfigurationOutput) ToCrawlerLakeFormationConfigurationOutput() CrawlerLakeFormationConfigurationOutput {
	return o
}

func (o CrawlerLakeFormationConfigurationOutput) ToCrawlerLakeFormationConfigurationOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationOutput {
	return o
}

func (o CrawlerLakeFormationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerLakeFormationConfiguration] {
	return pulumix.Output[CrawlerLakeFormationConfiguration]{
		OutputState: o.OutputState,
	}
}

// Required for cross account crawls. For same account crawls as the target data, this can omitted.
func (o CrawlerLakeFormationConfigurationOutput) AccountId() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerLakeFormationConfiguration](o, func(v CrawlerLakeFormationConfiguration) *string { return v.AccountId })
}

// Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
func (o CrawlerLakeFormationConfigurationOutput) UseLakeFormationCredentials() pulumix.Output[*bool] {
	return pulumix.Apply[CrawlerLakeFormationConfiguration](o, func(v CrawlerLakeFormationConfiguration) *bool { return v.UseLakeFormationCredentials })
}

type CrawlerLineageConfiguration struct {
	// Specifies whether data lineage is enabled for the crawler. Valid values are: `ENABLE` and `DISABLE`. Default value is `DISABLE`.
	CrawlerLineageSettings *string `pulumi:"crawlerLineageSettings"`
}

type CrawlerLineageConfigurationArgs struct {
	// Specifies whether data lineage is enabled for the crawler. Valid values are: `ENABLE` and `DISABLE`. Default value is `DISABLE`.
	CrawlerLineageSettings pulumix.Input[*string] `pulumi:"crawlerLineageSettings"`
}

func (CrawlerLineageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerLineageConfiguration)(nil)).Elem()
}

func (i CrawlerLineageConfigurationArgs) ToCrawlerLineageConfigurationOutput() CrawlerLineageConfigurationOutput {
	return i.ToCrawlerLineageConfigurationOutputWithContext(context.Background())
}

func (i CrawlerLineageConfigurationArgs) ToCrawlerLineageConfigurationOutputWithContext(ctx context.Context) CrawlerLineageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerLineageConfigurationOutput)
}

func (i *CrawlerLineageConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerLineageConfigurationArgs] {
	return pulumix.Val(i)
}

type CrawlerLineageConfigurationOutput struct{ *pulumi.OutputState }

func (CrawlerLineageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerLineageConfiguration)(nil)).Elem()
}

func (o CrawlerLineageConfigurationOutput) ToCrawlerLineageConfigurationOutput() CrawlerLineageConfigurationOutput {
	return o
}

func (o CrawlerLineageConfigurationOutput) ToCrawlerLineageConfigurationOutputWithContext(ctx context.Context) CrawlerLineageConfigurationOutput {
	return o
}

func (o CrawlerLineageConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerLineageConfiguration] {
	return pulumix.Output[CrawlerLineageConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether data lineage is enabled for the crawler. Valid values are: `ENABLE` and `DISABLE`. Default value is `DISABLE`.
func (o CrawlerLineageConfigurationOutput) CrawlerLineageSettings() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerLineageConfiguration](o, func(v CrawlerLineageConfiguration) *string { return v.CrawlerLineageSettings })
}

type CrawlerMongodbTarget struct {
	// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
	ConnectionName string `pulumi:"connectionName"`
	// The path of the Amazon DocumentDB or MongoDB target (database/collection).
	Path string `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
	ScanAll *bool `pulumi:"scanAll"`
}

type CrawlerMongodbTargetArgs struct {
	// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
	ConnectionName pulumix.Input[string] `pulumi:"connectionName"`
	// The path of the Amazon DocumentDB or MongoDB target (database/collection).
	Path pulumix.Input[string] `pulumi:"path"`
	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
	ScanAll pulumix.Input[*bool] `pulumi:"scanAll"`
}

func (CrawlerMongodbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongodbTarget)(nil)).Elem()
}

func (i CrawlerMongodbTargetArgs) ToCrawlerMongodbTargetOutput() CrawlerMongodbTargetOutput {
	return i.ToCrawlerMongodbTargetOutputWithContext(context.Background())
}

func (i CrawlerMongodbTargetArgs) ToCrawlerMongodbTargetOutputWithContext(ctx context.Context) CrawlerMongodbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongodbTargetOutput)
}

func (i *CrawlerMongodbTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerMongodbTargetArgs] {
	return pulumix.Val(i)
}

type CrawlerMongodbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerMongodbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongodbTarget)(nil)).Elem()
}

func (o CrawlerMongodbTargetOutput) ToCrawlerMongodbTargetOutput() CrawlerMongodbTargetOutput {
	return o
}

func (o CrawlerMongodbTargetOutput) ToCrawlerMongodbTargetOutputWithContext(ctx context.Context) CrawlerMongodbTargetOutput {
	return o
}

func (o CrawlerMongodbTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerMongodbTarget] {
	return pulumix.Output[CrawlerMongodbTarget]{
		OutputState: o.OutputState,
	}
}

// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
func (o CrawlerMongodbTargetOutput) ConnectionName() pulumix.Output[string] {
	return pulumix.Apply[CrawlerMongodbTarget](o, func(v CrawlerMongodbTarget) string { return v.ConnectionName })
}

// The path of the Amazon DocumentDB or MongoDB target (database/collection).
func (o CrawlerMongodbTargetOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[CrawlerMongodbTarget](o, func(v CrawlerMongodbTarget) string { return v.Path })
}

// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
func (o CrawlerMongodbTargetOutput) ScanAll() pulumix.Output[*bool] {
	return pulumix.Apply[CrawlerMongodbTarget](o, func(v CrawlerMongodbTarget) *bool { return v.ScanAll })
}

type CrawlerRecrawlPolicy struct {
	// Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: `CRAWL_EVENT_MODE`, `CRAWL_EVERYTHING` and `CRAWL_NEW_FOLDERS_ONLY`. Default value is `CRAWL_EVERYTHING`.
	RecrawlBehavior *string `pulumi:"recrawlBehavior"`
}

type CrawlerRecrawlPolicyArgs struct {
	// Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: `CRAWL_EVENT_MODE`, `CRAWL_EVERYTHING` and `CRAWL_NEW_FOLDERS_ONLY`. Default value is `CRAWL_EVERYTHING`.
	RecrawlBehavior pulumix.Input[*string] `pulumi:"recrawlBehavior"`
}

func (CrawlerRecrawlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerRecrawlPolicy)(nil)).Elem()
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput {
	return i.ToCrawlerRecrawlPolicyOutputWithContext(context.Background())
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyOutput)
}

func (i *CrawlerRecrawlPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerRecrawlPolicyArgs] {
	return pulumix.Val(i)
}

type CrawlerRecrawlPolicyOutput struct{ *pulumi.OutputState }

func (CrawlerRecrawlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerRecrawlPolicy)(nil)).Elem()
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput {
	return o
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyOutput {
	return o
}

func (o CrawlerRecrawlPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerRecrawlPolicy] {
	return pulumix.Output[CrawlerRecrawlPolicy]{
		OutputState: o.OutputState,
	}
}

// Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: `CRAWL_EVENT_MODE`, `CRAWL_EVERYTHING` and `CRAWL_NEW_FOLDERS_ONLY`. Default value is `CRAWL_EVERYTHING`.
func (o CrawlerRecrawlPolicyOutput) RecrawlBehavior() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerRecrawlPolicy](o, func(v CrawlerRecrawlPolicy) *string { return v.RecrawlBehavior })
}

type CrawlerS3Target struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName *string `pulumi:"connectionName"`
	// The ARN of the dead-letter SQS queue.
	//
	// > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
	//
	// > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
	DlqEventQueueArn *string `pulumi:"dlqEventQueueArn"`
	// The ARN of the SQS queue to receive S3 notifications from.
	EventQueueArn *string `pulumi:"eventQueueArn"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The name of the DynamoDB table to crawl.
	Path string `pulumi:"path"`
	// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
	SampleSize *int `pulumi:"sampleSize"`
}

type CrawlerS3TargetArgs struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName pulumix.Input[*string] `pulumi:"connectionName"`
	// The ARN of the dead-letter SQS queue.
	//
	// > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
	//
	// > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
	DlqEventQueueArn pulumix.Input[*string] `pulumi:"dlqEventQueueArn"`
	// The ARN of the SQS queue to receive S3 notifications from.
	EventQueueArn pulumix.Input[*string] `pulumi:"eventQueueArn"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumix.Input[[]string] `pulumi:"exclusions"`
	// The name of the DynamoDB table to crawl.
	Path pulumix.Input[string] `pulumi:"path"`
	// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
	SampleSize pulumix.Input[*int] `pulumi:"sampleSize"`
}

func (CrawlerS3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return i.ToCrawlerS3TargetOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetOutput)
}

func (i *CrawlerS3TargetArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerS3TargetArgs] {
	return pulumix.Val(i)
}

type CrawlerS3TargetOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return o
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return o
}

func (o CrawlerS3TargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerS3Target] {
	return pulumix.Output[CrawlerS3Target]{
		OutputState: o.OutputState,
	}
}

// The name of the connection to use to connect to the JDBC target.
func (o CrawlerS3TargetOutput) ConnectionName() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerS3Target](o, func(v CrawlerS3Target) *string { return v.ConnectionName })
}

// The ARN of the dead-letter SQS queue.
//
// > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
//
// > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
func (o CrawlerS3TargetOutput) DlqEventQueueArn() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerS3Target](o, func(v CrawlerS3Target) *string { return v.DlqEventQueueArn })
}

// The ARN of the SQS queue to receive S3 notifications from.
func (o CrawlerS3TargetOutput) EventQueueArn() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerS3Target](o, func(v CrawlerS3Target) *string { return v.EventQueueArn })
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerS3TargetOutput) Exclusions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CrawlerS3Target](o, func(v CrawlerS3Target) []string { return v.Exclusions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The name of the DynamoDB table to crawl.
func (o CrawlerS3TargetOutput) Path() pulumix.Output[string] {
	return pulumix.Apply[CrawlerS3Target](o, func(v CrawlerS3Target) string { return v.Path })
}

// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
func (o CrawlerS3TargetOutput) SampleSize() pulumix.Output[*int] {
	return pulumix.Apply[CrawlerS3Target](o, func(v CrawlerS3Target) *int { return v.SampleSize })
}

type CrawlerSchemaChangePolicy struct {
	// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
	DeleteBehavior *string `pulumi:"deleteBehavior"`
	// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
	UpdateBehavior *string `pulumi:"updateBehavior"`
}

type CrawlerSchemaChangePolicyArgs struct {
	// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
	DeleteBehavior pulumix.Input[*string] `pulumi:"deleteBehavior"`
	// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
	UpdateBehavior pulumix.Input[*string] `pulumi:"updateBehavior"`
}

func (CrawlerSchemaChangePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return i.ToCrawlerSchemaChangePolicyOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput)
}

func (i *CrawlerSchemaChangePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*CrawlerSchemaChangePolicyArgs] {
	return pulumix.Val(i)
}

type CrawlerSchemaChangePolicyOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerSchemaChangePolicy] {
	return pulumix.Output[CrawlerSchemaChangePolicy]{
		OutputState: o.OutputState,
	}
}

// The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
func (o CrawlerSchemaChangePolicyOutput) DeleteBehavior() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerSchemaChangePolicy](o, func(v CrawlerSchemaChangePolicy) *string { return v.DeleteBehavior })
}

// The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
func (o CrawlerSchemaChangePolicyOutput) UpdateBehavior() pulumix.Output[*string] {
	return pulumix.Apply[CrawlerSchemaChangePolicy](o, func(v CrawlerSchemaChangePolicy) *string { return v.UpdateBehavior })
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettings struct {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	ConnectionPasswordEncryption DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption `pulumi:"connectionPasswordEncryption"`
	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	EncryptionAtRest DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest `pulumi:"encryptionAtRest"`
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs struct {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	ConnectionPasswordEncryption pulumix.Input[*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs] `pulumi:"connectionPasswordEncryption"`
	// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	EncryptionAtRest pulumix.Input[*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs] `pulumi:"encryptionAtRest"`
}

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettings)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput)
}

func (i *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsArgs] {
	return pulumix.Val(i)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettings)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsDataCatalogEncryptionSettings] {
	return pulumix.Output[DataCatalogEncryptionSettingsDataCatalogEncryptionSettings]{
		OutputState: o.OutputState,
	}
}

// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) ConnectionPasswordEncryption() pulumix.GPtrOutput[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput] {
	value := pulumix.Apply[DataCatalogEncryptionSettingsDataCatalogEncryptionSettings](o, func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
		return v.ConnectionPasswordEncryption
	})
	return pulumix.GPtrOutput[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput]{OutputState: value.OutputState}
}

// Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput) EncryptionAtRest() pulumix.GPtrOutput[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput] {
	value := pulumix.Apply[DataCatalogEncryptionSettingsDataCatalogEncryptionSettings](o, func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettings) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
		return v.EncryptionAtRest
	})
	return pulumix.GPtrOutput[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest, DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput]{OutputState: value.OutputState}
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption struct {
	// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
	AwsKmsKeyId *string `pulumi:"awsKmsKeyId"`
	// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	ReturnConnectionPasswordEncrypted bool `pulumi:"returnConnectionPasswordEncrypted"`
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs struct {
	// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
	AwsKmsKeyId pulumix.Input[*string] `pulumi:"awsKmsKeyId"`
	// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	ReturnConnectionPasswordEncrypted pulumix.Input[bool] `pulumi:"returnConnectionPasswordEncrypted"`
}

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput)
}

func (i *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs] {
	return pulumix.Val(i)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption] {
	return pulumix.Output[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption]{
		OutputState: o.OutputState,
	}
}

// A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) AwsKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption](o, func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) *string {
		return v.AwsKmsKeyId
	})
}

// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ReturnConnectionPasswordEncrypted() pulumix.Output[bool] {
	return pulumix.Apply[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption](o, func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption) bool {
		return v.ReturnConnectionPasswordEncrypted
	})
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest struct {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
	CatalogEncryptionMode string `pulumi:"catalogEncryptionMode"`
	// The ARN of the AWS KMS key to use for encryption at rest.
	SseAwsKmsKeyId *string `pulumi:"sseAwsKmsKeyId"`
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs struct {
	// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
	CatalogEncryptionMode pulumix.Input[string] `pulumi:"catalogEncryptionMode"`
	// The ARN of the AWS KMS key to use for encryption at rest.
	SseAwsKmsKeyId pulumix.Input[*string] `pulumi:"sseAwsKmsKeyId"`
}

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return i.ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput)
}

func (i *DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestArgs] {
	return pulumix.Val(i)
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o
}

func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest] {
	return pulumix.Output[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

// The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) CatalogEncryptionMode() pulumix.Output[string] {
	return pulumix.Apply[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest](o, func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) string {
		return v.CatalogEncryptionMode
	})
}

// The ARN of the AWS KMS key to use for encryption at rest.
func (o DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput) SseAwsKmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest](o, func(v DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest) *string {
		return v.SseAwsKmsKeyId
	})
}

type DataQualityRulesetTargetTable struct {
	// The catalog id where the AWS Glue table exists.
	CatalogId *string `pulumi:"catalogId"`
	// Name of the database where the AWS Glue table exists.
	DatabaseName string `pulumi:"databaseName"`
	// Name of the AWS Glue table.
	TableName string `pulumi:"tableName"`
}

type DataQualityRulesetTargetTableArgs struct {
	// The catalog id where the AWS Glue table exists.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// Name of the database where the AWS Glue table exists.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the AWS Glue table.
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (DataQualityRulesetTargetTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityRulesetTargetTable)(nil)).Elem()
}

func (i DataQualityRulesetTargetTableArgs) ToDataQualityRulesetTargetTableOutput() DataQualityRulesetTargetTableOutput {
	return i.ToDataQualityRulesetTargetTableOutputWithContext(context.Background())
}

func (i DataQualityRulesetTargetTableArgs) ToDataQualityRulesetTargetTableOutputWithContext(ctx context.Context) DataQualityRulesetTargetTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataQualityRulesetTargetTableOutput)
}

func (i *DataQualityRulesetTargetTableArgs) ToOutput(ctx context.Context) pulumix.Output[*DataQualityRulesetTargetTableArgs] {
	return pulumix.Val(i)
}

type DataQualityRulesetTargetTableOutput struct{ *pulumi.OutputState }

func (DataQualityRulesetTargetTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityRulesetTargetTable)(nil)).Elem()
}

func (o DataQualityRulesetTargetTableOutput) ToDataQualityRulesetTargetTableOutput() DataQualityRulesetTargetTableOutput {
	return o
}

func (o DataQualityRulesetTargetTableOutput) ToDataQualityRulesetTargetTableOutputWithContext(ctx context.Context) DataQualityRulesetTargetTableOutput {
	return o
}

func (o DataQualityRulesetTargetTableOutput) ToOutput(ctx context.Context) pulumix.Output[DataQualityRulesetTargetTable] {
	return pulumix.Output[DataQualityRulesetTargetTable]{
		OutputState: o.OutputState,
	}
}

// The catalog id where the AWS Glue table exists.
func (o DataQualityRulesetTargetTableOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[DataQualityRulesetTargetTable](o, func(v DataQualityRulesetTargetTable) *string { return v.CatalogId })
}

// Name of the database where the AWS Glue table exists.
func (o DataQualityRulesetTargetTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[DataQualityRulesetTargetTable](o, func(v DataQualityRulesetTargetTable) string { return v.DatabaseName })
}

// Name of the AWS Glue table.
func (o DataQualityRulesetTargetTableOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[DataQualityRulesetTargetTable](o, func(v DataQualityRulesetTargetTable) string { return v.TableName })
}

type JobCommand struct {
	// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `glueray` for Ray Job Type, or `gluestreaming` for Streaming Job Type. `maxCapacity` needs to be set if `pythonshell` is chosen.
	Name *string `pulumi:"name"`
	// The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
	PythonVersion *string `pulumi:"pythonVersion"`
	// In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html#author-job-ray-runtimes) in the Glue Developer Guide.
	Runtime *string `pulumi:"runtime"`
	// Specifies the S3 path to a script that executes a job.
	ScriptLocation string `pulumi:"scriptLocation"`
}

type JobCommandArgs struct {
	// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `glueray` for Ray Job Type, or `gluestreaming` for Streaming Job Type. `maxCapacity` needs to be set if `pythonshell` is chosen.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
	PythonVersion pulumix.Input[*string] `pulumi:"pythonVersion"`
	// In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html#author-job-ray-runtimes) in the Glue Developer Guide.
	Runtime pulumix.Input[*string] `pulumi:"runtime"`
	// Specifies the S3 path to a script that executes a job.
	ScriptLocation pulumix.Input[string] `pulumi:"scriptLocation"`
}

func (JobCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (i JobCommandArgs) ToJobCommandOutput() JobCommandOutput {
	return i.ToJobCommandOutputWithContext(context.Background())
}

func (i JobCommandArgs) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCommandOutput)
}

func (i *JobCommandArgs) ToOutput(ctx context.Context) pulumix.Output[*JobCommandArgs] {
	return pulumix.Val(i)
}

type JobCommandOutput struct{ *pulumi.OutputState }

func (JobCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (o JobCommandOutput) ToJobCommandOutput() JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToOutput(ctx context.Context) pulumix.Output[JobCommand] {
	return pulumix.Output[JobCommand]{
		OutputState: o.OutputState,
	}
}

// The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `glueray` for Ray Job Type, or `gluestreaming` for Streaming Job Type. `maxCapacity` needs to be set if `pythonshell` is chosen.
func (o JobCommandOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[JobCommand](o, func(v JobCommand) *string { return v.Name })
}

// The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
func (o JobCommandOutput) PythonVersion() pulumix.Output[*string] {
	return pulumix.Apply[JobCommand](o, func(v JobCommand) *string { return v.PythonVersion })
}

// In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html#author-job-ray-runtimes) in the Glue Developer Guide.
func (o JobCommandOutput) Runtime() pulumix.Output[*string] {
	return pulumix.Apply[JobCommand](o, func(v JobCommand) *string { return v.Runtime })
}

// Specifies the S3 path to a script that executes a job.
func (o JobCommandOutput) ScriptLocation() pulumix.Output[string] {
	return pulumix.Apply[JobCommand](o, func(v JobCommand) string { return v.ScriptLocation })
}

type JobExecutionProperty struct {
	// The maximum number of concurrent runs allowed for a job. The default is 1.
	MaxConcurrentRuns *int `pulumi:"maxConcurrentRuns"`
}

type JobExecutionPropertyArgs struct {
	// The maximum number of concurrent runs allowed for a job. The default is 1.
	MaxConcurrentRuns pulumix.Input[*int] `pulumi:"maxConcurrentRuns"`
}

func (JobExecutionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return i.ToJobExecutionPropertyOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput)
}

func (i *JobExecutionPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*JobExecutionPropertyArgs] {
	return pulumix.Val(i)
}

type JobExecutionPropertyOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[JobExecutionProperty] {
	return pulumix.Output[JobExecutionProperty]{
		OutputState: o.OutputState,
	}
}

// The maximum number of concurrent runs allowed for a job. The default is 1.
func (o JobExecutionPropertyOutput) MaxConcurrentRuns() pulumix.Output[*int] {
	return pulumix.Apply[JobExecutionProperty](o, func(v JobExecutionProperty) *int { return v.MaxConcurrentRuns })
}

type JobNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

type JobNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter pulumix.Input[*int] `pulumi:"notifyDelayAfter"`
}

func (JobNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return i.ToJobNotificationPropertyOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput)
}

func (i *JobNotificationPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*JobNotificationPropertyArgs] {
	return pulumix.Val(i)
}

type JobNotificationPropertyOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[JobNotificationProperty] {
	return pulumix.Output[JobNotificationProperty]{
		OutputState: o.OutputState,
	}
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o JobNotificationPropertyOutput) NotifyDelayAfter() pulumix.Output[*int] {
	return pulumix.Apply[JobNotificationProperty](o, func(v JobNotificationProperty) *int { return v.NotifyDelayAfter })
}

type MLTransformInputRecordTable struct {
	// A unique identifier for the AWS Glue Data Catalog.
	CatalogId *string `pulumi:"catalogId"`
	// The name of the connection to the AWS Glue Data Catalog.
	ConnectionName *string `pulumi:"connectionName"`
	// A database name in the AWS Glue Data Catalog.
	DatabaseName string `pulumi:"databaseName"`
	// A table name in the AWS Glue Data Catalog.
	TableName string `pulumi:"tableName"`
}

type MLTransformInputRecordTableArgs struct {
	// A unique identifier for the AWS Glue Data Catalog.
	CatalogId pulumix.Input[*string] `pulumi:"catalogId"`
	// The name of the connection to the AWS Glue Data Catalog.
	ConnectionName pulumix.Input[*string] `pulumi:"connectionName"`
	// A database name in the AWS Glue Data Catalog.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// A table name in the AWS Glue Data Catalog.
	TableName pulumix.Input[string] `pulumi:"tableName"`
}

func (MLTransformInputRecordTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformInputRecordTable)(nil)).Elem()
}

func (i MLTransformInputRecordTableArgs) ToMLTransformInputRecordTableOutput() MLTransformInputRecordTableOutput {
	return i.ToMLTransformInputRecordTableOutputWithContext(context.Background())
}

func (i MLTransformInputRecordTableArgs) ToMLTransformInputRecordTableOutputWithContext(ctx context.Context) MLTransformInputRecordTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformInputRecordTableOutput)
}

func (i *MLTransformInputRecordTableArgs) ToOutput(ctx context.Context) pulumix.Output[*MLTransformInputRecordTableArgs] {
	return pulumix.Val(i)
}

type MLTransformInputRecordTableOutput struct{ *pulumi.OutputState }

func (MLTransformInputRecordTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformInputRecordTable)(nil)).Elem()
}

func (o MLTransformInputRecordTableOutput) ToMLTransformInputRecordTableOutput() MLTransformInputRecordTableOutput {
	return o
}

func (o MLTransformInputRecordTableOutput) ToMLTransformInputRecordTableOutputWithContext(ctx context.Context) MLTransformInputRecordTableOutput {
	return o
}

func (o MLTransformInputRecordTableOutput) ToOutput(ctx context.Context) pulumix.Output[MLTransformInputRecordTable] {
	return pulumix.Output[MLTransformInputRecordTable]{
		OutputState: o.OutputState,
	}
}

// A unique identifier for the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) CatalogId() pulumix.Output[*string] {
	return pulumix.Apply[MLTransformInputRecordTable](o, func(v MLTransformInputRecordTable) *string { return v.CatalogId })
}

// The name of the connection to the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) ConnectionName() pulumix.Output[*string] {
	return pulumix.Apply[MLTransformInputRecordTable](o, func(v MLTransformInputRecordTable) *string { return v.ConnectionName })
}

// A database name in the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[MLTransformInputRecordTable](o, func(v MLTransformInputRecordTable) string { return v.DatabaseName })
}

// A table name in the AWS Glue Data Catalog.
func (o MLTransformInputRecordTableOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[MLTransformInputRecordTable](o, func(v MLTransformInputRecordTable) string { return v.TableName })
}

type MLTransformParameters struct {
	// The parameters for the find matches algorithm. see Find Matches Parameters.
	FindMatchesParameters MLTransformParametersFindMatchesParameters `pulumi:"findMatchesParameters"`
	// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
	TransformType string `pulumi:"transformType"`
}

type MLTransformParametersArgs struct {
	// The parameters for the find matches algorithm. see Find Matches Parameters.
	FindMatchesParameters pulumix.Input[*MLTransformParametersFindMatchesParametersArgs] `pulumi:"findMatchesParameters"`
	// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
	TransformType pulumix.Input[string] `pulumi:"transformType"`
}

func (MLTransformParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParameters)(nil)).Elem()
}

func (i MLTransformParametersArgs) ToMLTransformParametersOutput() MLTransformParametersOutput {
	return i.ToMLTransformParametersOutputWithContext(context.Background())
}

func (i MLTransformParametersArgs) ToMLTransformParametersOutputWithContext(ctx context.Context) MLTransformParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersOutput)
}

func (i *MLTransformParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MLTransformParametersArgs] {
	return pulumix.Val(i)
}

type MLTransformParametersOutput struct{ *pulumi.OutputState }

func (MLTransformParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParameters)(nil)).Elem()
}

func (o MLTransformParametersOutput) ToMLTransformParametersOutput() MLTransformParametersOutput {
	return o
}

func (o MLTransformParametersOutput) ToMLTransformParametersOutputWithContext(ctx context.Context) MLTransformParametersOutput {
	return o
}

func (o MLTransformParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MLTransformParameters] {
	return pulumix.Output[MLTransformParameters]{
		OutputState: o.OutputState,
	}
}

// The parameters for the find matches algorithm. see Find Matches Parameters.
func (o MLTransformParametersOutput) FindMatchesParameters() pulumix.GPtrOutput[MLTransformParametersFindMatchesParameters, MLTransformParametersFindMatchesParametersOutput] {
	value := pulumix.Apply[MLTransformParameters](o, func(v MLTransformParameters) MLTransformParametersFindMatchesParameters {
		return v.FindMatchesParameters
	})
	return pulumix.GPtrOutput[MLTransformParametersFindMatchesParameters, MLTransformParametersFindMatchesParametersOutput]{OutputState: value.OutputState}
}

// The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
func (o MLTransformParametersOutput) TransformType() pulumix.Output[string] {
	return pulumix.Apply[MLTransformParameters](o, func(v MLTransformParameters) string { return v.TransformType })
}

type MLTransformParametersFindMatchesParameters struct {
	// The value that is selected when tuning your transform for a balance between accuracy and cost.
	AccuracyCostTradeOff *float64 `pulumi:"accuracyCostTradeOff"`
	// The value to switch on or off to force the output to match the provided labels from users.
	EnforceProvidedLabels *bool `pulumi:"enforceProvidedLabels"`
	// The value selected when tuning your transform for a balance between precision and recall.
	PrecisionRecallTradeOff *float64 `pulumi:"precisionRecallTradeOff"`
	// The name of a column that uniquely identifies rows in the source table.
	PrimaryKeyColumnName *string `pulumi:"primaryKeyColumnName"`
}

type MLTransformParametersFindMatchesParametersArgs struct {
	// The value that is selected when tuning your transform for a balance between accuracy and cost.
	AccuracyCostTradeOff pulumix.Input[*float64] `pulumi:"accuracyCostTradeOff"`
	// The value to switch on or off to force the output to match the provided labels from users.
	EnforceProvidedLabels pulumix.Input[*bool] `pulumi:"enforceProvidedLabels"`
	// The value selected when tuning your transform for a balance between precision and recall.
	PrecisionRecallTradeOff pulumix.Input[*float64] `pulumi:"precisionRecallTradeOff"`
	// The name of a column that uniquely identifies rows in the source table.
	PrimaryKeyColumnName pulumix.Input[*string] `pulumi:"primaryKeyColumnName"`
}

func (MLTransformParametersFindMatchesParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParametersFindMatchesParameters)(nil)).Elem()
}

func (i MLTransformParametersFindMatchesParametersArgs) ToMLTransformParametersFindMatchesParametersOutput() MLTransformParametersFindMatchesParametersOutput {
	return i.ToMLTransformParametersFindMatchesParametersOutputWithContext(context.Background())
}

func (i MLTransformParametersFindMatchesParametersArgs) ToMLTransformParametersFindMatchesParametersOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformParametersFindMatchesParametersOutput)
}

func (i *MLTransformParametersFindMatchesParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*MLTransformParametersFindMatchesParametersArgs] {
	return pulumix.Val(i)
}

type MLTransformParametersFindMatchesParametersOutput struct{ *pulumi.OutputState }

func (MLTransformParametersFindMatchesParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformParametersFindMatchesParameters)(nil)).Elem()
}

func (o MLTransformParametersFindMatchesParametersOutput) ToMLTransformParametersFindMatchesParametersOutput() MLTransformParametersFindMatchesParametersOutput {
	return o
}

func (o MLTransformParametersFindMatchesParametersOutput) ToMLTransformParametersFindMatchesParametersOutputWithContext(ctx context.Context) MLTransformParametersFindMatchesParametersOutput {
	return o
}

func (o MLTransformParametersFindMatchesParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MLTransformParametersFindMatchesParameters] {
	return pulumix.Output[MLTransformParametersFindMatchesParameters]{
		OutputState: o.OutputState,
	}
}

// The value that is selected when tuning your transform for a balance between accuracy and cost.
func (o MLTransformParametersFindMatchesParametersOutput) AccuracyCostTradeOff() pulumix.Output[*float64] {
	return pulumix.Apply[MLTransformParametersFindMatchesParameters](o, func(v MLTransformParametersFindMatchesParameters) *float64 { return v.AccuracyCostTradeOff })
}

// The value to switch on or off to force the output to match the provided labels from users.
func (o MLTransformParametersFindMatchesParametersOutput) EnforceProvidedLabels() pulumix.Output[*bool] {
	return pulumix.Apply[MLTransformParametersFindMatchesParameters](o, func(v MLTransformParametersFindMatchesParameters) *bool { return v.EnforceProvidedLabels })
}

// The value selected when tuning your transform for a balance between precision and recall.
func (o MLTransformParametersFindMatchesParametersOutput) PrecisionRecallTradeOff() pulumix.Output[*float64] {
	return pulumix.Apply[MLTransformParametersFindMatchesParameters](o, func(v MLTransformParametersFindMatchesParameters) *float64 { return v.PrecisionRecallTradeOff })
}

// The name of a column that uniquely identifies rows in the source table.
func (o MLTransformParametersFindMatchesParametersOutput) PrimaryKeyColumnName() pulumix.Output[*string] {
	return pulumix.Apply[MLTransformParametersFindMatchesParameters](o, func(v MLTransformParametersFindMatchesParameters) *string { return v.PrimaryKeyColumnName })
}

type MLTransformSchema struct {
	// The type of data in the column.
	DataType *string `pulumi:"dataType"`
	// The name you assign to this ML Transform. It must be unique in your account.
	Name *string `pulumi:"name"`
}

type MLTransformSchemaArgs struct {
	// The type of data in the column.
	DataType pulumix.Input[*string] `pulumi:"dataType"`
	// The name you assign to this ML Transform. It must be unique in your account.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (MLTransformSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformSchema)(nil)).Elem()
}

func (i MLTransformSchemaArgs) ToMLTransformSchemaOutput() MLTransformSchemaOutput {
	return i.ToMLTransformSchemaOutputWithContext(context.Background())
}

func (i MLTransformSchemaArgs) ToMLTransformSchemaOutputWithContext(ctx context.Context) MLTransformSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTransformSchemaOutput)
}

func (i *MLTransformSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[*MLTransformSchemaArgs] {
	return pulumix.Val(i)
}

type MLTransformSchemaOutput struct{ *pulumi.OutputState }

func (MLTransformSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTransformSchema)(nil)).Elem()
}

func (o MLTransformSchemaOutput) ToMLTransformSchemaOutput() MLTransformSchemaOutput {
	return o
}

func (o MLTransformSchemaOutput) ToMLTransformSchemaOutputWithContext(ctx context.Context) MLTransformSchemaOutput {
	return o
}

func (o MLTransformSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[MLTransformSchema] {
	return pulumix.Output[MLTransformSchema]{
		OutputState: o.OutputState,
	}
}

// The type of data in the column.
func (o MLTransformSchemaOutput) DataType() pulumix.Output[*string] {
	return pulumix.Apply[MLTransformSchema](o, func(v MLTransformSchema) *string { return v.DataType })
}

// The name you assign to this ML Transform. It must be unique in your account.
func (o MLTransformSchemaOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[MLTransformSchema](o, func(v MLTransformSchema) *string { return v.Name })
}

type PartitionIndexPartitionIndex struct {
	// Name of the partition index.
	IndexName   *string `pulumi:"indexName"`
	IndexStatus *string `pulumi:"indexStatus"`
	// Keys for the partition index.
	Keys []string `pulumi:"keys"`
}

type PartitionIndexPartitionIndexArgs struct {
	// Name of the partition index.
	IndexName   pulumix.Input[*string] `pulumi:"indexName"`
	IndexStatus pulumix.Input[*string] `pulumi:"indexStatus"`
	// Keys for the partition index.
	Keys pulumix.Input[[]string] `pulumi:"keys"`
}

func (PartitionIndexPartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionIndexPartitionIndex)(nil)).Elem()
}

func (i PartitionIndexPartitionIndexArgs) ToPartitionIndexPartitionIndexOutput() PartitionIndexPartitionIndexOutput {
	return i.ToPartitionIndexPartitionIndexOutputWithContext(context.Background())
}

func (i PartitionIndexPartitionIndexArgs) ToPartitionIndexPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexPartitionIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionIndexPartitionIndexOutput)
}

func (i *PartitionIndexPartitionIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*PartitionIndexPartitionIndexArgs] {
	return pulumix.Val(i)
}

type PartitionIndexPartitionIndexOutput struct{ *pulumi.OutputState }

func (PartitionIndexPartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionIndexPartitionIndex)(nil)).Elem()
}

func (o PartitionIndexPartitionIndexOutput) ToPartitionIndexPartitionIndexOutput() PartitionIndexPartitionIndexOutput {
	return o
}

func (o PartitionIndexPartitionIndexOutput) ToPartitionIndexPartitionIndexOutputWithContext(ctx context.Context) PartitionIndexPartitionIndexOutput {
	return o
}

func (o PartitionIndexPartitionIndexOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionIndexPartitionIndex] {
	return pulumix.Output[PartitionIndexPartitionIndex]{
		OutputState: o.OutputState,
	}
}

// Name of the partition index.
func (o PartitionIndexPartitionIndexOutput) IndexName() pulumix.Output[*string] {
	return pulumix.Apply[PartitionIndexPartitionIndex](o, func(v PartitionIndexPartitionIndex) *string { return v.IndexName })
}

func (o PartitionIndexPartitionIndexOutput) IndexStatus() pulumix.Output[*string] {
	return pulumix.Apply[PartitionIndexPartitionIndex](o, func(v PartitionIndexPartitionIndex) *string { return v.IndexStatus })
}

// Keys for the partition index.
func (o PartitionIndexPartitionIndexOutput) Keys() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PartitionIndexPartitionIndex](o, func(v PartitionIndexPartitionIndex) []string { return v.Keys })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PartitionStorageDescriptor struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns []string `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns []PartitionStorageDescriptorColumn `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed *bool `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat *string `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location *string `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets *int `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat *string `pulumi:"outputFormat"`
	// User-supplied properties in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo *PartitionStorageDescriptorSerDeInfo `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo *PartitionStorageDescriptorSkewedInfo `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns []PartitionStorageDescriptorSortColumn `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories *bool `pulumi:"storedAsSubDirectories"`
}

type PartitionStorageDescriptorArgs struct {
	// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns pulumix.Input[[]string] `pulumi:"bucketColumns"`
	// A list of the Columns in the table.
	Columns pulumix.Input[[]*PartitionStorageDescriptorColumnArgs] `pulumi:"columns"`
	// True if the data in the table is compressed, or False if not.
	Compressed pulumix.Input[*bool] `pulumi:"compressed"`
	// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat pulumix.Input[*string] `pulumi:"inputFormat"`
	// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location pulumix.Input[*string] `pulumi:"location"`
	// Must be specified if the table contains any dimension columns.
	NumberOfBuckets pulumix.Input[*int] `pulumi:"numberOfBuckets"`
	// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat pulumix.Input[*string] `pulumi:"outputFormat"`
	// User-supplied properties in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Serialization/deserialization (SerDe) information.
	SerDeInfo pulumix.Input[*PartitionStorageDescriptorSerDeInfoArgs] `pulumi:"serDeInfo"`
	// Information about values that appear very frequently in a column (skewed values).
	SkewedInfo pulumix.Input[*PartitionStorageDescriptorSkewedInfoArgs] `pulumi:"skewedInfo"`
	// A list of Order objects specifying the sort order of each bucket in the table.
	SortColumns pulumix.Input[[]*PartitionStorageDescriptorSortColumnArgs] `pulumi:"sortColumns"`
	// True if the table data is stored in subdirectories, or False if not.
	StoredAsSubDirectories pulumix.Input[*bool] `pulumi:"storedAsSubDirectories"`
}

func (PartitionStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptor)(nil)).Elem()
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput {
	return i.ToPartitionStorageDescriptorOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorOutputWithContext(ctx context.Context) PartitionStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorOutput)
}

func (i *PartitionStorageDescriptorArgs) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptorArgs] {
	return pulumix.Val(i)
}

type PartitionStorageDescriptorOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptor)(nil)).Elem()
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput {
	return o
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorOutputWithContext(ctx context.Context) PartitionStorageDescriptorOutput {
	return o
}

func (o PartitionStorageDescriptorOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptor] {
	return pulumix.Output[PartitionStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o PartitionStorageDescriptorOutput) BucketColumns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) []string { return v.BucketColumns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of the Columns in the table.
func (o PartitionStorageDescriptorOutput) Columns() pulumix.GArrayOutput[PartitionStorageDescriptorColumn, PartitionStorageDescriptorColumnOutput] {
	value := pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) []PartitionStorageDescriptorColumn { return v.Columns })
	return pulumix.GArrayOutput[PartitionStorageDescriptorColumn, PartitionStorageDescriptorColumnOutput]{OutputState: value.OutputState}
}

// True if the data in the table is compressed, or False if not.
func (o PartitionStorageDescriptorOutput) Compressed() pulumix.Output[*bool] {
	return pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *bool { return v.Compressed })
}

// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o PartitionStorageDescriptorOutput) InputFormat() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *string { return v.InputFormat })
}

// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o PartitionStorageDescriptorOutput) Location() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *string { return v.Location })
}

// Must be specified if the table contains any dimension columns.
func (o PartitionStorageDescriptorOutput) NumberOfBuckets() pulumix.Output[*int] {
	return pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *int { return v.NumberOfBuckets })
}

// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o PartitionStorageDescriptorOutput) OutputFormat() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *string { return v.OutputFormat })
}

// User-supplied properties in key-value form.
func (o PartitionStorageDescriptorOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Serialization/deserialization (SerDe) information.
func (o PartitionStorageDescriptorOutput) SerDeInfo() pulumix.GPtrOutput[PartitionStorageDescriptorSerDeInfo, PartitionStorageDescriptorSerDeInfoOutput] {
	value := pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *PartitionStorageDescriptorSerDeInfo { return v.SerDeInfo })
	return pulumix.GPtrOutput[PartitionStorageDescriptorSerDeInfo, PartitionStorageDescriptorSerDeInfoOutput]{OutputState: value.OutputState}
}

// Information about values that appear very frequently in a column (skewed values).
func (o PartitionStorageDescriptorOutput) SkewedInfo() pulumix.GPtrOutput[PartitionStorageDescriptorSkewedInfo, PartitionStorageDescriptorSkewedInfoOutput] {
	value := pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *PartitionStorageDescriptorSkewedInfo { return v.SkewedInfo })
	return pulumix.GPtrOutput[PartitionStorageDescriptorSkewedInfo, PartitionStorageDescriptorSkewedInfoOutput]{OutputState: value.OutputState}
}

// A list of Order objects specifying the sort order of each bucket in the table.
func (o PartitionStorageDescriptorOutput) SortColumns() pulumix.GArrayOutput[PartitionStorageDescriptorSortColumn, PartitionStorageDescriptorSortColumnOutput] {
	value := pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) []PartitionStorageDescriptorSortColumn { return v.SortColumns })
	return pulumix.GArrayOutput[PartitionStorageDescriptorSortColumn, PartitionStorageDescriptorSortColumnOutput]{OutputState: value.OutputState}
}

// True if the table data is stored in subdirectories, or False if not.
func (o PartitionStorageDescriptorOutput) StoredAsSubDirectories() pulumix.Output[*bool] {
	return pulumix.Apply[PartitionStorageDescriptor](o, func(v PartitionStorageDescriptor) *bool { return v.StoredAsSubDirectories })
}

type PartitionStorageDescriptorColumn struct {
	// Free-form text comment.
	Comment *string `pulumi:"comment"`
	// The name of the Column.
	Name string `pulumi:"name"`
	// The datatype of data in the Column.
	Type *string `pulumi:"type"`
}

type PartitionStorageDescriptorColumnArgs struct {
	// Free-form text comment.
	Comment pulumix.Input[*string] `pulumi:"comment"`
	// The name of the Column.
	Name pulumix.Input[string] `pulumi:"name"`
	// The datatype of data in the Column.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (PartitionStorageDescriptorColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorColumn)(nil)).Elem()
}

func (i PartitionStorageDescriptorColumnArgs) ToPartitionStorageDescriptorColumnOutput() PartitionStorageDescriptorColumnOutput {
	return i.ToPartitionStorageDescriptorColumnOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorColumnArgs) ToPartitionStorageDescriptorColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorColumnOutput)
}

func (i *PartitionStorageDescriptorColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptorColumnArgs] {
	return pulumix.Val(i)
}

type PartitionStorageDescriptorColumnOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorColumn)(nil)).Elem()
}

func (o PartitionStorageDescriptorColumnOutput) ToPartitionStorageDescriptorColumnOutput() PartitionStorageDescriptorColumnOutput {
	return o
}

func (o PartitionStorageDescriptorColumnOutput) ToPartitionStorageDescriptorColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorColumnOutput {
	return o
}

func (o PartitionStorageDescriptorColumnOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptorColumn] {
	return pulumix.Output[PartitionStorageDescriptorColumn]{
		OutputState: o.OutputState,
	}
}

// Free-form text comment.
func (o PartitionStorageDescriptorColumnOutput) Comment() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptorColumn](o, func(v PartitionStorageDescriptorColumn) *string { return v.Comment })
}

// The name of the Column.
func (o PartitionStorageDescriptorColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[PartitionStorageDescriptorColumn](o, func(v PartitionStorageDescriptorColumn) string { return v.Name })
}

// The datatype of data in the Column.
func (o PartitionStorageDescriptorColumnOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptorColumn](o, func(v PartitionStorageDescriptorColumn) *string { return v.Type })
}

type PartitionStorageDescriptorSerDeInfo struct {
	// Name of the SerDe.
	Name *string `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	SerializationLibrary *string `pulumi:"serializationLibrary"`
}

type PartitionStorageDescriptorSerDeInfoArgs struct {
	// Name of the SerDe.
	Name pulumix.Input[*string] `pulumi:"name"`
	// A map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	SerializationLibrary pulumix.Input[*string] `pulumi:"serializationLibrary"`
}

func (PartitionStorageDescriptorSerDeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i PartitionStorageDescriptorSerDeInfoArgs) ToPartitionStorageDescriptorSerDeInfoOutput() PartitionStorageDescriptorSerDeInfoOutput {
	return i.ToPartitionStorageDescriptorSerDeInfoOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSerDeInfoArgs) ToPartitionStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSerDeInfoOutput)
}

func (i *PartitionStorageDescriptorSerDeInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptorSerDeInfoArgs] {
	return pulumix.Val(i)
}

type PartitionStorageDescriptorSerDeInfoOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSerDeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToPartitionStorageDescriptorSerDeInfoOutput() PartitionStorageDescriptorSerDeInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToPartitionStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSerDeInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSerDeInfoOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptorSerDeInfo] {
	return pulumix.Output[PartitionStorageDescriptorSerDeInfo]{
		OutputState: o.OutputState,
	}
}

// Name of the SerDe.
func (o PartitionStorageDescriptorSerDeInfoOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptorSerDeInfo](o, func(v PartitionStorageDescriptorSerDeInfo) *string { return v.Name })
}

// A map of initialization parameters for the SerDe, in key-value form.
func (o PartitionStorageDescriptorSerDeInfoOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[PartitionStorageDescriptorSerDeInfo](o, func(v PartitionStorageDescriptorSerDeInfo) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
func (o PartitionStorageDescriptorSerDeInfoOutput) SerializationLibrary() pulumix.Output[*string] {
	return pulumix.Apply[PartitionStorageDescriptorSerDeInfo](o, func(v PartitionStorageDescriptorSerDeInfo) *string { return v.SerializationLibrary })
}

type PartitionStorageDescriptorSkewedInfo struct {
	// A list of names of columns that contain skewed values.
	SkewedColumnNames []string `pulumi:"skewedColumnNames"`
	// A list of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps map[string]string `pulumi:"skewedColumnValueLocationMaps"`
	// A map of skewed values to the columns that contain them.
	SkewedColumnValues []string `pulumi:"skewedColumnValues"`
}

type PartitionStorageDescriptorSkewedInfoArgs struct {
	// A list of names of columns that contain skewed values.
	SkewedColumnNames pulumix.Input[[]string] `pulumi:"skewedColumnNames"`
	// A list of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps pulumix.Input[map[string]string] `pulumi:"skewedColumnValueLocationMaps"`
	// A map of skewed values to the columns that contain them.
	SkewedColumnValues pulumix.Input[[]string] `pulumi:"skewedColumnValues"`
}

func (PartitionStorageDescriptorSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i PartitionStorageDescriptorSkewedInfoArgs) ToPartitionStorageDescriptorSkewedInfoOutput() PartitionStorageDescriptorSkewedInfoOutput {
	return i.ToPartitionStorageDescriptorSkewedInfoOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSkewedInfoArgs) ToPartitionStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSkewedInfoOutput)
}

func (i *PartitionStorageDescriptorSkewedInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptorSkewedInfoArgs] {
	return pulumix.Val(i)
}

type PartitionStorageDescriptorSkewedInfoOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToPartitionStorageDescriptorSkewedInfoOutput() PartitionStorageDescriptorSkewedInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToPartitionStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) PartitionStorageDescriptorSkewedInfoOutput {
	return o
}

func (o PartitionStorageDescriptorSkewedInfoOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptorSkewedInfo] {
	return pulumix.Output[PartitionStorageDescriptorSkewedInfo]{
		OutputState: o.OutputState,
	}
}

// A list of names of columns that contain skewed values.
func (o PartitionStorageDescriptorSkewedInfoOutput) SkewedColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PartitionStorageDescriptorSkewedInfo](o, func(v PartitionStorageDescriptorSkewedInfo) []string { return v.SkewedColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A list of values that appear so frequently as to be considered skewed.
func (o PartitionStorageDescriptorSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumix.MapOutput[string] {
	value := pulumix.Apply[PartitionStorageDescriptorSkewedInfo](o, func(v PartitionStorageDescriptorSkewedInfo) map[string]string { return v.SkewedColumnValueLocationMaps })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// A map of skewed values to the columns that contain them.
func (o PartitionStorageDescriptorSkewedInfoOutput) SkewedColumnValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PartitionStorageDescriptorSkewedInfo](o, func(v PartitionStorageDescriptorSkewedInfo) []string { return v.SkewedColumnValues })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type PartitionStorageDescriptorSortColumn struct {
	// The name of the column.
	Column string `pulumi:"column"`
	// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
	SortOrder int `pulumi:"sortOrder"`
}

type PartitionStorageDescriptorSortColumnArgs struct {
	// The name of the column.
	Column pulumix.Input[string] `pulumi:"column"`
	// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
	SortOrder pulumix.Input[int] `pulumi:"sortOrder"`
}

func (PartitionStorageDescriptorSortColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSortColumn)(nil)).Elem()
}

func (i PartitionStorageDescriptorSortColumnArgs) ToPartitionStorageDescriptorSortColumnOutput() PartitionStorageDescriptorSortColumnOutput {
	return i.ToPartitionStorageDescriptorSortColumnOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorSortColumnArgs) ToPartitionStorageDescriptorSortColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorSortColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorSortColumnOutput)
}

func (i *PartitionStorageDescriptorSortColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptorSortColumnArgs] {
	return pulumix.Val(i)
}

type PartitionStorageDescriptorSortColumnOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorSortColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptorSortColumn)(nil)).Elem()
}

func (o PartitionStorageDescriptorSortColumnOutput) ToPartitionStorageDescriptorSortColumnOutput() PartitionStorageDescriptorSortColumnOutput {
	return o
}

func (o PartitionStorageDescriptorSortColumnOutput) ToPartitionStorageDescriptorSortColumnOutputWithContext(ctx context.Context) PartitionStorageDescriptorSortColumnOutput {
	return o
}

func (o PartitionStorageDescriptorSortColumnOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptorSortColumn] {
	return pulumix.Output[PartitionStorageDescriptorSortColumn]{
		OutputState: o.OutputState,
	}
}

// The name of the column.
func (o PartitionStorageDescriptorSortColumnOutput) Column() pulumix.Output[string] {
	return pulumix.Apply[PartitionStorageDescriptorSortColumn](o, func(v PartitionStorageDescriptorSortColumn) string { return v.Column })
}

// Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
func (o PartitionStorageDescriptorSortColumnOutput) SortOrder() pulumix.Output[int] {
	return pulumix.Apply[PartitionStorageDescriptorSortColumn](o, func(v PartitionStorageDescriptorSortColumn) int { return v.SortOrder })
}

type SecurityConfigurationEncryptionConfiguration struct {
	CloudwatchEncryption   SecurityConfigurationEncryptionConfigurationCloudwatchEncryption   `pulumi:"cloudwatchEncryption"`
	JobBookmarksEncryption SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption `pulumi:"jobBookmarksEncryption"`
	// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
	S3Encryption SecurityConfigurationEncryptionConfigurationS3Encryption `pulumi:"s3Encryption"`
}

type SecurityConfigurationEncryptionConfigurationArgs struct {
	CloudwatchEncryption   pulumix.Input[*SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs]   `pulumi:"cloudwatchEncryption"`
	JobBookmarksEncryption pulumix.Input[*SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs] `pulumi:"jobBookmarksEncryption"`
	// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
	S3Encryption pulumix.Input[*SecurityConfigurationEncryptionConfigurationS3EncryptionArgs] `pulumi:"s3Encryption"`
}

func (SecurityConfigurationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationOutput)
}

func (i *SecurityConfigurationEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationEncryptionConfigurationArgs] {
	return pulumix.Val(i)
}

type SecurityConfigurationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationEncryptionConfiguration] {
	return pulumix.Output[SecurityConfigurationEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationEncryptionConfigurationOutput) CloudwatchEncryption() pulumix.GPtrOutput[SecurityConfigurationEncryptionConfigurationCloudwatchEncryption, SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput] {
	value := pulumix.Apply[SecurityConfigurationEncryptionConfiguration](o, func(v SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
		return v.CloudwatchEncryption
	})
	return pulumix.GPtrOutput[SecurityConfigurationEncryptionConfigurationCloudwatchEncryption, SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput]{OutputState: value.OutputState}
}

func (o SecurityConfigurationEncryptionConfigurationOutput) JobBookmarksEncryption() pulumix.GPtrOutput[SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption, SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput] {
	value := pulumix.Apply[SecurityConfigurationEncryptionConfiguration](o, func(v SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
		return v.JobBookmarksEncryption
	})
	return pulumix.GPtrOutput[SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption, SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput]{OutputState: value.OutputState}
}

// A ` s3Encryption  ` block as described below, which contains encryption configuration for S3 data.
func (o SecurityConfigurationEncryptionConfigurationOutput) S3Encryption() pulumix.GPtrOutput[SecurityConfigurationEncryptionConfigurationS3Encryption, SecurityConfigurationEncryptionConfigurationS3EncryptionOutput] {
	value := pulumix.Apply[SecurityConfigurationEncryptionConfiguration](o, func(v SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfigurationS3Encryption {
		return v.S3Encryption
	})
	return pulumix.GPtrOutput[SecurityConfigurationEncryptionConfigurationS3Encryption, SecurityConfigurationEncryptionConfigurationS3EncryptionOutput]{OutputState: value.OutputState}
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryption struct {
	// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
	CloudwatchEncryptionMode *string `pulumi:"cloudwatchEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs struct {
	// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
	CloudwatchEncryptionMode pulumix.Input[*string] `pulumi:"cloudwatchEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
}

func (SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationCloudwatchEncryption)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput)
}

func (i *SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionArgs] {
	return pulumix.Val(i)
}

type SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationCloudwatchEncryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput() SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationEncryptionConfigurationCloudwatchEncryption] {
	return pulumix.Output[SecurityConfigurationEncryptionConfigurationCloudwatchEncryption]{
		OutputState: o.OutputState,
	}
}

// Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) CloudwatchEncryptionMode() pulumix.Output[*string] {
	return pulumix.Apply[SecurityConfigurationEncryptionConfigurationCloudwatchEncryption](o, func(v SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *string {
		return v.CloudwatchEncryptionMode
	})
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[SecurityConfigurationEncryptionConfigurationCloudwatchEncryption](o, func(v SecurityConfigurationEncryptionConfigurationCloudwatchEncryption) *string { return v.KmsKeyArn })
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption struct {
	// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
	JobBookmarksEncryptionMode *string `pulumi:"jobBookmarksEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs struct {
	// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
	JobBookmarksEncryptionMode pulumix.Input[*string] `pulumi:"jobBookmarksEncryptionMode"`
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
}

func (SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput)
}

func (i *SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionArgs] {
	return pulumix.Val(i)
}

type SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption] {
	return pulumix.Output[SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption]{
		OutputState: o.OutputState,
	}
}

// Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) JobBookmarksEncryptionMode() pulumix.Output[*string] {
	return pulumix.Apply[SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption](o, func(v SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *string {
		return v.JobBookmarksEncryptionMode
	})
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption](o, func(v SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption) *string { return v.KmsKeyArn })
}

type SecurityConfigurationEncryptionConfigurationS3Encryption struct {
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
	S3EncryptionMode *string `pulumi:"s3EncryptionMode"`
}

type SecurityConfigurationEncryptionConfigurationS3EncryptionArgs struct {
	// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
	KmsKeyArn pulumix.Input[*string] `pulumi:"kmsKeyArn"`
	// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
	S3EncryptionMode pulumix.Input[*string] `pulumi:"s3EncryptionMode"`
}

func (SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationS3Encryption)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput)
}

func (i *SecurityConfigurationEncryptionConfigurationS3EncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationEncryptionConfigurationS3EncryptionArgs] {
	return pulumix.Val(i)
}

type SecurityConfigurationEncryptionConfigurationS3EncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationS3Encryption)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutput() SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToSecurityConfigurationEncryptionConfigurationS3EncryptionOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationS3EncryptionOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationEncryptionConfigurationS3Encryption] {
	return pulumix.Output[SecurityConfigurationEncryptionConfigurationS3Encryption]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) KmsKeyArn() pulumix.Output[*string] {
	return pulumix.Apply[SecurityConfigurationEncryptionConfigurationS3Encryption](o, func(v SecurityConfigurationEncryptionConfigurationS3Encryption) *string { return v.KmsKeyArn })
}

// Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
func (o SecurityConfigurationEncryptionConfigurationS3EncryptionOutput) S3EncryptionMode() pulumix.Output[*string] {
	return pulumix.Apply[SecurityConfigurationEncryptionConfigurationS3Encryption](o, func(v SecurityConfigurationEncryptionConfigurationS3Encryption) *string { return v.S3EncryptionMode })
}

type TriggerAction struct {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	Arguments map[string]string `pulumi:"arguments"`
	// The name of the crawler to be executed. Conflicts with `jobName`.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of a job to be executed. Conflicts with `crawlerName`.
	JobName *string `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification. See Notification Property details below.
	NotificationProperty *TriggerActionNotificationProperty `pulumi:"notificationProperty"`
	// The name of the Security Configuration structure to be used with this action.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The job run timeout in minutes. It overrides the timeout value of the job.
	Timeout *int `pulumi:"timeout"`
}

type TriggerActionArgs struct {
	// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
	Arguments pulumix.Input[map[string]string] `pulumi:"arguments"`
	// The name of the crawler to be executed. Conflicts with `jobName`.
	CrawlerName pulumix.Input[*string] `pulumi:"crawlerName"`
	// The name of a job to be executed. Conflicts with `crawlerName`.
	JobName pulumix.Input[*string] `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification. See Notification Property details below.
	NotificationProperty pulumix.Input[*TriggerActionNotificationPropertyArgs] `pulumi:"notificationProperty"`
	// The name of the Security Configuration structure to be used with this action.
	SecurityConfiguration pulumix.Input[*string] `pulumi:"securityConfiguration"`
	// The job run timeout in minutes. It overrides the timeout value of the job.
	Timeout pulumix.Input[*int] `pulumi:"timeout"`
}

func (TriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (i TriggerActionArgs) ToTriggerActionOutput() TriggerActionOutput {
	return i.ToTriggerActionOutputWithContext(context.Background())
}

func (i TriggerActionArgs) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionOutput)
}

func (i *TriggerActionArgs) ToOutput(ctx context.Context) pulumix.Output[*TriggerActionArgs] {
	return pulumix.Val(i)
}

type TriggerActionOutput struct{ *pulumi.OutputState }

func (TriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (o TriggerActionOutput) ToTriggerActionOutput() TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerAction] {
	return pulumix.Output[TriggerAction]{
		OutputState: o.OutputState,
	}
}

// Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
func (o TriggerActionOutput) Arguments() pulumix.MapOutput[string] {
	value := pulumix.Apply[TriggerAction](o, func(v TriggerAction) map[string]string { return v.Arguments })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The name of the crawler to be executed. Conflicts with `jobName`.
func (o TriggerActionOutput) CrawlerName() pulumix.Output[*string] {
	return pulumix.Apply[TriggerAction](o, func(v TriggerAction) *string { return v.CrawlerName })
}

// The name of a job to be executed. Conflicts with `crawlerName`.
func (o TriggerActionOutput) JobName() pulumix.Output[*string] {
	return pulumix.Apply[TriggerAction](o, func(v TriggerAction) *string { return v.JobName })
}

// Specifies configuration properties of a job run notification. See Notification Property details below.
func (o TriggerActionOutput) NotificationProperty() pulumix.GPtrOutput[TriggerActionNotificationProperty, TriggerActionNotificationPropertyOutput] {
	value := pulumix.Apply[TriggerAction](o, func(v TriggerAction) *TriggerActionNotificationProperty { return v.NotificationProperty })
	return pulumix.GPtrOutput[TriggerActionNotificationProperty, TriggerActionNotificationPropertyOutput]{OutputState: value.OutputState}
}

// The name of the Security Configuration structure to be used with this action.
func (o TriggerActionOutput) SecurityConfiguration() pulumix.Output[*string] {
	return pulumix.Apply[TriggerAction](o, func(v TriggerAction) *string { return v.SecurityConfiguration })
}

// The job run timeout in minutes. It overrides the timeout value of the job.
func (o TriggerActionOutput) Timeout() pulumix.Output[*int] {
	return pulumix.Apply[TriggerAction](o, func(v TriggerAction) *int { return v.Timeout })
}

type TriggerActionNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

type TriggerActionNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter pulumix.Input[*int] `pulumi:"notifyDelayAfter"`
}

func (TriggerActionNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerActionNotificationProperty)(nil)).Elem()
}

func (i TriggerActionNotificationPropertyArgs) ToTriggerActionNotificationPropertyOutput() TriggerActionNotificationPropertyOutput {
	return i.ToTriggerActionNotificationPropertyOutputWithContext(context.Background())
}

func (i TriggerActionNotificationPropertyArgs) ToTriggerActionNotificationPropertyOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionNotificationPropertyOutput)
}

func (i *TriggerActionNotificationPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[*TriggerActionNotificationPropertyArgs] {
	return pulumix.Val(i)
}

type TriggerActionNotificationPropertyOutput struct{ *pulumi.OutputState }

func (TriggerActionNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerActionNotificationProperty)(nil)).Elem()
}

func (o TriggerActionNotificationPropertyOutput) ToTriggerActionNotificationPropertyOutput() TriggerActionNotificationPropertyOutput {
	return o
}

func (o TriggerActionNotificationPropertyOutput) ToTriggerActionNotificationPropertyOutputWithContext(ctx context.Context) TriggerActionNotificationPropertyOutput {
	return o
}

func (o TriggerActionNotificationPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerActionNotificationProperty] {
	return pulumix.Output[TriggerActionNotificationProperty]{
		OutputState: o.OutputState,
	}
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o TriggerActionNotificationPropertyOutput) NotifyDelayAfter() pulumix.Output[*int] {
	return pulumix.Apply[TriggerActionNotificationProperty](o, func(v TriggerActionNotificationProperty) *int { return v.NotifyDelayAfter })
}

type TriggerEventBatchingCondition struct {
	// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
	BatchSize int `pulumi:"batchSize"`
	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
	BatchWindow *int `pulumi:"batchWindow"`
}

type TriggerEventBatchingConditionArgs struct {
	// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
	BatchSize pulumix.Input[int] `pulumi:"batchSize"`
	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
	BatchWindow pulumix.Input[*int] `pulumi:"batchWindow"`
}

func (TriggerEventBatchingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return i.ToTriggerEventBatchingConditionOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput)
}

func (i *TriggerEventBatchingConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*TriggerEventBatchingConditionArgs] {
	return pulumix.Val(i)
}

type TriggerEventBatchingConditionOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerEventBatchingCondition] {
	return pulumix.Output[TriggerEventBatchingCondition]{
		OutputState: o.OutputState,
	}
}

// Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
func (o TriggerEventBatchingConditionOutput) BatchSize() pulumix.Output[int] {
	return pulumix.Apply[TriggerEventBatchingCondition](o, func(v TriggerEventBatchingCondition) int { return v.BatchSize })
}

// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
func (o TriggerEventBatchingConditionOutput) BatchWindow() pulumix.Output[*int] {
	return pulumix.Apply[TriggerEventBatchingCondition](o, func(v TriggerEventBatchingCondition) *int { return v.BatchWindow })
}

type TriggerPredicate struct {
	// A list of the conditions that determine when the trigger will fire. See Conditions.
	Conditions []TriggerPredicateCondition `pulumi:"conditions"`
	// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
	Logical *string `pulumi:"logical"`
}

type TriggerPredicateArgs struct {
	// A list of the conditions that determine when the trigger will fire. See Conditions.
	Conditions pulumix.Input[[]*TriggerPredicateConditionArgs] `pulumi:"conditions"`
	// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
	Logical pulumix.Input[*string] `pulumi:"logical"`
}

func (TriggerPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return i.ToTriggerPredicateOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput)
}

func (i *TriggerPredicateArgs) ToOutput(ctx context.Context) pulumix.Output[*TriggerPredicateArgs] {
	return pulumix.Val(i)
}

type TriggerPredicateOutput struct{ *pulumi.OutputState }

func (TriggerPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerPredicate] {
	return pulumix.Output[TriggerPredicate]{
		OutputState: o.OutputState,
	}
}

// A list of the conditions that determine when the trigger will fire. See Conditions.
func (o TriggerPredicateOutput) Conditions() pulumix.GArrayOutput[TriggerPredicateCondition, TriggerPredicateConditionOutput] {
	value := pulumix.Apply[TriggerPredicate](o, func(v TriggerPredicate) []TriggerPredicateCondition { return v.Conditions })
	return pulumix.GArrayOutput[TriggerPredicateCondition, TriggerPredicateConditionOutput]{OutputState: value.OutputState}
}

// How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
func (o TriggerPredicateOutput) Logical() pulumix.Output[*string] {
	return pulumix.Apply[TriggerPredicate](o, func(v TriggerPredicate) *string { return v.Logical })
}

type TriggerPredicateCondition struct {
	// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
	CrawlState *string `pulumi:"crawlState"`
	// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
	JobName *string `pulumi:"jobName"`
	// A logical operator. Defaults to `EQUALS`.
	LogicalOperator *string `pulumi:"logicalOperator"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State *string `pulumi:"state"`
}

type TriggerPredicateConditionArgs struct {
	// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
	CrawlState pulumix.Input[*string] `pulumi:"crawlState"`
	// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
	CrawlerName pulumix.Input[*string] `pulumi:"crawlerName"`
	// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
	JobName pulumix.Input[*string] `pulumi:"jobName"`
	// A logical operator. Defaults to `EQUALS`.
	LogicalOperator pulumix.Input[*string] `pulumi:"logicalOperator"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State pulumix.Input[*string] `pulumi:"state"`
}

func (TriggerPredicateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicateCondition)(nil)).Elem()
}

func (i TriggerPredicateConditionArgs) ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput {
	return i.ToTriggerPredicateConditionOutputWithContext(context.Background())
}

func (i TriggerPredicateConditionArgs) ToTriggerPredicateConditionOutputWithContext(ctx context.Context) TriggerPredicateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateConditionOutput)
}

func (i *TriggerPredicateConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*TriggerPredicateConditionArgs] {
	return pulumix.Val(i)
}

type TriggerPredicateConditionOutput struct{ *pulumi.OutputState }

func (TriggerPredicateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicateCondition)(nil)).Elem()
}

func (o TriggerPredicateConditionOutput) ToTriggerPredicateConditionOutput() TriggerPredicateConditionOutput {
	return o
}

func (o TriggerPredicateConditionOutput) ToTriggerPredicateConditionOutputWithContext(ctx context.Context) TriggerPredicateConditionOutput {
	return o
}

func (o TriggerPredicateConditionOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerPredicateCondition] {
	return pulumix.Output[TriggerPredicateCondition]{
		OutputState: o.OutputState,
	}
}

// The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
func (o TriggerPredicateConditionOutput) CrawlState() pulumix.Output[*string] {
	return pulumix.Apply[TriggerPredicateCondition](o, func(v TriggerPredicateCondition) *string { return v.CrawlState })
}

// The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
func (o TriggerPredicateConditionOutput) CrawlerName() pulumix.Output[*string] {
	return pulumix.Apply[TriggerPredicateCondition](o, func(v TriggerPredicateCondition) *string { return v.CrawlerName })
}

// The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
func (o TriggerPredicateConditionOutput) JobName() pulumix.Output[*string] {
	return pulumix.Apply[TriggerPredicateCondition](o, func(v TriggerPredicateCondition) *string { return v.JobName })
}

// A logical operator. Defaults to `EQUALS`.
func (o TriggerPredicateConditionOutput) LogicalOperator() pulumix.Output[*string] {
	return pulumix.Apply[TriggerPredicateCondition](o, func(v TriggerPredicateCondition) *string { return v.LogicalOperator })
}

// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
func (o TriggerPredicateConditionOutput) State() pulumix.Output[*string] {
	return pulumix.Apply[TriggerPredicateCondition](o, func(v TriggerPredicateCondition) *string { return v.State })
}

type UserDefinedFunctionResourceUri struct {
	// The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
	ResourceType string `pulumi:"resourceType"`
	// The URI for accessing the resource.
	Uri string `pulumi:"uri"`
}

type UserDefinedFunctionResourceUriArgs struct {
	// The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
	ResourceType pulumix.Input[string] `pulumi:"resourceType"`
	// The URI for accessing the resource.
	Uri pulumix.Input[string] `pulumi:"uri"`
}

func (UserDefinedFunctionResourceUriArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResourceUri)(nil)).Elem()
}

func (i UserDefinedFunctionResourceUriArgs) ToUserDefinedFunctionResourceUriOutput() UserDefinedFunctionResourceUriOutput {
	return i.ToUserDefinedFunctionResourceUriOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceUriArgs) ToUserDefinedFunctionResourceUriOutputWithContext(ctx context.Context) UserDefinedFunctionResourceUriOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceUriOutput)
}

func (i *UserDefinedFunctionResourceUriArgs) ToOutput(ctx context.Context) pulumix.Output[*UserDefinedFunctionResourceUriArgs] {
	return pulumix.Val(i)
}

type UserDefinedFunctionResourceUriOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceUriOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResourceUri)(nil)).Elem()
}

func (o UserDefinedFunctionResourceUriOutput) ToUserDefinedFunctionResourceUriOutput() UserDefinedFunctionResourceUriOutput {
	return o
}

func (o UserDefinedFunctionResourceUriOutput) ToUserDefinedFunctionResourceUriOutputWithContext(ctx context.Context) UserDefinedFunctionResourceUriOutput {
	return o
}

func (o UserDefinedFunctionResourceUriOutput) ToOutput(ctx context.Context) pulumix.Output[UserDefinedFunctionResourceUri] {
	return pulumix.Output[UserDefinedFunctionResourceUri]{
		OutputState: o.OutputState,
	}
}

// The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
func (o UserDefinedFunctionResourceUriOutput) ResourceType() pulumix.Output[string] {
	return pulumix.Apply[UserDefinedFunctionResourceUri](o, func(v UserDefinedFunctionResourceUri) string { return v.ResourceType })
}

// The URI for accessing the resource.
func (o UserDefinedFunctionResourceUriOutput) Uri() pulumix.Output[string] {
	return pulumix.Apply[UserDefinedFunctionResourceUri](o, func(v UserDefinedFunctionResourceUri) string { return v.Uri })
}

type GetCatalogTablePartitionIndex struct {
	// Name of the partition index.
	IndexName   string `pulumi:"indexName"`
	IndexStatus string `pulumi:"indexStatus"`
	// Keys for the partition index.
	Keys []string `pulumi:"keys"`
}

type GetCatalogTablePartitionIndexArgs struct {
	// Name of the partition index.
	IndexName   pulumix.Input[string] `pulumi:"indexName"`
	IndexStatus pulumix.Input[string] `pulumi:"indexStatus"`
	// Keys for the partition index.
	Keys pulumix.Input[[]string] `pulumi:"keys"`
}

func (GetCatalogTablePartitionIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTablePartitionIndex)(nil)).Elem()
}

func (i GetCatalogTablePartitionIndexArgs) ToGetCatalogTablePartitionIndexOutput() GetCatalogTablePartitionIndexOutput {
	return i.ToGetCatalogTablePartitionIndexOutputWithContext(context.Background())
}

func (i GetCatalogTablePartitionIndexArgs) ToGetCatalogTablePartitionIndexOutputWithContext(ctx context.Context) GetCatalogTablePartitionIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTablePartitionIndexOutput)
}

func (i *GetCatalogTablePartitionIndexArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTablePartitionIndexArgs] {
	return pulumix.Val(i)
}

type GetCatalogTablePartitionIndexOutput struct{ *pulumi.OutputState }

func (GetCatalogTablePartitionIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTablePartitionIndex)(nil)).Elem()
}

func (o GetCatalogTablePartitionIndexOutput) ToGetCatalogTablePartitionIndexOutput() GetCatalogTablePartitionIndexOutput {
	return o
}

func (o GetCatalogTablePartitionIndexOutput) ToGetCatalogTablePartitionIndexOutputWithContext(ctx context.Context) GetCatalogTablePartitionIndexOutput {
	return o
}

func (o GetCatalogTablePartitionIndexOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTablePartitionIndex] {
	return pulumix.Output[GetCatalogTablePartitionIndex]{
		OutputState: o.OutputState,
	}
}

// Name of the partition index.
func (o GetCatalogTablePartitionIndexOutput) IndexName() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTablePartitionIndex](o, func(v GetCatalogTablePartitionIndex) string { return v.IndexName })
}

func (o GetCatalogTablePartitionIndexOutput) IndexStatus() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTablePartitionIndex](o, func(v GetCatalogTablePartitionIndex) string { return v.IndexStatus })
}

// Keys for the partition index.
func (o GetCatalogTablePartitionIndexOutput) Keys() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCatalogTablePartitionIndex](o, func(v GetCatalogTablePartitionIndex) []string { return v.Keys })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCatalogTablePartitionKey struct {
	// Free-form text comment.
	Comment string `pulumi:"comment"`
	// Name of the table.
	Name string `pulumi:"name"`
	// Datatype of data in the Column.
	Type string `pulumi:"type"`
}

type GetCatalogTablePartitionKeyArgs struct {
	// Free-form text comment.
	Comment pulumix.Input[string] `pulumi:"comment"`
	// Name of the table.
	Name pulumix.Input[string] `pulumi:"name"`
	// Datatype of data in the Column.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetCatalogTablePartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTablePartitionKey)(nil)).Elem()
}

func (i GetCatalogTablePartitionKeyArgs) ToGetCatalogTablePartitionKeyOutput() GetCatalogTablePartitionKeyOutput {
	return i.ToGetCatalogTablePartitionKeyOutputWithContext(context.Background())
}

func (i GetCatalogTablePartitionKeyArgs) ToGetCatalogTablePartitionKeyOutputWithContext(ctx context.Context) GetCatalogTablePartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTablePartitionKeyOutput)
}

func (i *GetCatalogTablePartitionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTablePartitionKeyArgs] {
	return pulumix.Val(i)
}

type GetCatalogTablePartitionKeyOutput struct{ *pulumi.OutputState }

func (GetCatalogTablePartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTablePartitionKey)(nil)).Elem()
}

func (o GetCatalogTablePartitionKeyOutput) ToGetCatalogTablePartitionKeyOutput() GetCatalogTablePartitionKeyOutput {
	return o
}

func (o GetCatalogTablePartitionKeyOutput) ToGetCatalogTablePartitionKeyOutputWithContext(ctx context.Context) GetCatalogTablePartitionKeyOutput {
	return o
}

func (o GetCatalogTablePartitionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTablePartitionKey] {
	return pulumix.Output[GetCatalogTablePartitionKey]{
		OutputState: o.OutputState,
	}
}

// Free-form text comment.
func (o GetCatalogTablePartitionKeyOutput) Comment() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTablePartitionKey](o, func(v GetCatalogTablePartitionKey) string { return v.Comment })
}

// Name of the table.
func (o GetCatalogTablePartitionKeyOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTablePartitionKey](o, func(v GetCatalogTablePartitionKey) string { return v.Name })
}

// Datatype of data in the Column.
func (o GetCatalogTablePartitionKeyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTablePartitionKey](o, func(v GetCatalogTablePartitionKey) string { return v.Type })
}

type GetCatalogTableStorageDescriptor struct {
	// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns []string `pulumi:"bucketColumns"`
	// Configuration block for columns in the table. See `columns` below.
	Columns []GetCatalogTableStorageDescriptorColumn `pulumi:"columns"`
	// Whether the data in the table is compressed.
	Compressed bool `pulumi:"compressed"`
	// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat string `pulumi:"inputFormat"`
	// Physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location string `pulumi:"location"`
	// Is if the table contains any dimension columns.
	NumberOfBuckets int `pulumi:"numberOfBuckets"`
	// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat string `pulumi:"outputFormat"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Object that references a schema stored in the AWS Glue Schema Registry. See `schemaReference` below.
	SchemaReferences []GetCatalogTableStorageDescriptorSchemaReference `pulumi:"schemaReferences"`
	// Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
	SerDeInfos []GetCatalogTableStorageDescriptorSerDeInfo `pulumi:"serDeInfos"`
	// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
	SkewedInfos []GetCatalogTableStorageDescriptorSkewedInfo `pulumi:"skewedInfos"`
	// Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
	SortColumns []GetCatalogTableStorageDescriptorSortColumn `pulumi:"sortColumns"`
	// Whether the table data is stored in subdirectories.
	StoredAsSubDirectories bool `pulumi:"storedAsSubDirectories"`
}

type GetCatalogTableStorageDescriptorArgs struct {
	// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
	BucketColumns pulumix.Input[[]string] `pulumi:"bucketColumns"`
	// Configuration block for columns in the table. See `columns` below.
	Columns pulumix.Input[[]*GetCatalogTableStorageDescriptorColumnArgs] `pulumi:"columns"`
	// Whether the data in the table is compressed.
	Compressed pulumix.Input[bool] `pulumi:"compressed"`
	// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	InputFormat pulumix.Input[string] `pulumi:"inputFormat"`
	// Physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	Location pulumix.Input[string] `pulumi:"location"`
	// Is if the table contains any dimension columns.
	NumberOfBuckets pulumix.Input[int] `pulumi:"numberOfBuckets"`
	// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	OutputFormat pulumix.Input[string] `pulumi:"outputFormat"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Object that references a schema stored in the AWS Glue Schema Registry. See `schemaReference` below.
	SchemaReferences pulumix.Input[[]*GetCatalogTableStorageDescriptorSchemaReferenceArgs] `pulumi:"schemaReferences"`
	// Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
	SerDeInfos pulumix.Input[[]*GetCatalogTableStorageDescriptorSerDeInfoArgs] `pulumi:"serDeInfos"`
	// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
	SkewedInfos pulumix.Input[[]*GetCatalogTableStorageDescriptorSkewedInfoArgs] `pulumi:"skewedInfos"`
	// Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
	SortColumns pulumix.Input[[]*GetCatalogTableStorageDescriptorSortColumnArgs] `pulumi:"sortColumns"`
	// Whether the table data is stored in subdirectories.
	StoredAsSubDirectories pulumix.Input[bool] `pulumi:"storedAsSubDirectories"`
}

func (GetCatalogTableStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptor)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorArgs) ToGetCatalogTableStorageDescriptorOutput() GetCatalogTableStorageDescriptorOutput {
	return i.ToGetCatalogTableStorageDescriptorOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorArgs) ToGetCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorOutput)
}

func (i *GetCatalogTableStorageDescriptorArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptor)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorOutput) ToGetCatalogTableStorageDescriptorOutput() GetCatalogTableStorageDescriptorOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorOutput) ToGetCatalogTableStorageDescriptorOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptor] {
	return pulumix.Output[GetCatalogTableStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
func (o GetCatalogTableStorageDescriptorOutput) BucketColumns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) []string { return v.BucketColumns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Configuration block for columns in the table. See `columns` below.
func (o GetCatalogTableStorageDescriptorOutput) Columns() pulumix.GArrayOutput[GetCatalogTableStorageDescriptorColumn, GetCatalogTableStorageDescriptorColumnOutput] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) []GetCatalogTableStorageDescriptorColumn { return v.Columns })
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptorColumn, GetCatalogTableStorageDescriptorColumnOutput]{OutputState: value.OutputState}
}

// Whether the data in the table is compressed.
func (o GetCatalogTableStorageDescriptorOutput) Compressed() pulumix.Output[bool] {
	return pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) bool { return v.Compressed })
}

// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
func (o GetCatalogTableStorageDescriptorOutput) InputFormat() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) string { return v.InputFormat })
}

// Physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
func (o GetCatalogTableStorageDescriptorOutput) Location() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) string { return v.Location })
}

// Is if the table contains any dimension columns.
func (o GetCatalogTableStorageDescriptorOutput) NumberOfBuckets() pulumix.Output[int] {
	return pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) int { return v.NumberOfBuckets })
}

// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
func (o GetCatalogTableStorageDescriptorOutput) OutputFormat() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) string { return v.OutputFormat })
}

// Map of initialization parameters for the SerDe, in key-value form.
func (o GetCatalogTableStorageDescriptorOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Object that references a schema stored in the AWS Glue Schema Registry. See `schemaReference` below.
func (o GetCatalogTableStorageDescriptorOutput) SchemaReferences() pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSchemaReference, GetCatalogTableStorageDescriptorSchemaReferenceOutput] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) []GetCatalogTableStorageDescriptorSchemaReference {
		return v.SchemaReferences
	})
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSchemaReference, GetCatalogTableStorageDescriptorSchemaReferenceOutput]{OutputState: value.OutputState}
}

// Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
func (o GetCatalogTableStorageDescriptorOutput) SerDeInfos() pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSerDeInfo, GetCatalogTableStorageDescriptorSerDeInfoOutput] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) []GetCatalogTableStorageDescriptorSerDeInfo {
		return v.SerDeInfos
	})
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSerDeInfo, GetCatalogTableStorageDescriptorSerDeInfoOutput]{OutputState: value.OutputState}
}

// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
func (o GetCatalogTableStorageDescriptorOutput) SkewedInfos() pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSkewedInfo, GetCatalogTableStorageDescriptorSkewedInfoOutput] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) []GetCatalogTableStorageDescriptorSkewedInfo {
		return v.SkewedInfos
	})
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSkewedInfo, GetCatalogTableStorageDescriptorSkewedInfoOutput]{OutputState: value.OutputState}
}

// Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
func (o GetCatalogTableStorageDescriptorOutput) SortColumns() pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSortColumn, GetCatalogTableStorageDescriptorSortColumnOutput] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) []GetCatalogTableStorageDescriptorSortColumn {
		return v.SortColumns
	})
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSortColumn, GetCatalogTableStorageDescriptorSortColumnOutput]{OutputState: value.OutputState}
}

// Whether the table data is stored in subdirectories.
func (o GetCatalogTableStorageDescriptorOutput) StoredAsSubDirectories() pulumix.Output[bool] {
	return pulumix.Apply[GetCatalogTableStorageDescriptor](o, func(v GetCatalogTableStorageDescriptor) bool { return v.StoredAsSubDirectories })
}

type GetCatalogTableStorageDescriptorColumn struct {
	// Free-form text comment.
	Comment string `pulumi:"comment"`
	// Name of the table.
	Name string `pulumi:"name"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Datatype of data in the Column.
	Type string `pulumi:"type"`
}

type GetCatalogTableStorageDescriptorColumnArgs struct {
	// Free-form text comment.
	Comment pulumix.Input[string] `pulumi:"comment"`
	// Name of the table.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Datatype of data in the Column.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (GetCatalogTableStorageDescriptorColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorColumnArgs) ToGetCatalogTableStorageDescriptorColumnOutput() GetCatalogTableStorageDescriptorColumnOutput {
	return i.ToGetCatalogTableStorageDescriptorColumnOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorColumnArgs) ToGetCatalogTableStorageDescriptorColumnOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorColumnOutput)
}

func (i *GetCatalogTableStorageDescriptorColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorColumnArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorColumnOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorColumn)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorColumnOutput) ToGetCatalogTableStorageDescriptorColumnOutput() GetCatalogTableStorageDescriptorColumnOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorColumnOutput) ToGetCatalogTableStorageDescriptorColumnOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorColumnOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptorColumn] {
	return pulumix.Output[GetCatalogTableStorageDescriptorColumn]{
		OutputState: o.OutputState,
	}
}

// Free-form text comment.
func (o GetCatalogTableStorageDescriptorColumnOutput) Comment() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorColumn](o, func(v GetCatalogTableStorageDescriptorColumn) string { return v.Comment })
}

// Name of the table.
func (o GetCatalogTableStorageDescriptorColumnOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorColumn](o, func(v GetCatalogTableStorageDescriptorColumn) string { return v.Name })
}

// Map of initialization parameters for the SerDe, in key-value form.
func (o GetCatalogTableStorageDescriptorColumnOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptorColumn](o, func(v GetCatalogTableStorageDescriptorColumn) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Datatype of data in the Column.
func (o GetCatalogTableStorageDescriptorColumnOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorColumn](o, func(v GetCatalogTableStorageDescriptorColumn) string { return v.Type })
}

type GetCatalogTableStorageDescriptorSchemaReference struct {
	// Configuration block that contains schema identity fields. See `schemaId` below.
	SchemaIds []GetCatalogTableStorageDescriptorSchemaReferenceSchemaId `pulumi:"schemaIds"`
	// Unique ID assigned to a version of the schema.
	SchemaVersionId string `pulumi:"schemaVersionId"`
	// Version number of the schema.
	SchemaVersionNumber int `pulumi:"schemaVersionNumber"`
}

type GetCatalogTableStorageDescriptorSchemaReferenceArgs struct {
	// Configuration block that contains schema identity fields. See `schemaId` below.
	SchemaIds pulumix.Input[[]*GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs] `pulumi:"schemaIds"`
	// Unique ID assigned to a version of the schema.
	SchemaVersionId pulumix.Input[string] `pulumi:"schemaVersionId"`
	// Version number of the schema.
	SchemaVersionNumber pulumix.Input[int] `pulumi:"schemaVersionNumber"`
}

func (GetCatalogTableStorageDescriptorSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSchemaReference)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorSchemaReferenceArgs) ToGetCatalogTableStorageDescriptorSchemaReferenceOutput() GetCatalogTableStorageDescriptorSchemaReferenceOutput {
	return i.ToGetCatalogTableStorageDescriptorSchemaReferenceOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorSchemaReferenceArgs) ToGetCatalogTableStorageDescriptorSchemaReferenceOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorSchemaReferenceOutput)
}

func (i *GetCatalogTableStorageDescriptorSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorSchemaReferenceArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorSchemaReferenceOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSchemaReference)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorSchemaReferenceOutput) ToGetCatalogTableStorageDescriptorSchemaReferenceOutput() GetCatalogTableStorageDescriptorSchemaReferenceOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSchemaReferenceOutput) ToGetCatalogTableStorageDescriptorSchemaReferenceOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSchemaReferenceOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptorSchemaReference] {
	return pulumix.Output[GetCatalogTableStorageDescriptorSchemaReference]{
		OutputState: o.OutputState,
	}
}

// Configuration block that contains schema identity fields. See `schemaId` below.
func (o GetCatalogTableStorageDescriptorSchemaReferenceOutput) SchemaIds() pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId, GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptorSchemaReference](o, func(v GetCatalogTableStorageDescriptorSchemaReference) []GetCatalogTableStorageDescriptorSchemaReferenceSchemaId {
		return v.SchemaIds
	})
	return pulumix.GArrayOutput[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId, GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput]{OutputState: value.OutputState}
}

// Unique ID assigned to a version of the schema.
func (o GetCatalogTableStorageDescriptorSchemaReferenceOutput) SchemaVersionId() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSchemaReference](o, func(v GetCatalogTableStorageDescriptorSchemaReference) string { return v.SchemaVersionId })
}

// Version number of the schema.
func (o GetCatalogTableStorageDescriptorSchemaReferenceOutput) SchemaVersionNumber() pulumix.Output[int] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSchemaReference](o, func(v GetCatalogTableStorageDescriptorSchemaReference) int { return v.SchemaVersionNumber })
}

type GetCatalogTableStorageDescriptorSchemaReferenceSchemaId struct {
	// Name of the schema registry that contains the schema.
	RegistryName string `pulumi:"registryName"`
	// ARN of the schema.
	SchemaArn string `pulumi:"schemaArn"`
	// Name of the schema.
	SchemaName string `pulumi:"schemaName"`
}

type GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs struct {
	// Name of the schema registry that contains the schema.
	RegistryName pulumix.Input[string] `pulumi:"registryName"`
	// ARN of the schema.
	SchemaArn pulumix.Input[string] `pulumi:"schemaArn"`
	// Name of the schema.
	SchemaName pulumix.Input[string] `pulumi:"schemaName"`
}

func (GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSchemaReferenceSchemaId)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ToGetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput() GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return i.ToGetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ToGetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput)
}

func (i *GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSchemaReferenceSchemaId)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ToGetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput() GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ToGetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId] {
	return pulumix.Output[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId]{
		OutputState: o.OutputState,
	}
}

// Name of the schema registry that contains the schema.
func (o GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) RegistryName() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId](o, func(v GetCatalogTableStorageDescriptorSchemaReferenceSchemaId) string { return v.RegistryName })
}

// ARN of the schema.
func (o GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) SchemaArn() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId](o, func(v GetCatalogTableStorageDescriptorSchemaReferenceSchemaId) string { return v.SchemaArn })
}

// Name of the schema.
func (o GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput) SchemaName() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSchemaReferenceSchemaId](o, func(v GetCatalogTableStorageDescriptorSchemaReferenceSchemaId) string { return v.SchemaName })
}

type GetCatalogTableStorageDescriptorSerDeInfo struct {
	// Name of the table.
	Name string `pulumi:"name"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters map[string]string `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
	SerializationLibrary string `pulumi:"serializationLibrary"`
}

type GetCatalogTableStorageDescriptorSerDeInfoArgs struct {
	// Name of the table.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of initialization parameters for the SerDe, in key-value form.
	Parameters pulumix.Input[map[string]string] `pulumi:"parameters"`
	// Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
	SerializationLibrary pulumix.Input[string] `pulumi:"serializationLibrary"`
}

func (GetCatalogTableStorageDescriptorSerDeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorSerDeInfoArgs) ToGetCatalogTableStorageDescriptorSerDeInfoOutput() GetCatalogTableStorageDescriptorSerDeInfoOutput {
	return i.ToGetCatalogTableStorageDescriptorSerDeInfoOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorSerDeInfoArgs) ToGetCatalogTableStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSerDeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorSerDeInfoOutput)
}

func (i *GetCatalogTableStorageDescriptorSerDeInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorSerDeInfoArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorSerDeInfoOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorSerDeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSerDeInfo)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorSerDeInfoOutput) ToGetCatalogTableStorageDescriptorSerDeInfoOutput() GetCatalogTableStorageDescriptorSerDeInfoOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSerDeInfoOutput) ToGetCatalogTableStorageDescriptorSerDeInfoOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSerDeInfoOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSerDeInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptorSerDeInfo] {
	return pulumix.Output[GetCatalogTableStorageDescriptorSerDeInfo]{
		OutputState: o.OutputState,
	}
}

// Name of the table.
func (o GetCatalogTableStorageDescriptorSerDeInfoOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSerDeInfo](o, func(v GetCatalogTableStorageDescriptorSerDeInfo) string { return v.Name })
}

// Map of initialization parameters for the SerDe, in key-value form.
func (o GetCatalogTableStorageDescriptorSerDeInfoOutput) Parameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptorSerDeInfo](o, func(v GetCatalogTableStorageDescriptorSerDeInfo) map[string]string { return v.Parameters })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
func (o GetCatalogTableStorageDescriptorSerDeInfoOutput) SerializationLibrary() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSerDeInfo](o, func(v GetCatalogTableStorageDescriptorSerDeInfo) string { return v.SerializationLibrary })
}

type GetCatalogTableStorageDescriptorSkewedInfo struct {
	// List of names of columns that contain skewed values.
	SkewedColumnNames []string `pulumi:"skewedColumnNames"`
	// List of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps map[string]string `pulumi:"skewedColumnValueLocationMaps"`
	// Map of skewed values to the columns that contain them.
	SkewedColumnValues []string `pulumi:"skewedColumnValues"`
}

type GetCatalogTableStorageDescriptorSkewedInfoArgs struct {
	// List of names of columns that contain skewed values.
	SkewedColumnNames pulumix.Input[[]string] `pulumi:"skewedColumnNames"`
	// List of values that appear so frequently as to be considered skewed.
	SkewedColumnValueLocationMaps pulumix.Input[map[string]string] `pulumi:"skewedColumnValueLocationMaps"`
	// Map of skewed values to the columns that contain them.
	SkewedColumnValues pulumix.Input[[]string] `pulumi:"skewedColumnValues"`
}

func (GetCatalogTableStorageDescriptorSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorSkewedInfoArgs) ToGetCatalogTableStorageDescriptorSkewedInfoOutput() GetCatalogTableStorageDescriptorSkewedInfoOutput {
	return i.ToGetCatalogTableStorageDescriptorSkewedInfoOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorSkewedInfoArgs) ToGetCatalogTableStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorSkewedInfoOutput)
}

func (i *GetCatalogTableStorageDescriptorSkewedInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorSkewedInfoArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorSkewedInfoOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSkewedInfo)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorSkewedInfoOutput) ToGetCatalogTableStorageDescriptorSkewedInfoOutput() GetCatalogTableStorageDescriptorSkewedInfoOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSkewedInfoOutput) ToGetCatalogTableStorageDescriptorSkewedInfoOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSkewedInfoOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSkewedInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptorSkewedInfo] {
	return pulumix.Output[GetCatalogTableStorageDescriptorSkewedInfo]{
		OutputState: o.OutputState,
	}
}

// List of names of columns that contain skewed values.
func (o GetCatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptorSkewedInfo](o, func(v GetCatalogTableStorageDescriptorSkewedInfo) []string { return v.SkewedColumnNames })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// List of values that appear so frequently as to be considered skewed.
func (o GetCatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptorSkewedInfo](o, func(v GetCatalogTableStorageDescriptorSkewedInfo) map[string]string {
		return v.SkewedColumnValueLocationMaps
	})
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Map of skewed values to the columns that contain them.
func (o GetCatalogTableStorageDescriptorSkewedInfoOutput) SkewedColumnValues() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetCatalogTableStorageDescriptorSkewedInfo](o, func(v GetCatalogTableStorageDescriptorSkewedInfo) []string { return v.SkewedColumnValues })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetCatalogTableStorageDescriptorSortColumn struct {
	// Name of the column.
	Column string `pulumi:"column"`
	// Whether the column is sorted in ascending (`1`) or descending order (`0`).
	SortOrder int `pulumi:"sortOrder"`
}

type GetCatalogTableStorageDescriptorSortColumnArgs struct {
	// Name of the column.
	Column pulumix.Input[string] `pulumi:"column"`
	// Whether the column is sorted in ascending (`1`) or descending order (`0`).
	SortOrder pulumix.Input[int] `pulumi:"sortOrder"`
}

func (GetCatalogTableStorageDescriptorSortColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (i GetCatalogTableStorageDescriptorSortColumnArgs) ToGetCatalogTableStorageDescriptorSortColumnOutput() GetCatalogTableStorageDescriptorSortColumnOutput {
	return i.ToGetCatalogTableStorageDescriptorSortColumnOutputWithContext(context.Background())
}

func (i GetCatalogTableStorageDescriptorSortColumnArgs) ToGetCatalogTableStorageDescriptorSortColumnOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSortColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableStorageDescriptorSortColumnOutput)
}

func (i *GetCatalogTableStorageDescriptorSortColumnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableStorageDescriptorSortColumnArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableStorageDescriptorSortColumnOutput struct{ *pulumi.OutputState }

func (GetCatalogTableStorageDescriptorSortColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableStorageDescriptorSortColumn)(nil)).Elem()
}

func (o GetCatalogTableStorageDescriptorSortColumnOutput) ToGetCatalogTableStorageDescriptorSortColumnOutput() GetCatalogTableStorageDescriptorSortColumnOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSortColumnOutput) ToGetCatalogTableStorageDescriptorSortColumnOutputWithContext(ctx context.Context) GetCatalogTableStorageDescriptorSortColumnOutput {
	return o
}

func (o GetCatalogTableStorageDescriptorSortColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableStorageDescriptorSortColumn] {
	return pulumix.Output[GetCatalogTableStorageDescriptorSortColumn]{
		OutputState: o.OutputState,
	}
}

// Name of the column.
func (o GetCatalogTableStorageDescriptorSortColumnOutput) Column() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSortColumn](o, func(v GetCatalogTableStorageDescriptorSortColumn) string { return v.Column })
}

// Whether the column is sorted in ascending (`1`) or descending order (`0`).
func (o GetCatalogTableStorageDescriptorSortColumnOutput) SortOrder() pulumix.Output[int] {
	return pulumix.Apply[GetCatalogTableStorageDescriptorSortColumn](o, func(v GetCatalogTableStorageDescriptorSortColumn) int { return v.SortOrder })
}

type GetCatalogTableTargetTable struct {
	// ID of the Glue Catalog and database where the table metadata resides. If omitted, this defaults to the current AWS Account ID.
	CatalogId string `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides.
	DatabaseName string `pulumi:"databaseName"`
	// Name of the table.
	Name string `pulumi:"name"`
}

type GetCatalogTableTargetTableArgs struct {
	// ID of the Glue Catalog and database where the table metadata resides. If omitted, this defaults to the current AWS Account ID.
	CatalogId pulumix.Input[string] `pulumi:"catalogId"`
	// Name of the metadata database where the table metadata resides.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
	// Name of the table.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetCatalogTableTargetTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableTargetTable)(nil)).Elem()
}

func (i GetCatalogTableTargetTableArgs) ToGetCatalogTableTargetTableOutput() GetCatalogTableTargetTableOutput {
	return i.ToGetCatalogTableTargetTableOutputWithContext(context.Background())
}

func (i GetCatalogTableTargetTableArgs) ToGetCatalogTableTargetTableOutputWithContext(ctx context.Context) GetCatalogTableTargetTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogTableTargetTableOutput)
}

func (i *GetCatalogTableTargetTableArgs) ToOutput(ctx context.Context) pulumix.Output[*GetCatalogTableTargetTableArgs] {
	return pulumix.Val(i)
}

type GetCatalogTableTargetTableOutput struct{ *pulumi.OutputState }

func (GetCatalogTableTargetTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogTableTargetTable)(nil)).Elem()
}

func (o GetCatalogTableTargetTableOutput) ToGetCatalogTableTargetTableOutput() GetCatalogTableTargetTableOutput {
	return o
}

func (o GetCatalogTableTargetTableOutput) ToGetCatalogTableTargetTableOutputWithContext(ctx context.Context) GetCatalogTableTargetTableOutput {
	return o
}

func (o GetCatalogTableTargetTableOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogTableTargetTable] {
	return pulumix.Output[GetCatalogTableTargetTable]{
		OutputState: o.OutputState,
	}
}

// ID of the Glue Catalog and database where the table metadata resides. If omitted, this defaults to the current AWS Account ID.
func (o GetCatalogTableTargetTableOutput) CatalogId() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableTargetTable](o, func(v GetCatalogTableTargetTable) string { return v.CatalogId })
}

// Name of the metadata database where the table metadata resides.
func (o GetCatalogTableTargetTableOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableTargetTable](o, func(v GetCatalogTableTargetTable) string { return v.DatabaseName })
}

// Name of the table.
func (o GetCatalogTableTargetTableOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetCatalogTableTargetTable](o, func(v GetCatalogTableTargetTable) string { return v.Name })
}

type GetConnectionPhysicalConnectionRequirement struct {
	AvailabilityZone     string   `pulumi:"availabilityZone"`
	SecurityGroupIdLists []string `pulumi:"securityGroupIdLists"`
	SubnetId             string   `pulumi:"subnetId"`
}

type GetConnectionPhysicalConnectionRequirementArgs struct {
	AvailabilityZone     pulumix.Input[string]   `pulumi:"availabilityZone"`
	SecurityGroupIdLists pulumix.Input[[]string] `pulumi:"securityGroupIdLists"`
	SubnetId             pulumix.Input[string]   `pulumi:"subnetId"`
}

func (GetConnectionPhysicalConnectionRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionPhysicalConnectionRequirement)(nil)).Elem()
}

func (i GetConnectionPhysicalConnectionRequirementArgs) ToGetConnectionPhysicalConnectionRequirementOutput() GetConnectionPhysicalConnectionRequirementOutput {
	return i.ToGetConnectionPhysicalConnectionRequirementOutputWithContext(context.Background())
}

func (i GetConnectionPhysicalConnectionRequirementArgs) ToGetConnectionPhysicalConnectionRequirementOutputWithContext(ctx context.Context) GetConnectionPhysicalConnectionRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConnectionPhysicalConnectionRequirementOutput)
}

func (i *GetConnectionPhysicalConnectionRequirementArgs) ToOutput(ctx context.Context) pulumix.Output[*GetConnectionPhysicalConnectionRequirementArgs] {
	return pulumix.Val(i)
}

type GetConnectionPhysicalConnectionRequirementOutput struct{ *pulumi.OutputState }

func (GetConnectionPhysicalConnectionRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionPhysicalConnectionRequirement)(nil)).Elem()
}

func (o GetConnectionPhysicalConnectionRequirementOutput) ToGetConnectionPhysicalConnectionRequirementOutput() GetConnectionPhysicalConnectionRequirementOutput {
	return o
}

func (o GetConnectionPhysicalConnectionRequirementOutput) ToGetConnectionPhysicalConnectionRequirementOutputWithContext(ctx context.Context) GetConnectionPhysicalConnectionRequirementOutput {
	return o
}

func (o GetConnectionPhysicalConnectionRequirementOutput) ToOutput(ctx context.Context) pulumix.Output[GetConnectionPhysicalConnectionRequirement] {
	return pulumix.Output[GetConnectionPhysicalConnectionRequirement]{
		OutputState: o.OutputState,
	}
}

func (o GetConnectionPhysicalConnectionRequirementOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[GetConnectionPhysicalConnectionRequirement](o, func(v GetConnectionPhysicalConnectionRequirement) string { return v.AvailabilityZone })
}

func (o GetConnectionPhysicalConnectionRequirementOutput) SecurityGroupIdLists() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetConnectionPhysicalConnectionRequirement](o, func(v GetConnectionPhysicalConnectionRequirement) []string { return v.SecurityGroupIdLists })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetConnectionPhysicalConnectionRequirementOutput) SubnetId() pulumix.Output[string] {
	return pulumix.Apply[GetConnectionPhysicalConnectionRequirement](o, func(v GetConnectionPhysicalConnectionRequirement) string { return v.SubnetId })
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting struct {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	ConnectionPasswordEncryptions []GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption `pulumi:"connectionPasswordEncryptions"`
	// Encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	EncryptionAtRests []GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest `pulumi:"encryptionAtRests"`
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingArgs struct {
	// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
	ConnectionPasswordEncryptions pulumix.Input[[]*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs] `pulumi:"connectionPasswordEncryptions"`
	// Encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
	EncryptionAtRests pulumix.Input[[]*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs] `pulumi:"encryptionAtRests"`
}

func (GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting)(nil)).Elem()
}

func (i GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingArgs) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput() GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput {
	return i.ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutputWithContext(context.Background())
}

func (i GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingArgs) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutputWithContext(ctx context.Context) GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput)
}

func (i *GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingArgs] {
	return pulumix.Val(i)
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput struct{ *pulumi.OutputState }

func (GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting)(nil)).Elem()
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput() GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput {
	return o
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutputWithContext(ctx context.Context) GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput {
	return o
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting] {
	return pulumix.Output[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting]{
		OutputState: o.OutputState,
	}
}

// When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput) ConnectionPasswordEncryptions() pulumix.GArrayOutput[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption, GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput] {
	value := pulumix.Apply[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting](o, func(v GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting) []GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption {
		return v.ConnectionPasswordEncryptions
	})
	return pulumix.GArrayOutput[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption, GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput]{OutputState: value.OutputState}
}

// Encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput) EncryptionAtRests() pulumix.GArrayOutput[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest, GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput] {
	value := pulumix.Apply[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting](o, func(v GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting) []GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest {
		return v.EncryptionAtRests
	})
	return pulumix.GArrayOutput[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest, GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput]{OutputState: value.OutputState}
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption struct {
	// KMS key ARN that is used to encrypt the connection password.
	AwsKmsKeyId string `pulumi:"awsKmsKeyId"`
	// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	ReturnConnectionPasswordEncrypted bool `pulumi:"returnConnectionPasswordEncrypted"`
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs struct {
	// KMS key ARN that is used to encrypt the connection password.
	AwsKmsKeyId pulumix.Input[string] `pulumi:"awsKmsKeyId"`
	// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
	ReturnConnectionPasswordEncrypted pulumix.Input[bool] `pulumi:"returnConnectionPasswordEncrypted"`
}

func (GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption)(nil)).Elem()
}

func (i GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput() GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput {
	return i.ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutputWithContext(context.Background())
}

func (i GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutputWithContext(ctx context.Context) GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput)
}

func (i *GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionArgs] {
	return pulumix.Val(i)
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput struct{ *pulumi.OutputState }

func (GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption)(nil)).Elem()
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput() GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput {
	return o
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutputWithContext(ctx context.Context) GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput {
	return o
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption] {
	return pulumix.Output[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption]{
		OutputState: o.OutputState,
	}
}

// KMS key ARN that is used to encrypt the connection password.
func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput) AwsKmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption](o, func(v GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption) string {
		return v.AwsKmsKeyId
	})
}

// When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput) ReturnConnectionPasswordEncrypted() pulumix.Output[bool] {
	return pulumix.Apply[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption](o, func(v GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption) bool {
		return v.ReturnConnectionPasswordEncrypted
	})
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest struct {
	// The encryption-at-rest mode for encrypting Data Catalog data.
	CatalogEncryptionMode string `pulumi:"catalogEncryptionMode"`
	// ARN of the AWS KMS key to use for encryption at rest.
	SseAwsKmsKeyId string `pulumi:"sseAwsKmsKeyId"`
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs struct {
	// The encryption-at-rest mode for encrypting Data Catalog data.
	CatalogEncryptionMode pulumix.Input[string] `pulumi:"catalogEncryptionMode"`
	// ARN of the AWS KMS key to use for encryption at rest.
	SseAwsKmsKeyId pulumix.Input[string] `pulumi:"sseAwsKmsKeyId"`
}

func (GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest)(nil)).Elem()
}

func (i GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput() GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput {
	return i.ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutputWithContext(context.Background())
}

func (i GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutputWithContext(ctx context.Context) GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput)
}

func (i *GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestArgs] {
	return pulumix.Val(i)
}

type GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest)(nil)).Elem()
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput() GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput {
	return o
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput) ToGetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutputWithContext(ctx context.Context) GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput {
	return o
}

func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest] {
	return pulumix.Output[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

// The encryption-at-rest mode for encrypting Data Catalog data.
func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput) CatalogEncryptionMode() pulumix.Output[string] {
	return pulumix.Apply[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest](o, func(v GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest) string {
		return v.CatalogEncryptionMode
	})
}

// ARN of the AWS KMS key to use for encryption at rest.
func (o GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput) SseAwsKmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest](o, func(v GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest) string {
		return v.SseAwsKmsKeyId
	})
}

type GetScriptDagEdge struct {
	// ID of the node at which the edge starts.
	Source string `pulumi:"source"`
	// ID of the node at which the edge ends.
	Target string `pulumi:"target"`
	// Target of the edge.
	TargetParameter *string `pulumi:"targetParameter"`
}

type GetScriptDagEdgeArgs struct {
	// ID of the node at which the edge starts.
	Source pulumix.Input[string] `pulumi:"source"`
	// ID of the node at which the edge ends.
	Target pulumix.Input[string] `pulumi:"target"`
	// Target of the edge.
	TargetParameter pulumix.Input[*string] `pulumi:"targetParameter"`
}

func (GetScriptDagEdgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagEdge)(nil)).Elem()
}

func (i GetScriptDagEdgeArgs) ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput {
	return i.ToGetScriptDagEdgeOutputWithContext(context.Background())
}

func (i GetScriptDagEdgeArgs) ToGetScriptDagEdgeOutputWithContext(ctx context.Context) GetScriptDagEdgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagEdgeOutput)
}

func (i *GetScriptDagEdgeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetScriptDagEdgeArgs] {
	return pulumix.Val(i)
}

type GetScriptDagEdgeOutput struct{ *pulumi.OutputState }

func (GetScriptDagEdgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagEdge)(nil)).Elem()
}

func (o GetScriptDagEdgeOutput) ToGetScriptDagEdgeOutput() GetScriptDagEdgeOutput {
	return o
}

func (o GetScriptDagEdgeOutput) ToGetScriptDagEdgeOutputWithContext(ctx context.Context) GetScriptDagEdgeOutput {
	return o
}

func (o GetScriptDagEdgeOutput) ToOutput(ctx context.Context) pulumix.Output[GetScriptDagEdge] {
	return pulumix.Output[GetScriptDagEdge]{
		OutputState: o.OutputState,
	}
}

// ID of the node at which the edge starts.
func (o GetScriptDagEdgeOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[GetScriptDagEdge](o, func(v GetScriptDagEdge) string { return v.Source })
}

// ID of the node at which the edge ends.
func (o GetScriptDagEdgeOutput) Target() pulumix.Output[string] {
	return pulumix.Apply[GetScriptDagEdge](o, func(v GetScriptDagEdge) string { return v.Target })
}

// Target of the edge.
func (o GetScriptDagEdgeOutput) TargetParameter() pulumix.Output[*string] {
	return pulumix.Apply[GetScriptDagEdge](o, func(v GetScriptDagEdge) *string { return v.TargetParameter })
}

type GetScriptDagNode struct {
	// Nested configuration an argument or property of a node. Defined below.
	Args []GetScriptDagNodeArg `pulumi:"args"`
	// Node identifier that is unique within the node's graph.
	Id string `pulumi:"id"`
	// Line number of the node.
	LineNumber *int `pulumi:"lineNumber"`
	// Type of node this is.
	NodeType string `pulumi:"nodeType"`
}

type GetScriptDagNodeArgs struct {
	// Nested configuration an argument or property of a node. Defined below.
	Args pulumix.Input[[]*GetScriptDagNodeArgArgs] `pulumi:"args"`
	// Node identifier that is unique within the node's graph.
	Id pulumix.Input[string] `pulumi:"id"`
	// Line number of the node.
	LineNumber pulumix.Input[*int] `pulumi:"lineNumber"`
	// Type of node this is.
	NodeType pulumix.Input[string] `pulumi:"nodeType"`
}

func (GetScriptDagNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNode)(nil)).Elem()
}

func (i GetScriptDagNodeArgs) ToGetScriptDagNodeOutput() GetScriptDagNodeOutput {
	return i.ToGetScriptDagNodeOutputWithContext(context.Background())
}

func (i GetScriptDagNodeArgs) ToGetScriptDagNodeOutputWithContext(ctx context.Context) GetScriptDagNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagNodeOutput)
}

func (i *GetScriptDagNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetScriptDagNodeArgs] {
	return pulumix.Val(i)
}

type GetScriptDagNodeOutput struct{ *pulumi.OutputState }

func (GetScriptDagNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNode)(nil)).Elem()
}

func (o GetScriptDagNodeOutput) ToGetScriptDagNodeOutput() GetScriptDagNodeOutput {
	return o
}

func (o GetScriptDagNodeOutput) ToGetScriptDagNodeOutputWithContext(ctx context.Context) GetScriptDagNodeOutput {
	return o
}

func (o GetScriptDagNodeOutput) ToOutput(ctx context.Context) pulumix.Output[GetScriptDagNode] {
	return pulumix.Output[GetScriptDagNode]{
		OutputState: o.OutputState,
	}
}

// Nested configuration an argument or property of a node. Defined below.
func (o GetScriptDagNodeOutput) Args() pulumix.GArrayOutput[GetScriptDagNodeArg, GetScriptDagNodeArgOutput] {
	value := pulumix.Apply[GetScriptDagNode](o, func(v GetScriptDagNode) []GetScriptDagNodeArg { return v.Args })
	return pulumix.GArrayOutput[GetScriptDagNodeArg, GetScriptDagNodeArgOutput]{OutputState: value.OutputState}
}

// Node identifier that is unique within the node's graph.
func (o GetScriptDagNodeOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetScriptDagNode](o, func(v GetScriptDagNode) string { return v.Id })
}

// Line number of the node.
func (o GetScriptDagNodeOutput) LineNumber() pulumix.Output[*int] {
	return pulumix.Apply[GetScriptDagNode](o, func(v GetScriptDagNode) *int { return v.LineNumber })
}

// Type of node this is.
func (o GetScriptDagNodeOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[GetScriptDagNode](o, func(v GetScriptDagNode) string { return v.NodeType })
}

type GetScriptDagNodeArg struct {
	// Name of the argument or property.
	Name string `pulumi:"name"`
	// Boolean if the value is used as a parameter. Defaults to `false`.
	Param *bool `pulumi:"param"`
	// Value of the argument or property.
	Value string `pulumi:"value"`
}

type GetScriptDagNodeArgArgs struct {
	// Name of the argument or property.
	Name pulumix.Input[string] `pulumi:"name"`
	// Boolean if the value is used as a parameter. Defaults to `false`.
	Param pulumix.Input[*bool] `pulumi:"param"`
	// Value of the argument or property.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetScriptDagNodeArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNodeArg)(nil)).Elem()
}

func (i GetScriptDagNodeArgArgs) ToGetScriptDagNodeArgOutput() GetScriptDagNodeArgOutput {
	return i.ToGetScriptDagNodeArgOutputWithContext(context.Background())
}

func (i GetScriptDagNodeArgArgs) ToGetScriptDagNodeArgOutputWithContext(ctx context.Context) GetScriptDagNodeArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScriptDagNodeArgOutput)
}

func (i *GetScriptDagNodeArgArgs) ToOutput(ctx context.Context) pulumix.Output[*GetScriptDagNodeArgArgs] {
	return pulumix.Val(i)
}

type GetScriptDagNodeArgOutput struct{ *pulumi.OutputState }

func (GetScriptDagNodeArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptDagNodeArg)(nil)).Elem()
}

func (o GetScriptDagNodeArgOutput) ToGetScriptDagNodeArgOutput() GetScriptDagNodeArgOutput {
	return o
}

func (o GetScriptDagNodeArgOutput) ToGetScriptDagNodeArgOutputWithContext(ctx context.Context) GetScriptDagNodeArgOutput {
	return o
}

func (o GetScriptDagNodeArgOutput) ToOutput(ctx context.Context) pulumix.Output[GetScriptDagNodeArg] {
	return pulumix.Output[GetScriptDagNodeArg]{
		OutputState: o.OutputState,
	}
}

// Name of the argument or property.
func (o GetScriptDagNodeArgOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetScriptDagNodeArg](o, func(v GetScriptDagNodeArg) string { return v.Name })
}

// Boolean if the value is used as a parameter. Defaults to `false`.
func (o GetScriptDagNodeArgOutput) Param() pulumix.Output[*bool] {
	return pulumix.Apply[GetScriptDagNodeArg](o, func(v GetScriptDagNodeArg) *bool { return v.Param })
}

// Value of the argument or property.
func (o GetScriptDagNodeArgOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetScriptDagNodeArg](o, func(v GetScriptDagNodeArg) string { return v.Value })
}

func init() {
	pulumi.RegisterOutputType(CatalogDatabaseCreateTableDefaultPermissionOutput{})
	pulumi.RegisterOutputType(CatalogDatabaseCreateTableDefaultPermissionPrincipalOutput{})
	pulumi.RegisterOutputType(CatalogDatabaseTargetDatabaseOutput{})
	pulumi.RegisterOutputType(CatalogTablePartitionIndexOutput{})
	pulumi.RegisterOutputType(CatalogTablePartitionKeyOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorColumnOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSchemaReferenceOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSerDeInfoOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSkewedInfoOutput{})
	pulumi.RegisterOutputType(CatalogTableStorageDescriptorSortColumnOutput{})
	pulumi.RegisterOutputType(CatalogTableTargetTableOutput{})
	pulumi.RegisterOutputType(ClassifierCsvClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierGrokClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierJsonClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierXmlClassifierOutput{})
	pulumi.RegisterOutputType(ConnectionPhysicalConnectionRequirementsOutput{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDeltaTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDynamodbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerHudiTargetOutput{})
	pulumi.RegisterOutputType(CrawlerIcebergTargetOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetOutput{})
	pulumi.RegisterOutputType(CrawlerLakeFormationConfigurationOutput{})
	pulumi.RegisterOutputType(CrawlerLineageConfigurationOutput{})
	pulumi.RegisterOutputType(CrawlerMongodbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerRecrawlPolicyOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(DataQualityRulesetTargetTableOutput{})
	pulumi.RegisterOutputType(JobCommandOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyOutput{})
	pulumi.RegisterOutputType(MLTransformInputRecordTableOutput{})
	pulumi.RegisterOutputType(MLTransformParametersOutput{})
	pulumi.RegisterOutputType(MLTransformParametersFindMatchesParametersOutput{})
	pulumi.RegisterOutputType(MLTransformSchemaOutput{})
	pulumi.RegisterOutputType(PartitionIndexPartitionIndexOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorColumnOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSerDeInfoOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSkewedInfoOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorSortColumnOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationCloudwatchEncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationS3EncryptionOutput{})
	pulumi.RegisterOutputType(TriggerActionOutput{})
	pulumi.RegisterOutputType(TriggerActionNotificationPropertyOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionOutput{})
	pulumi.RegisterOutputType(TriggerPredicateOutput{})
	pulumi.RegisterOutputType(TriggerPredicateConditionOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceUriOutput{})
	pulumi.RegisterOutputType(GetCatalogTablePartitionIndexOutput{})
	pulumi.RegisterOutputType(GetCatalogTablePartitionKeyOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorColumnOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorSchemaReferenceOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorSchemaReferenceSchemaIdOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorSerDeInfoOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorSkewedInfoOutput{})
	pulumi.RegisterOutputType(GetCatalogTableStorageDescriptorSortColumnOutput{})
	pulumi.RegisterOutputType(GetCatalogTableTargetTableOutput{})
	pulumi.RegisterOutputType(GetConnectionPhysicalConnectionRequirementOutput{})
	pulumi.RegisterOutputType(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingOutput{})
	pulumi.RegisterOutputType(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryptionOutput{})
	pulumi.RegisterOutputType(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(GetScriptDagEdgeOutput{})
	pulumi.RegisterOutputType(GetScriptDagNodeOutput{})
	pulumi.RegisterOutputType(GetScriptDagNodeArgOutput{})
}
