// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Amazon API Gateway Version 2 authorizer.
// More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
type Authorizer struct {
	pulumi.CustomResourceState

	// API identifier.
	ApiId pulumix.Output[string] `pulumi:"apiId"`
	// Required credentials as an IAM role for API Gateway to invoke the authorizer.
	// Supported only for `REQUEST` authorizers.
	AuthorizerCredentialsArn pulumix.Output[*string] `pulumi:"authorizerCredentialsArn"`
	// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
	// Valid values: `1.0`, `2.0`.
	AuthorizerPayloadFormatVersion pulumix.Output[*string] `pulumi:"authorizerPayloadFormatVersion"`
	// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
	// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
	// Supported only for HTTP API Lambda authorizers.
	AuthorizerResultTtlInSeconds pulumix.Output[int] `pulumi:"authorizerResultTtlInSeconds"`
	// Authorizer type. Valid values: `JWT`, `REQUEST`.
	// Specify `REQUEST` for a Lambda function using incoming request parameters.
	// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
	AuthorizerType pulumix.Output[string] `pulumi:"authorizerType"`
	// Authorizer's Uniform Resource Identifier (URI).
	// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invokeArn` attribute of the `lambda.Function` resource.
	// Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
	AuthorizerUri pulumix.Output[*string] `pulumi:"authorizerUri"`
	// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
	// Supported only for HTTP APIs.
	EnableSimpleResponses pulumix.Output[*bool] `pulumi:"enableSimpleResponses"`
	// Identity sources for which authorization is requested.
	// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
	// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
	IdentitySources pulumix.ArrayOutput[string] `pulumi:"identitySources"`
	// Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
	// Supported only for HTTP APIs.
	JwtConfiguration pulumix.GPtrOutput[AuthorizerJwtConfiguration, AuthorizerJwtConfigurationOutput] `pulumi:"jwtConfiguration"`
	// Name of the authorizer. Must be between 1 and 128 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewAuthorizer registers a new resource with the given unique name, arguments, and options.
func NewAuthorizer(ctx *pulumi.Context,
	name string, args *AuthorizerArgs, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.AuthorizerType == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizerType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authorizer
	err := ctx.RegisterResource("aws:apigatewayv2/authorizer:Authorizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizer gets an existing Authorizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizerState, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	var resource Authorizer
	err := ctx.ReadResource("aws:apigatewayv2/authorizer:Authorizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authorizer resources.
type authorizerState struct {
	// API identifier.
	ApiId *string `pulumi:"apiId"`
	// Required credentials as an IAM role for API Gateway to invoke the authorizer.
	// Supported only for `REQUEST` authorizers.
	AuthorizerCredentialsArn *string `pulumi:"authorizerCredentialsArn"`
	// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
	// Valid values: `1.0`, `2.0`.
	AuthorizerPayloadFormatVersion *string `pulumi:"authorizerPayloadFormatVersion"`
	// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
	// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
	// Supported only for HTTP API Lambda authorizers.
	AuthorizerResultTtlInSeconds *int `pulumi:"authorizerResultTtlInSeconds"`
	// Authorizer type. Valid values: `JWT`, `REQUEST`.
	// Specify `REQUEST` for a Lambda function using incoming request parameters.
	// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
	AuthorizerType *string `pulumi:"authorizerType"`
	// Authorizer's Uniform Resource Identifier (URI).
	// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invokeArn` attribute of the `lambda.Function` resource.
	// Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
	AuthorizerUri *string `pulumi:"authorizerUri"`
	// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
	// Supported only for HTTP APIs.
	EnableSimpleResponses *bool `pulumi:"enableSimpleResponses"`
	// Identity sources for which authorization is requested.
	// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
	// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
	IdentitySources []string `pulumi:"identitySources"`
	// Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
	// Supported only for HTTP APIs.
	JwtConfiguration *AuthorizerJwtConfiguration `pulumi:"jwtConfiguration"`
	// Name of the authorizer. Must be between 1 and 128 characters in length.
	Name *string `pulumi:"name"`
}

type AuthorizerState struct {
	// API identifier.
	ApiId pulumix.Input[*string]
	// Required credentials as an IAM role for API Gateway to invoke the authorizer.
	// Supported only for `REQUEST` authorizers.
	AuthorizerCredentialsArn pulumix.Input[*string]
	// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
	// Valid values: `1.0`, `2.0`.
	AuthorizerPayloadFormatVersion pulumix.Input[*string]
	// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
	// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
	// Supported only for HTTP API Lambda authorizers.
	AuthorizerResultTtlInSeconds pulumix.Input[*int]
	// Authorizer type. Valid values: `JWT`, `REQUEST`.
	// Specify `REQUEST` for a Lambda function using incoming request parameters.
	// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
	AuthorizerType pulumix.Input[*string]
	// Authorizer's Uniform Resource Identifier (URI).
	// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invokeArn` attribute of the `lambda.Function` resource.
	// Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
	AuthorizerUri pulumix.Input[*string]
	// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
	// Supported only for HTTP APIs.
	EnableSimpleResponses pulumix.Input[*bool]
	// Identity sources for which authorization is requested.
	// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
	// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
	IdentitySources pulumix.Input[[]string]
	// Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
	// Supported only for HTTP APIs.
	JwtConfiguration pulumix.Input[*AuthorizerJwtConfigurationArgs]
	// Name of the authorizer. Must be between 1 and 128 characters in length.
	Name pulumix.Input[*string]
}

func (AuthorizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerState)(nil)).Elem()
}

type authorizerArgs struct {
	// API identifier.
	ApiId string `pulumi:"apiId"`
	// Required credentials as an IAM role for API Gateway to invoke the authorizer.
	// Supported only for `REQUEST` authorizers.
	AuthorizerCredentialsArn *string `pulumi:"authorizerCredentialsArn"`
	// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
	// Valid values: `1.0`, `2.0`.
	AuthorizerPayloadFormatVersion *string `pulumi:"authorizerPayloadFormatVersion"`
	// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
	// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
	// Supported only for HTTP API Lambda authorizers.
	AuthorizerResultTtlInSeconds *int `pulumi:"authorizerResultTtlInSeconds"`
	// Authorizer type. Valid values: `JWT`, `REQUEST`.
	// Specify `REQUEST` for a Lambda function using incoming request parameters.
	// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
	AuthorizerType string `pulumi:"authorizerType"`
	// Authorizer's Uniform Resource Identifier (URI).
	// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invokeArn` attribute of the `lambda.Function` resource.
	// Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
	AuthorizerUri *string `pulumi:"authorizerUri"`
	// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
	// Supported only for HTTP APIs.
	EnableSimpleResponses *bool `pulumi:"enableSimpleResponses"`
	// Identity sources for which authorization is requested.
	// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
	// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
	IdentitySources []string `pulumi:"identitySources"`
	// Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
	// Supported only for HTTP APIs.
	JwtConfiguration *AuthorizerJwtConfiguration `pulumi:"jwtConfiguration"`
	// Name of the authorizer. Must be between 1 and 128 characters in length.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Authorizer resource.
type AuthorizerArgs struct {
	// API identifier.
	ApiId pulumix.Input[string]
	// Required credentials as an IAM role for API Gateway to invoke the authorizer.
	// Supported only for `REQUEST` authorizers.
	AuthorizerCredentialsArn pulumix.Input[*string]
	// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
	// Valid values: `1.0`, `2.0`.
	AuthorizerPayloadFormatVersion pulumix.Input[*string]
	// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
	// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
	// Supported only for HTTP API Lambda authorizers.
	AuthorizerResultTtlInSeconds pulumix.Input[*int]
	// Authorizer type. Valid values: `JWT`, `REQUEST`.
	// Specify `REQUEST` for a Lambda function using incoming request parameters.
	// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
	AuthorizerType pulumix.Input[string]
	// Authorizer's Uniform Resource Identifier (URI).
	// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invokeArn` attribute of the `lambda.Function` resource.
	// Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
	AuthorizerUri pulumix.Input[*string]
	// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
	// Supported only for HTTP APIs.
	EnableSimpleResponses pulumix.Input[*bool]
	// Identity sources for which authorization is requested.
	// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
	// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
	IdentitySources pulumix.Input[[]string]
	// Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
	// Supported only for HTTP APIs.
	JwtConfiguration pulumix.Input[*AuthorizerJwtConfigurationArgs]
	// Name of the authorizer. Must be between 1 and 128 characters in length.
	Name pulumix.Input[*string]
}

func (AuthorizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerArgs)(nil)).Elem()
}

type AuthorizerOutput struct{ *pulumi.OutputState }

func (AuthorizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authorizer)(nil)).Elem()
}

func (o AuthorizerOutput) ToAuthorizerOutput() AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ToOutput(ctx context.Context) pulumix.Output[Authorizer] {
	return pulumix.Output[Authorizer]{
		OutputState: o.OutputState,
	}
}

// API identifier.
func (o AuthorizerOutput) ApiId() pulumix.Output[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[string] { return v.ApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Required credentials as an IAM role for API Gateway to invoke the authorizer.
// Supported only for `REQUEST` authorizers.
func (o AuthorizerOutput) AuthorizerCredentialsArn() pulumix.Output[*string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*string] { return v.AuthorizerCredentialsArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
// Valid values: `1.0`, `2.0`.
func (o AuthorizerOutput) AuthorizerPayloadFormatVersion() pulumix.Output[*string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*string] { return v.AuthorizerPayloadFormatVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
// Supported only for HTTP API Lambda authorizers.
func (o AuthorizerOutput) AuthorizerResultTtlInSeconds() pulumix.Output[int] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[int] { return v.AuthorizerResultTtlInSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Authorizer type. Valid values: `JWT`, `REQUEST`.
// Specify `REQUEST` for a Lambda function using incoming request parameters.
// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
func (o AuthorizerOutput) AuthorizerType() pulumix.Output[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[string] { return v.AuthorizerType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Authorizer's Uniform Resource Identifier (URI).
// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invokeArn` attribute of the `lambda.Function` resource.
// Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
func (o AuthorizerOutput) AuthorizerUri() pulumix.Output[*string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*string] { return v.AuthorizerUri })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
// Supported only for HTTP APIs.
func (o AuthorizerOutput) EnableSimpleResponses() pulumix.Output[*bool] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[*bool] { return v.EnableSimpleResponses })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Identity sources for which authorization is requested.
// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
func (o AuthorizerOutput) IdentitySources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.ArrayOutput[string] { return v.IdentitySources })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
// Supported only for HTTP APIs.
func (o AuthorizerOutput) JwtConfiguration() pulumix.GPtrOutput[AuthorizerJwtConfiguration, AuthorizerJwtConfigurationOutput] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.GPtrOutput[AuthorizerJwtConfiguration, AuthorizerJwtConfigurationOutput] {
		return v.JwtConfiguration
	})
	unwrapped := pulumix.Flatten[*AuthorizerJwtConfiguration, pulumix.GPtrOutput[AuthorizerJwtConfiguration, AuthorizerJwtConfigurationOutput]](value)
	return pulumix.GPtrOutput[AuthorizerJwtConfiguration, AuthorizerJwtConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Name of the authorizer. Must be between 1 and 128 characters in length.
func (o AuthorizerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Authorizer](o, func(v Authorizer) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AuthorizerOutput{})
}
