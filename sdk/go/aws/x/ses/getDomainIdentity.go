// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve the SES domain identity
func LookupDomainIdentity(ctx *pulumi.Context, args *LookupDomainIdentityArgs, opts ...pulumi.InvokeOption) (*LookupDomainIdentityResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainIdentityResult
	err := ctx.Invoke("aws:ses/getDomainIdentity:getDomainIdentity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainIdentity.
type LookupDomainIdentityArgs struct {
	// Name of the domain
	Domain string `pulumi:"domain"`
}

// A collection of values returned by getDomainIdentity.
type LookupDomainIdentityResult struct {
	// ARN of the domain identity.
	Arn string `pulumi:"arn"`
	// Name of the domain
	Domain string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Code which when added to the domain as a TXT record will signal to SES that the owner of the domain has authorized SES to act on their behalf.
	VerificationToken string `pulumi:"verificationToken"`
}

func LookupDomainIdentityOutput(ctx *pulumi.Context, args LookupDomainIdentityOutputArgs, opts ...pulumi.InvokeOption) LookupDomainIdentityResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDomainIdentityArgs](args.ToOutput(), func(plainArgs *LookupDomainIdentityArgs) (*LookupDomainIdentityResult, error) {
		return LookupDomainIdentity(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDomainIdentityResultOutput, *LookupDomainIdentityResult](outputResult)
}

// A collection of arguments for invoking getDomainIdentity.
type LookupDomainIdentityOutputArgs struct {
	// Name of the domain
	Domain pulumix.Input[string] `pulumi:"domain"`
}

func (args LookupDomainIdentityOutputArgs) ToOutput() pulumix.Output[*LookupDomainIdentityArgs] {
	allArgs := pulumix.All(
		args.Domain.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDomainIdentityArgs {
		return &LookupDomainIdentityArgs{
			Domain: resolvedArgs[0].(string),
		}
	})
}

type LookupDomainIdentityResultOutput struct{ *pulumi.OutputState }

func (LookupDomainIdentityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainIdentityResult)(nil)).Elem()
}

func (o LookupDomainIdentityResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDomainIdentityResult] {
	return pulumix.Output[*LookupDomainIdentityResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDomainIdentityResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainIdentityResult](o, func(v *LookupDomainIdentityResult) string { return v.Arn })
}

func (o LookupDomainIdentityResultOutput) Domain() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainIdentityResult](o, func(v *LookupDomainIdentityResult) string { return v.Domain })
}

func (o LookupDomainIdentityResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainIdentityResult](o, func(v *LookupDomainIdentityResult) string { return v.Id })
}

func (o LookupDomainIdentityResultOutput) VerificationToken() pulumix.Output[string] {
	return pulumix.Apply[*LookupDomainIdentityResult](o, func(v *LookupDomainIdentityResult) string { return v.VerificationToken })
}
