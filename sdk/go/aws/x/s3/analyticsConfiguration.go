// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a S3 bucket [analytics configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html) resource.
type AnalyticsConfiguration struct {
	pulumi.CustomResourceState

	// Name of the bucket this analytics configuration is associated with.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Object filtering that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumix.GPtrOutput[AnalyticsConfigurationFilter, AnalyticsConfigurationFilterOutput] `pulumi:"filter"`
	// Unique identifier of the analytics configuration for the bucket.
	Name pulumix.Output[string] `pulumi:"name"`
	// Configuration for the analytics data export (documented below).
	StorageClassAnalysis pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysis, AnalyticsConfigurationStorageClassAnalysisOutput] `pulumi:"storageClassAnalysis"`
}

// NewAnalyticsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsConfiguration(ctx *pulumi.Context,
	name string, args *AnalyticsConfigurationArgs, opts ...pulumi.ResourceOption) (*AnalyticsConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnalyticsConfiguration
	err := ctx.RegisterResource("aws:s3/analyticsConfiguration:AnalyticsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsConfiguration gets an existing AnalyticsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsConfigurationState, opts ...pulumi.ResourceOption) (*AnalyticsConfiguration, error) {
	var resource AnalyticsConfiguration
	err := ctx.ReadResource("aws:s3/analyticsConfiguration:AnalyticsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsConfiguration resources.
type analyticsConfigurationState struct {
	// Name of the bucket this analytics configuration is associated with.
	Bucket *string `pulumi:"bucket"`
	// Object filtering that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter *AnalyticsConfigurationFilter `pulumi:"filter"`
	// Unique identifier of the analytics configuration for the bucket.
	Name *string `pulumi:"name"`
	// Configuration for the analytics data export (documented below).
	StorageClassAnalysis *AnalyticsConfigurationStorageClassAnalysis `pulumi:"storageClassAnalysis"`
}

type AnalyticsConfigurationState struct {
	// Name of the bucket this analytics configuration is associated with.
	Bucket pulumix.Input[*string]
	// Object filtering that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumix.Input[*AnalyticsConfigurationFilterArgs]
	// Unique identifier of the analytics configuration for the bucket.
	Name pulumix.Input[*string]
	// Configuration for the analytics data export (documented below).
	StorageClassAnalysis pulumix.Input[*AnalyticsConfigurationStorageClassAnalysisArgs]
}

func (AnalyticsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsConfigurationState)(nil)).Elem()
}

type analyticsConfigurationArgs struct {
	// Name of the bucket this analytics configuration is associated with.
	Bucket string `pulumi:"bucket"`
	// Object filtering that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter *AnalyticsConfigurationFilter `pulumi:"filter"`
	// Unique identifier of the analytics configuration for the bucket.
	Name *string `pulumi:"name"`
	// Configuration for the analytics data export (documented below).
	StorageClassAnalysis *AnalyticsConfigurationStorageClassAnalysis `pulumi:"storageClassAnalysis"`
}

// The set of arguments for constructing a AnalyticsConfiguration resource.
type AnalyticsConfigurationArgs struct {
	// Name of the bucket this analytics configuration is associated with.
	Bucket pulumix.Input[string]
	// Object filtering that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumix.Input[*AnalyticsConfigurationFilterArgs]
	// Unique identifier of the analytics configuration for the bucket.
	Name pulumix.Input[*string]
	// Configuration for the analytics data export (documented below).
	StorageClassAnalysis pulumix.Input[*AnalyticsConfigurationStorageClassAnalysisArgs]
}

func (AnalyticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsConfigurationArgs)(nil)).Elem()
}

type AnalyticsConfigurationOutput struct{ *pulumi.OutputState }

func (AnalyticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConfiguration)(nil)).Elem()
}

func (o AnalyticsConfigurationOutput) ToAnalyticsConfigurationOutput() AnalyticsConfigurationOutput {
	return o
}

func (o AnalyticsConfigurationOutput) ToAnalyticsConfigurationOutputWithContext(ctx context.Context) AnalyticsConfigurationOutput {
	return o
}

func (o AnalyticsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConfiguration] {
	return pulumix.Output[AnalyticsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Name of the bucket this analytics configuration is associated with.
func (o AnalyticsConfigurationOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsConfiguration](o, func(v AnalyticsConfiguration) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Object filtering that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
func (o AnalyticsConfigurationOutput) Filter() pulumix.GPtrOutput[AnalyticsConfigurationFilter, AnalyticsConfigurationFilterOutput] {
	value := pulumix.Apply[AnalyticsConfiguration](o, func(v AnalyticsConfiguration) pulumix.GPtrOutput[AnalyticsConfigurationFilter, AnalyticsConfigurationFilterOutput] {
		return v.Filter
	})
	unwrapped := pulumix.Flatten[*AnalyticsConfigurationFilter, pulumix.GPtrOutput[AnalyticsConfigurationFilter, AnalyticsConfigurationFilterOutput]](value)
	return pulumix.GPtrOutput[AnalyticsConfigurationFilter, AnalyticsConfigurationFilterOutput]{OutputState: unwrapped.OutputState}
}

// Unique identifier of the analytics configuration for the bucket.
func (o AnalyticsConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AnalyticsConfiguration](o, func(v AnalyticsConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration for the analytics data export (documented below).
func (o AnalyticsConfigurationOutput) StorageClassAnalysis() pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysis, AnalyticsConfigurationStorageClassAnalysisOutput] {
	value := pulumix.Apply[AnalyticsConfiguration](o, func(v AnalyticsConfiguration) pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysis, AnalyticsConfigurationStorageClassAnalysisOutput] {
		return v.StorageClassAnalysis
	})
	unwrapped := pulumix.Flatten[*AnalyticsConfigurationStorageClassAnalysis, pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysis, AnalyticsConfigurationStorageClassAnalysisOutput]](value)
	return pulumix.GPtrOutput[AnalyticsConfigurationStorageClassAnalysis, AnalyticsConfigurationStorageClassAnalysisOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AnalyticsConfigurationOutput{})
}
