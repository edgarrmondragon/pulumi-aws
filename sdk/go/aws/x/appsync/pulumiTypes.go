// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DataSourceDynamodbConfig struct {
	// The DeltaSyncConfig for a versioned data source. See Delta Sync Config
	DeltaSyncConfig *DataSourceDynamodbConfigDeltaSyncConfig `pulumi:"deltaSyncConfig"`
	// AWS region of the DynamoDB table. Defaults to current region.
	Region *string `pulumi:"region"`
	// Name of the DynamoDB table.
	TableName string `pulumi:"tableName"`
	// Set to `true` to use Amazon Cognito credentials with this data source.
	UseCallerCredentials *bool `pulumi:"useCallerCredentials"`
	// Detects Conflict Detection and Resolution with this data source.
	Versioned *bool `pulumi:"versioned"`
}

type DataSourceDynamodbConfigArgs struct {
	// The DeltaSyncConfig for a versioned data source. See Delta Sync Config
	DeltaSyncConfig pulumix.Input[*DataSourceDynamodbConfigDeltaSyncConfigArgs] `pulumi:"deltaSyncConfig"`
	// AWS region of the DynamoDB table. Defaults to current region.
	Region pulumix.Input[*string] `pulumi:"region"`
	// Name of the DynamoDB table.
	TableName pulumix.Input[string] `pulumi:"tableName"`
	// Set to `true` to use Amazon Cognito credentials with this data source.
	UseCallerCredentials pulumix.Input[*bool] `pulumi:"useCallerCredentials"`
	// Detects Conflict Detection and Resolution with this data source.
	Versioned pulumix.Input[*bool] `pulumi:"versioned"`
}

func (DataSourceDynamodbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceDynamodbConfig)(nil)).Elem()
}

func (i DataSourceDynamodbConfigArgs) ToDataSourceDynamodbConfigOutput() DataSourceDynamodbConfigOutput {
	return i.ToDataSourceDynamodbConfigOutputWithContext(context.Background())
}

func (i DataSourceDynamodbConfigArgs) ToDataSourceDynamodbConfigOutputWithContext(ctx context.Context) DataSourceDynamodbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceDynamodbConfigOutput)
}

func (i *DataSourceDynamodbConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceDynamodbConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceDynamodbConfigOutput struct{ *pulumi.OutputState }

func (DataSourceDynamodbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceDynamodbConfig)(nil)).Elem()
}

func (o DataSourceDynamodbConfigOutput) ToDataSourceDynamodbConfigOutput() DataSourceDynamodbConfigOutput {
	return o
}

func (o DataSourceDynamodbConfigOutput) ToDataSourceDynamodbConfigOutputWithContext(ctx context.Context) DataSourceDynamodbConfigOutput {
	return o
}

func (o DataSourceDynamodbConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceDynamodbConfig] {
	return pulumix.Output[DataSourceDynamodbConfig]{
		OutputState: o.OutputState,
	}
}

// The DeltaSyncConfig for a versioned data source. See Delta Sync Config
func (o DataSourceDynamodbConfigOutput) DeltaSyncConfig() pulumix.GPtrOutput[DataSourceDynamodbConfigDeltaSyncConfig, DataSourceDynamodbConfigDeltaSyncConfigOutput] {
	value := pulumix.Apply[DataSourceDynamodbConfig](o, func(v DataSourceDynamodbConfig) *DataSourceDynamodbConfigDeltaSyncConfig { return v.DeltaSyncConfig })
	return pulumix.GPtrOutput[DataSourceDynamodbConfigDeltaSyncConfig, DataSourceDynamodbConfigDeltaSyncConfigOutput]{OutputState: value.OutputState}
}

// AWS region of the DynamoDB table. Defaults to current region.
func (o DataSourceDynamodbConfigOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceDynamodbConfig](o, func(v DataSourceDynamodbConfig) *string { return v.Region })
}

// Name of the DynamoDB table.
func (o DataSourceDynamodbConfigOutput) TableName() pulumix.Output[string] {
	return pulumix.Apply[DataSourceDynamodbConfig](o, func(v DataSourceDynamodbConfig) string { return v.TableName })
}

// Set to `true` to use Amazon Cognito credentials with this data source.
func (o DataSourceDynamodbConfigOutput) UseCallerCredentials() pulumix.Output[*bool] {
	return pulumix.Apply[DataSourceDynamodbConfig](o, func(v DataSourceDynamodbConfig) *bool { return v.UseCallerCredentials })
}

// Detects Conflict Detection and Resolution with this data source.
func (o DataSourceDynamodbConfigOutput) Versioned() pulumix.Output[*bool] {
	return pulumix.Apply[DataSourceDynamodbConfig](o, func(v DataSourceDynamodbConfig) *bool { return v.Versioned })
}

type DataSourceDynamodbConfigDeltaSyncConfig struct {
	// The number of minutes that an Item is stored in the data source.
	BaseTableTtl *int `pulumi:"baseTableTtl"`
	// The table name.
	DeltaSyncTableName string `pulumi:"deltaSyncTableName"`
	// The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
	DeltaSyncTableTtl *int `pulumi:"deltaSyncTableTtl"`
}

type DataSourceDynamodbConfigDeltaSyncConfigArgs struct {
	// The number of minutes that an Item is stored in the data source.
	BaseTableTtl pulumix.Input[*int] `pulumi:"baseTableTtl"`
	// The table name.
	DeltaSyncTableName pulumix.Input[string] `pulumi:"deltaSyncTableName"`
	// The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
	DeltaSyncTableTtl pulumix.Input[*int] `pulumi:"deltaSyncTableTtl"`
}

func (DataSourceDynamodbConfigDeltaSyncConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceDynamodbConfigDeltaSyncConfig)(nil)).Elem()
}

func (i DataSourceDynamodbConfigDeltaSyncConfigArgs) ToDataSourceDynamodbConfigDeltaSyncConfigOutput() DataSourceDynamodbConfigDeltaSyncConfigOutput {
	return i.ToDataSourceDynamodbConfigDeltaSyncConfigOutputWithContext(context.Background())
}

func (i DataSourceDynamodbConfigDeltaSyncConfigArgs) ToDataSourceDynamodbConfigDeltaSyncConfigOutputWithContext(ctx context.Context) DataSourceDynamodbConfigDeltaSyncConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceDynamodbConfigDeltaSyncConfigOutput)
}

func (i *DataSourceDynamodbConfigDeltaSyncConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceDynamodbConfigDeltaSyncConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceDynamodbConfigDeltaSyncConfigOutput struct{ *pulumi.OutputState }

func (DataSourceDynamodbConfigDeltaSyncConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceDynamodbConfigDeltaSyncConfig)(nil)).Elem()
}

func (o DataSourceDynamodbConfigDeltaSyncConfigOutput) ToDataSourceDynamodbConfigDeltaSyncConfigOutput() DataSourceDynamodbConfigDeltaSyncConfigOutput {
	return o
}

func (o DataSourceDynamodbConfigDeltaSyncConfigOutput) ToDataSourceDynamodbConfigDeltaSyncConfigOutputWithContext(ctx context.Context) DataSourceDynamodbConfigDeltaSyncConfigOutput {
	return o
}

func (o DataSourceDynamodbConfigDeltaSyncConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceDynamodbConfigDeltaSyncConfig] {
	return pulumix.Output[DataSourceDynamodbConfigDeltaSyncConfig]{
		OutputState: o.OutputState,
	}
}

// The number of minutes that an Item is stored in the data source.
func (o DataSourceDynamodbConfigDeltaSyncConfigOutput) BaseTableTtl() pulumix.Output[*int] {
	return pulumix.Apply[DataSourceDynamodbConfigDeltaSyncConfig](o, func(v DataSourceDynamodbConfigDeltaSyncConfig) *int { return v.BaseTableTtl })
}

// The table name.
func (o DataSourceDynamodbConfigDeltaSyncConfigOutput) DeltaSyncTableName() pulumix.Output[string] {
	return pulumix.Apply[DataSourceDynamodbConfigDeltaSyncConfig](o, func(v DataSourceDynamodbConfigDeltaSyncConfig) string { return v.DeltaSyncTableName })
}

// The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
func (o DataSourceDynamodbConfigDeltaSyncConfigOutput) DeltaSyncTableTtl() pulumix.Output[*int] {
	return pulumix.Apply[DataSourceDynamodbConfigDeltaSyncConfig](o, func(v DataSourceDynamodbConfigDeltaSyncConfig) *int { return v.DeltaSyncTableTtl })
}

type DataSourceElasticsearchConfig struct {
	// HTTP endpoint of the Elasticsearch domain.
	Endpoint string `pulumi:"endpoint"`
	// AWS region of Elasticsearch domain. Defaults to current region.
	Region *string `pulumi:"region"`
}

type DataSourceElasticsearchConfigArgs struct {
	// HTTP endpoint of the Elasticsearch domain.
	Endpoint pulumix.Input[string] `pulumi:"endpoint"`
	// AWS region of Elasticsearch domain. Defaults to current region.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (DataSourceElasticsearchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceElasticsearchConfig)(nil)).Elem()
}

func (i DataSourceElasticsearchConfigArgs) ToDataSourceElasticsearchConfigOutput() DataSourceElasticsearchConfigOutput {
	return i.ToDataSourceElasticsearchConfigOutputWithContext(context.Background())
}

func (i DataSourceElasticsearchConfigArgs) ToDataSourceElasticsearchConfigOutputWithContext(ctx context.Context) DataSourceElasticsearchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceElasticsearchConfigOutput)
}

func (i *DataSourceElasticsearchConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceElasticsearchConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceElasticsearchConfigOutput struct{ *pulumi.OutputState }

func (DataSourceElasticsearchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceElasticsearchConfig)(nil)).Elem()
}

func (o DataSourceElasticsearchConfigOutput) ToDataSourceElasticsearchConfigOutput() DataSourceElasticsearchConfigOutput {
	return o
}

func (o DataSourceElasticsearchConfigOutput) ToDataSourceElasticsearchConfigOutputWithContext(ctx context.Context) DataSourceElasticsearchConfigOutput {
	return o
}

func (o DataSourceElasticsearchConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceElasticsearchConfig] {
	return pulumix.Output[DataSourceElasticsearchConfig]{
		OutputState: o.OutputState,
	}
}

// HTTP endpoint of the Elasticsearch domain.
func (o DataSourceElasticsearchConfigOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[DataSourceElasticsearchConfig](o, func(v DataSourceElasticsearchConfig) string { return v.Endpoint })
}

// AWS region of Elasticsearch domain. Defaults to current region.
func (o DataSourceElasticsearchConfigOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceElasticsearchConfig](o, func(v DataSourceElasticsearchConfig) *string { return v.Region })
}

type DataSourceEventBridgeConfig struct {
	// ARN for the EventBridge bus.
	EventBusArn string `pulumi:"eventBusArn"`
}

type DataSourceEventBridgeConfigArgs struct {
	// ARN for the EventBridge bus.
	EventBusArn pulumix.Input[string] `pulumi:"eventBusArn"`
}

func (DataSourceEventBridgeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceEventBridgeConfig)(nil)).Elem()
}

func (i DataSourceEventBridgeConfigArgs) ToDataSourceEventBridgeConfigOutput() DataSourceEventBridgeConfigOutput {
	return i.ToDataSourceEventBridgeConfigOutputWithContext(context.Background())
}

func (i DataSourceEventBridgeConfigArgs) ToDataSourceEventBridgeConfigOutputWithContext(ctx context.Context) DataSourceEventBridgeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceEventBridgeConfigOutput)
}

func (i *DataSourceEventBridgeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceEventBridgeConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceEventBridgeConfigOutput struct{ *pulumi.OutputState }

func (DataSourceEventBridgeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceEventBridgeConfig)(nil)).Elem()
}

func (o DataSourceEventBridgeConfigOutput) ToDataSourceEventBridgeConfigOutput() DataSourceEventBridgeConfigOutput {
	return o
}

func (o DataSourceEventBridgeConfigOutput) ToDataSourceEventBridgeConfigOutputWithContext(ctx context.Context) DataSourceEventBridgeConfigOutput {
	return o
}

func (o DataSourceEventBridgeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceEventBridgeConfig] {
	return pulumix.Output[DataSourceEventBridgeConfig]{
		OutputState: o.OutputState,
	}
}

// ARN for the EventBridge bus.
func (o DataSourceEventBridgeConfigOutput) EventBusArn() pulumix.Output[string] {
	return pulumix.Apply[DataSourceEventBridgeConfig](o, func(v DataSourceEventBridgeConfig) string { return v.EventBusArn })
}

type DataSourceHttpConfig struct {
	// Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.
	AuthorizationConfig *DataSourceHttpConfigAuthorizationConfig `pulumi:"authorizationConfig"`
	// HTTP URL.
	Endpoint string `pulumi:"endpoint"`
}

type DataSourceHttpConfigArgs struct {
	// Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.
	AuthorizationConfig pulumix.Input[*DataSourceHttpConfigAuthorizationConfigArgs] `pulumi:"authorizationConfig"`
	// HTTP URL.
	Endpoint pulumix.Input[string] `pulumi:"endpoint"`
}

func (DataSourceHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceHttpConfig)(nil)).Elem()
}

func (i DataSourceHttpConfigArgs) ToDataSourceHttpConfigOutput() DataSourceHttpConfigOutput {
	return i.ToDataSourceHttpConfigOutputWithContext(context.Background())
}

func (i DataSourceHttpConfigArgs) ToDataSourceHttpConfigOutputWithContext(ctx context.Context) DataSourceHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceHttpConfigOutput)
}

func (i *DataSourceHttpConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceHttpConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceHttpConfigOutput struct{ *pulumi.OutputState }

func (DataSourceHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceHttpConfig)(nil)).Elem()
}

func (o DataSourceHttpConfigOutput) ToDataSourceHttpConfigOutput() DataSourceHttpConfigOutput {
	return o
}

func (o DataSourceHttpConfigOutput) ToDataSourceHttpConfigOutputWithContext(ctx context.Context) DataSourceHttpConfigOutput {
	return o
}

func (o DataSourceHttpConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceHttpConfig] {
	return pulumix.Output[DataSourceHttpConfig]{
		OutputState: o.OutputState,
	}
}

// Authorization configuration in case the HTTP endpoint requires authorization. See Authorization Config.
func (o DataSourceHttpConfigOutput) AuthorizationConfig() pulumix.GPtrOutput[DataSourceHttpConfigAuthorizationConfig, DataSourceHttpConfigAuthorizationConfigOutput] {
	value := pulumix.Apply[DataSourceHttpConfig](o, func(v DataSourceHttpConfig) *DataSourceHttpConfigAuthorizationConfig { return v.AuthorizationConfig })
	return pulumix.GPtrOutput[DataSourceHttpConfigAuthorizationConfig, DataSourceHttpConfigAuthorizationConfigOutput]{OutputState: value.OutputState}
}

// HTTP URL.
func (o DataSourceHttpConfigOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[DataSourceHttpConfig](o, func(v DataSourceHttpConfig) string { return v.Endpoint })
}

type DataSourceHttpConfigAuthorizationConfig struct {
	// Authorization type that the HTTP endpoint requires. Default values is `AWS_IAM`.
	AuthorizationType *string `pulumi:"authorizationType"`
	// Identity and Access Management (IAM) settings. See AWS IAM Config.
	AwsIamConfig *DataSourceHttpConfigAuthorizationConfigAwsIamConfig `pulumi:"awsIamConfig"`
}

type DataSourceHttpConfigAuthorizationConfigArgs struct {
	// Authorization type that the HTTP endpoint requires. Default values is `AWS_IAM`.
	AuthorizationType pulumix.Input[*string] `pulumi:"authorizationType"`
	// Identity and Access Management (IAM) settings. See AWS IAM Config.
	AwsIamConfig pulumix.Input[*DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs] `pulumi:"awsIamConfig"`
}

func (DataSourceHttpConfigAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceHttpConfigAuthorizationConfig)(nil)).Elem()
}

func (i DataSourceHttpConfigAuthorizationConfigArgs) ToDataSourceHttpConfigAuthorizationConfigOutput() DataSourceHttpConfigAuthorizationConfigOutput {
	return i.ToDataSourceHttpConfigAuthorizationConfigOutputWithContext(context.Background())
}

func (i DataSourceHttpConfigAuthorizationConfigArgs) ToDataSourceHttpConfigAuthorizationConfigOutputWithContext(ctx context.Context) DataSourceHttpConfigAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceHttpConfigAuthorizationConfigOutput)
}

func (i *DataSourceHttpConfigAuthorizationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceHttpConfigAuthorizationConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceHttpConfigAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (DataSourceHttpConfigAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceHttpConfigAuthorizationConfig)(nil)).Elem()
}

func (o DataSourceHttpConfigAuthorizationConfigOutput) ToDataSourceHttpConfigAuthorizationConfigOutput() DataSourceHttpConfigAuthorizationConfigOutput {
	return o
}

func (o DataSourceHttpConfigAuthorizationConfigOutput) ToDataSourceHttpConfigAuthorizationConfigOutputWithContext(ctx context.Context) DataSourceHttpConfigAuthorizationConfigOutput {
	return o
}

func (o DataSourceHttpConfigAuthorizationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceHttpConfigAuthorizationConfig] {
	return pulumix.Output[DataSourceHttpConfigAuthorizationConfig]{
		OutputState: o.OutputState,
	}
}

// Authorization type that the HTTP endpoint requires. Default values is `AWS_IAM`.
func (o DataSourceHttpConfigAuthorizationConfigOutput) AuthorizationType() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceHttpConfigAuthorizationConfig](o, func(v DataSourceHttpConfigAuthorizationConfig) *string { return v.AuthorizationType })
}

// Identity and Access Management (IAM) settings. See AWS IAM Config.
func (o DataSourceHttpConfigAuthorizationConfigOutput) AwsIamConfig() pulumix.GPtrOutput[DataSourceHttpConfigAuthorizationConfigAwsIamConfig, DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput] {
	value := pulumix.Apply[DataSourceHttpConfigAuthorizationConfig](o, func(v DataSourceHttpConfigAuthorizationConfig) *DataSourceHttpConfigAuthorizationConfigAwsIamConfig {
		return v.AwsIamConfig
	})
	return pulumix.GPtrOutput[DataSourceHttpConfigAuthorizationConfigAwsIamConfig, DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput]{OutputState: value.OutputState}
}

type DataSourceHttpConfigAuthorizationConfigAwsIamConfig struct {
	// Signing Amazon Web Services Region for IAM authorization.
	SigningRegion *string `pulumi:"signingRegion"`
	// Signing service name for IAM authorization.
	SigningServiceName *string `pulumi:"signingServiceName"`
}

type DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs struct {
	// Signing Amazon Web Services Region for IAM authorization.
	SigningRegion pulumix.Input[*string] `pulumi:"signingRegion"`
	// Signing service name for IAM authorization.
	SigningServiceName pulumix.Input[*string] `pulumi:"signingServiceName"`
}

func (DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceHttpConfigAuthorizationConfigAwsIamConfig)(nil)).Elem()
}

func (i DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs) ToDataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput() DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput {
	return i.ToDataSourceHttpConfigAuthorizationConfigAwsIamConfigOutputWithContext(context.Background())
}

func (i DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs) ToDataSourceHttpConfigAuthorizationConfigAwsIamConfigOutputWithContext(ctx context.Context) DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput)
}

func (i *DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceHttpConfigAuthorizationConfigAwsIamConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput struct{ *pulumi.OutputState }

func (DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceHttpConfigAuthorizationConfigAwsIamConfig)(nil)).Elem()
}

func (o DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput) ToDataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput() DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput {
	return o
}

func (o DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput) ToDataSourceHttpConfigAuthorizationConfigAwsIamConfigOutputWithContext(ctx context.Context) DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput {
	return o
}

func (o DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceHttpConfigAuthorizationConfigAwsIamConfig] {
	return pulumix.Output[DataSourceHttpConfigAuthorizationConfigAwsIamConfig]{
		OutputState: o.OutputState,
	}
}

// Signing Amazon Web Services Region for IAM authorization.
func (o DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput) SigningRegion() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceHttpConfigAuthorizationConfigAwsIamConfig](o, func(v DataSourceHttpConfigAuthorizationConfigAwsIamConfig) *string { return v.SigningRegion })
}

// Signing service name for IAM authorization.
func (o DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput) SigningServiceName() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceHttpConfigAuthorizationConfigAwsIamConfig](o, func(v DataSourceHttpConfigAuthorizationConfigAwsIamConfig) *string { return v.SigningServiceName })
}

type DataSourceLambdaConfig struct {
	// ARN for the Lambda function.
	FunctionArn string `pulumi:"functionArn"`
}

type DataSourceLambdaConfigArgs struct {
	// ARN for the Lambda function.
	FunctionArn pulumix.Input[string] `pulumi:"functionArn"`
}

func (DataSourceLambdaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceLambdaConfig)(nil)).Elem()
}

func (i DataSourceLambdaConfigArgs) ToDataSourceLambdaConfigOutput() DataSourceLambdaConfigOutput {
	return i.ToDataSourceLambdaConfigOutputWithContext(context.Background())
}

func (i DataSourceLambdaConfigArgs) ToDataSourceLambdaConfigOutputWithContext(ctx context.Context) DataSourceLambdaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceLambdaConfigOutput)
}

func (i *DataSourceLambdaConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceLambdaConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceLambdaConfigOutput struct{ *pulumi.OutputState }

func (DataSourceLambdaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceLambdaConfig)(nil)).Elem()
}

func (o DataSourceLambdaConfigOutput) ToDataSourceLambdaConfigOutput() DataSourceLambdaConfigOutput {
	return o
}

func (o DataSourceLambdaConfigOutput) ToDataSourceLambdaConfigOutputWithContext(ctx context.Context) DataSourceLambdaConfigOutput {
	return o
}

func (o DataSourceLambdaConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceLambdaConfig] {
	return pulumix.Output[DataSourceLambdaConfig]{
		OutputState: o.OutputState,
	}
}

// ARN for the Lambda function.
func (o DataSourceLambdaConfigOutput) FunctionArn() pulumix.Output[string] {
	return pulumix.Apply[DataSourceLambdaConfig](o, func(v DataSourceLambdaConfig) string { return v.FunctionArn })
}

type DataSourceOpensearchserviceConfig struct {
	// HTTP endpoint of the Elasticsearch domain.
	Endpoint string `pulumi:"endpoint"`
	// AWS region of the DynamoDB table. Defaults to current region.
	Region *string `pulumi:"region"`
}

type DataSourceOpensearchserviceConfigArgs struct {
	// HTTP endpoint of the Elasticsearch domain.
	Endpoint pulumix.Input[string] `pulumi:"endpoint"`
	// AWS region of the DynamoDB table. Defaults to current region.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (DataSourceOpensearchserviceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOpensearchserviceConfig)(nil)).Elem()
}

func (i DataSourceOpensearchserviceConfigArgs) ToDataSourceOpensearchserviceConfigOutput() DataSourceOpensearchserviceConfigOutput {
	return i.ToDataSourceOpensearchserviceConfigOutputWithContext(context.Background())
}

func (i DataSourceOpensearchserviceConfigArgs) ToDataSourceOpensearchserviceConfigOutputWithContext(ctx context.Context) DataSourceOpensearchserviceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOpensearchserviceConfigOutput)
}

func (i *DataSourceOpensearchserviceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceOpensearchserviceConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceOpensearchserviceConfigOutput struct{ *pulumi.OutputState }

func (DataSourceOpensearchserviceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOpensearchserviceConfig)(nil)).Elem()
}

func (o DataSourceOpensearchserviceConfigOutput) ToDataSourceOpensearchserviceConfigOutput() DataSourceOpensearchserviceConfigOutput {
	return o
}

func (o DataSourceOpensearchserviceConfigOutput) ToDataSourceOpensearchserviceConfigOutputWithContext(ctx context.Context) DataSourceOpensearchserviceConfigOutput {
	return o
}

func (o DataSourceOpensearchserviceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceOpensearchserviceConfig] {
	return pulumix.Output[DataSourceOpensearchserviceConfig]{
		OutputState: o.OutputState,
	}
}

// HTTP endpoint of the Elasticsearch domain.
func (o DataSourceOpensearchserviceConfigOutput) Endpoint() pulumix.Output[string] {
	return pulumix.Apply[DataSourceOpensearchserviceConfig](o, func(v DataSourceOpensearchserviceConfig) string { return v.Endpoint })
}

// AWS region of the DynamoDB table. Defaults to current region.
func (o DataSourceOpensearchserviceConfigOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceOpensearchserviceConfig](o, func(v DataSourceOpensearchserviceConfig) *string { return v.Region })
}

type DataSourceRelationalDatabaseConfig struct {
	// Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.
	HttpEndpointConfig *DataSourceRelationalDatabaseConfigHttpEndpointConfig `pulumi:"httpEndpointConfig"`
	// Source type for the relational database. Valid values: `RDS_HTTP_ENDPOINT`.
	SourceType *string `pulumi:"sourceType"`
}

type DataSourceRelationalDatabaseConfigArgs struct {
	// Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.
	HttpEndpointConfig pulumix.Input[*DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs] `pulumi:"httpEndpointConfig"`
	// Source type for the relational database. Valid values: `RDS_HTTP_ENDPOINT`.
	SourceType pulumix.Input[*string] `pulumi:"sourceType"`
}

func (DataSourceRelationalDatabaseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRelationalDatabaseConfig)(nil)).Elem()
}

func (i DataSourceRelationalDatabaseConfigArgs) ToDataSourceRelationalDatabaseConfigOutput() DataSourceRelationalDatabaseConfigOutput {
	return i.ToDataSourceRelationalDatabaseConfigOutputWithContext(context.Background())
}

func (i DataSourceRelationalDatabaseConfigArgs) ToDataSourceRelationalDatabaseConfigOutputWithContext(ctx context.Context) DataSourceRelationalDatabaseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRelationalDatabaseConfigOutput)
}

func (i *DataSourceRelationalDatabaseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceRelationalDatabaseConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceRelationalDatabaseConfigOutput struct{ *pulumi.OutputState }

func (DataSourceRelationalDatabaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRelationalDatabaseConfig)(nil)).Elem()
}

func (o DataSourceRelationalDatabaseConfigOutput) ToDataSourceRelationalDatabaseConfigOutput() DataSourceRelationalDatabaseConfigOutput {
	return o
}

func (o DataSourceRelationalDatabaseConfigOutput) ToDataSourceRelationalDatabaseConfigOutputWithContext(ctx context.Context) DataSourceRelationalDatabaseConfigOutput {
	return o
}

func (o DataSourceRelationalDatabaseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceRelationalDatabaseConfig] {
	return pulumix.Output[DataSourceRelationalDatabaseConfig]{
		OutputState: o.OutputState,
	}
}

// Amazon RDS HTTP endpoint configuration. See HTTP Endpoint Config.
func (o DataSourceRelationalDatabaseConfigOutput) HttpEndpointConfig() pulumix.GPtrOutput[DataSourceRelationalDatabaseConfigHttpEndpointConfig, DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput] {
	value := pulumix.Apply[DataSourceRelationalDatabaseConfig](o, func(v DataSourceRelationalDatabaseConfig) *DataSourceRelationalDatabaseConfigHttpEndpointConfig {
		return v.HttpEndpointConfig
	})
	return pulumix.GPtrOutput[DataSourceRelationalDatabaseConfigHttpEndpointConfig, DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput]{OutputState: value.OutputState}
}

// Source type for the relational database. Valid values: `RDS_HTTP_ENDPOINT`.
func (o DataSourceRelationalDatabaseConfigOutput) SourceType() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceRelationalDatabaseConfig](o, func(v DataSourceRelationalDatabaseConfig) *string { return v.SourceType })
}

type DataSourceRelationalDatabaseConfigHttpEndpointConfig struct {
	// AWS secret store ARN for database credentials.
	AwsSecretStoreArn string `pulumi:"awsSecretStoreArn"`
	// Logical database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Amazon RDS cluster identifier.
	DbClusterIdentifier string `pulumi:"dbClusterIdentifier"`
	// AWS Region for RDS HTTP endpoint. Defaults to current region.
	Region *string `pulumi:"region"`
	// Logical schema name.
	Schema *string `pulumi:"schema"`
}

type DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs struct {
	// AWS secret store ARN for database credentials.
	AwsSecretStoreArn pulumix.Input[string] `pulumi:"awsSecretStoreArn"`
	// Logical database name.
	DatabaseName pulumix.Input[*string] `pulumi:"databaseName"`
	// Amazon RDS cluster identifier.
	DbClusterIdentifier pulumix.Input[string] `pulumi:"dbClusterIdentifier"`
	// AWS Region for RDS HTTP endpoint. Defaults to current region.
	Region pulumix.Input[*string] `pulumi:"region"`
	// Logical schema name.
	Schema pulumix.Input[*string] `pulumi:"schema"`
}

func (DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRelationalDatabaseConfigHttpEndpointConfig)(nil)).Elem()
}

func (i DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs) ToDataSourceRelationalDatabaseConfigHttpEndpointConfigOutput() DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput {
	return i.ToDataSourceRelationalDatabaseConfigHttpEndpointConfigOutputWithContext(context.Background())
}

func (i DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs) ToDataSourceRelationalDatabaseConfigHttpEndpointConfigOutputWithContext(ctx context.Context) DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput)
}

func (i *DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourceRelationalDatabaseConfigHttpEndpointConfigArgs] {
	return pulumix.Val(i)
}

type DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput struct{ *pulumi.OutputState }

func (DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRelationalDatabaseConfigHttpEndpointConfig)(nil)).Elem()
}

func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) ToDataSourceRelationalDatabaseConfigHttpEndpointConfigOutput() DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput {
	return o
}

func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) ToDataSourceRelationalDatabaseConfigHttpEndpointConfigOutputWithContext(ctx context.Context) DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput {
	return o
}

func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourceRelationalDatabaseConfigHttpEndpointConfig] {
	return pulumix.Output[DataSourceRelationalDatabaseConfigHttpEndpointConfig]{
		OutputState: o.OutputState,
	}
}

// AWS secret store ARN for database credentials.
func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) AwsSecretStoreArn() pulumix.Output[string] {
	return pulumix.Apply[DataSourceRelationalDatabaseConfigHttpEndpointConfig](o, func(v DataSourceRelationalDatabaseConfigHttpEndpointConfig) string { return v.AwsSecretStoreArn })
}

// Logical database name.
func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) DatabaseName() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceRelationalDatabaseConfigHttpEndpointConfig](o, func(v DataSourceRelationalDatabaseConfigHttpEndpointConfig) *string { return v.DatabaseName })
}

// Amazon RDS cluster identifier.
func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) DbClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[DataSourceRelationalDatabaseConfigHttpEndpointConfig](o, func(v DataSourceRelationalDatabaseConfigHttpEndpointConfig) string { return v.DbClusterIdentifier })
}

// AWS Region for RDS HTTP endpoint. Defaults to current region.
func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceRelationalDatabaseConfigHttpEndpointConfig](o, func(v DataSourceRelationalDatabaseConfigHttpEndpointConfig) *string { return v.Region })
}

// Logical schema name.
func (o DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput) Schema() pulumix.Output[*string] {
	return pulumix.Apply[DataSourceRelationalDatabaseConfigHttpEndpointConfig](o, func(v DataSourceRelationalDatabaseConfigHttpEndpointConfig) *string { return v.Schema })
}

type FunctionRuntime struct {
	// The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
	Name string `pulumi:"name"`
	// The version of the runtime to use. Currently, the only allowed version is `1.0.0`.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

type FunctionRuntimeArgs struct {
	// The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
	Name pulumix.Input[string] `pulumi:"name"`
	// The version of the runtime to use. Currently, the only allowed version is `1.0.0`.
	RuntimeVersion pulumix.Input[string] `pulumi:"runtimeVersion"`
}

func (FunctionRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionRuntime)(nil)).Elem()
}

func (i FunctionRuntimeArgs) ToFunctionRuntimeOutput() FunctionRuntimeOutput {
	return i.ToFunctionRuntimeOutputWithContext(context.Background())
}

func (i FunctionRuntimeArgs) ToFunctionRuntimeOutputWithContext(ctx context.Context) FunctionRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuntimeOutput)
}

func (i *FunctionRuntimeArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionRuntimeArgs] {
	return pulumix.Val(i)
}

type FunctionRuntimeOutput struct{ *pulumi.OutputState }

func (FunctionRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionRuntime)(nil)).Elem()
}

func (o FunctionRuntimeOutput) ToFunctionRuntimeOutput() FunctionRuntimeOutput {
	return o
}

func (o FunctionRuntimeOutput) ToFunctionRuntimeOutputWithContext(ctx context.Context) FunctionRuntimeOutput {
	return o
}

func (o FunctionRuntimeOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionRuntime] {
	return pulumix.Output[FunctionRuntime]{
		OutputState: o.OutputState,
	}
}

// The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
func (o FunctionRuntimeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[FunctionRuntime](o, func(v FunctionRuntime) string { return v.Name })
}

// The version of the runtime to use. Currently, the only allowed version is `1.0.0`.
func (o FunctionRuntimeOutput) RuntimeVersion() pulumix.Output[string] {
	return pulumix.Apply[FunctionRuntime](o, func(v FunctionRuntime) string { return v.RuntimeVersion })
}

type FunctionSyncConfig struct {
	// Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
	ConflictDetection *string `pulumi:"conflictDetection"`
	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
	ConflictHandler *string `pulumi:"conflictHandler"`
	// Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
	LambdaConflictHandlerConfig *FunctionSyncConfigLambdaConflictHandlerConfig `pulumi:"lambdaConflictHandlerConfig"`
}

type FunctionSyncConfigArgs struct {
	// Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
	ConflictDetection pulumix.Input[*string] `pulumi:"conflictDetection"`
	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
	ConflictHandler pulumix.Input[*string] `pulumi:"conflictHandler"`
	// Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
	LambdaConflictHandlerConfig pulumix.Input[*FunctionSyncConfigLambdaConflictHandlerConfigArgs] `pulumi:"lambdaConflictHandlerConfig"`
}

func (FunctionSyncConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSyncConfig)(nil)).Elem()
}

func (i FunctionSyncConfigArgs) ToFunctionSyncConfigOutput() FunctionSyncConfigOutput {
	return i.ToFunctionSyncConfigOutputWithContext(context.Background())
}

func (i FunctionSyncConfigArgs) ToFunctionSyncConfigOutputWithContext(ctx context.Context) FunctionSyncConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSyncConfigOutput)
}

func (i *FunctionSyncConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionSyncConfigArgs] {
	return pulumix.Val(i)
}

type FunctionSyncConfigOutput struct{ *pulumi.OutputState }

func (FunctionSyncConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSyncConfig)(nil)).Elem()
}

func (o FunctionSyncConfigOutput) ToFunctionSyncConfigOutput() FunctionSyncConfigOutput {
	return o
}

func (o FunctionSyncConfigOutput) ToFunctionSyncConfigOutputWithContext(ctx context.Context) FunctionSyncConfigOutput {
	return o
}

func (o FunctionSyncConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionSyncConfig] {
	return pulumix.Output[FunctionSyncConfig]{
		OutputState: o.OutputState,
	}
}

// Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
func (o FunctionSyncConfigOutput) ConflictDetection() pulumix.Output[*string] {
	return pulumix.Apply[FunctionSyncConfig](o, func(v FunctionSyncConfig) *string { return v.ConflictDetection })
}

// Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
func (o FunctionSyncConfigOutput) ConflictHandler() pulumix.Output[*string] {
	return pulumix.Apply[FunctionSyncConfig](o, func(v FunctionSyncConfig) *string { return v.ConflictHandler })
}

// Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
func (o FunctionSyncConfigOutput) LambdaConflictHandlerConfig() pulumix.GPtrOutput[FunctionSyncConfigLambdaConflictHandlerConfig, FunctionSyncConfigLambdaConflictHandlerConfigOutput] {
	value := pulumix.Apply[FunctionSyncConfig](o, func(v FunctionSyncConfig) *FunctionSyncConfigLambdaConflictHandlerConfig {
		return v.LambdaConflictHandlerConfig
	})
	return pulumix.GPtrOutput[FunctionSyncConfigLambdaConflictHandlerConfig, FunctionSyncConfigLambdaConflictHandlerConfigOutput]{OutputState: value.OutputState}
}

type FunctionSyncConfigLambdaConflictHandlerConfig struct {
	// ARN for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn *string `pulumi:"lambdaConflictHandlerArn"`
}

type FunctionSyncConfigLambdaConflictHandlerConfigArgs struct {
	// ARN for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn pulumix.Input[*string] `pulumi:"lambdaConflictHandlerArn"`
}

func (FunctionSyncConfigLambdaConflictHandlerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSyncConfigLambdaConflictHandlerConfig)(nil)).Elem()
}

func (i FunctionSyncConfigLambdaConflictHandlerConfigArgs) ToFunctionSyncConfigLambdaConflictHandlerConfigOutput() FunctionSyncConfigLambdaConflictHandlerConfigOutput {
	return i.ToFunctionSyncConfigLambdaConflictHandlerConfigOutputWithContext(context.Background())
}

func (i FunctionSyncConfigLambdaConflictHandlerConfigArgs) ToFunctionSyncConfigLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) FunctionSyncConfigLambdaConflictHandlerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSyncConfigLambdaConflictHandlerConfigOutput)
}

func (i *FunctionSyncConfigLambdaConflictHandlerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FunctionSyncConfigLambdaConflictHandlerConfigArgs] {
	return pulumix.Val(i)
}

type FunctionSyncConfigLambdaConflictHandlerConfigOutput struct{ *pulumi.OutputState }

func (FunctionSyncConfigLambdaConflictHandlerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSyncConfigLambdaConflictHandlerConfig)(nil)).Elem()
}

func (o FunctionSyncConfigLambdaConflictHandlerConfigOutput) ToFunctionSyncConfigLambdaConflictHandlerConfigOutput() FunctionSyncConfigLambdaConflictHandlerConfigOutput {
	return o
}

func (o FunctionSyncConfigLambdaConflictHandlerConfigOutput) ToFunctionSyncConfigLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) FunctionSyncConfigLambdaConflictHandlerConfigOutput {
	return o
}

func (o FunctionSyncConfigLambdaConflictHandlerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionSyncConfigLambdaConflictHandlerConfig] {
	return pulumix.Output[FunctionSyncConfigLambdaConflictHandlerConfig]{
		OutputState: o.OutputState,
	}
}

// ARN for the Lambda function to use as the Conflict Handler.
func (o FunctionSyncConfigLambdaConflictHandlerConfigOutput) LambdaConflictHandlerArn() pulumix.Output[*string] {
	return pulumix.Apply[FunctionSyncConfigLambdaConflictHandlerConfig](o, func(v FunctionSyncConfigLambdaConflictHandlerConfig) *string { return v.LambdaConflictHandlerArn })
}

type GraphQLApiAdditionalAuthenticationProvider struct {
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType string `pulumi:"authenticationType"`
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig *GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig `pulumi:"lambdaAuthorizerConfig"`
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig *GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig `pulumi:"openidConnectConfig"`
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig *GraphQLApiAdditionalAuthenticationProviderUserPoolConfig `pulumi:"userPoolConfig"`
}

type GraphQLApiAdditionalAuthenticationProviderArgs struct {
	// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
	AuthenticationType pulumix.Input[string] `pulumi:"authenticationType"`
	// Nested argument containing Lambda authorizer configuration. Defined below.
	LambdaAuthorizerConfig pulumix.Input[*GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs] `pulumi:"lambdaAuthorizerConfig"`
	// Nested argument containing OpenID Connect configuration. Defined below.
	OpenidConnectConfig pulumix.Input[*GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs] `pulumi:"openidConnectConfig"`
	// Amazon Cognito User Pool configuration. Defined below.
	UserPoolConfig pulumix.Input[*GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs] `pulumi:"userPoolConfig"`
}

func (GraphQLApiAdditionalAuthenticationProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProvider)(nil)).Elem()
}

func (i GraphQLApiAdditionalAuthenticationProviderArgs) ToGraphQLApiAdditionalAuthenticationProviderOutput() GraphQLApiAdditionalAuthenticationProviderOutput {
	return i.ToGraphQLApiAdditionalAuthenticationProviderOutputWithContext(context.Background())
}

func (i GraphQLApiAdditionalAuthenticationProviderArgs) ToGraphQLApiAdditionalAuthenticationProviderOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiAdditionalAuthenticationProviderOutput)
}

func (i *GraphQLApiAdditionalAuthenticationProviderArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiAdditionalAuthenticationProviderArgs] {
	return pulumix.Val(i)
}

type GraphQLApiAdditionalAuthenticationProviderOutput struct{ *pulumi.OutputState }

func (GraphQLApiAdditionalAuthenticationProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProvider)(nil)).Elem()
}

func (o GraphQLApiAdditionalAuthenticationProviderOutput) ToGraphQLApiAdditionalAuthenticationProviderOutput() GraphQLApiAdditionalAuthenticationProviderOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderOutput) ToGraphQLApiAdditionalAuthenticationProviderOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiAdditionalAuthenticationProvider] {
	return pulumix.Output[GraphQLApiAdditionalAuthenticationProvider]{
		OutputState: o.OutputState,
	}
}

// Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
func (o GraphQLApiAdditionalAuthenticationProviderOutput) AuthenticationType() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProvider](o, func(v GraphQLApiAdditionalAuthenticationProvider) string { return v.AuthenticationType })
}

// Nested argument containing Lambda authorizer configuration. Defined below.
func (o GraphQLApiAdditionalAuthenticationProviderOutput) LambdaAuthorizerConfig() pulumix.GPtrOutput[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig, GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput] {
	value := pulumix.Apply[GraphQLApiAdditionalAuthenticationProvider](o, func(v GraphQLApiAdditionalAuthenticationProvider) *GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig {
		return v.LambdaAuthorizerConfig
	})
	return pulumix.GPtrOutput[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig, GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput]{OutputState: value.OutputState}
}

// Nested argument containing OpenID Connect configuration. Defined below.
func (o GraphQLApiAdditionalAuthenticationProviderOutput) OpenidConnectConfig() pulumix.GPtrOutput[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig, GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput] {
	value := pulumix.Apply[GraphQLApiAdditionalAuthenticationProvider](o, func(v GraphQLApiAdditionalAuthenticationProvider) *GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig {
		return v.OpenidConnectConfig
	})
	return pulumix.GPtrOutput[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig, GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput]{OutputState: value.OutputState}
}

// Amazon Cognito User Pool configuration. Defined below.
func (o GraphQLApiAdditionalAuthenticationProviderOutput) UserPoolConfig() pulumix.GPtrOutput[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig, GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput] {
	value := pulumix.Apply[GraphQLApiAdditionalAuthenticationProvider](o, func(v GraphQLApiAdditionalAuthenticationProvider) *GraphQLApiAdditionalAuthenticationProviderUserPoolConfig {
		return v.UserPoolConfig
	})
	return pulumix.GPtrOutput[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig, GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput]{OutputState: value.OutputState}
}

type GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig struct {
	// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
	AuthorizerResultTtlInSeconds *int `pulumi:"authorizerResultTtlInSeconds"`
	// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
	AuthorizerUri string `pulumi:"authorizerUri"`
	// Regular expression for validation of tokens before the Lambda function is called.
	IdentityValidationExpression *string `pulumi:"identityValidationExpression"`
}

type GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs struct {
	// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
	AuthorizerResultTtlInSeconds pulumix.Input[*int] `pulumi:"authorizerResultTtlInSeconds"`
	// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
	AuthorizerUri pulumix.Input[string] `pulumi:"authorizerUri"`
	// Regular expression for validation of tokens before the Lambda function is called.
	IdentityValidationExpression pulumix.Input[*string] `pulumi:"identityValidationExpression"`
}

func (GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig)(nil)).Elem()
}

func (i GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs) ToGraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput() GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput {
	return i.ToGraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputWithContext(context.Background())
}

func (i GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs) ToGraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput)
}

func (i *GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig)(nil)).Elem()
}

func (o GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) ToGraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput() GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) ToGraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig] {
	return pulumix.Output[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig]{
		OutputState: o.OutputState,
	}
}

// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
func (o GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) AuthorizerResultTtlInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig) *int {
		return v.AuthorizerResultTtlInSeconds
	})
}

// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
func (o GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) AuthorizerUri() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig) string {
		return v.AuthorizerUri
	})
}

// Regular expression for validation of tokens before the Lambda function is called.
func (o GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput) IdentityValidationExpression() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfig) *string {
		return v.IdentityValidationExpression
	})
}

type GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig struct {
	// Number of milliseconds a token is valid after being authenticated.
	AuthTtl *int `pulumi:"authTtl"`
	// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
	ClientId *string `pulumi:"clientId"`
	// Number of milliseconds a token is valid after being issued to a user.
	IatTtl *int `pulumi:"iatTtl"`
	// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
	Issuer string `pulumi:"issuer"`
}

type GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs struct {
	// Number of milliseconds a token is valid after being authenticated.
	AuthTtl pulumix.Input[*int] `pulumi:"authTtl"`
	// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
	ClientId pulumix.Input[*string] `pulumi:"clientId"`
	// Number of milliseconds a token is valid after being issued to a user.
	IatTtl pulumix.Input[*int] `pulumi:"iatTtl"`
	// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
	Issuer pulumix.Input[string] `pulumi:"issuer"`
}

func (GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig)(nil)).Elem()
}

func (i GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs) ToGraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput() GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput {
	return i.ToGraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutputWithContext(context.Background())
}

func (i GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs) ToGraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput)
}

func (i *GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig)(nil)).Elem()
}

func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) ToGraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput() GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) ToGraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig] {
	return pulumix.Output[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig]{
		OutputState: o.OutputState,
	}
}

// Number of milliseconds a token is valid after being authenticated.
func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) AuthTtl() pulumix.Output[*int] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig) *int { return v.AuthTtl })
}

// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) ClientId() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig) *string { return v.ClientId })
}

// Number of milliseconds a token is valid after being issued to a user.
func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) IatTtl() pulumix.Output[*int] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig) *int { return v.IatTtl })
}

// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
func (o GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput) Issuer() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig) string { return v.Issuer })
}

type GraphQLApiAdditionalAuthenticationProviderUserPoolConfig struct {
	// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
	AppIdClientRegex *string `pulumi:"appIdClientRegex"`
	// AWS region in which the user pool was created.
	AwsRegion *string `pulumi:"awsRegion"`
	// User pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

type GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs struct {
	// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
	AppIdClientRegex pulumix.Input[*string] `pulumi:"appIdClientRegex"`
	// AWS region in which the user pool was created.
	AwsRegion pulumix.Input[*string] `pulumi:"awsRegion"`
	// User pool ID.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProviderUserPoolConfig)(nil)).Elem()
}

func (i GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs) ToGraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput() GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput {
	return i.ToGraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutputWithContext(context.Background())
}

func (i GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs) ToGraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput)
}

func (i *GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiAdditionalAuthenticationProviderUserPoolConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiAdditionalAuthenticationProviderUserPoolConfig)(nil)).Elem()
}

func (o GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) ToGraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput() GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) ToGraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutputWithContext(ctx context.Context) GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput {
	return o
}

func (o GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig] {
	return pulumix.Output[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig]{
		OutputState: o.OutputState,
	}
}

// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
func (o GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) AppIdClientRegex() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderUserPoolConfig) *string { return v.AppIdClientRegex })
}

// AWS region in which the user pool was created.
func (o GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) AwsRegion() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderUserPoolConfig) *string { return v.AwsRegion })
}

// User pool ID.
func (o GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiAdditionalAuthenticationProviderUserPoolConfig](o, func(v GraphQLApiAdditionalAuthenticationProviderUserPoolConfig) string { return v.UserPoolId })
}

type GraphQLApiLambdaAuthorizerConfig struct {
	// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
	AuthorizerResultTtlInSeconds *int `pulumi:"authorizerResultTtlInSeconds"`
	// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
	AuthorizerUri string `pulumi:"authorizerUri"`
	// Regular expression for validation of tokens before the Lambda function is called.
	IdentityValidationExpression *string `pulumi:"identityValidationExpression"`
}

type GraphQLApiLambdaAuthorizerConfigArgs struct {
	// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
	AuthorizerResultTtlInSeconds pulumix.Input[*int] `pulumi:"authorizerResultTtlInSeconds"`
	// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
	AuthorizerUri pulumix.Input[string] `pulumi:"authorizerUri"`
	// Regular expression for validation of tokens before the Lambda function is called.
	IdentityValidationExpression pulumix.Input[*string] `pulumi:"identityValidationExpression"`
}

func (GraphQLApiLambdaAuthorizerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiLambdaAuthorizerConfig)(nil)).Elem()
}

func (i GraphQLApiLambdaAuthorizerConfigArgs) ToGraphQLApiLambdaAuthorizerConfigOutput() GraphQLApiLambdaAuthorizerConfigOutput {
	return i.ToGraphQLApiLambdaAuthorizerConfigOutputWithContext(context.Background())
}

func (i GraphQLApiLambdaAuthorizerConfigArgs) ToGraphQLApiLambdaAuthorizerConfigOutputWithContext(ctx context.Context) GraphQLApiLambdaAuthorizerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiLambdaAuthorizerConfigOutput)
}

func (i *GraphQLApiLambdaAuthorizerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiLambdaAuthorizerConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiLambdaAuthorizerConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiLambdaAuthorizerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiLambdaAuthorizerConfig)(nil)).Elem()
}

func (o GraphQLApiLambdaAuthorizerConfigOutput) ToGraphQLApiLambdaAuthorizerConfigOutput() GraphQLApiLambdaAuthorizerConfigOutput {
	return o
}

func (o GraphQLApiLambdaAuthorizerConfigOutput) ToGraphQLApiLambdaAuthorizerConfigOutputWithContext(ctx context.Context) GraphQLApiLambdaAuthorizerConfigOutput {
	return o
}

func (o GraphQLApiLambdaAuthorizerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiLambdaAuthorizerConfig] {
	return pulumix.Output[GraphQLApiLambdaAuthorizerConfig]{
		OutputState: o.OutputState,
	}
}

// Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
func (o GraphQLApiLambdaAuthorizerConfigOutput) AuthorizerResultTtlInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[GraphQLApiLambdaAuthorizerConfig](o, func(v GraphQLApiLambdaAuthorizerConfig) *int { return v.AuthorizerResultTtlInSeconds })
}

// ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
func (o GraphQLApiLambdaAuthorizerConfigOutput) AuthorizerUri() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiLambdaAuthorizerConfig](o, func(v GraphQLApiLambdaAuthorizerConfig) string { return v.AuthorizerUri })
}

// Regular expression for validation of tokens before the Lambda function is called.
func (o GraphQLApiLambdaAuthorizerConfigOutput) IdentityValidationExpression() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiLambdaAuthorizerConfig](o, func(v GraphQLApiLambdaAuthorizerConfig) *string { return v.IdentityValidationExpression })
}

type GraphQLApiLogConfig struct {
	// Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
	CloudwatchLogsRoleArn string `pulumi:"cloudwatchLogsRoleArn"`
	// Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
	ExcludeVerboseContent *bool `pulumi:"excludeVerboseContent"`
	// Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
	FieldLogLevel string `pulumi:"fieldLogLevel"`
}

type GraphQLApiLogConfigArgs struct {
	// Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
	CloudwatchLogsRoleArn pulumix.Input[string] `pulumi:"cloudwatchLogsRoleArn"`
	// Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
	ExcludeVerboseContent pulumix.Input[*bool] `pulumi:"excludeVerboseContent"`
	// Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
	FieldLogLevel pulumix.Input[string] `pulumi:"fieldLogLevel"`
}

func (GraphQLApiLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiLogConfig)(nil)).Elem()
}

func (i GraphQLApiLogConfigArgs) ToGraphQLApiLogConfigOutput() GraphQLApiLogConfigOutput {
	return i.ToGraphQLApiLogConfigOutputWithContext(context.Background())
}

func (i GraphQLApiLogConfigArgs) ToGraphQLApiLogConfigOutputWithContext(ctx context.Context) GraphQLApiLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiLogConfigOutput)
}

func (i *GraphQLApiLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiLogConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiLogConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiLogConfig)(nil)).Elem()
}

func (o GraphQLApiLogConfigOutput) ToGraphQLApiLogConfigOutput() GraphQLApiLogConfigOutput {
	return o
}

func (o GraphQLApiLogConfigOutput) ToGraphQLApiLogConfigOutputWithContext(ctx context.Context) GraphQLApiLogConfigOutput {
	return o
}

func (o GraphQLApiLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiLogConfig] {
	return pulumix.Output[GraphQLApiLogConfig]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
func (o GraphQLApiLogConfigOutput) CloudwatchLogsRoleArn() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiLogConfig](o, func(v GraphQLApiLogConfig) string { return v.CloudwatchLogsRoleArn })
}

// Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
func (o GraphQLApiLogConfigOutput) ExcludeVerboseContent() pulumix.Output[*bool] {
	return pulumix.Apply[GraphQLApiLogConfig](o, func(v GraphQLApiLogConfig) *bool { return v.ExcludeVerboseContent })
}

// Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
func (o GraphQLApiLogConfigOutput) FieldLogLevel() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiLogConfig](o, func(v GraphQLApiLogConfig) string { return v.FieldLogLevel })
}

type GraphQLApiOpenidConnectConfig struct {
	// Number of milliseconds a token is valid after being authenticated.
	AuthTtl *int `pulumi:"authTtl"`
	// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
	ClientId *string `pulumi:"clientId"`
	// Number of milliseconds a token is valid after being issued to a user.
	IatTtl *int `pulumi:"iatTtl"`
	// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
	Issuer string `pulumi:"issuer"`
}

type GraphQLApiOpenidConnectConfigArgs struct {
	// Number of milliseconds a token is valid after being authenticated.
	AuthTtl pulumix.Input[*int] `pulumi:"authTtl"`
	// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
	ClientId pulumix.Input[*string] `pulumi:"clientId"`
	// Number of milliseconds a token is valid after being issued to a user.
	IatTtl pulumix.Input[*int] `pulumi:"iatTtl"`
	// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
	Issuer pulumix.Input[string] `pulumi:"issuer"`
}

func (GraphQLApiOpenidConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiOpenidConnectConfig)(nil)).Elem()
}

func (i GraphQLApiOpenidConnectConfigArgs) ToGraphQLApiOpenidConnectConfigOutput() GraphQLApiOpenidConnectConfigOutput {
	return i.ToGraphQLApiOpenidConnectConfigOutputWithContext(context.Background())
}

func (i GraphQLApiOpenidConnectConfigArgs) ToGraphQLApiOpenidConnectConfigOutputWithContext(ctx context.Context) GraphQLApiOpenidConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiOpenidConnectConfigOutput)
}

func (i *GraphQLApiOpenidConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiOpenidConnectConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiOpenidConnectConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiOpenidConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiOpenidConnectConfig)(nil)).Elem()
}

func (o GraphQLApiOpenidConnectConfigOutput) ToGraphQLApiOpenidConnectConfigOutput() GraphQLApiOpenidConnectConfigOutput {
	return o
}

func (o GraphQLApiOpenidConnectConfigOutput) ToGraphQLApiOpenidConnectConfigOutputWithContext(ctx context.Context) GraphQLApiOpenidConnectConfigOutput {
	return o
}

func (o GraphQLApiOpenidConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiOpenidConnectConfig] {
	return pulumix.Output[GraphQLApiOpenidConnectConfig]{
		OutputState: o.OutputState,
	}
}

// Number of milliseconds a token is valid after being authenticated.
func (o GraphQLApiOpenidConnectConfigOutput) AuthTtl() pulumix.Output[*int] {
	return pulumix.Apply[GraphQLApiOpenidConnectConfig](o, func(v GraphQLApiOpenidConnectConfig) *int { return v.AuthTtl })
}

// Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
func (o GraphQLApiOpenidConnectConfigOutput) ClientId() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiOpenidConnectConfig](o, func(v GraphQLApiOpenidConnectConfig) *string { return v.ClientId })
}

// Number of milliseconds a token is valid after being issued to a user.
func (o GraphQLApiOpenidConnectConfigOutput) IatTtl() pulumix.Output[*int] {
	return pulumix.Apply[GraphQLApiOpenidConnectConfig](o, func(v GraphQLApiOpenidConnectConfig) *int { return v.IatTtl })
}

// Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
func (o GraphQLApiOpenidConnectConfigOutput) Issuer() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiOpenidConnectConfig](o, func(v GraphQLApiOpenidConnectConfig) string { return v.Issuer })
}

type GraphQLApiUserPoolConfig struct {
	// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
	AppIdClientRegex *string `pulumi:"appIdClientRegex"`
	// AWS region in which the user pool was created.
	AwsRegion *string `pulumi:"awsRegion"`
	// Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
	DefaultAction string `pulumi:"defaultAction"`
	// User pool ID.
	UserPoolId string `pulumi:"userPoolId"`
}

type GraphQLApiUserPoolConfigArgs struct {
	// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
	AppIdClientRegex pulumix.Input[*string] `pulumi:"appIdClientRegex"`
	// AWS region in which the user pool was created.
	AwsRegion pulumix.Input[*string] `pulumi:"awsRegion"`
	// Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
	DefaultAction pulumix.Input[string] `pulumi:"defaultAction"`
	// User pool ID.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (GraphQLApiUserPoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiUserPoolConfig)(nil)).Elem()
}

func (i GraphQLApiUserPoolConfigArgs) ToGraphQLApiUserPoolConfigOutput() GraphQLApiUserPoolConfigOutput {
	return i.ToGraphQLApiUserPoolConfigOutputWithContext(context.Background())
}

func (i GraphQLApiUserPoolConfigArgs) ToGraphQLApiUserPoolConfigOutputWithContext(ctx context.Context) GraphQLApiUserPoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQLApiUserPoolConfigOutput)
}

func (i *GraphQLApiUserPoolConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GraphQLApiUserPoolConfigArgs] {
	return pulumix.Val(i)
}

type GraphQLApiUserPoolConfigOutput struct{ *pulumi.OutputState }

func (GraphQLApiUserPoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQLApiUserPoolConfig)(nil)).Elem()
}

func (o GraphQLApiUserPoolConfigOutput) ToGraphQLApiUserPoolConfigOutput() GraphQLApiUserPoolConfigOutput {
	return o
}

func (o GraphQLApiUserPoolConfigOutput) ToGraphQLApiUserPoolConfigOutputWithContext(ctx context.Context) GraphQLApiUserPoolConfigOutput {
	return o
}

func (o GraphQLApiUserPoolConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQLApiUserPoolConfig] {
	return pulumix.Output[GraphQLApiUserPoolConfig]{
		OutputState: o.OutputState,
	}
}

// Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
func (o GraphQLApiUserPoolConfigOutput) AppIdClientRegex() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiUserPoolConfig](o, func(v GraphQLApiUserPoolConfig) *string { return v.AppIdClientRegex })
}

// AWS region in which the user pool was created.
func (o GraphQLApiUserPoolConfigOutput) AwsRegion() pulumix.Output[*string] {
	return pulumix.Apply[GraphQLApiUserPoolConfig](o, func(v GraphQLApiUserPoolConfig) *string { return v.AwsRegion })
}

// Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
func (o GraphQLApiUserPoolConfigOutput) DefaultAction() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiUserPoolConfig](o, func(v GraphQLApiUserPoolConfig) string { return v.DefaultAction })
}

// User pool ID.
func (o GraphQLApiUserPoolConfigOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[GraphQLApiUserPoolConfig](o, func(v GraphQLApiUserPoolConfig) string { return v.UserPoolId })
}

type ResolverCachingConfig struct {
	// The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
	CachingKeys []string `pulumi:"cachingKeys"`
	// The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
	Ttl *int `pulumi:"ttl"`
}

type ResolverCachingConfigArgs struct {
	// The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
	CachingKeys pulumix.Input[[]string] `pulumi:"cachingKeys"`
	// The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
	Ttl pulumix.Input[*int] `pulumi:"ttl"`
}

func (ResolverCachingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverCachingConfig)(nil)).Elem()
}

func (i ResolverCachingConfigArgs) ToResolverCachingConfigOutput() ResolverCachingConfigOutput {
	return i.ToResolverCachingConfigOutputWithContext(context.Background())
}

func (i ResolverCachingConfigArgs) ToResolverCachingConfigOutputWithContext(ctx context.Context) ResolverCachingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverCachingConfigOutput)
}

func (i *ResolverCachingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverCachingConfigArgs] {
	return pulumix.Val(i)
}

type ResolverCachingConfigOutput struct{ *pulumi.OutputState }

func (ResolverCachingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverCachingConfig)(nil)).Elem()
}

func (o ResolverCachingConfigOutput) ToResolverCachingConfigOutput() ResolverCachingConfigOutput {
	return o
}

func (o ResolverCachingConfigOutput) ToResolverCachingConfigOutputWithContext(ctx context.Context) ResolverCachingConfigOutput {
	return o
}

func (o ResolverCachingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverCachingConfig] {
	return pulumix.Output[ResolverCachingConfig]{
		OutputState: o.OutputState,
	}
}

// The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
func (o ResolverCachingConfigOutput) CachingKeys() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResolverCachingConfig](o, func(v ResolverCachingConfig) []string { return v.CachingKeys })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.
func (o ResolverCachingConfigOutput) Ttl() pulumix.Output[*int] {
	return pulumix.Apply[ResolverCachingConfig](o, func(v ResolverCachingConfig) *int { return v.Ttl })
}

type ResolverPipelineConfig struct {
	// A list of Function objects.
	Functions []string `pulumi:"functions"`
}

type ResolverPipelineConfigArgs struct {
	// A list of Function objects.
	Functions pulumix.Input[[]string] `pulumi:"functions"`
}

func (ResolverPipelineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverPipelineConfig)(nil)).Elem()
}

func (i ResolverPipelineConfigArgs) ToResolverPipelineConfigOutput() ResolverPipelineConfigOutput {
	return i.ToResolverPipelineConfigOutputWithContext(context.Background())
}

func (i ResolverPipelineConfigArgs) ToResolverPipelineConfigOutputWithContext(ctx context.Context) ResolverPipelineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverPipelineConfigOutput)
}

func (i *ResolverPipelineConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverPipelineConfigArgs] {
	return pulumix.Val(i)
}

type ResolverPipelineConfigOutput struct{ *pulumi.OutputState }

func (ResolverPipelineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverPipelineConfig)(nil)).Elem()
}

func (o ResolverPipelineConfigOutput) ToResolverPipelineConfigOutput() ResolverPipelineConfigOutput {
	return o
}

func (o ResolverPipelineConfigOutput) ToResolverPipelineConfigOutputWithContext(ctx context.Context) ResolverPipelineConfigOutput {
	return o
}

func (o ResolverPipelineConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverPipelineConfig] {
	return pulumix.Output[ResolverPipelineConfig]{
		OutputState: o.OutputState,
	}
}

// A list of Function objects.
func (o ResolverPipelineConfigOutput) Functions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResolverPipelineConfig](o, func(v ResolverPipelineConfig) []string { return v.Functions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ResolverRuntime struct {
	// The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
	Name string `pulumi:"name"`
	// The version of the runtime to use. Currently, the only allowed version is `1.0.0`.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

type ResolverRuntimeArgs struct {
	// The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
	Name pulumix.Input[string] `pulumi:"name"`
	// The version of the runtime to use. Currently, the only allowed version is `1.0.0`.
	RuntimeVersion pulumix.Input[string] `pulumi:"runtimeVersion"`
}

func (ResolverRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuntime)(nil)).Elem()
}

func (i ResolverRuntimeArgs) ToResolverRuntimeOutput() ResolverRuntimeOutput {
	return i.ToResolverRuntimeOutputWithContext(context.Background())
}

func (i ResolverRuntimeArgs) ToResolverRuntimeOutputWithContext(ctx context.Context) ResolverRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuntimeOutput)
}

func (i *ResolverRuntimeArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverRuntimeArgs] {
	return pulumix.Val(i)
}

type ResolverRuntimeOutput struct{ *pulumi.OutputState }

func (ResolverRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuntime)(nil)).Elem()
}

func (o ResolverRuntimeOutput) ToResolverRuntimeOutput() ResolverRuntimeOutput {
	return o
}

func (o ResolverRuntimeOutput) ToResolverRuntimeOutputWithContext(ctx context.Context) ResolverRuntimeOutput {
	return o
}

func (o ResolverRuntimeOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverRuntime] {
	return pulumix.Output[ResolverRuntime]{
		OutputState: o.OutputState,
	}
}

// The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
func (o ResolverRuntimeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ResolverRuntime](o, func(v ResolverRuntime) string { return v.Name })
}

// The version of the runtime to use. Currently, the only allowed version is `1.0.0`.
func (o ResolverRuntimeOutput) RuntimeVersion() pulumix.Output[string] {
	return pulumix.Apply[ResolverRuntime](o, func(v ResolverRuntime) string { return v.RuntimeVersion })
}

type ResolverSyncConfig struct {
	// Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
	ConflictDetection *string `pulumi:"conflictDetection"`
	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
	ConflictHandler *string `pulumi:"conflictHandler"`
	// Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
	LambdaConflictHandlerConfig *ResolverSyncConfigLambdaConflictHandlerConfig `pulumi:"lambdaConflictHandlerConfig"`
}

type ResolverSyncConfigArgs struct {
	// Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
	ConflictDetection pulumix.Input[*string] `pulumi:"conflictDetection"`
	// Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
	ConflictHandler pulumix.Input[*string] `pulumi:"conflictHandler"`
	// Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
	LambdaConflictHandlerConfig pulumix.Input[*ResolverSyncConfigLambdaConflictHandlerConfigArgs] `pulumi:"lambdaConflictHandlerConfig"`
}

func (ResolverSyncConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverSyncConfig)(nil)).Elem()
}

func (i ResolverSyncConfigArgs) ToResolverSyncConfigOutput() ResolverSyncConfigOutput {
	return i.ToResolverSyncConfigOutputWithContext(context.Background())
}

func (i ResolverSyncConfigArgs) ToResolverSyncConfigOutputWithContext(ctx context.Context) ResolverSyncConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverSyncConfigOutput)
}

func (i *ResolverSyncConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverSyncConfigArgs] {
	return pulumix.Val(i)
}

type ResolverSyncConfigOutput struct{ *pulumi.OutputState }

func (ResolverSyncConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverSyncConfig)(nil)).Elem()
}

func (o ResolverSyncConfigOutput) ToResolverSyncConfigOutput() ResolverSyncConfigOutput {
	return o
}

func (o ResolverSyncConfigOutput) ToResolverSyncConfigOutputWithContext(ctx context.Context) ResolverSyncConfigOutput {
	return o
}

func (o ResolverSyncConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverSyncConfig] {
	return pulumix.Output[ResolverSyncConfig]{
		OutputState: o.OutputState,
	}
}

// Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
func (o ResolverSyncConfigOutput) ConflictDetection() pulumix.Output[*string] {
	return pulumix.Apply[ResolverSyncConfig](o, func(v ResolverSyncConfig) *string { return v.ConflictDetection })
}

// Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
func (o ResolverSyncConfigOutput) ConflictHandler() pulumix.Output[*string] {
	return pulumix.Apply[ResolverSyncConfig](o, func(v ResolverSyncConfig) *string { return v.ConflictHandler })
}

// Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.
func (o ResolverSyncConfigOutput) LambdaConflictHandlerConfig() pulumix.GPtrOutput[ResolverSyncConfigLambdaConflictHandlerConfig, ResolverSyncConfigLambdaConflictHandlerConfigOutput] {
	value := pulumix.Apply[ResolverSyncConfig](o, func(v ResolverSyncConfig) *ResolverSyncConfigLambdaConflictHandlerConfig {
		return v.LambdaConflictHandlerConfig
	})
	return pulumix.GPtrOutput[ResolverSyncConfigLambdaConflictHandlerConfig, ResolverSyncConfigLambdaConflictHandlerConfigOutput]{OutputState: value.OutputState}
}

type ResolverSyncConfigLambdaConflictHandlerConfig struct {
	// ARN for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn *string `pulumi:"lambdaConflictHandlerArn"`
}

type ResolverSyncConfigLambdaConflictHandlerConfigArgs struct {
	// ARN for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn pulumix.Input[*string] `pulumi:"lambdaConflictHandlerArn"`
}

func (ResolverSyncConfigLambdaConflictHandlerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverSyncConfigLambdaConflictHandlerConfig)(nil)).Elem()
}

func (i ResolverSyncConfigLambdaConflictHandlerConfigArgs) ToResolverSyncConfigLambdaConflictHandlerConfigOutput() ResolverSyncConfigLambdaConflictHandlerConfigOutput {
	return i.ToResolverSyncConfigLambdaConflictHandlerConfigOutputWithContext(context.Background())
}

func (i ResolverSyncConfigLambdaConflictHandlerConfigArgs) ToResolverSyncConfigLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) ResolverSyncConfigLambdaConflictHandlerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverSyncConfigLambdaConflictHandlerConfigOutput)
}

func (i *ResolverSyncConfigLambdaConflictHandlerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ResolverSyncConfigLambdaConflictHandlerConfigArgs] {
	return pulumix.Val(i)
}

type ResolverSyncConfigLambdaConflictHandlerConfigOutput struct{ *pulumi.OutputState }

func (ResolverSyncConfigLambdaConflictHandlerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverSyncConfigLambdaConflictHandlerConfig)(nil)).Elem()
}

func (o ResolverSyncConfigLambdaConflictHandlerConfigOutput) ToResolverSyncConfigLambdaConflictHandlerConfigOutput() ResolverSyncConfigLambdaConflictHandlerConfigOutput {
	return o
}

func (o ResolverSyncConfigLambdaConflictHandlerConfigOutput) ToResolverSyncConfigLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) ResolverSyncConfigLambdaConflictHandlerConfigOutput {
	return o
}

func (o ResolverSyncConfigLambdaConflictHandlerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ResolverSyncConfigLambdaConflictHandlerConfig] {
	return pulumix.Output[ResolverSyncConfigLambdaConflictHandlerConfig]{
		OutputState: o.OutputState,
	}
}

// ARN for the Lambda function to use as the Conflict Handler.
func (o ResolverSyncConfigLambdaConflictHandlerConfigOutput) LambdaConflictHandlerArn() pulumix.Output[*string] {
	return pulumix.Apply[ResolverSyncConfigLambdaConflictHandlerConfig](o, func(v ResolverSyncConfigLambdaConflictHandlerConfig) *string { return v.LambdaConflictHandlerArn })
}

func init() {
	pulumi.RegisterOutputType(DataSourceDynamodbConfigOutput{})
	pulumi.RegisterOutputType(DataSourceDynamodbConfigDeltaSyncConfigOutput{})
	pulumi.RegisterOutputType(DataSourceElasticsearchConfigOutput{})
	pulumi.RegisterOutputType(DataSourceEventBridgeConfigOutput{})
	pulumi.RegisterOutputType(DataSourceHttpConfigOutput{})
	pulumi.RegisterOutputType(DataSourceHttpConfigAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(DataSourceHttpConfigAuthorizationConfigAwsIamConfigOutput{})
	pulumi.RegisterOutputType(DataSourceLambdaConfigOutput{})
	pulumi.RegisterOutputType(DataSourceOpensearchserviceConfigOutput{})
	pulumi.RegisterOutputType(DataSourceRelationalDatabaseConfigOutput{})
	pulumi.RegisterOutputType(DataSourceRelationalDatabaseConfigHttpEndpointConfigOutput{})
	pulumi.RegisterOutputType(FunctionRuntimeOutput{})
	pulumi.RegisterOutputType(FunctionSyncConfigOutput{})
	pulumi.RegisterOutputType(FunctionSyncConfigLambdaConflictHandlerConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiAdditionalAuthenticationProviderOutput{})
	pulumi.RegisterOutputType(GraphQLApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiAdditionalAuthenticationProviderUserPoolConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiLambdaAuthorizerConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiLogConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiOpenidConnectConfigOutput{})
	pulumi.RegisterOutputType(GraphQLApiUserPoolConfigOutput{})
	pulumi.RegisterOutputType(ResolverCachingConfigOutput{})
	pulumi.RegisterOutputType(ResolverPipelineConfigOutput{})
	pulumi.RegisterOutputType(ResolverRuntimeOutput{})
	pulumi.RegisterOutputType(ResolverSyncConfigOutput{})
	pulumi.RegisterOutputType(ResolverSyncConfigLambdaConflictHandlerConfigOutput{})
}
