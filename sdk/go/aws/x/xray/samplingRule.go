// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates and manages an AWS XRay Sampling Rule.
type SamplingRule struct {
	pulumi.CustomResourceState

	// The ARN of the sampling rule.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Matches attributes derived from the request.
	Attributes pulumix.MapOutput[string] `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumix.Output[float64] `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host pulumix.Output[string] `pulumi:"host"`
	// Matches the HTTP method of a request.
	HttpMethod pulumix.Output[string] `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority pulumix.Output[int] `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumix.Output[int] `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// The name of the sampling rule.
	RuleName pulumix.Output[*string] `pulumi:"ruleName"`
	// Matches the `name` that the service uses to identify itself in segments.
	ServiceName pulumix.Output[string] `pulumi:"serviceName"`
	// Matches the `origin` that the service uses to identify its type in segments.
	ServiceType pulumix.Output[string] `pulumi:"serviceType"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Matches the path from a request URL.
	UrlPath pulumix.Output[string] `pulumi:"urlPath"`
	// The version of the sampling rule format (`1` )
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewSamplingRule registers a new resource with the given unique name, arguments, and options.
func NewSamplingRule(ctx *pulumi.Context,
	name string, args *SamplingRuleArgs, opts ...pulumi.ResourceOption) (*SamplingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FixedRate == nil {
		return nil, errors.New("invalid value for required argument 'FixedRate'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.ReservoirSize == nil {
		return nil, errors.New("invalid value for required argument 'ReservoirSize'")
	}
	if args.ResourceArn == nil {
		return nil, errors.New("invalid value for required argument 'ResourceArn'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.ServiceType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceType'")
	}
	if args.UrlPath == nil {
		return nil, errors.New("invalid value for required argument 'UrlPath'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SamplingRule
	err := ctx.RegisterResource("aws:xray/samplingRule:SamplingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamplingRule gets an existing SamplingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamplingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamplingRuleState, opts ...pulumi.ResourceOption) (*SamplingRule, error) {
	var resource SamplingRule
	err := ctx.ReadResource("aws:xray/samplingRule:SamplingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamplingRule resources.
type samplingRuleState struct {
	// The ARN of the sampling rule.
	Arn *string `pulumi:"arn"`
	// Matches attributes derived from the request.
	Attributes map[string]string `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate *float64 `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host *string `pulumi:"host"`
	// Matches the HTTP method of a request.
	HttpMethod *string `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority *int `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize *int `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn *string `pulumi:"resourceArn"`
	// The name of the sampling rule.
	RuleName *string `pulumi:"ruleName"`
	// Matches the `name` that the service uses to identify itself in segments.
	ServiceName *string `pulumi:"serviceName"`
	// Matches the `origin` that the service uses to identify its type in segments.
	ServiceType *string `pulumi:"serviceType"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Matches the path from a request URL.
	UrlPath *string `pulumi:"urlPath"`
	// The version of the sampling rule format (`1` )
	Version *int `pulumi:"version"`
}

type SamplingRuleState struct {
	// The ARN of the sampling rule.
	Arn pulumix.Input[*string]
	// Matches attributes derived from the request.
	Attributes pulumix.Input[map[string]string]
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumix.Input[*float64]
	// Matches the hostname from a request URL.
	Host pulumix.Input[*string]
	// Matches the HTTP method of a request.
	HttpMethod pulumix.Input[*string]
	// The priority of the sampling rule.
	Priority pulumix.Input[*int]
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumix.Input[*int]
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn pulumix.Input[*string]
	// The name of the sampling rule.
	RuleName pulumix.Input[*string]
	// Matches the `name` that the service uses to identify itself in segments.
	ServiceName pulumix.Input[*string]
	// Matches the `origin` that the service uses to identify its type in segments.
	ServiceType pulumix.Input[*string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Matches the path from a request URL.
	UrlPath pulumix.Input[*string]
	// The version of the sampling rule format (`1` )
	Version pulumix.Input[*int]
}

func (SamplingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*samplingRuleState)(nil)).Elem()
}

type samplingRuleArgs struct {
	// Matches attributes derived from the request.
	Attributes map[string]string `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate float64 `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host string `pulumi:"host"`
	// Matches the HTTP method of a request.
	HttpMethod string `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority int `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize int `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn string `pulumi:"resourceArn"`
	// The name of the sampling rule.
	RuleName *string `pulumi:"ruleName"`
	// Matches the `name` that the service uses to identify itself in segments.
	ServiceName string `pulumi:"serviceName"`
	// Matches the `origin` that the service uses to identify its type in segments.
	ServiceType string `pulumi:"serviceType"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags map[string]string `pulumi:"tags"`
	// Matches the path from a request URL.
	UrlPath string `pulumi:"urlPath"`
	// The version of the sampling rule format (`1` )
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a SamplingRule resource.
type SamplingRuleArgs struct {
	// Matches attributes derived from the request.
	Attributes pulumix.Input[map[string]string]
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumix.Input[float64]
	// Matches the hostname from a request URL.
	Host pulumix.Input[string]
	// Matches the HTTP method of a request.
	HttpMethod pulumix.Input[string]
	// The priority of the sampling rule.
	Priority pulumix.Input[int]
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumix.Input[int]
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn pulumix.Input[string]
	// The name of the sampling rule.
	RuleName pulumix.Input[*string]
	// Matches the `name` that the service uses to identify itself in segments.
	ServiceName pulumix.Input[string]
	// Matches the `origin` that the service uses to identify its type in segments.
	ServiceType pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
	Tags pulumix.Input[map[string]string]
	// Matches the path from a request URL.
	UrlPath pulumix.Input[string]
	// The version of the sampling rule format (`1` )
	Version pulumix.Input[int]
}

func (SamplingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samplingRuleArgs)(nil)).Elem()
}

type SamplingRuleOutput struct{ *pulumi.OutputState }

func (SamplingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRule)(nil)).Elem()
}

func (o SamplingRuleOutput) ToSamplingRuleOutput() SamplingRuleOutput {
	return o
}

func (o SamplingRuleOutput) ToSamplingRuleOutputWithContext(ctx context.Context) SamplingRuleOutput {
	return o
}

func (o SamplingRuleOutput) ToOutput(ctx context.Context) pulumix.Output[SamplingRule] {
	return pulumix.Output[SamplingRule]{
		OutputState: o.OutputState,
	}
}

// The ARN of the sampling rule.
func (o SamplingRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Matches attributes derived from the request.
func (o SamplingRuleOutput) Attributes() pulumix.MapOutput[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.MapOutput[string] { return v.Attributes })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleOutput) FixedRate() pulumix.Output[float64] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[float64] { return v.FixedRate })
	return pulumix.Flatten[float64, pulumix.Output[float64]](value)
}

// Matches the hostname from a request URL.
func (o SamplingRuleOutput) Host() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.Host })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Matches the HTTP method of a request.
func (o SamplingRuleOutput) HttpMethod() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.HttpMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The priority of the sampling rule.
func (o SamplingRuleOutput) Priority() pulumix.Output[int] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[int] { return v.Priority })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleOutput) ReservoirSize() pulumix.Output[int] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[int] { return v.ReservoirSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the sampling rule.
func (o SamplingRuleOutput) RuleName() pulumix.Output[*string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[*string] { return v.RuleName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Matches the `name` that the service uses to identify itself in segments.
func (o SamplingRuleOutput) ServiceName() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.ServiceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Matches the `origin` that the service uses to identify its type in segments.
func (o SamplingRuleOutput) ServiceType() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.ServiceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
func (o SamplingRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SamplingRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Matches the path from a request URL.
func (o SamplingRuleOutput) UrlPath() pulumix.Output[string] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[string] { return v.UrlPath })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version of the sampling rule format (`1` )
func (o SamplingRuleOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[SamplingRule](o, func(v SamplingRule) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(SamplingRuleOutput{})
}
