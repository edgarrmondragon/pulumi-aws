// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Associates a link to a device.
// A device can be associated to multiple links and a link can be associated to multiple devices.
// The device and link must be in the same global network and the same site.
type LinkAssociation struct {
	pulumi.CustomResourceState

	// The ID of the device.
	DeviceId pulumix.Output[string] `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId pulumix.Output[string] `pulumi:"globalNetworkId"`
	// The ID of the link.
	LinkId pulumix.Output[string] `pulumi:"linkId"`
}

// NewLinkAssociation registers a new resource with the given unique name, arguments, and options.
func NewLinkAssociation(ctx *pulumi.Context,
	name string, args *LinkAssociationArgs, opts ...pulumi.ResourceOption) (*LinkAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	if args.LinkId == nil {
		return nil, errors.New("invalid value for required argument 'LinkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkAssociation
	err := ctx.RegisterResource("aws:networkmanager/linkAssociation:LinkAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkAssociation gets an existing LinkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkAssociationState, opts ...pulumi.ResourceOption) (*LinkAssociation, error) {
	var resource LinkAssociation
	err := ctx.ReadResource("aws:networkmanager/linkAssociation:LinkAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkAssociation resources.
type linkAssociationState struct {
	// The ID of the device.
	DeviceId *string `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId *string `pulumi:"globalNetworkId"`
	// The ID of the link.
	LinkId *string `pulumi:"linkId"`
}

type LinkAssociationState struct {
	// The ID of the device.
	DeviceId pulumix.Input[*string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[*string]
	// The ID of the link.
	LinkId pulumix.Input[*string]
}

func (LinkAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAssociationState)(nil)).Elem()
}

type linkAssociationArgs struct {
	// The ID of the device.
	DeviceId string `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The ID of the link.
	LinkId string `pulumi:"linkId"`
}

// The set of arguments for constructing a LinkAssociation resource.
type LinkAssociationArgs struct {
	// The ID of the device.
	DeviceId pulumix.Input[string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[string]
	// The ID of the link.
	LinkId pulumix.Input[string]
}

func (LinkAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAssociationArgs)(nil)).Elem()
}

type LinkAssociationOutput struct{ *pulumi.OutputState }

func (LinkAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkAssociation)(nil)).Elem()
}

func (o LinkAssociationOutput) ToLinkAssociationOutput() LinkAssociationOutput {
	return o
}

func (o LinkAssociationOutput) ToLinkAssociationOutputWithContext(ctx context.Context) LinkAssociationOutput {
	return o
}

func (o LinkAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[LinkAssociation] {
	return pulumix.Output[LinkAssociation]{
		OutputState: o.OutputState,
	}
}

// The ID of the device.
func (o LinkAssociationOutput) DeviceId() pulumix.Output[string] {
	value := pulumix.Apply[LinkAssociation](o, func(v LinkAssociation) pulumix.Output[string] { return v.DeviceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the global network.
func (o LinkAssociationOutput) GlobalNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[LinkAssociation](o, func(v LinkAssociation) pulumix.Output[string] { return v.GlobalNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the link.
func (o LinkAssociationOutput) LinkId() pulumix.Output[string] {
	value := pulumix.Apply[LinkAssociation](o, func(v LinkAssociation) pulumix.Output[string] { return v.LinkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LinkAssociationOutput{})
}
