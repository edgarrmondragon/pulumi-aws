// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DirectoryConnectSettings struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The IP addresses of the AD Connector servers.
	ConnectIps []string `pulumi:"connectIps"`
	// The DNS IP addresses of the domain to connect to.
	CustomerDnsIps []string `pulumi:"customerDnsIps"`
	// The username corresponding to the password provided.
	CustomerUsername string `pulumi:"customerUsername"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId string `pulumi:"vpcId"`
}

type DirectoryConnectSettingsArgs struct {
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// The IP addresses of the AD Connector servers.
	ConnectIps pulumix.Input[[]string] `pulumi:"connectIps"`
	// The DNS IP addresses of the domain to connect to.
	CustomerDnsIps pulumix.Input[[]string] `pulumi:"customerDnsIps"`
	// The username corresponding to the password provided.
	CustomerUsername pulumix.Input[string] `pulumi:"customerUsername"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (DirectoryConnectSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryConnectSettings)(nil)).Elem()
}

func (i DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput {
	return i.ToDirectoryConnectSettingsOutputWithContext(context.Background())
}

func (i DirectoryConnectSettingsArgs) ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryConnectSettingsOutput)
}

func (i *DirectoryConnectSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*DirectoryConnectSettingsArgs] {
	return pulumix.Val(i)
}

type DirectoryConnectSettingsOutput struct{ *pulumi.OutputState }

func (DirectoryConnectSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryConnectSettings)(nil)).Elem()
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsOutput() DirectoryConnectSettingsOutput {
	return o
}

func (o DirectoryConnectSettingsOutput) ToDirectoryConnectSettingsOutputWithContext(ctx context.Context) DirectoryConnectSettingsOutput {
	return o
}

func (o DirectoryConnectSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DirectoryConnectSettings] {
	return pulumix.Output[DirectoryConnectSettings]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryConnectSettingsOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DirectoryConnectSettings](o, func(v DirectoryConnectSettings) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The IP addresses of the AD Connector servers.
func (o DirectoryConnectSettingsOutput) ConnectIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DirectoryConnectSettings](o, func(v DirectoryConnectSettings) []string { return v.ConnectIps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The DNS IP addresses of the domain to connect to.
func (o DirectoryConnectSettingsOutput) CustomerDnsIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DirectoryConnectSettings](o, func(v DirectoryConnectSettings) []string { return v.CustomerDnsIps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The username corresponding to the password provided.
func (o DirectoryConnectSettingsOutput) CustomerUsername() pulumix.Output[string] {
	return pulumix.Apply[DirectoryConnectSettings](o, func(v DirectoryConnectSettings) string { return v.CustomerUsername })
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryConnectSettingsOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DirectoryConnectSettings](o, func(v DirectoryConnectSettings) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The identifier of the VPC that the directory is in.
func (o DirectoryConnectSettingsOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[DirectoryConnectSettings](o, func(v DirectoryConnectSettings) string { return v.VpcId })
}

type DirectoryVpcSettings struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId string `pulumi:"vpcId"`
}

type DirectoryVpcSettingsArgs struct {
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The identifier of the VPC that the directory is in.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (DirectoryVpcSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryVpcSettings)(nil)).Elem()
}

func (i DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput {
	return i.ToDirectoryVpcSettingsOutputWithContext(context.Background())
}

func (i DirectoryVpcSettingsArgs) ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryVpcSettingsOutput)
}

func (i *DirectoryVpcSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*DirectoryVpcSettingsArgs] {
	return pulumix.Val(i)
}

type DirectoryVpcSettingsOutput struct{ *pulumi.OutputState }

func (DirectoryVpcSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryVpcSettings)(nil)).Elem()
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsOutput() DirectoryVpcSettingsOutput {
	return o
}

func (o DirectoryVpcSettingsOutput) ToDirectoryVpcSettingsOutputWithContext(ctx context.Context) DirectoryVpcSettingsOutput {
	return o
}

func (o DirectoryVpcSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DirectoryVpcSettings] {
	return pulumix.Output[DirectoryVpcSettings]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryVpcSettingsOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DirectoryVpcSettings](o, func(v DirectoryVpcSettings) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
func (o DirectoryVpcSettingsOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[DirectoryVpcSettings](o, func(v DirectoryVpcSettings) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The identifier of the VPC that the directory is in.
func (o DirectoryVpcSettingsOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[DirectoryVpcSettings](o, func(v DirectoryVpcSettings) string { return v.VpcId })
}

type ServiceRegionVpcSettings struct {
	// The identifiers of the subnets for the directory servers.
	SubnetIds []string `pulumi:"subnetIds"`
	// The identifier of the VPC in which to create the directory.
	VpcId string `pulumi:"vpcId"`
}

type ServiceRegionVpcSettingsArgs struct {
	// The identifiers of the subnets for the directory servers.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// The identifier of the VPC in which to create the directory.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (ServiceRegionVpcSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegionVpcSettings)(nil)).Elem()
}

func (i ServiceRegionVpcSettingsArgs) ToServiceRegionVpcSettingsOutput() ServiceRegionVpcSettingsOutput {
	return i.ToServiceRegionVpcSettingsOutputWithContext(context.Background())
}

func (i ServiceRegionVpcSettingsArgs) ToServiceRegionVpcSettingsOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegionVpcSettingsOutput)
}

func (i *ServiceRegionVpcSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceRegionVpcSettingsArgs] {
	return pulumix.Val(i)
}

type ServiceRegionVpcSettingsOutput struct{ *pulumi.OutputState }

func (ServiceRegionVpcSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegionVpcSettings)(nil)).Elem()
}

func (o ServiceRegionVpcSettingsOutput) ToServiceRegionVpcSettingsOutput() ServiceRegionVpcSettingsOutput {
	return o
}

func (o ServiceRegionVpcSettingsOutput) ToServiceRegionVpcSettingsOutputWithContext(ctx context.Context) ServiceRegionVpcSettingsOutput {
	return o
}

func (o ServiceRegionVpcSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceRegionVpcSettings] {
	return pulumix.Output[ServiceRegionVpcSettings]{
		OutputState: o.OutputState,
	}
}

// The identifiers of the subnets for the directory servers.
func (o ServiceRegionVpcSettingsOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ServiceRegionVpcSettings](o, func(v ServiceRegionVpcSettings) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The identifier of the VPC in which to create the directory.
func (o ServiceRegionVpcSettingsOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[ServiceRegionVpcSettings](o, func(v ServiceRegionVpcSettings) string { return v.VpcId })
}

type SharedDirectoryTarget struct {
	// Identifier of the directory consumer account.
	Id string `pulumi:"id"`
	// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
	Type *string `pulumi:"type"`
}

type SharedDirectoryTargetArgs struct {
	// Identifier of the directory consumer account.
	Id pulumix.Input[string] `pulumi:"id"`
	// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (SharedDirectoryTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedDirectoryTarget)(nil)).Elem()
}

func (i SharedDirectoryTargetArgs) ToSharedDirectoryTargetOutput() SharedDirectoryTargetOutput {
	return i.ToSharedDirectoryTargetOutputWithContext(context.Background())
}

func (i SharedDirectoryTargetArgs) ToSharedDirectoryTargetOutputWithContext(ctx context.Context) SharedDirectoryTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedDirectoryTargetOutput)
}

func (i *SharedDirectoryTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*SharedDirectoryTargetArgs] {
	return pulumix.Val(i)
}

type SharedDirectoryTargetOutput struct{ *pulumi.OutputState }

func (SharedDirectoryTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedDirectoryTarget)(nil)).Elem()
}

func (o SharedDirectoryTargetOutput) ToSharedDirectoryTargetOutput() SharedDirectoryTargetOutput {
	return o
}

func (o SharedDirectoryTargetOutput) ToSharedDirectoryTargetOutputWithContext(ctx context.Context) SharedDirectoryTargetOutput {
	return o
}

func (o SharedDirectoryTargetOutput) ToOutput(ctx context.Context) pulumix.Output[SharedDirectoryTarget] {
	return pulumix.Output[SharedDirectoryTarget]{
		OutputState: o.OutputState,
	}
}

// Identifier of the directory consumer account.
func (o SharedDirectoryTargetOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[SharedDirectoryTarget](o, func(v SharedDirectoryTarget) string { return v.Id })
}

// Type of identifier to be used in the `id` field. Valid value is `ACCOUNT`. Default is `ACCOUNT`.
func (o SharedDirectoryTargetOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[SharedDirectoryTarget](o, func(v SharedDirectoryTarget) *string { return v.Type })
}

type GetDirectoryConnectSetting struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// IP addresses of the AD Connector servers.
	ConnectIps []string `pulumi:"connectIps"`
	// DNS IP addresses of the domain to connect to.
	CustomerDnsIps []string `pulumi:"customerDnsIps"`
	// Username corresponding to the password provided.
	CustomerUsername string `pulumi:"customerUsername"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId string `pulumi:"vpcId"`
}

type GetDirectoryConnectSettingArgs struct {
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// IP addresses of the AD Connector servers.
	ConnectIps pulumix.Input[[]string] `pulumi:"connectIps"`
	// DNS IP addresses of the domain to connect to.
	CustomerDnsIps pulumix.Input[[]string] `pulumi:"customerDnsIps"`
	// Username corresponding to the password provided.
	CustomerUsername pulumix.Input[string] `pulumi:"customerUsername"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (GetDirectoryConnectSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryConnectSetting)(nil)).Elem()
}

func (i GetDirectoryConnectSettingArgs) ToGetDirectoryConnectSettingOutput() GetDirectoryConnectSettingOutput {
	return i.ToGetDirectoryConnectSettingOutputWithContext(context.Background())
}

func (i GetDirectoryConnectSettingArgs) ToGetDirectoryConnectSettingOutputWithContext(ctx context.Context) GetDirectoryConnectSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryConnectSettingOutput)
}

func (i *GetDirectoryConnectSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDirectoryConnectSettingArgs] {
	return pulumix.Val(i)
}

type GetDirectoryConnectSettingOutput struct{ *pulumi.OutputState }

func (GetDirectoryConnectSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryConnectSetting)(nil)).Elem()
}

func (o GetDirectoryConnectSettingOutput) ToGetDirectoryConnectSettingOutput() GetDirectoryConnectSettingOutput {
	return o
}

func (o GetDirectoryConnectSettingOutput) ToGetDirectoryConnectSettingOutputWithContext(ctx context.Context) GetDirectoryConnectSettingOutput {
	return o
}

func (o GetDirectoryConnectSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectoryConnectSetting] {
	return pulumix.Output[GetDirectoryConnectSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetDirectoryConnectSettingOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryConnectSetting](o, func(v GetDirectoryConnectSetting) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// IP addresses of the AD Connector servers.
func (o GetDirectoryConnectSettingOutput) ConnectIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryConnectSetting](o, func(v GetDirectoryConnectSetting) []string { return v.ConnectIps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// DNS IP addresses of the domain to connect to.
func (o GetDirectoryConnectSettingOutput) CustomerDnsIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryConnectSetting](o, func(v GetDirectoryConnectSetting) []string { return v.CustomerDnsIps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Username corresponding to the password provided.
func (o GetDirectoryConnectSettingOutput) CustomerUsername() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryConnectSetting](o, func(v GetDirectoryConnectSetting) string { return v.CustomerUsername })
}

// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
func (o GetDirectoryConnectSettingOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryConnectSetting](o, func(v GetDirectoryConnectSetting) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ID of the VPC that the connector is in.
func (o GetDirectoryConnectSettingOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryConnectSetting](o, func(v GetDirectoryConnectSetting) string { return v.VpcId })
}

type GetDirectoryRadiusSetting struct {
	// The protocol specified for your RADIUS endpoints.
	AuthenticationProtocol string `pulumi:"authenticationProtocol"`
	// Display label.
	DisplayLabel string `pulumi:"displayLabel"`
	// Port that your RADIUS server is using for communications.
	RadiusPort int `pulumi:"radiusPort"`
	// Maximum number of times that communication with the RADIUS server is attempted.
	RadiusRetries int `pulumi:"radiusRetries"`
	// Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers []string `pulumi:"radiusServers"`
	// Amount of time, in seconds, to wait for the RADIUS server to respond.
	RadiusTimeout int `pulumi:"radiusTimeout"`
	// Not currently used.
	UseSameUsername bool `pulumi:"useSameUsername"`
}

type GetDirectoryRadiusSettingArgs struct {
	// The protocol specified for your RADIUS endpoints.
	AuthenticationProtocol pulumix.Input[string] `pulumi:"authenticationProtocol"`
	// Display label.
	DisplayLabel pulumix.Input[string] `pulumi:"displayLabel"`
	// Port that your RADIUS server is using for communications.
	RadiusPort pulumix.Input[int] `pulumi:"radiusPort"`
	// Maximum number of times that communication with the RADIUS server is attempted.
	RadiusRetries pulumix.Input[int] `pulumi:"radiusRetries"`
	// Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers pulumix.Input[[]string] `pulumi:"radiusServers"`
	// Amount of time, in seconds, to wait for the RADIUS server to respond.
	RadiusTimeout pulumix.Input[int] `pulumi:"radiusTimeout"`
	// Not currently used.
	UseSameUsername pulumix.Input[bool] `pulumi:"useSameUsername"`
}

func (GetDirectoryRadiusSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryRadiusSetting)(nil)).Elem()
}

func (i GetDirectoryRadiusSettingArgs) ToGetDirectoryRadiusSettingOutput() GetDirectoryRadiusSettingOutput {
	return i.ToGetDirectoryRadiusSettingOutputWithContext(context.Background())
}

func (i GetDirectoryRadiusSettingArgs) ToGetDirectoryRadiusSettingOutputWithContext(ctx context.Context) GetDirectoryRadiusSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryRadiusSettingOutput)
}

func (i *GetDirectoryRadiusSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDirectoryRadiusSettingArgs] {
	return pulumix.Val(i)
}

type GetDirectoryRadiusSettingOutput struct{ *pulumi.OutputState }

func (GetDirectoryRadiusSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryRadiusSetting)(nil)).Elem()
}

func (o GetDirectoryRadiusSettingOutput) ToGetDirectoryRadiusSettingOutput() GetDirectoryRadiusSettingOutput {
	return o
}

func (o GetDirectoryRadiusSettingOutput) ToGetDirectoryRadiusSettingOutputWithContext(ctx context.Context) GetDirectoryRadiusSettingOutput {
	return o
}

func (o GetDirectoryRadiusSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectoryRadiusSetting] {
	return pulumix.Output[GetDirectoryRadiusSetting]{
		OutputState: o.OutputState,
	}
}

// The protocol specified for your RADIUS endpoints.
func (o GetDirectoryRadiusSettingOutput) AuthenticationProtocol() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) string { return v.AuthenticationProtocol })
}

// Display label.
func (o GetDirectoryRadiusSettingOutput) DisplayLabel() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) string { return v.DisplayLabel })
}

// Port that your RADIUS server is using for communications.
func (o GetDirectoryRadiusSettingOutput) RadiusPort() pulumix.Output[int] {
	return pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) int { return v.RadiusPort })
}

// Maximum number of times that communication with the RADIUS server is attempted.
func (o GetDirectoryRadiusSettingOutput) RadiusRetries() pulumix.Output[int] {
	return pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) int { return v.RadiusRetries })
}

// Set of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
func (o GetDirectoryRadiusSettingOutput) RadiusServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) []string { return v.RadiusServers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Amount of time, in seconds, to wait for the RADIUS server to respond.
func (o GetDirectoryRadiusSettingOutput) RadiusTimeout() pulumix.Output[int] {
	return pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) int { return v.RadiusTimeout })
}

// Not currently used.
func (o GetDirectoryRadiusSettingOutput) UseSameUsername() pulumix.Output[bool] {
	return pulumix.Apply[GetDirectoryRadiusSetting](o, func(v GetDirectoryRadiusSetting) bool { return v.UseSameUsername })
}

type GetDirectoryVpcSetting struct {
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds []string `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId string `pulumi:"vpcId"`
}

type GetDirectoryVpcSettingArgs struct {
	AvailabilityZones pulumix.Input[[]string] `pulumi:"availabilityZones"`
	// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
	// ID of the VPC that the connector is in.
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (GetDirectoryVpcSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryVpcSetting)(nil)).Elem()
}

func (i GetDirectoryVpcSettingArgs) ToGetDirectoryVpcSettingOutput() GetDirectoryVpcSettingOutput {
	return i.ToGetDirectoryVpcSettingOutputWithContext(context.Background())
}

func (i GetDirectoryVpcSettingArgs) ToGetDirectoryVpcSettingOutputWithContext(ctx context.Context) GetDirectoryVpcSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDirectoryVpcSettingOutput)
}

func (i *GetDirectoryVpcSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDirectoryVpcSettingArgs] {
	return pulumix.Val(i)
}

type GetDirectoryVpcSettingOutput struct{ *pulumi.OutputState }

func (GetDirectoryVpcSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryVpcSetting)(nil)).Elem()
}

func (o GetDirectoryVpcSettingOutput) ToGetDirectoryVpcSettingOutput() GetDirectoryVpcSettingOutput {
	return o
}

func (o GetDirectoryVpcSettingOutput) ToGetDirectoryVpcSettingOutputWithContext(ctx context.Context) GetDirectoryVpcSettingOutput {
	return o
}

func (o GetDirectoryVpcSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectoryVpcSetting] {
	return pulumix.Output[GetDirectoryVpcSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetDirectoryVpcSettingOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryVpcSetting](o, func(v GetDirectoryVpcSetting) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
func (o GetDirectoryVpcSettingOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetDirectoryVpcSetting](o, func(v GetDirectoryVpcSetting) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ID of the VPC that the connector is in.
func (o GetDirectoryVpcSettingOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[GetDirectoryVpcSetting](o, func(v GetDirectoryVpcSetting) string { return v.VpcId })
}

func init() {
	pulumi.RegisterOutputType(DirectoryConnectSettingsOutput{})
	pulumi.RegisterOutputType(DirectoryVpcSettingsOutput{})
	pulumi.RegisterOutputType(ServiceRegionVpcSettingsOutput{})
	pulumi.RegisterOutputType(SharedDirectoryTargetOutput{})
	pulumi.RegisterOutputType(GetDirectoryConnectSettingOutput{})
	pulumi.RegisterOutputType(GetDirectoryRadiusSettingOutput{})
	pulumi.RegisterOutputType(GetDirectoryVpcSettingOutput{})
}
