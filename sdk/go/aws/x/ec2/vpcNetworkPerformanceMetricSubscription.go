// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an Infrastructure Performance subscription.
type VpcNetworkPerformanceMetricSubscription struct {
	pulumi.CustomResourceState

	// The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
	Destination pulumix.Output[string] `pulumi:"destination"`
	// The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
	Metric pulumix.Output[*string] `pulumi:"metric"`
	// The data aggregation time for the subscription.
	Period pulumix.Output[string] `pulumi:"period"`
	// The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
	Source pulumix.Output[string] `pulumi:"source"`
	// The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
	Statistic pulumix.Output[*string] `pulumi:"statistic"`
}

// NewVpcNetworkPerformanceMetricSubscription registers a new resource with the given unique name, arguments, and options.
func NewVpcNetworkPerformanceMetricSubscription(ctx *pulumi.Context,
	name string, args *VpcNetworkPerformanceMetricSubscriptionArgs, opts ...pulumi.ResourceOption) (*VpcNetworkPerformanceMetricSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcNetworkPerformanceMetricSubscription
	err := ctx.RegisterResource("aws:ec2/vpcNetworkPerformanceMetricSubscription:VpcNetworkPerformanceMetricSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcNetworkPerformanceMetricSubscription gets an existing VpcNetworkPerformanceMetricSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcNetworkPerformanceMetricSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcNetworkPerformanceMetricSubscriptionState, opts ...pulumi.ResourceOption) (*VpcNetworkPerformanceMetricSubscription, error) {
	var resource VpcNetworkPerformanceMetricSubscription
	err := ctx.ReadResource("aws:ec2/vpcNetworkPerformanceMetricSubscription:VpcNetworkPerformanceMetricSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcNetworkPerformanceMetricSubscription resources.
type vpcNetworkPerformanceMetricSubscriptionState struct {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
	Destination *string `pulumi:"destination"`
	// The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
	Metric *string `pulumi:"metric"`
	// The data aggregation time for the subscription.
	Period *string `pulumi:"period"`
	// The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
	Source *string `pulumi:"source"`
	// The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
	Statistic *string `pulumi:"statistic"`
}

type VpcNetworkPerformanceMetricSubscriptionState struct {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
	Destination pulumix.Input[*string]
	// The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
	Metric pulumix.Input[*string]
	// The data aggregation time for the subscription.
	Period pulumix.Input[*string]
	// The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
	Source pulumix.Input[*string]
	// The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
	Statistic pulumix.Input[*string]
}

func (VpcNetworkPerformanceMetricSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcNetworkPerformanceMetricSubscriptionState)(nil)).Elem()
}

type vpcNetworkPerformanceMetricSubscriptionArgs struct {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
	Destination string `pulumi:"destination"`
	// The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
	Metric *string `pulumi:"metric"`
	// The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
	Source string `pulumi:"source"`
	// The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
	Statistic *string `pulumi:"statistic"`
}

// The set of arguments for constructing a VpcNetworkPerformanceMetricSubscription resource.
type VpcNetworkPerformanceMetricSubscriptionArgs struct {
	// The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
	Destination pulumix.Input[string]
	// The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
	Metric pulumix.Input[*string]
	// The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
	Source pulumix.Input[string]
	// The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
	Statistic pulumix.Input[*string]
}

func (VpcNetworkPerformanceMetricSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcNetworkPerformanceMetricSubscriptionArgs)(nil)).Elem()
}

type VpcNetworkPerformanceMetricSubscriptionOutput struct{ *pulumi.OutputState }

func (VpcNetworkPerformanceMetricSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcNetworkPerformanceMetricSubscription)(nil)).Elem()
}

func (o VpcNetworkPerformanceMetricSubscriptionOutput) ToVpcNetworkPerformanceMetricSubscriptionOutput() VpcNetworkPerformanceMetricSubscriptionOutput {
	return o
}

func (o VpcNetworkPerformanceMetricSubscriptionOutput) ToVpcNetworkPerformanceMetricSubscriptionOutputWithContext(ctx context.Context) VpcNetworkPerformanceMetricSubscriptionOutput {
	return o
}

func (o VpcNetworkPerformanceMetricSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[VpcNetworkPerformanceMetricSubscription] {
	return pulumix.Output[VpcNetworkPerformanceMetricSubscription]{
		OutputState: o.OutputState,
	}
}

// The target Region or Availability Zone that the metric subscription is enabled for. For example, `eu-west-1`.
func (o VpcNetworkPerformanceMetricSubscriptionOutput) Destination() pulumix.Output[string] {
	value := pulumix.Apply[VpcNetworkPerformanceMetricSubscription](o, func(v VpcNetworkPerformanceMetricSubscription) pulumix.Output[string] { return v.Destination })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The metric used for the enabled subscription. Valid values: `aggregate-latency`. Default: `aggregate-latency`.
func (o VpcNetworkPerformanceMetricSubscriptionOutput) Metric() pulumix.Output[*string] {
	value := pulumix.Apply[VpcNetworkPerformanceMetricSubscription](o, func(v VpcNetworkPerformanceMetricSubscription) pulumix.Output[*string] { return v.Metric })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The data aggregation time for the subscription.
func (o VpcNetworkPerformanceMetricSubscriptionOutput) Period() pulumix.Output[string] {
	value := pulumix.Apply[VpcNetworkPerformanceMetricSubscription](o, func(v VpcNetworkPerformanceMetricSubscription) pulumix.Output[string] { return v.Period })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The source Region or Availability Zone that the metric subscription is enabled for. For example, `us-east-1`.
func (o VpcNetworkPerformanceMetricSubscriptionOutput) Source() pulumix.Output[string] {
	value := pulumix.Apply[VpcNetworkPerformanceMetricSubscription](o, func(v VpcNetworkPerformanceMetricSubscription) pulumix.Output[string] { return v.Source })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The statistic used for the enabled subscription. Valid values: `p50`. Default: `p50`.
func (o VpcNetworkPerformanceMetricSubscriptionOutput) Statistic() pulumix.Output[*string] {
	value := pulumix.Apply[VpcNetworkPerformanceMetricSubscription](o, func(v VpcNetworkPerformanceMetricSubscription) pulumix.Output[*string] { return v.Statistic })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcNetworkPerformanceMetricSubscriptionOutput{})
}
