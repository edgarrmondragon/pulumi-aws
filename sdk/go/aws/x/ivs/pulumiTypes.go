// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RecordingConfigurationDestinationConfiguration struct {
	// S3 destination configuration where recorded videos will be stored.
	S3 RecordingConfigurationDestinationConfigurationS3 `pulumi:"s3"`
}

type RecordingConfigurationDestinationConfigurationArgs struct {
	// S3 destination configuration where recorded videos will be stored.
	S3 pulumix.Input[*RecordingConfigurationDestinationConfigurationS3Args] `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

func (i *RecordingConfigurationDestinationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationDestinationConfigurationArgs] {
	return pulumix.Val(i)
}

type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationDestinationConfiguration] {
	return pulumix.Output[RecordingConfigurationDestinationConfiguration]{
		OutputState: o.OutputState,
	}
}

// S3 destination configuration where recorded videos will be stored.
func (o RecordingConfigurationDestinationConfigurationOutput) S3() pulumix.GPtrOutput[RecordingConfigurationDestinationConfigurationS3, RecordingConfigurationDestinationConfigurationS3Output] {
	value := pulumix.Apply[RecordingConfigurationDestinationConfiguration](o, func(v RecordingConfigurationDestinationConfiguration) RecordingConfigurationDestinationConfigurationS3 {
		return v.S3
	})
	return pulumix.GPtrOutput[RecordingConfigurationDestinationConfigurationS3, RecordingConfigurationDestinationConfigurationS3Output]{OutputState: value.OutputState}
}

type RecordingConfigurationDestinationConfigurationS3 struct {
	// S3 bucket name where recorded videos will be stored.
	//
	// The following arguments are optional:
	BucketName string `pulumi:"bucketName"`
}

type RecordingConfigurationDestinationConfigurationS3Args struct {
	// S3 bucket name where recorded videos will be stored.
	//
	// The following arguments are optional:
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
}

func (RecordingConfigurationDestinationConfigurationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationS3Args) ToRecordingConfigurationDestinationConfigurationS3Output() RecordingConfigurationDestinationConfigurationS3Output {
	return i.ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationS3Args) ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationS3Output)
}

func (i *RecordingConfigurationDestinationConfigurationS3Args) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationDestinationConfigurationS3Args] {
	return pulumix.Val(i)
}

type RecordingConfigurationDestinationConfigurationS3Output struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfigurationS3)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToRecordingConfigurationDestinationConfigurationS3Output() RecordingConfigurationDestinationConfigurationS3Output {
	return o
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToRecordingConfigurationDestinationConfigurationS3OutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationS3Output {
	return o
}

func (o RecordingConfigurationDestinationConfigurationS3Output) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationDestinationConfigurationS3] {
	return pulumix.Output[RecordingConfigurationDestinationConfigurationS3]{
		OutputState: o.OutputState,
	}
}

// S3 bucket name where recorded videos will be stored.
//
// The following arguments are optional:
func (o RecordingConfigurationDestinationConfigurationS3Output) BucketName() pulumix.Output[string] {
	return pulumix.Apply[RecordingConfigurationDestinationConfigurationS3](o, func(v RecordingConfigurationDestinationConfigurationS3) string { return v.BucketName })
}

type RecordingConfigurationThumbnailConfiguration struct {
	// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
	RecordingMode *string `pulumi:"recordingMode"`
	// The targeted thumbnail-generation interval in seconds.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

type RecordingConfigurationThumbnailConfigurationArgs struct {
	// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
	RecordingMode pulumix.Input[*string] `pulumi:"recordingMode"`
	// The targeted thumbnail-generation interval in seconds.
	TargetIntervalSeconds pulumix.Input[*int] `pulumi:"targetIntervalSeconds"`
}

func (RecordingConfigurationThumbnailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput)
}

func (i *RecordingConfigurationThumbnailConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationThumbnailConfigurationArgs] {
	return pulumix.Val(i)
}

type RecordingConfigurationThumbnailConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationThumbnailConfiguration] {
	return pulumix.Output[RecordingConfigurationThumbnailConfiguration]{
		OutputState: o.OutputState,
	}
}

// Thumbnail recording mode. Valid values: `DISABLED`, `INTERVAL`.
func (o RecordingConfigurationThumbnailConfigurationOutput) RecordingMode() pulumix.Output[*string] {
	return pulumix.Apply[RecordingConfigurationThumbnailConfiguration](o, func(v RecordingConfigurationThumbnailConfiguration) *string { return v.RecordingMode })
}

// The targeted thumbnail-generation interval in seconds.
func (o RecordingConfigurationThumbnailConfigurationOutput) TargetIntervalSeconds() pulumix.Output[*int] {
	return pulumix.Apply[RecordingConfigurationThumbnailConfiguration](o, func(v RecordingConfigurationThumbnailConfiguration) *int { return v.TargetIntervalSeconds })
}

func init() {
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationS3Output{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationOutput{})
}
