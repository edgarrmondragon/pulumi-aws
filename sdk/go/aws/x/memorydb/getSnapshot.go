// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a MemoryDB Snapshot.
func LookupSnapshot(ctx *pulumi.Context, args *LookupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnapshotResult
	err := ctx.Invoke("aws:memorydb/getSnapshot:getSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotArgs struct {
	// Name of the snapshot.
	Name string `pulumi:"name"`
	// Map of tags assigned to the snapshot.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSnapshot.
type LookupSnapshotResult struct {
	// ARN of the snapshot.
	Arn string `pulumi:"arn"`
	// The configuration of the cluster from which the snapshot was taken.
	ClusterConfigurations []GetSnapshotClusterConfiguration `pulumi:"clusterConfigurations"`
	// Name of the MemoryDB cluster that this snapshot was taken from.
	ClusterName string `pulumi:"clusterName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the KMS key used to encrypt the snapshot at rest.
	KmsKeyArn string `pulumi:"kmsKeyArn"`
	// Name of the cluster.
	Name string `pulumi:"name"`
	// Whether the snapshot is from an automatic backup (`automated`) or was created manually (`manual`).
	Source string `pulumi:"source"`
	// Map of tags assigned to the snapshot.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSnapshotOutput(ctx *pulumi.Context, args LookupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSnapshotArgs](args.ToOutput(), func(plainArgs *LookupSnapshotArgs) (*LookupSnapshotResult, error) {
		return LookupSnapshot(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSnapshotResultOutput, *LookupSnapshotResult](outputResult)
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotOutputArgs struct {
	// Name of the snapshot.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags assigned to the snapshot.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSnapshotOutputArgs) ToOutput() pulumix.Output[*LookupSnapshotArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSnapshotArgs {
		return &LookupSnapshotArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotResult)(nil)).Elem()
}

func (o LookupSnapshotResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSnapshotResult] {
	return pulumix.Output[*LookupSnapshotResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSnapshotResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Arn })
}

func (o LookupSnapshotResultOutput) ClusterConfigurations() pulumix.GArrayOutput[GetSnapshotClusterConfiguration, GetSnapshotClusterConfigurationOutput] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) []GetSnapshotClusterConfiguration { return v.ClusterConfigurations })
	return pulumix.GArrayOutput[GetSnapshotClusterConfiguration, GetSnapshotClusterConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) ClusterName() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.ClusterName })
}

func (o LookupSnapshotResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Id })
}

func (o LookupSnapshotResultOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.KmsKeyArn })
}

func (o LookupSnapshotResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Name })
}

func (o LookupSnapshotResultOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Source })
}

func (o LookupSnapshotResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
