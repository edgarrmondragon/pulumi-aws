// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route53 record resource.
type Record struct {
	pulumi.CustomResourceState

	// An alias block. Conflicts with `ttl` & `records`.
	// Documented below.
	Aliases pulumix.GArrayOutput[RecordAlias, RecordAliasOutput] `pulumi:"aliases"`
	// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
	//
	// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
	AllowOverwrite pulumix.Output[bool] `pulumi:"allowOverwrite"`
	// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
	CidrRoutingPolicy pulumix.GPtrOutput[RecordCidrRoutingPolicy, RecordCidrRoutingPolicyOutput] `pulumi:"cidrRoutingPolicy"`
	// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
	FailoverRoutingPolicies pulumix.GArrayOutput[RecordFailoverRoutingPolicy, RecordFailoverRoutingPolicyOutput] `pulumi:"failoverRoutingPolicies"`
	// [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
	Fqdn pulumix.Output[string] `pulumi:"fqdn"`
	// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
	GeolocationRoutingPolicies pulumix.GArrayOutput[RecordGeolocationRoutingPolicy, RecordGeolocationRoutingPolicyOutput] `pulumi:"geolocationRoutingPolicies"`
	// The health check the record should be associated with.
	HealthCheckId pulumix.Output[*string] `pulumi:"healthCheckId"`
	// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
	LatencyRoutingPolicies pulumix.GArrayOutput[RecordLatencyRoutingPolicy, RecordLatencyRoutingPolicyOutput] `pulumi:"latencyRoutingPolicies"`
	// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
	MultivalueAnswerRoutingPolicy pulumix.Output[*bool] `pulumi:"multivalueAnswerRoutingPolicy"`
	// The name of the record.
	Name pulumix.Output[string] `pulumi:"name"`
	// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
	Records pulumix.ArrayOutput[string] `pulumi:"records"`
	// Unique identifier to differentiate records with routing policies from one another. Required if using `cidrRoutingPolicy`, `failoverRoutingPolicy`, `geolocationRoutingPolicy`, `latencyRoutingPolicy`, `multivalueAnswerRoutingPolicy`, or `weightedRoutingPolicy`.
	SetIdentifier pulumix.Output[*string] `pulumi:"setIdentifier"`
	// The TTL of the record.
	Ttl pulumix.Output[*int] `pulumi:"ttl"`
	// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
	Type pulumix.Output[string] `pulumi:"type"`
	// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
	WeightedRoutingPolicies pulumix.GArrayOutput[RecordWeightedRoutingPolicy, RecordWeightedRoutingPolicyOutput] `pulumi:"weightedRoutingPolicies"`
	// The ID of the hosted zone to contain this record.
	ZoneId pulumix.Output[string] `pulumi:"zoneId"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("aws:route53/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("aws:route53/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// An alias block. Conflicts with `ttl` & `records`.
	// Documented below.
	Aliases []RecordAlias `pulumi:"aliases"`
	// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
	//
	// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
	AllowOverwrite *bool `pulumi:"allowOverwrite"`
	// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
	CidrRoutingPolicy *RecordCidrRoutingPolicy `pulumi:"cidrRoutingPolicy"`
	// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
	FailoverRoutingPolicies []RecordFailoverRoutingPolicy `pulumi:"failoverRoutingPolicies"`
	// [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
	Fqdn *string `pulumi:"fqdn"`
	// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
	GeolocationRoutingPolicies []RecordGeolocationRoutingPolicy `pulumi:"geolocationRoutingPolicies"`
	// The health check the record should be associated with.
	HealthCheckId *string `pulumi:"healthCheckId"`
	// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
	LatencyRoutingPolicies []RecordLatencyRoutingPolicy `pulumi:"latencyRoutingPolicies"`
	// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
	MultivalueAnswerRoutingPolicy *bool `pulumi:"multivalueAnswerRoutingPolicy"`
	// The name of the record.
	Name *string `pulumi:"name"`
	// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
	Records []string `pulumi:"records"`
	// Unique identifier to differentiate records with routing policies from one another. Required if using `cidrRoutingPolicy`, `failoverRoutingPolicy`, `geolocationRoutingPolicy`, `latencyRoutingPolicy`, `multivalueAnswerRoutingPolicy`, or `weightedRoutingPolicy`.
	SetIdentifier *string `pulumi:"setIdentifier"`
	// The TTL of the record.
	Ttl *int `pulumi:"ttl"`
	// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
	Type *string `pulumi:"type"`
	// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
	WeightedRoutingPolicies []RecordWeightedRoutingPolicy `pulumi:"weightedRoutingPolicies"`
	// The ID of the hosted zone to contain this record.
	ZoneId *string `pulumi:"zoneId"`
}

type RecordState struct {
	// An alias block. Conflicts with `ttl` & `records`.
	// Documented below.
	Aliases pulumix.Input[[]*RecordAliasArgs]
	// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
	//
	// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
	AllowOverwrite pulumix.Input[*bool]
	// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
	CidrRoutingPolicy pulumix.Input[*RecordCidrRoutingPolicyArgs]
	// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
	FailoverRoutingPolicies pulumix.Input[[]*RecordFailoverRoutingPolicyArgs]
	// [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
	Fqdn pulumix.Input[*string]
	// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
	GeolocationRoutingPolicies pulumix.Input[[]*RecordGeolocationRoutingPolicyArgs]
	// The health check the record should be associated with.
	HealthCheckId pulumix.Input[*string]
	// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
	LatencyRoutingPolicies pulumix.Input[[]*RecordLatencyRoutingPolicyArgs]
	// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
	MultivalueAnswerRoutingPolicy pulumix.Input[*bool]
	// The name of the record.
	Name pulumix.Input[*string]
	// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
	Records pulumix.Input[[]string]
	// Unique identifier to differentiate records with routing policies from one another. Required if using `cidrRoutingPolicy`, `failoverRoutingPolicy`, `geolocationRoutingPolicy`, `latencyRoutingPolicy`, `multivalueAnswerRoutingPolicy`, or `weightedRoutingPolicy`.
	SetIdentifier pulumix.Input[*string]
	// The TTL of the record.
	Ttl pulumix.Input[*int]
	// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
	Type pulumix.Input[*string]
	// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
	WeightedRoutingPolicies pulumix.Input[[]*RecordWeightedRoutingPolicyArgs]
	// The ID of the hosted zone to contain this record.
	ZoneId pulumix.Input[*string]
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// An alias block. Conflicts with `ttl` & `records`.
	// Documented below.
	Aliases []RecordAlias `pulumi:"aliases"`
	// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
	//
	// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
	AllowOverwrite *bool `pulumi:"allowOverwrite"`
	// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
	CidrRoutingPolicy *RecordCidrRoutingPolicy `pulumi:"cidrRoutingPolicy"`
	// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
	FailoverRoutingPolicies []RecordFailoverRoutingPolicy `pulumi:"failoverRoutingPolicies"`
	// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
	GeolocationRoutingPolicies []RecordGeolocationRoutingPolicy `pulumi:"geolocationRoutingPolicies"`
	// The health check the record should be associated with.
	HealthCheckId *string `pulumi:"healthCheckId"`
	// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
	LatencyRoutingPolicies []RecordLatencyRoutingPolicy `pulumi:"latencyRoutingPolicies"`
	// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
	MultivalueAnswerRoutingPolicy *bool `pulumi:"multivalueAnswerRoutingPolicy"`
	// The name of the record.
	Name string `pulumi:"name"`
	// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
	Records []string `pulumi:"records"`
	// Unique identifier to differentiate records with routing policies from one another. Required if using `cidrRoutingPolicy`, `failoverRoutingPolicy`, `geolocationRoutingPolicy`, `latencyRoutingPolicy`, `multivalueAnswerRoutingPolicy`, or `weightedRoutingPolicy`.
	SetIdentifier *string `pulumi:"setIdentifier"`
	// The TTL of the record.
	Ttl *int `pulumi:"ttl"`
	// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
	Type string `pulumi:"type"`
	// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
	WeightedRoutingPolicies []RecordWeightedRoutingPolicy `pulumi:"weightedRoutingPolicies"`
	// The ID of the hosted zone to contain this record.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// An alias block. Conflicts with `ttl` & `records`.
	// Documented below.
	Aliases pulumix.Input[[]*RecordAliasArgs]
	// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
	//
	// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
	AllowOverwrite pulumix.Input[*bool]
	// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
	CidrRoutingPolicy pulumix.Input[*RecordCidrRoutingPolicyArgs]
	// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
	FailoverRoutingPolicies pulumix.Input[[]*RecordFailoverRoutingPolicyArgs]
	// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
	GeolocationRoutingPolicies pulumix.Input[[]*RecordGeolocationRoutingPolicyArgs]
	// The health check the record should be associated with.
	HealthCheckId pulumix.Input[*string]
	// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
	LatencyRoutingPolicies pulumix.Input[[]*RecordLatencyRoutingPolicyArgs]
	// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
	MultivalueAnswerRoutingPolicy pulumix.Input[*bool]
	// The name of the record.
	Name pulumix.Input[string]
	// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
	Records pulumix.Input[[]string]
	// Unique identifier to differentiate records with routing policies from one another. Required if using `cidrRoutingPolicy`, `failoverRoutingPolicy`, `geolocationRoutingPolicy`, `latencyRoutingPolicy`, `multivalueAnswerRoutingPolicy`, or `weightedRoutingPolicy`.
	SetIdentifier pulumix.Input[*string]
	// The TTL of the record.
	Ttl pulumix.Input[*int]
	// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
	Type pulumix.Input[string]
	// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
	WeightedRoutingPolicies pulumix.Input[[]*RecordWeightedRoutingPolicyArgs]
	// The ID of the hosted zone to contain this record.
	ZoneId pulumix.Input[string]
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

func (o RecordOutput) ToOutput(ctx context.Context) pulumix.Output[Record] {
	return pulumix.Output[Record]{
		OutputState: o.OutputState,
	}
}

// An alias block. Conflicts with `ttl` & `records`.
// Documented below.
func (o RecordOutput) Aliases() pulumix.GArrayOutput[RecordAlias, RecordAliasOutput] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.GArrayOutput[RecordAlias, RecordAliasOutput] { return v.Aliases })
	unwrapped := pulumix.Flatten[[]RecordAlias, pulumix.GArrayOutput[RecordAlias, RecordAliasOutput]](value)
	return pulumix.GArrayOutput[RecordAlias, RecordAliasOutput]{OutputState: unwrapped.OutputState}
}

// Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.
//
// Exactly one of `records` or `alias` must be specified: this determines whether it's an alias record.
func (o RecordOutput) AllowOverwrite() pulumix.Output[bool] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[bool] { return v.AllowOverwrite })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// A block indicating a routing policy based on the IP network ranges of requestors. Conflicts with any other routing policy. Documented below.
func (o RecordOutput) CidrRoutingPolicy() pulumix.GPtrOutput[RecordCidrRoutingPolicy, RecordCidrRoutingPolicyOutput] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.GPtrOutput[RecordCidrRoutingPolicy, RecordCidrRoutingPolicyOutput] {
		return v.CidrRoutingPolicy
	})
	unwrapped := pulumix.Flatten[*RecordCidrRoutingPolicy, pulumix.GPtrOutput[RecordCidrRoutingPolicy, RecordCidrRoutingPolicyOutput]](value)
	return pulumix.GPtrOutput[RecordCidrRoutingPolicy, RecordCidrRoutingPolicyOutput]{OutputState: unwrapped.OutputState}
}

// A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.
func (o RecordOutput) FailoverRoutingPolicies() pulumix.GArrayOutput[RecordFailoverRoutingPolicy, RecordFailoverRoutingPolicyOutput] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.GArrayOutput[RecordFailoverRoutingPolicy, RecordFailoverRoutingPolicyOutput] {
		return v.FailoverRoutingPolicies
	})
	unwrapped := pulumix.Flatten[[]RecordFailoverRoutingPolicy, pulumix.GArrayOutput[RecordFailoverRoutingPolicy, RecordFailoverRoutingPolicyOutput]](value)
	return pulumix.GArrayOutput[RecordFailoverRoutingPolicy, RecordFailoverRoutingPolicyOutput]{OutputState: unwrapped.OutputState}
}

// [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.
func (o RecordOutput) Fqdn() pulumix.Output[string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[string] { return v.Fqdn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.
func (o RecordOutput) GeolocationRoutingPolicies() pulumix.GArrayOutput[RecordGeolocationRoutingPolicy, RecordGeolocationRoutingPolicyOutput] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.GArrayOutput[RecordGeolocationRoutingPolicy, RecordGeolocationRoutingPolicyOutput] {
		return v.GeolocationRoutingPolicies
	})
	unwrapped := pulumix.Flatten[[]RecordGeolocationRoutingPolicy, pulumix.GArrayOutput[RecordGeolocationRoutingPolicy, RecordGeolocationRoutingPolicyOutput]](value)
	return pulumix.GArrayOutput[RecordGeolocationRoutingPolicy, RecordGeolocationRoutingPolicyOutput]{OutputState: unwrapped.OutputState}
}

// The health check the record should be associated with.
func (o RecordOutput) HealthCheckId() pulumix.Output[*string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[*string] { return v.HealthCheckId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.
func (o RecordOutput) LatencyRoutingPolicies() pulumix.GArrayOutput[RecordLatencyRoutingPolicy, RecordLatencyRoutingPolicyOutput] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.GArrayOutput[RecordLatencyRoutingPolicy, RecordLatencyRoutingPolicyOutput] {
		return v.LatencyRoutingPolicies
	})
	unwrapped := pulumix.Flatten[[]RecordLatencyRoutingPolicy, pulumix.GArrayOutput[RecordLatencyRoutingPolicy, RecordLatencyRoutingPolicyOutput]](value)
	return pulumix.GArrayOutput[RecordLatencyRoutingPolicy, RecordLatencyRoutingPolicyOutput]{OutputState: unwrapped.OutputState}
}

// Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.
func (o RecordOutput) MultivalueAnswerRoutingPolicy() pulumix.Output[*bool] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[*bool] { return v.MultivalueAnswerRoutingPolicy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the record.
func (o RecordOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A string list of records. To specify a single record value longer than 255 characters such as a TXT record for DKIM, add `\"\"` inside the provider configuration string (e.g., `"first255characters\"\"morecharacters"`).
func (o RecordOutput) Records() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.ArrayOutput[string] { return v.Records })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Unique identifier to differentiate records with routing policies from one another. Required if using `cidrRoutingPolicy`, `failoverRoutingPolicy`, `geolocationRoutingPolicy`, `latencyRoutingPolicy`, `multivalueAnswerRoutingPolicy`, or `weightedRoutingPolicy`.
func (o RecordOutput) SetIdentifier() pulumix.Output[*string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[*string] { return v.SetIdentifier })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The TTL of the record.
func (o RecordOutput) Ttl() pulumix.Output[*int] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[*int] { return v.Ttl })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The record type. Valid values are `A`, `AAAA`, `CAA`, `CNAME`, `DS`, `MX`, `NAPTR`, `NS`, `PTR`, `SOA`, `SPF`, `SRV` and `TXT`.
func (o RecordOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.
func (o RecordOutput) WeightedRoutingPolicies() pulumix.GArrayOutput[RecordWeightedRoutingPolicy, RecordWeightedRoutingPolicyOutput] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.GArrayOutput[RecordWeightedRoutingPolicy, RecordWeightedRoutingPolicyOutput] {
		return v.WeightedRoutingPolicies
	})
	unwrapped := pulumix.Flatten[[]RecordWeightedRoutingPolicy, pulumix.GArrayOutput[RecordWeightedRoutingPolicy, RecordWeightedRoutingPolicyOutput]](value)
	return pulumix.GArrayOutput[RecordWeightedRoutingPolicy, RecordWeightedRoutingPolicyOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the hosted zone to contain this record.
func (o RecordOutput) ZoneId() pulumix.Output[string] {
	value := pulumix.Apply[Record](o, func(v Record) pulumix.Output[string] { return v.ZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(RecordOutput{})
}
