// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARNs and Names of IAM Roles.
func GetRoles(ctx *pulumi.Context, args *GetRolesArgs, opts ...pulumi.InvokeOption) (*GetRolesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRolesResult
	err := ctx.Invoke("aws:iam/getRoles:getRoles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoles.
type GetRolesArgs struct {
	// Regex string to apply to the IAM roles list returned by AWS. This allows more advanced filtering not supported from the AWS API. This filtering is done locally on what AWS returns, and could have a performance impact if the result is large. Combine this with other options to narrow down the list AWS returns.
	NameRegex *string `pulumi:"nameRegex"`
	// Path prefix for filtering the results. For example, the prefix `/application_abc/component_xyz/` gets all roles whose path starts with `/application_abc/component_xyz/`. If it is not included, it defaults to a slash (`/`), listing all roles. For more details, check out [list-roles in the AWS CLI reference][1].
	PathPrefix *string `pulumi:"pathPrefix"`
}

// A collection of values returned by getRoles.
type GetRolesResult struct {
	// Set of ARNs of the matched IAM roles.
	Arns []string `pulumi:"arns"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	NameRegex *string `pulumi:"nameRegex"`
	// Set of Names of the matched IAM roles.
	Names      []string `pulumi:"names"`
	PathPrefix *string  `pulumi:"pathPrefix"`
}

func GetRolesOutput(ctx *pulumi.Context, args GetRolesOutputArgs, opts ...pulumi.InvokeOption) GetRolesResultOutput {
	outputResult := pulumix.ApplyErr[*GetRolesArgs](args.ToOutput(), func(plainArgs *GetRolesArgs) (*GetRolesResult, error) {
		return GetRoles(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetRolesResultOutput, *GetRolesResult](outputResult)
}

// A collection of arguments for invoking getRoles.
type GetRolesOutputArgs struct {
	// Regex string to apply to the IAM roles list returned by AWS. This allows more advanced filtering not supported from the AWS API. This filtering is done locally on what AWS returns, and could have a performance impact if the result is large. Combine this with other options to narrow down the list AWS returns.
	NameRegex pulumix.Input[*string] `pulumi:"nameRegex"`
	// Path prefix for filtering the results. For example, the prefix `/application_abc/component_xyz/` gets all roles whose path starts with `/application_abc/component_xyz/`. If it is not included, it defaults to a slash (`/`), listing all roles. For more details, check out [list-roles in the AWS CLI reference][1].
	PathPrefix pulumix.Input[*string] `pulumi:"pathPrefix"`
}

func (args GetRolesOutputArgs) ToOutput() pulumix.Output[*GetRolesArgs] {
	allArgs := pulumix.All(
		args.NameRegex.ToOutput(context.Background()).AsAny(),
		args.PathPrefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetRolesArgs {
		return &GetRolesArgs{
			NameRegex:  resolvedArgs[0].(*string),
			PathPrefix: resolvedArgs[1].(*string),
		}
	})
}

type GetRolesResultOutput struct{ *pulumi.OutputState }

func (GetRolesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolesResult)(nil)).Elem()
}

func (o GetRolesResultOutput) ToOutput(context.Context) pulumix.Output[*GetRolesResult] {
	return pulumix.Output[*GetRolesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetRolesResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetRolesResult](o, func(v *GetRolesResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetRolesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetRolesResult](o, func(v *GetRolesResult) string { return v.Id })
}

func (o GetRolesResultOutput) NameRegex() pulumix.Output[*string] {
	return pulumix.Apply[*GetRolesResult](o, func(v *GetRolesResult) *string { return v.NameRegex })
}

func (o GetRolesResultOutput) Names() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetRolesResult](o, func(v *GetRolesResult) []string { return v.Names })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetRolesResultOutput) PathPrefix() pulumix.Output[*string] {
	return pulumix.Apply[*GetRolesResult](o, func(v *GetRolesResult) *string { return v.PathPrefix })
}
