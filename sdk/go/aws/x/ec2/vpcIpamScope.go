// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a scope for AWS IPAM.
type VpcIpamScope struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the scope.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description for the scope you're creating.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ARN of the IPAM for which you're creating this scope.
	IpamArn pulumix.Output[string] `pulumi:"ipamArn"`
	// The ID of the IPAM for which you're creating this scope.
	IpamId        pulumix.Output[string] `pulumi:"ipamId"`
	IpamScopeType pulumix.Output[string] `pulumi:"ipamScopeType"`
	// Defines if the scope is the default scope or not.
	IsDefault pulumix.Output[bool] `pulumi:"isDefault"`
	// The number of pools in the scope.
	PoolCount pulumix.Output[int] `pulumi:"poolCount"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewVpcIpamScope registers a new resource with the given unique name, arguments, and options.
func NewVpcIpamScope(ctx *pulumi.Context,
	name string, args *VpcIpamScopeArgs, opts ...pulumi.ResourceOption) (*VpcIpamScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamId == nil {
		return nil, errors.New("invalid value for required argument 'IpamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcIpamScope
	err := ctx.RegisterResource("aws:ec2/vpcIpamScope:VpcIpamScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpamScope gets an existing VpcIpamScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpamScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamScopeState, opts ...pulumi.ResourceOption) (*VpcIpamScope, error) {
	var resource VpcIpamScope
	err := ctx.ReadResource("aws:ec2/vpcIpamScope:VpcIpamScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpamScope resources.
type vpcIpamScopeState struct {
	// The Amazon Resource Name (ARN) of the scope.
	Arn *string `pulumi:"arn"`
	// A description for the scope you're creating.
	Description *string `pulumi:"description"`
	// The ARN of the IPAM for which you're creating this scope.
	IpamArn *string `pulumi:"ipamArn"`
	// The ID of the IPAM for which you're creating this scope.
	IpamId        *string `pulumi:"ipamId"`
	IpamScopeType *string `pulumi:"ipamScopeType"`
	// Defines if the scope is the default scope or not.
	IsDefault *bool `pulumi:"isDefault"`
	// The number of pools in the scope.
	PoolCount *int `pulumi:"poolCount"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type VpcIpamScopeState struct {
	// The Amazon Resource Name (ARN) of the scope.
	Arn pulumix.Input[*string]
	// A description for the scope you're creating.
	Description pulumix.Input[*string]
	// The ARN of the IPAM for which you're creating this scope.
	IpamArn pulumix.Input[*string]
	// The ID of the IPAM for which you're creating this scope.
	IpamId        pulumix.Input[*string]
	IpamScopeType pulumix.Input[*string]
	// Defines if the scope is the default scope or not.
	IsDefault pulumix.Input[*bool]
	// The number of pools in the scope.
	PoolCount pulumix.Input[*int]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (VpcIpamScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamScopeState)(nil)).Elem()
}

type vpcIpamScopeArgs struct {
	// A description for the scope you're creating.
	Description *string `pulumi:"description"`
	// The ID of the IPAM for which you're creating this scope.
	IpamId string `pulumi:"ipamId"`
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VpcIpamScope resource.
type VpcIpamScopeArgs struct {
	// A description for the scope you're creating.
	Description pulumix.Input[*string]
	// The ID of the IPAM for which you're creating this scope.
	IpamId pulumix.Input[string]
	// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (VpcIpamScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamScopeArgs)(nil)).Elem()
}

type VpcIpamScopeOutput struct{ *pulumi.OutputState }

func (VpcIpamScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpamScope)(nil)).Elem()
}

func (o VpcIpamScopeOutput) ToVpcIpamScopeOutput() VpcIpamScopeOutput {
	return o
}

func (o VpcIpamScopeOutput) ToVpcIpamScopeOutputWithContext(ctx context.Context) VpcIpamScopeOutput {
	return o
}

func (o VpcIpamScopeOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIpamScope] {
	return pulumix.Output[VpcIpamScope]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the scope.
func (o VpcIpamScopeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description for the scope you're creating.
func (o VpcIpamScopeOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ARN of the IPAM for which you're creating this scope.
func (o VpcIpamScopeOutput) IpamArn() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[string] { return v.IpamArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the IPAM for which you're creating this scope.
func (o VpcIpamScopeOutput) IpamId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[string] { return v.IpamId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o VpcIpamScopeOutput) IpamScopeType() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[string] { return v.IpamScopeType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Defines if the scope is the default scope or not.
func (o VpcIpamScopeOutput) IsDefault() pulumix.Output[bool] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[bool] { return v.IsDefault })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The number of pools in the scope.
func (o VpcIpamScopeOutput) PoolCount() pulumix.Output[int] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.Output[int] { return v.PoolCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcIpamScopeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o VpcIpamScopeOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcIpamScope](o, func(v VpcIpamScope) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VpcIpamScopeOutput{})
}
