// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route53 query logging configuration resource.
//
// > **NOTE:** There are restrictions on the configuration of query logging. Notably,
// the CloudWatch log group must be in the `us-east-1` region,
// a permissive CloudWatch log resource policy must be in place, and
// the Route53 hosted zone must be public.
// See [Configuring Logging for DNS Queries](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html?console_help=true#query-logs-configuring) for additional details.
type QueryLog struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Query Logging Config.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// CloudWatch log group ARN to send query logs.
	CloudwatchLogGroupArn pulumix.Output[string] `pulumi:"cloudwatchLogGroupArn"`
	// Route53 hosted zone ID to enable query logs.
	ZoneId pulumix.Output[string] `pulumi:"zoneId"`
}

// NewQueryLog registers a new resource with the given unique name, arguments, and options.
func NewQueryLog(ctx *pulumi.Context,
	name string, args *QueryLogArgs, opts ...pulumi.ResourceOption) (*QueryLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudwatchLogGroupArn == nil {
		return nil, errors.New("invalid value for required argument 'CloudwatchLogGroupArn'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueryLog
	err := ctx.RegisterResource("aws:route53/queryLog:QueryLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryLog gets an existing QueryLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryLogState, opts ...pulumi.ResourceOption) (*QueryLog, error) {
	var resource QueryLog
	err := ctx.ReadResource("aws:route53/queryLog:QueryLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryLog resources.
type queryLogState struct {
	// The Amazon Resource Name (ARN) of the Query Logging Config.
	Arn *string `pulumi:"arn"`
	// CloudWatch log group ARN to send query logs.
	CloudwatchLogGroupArn *string `pulumi:"cloudwatchLogGroupArn"`
	// Route53 hosted zone ID to enable query logs.
	ZoneId *string `pulumi:"zoneId"`
}

type QueryLogState struct {
	// The Amazon Resource Name (ARN) of the Query Logging Config.
	Arn pulumix.Input[*string]
	// CloudWatch log group ARN to send query logs.
	CloudwatchLogGroupArn pulumix.Input[*string]
	// Route53 hosted zone ID to enable query logs.
	ZoneId pulumix.Input[*string]
}

func (QueryLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLogState)(nil)).Elem()
}

type queryLogArgs struct {
	// CloudWatch log group ARN to send query logs.
	CloudwatchLogGroupArn string `pulumi:"cloudwatchLogGroupArn"`
	// Route53 hosted zone ID to enable query logs.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a QueryLog resource.
type QueryLogArgs struct {
	// CloudWatch log group ARN to send query logs.
	CloudwatchLogGroupArn pulumix.Input[string]
	// Route53 hosted zone ID to enable query logs.
	ZoneId pulumix.Input[string]
}

func (QueryLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLogArgs)(nil)).Elem()
}

type QueryLogOutput struct{ *pulumi.OutputState }

func (QueryLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryLog)(nil)).Elem()
}

func (o QueryLogOutput) ToQueryLogOutput() QueryLogOutput {
	return o
}

func (o QueryLogOutput) ToQueryLogOutputWithContext(ctx context.Context) QueryLogOutput {
	return o
}

func (o QueryLogOutput) ToOutput(ctx context.Context) pulumix.Output[QueryLog] {
	return pulumix.Output[QueryLog]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Query Logging Config.
func (o QueryLogOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[QueryLog](o, func(v QueryLog) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// CloudWatch log group ARN to send query logs.
func (o QueryLogOutput) CloudwatchLogGroupArn() pulumix.Output[string] {
	value := pulumix.Apply[QueryLog](o, func(v QueryLog) pulumix.Output[string] { return v.CloudwatchLogGroupArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Route53 hosted zone ID to enable query logs.
func (o QueryLogOutput) ZoneId() pulumix.Output[string] {
	value := pulumix.Apply[QueryLog](o, func(v QueryLog) pulumix.Output[string] { return v.ZoneId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(QueryLogOutput{})
}
