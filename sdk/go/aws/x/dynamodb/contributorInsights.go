// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DynamoDB contributor insights resource
type ContributorInsights struct {
	pulumi.CustomResourceState

	// The global secondary index name
	IndexName pulumix.Output[*string] `pulumi:"indexName"`
	// The name of the table to enable contributor insights
	TableName pulumix.Output[string] `pulumi:"tableName"`
}

// NewContributorInsights registers a new resource with the given unique name, arguments, and options.
func NewContributorInsights(ctx *pulumi.Context,
	name string, args *ContributorInsightsArgs, opts ...pulumi.ResourceOption) (*ContributorInsights, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContributorInsights
	err := ctx.RegisterResource("aws:dynamodb/contributorInsights:ContributorInsights", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContributorInsights gets an existing ContributorInsights resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContributorInsights(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContributorInsightsState, opts ...pulumi.ResourceOption) (*ContributorInsights, error) {
	var resource ContributorInsights
	err := ctx.ReadResource("aws:dynamodb/contributorInsights:ContributorInsights", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContributorInsights resources.
type contributorInsightsState struct {
	// The global secondary index name
	IndexName *string `pulumi:"indexName"`
	// The name of the table to enable contributor insights
	TableName *string `pulumi:"tableName"`
}

type ContributorInsightsState struct {
	// The global secondary index name
	IndexName pulumix.Input[*string]
	// The name of the table to enable contributor insights
	TableName pulumix.Input[*string]
}

func (ContributorInsightsState) ElementType() reflect.Type {
	return reflect.TypeOf((*contributorInsightsState)(nil)).Elem()
}

type contributorInsightsArgs struct {
	// The global secondary index name
	IndexName *string `pulumi:"indexName"`
	// The name of the table to enable contributor insights
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a ContributorInsights resource.
type ContributorInsightsArgs struct {
	// The global secondary index name
	IndexName pulumix.Input[*string]
	// The name of the table to enable contributor insights
	TableName pulumix.Input[string]
}

func (ContributorInsightsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contributorInsightsArgs)(nil)).Elem()
}

type ContributorInsightsOutput struct{ *pulumi.OutputState }

func (ContributorInsightsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContributorInsights)(nil)).Elem()
}

func (o ContributorInsightsOutput) ToContributorInsightsOutput() ContributorInsightsOutput {
	return o
}

func (o ContributorInsightsOutput) ToContributorInsightsOutputWithContext(ctx context.Context) ContributorInsightsOutput {
	return o
}

func (o ContributorInsightsOutput) ToOutput(ctx context.Context) pulumix.Output[ContributorInsights] {
	return pulumix.Output[ContributorInsights]{
		OutputState: o.OutputState,
	}
}

// The global secondary index name
func (o ContributorInsightsOutput) IndexName() pulumix.Output[*string] {
	value := pulumix.Apply[ContributorInsights](o, func(v ContributorInsights) pulumix.Output[*string] { return v.IndexName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the table to enable contributor insights
func (o ContributorInsightsOutput) TableName() pulumix.Output[string] {
	value := pulumix.Apply[ContributorInsights](o, func(v ContributorInsights) pulumix.Output[string] { return v.TableName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ContributorInsightsOutput{})
}
