// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Partner Integration.
type Partner struct {
	pulumi.CustomResourceState

	// The Amazon Web Services account ID that owns the cluster.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// The cluster identifier of the cluster that receives data from the partner.
	ClusterIdentifier pulumix.Output[string] `pulumi:"clusterIdentifier"`
	// The name of the database that receives data from the partner.
	DatabaseName pulumix.Output[string] `pulumi:"databaseName"`
	// The name of the partner that is authorized to send data.
	PartnerName pulumix.Output[string] `pulumi:"partnerName"`
	// (Optional) The partner integration status.
	Status pulumix.Output[string] `pulumi:"status"`
	// (Optional) The status message provided by the partner.
	StatusMessage pulumix.Output[string] `pulumi:"statusMessage"`
}

// NewPartner registers a new resource with the given unique name, arguments, and options.
func NewPartner(ctx *pulumi.Context,
	name string, args *PartnerArgs, opts ...pulumi.ResourceOption) (*Partner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIdentifier'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.PartnerName == nil {
		return nil, errors.New("invalid value for required argument 'PartnerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Partner
	err := ctx.RegisterResource("aws:redshift/partner:Partner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartner gets an existing Partner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerState, opts ...pulumi.ResourceOption) (*Partner, error) {
	var resource Partner
	err := ctx.ReadResource("aws:redshift/partner:Partner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Partner resources.
type partnerState struct {
	// The Amazon Web Services account ID that owns the cluster.
	AccountId *string `pulumi:"accountId"`
	// The cluster identifier of the cluster that receives data from the partner.
	ClusterIdentifier *string `pulumi:"clusterIdentifier"`
	// The name of the database that receives data from the partner.
	DatabaseName *string `pulumi:"databaseName"`
	// The name of the partner that is authorized to send data.
	PartnerName *string `pulumi:"partnerName"`
	// (Optional) The partner integration status.
	Status *string `pulumi:"status"`
	// (Optional) The status message provided by the partner.
	StatusMessage *string `pulumi:"statusMessage"`
}

type PartnerState struct {
	// The Amazon Web Services account ID that owns the cluster.
	AccountId pulumix.Input[*string]
	// The cluster identifier of the cluster that receives data from the partner.
	ClusterIdentifier pulumix.Input[*string]
	// The name of the database that receives data from the partner.
	DatabaseName pulumix.Input[*string]
	// The name of the partner that is authorized to send data.
	PartnerName pulumix.Input[*string]
	// (Optional) The partner integration status.
	Status pulumix.Input[*string]
	// (Optional) The status message provided by the partner.
	StatusMessage pulumix.Input[*string]
}

func (PartnerState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerState)(nil)).Elem()
}

type partnerArgs struct {
	// The Amazon Web Services account ID that owns the cluster.
	AccountId string `pulumi:"accountId"`
	// The cluster identifier of the cluster that receives data from the partner.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// The name of the database that receives data from the partner.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the partner that is authorized to send data.
	PartnerName string `pulumi:"partnerName"`
}

// The set of arguments for constructing a Partner resource.
type PartnerArgs struct {
	// The Amazon Web Services account ID that owns the cluster.
	AccountId pulumix.Input[string]
	// The cluster identifier of the cluster that receives data from the partner.
	ClusterIdentifier pulumix.Input[string]
	// The name of the database that receives data from the partner.
	DatabaseName pulumix.Input[string]
	// The name of the partner that is authorized to send data.
	PartnerName pulumix.Input[string]
}

func (PartnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerArgs)(nil)).Elem()
}

type PartnerOutput struct{ *pulumi.OutputState }

func (PartnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Partner)(nil)).Elem()
}

func (o PartnerOutput) ToPartnerOutput() PartnerOutput {
	return o
}

func (o PartnerOutput) ToPartnerOutputWithContext(ctx context.Context) PartnerOutput {
	return o
}

func (o PartnerOutput) ToOutput(ctx context.Context) pulumix.Output[Partner] {
	return pulumix.Output[Partner]{
		OutputState: o.OutputState,
	}
}

// The Amazon Web Services account ID that owns the cluster.
func (o PartnerOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[Partner](o, func(v Partner) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The cluster identifier of the cluster that receives data from the partner.
func (o PartnerOutput) ClusterIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[Partner](o, func(v Partner) pulumix.Output[string] { return v.ClusterIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the database that receives data from the partner.
func (o PartnerOutput) DatabaseName() pulumix.Output[string] {
	value := pulumix.Apply[Partner](o, func(v Partner) pulumix.Output[string] { return v.DatabaseName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the partner that is authorized to send data.
func (o PartnerOutput) PartnerName() pulumix.Output[string] {
	value := pulumix.Apply[Partner](o, func(v Partner) pulumix.Output[string] { return v.PartnerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// (Optional) The partner integration status.
func (o PartnerOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Partner](o, func(v Partner) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// (Optional) The status message provided by the partner.
func (o PartnerOutput) StatusMessage() pulumix.Output[string] {
	value := pulumix.Apply[Partner](o, func(v Partner) pulumix.Output[string] { return v.StatusMessage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PartnerOutput{})
}
