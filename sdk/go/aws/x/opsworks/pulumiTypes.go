// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ApplicationAppSource struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the app resource can be found.
	Url *string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type ApplicationAppSourceArgs struct {
	// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	Password pulumix.Input[*string] `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumix.Input[*string] `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey pulumix.Input[*string] `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumix.Input[string] `pulumi:"type"`
	// The URL where the app resource can be found.
	Url pulumix.Input[*string] `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ApplicationAppSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSource)(nil)).Elem()
}

func (i ApplicationAppSourceArgs) ToApplicationAppSourceOutput() ApplicationAppSourceOutput {
	return i.ToApplicationAppSourceOutputWithContext(context.Background())
}

func (i ApplicationAppSourceArgs) ToApplicationAppSourceOutputWithContext(ctx context.Context) ApplicationAppSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppSourceOutput)
}

func (i *ApplicationAppSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*ApplicationAppSourceArgs] {
	return pulumix.Val(i)
}

type ApplicationAppSourceOutput struct{ *pulumi.OutputState }

func (ApplicationAppSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppSource)(nil)).Elem()
}

func (o ApplicationAppSourceOutput) ToApplicationAppSourceOutput() ApplicationAppSourceOutput {
	return o
}

func (o ApplicationAppSourceOutput) ToApplicationAppSourceOutputWithContext(ctx context.Context) ApplicationAppSourceOutput {
	return o
}

func (o ApplicationAppSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationAppSource] {
	return pulumix.Output[ApplicationAppSource]{
		OutputState: o.OutputState,
	}
}

// Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceOutput) Password() pulumix.Output[*string] {
	return pulumix.Apply[ApplicationAppSource](o, func(v ApplicationAppSource) *string { return v.Password })
}

// For sources that are version-aware, the revision to use.
func (o ApplicationAppSourceOutput) Revision() pulumix.Output[*string] {
	return pulumix.Apply[ApplicationAppSource](o, func(v ApplicationAppSource) *string { return v.Revision })
}

// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o ApplicationAppSourceOutput) SshKey() pulumix.Output[*string] {
	return pulumix.Apply[ApplicationAppSource](o, func(v ApplicationAppSource) *string { return v.SshKey })
}

// The type of source to use. For example, "archive".
func (o ApplicationAppSourceOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ApplicationAppSource](o, func(v ApplicationAppSource) string { return v.Type })
}

// The URL where the app resource can be found.
func (o ApplicationAppSourceOutput) Url() pulumix.Output[*string] {
	return pulumix.Apply[ApplicationAppSource](o, func(v ApplicationAppSource) *string { return v.Url })
}

// Username to use when authenticating to the source.
func (o ApplicationAppSourceOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ApplicationAppSource](o, func(v ApplicationAppSource) *string { return v.Username })
}

type ApplicationEnvironment struct {
	// Variable name.
	Key string `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure *bool `pulumi:"secure"`
	// Variable value.
	Value string `pulumi:"value"`
}

type ApplicationEnvironmentArgs struct {
	// Variable name.
	Key pulumix.Input[string] `pulumi:"key"`
	// Set visibility of the variable value to `true` or `false`.
	Secure pulumix.Input[*bool] `pulumi:"secure"`
	// Variable value.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ApplicationEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironment)(nil)).Elem()
}

func (i ApplicationEnvironmentArgs) ToApplicationEnvironmentOutput() ApplicationEnvironmentOutput {
	return i.ToApplicationEnvironmentOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentArgs) ToApplicationEnvironmentOutputWithContext(ctx context.Context) ApplicationEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentOutput)
}

func (i *ApplicationEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[*ApplicationEnvironmentArgs] {
	return pulumix.Val(i)
}

type ApplicationEnvironmentOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironment)(nil)).Elem()
}

func (o ApplicationEnvironmentOutput) ToApplicationEnvironmentOutput() ApplicationEnvironmentOutput {
	return o
}

func (o ApplicationEnvironmentOutput) ToApplicationEnvironmentOutputWithContext(ctx context.Context) ApplicationEnvironmentOutput {
	return o
}

func (o ApplicationEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationEnvironment] {
	return pulumix.Output[ApplicationEnvironment]{
		OutputState: o.OutputState,
	}
}

// Variable name.
func (o ApplicationEnvironmentOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[ApplicationEnvironment](o, func(v ApplicationEnvironment) string { return v.Key })
}

// Set visibility of the variable value to `true` or `false`.
func (o ApplicationEnvironmentOutput) Secure() pulumix.Output[*bool] {
	return pulumix.Apply[ApplicationEnvironment](o, func(v ApplicationEnvironment) *bool { return v.Secure })
}

// Variable value.
func (o ApplicationEnvironmentOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ApplicationEnvironment](o, func(v ApplicationEnvironment) string { return v.Value })
}

type ApplicationSslConfiguration struct {
	// The contents of the certificate's domain.crt file.
	Certificate string `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain *string `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey string `pulumi:"privateKey"`
}

type ApplicationSslConfigurationArgs struct {
	// The contents of the certificate's domain.crt file.
	Certificate pulumix.Input[string] `pulumi:"certificate"`
	// Can be used to specify an intermediate certificate authority key or client authentication.
	Chain pulumix.Input[*string] `pulumi:"chain"`
	// The private key; the contents of the certificate's domain.key file.
	PrivateKey pulumix.Input[string] `pulumi:"privateKey"`
}

func (ApplicationSslConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfiguration)(nil)).Elem()
}

func (i ApplicationSslConfigurationArgs) ToApplicationSslConfigurationOutput() ApplicationSslConfigurationOutput {
	return i.ToApplicationSslConfigurationOutputWithContext(context.Background())
}

func (i ApplicationSslConfigurationArgs) ToApplicationSslConfigurationOutputWithContext(ctx context.Context) ApplicationSslConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSslConfigurationOutput)
}

func (i *ApplicationSslConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ApplicationSslConfigurationArgs] {
	return pulumix.Val(i)
}

type ApplicationSslConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationSslConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSslConfiguration)(nil)).Elem()
}

func (o ApplicationSslConfigurationOutput) ToApplicationSslConfigurationOutput() ApplicationSslConfigurationOutput {
	return o
}

func (o ApplicationSslConfigurationOutput) ToApplicationSslConfigurationOutputWithContext(ctx context.Context) ApplicationSslConfigurationOutput {
	return o
}

func (o ApplicationSslConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationSslConfiguration] {
	return pulumix.Output[ApplicationSslConfiguration]{
		OutputState: o.OutputState,
	}
}

// The contents of the certificate's domain.crt file.
func (o ApplicationSslConfigurationOutput) Certificate() pulumix.Output[string] {
	return pulumix.Apply[ApplicationSslConfiguration](o, func(v ApplicationSslConfiguration) string { return v.Certificate })
}

// Can be used to specify an intermediate certificate authority key or client authentication.
func (o ApplicationSslConfigurationOutput) Chain() pulumix.Output[*string] {
	return pulumix.Apply[ApplicationSslConfiguration](o, func(v ApplicationSslConfiguration) *string { return v.Chain })
}

// The private key; the contents of the certificate's domain.key file.
func (o ApplicationSslConfigurationOutput) PrivateKey() pulumix.Output[string] {
	return pulumix.Apply[ApplicationSslConfiguration](o, func(v ApplicationSslConfiguration) string { return v.PrivateKey })
}

type CustomLayerCloudwatchConfiguration struct {
	Enabled *bool `pulumi:"enabled"`
	// A block the specifies how an opsworks logs look like. See Log Streams.
	LogStreams []CustomLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type CustomLayerCloudwatchConfigurationArgs struct {
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// A block the specifies how an opsworks logs look like. See Log Streams.
	LogStreams pulumix.Input[[]*CustomLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (CustomLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i CustomLayerCloudwatchConfigurationArgs) ToCustomLayerCloudwatchConfigurationOutput() CustomLayerCloudwatchConfigurationOutput {
	return i.ToCustomLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i CustomLayerCloudwatchConfigurationArgs) ToCustomLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) CustomLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerCloudwatchConfigurationOutput)
}

func (i *CustomLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type CustomLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (CustomLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o CustomLayerCloudwatchConfigurationOutput) ToCustomLayerCloudwatchConfigurationOutput() CustomLayerCloudwatchConfigurationOutput {
	return o
}

func (o CustomLayerCloudwatchConfigurationOutput) ToCustomLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) CustomLayerCloudwatchConfigurationOutput {
	return o
}

func (o CustomLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CustomLayerCloudwatchConfiguration] {
	return pulumix.Output[CustomLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o CustomLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[CustomLayerCloudwatchConfiguration](o, func(v CustomLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

// A block the specifies how an opsworks logs look like. See Log Streams.
func (o CustomLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[CustomLayerCloudwatchConfigurationLogStream, CustomLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[CustomLayerCloudwatchConfiguration](o, func(v CustomLayerCloudwatchConfiguration) []CustomLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[CustomLayerCloudwatchConfigurationLogStream, CustomLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type CustomLayerCloudwatchConfigurationLogStream struct {
	// Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
	BatchCount *int `pulumi:"batchCount"`
	// Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
	BatchSize *int `pulumi:"batchSize"`
	// Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
	BufferDuration *int `pulumi:"bufferDuration"`
	// Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
	DatetimeFormat *string `pulumi:"datetimeFormat"`
	// Specifies the encoding of the log file so that the file can be read correctly. The default is `utf8`.
	Encoding *string `pulumi:"encoding"`
	// Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
	File string `pulumi:"file"`
	// Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
	FileFingerprintLines *string `pulumi:"fileFingerprintLines"`
	// Specifies where to start to read data (`startOfFile` or `endOfFile`). The default is `startOfFile`.
	InitialPosition *string `pulumi:"initialPosition"`
	// Specifies the destination log group. A log group is created automatically if it doesn't already exist.
	LogGroupName string `pulumi:"logGroupName"`
	// Specifies the pattern for identifying the start of a log message.
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	// Specifies the time zone of log event time stamps.
	TimeZone *string `pulumi:"timeZone"`
}

type CustomLayerCloudwatchConfigurationLogStreamArgs struct {
	// Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
	BatchCount pulumix.Input[*int] `pulumi:"batchCount"`
	// Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
	BatchSize pulumix.Input[*int] `pulumi:"batchSize"`
	// Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
	BufferDuration pulumix.Input[*int] `pulumi:"bufferDuration"`
	// Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
	DatetimeFormat pulumix.Input[*string] `pulumi:"datetimeFormat"`
	// Specifies the encoding of the log file so that the file can be read correctly. The default is `utf8`.
	Encoding pulumix.Input[*string] `pulumi:"encoding"`
	// Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
	File pulumix.Input[string] `pulumi:"file"`
	// Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
	FileFingerprintLines pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	// Specifies where to start to read data (`startOfFile` or `endOfFile`). The default is `startOfFile`.
	InitialPosition pulumix.Input[*string] `pulumi:"initialPosition"`
	// Specifies the destination log group. A log group is created automatically if it doesn't already exist.
	LogGroupName pulumix.Input[string] `pulumi:"logGroupName"`
	// Specifies the pattern for identifying the start of a log message.
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	// Specifies the time zone of log event time stamps.
	TimeZone pulumix.Input[*string] `pulumi:"timeZone"`
}

func (CustomLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i CustomLayerCloudwatchConfigurationLogStreamArgs) ToCustomLayerCloudwatchConfigurationLogStreamOutput() CustomLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToCustomLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i CustomLayerCloudwatchConfigurationLogStreamArgs) ToCustomLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) CustomLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *CustomLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type CustomLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (CustomLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o CustomLayerCloudwatchConfigurationLogStreamOutput) ToCustomLayerCloudwatchConfigurationLogStreamOutput() CustomLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o CustomLayerCloudwatchConfigurationLogStreamOutput) ToCustomLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) CustomLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o CustomLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[CustomLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[CustomLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

// Specifies the max number of log events in a batch, up to `10000`. The default value is `1000`.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

// Specifies the maximum size of log events in a batch, in bytes, up to `1048576` bytes. The default value is `32768` bytes.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

// Specifies the time duration for the batching of log events. The minimum value is `5000` and default value is `5000`.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

// Specifies how the timestamp is extracted from logs. For more information, see the CloudWatch Logs Agent Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html).
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

// Specifies the encoding of the log file so that the file can be read correctly. The default is `utf8`.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

// Specifies log files that you want to push to CloudWatch Logs. File can point to a specific file or multiple files (by using wild card characters such as /var/log/system.log*).
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) string { return v.File })
}

// Specifies the range of lines for identifying a file. The valid values are one number, or two dash-delimited numbers, such as `1`, `2-5`. The default value is `1`.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

// Specifies where to start to read data (`startOfFile` or `endOfFile`). The default is `startOfFile`.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

// Specifies the destination log group. A log group is created automatically if it doesn't already exist.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

// Specifies the pattern for identifying the start of a log message.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

// Specifies the time zone of log event time stamps.
func (o CustomLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerCloudwatchConfigurationLogStream](o, func(v CustomLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type CustomLayerEbsVolume struct {
	// Encrypt the volume.
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type CustomLayerEbsVolumeArgs struct {
	// Encrypt the volume.
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (CustomLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolume)(nil)).Elem()
}

func (i CustomLayerEbsVolumeArgs) ToCustomLayerEbsVolumeOutput() CustomLayerEbsVolumeOutput {
	return i.ToCustomLayerEbsVolumeOutputWithContext(context.Background())
}

func (i CustomLayerEbsVolumeArgs) ToCustomLayerEbsVolumeOutputWithContext(ctx context.Context) CustomLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerEbsVolumeOutput)
}

func (i *CustomLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type CustomLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (CustomLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerEbsVolume)(nil)).Elem()
}

func (o CustomLayerEbsVolumeOutput) ToCustomLayerEbsVolumeOutput() CustomLayerEbsVolumeOutput {
	return o
}

func (o CustomLayerEbsVolumeOutput) ToCustomLayerEbsVolumeOutputWithContext(ctx context.Context) CustomLayerEbsVolumeOutput {
	return o
}

func (o CustomLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[CustomLayerEbsVolume] {
	return pulumix.Output[CustomLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

// Encrypt the volume.
func (o CustomLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o CustomLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o CustomLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o CustomLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o CustomLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o CustomLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o CustomLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[CustomLayerEbsVolume](o, func(v CustomLayerEbsVolume) *string { return v.Type })
}

type CustomLayerLoadBasedAutoScaling struct {
	// The downscaling settings, as defined below, used for load-based autoscaling
	Downscaling *CustomLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	// Whether load-based auto scaling is enabled for the layer.
	Enable *bool `pulumi:"enable"`
	// The upscaling settings, as defined below, used for load-based autoscaling
	Upscaling *CustomLayerLoadBasedAutoScalingUpscaling `pulumi:"upscaling"`
}

type CustomLayerLoadBasedAutoScalingArgs struct {
	// The downscaling settings, as defined below, used for load-based autoscaling
	Downscaling pulumix.Input[*CustomLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	// Whether load-based auto scaling is enabled for the layer.
	Enable pulumix.Input[*bool] `pulumi:"enable"`
	// The upscaling settings, as defined below, used for load-based autoscaling
	Upscaling pulumix.Input[*CustomLayerLoadBasedAutoScalingUpscalingArgs] `pulumi:"upscaling"`
}

func (CustomLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i CustomLayerLoadBasedAutoScalingArgs) ToCustomLayerLoadBasedAutoScalingOutput() CustomLayerLoadBasedAutoScalingOutput {
	return i.ToCustomLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i CustomLayerLoadBasedAutoScalingArgs) ToCustomLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) CustomLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerLoadBasedAutoScalingOutput)
}

func (i *CustomLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type CustomLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (CustomLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o CustomLayerLoadBasedAutoScalingOutput) ToCustomLayerLoadBasedAutoScalingOutput() CustomLayerLoadBasedAutoScalingOutput {
	return o
}

func (o CustomLayerLoadBasedAutoScalingOutput) ToCustomLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) CustomLayerLoadBasedAutoScalingOutput {
	return o
}

func (o CustomLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[CustomLayerLoadBasedAutoScaling] {
	return pulumix.Output[CustomLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

// The downscaling settings, as defined below, used for load-based autoscaling
func (o CustomLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[CustomLayerLoadBasedAutoScalingDownscaling, CustomLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[CustomLayerLoadBasedAutoScaling](o, func(v CustomLayerLoadBasedAutoScaling) *CustomLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[CustomLayerLoadBasedAutoScalingDownscaling, CustomLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

// Whether load-based auto scaling is enabled for the layer.
func (o CustomLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScaling](o, func(v CustomLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

// The upscaling settings, as defined below, used for load-based autoscaling
func (o CustomLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[CustomLayerLoadBasedAutoScalingUpscaling, CustomLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[CustomLayerLoadBasedAutoScaling](o, func(v CustomLayerLoadBasedAutoScaling) *CustomLayerLoadBasedAutoScalingUpscaling { return v.Upscaling })
	return pulumix.GPtrOutput[CustomLayerLoadBasedAutoScalingUpscaling, CustomLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type CustomLayerLoadBasedAutoScalingDownscaling struct {
	// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
	Alarms []string `pulumi:"alarms"`
	// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
	CpuThreshold *float64 `pulumi:"cpuThreshold"`
	// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
	IgnoreMetricsTime *int `pulumi:"ignoreMetricsTime"`
	// The number of instances to add or remove when the load exceeds a threshold.
	InstanceCount *int `pulumi:"instanceCount"`
	// The load threshold. A value of -1 disables the threshold.
	LoadThreshold *float64 `pulumi:"loadThreshold"`
	// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
	MemoryThreshold *float64 `pulumi:"memoryThreshold"`
	// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
	ThresholdsWaitTime *int `pulumi:"thresholdsWaitTime"`
}

type CustomLayerLoadBasedAutoScalingDownscalingArgs struct {
	// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
	Alarms pulumix.Input[[]string] `pulumi:"alarms"`
	// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
	CpuThreshold pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
	IgnoreMetricsTime pulumix.Input[*int] `pulumi:"ignoreMetricsTime"`
	// The number of instances to add or remove when the load exceeds a threshold.
	InstanceCount pulumix.Input[*int] `pulumi:"instanceCount"`
	// The load threshold. A value of -1 disables the threshold.
	LoadThreshold pulumix.Input[*float64] `pulumi:"loadThreshold"`
	// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
	MemoryThreshold pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
	ThresholdsWaitTime pulumix.Input[*int] `pulumi:"thresholdsWaitTime"`
}

func (CustomLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i CustomLayerLoadBasedAutoScalingDownscalingArgs) ToCustomLayerLoadBasedAutoScalingDownscalingOutput() CustomLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToCustomLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i CustomLayerLoadBasedAutoScalingDownscalingArgs) ToCustomLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) CustomLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *CustomLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type CustomLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (CustomLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) ToCustomLayerLoadBasedAutoScalingDownscalingOutput() CustomLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) ToCustomLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) CustomLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[CustomLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[CustomLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

// The number of instances to add or remove when the load exceeds a threshold.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

// The load threshold. A value of -1 disables the threshold.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
func (o CustomLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingDownscaling](o, func(v CustomLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type CustomLayerLoadBasedAutoScalingUpscaling struct {
	// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
	Alarms []string `pulumi:"alarms"`
	// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
	CpuThreshold *float64 `pulumi:"cpuThreshold"`
	// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
	IgnoreMetricsTime *int `pulumi:"ignoreMetricsTime"`
	// The number of instances to add or remove when the load exceeds a threshold.
	InstanceCount *int `pulumi:"instanceCount"`
	// The load threshold. A value of -1 disables the threshold.
	LoadThreshold *float64 `pulumi:"loadThreshold"`
	// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
	MemoryThreshold *float64 `pulumi:"memoryThreshold"`
	// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
	ThresholdsWaitTime *int `pulumi:"thresholdsWaitTime"`
}

type CustomLayerLoadBasedAutoScalingUpscalingArgs struct {
	// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
	Alarms pulumix.Input[[]string] `pulumi:"alarms"`
	// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
	CpuThreshold pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
	IgnoreMetricsTime pulumix.Input[*int] `pulumi:"ignoreMetricsTime"`
	// The number of instances to add or remove when the load exceeds a threshold.
	InstanceCount pulumix.Input[*int] `pulumi:"instanceCount"`
	// The load threshold. A value of -1 disables the threshold.
	LoadThreshold pulumix.Input[*float64] `pulumi:"loadThreshold"`
	// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
	MemoryThreshold pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
	ThresholdsWaitTime pulumix.Input[*int] `pulumi:"thresholdsWaitTime"`
}

func (CustomLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i CustomLayerLoadBasedAutoScalingUpscalingArgs) ToCustomLayerLoadBasedAutoScalingUpscalingOutput() CustomLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToCustomLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i CustomLayerLoadBasedAutoScalingUpscalingArgs) ToCustomLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) CustomLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *CustomLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*CustomLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type CustomLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (CustomLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) ToCustomLayerLoadBasedAutoScalingUpscalingOutput() CustomLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) ToCustomLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) CustomLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[CustomLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[CustomLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks Stacks should ignore metrics and suppress additional scaling events.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

// The number of instances to add or remove when the load exceeds a threshold.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

// The load threshold. A value of -1 disables the threshold.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
func (o CustomLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[CustomLayerLoadBasedAutoScalingUpscaling](o, func(v CustomLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type EcsClusterLayerCloudwatchConfiguration struct {
	Enabled    *bool                                             `pulumi:"enabled"`
	LogStreams []EcsClusterLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type EcsClusterLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                                  `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*EcsClusterLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (EcsClusterLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i EcsClusterLayerCloudwatchConfigurationArgs) ToEcsClusterLayerCloudwatchConfigurationOutput() EcsClusterLayerCloudwatchConfigurationOutput {
	return i.ToEcsClusterLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i EcsClusterLayerCloudwatchConfigurationArgs) ToEcsClusterLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) EcsClusterLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerCloudwatchConfigurationOutput)
}

func (i *EcsClusterLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*EcsClusterLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type EcsClusterLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o EcsClusterLayerCloudwatchConfigurationOutput) ToEcsClusterLayerCloudwatchConfigurationOutput() EcsClusterLayerCloudwatchConfigurationOutput {
	return o
}

func (o EcsClusterLayerCloudwatchConfigurationOutput) ToEcsClusterLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) EcsClusterLayerCloudwatchConfigurationOutput {
	return o
}

func (o EcsClusterLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[EcsClusterLayerCloudwatchConfiguration] {
	return pulumix.Output[EcsClusterLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o EcsClusterLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfiguration](o, func(v EcsClusterLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o EcsClusterLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[EcsClusterLayerCloudwatchConfigurationLogStream, EcsClusterLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[EcsClusterLayerCloudwatchConfiguration](o, func(v EcsClusterLayerCloudwatchConfiguration) []EcsClusterLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[EcsClusterLayerCloudwatchConfigurationLogStream, EcsClusterLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type EcsClusterLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type EcsClusterLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (EcsClusterLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i EcsClusterLayerCloudwatchConfigurationLogStreamArgs) ToEcsClusterLayerCloudwatchConfigurationLogStreamOutput() EcsClusterLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToEcsClusterLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i EcsClusterLayerCloudwatchConfigurationLogStreamArgs) ToEcsClusterLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) EcsClusterLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *EcsClusterLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*EcsClusterLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type EcsClusterLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) ToEcsClusterLayerCloudwatchConfigurationLogStreamOutput() EcsClusterLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) ToEcsClusterLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) EcsClusterLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[EcsClusterLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[EcsClusterLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o EcsClusterLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerCloudwatchConfigurationLogStream](o, func(v EcsClusterLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type EcsClusterLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type EcsClusterLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (EcsClusterLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerEbsVolume)(nil)).Elem()
}

func (i EcsClusterLayerEbsVolumeArgs) ToEcsClusterLayerEbsVolumeOutput() EcsClusterLayerEbsVolumeOutput {
	return i.ToEcsClusterLayerEbsVolumeOutputWithContext(context.Background())
}

func (i EcsClusterLayerEbsVolumeArgs) ToEcsClusterLayerEbsVolumeOutputWithContext(ctx context.Context) EcsClusterLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerEbsVolumeOutput)
}

func (i *EcsClusterLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*EcsClusterLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type EcsClusterLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerEbsVolume)(nil)).Elem()
}

func (o EcsClusterLayerEbsVolumeOutput) ToEcsClusterLayerEbsVolumeOutput() EcsClusterLayerEbsVolumeOutput {
	return o
}

func (o EcsClusterLayerEbsVolumeOutput) ToEcsClusterLayerEbsVolumeOutputWithContext(ctx context.Context) EcsClusterLayerEbsVolumeOutput {
	return o
}

func (o EcsClusterLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[EcsClusterLayerEbsVolume] {
	return pulumix.Output[EcsClusterLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o EcsClusterLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o EcsClusterLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o EcsClusterLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o EcsClusterLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o EcsClusterLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o EcsClusterLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o EcsClusterLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[EcsClusterLayerEbsVolume](o, func(v EcsClusterLayerEbsVolume) *string { return v.Type })
}

type EcsClusterLayerLoadBasedAutoScaling struct {
	Downscaling *EcsClusterLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                           `pulumi:"enable"`
	Upscaling   *EcsClusterLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type EcsClusterLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*EcsClusterLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                               `pulumi:"enable"`
	Upscaling   pulumix.Input[*EcsClusterLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (EcsClusterLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i EcsClusterLayerLoadBasedAutoScalingArgs) ToEcsClusterLayerLoadBasedAutoScalingOutput() EcsClusterLayerLoadBasedAutoScalingOutput {
	return i.ToEcsClusterLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i EcsClusterLayerLoadBasedAutoScalingArgs) ToEcsClusterLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) EcsClusterLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerLoadBasedAutoScalingOutput)
}

func (i *EcsClusterLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*EcsClusterLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type EcsClusterLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o EcsClusterLayerLoadBasedAutoScalingOutput) ToEcsClusterLayerLoadBasedAutoScalingOutput() EcsClusterLayerLoadBasedAutoScalingOutput {
	return o
}

func (o EcsClusterLayerLoadBasedAutoScalingOutput) ToEcsClusterLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) EcsClusterLayerLoadBasedAutoScalingOutput {
	return o
}

func (o EcsClusterLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[EcsClusterLayerLoadBasedAutoScaling] {
	return pulumix.Output[EcsClusterLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o EcsClusterLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[EcsClusterLayerLoadBasedAutoScalingDownscaling, EcsClusterLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[EcsClusterLayerLoadBasedAutoScaling](o, func(v EcsClusterLayerLoadBasedAutoScaling) *EcsClusterLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[EcsClusterLayerLoadBasedAutoScalingDownscaling, EcsClusterLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o EcsClusterLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScaling](o, func(v EcsClusterLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o EcsClusterLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[EcsClusterLayerLoadBasedAutoScalingUpscaling, EcsClusterLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[EcsClusterLayerLoadBasedAutoScaling](o, func(v EcsClusterLayerLoadBasedAutoScaling) *EcsClusterLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[EcsClusterLayerLoadBasedAutoScalingUpscaling, EcsClusterLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type EcsClusterLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type EcsClusterLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (EcsClusterLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i EcsClusterLayerLoadBasedAutoScalingDownscalingArgs) ToEcsClusterLayerLoadBasedAutoScalingDownscalingOutput() EcsClusterLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToEcsClusterLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i EcsClusterLayerLoadBasedAutoScalingDownscalingArgs) ToEcsClusterLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) EcsClusterLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *EcsClusterLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*EcsClusterLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type EcsClusterLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) ToEcsClusterLayerLoadBasedAutoScalingDownscalingOutput() EcsClusterLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) ToEcsClusterLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) EcsClusterLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[EcsClusterLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[EcsClusterLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o EcsClusterLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingDownscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type EcsClusterLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type EcsClusterLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (EcsClusterLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i EcsClusterLayerLoadBasedAutoScalingUpscalingArgs) ToEcsClusterLayerLoadBasedAutoScalingUpscalingOutput() EcsClusterLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToEcsClusterLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i EcsClusterLayerLoadBasedAutoScalingUpscalingArgs) ToEcsClusterLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) EcsClusterLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcsClusterLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *EcsClusterLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*EcsClusterLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type EcsClusterLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcsClusterLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) ToEcsClusterLayerLoadBasedAutoScalingUpscalingOutput() EcsClusterLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) ToEcsClusterLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) EcsClusterLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[EcsClusterLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[EcsClusterLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o EcsClusterLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[EcsClusterLayerLoadBasedAutoScalingUpscaling](o, func(v EcsClusterLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type GangliaLayerCloudwatchConfiguration struct {
	Enabled    *bool                                          `pulumi:"enabled"`
	LogStreams []GangliaLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type GangliaLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                               `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*GangliaLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (GangliaLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i GangliaLayerCloudwatchConfigurationArgs) ToGangliaLayerCloudwatchConfigurationOutput() GangliaLayerCloudwatchConfigurationOutput {
	return i.ToGangliaLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i GangliaLayerCloudwatchConfigurationArgs) ToGangliaLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) GangliaLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerCloudwatchConfigurationOutput)
}

func (i *GangliaLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GangliaLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type GangliaLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (GangliaLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o GangliaLayerCloudwatchConfigurationOutput) ToGangliaLayerCloudwatchConfigurationOutput() GangliaLayerCloudwatchConfigurationOutput {
	return o
}

func (o GangliaLayerCloudwatchConfigurationOutput) ToGangliaLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) GangliaLayerCloudwatchConfigurationOutput {
	return o
}

func (o GangliaLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GangliaLayerCloudwatchConfiguration] {
	return pulumix.Output[GangliaLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GangliaLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[GangliaLayerCloudwatchConfiguration](o, func(v GangliaLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o GangliaLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[GangliaLayerCloudwatchConfigurationLogStream, GangliaLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[GangliaLayerCloudwatchConfiguration](o, func(v GangliaLayerCloudwatchConfiguration) []GangliaLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[GangliaLayerCloudwatchConfigurationLogStream, GangliaLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type GangliaLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type GangliaLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (GangliaLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i GangliaLayerCloudwatchConfigurationLogStreamArgs) ToGangliaLayerCloudwatchConfigurationLogStreamOutput() GangliaLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToGangliaLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i GangliaLayerCloudwatchConfigurationLogStreamArgs) ToGangliaLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) GangliaLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *GangliaLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*GangliaLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type GangliaLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (GangliaLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) ToGangliaLayerCloudwatchConfigurationLogStreamOutput() GangliaLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) ToGangliaLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) GangliaLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[GangliaLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[GangliaLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o GangliaLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerCloudwatchConfigurationLogStream](o, func(v GangliaLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type GangliaLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type GangliaLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (GangliaLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolume)(nil)).Elem()
}

func (i GangliaLayerEbsVolumeArgs) ToGangliaLayerEbsVolumeOutput() GangliaLayerEbsVolumeOutput {
	return i.ToGangliaLayerEbsVolumeOutputWithContext(context.Background())
}

func (i GangliaLayerEbsVolumeArgs) ToGangliaLayerEbsVolumeOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerEbsVolumeOutput)
}

func (i *GangliaLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*GangliaLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type GangliaLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (GangliaLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerEbsVolume)(nil)).Elem()
}

func (o GangliaLayerEbsVolumeOutput) ToGangliaLayerEbsVolumeOutput() GangliaLayerEbsVolumeOutput {
	return o
}

func (o GangliaLayerEbsVolumeOutput) ToGangliaLayerEbsVolumeOutputWithContext(ctx context.Context) GangliaLayerEbsVolumeOutput {
	return o
}

func (o GangliaLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[GangliaLayerEbsVolume] {
	return pulumix.Output[GangliaLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o GangliaLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o GangliaLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o GangliaLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o GangliaLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o GangliaLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o GangliaLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o GangliaLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[GangliaLayerEbsVolume](o, func(v GangliaLayerEbsVolume) *string { return v.Type })
}

type GangliaLayerLoadBasedAutoScaling struct {
	Downscaling *GangliaLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                        `pulumi:"enable"`
	Upscaling   *GangliaLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type GangliaLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*GangliaLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                            `pulumi:"enable"`
	Upscaling   pulumix.Input[*GangliaLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (GangliaLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i GangliaLayerLoadBasedAutoScalingArgs) ToGangliaLayerLoadBasedAutoScalingOutput() GangliaLayerLoadBasedAutoScalingOutput {
	return i.ToGangliaLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i GangliaLayerLoadBasedAutoScalingArgs) ToGangliaLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) GangliaLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerLoadBasedAutoScalingOutput)
}

func (i *GangliaLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*GangliaLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type GangliaLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (GangliaLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o GangliaLayerLoadBasedAutoScalingOutput) ToGangliaLayerLoadBasedAutoScalingOutput() GangliaLayerLoadBasedAutoScalingOutput {
	return o
}

func (o GangliaLayerLoadBasedAutoScalingOutput) ToGangliaLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) GangliaLayerLoadBasedAutoScalingOutput {
	return o
}

func (o GangliaLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[GangliaLayerLoadBasedAutoScaling] {
	return pulumix.Output[GangliaLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o GangliaLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[GangliaLayerLoadBasedAutoScalingDownscaling, GangliaLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[GangliaLayerLoadBasedAutoScaling](o, func(v GangliaLayerLoadBasedAutoScaling) *GangliaLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[GangliaLayerLoadBasedAutoScalingDownscaling, GangliaLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o GangliaLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScaling](o, func(v GangliaLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o GangliaLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[GangliaLayerLoadBasedAutoScalingUpscaling, GangliaLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[GangliaLayerLoadBasedAutoScaling](o, func(v GangliaLayerLoadBasedAutoScaling) *GangliaLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[GangliaLayerLoadBasedAutoScalingUpscaling, GangliaLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type GangliaLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type GangliaLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (GangliaLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i GangliaLayerLoadBasedAutoScalingDownscalingArgs) ToGangliaLayerLoadBasedAutoScalingDownscalingOutput() GangliaLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToGangliaLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i GangliaLayerLoadBasedAutoScalingDownscalingArgs) ToGangliaLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) GangliaLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *GangliaLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*GangliaLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type GangliaLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (GangliaLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) ToGangliaLayerLoadBasedAutoScalingDownscalingOutput() GangliaLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) ToGangliaLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) GangliaLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[GangliaLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[GangliaLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o GangliaLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingDownscaling](o, func(v GangliaLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type GangliaLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type GangliaLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (GangliaLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i GangliaLayerLoadBasedAutoScalingUpscalingArgs) ToGangliaLayerLoadBasedAutoScalingUpscalingOutput() GangliaLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToGangliaLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i GangliaLayerLoadBasedAutoScalingUpscalingArgs) ToGangliaLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) GangliaLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GangliaLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *GangliaLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*GangliaLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type GangliaLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (GangliaLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GangliaLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) ToGangliaLayerLoadBasedAutoScalingUpscalingOutput() GangliaLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) ToGangliaLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) GangliaLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[GangliaLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[GangliaLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o GangliaLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[GangliaLayerLoadBasedAutoScalingUpscaling](o, func(v GangliaLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type HaproxyLayerCloudwatchConfiguration struct {
	Enabled    *bool                                          `pulumi:"enabled"`
	LogStreams []HaproxyLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type HaproxyLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                               `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*HaproxyLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (HaproxyLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i HaproxyLayerCloudwatchConfigurationArgs) ToHaproxyLayerCloudwatchConfigurationOutput() HaproxyLayerCloudwatchConfigurationOutput {
	return i.ToHaproxyLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i HaproxyLayerCloudwatchConfigurationArgs) ToHaproxyLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) HaproxyLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerCloudwatchConfigurationOutput)
}

func (i *HaproxyLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*HaproxyLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type HaproxyLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (HaproxyLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o HaproxyLayerCloudwatchConfigurationOutput) ToHaproxyLayerCloudwatchConfigurationOutput() HaproxyLayerCloudwatchConfigurationOutput {
	return o
}

func (o HaproxyLayerCloudwatchConfigurationOutput) ToHaproxyLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) HaproxyLayerCloudwatchConfigurationOutput {
	return o
}

func (o HaproxyLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[HaproxyLayerCloudwatchConfiguration] {
	return pulumix.Output[HaproxyLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o HaproxyLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfiguration](o, func(v HaproxyLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o HaproxyLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[HaproxyLayerCloudwatchConfigurationLogStream, HaproxyLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[HaproxyLayerCloudwatchConfiguration](o, func(v HaproxyLayerCloudwatchConfiguration) []HaproxyLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[HaproxyLayerCloudwatchConfigurationLogStream, HaproxyLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type HaproxyLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type HaproxyLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (HaproxyLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i HaproxyLayerCloudwatchConfigurationLogStreamArgs) ToHaproxyLayerCloudwatchConfigurationLogStreamOutput() HaproxyLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToHaproxyLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i HaproxyLayerCloudwatchConfigurationLogStreamArgs) ToHaproxyLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) HaproxyLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *HaproxyLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*HaproxyLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type HaproxyLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (HaproxyLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) ToHaproxyLayerCloudwatchConfigurationLogStreamOutput() HaproxyLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) ToHaproxyLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) HaproxyLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[HaproxyLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[HaproxyLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o HaproxyLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerCloudwatchConfigurationLogStream](o, func(v HaproxyLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type HaproxyLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type HaproxyLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (HaproxyLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolume)(nil)).Elem()
}

func (i HaproxyLayerEbsVolumeArgs) ToHaproxyLayerEbsVolumeOutput() HaproxyLayerEbsVolumeOutput {
	return i.ToHaproxyLayerEbsVolumeOutputWithContext(context.Background())
}

func (i HaproxyLayerEbsVolumeArgs) ToHaproxyLayerEbsVolumeOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerEbsVolumeOutput)
}

func (i *HaproxyLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*HaproxyLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type HaproxyLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (HaproxyLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerEbsVolume)(nil)).Elem()
}

func (o HaproxyLayerEbsVolumeOutput) ToHaproxyLayerEbsVolumeOutput() HaproxyLayerEbsVolumeOutput {
	return o
}

func (o HaproxyLayerEbsVolumeOutput) ToHaproxyLayerEbsVolumeOutputWithContext(ctx context.Context) HaproxyLayerEbsVolumeOutput {
	return o
}

func (o HaproxyLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[HaproxyLayerEbsVolume] {
	return pulumix.Output[HaproxyLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o HaproxyLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o HaproxyLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o HaproxyLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o HaproxyLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o HaproxyLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o HaproxyLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o HaproxyLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[HaproxyLayerEbsVolume](o, func(v HaproxyLayerEbsVolume) *string { return v.Type })
}

type HaproxyLayerLoadBasedAutoScaling struct {
	Downscaling *HaproxyLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                        `pulumi:"enable"`
	Upscaling   *HaproxyLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type HaproxyLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*HaproxyLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                            `pulumi:"enable"`
	Upscaling   pulumix.Input[*HaproxyLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (HaproxyLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i HaproxyLayerLoadBasedAutoScalingArgs) ToHaproxyLayerLoadBasedAutoScalingOutput() HaproxyLayerLoadBasedAutoScalingOutput {
	return i.ToHaproxyLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i HaproxyLayerLoadBasedAutoScalingArgs) ToHaproxyLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) HaproxyLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerLoadBasedAutoScalingOutput)
}

func (i *HaproxyLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*HaproxyLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type HaproxyLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (HaproxyLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o HaproxyLayerLoadBasedAutoScalingOutput) ToHaproxyLayerLoadBasedAutoScalingOutput() HaproxyLayerLoadBasedAutoScalingOutput {
	return o
}

func (o HaproxyLayerLoadBasedAutoScalingOutput) ToHaproxyLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) HaproxyLayerLoadBasedAutoScalingOutput {
	return o
}

func (o HaproxyLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[HaproxyLayerLoadBasedAutoScaling] {
	return pulumix.Output[HaproxyLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o HaproxyLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[HaproxyLayerLoadBasedAutoScalingDownscaling, HaproxyLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[HaproxyLayerLoadBasedAutoScaling](o, func(v HaproxyLayerLoadBasedAutoScaling) *HaproxyLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[HaproxyLayerLoadBasedAutoScalingDownscaling, HaproxyLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o HaproxyLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScaling](o, func(v HaproxyLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o HaproxyLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[HaproxyLayerLoadBasedAutoScalingUpscaling, HaproxyLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[HaproxyLayerLoadBasedAutoScaling](o, func(v HaproxyLayerLoadBasedAutoScaling) *HaproxyLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[HaproxyLayerLoadBasedAutoScalingUpscaling, HaproxyLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type HaproxyLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type HaproxyLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (HaproxyLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i HaproxyLayerLoadBasedAutoScalingDownscalingArgs) ToHaproxyLayerLoadBasedAutoScalingDownscalingOutput() HaproxyLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToHaproxyLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i HaproxyLayerLoadBasedAutoScalingDownscalingArgs) ToHaproxyLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) HaproxyLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *HaproxyLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*HaproxyLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type HaproxyLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (HaproxyLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) ToHaproxyLayerLoadBasedAutoScalingDownscalingOutput() HaproxyLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) ToHaproxyLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) HaproxyLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[HaproxyLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[HaproxyLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o HaproxyLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingDownscaling](o, func(v HaproxyLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type HaproxyLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type HaproxyLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (HaproxyLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i HaproxyLayerLoadBasedAutoScalingUpscalingArgs) ToHaproxyLayerLoadBasedAutoScalingUpscalingOutput() HaproxyLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToHaproxyLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i HaproxyLayerLoadBasedAutoScalingUpscalingArgs) ToHaproxyLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) HaproxyLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaproxyLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *HaproxyLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*HaproxyLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type HaproxyLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (HaproxyLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HaproxyLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) ToHaproxyLayerLoadBasedAutoScalingUpscalingOutput() HaproxyLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) ToHaproxyLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) HaproxyLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[HaproxyLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[HaproxyLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o HaproxyLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[HaproxyLayerLoadBasedAutoScalingUpscaling](o, func(v HaproxyLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type InstanceEbsBlockDevice struct {
	DeleteOnTermination *bool   `pulumi:"deleteOnTermination"`
	DeviceName          string  `pulumi:"deviceName"`
	Iops                *int    `pulumi:"iops"`
	SnapshotId          *string `pulumi:"snapshotId"`
	VolumeSize          *int    `pulumi:"volumeSize"`
	VolumeType          *string `pulumi:"volumeType"`
}

type InstanceEbsBlockDeviceArgs struct {
	DeleteOnTermination pulumix.Input[*bool]   `pulumi:"deleteOnTermination"`
	DeviceName          pulumix.Input[string]  `pulumi:"deviceName"`
	Iops                pulumix.Input[*int]    `pulumi:"iops"`
	SnapshotId          pulumix.Input[*string] `pulumi:"snapshotId"`
	VolumeSize          pulumix.Input[*int]    `pulumi:"volumeSize"`
	VolumeType          pulumix.Input[*string] `pulumi:"volumeType"`
}

func (InstanceEbsBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDevice)(nil)).Elem()
}

func (i InstanceEbsBlockDeviceArgs) ToInstanceEbsBlockDeviceOutput() InstanceEbsBlockDeviceOutput {
	return i.ToInstanceEbsBlockDeviceOutputWithContext(context.Background())
}

func (i InstanceEbsBlockDeviceArgs) ToInstanceEbsBlockDeviceOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEbsBlockDeviceOutput)
}

func (i *InstanceEbsBlockDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceEbsBlockDeviceArgs] {
	return pulumix.Val(i)
}

type InstanceEbsBlockDeviceOutput struct{ *pulumi.OutputState }

func (InstanceEbsBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEbsBlockDevice)(nil)).Elem()
}

func (o InstanceEbsBlockDeviceOutput) ToInstanceEbsBlockDeviceOutput() InstanceEbsBlockDeviceOutput {
	return o
}

func (o InstanceEbsBlockDeviceOutput) ToInstanceEbsBlockDeviceOutputWithContext(ctx context.Context) InstanceEbsBlockDeviceOutput {
	return o
}

func (o InstanceEbsBlockDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceEbsBlockDevice] {
	return pulumix.Output[InstanceEbsBlockDevice]{
		OutputState: o.OutputState,
	}
}

func (o InstanceEbsBlockDeviceOutput) DeleteOnTermination() pulumix.Output[*bool] {
	return pulumix.Apply[InstanceEbsBlockDevice](o, func(v InstanceEbsBlockDevice) *bool { return v.DeleteOnTermination })
}

func (o InstanceEbsBlockDeviceOutput) DeviceName() pulumix.Output[string] {
	return pulumix.Apply[InstanceEbsBlockDevice](o, func(v InstanceEbsBlockDevice) string { return v.DeviceName })
}

func (o InstanceEbsBlockDeviceOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[InstanceEbsBlockDevice](o, func(v InstanceEbsBlockDevice) *int { return v.Iops })
}

func (o InstanceEbsBlockDeviceOutput) SnapshotId() pulumix.Output[*string] {
	return pulumix.Apply[InstanceEbsBlockDevice](o, func(v InstanceEbsBlockDevice) *string { return v.SnapshotId })
}

func (o InstanceEbsBlockDeviceOutput) VolumeSize() pulumix.Output[*int] {
	return pulumix.Apply[InstanceEbsBlockDevice](o, func(v InstanceEbsBlockDevice) *int { return v.VolumeSize })
}

func (o InstanceEbsBlockDeviceOutput) VolumeType() pulumix.Output[*string] {
	return pulumix.Apply[InstanceEbsBlockDevice](o, func(v InstanceEbsBlockDevice) *string { return v.VolumeType })
}

type InstanceEphemeralBlockDevice struct {
	DeviceName  string `pulumi:"deviceName"`
	VirtualName string `pulumi:"virtualName"`
}

type InstanceEphemeralBlockDeviceArgs struct {
	DeviceName  pulumix.Input[string] `pulumi:"deviceName"`
	VirtualName pulumix.Input[string] `pulumi:"virtualName"`
}

func (InstanceEphemeralBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDevice)(nil)).Elem()
}

func (i InstanceEphemeralBlockDeviceArgs) ToInstanceEphemeralBlockDeviceOutput() InstanceEphemeralBlockDeviceOutput {
	return i.ToInstanceEphemeralBlockDeviceOutputWithContext(context.Background())
}

func (i InstanceEphemeralBlockDeviceArgs) ToInstanceEphemeralBlockDeviceOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEphemeralBlockDeviceOutput)
}

func (i *InstanceEphemeralBlockDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceEphemeralBlockDeviceArgs] {
	return pulumix.Val(i)
}

type InstanceEphemeralBlockDeviceOutput struct{ *pulumi.OutputState }

func (InstanceEphemeralBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEphemeralBlockDevice)(nil)).Elem()
}

func (o InstanceEphemeralBlockDeviceOutput) ToInstanceEphemeralBlockDeviceOutput() InstanceEphemeralBlockDeviceOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceOutput) ToInstanceEphemeralBlockDeviceOutputWithContext(ctx context.Context) InstanceEphemeralBlockDeviceOutput {
	return o
}

func (o InstanceEphemeralBlockDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceEphemeralBlockDevice] {
	return pulumix.Output[InstanceEphemeralBlockDevice]{
		OutputState: o.OutputState,
	}
}

func (o InstanceEphemeralBlockDeviceOutput) DeviceName() pulumix.Output[string] {
	return pulumix.Apply[InstanceEphemeralBlockDevice](o, func(v InstanceEphemeralBlockDevice) string { return v.DeviceName })
}

func (o InstanceEphemeralBlockDeviceOutput) VirtualName() pulumix.Output[string] {
	return pulumix.Apply[InstanceEphemeralBlockDevice](o, func(v InstanceEphemeralBlockDevice) string { return v.VirtualName })
}

type InstanceRootBlockDevice struct {
	DeleteOnTermination *bool   `pulumi:"deleteOnTermination"`
	Iops                *int    `pulumi:"iops"`
	VolumeSize          *int    `pulumi:"volumeSize"`
	VolumeType          *string `pulumi:"volumeType"`
}

type InstanceRootBlockDeviceArgs struct {
	DeleteOnTermination pulumix.Input[*bool]   `pulumi:"deleteOnTermination"`
	Iops                pulumix.Input[*int]    `pulumi:"iops"`
	VolumeSize          pulumix.Input[*int]    `pulumi:"volumeSize"`
	VolumeType          pulumix.Input[*string] `pulumi:"volumeType"`
}

func (InstanceRootBlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDevice)(nil)).Elem()
}

func (i InstanceRootBlockDeviceArgs) ToInstanceRootBlockDeviceOutput() InstanceRootBlockDeviceOutput {
	return i.ToInstanceRootBlockDeviceOutputWithContext(context.Background())
}

func (i InstanceRootBlockDeviceArgs) ToInstanceRootBlockDeviceOutputWithContext(ctx context.Context) InstanceRootBlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRootBlockDeviceOutput)
}

func (i *InstanceRootBlockDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceRootBlockDeviceArgs] {
	return pulumix.Val(i)
}

type InstanceRootBlockDeviceOutput struct{ *pulumi.OutputState }

func (InstanceRootBlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRootBlockDevice)(nil)).Elem()
}

func (o InstanceRootBlockDeviceOutput) ToInstanceRootBlockDeviceOutput() InstanceRootBlockDeviceOutput {
	return o
}

func (o InstanceRootBlockDeviceOutput) ToInstanceRootBlockDeviceOutputWithContext(ctx context.Context) InstanceRootBlockDeviceOutput {
	return o
}

func (o InstanceRootBlockDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceRootBlockDevice] {
	return pulumix.Output[InstanceRootBlockDevice]{
		OutputState: o.OutputState,
	}
}

func (o InstanceRootBlockDeviceOutput) DeleteOnTermination() pulumix.Output[*bool] {
	return pulumix.Apply[InstanceRootBlockDevice](o, func(v InstanceRootBlockDevice) *bool { return v.DeleteOnTermination })
}

func (o InstanceRootBlockDeviceOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[InstanceRootBlockDevice](o, func(v InstanceRootBlockDevice) *int { return v.Iops })
}

func (o InstanceRootBlockDeviceOutput) VolumeSize() pulumix.Output[*int] {
	return pulumix.Apply[InstanceRootBlockDevice](o, func(v InstanceRootBlockDevice) *int { return v.VolumeSize })
}

func (o InstanceRootBlockDeviceOutput) VolumeType() pulumix.Output[*string] {
	return pulumix.Apply[InstanceRootBlockDevice](o, func(v InstanceRootBlockDevice) *string { return v.VolumeType })
}

type JavaAppLayerCloudwatchConfiguration struct {
	Enabled    *bool                                          `pulumi:"enabled"`
	LogStreams []JavaAppLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type JavaAppLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                               `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*JavaAppLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (JavaAppLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i JavaAppLayerCloudwatchConfigurationArgs) ToJavaAppLayerCloudwatchConfigurationOutput() JavaAppLayerCloudwatchConfigurationOutput {
	return i.ToJavaAppLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i JavaAppLayerCloudwatchConfigurationArgs) ToJavaAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) JavaAppLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerCloudwatchConfigurationOutput)
}

func (i *JavaAppLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*JavaAppLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type JavaAppLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (JavaAppLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o JavaAppLayerCloudwatchConfigurationOutput) ToJavaAppLayerCloudwatchConfigurationOutput() JavaAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o JavaAppLayerCloudwatchConfigurationOutput) ToJavaAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) JavaAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o JavaAppLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[JavaAppLayerCloudwatchConfiguration] {
	return pulumix.Output[JavaAppLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o JavaAppLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfiguration](o, func(v JavaAppLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o JavaAppLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[JavaAppLayerCloudwatchConfigurationLogStream, JavaAppLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[JavaAppLayerCloudwatchConfiguration](o, func(v JavaAppLayerCloudwatchConfiguration) []JavaAppLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[JavaAppLayerCloudwatchConfigurationLogStream, JavaAppLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type JavaAppLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type JavaAppLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (JavaAppLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i JavaAppLayerCloudwatchConfigurationLogStreamArgs) ToJavaAppLayerCloudwatchConfigurationLogStreamOutput() JavaAppLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToJavaAppLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i JavaAppLayerCloudwatchConfigurationLogStreamArgs) ToJavaAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) JavaAppLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *JavaAppLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*JavaAppLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type JavaAppLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (JavaAppLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) ToJavaAppLayerCloudwatchConfigurationLogStreamOutput() JavaAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) ToJavaAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) JavaAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[JavaAppLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[JavaAppLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o JavaAppLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerCloudwatchConfigurationLogStream](o, func(v JavaAppLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type JavaAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type JavaAppLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (JavaAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolume)(nil)).Elem()
}

func (i JavaAppLayerEbsVolumeArgs) ToJavaAppLayerEbsVolumeOutput() JavaAppLayerEbsVolumeOutput {
	return i.ToJavaAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i JavaAppLayerEbsVolumeArgs) ToJavaAppLayerEbsVolumeOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerEbsVolumeOutput)
}

func (i *JavaAppLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*JavaAppLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type JavaAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (JavaAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerEbsVolume)(nil)).Elem()
}

func (o JavaAppLayerEbsVolumeOutput) ToJavaAppLayerEbsVolumeOutput() JavaAppLayerEbsVolumeOutput {
	return o
}

func (o JavaAppLayerEbsVolumeOutput) ToJavaAppLayerEbsVolumeOutputWithContext(ctx context.Context) JavaAppLayerEbsVolumeOutput {
	return o
}

func (o JavaAppLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[JavaAppLayerEbsVolume] {
	return pulumix.Output[JavaAppLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o JavaAppLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o JavaAppLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o JavaAppLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o JavaAppLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o JavaAppLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o JavaAppLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o JavaAppLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[JavaAppLayerEbsVolume](o, func(v JavaAppLayerEbsVolume) *string { return v.Type })
}

type JavaAppLayerLoadBasedAutoScaling struct {
	Downscaling *JavaAppLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                        `pulumi:"enable"`
	Upscaling   *JavaAppLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type JavaAppLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*JavaAppLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                            `pulumi:"enable"`
	Upscaling   pulumix.Input[*JavaAppLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (JavaAppLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i JavaAppLayerLoadBasedAutoScalingArgs) ToJavaAppLayerLoadBasedAutoScalingOutput() JavaAppLayerLoadBasedAutoScalingOutput {
	return i.ToJavaAppLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i JavaAppLayerLoadBasedAutoScalingArgs) ToJavaAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) JavaAppLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerLoadBasedAutoScalingOutput)
}

func (i *JavaAppLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*JavaAppLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type JavaAppLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (JavaAppLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o JavaAppLayerLoadBasedAutoScalingOutput) ToJavaAppLayerLoadBasedAutoScalingOutput() JavaAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o JavaAppLayerLoadBasedAutoScalingOutput) ToJavaAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) JavaAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o JavaAppLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[JavaAppLayerLoadBasedAutoScaling] {
	return pulumix.Output[JavaAppLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o JavaAppLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[JavaAppLayerLoadBasedAutoScalingDownscaling, JavaAppLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[JavaAppLayerLoadBasedAutoScaling](o, func(v JavaAppLayerLoadBasedAutoScaling) *JavaAppLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[JavaAppLayerLoadBasedAutoScalingDownscaling, JavaAppLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o JavaAppLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScaling](o, func(v JavaAppLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o JavaAppLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[JavaAppLayerLoadBasedAutoScalingUpscaling, JavaAppLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[JavaAppLayerLoadBasedAutoScaling](o, func(v JavaAppLayerLoadBasedAutoScaling) *JavaAppLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[JavaAppLayerLoadBasedAutoScalingUpscaling, JavaAppLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type JavaAppLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type JavaAppLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (JavaAppLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i JavaAppLayerLoadBasedAutoScalingDownscalingArgs) ToJavaAppLayerLoadBasedAutoScalingDownscalingOutput() JavaAppLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToJavaAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i JavaAppLayerLoadBasedAutoScalingDownscalingArgs) ToJavaAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) JavaAppLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *JavaAppLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*JavaAppLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type JavaAppLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (JavaAppLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) ToJavaAppLayerLoadBasedAutoScalingDownscalingOutput() JavaAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) ToJavaAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) JavaAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[JavaAppLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[JavaAppLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o JavaAppLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingDownscaling](o, func(v JavaAppLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type JavaAppLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type JavaAppLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (JavaAppLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i JavaAppLayerLoadBasedAutoScalingUpscalingArgs) ToJavaAppLayerLoadBasedAutoScalingUpscalingOutput() JavaAppLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToJavaAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i JavaAppLayerLoadBasedAutoScalingUpscalingArgs) ToJavaAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) JavaAppLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaAppLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *JavaAppLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*JavaAppLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type JavaAppLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (JavaAppLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) ToJavaAppLayerLoadBasedAutoScalingUpscalingOutput() JavaAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) ToJavaAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) JavaAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[JavaAppLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[JavaAppLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o JavaAppLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[JavaAppLayerLoadBasedAutoScalingUpscaling](o, func(v JavaAppLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type MemcachedLayerCloudwatchConfiguration struct {
	Enabled    *bool                                            `pulumi:"enabled"`
	LogStreams []MemcachedLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type MemcachedLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                                 `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*MemcachedLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (MemcachedLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i MemcachedLayerCloudwatchConfigurationArgs) ToMemcachedLayerCloudwatchConfigurationOutput() MemcachedLayerCloudwatchConfigurationOutput {
	return i.ToMemcachedLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i MemcachedLayerCloudwatchConfigurationArgs) ToMemcachedLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) MemcachedLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerCloudwatchConfigurationOutput)
}

func (i *MemcachedLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MemcachedLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type MemcachedLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (MemcachedLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o MemcachedLayerCloudwatchConfigurationOutput) ToMemcachedLayerCloudwatchConfigurationOutput() MemcachedLayerCloudwatchConfigurationOutput {
	return o
}

func (o MemcachedLayerCloudwatchConfigurationOutput) ToMemcachedLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) MemcachedLayerCloudwatchConfigurationOutput {
	return o
}

func (o MemcachedLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MemcachedLayerCloudwatchConfiguration] {
	return pulumix.Output[MemcachedLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MemcachedLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfiguration](o, func(v MemcachedLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o MemcachedLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[MemcachedLayerCloudwatchConfigurationLogStream, MemcachedLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[MemcachedLayerCloudwatchConfiguration](o, func(v MemcachedLayerCloudwatchConfiguration) []MemcachedLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[MemcachedLayerCloudwatchConfigurationLogStream, MemcachedLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type MemcachedLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type MemcachedLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (MemcachedLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i MemcachedLayerCloudwatchConfigurationLogStreamArgs) ToMemcachedLayerCloudwatchConfigurationLogStreamOutput() MemcachedLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToMemcachedLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i MemcachedLayerCloudwatchConfigurationLogStreamArgs) ToMemcachedLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) MemcachedLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *MemcachedLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*MemcachedLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type MemcachedLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (MemcachedLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) ToMemcachedLayerCloudwatchConfigurationLogStreamOutput() MemcachedLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) ToMemcachedLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) MemcachedLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[MemcachedLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[MemcachedLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o MemcachedLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerCloudwatchConfigurationLogStream](o, func(v MemcachedLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type MemcachedLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MemcachedLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (MemcachedLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolume)(nil)).Elem()
}

func (i MemcachedLayerEbsVolumeArgs) ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput {
	return i.ToMemcachedLayerEbsVolumeOutputWithContext(context.Background())
}

func (i MemcachedLayerEbsVolumeArgs) ToMemcachedLayerEbsVolumeOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerEbsVolumeOutput)
}

func (i *MemcachedLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*MemcachedLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type MemcachedLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (MemcachedLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerEbsVolume)(nil)).Elem()
}

func (o MemcachedLayerEbsVolumeOutput) ToMemcachedLayerEbsVolumeOutput() MemcachedLayerEbsVolumeOutput {
	return o
}

func (o MemcachedLayerEbsVolumeOutput) ToMemcachedLayerEbsVolumeOutputWithContext(ctx context.Context) MemcachedLayerEbsVolumeOutput {
	return o
}

func (o MemcachedLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[MemcachedLayerEbsVolume] {
	return pulumix.Output[MemcachedLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o MemcachedLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o MemcachedLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o MemcachedLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o MemcachedLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o MemcachedLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o MemcachedLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MemcachedLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[MemcachedLayerEbsVolume](o, func(v MemcachedLayerEbsVolume) *string { return v.Type })
}

type MemcachedLayerLoadBasedAutoScaling struct {
	Downscaling *MemcachedLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                          `pulumi:"enable"`
	Upscaling   *MemcachedLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type MemcachedLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*MemcachedLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                              `pulumi:"enable"`
	Upscaling   pulumix.Input[*MemcachedLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (MemcachedLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i MemcachedLayerLoadBasedAutoScalingArgs) ToMemcachedLayerLoadBasedAutoScalingOutput() MemcachedLayerLoadBasedAutoScalingOutput {
	return i.ToMemcachedLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i MemcachedLayerLoadBasedAutoScalingArgs) ToMemcachedLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) MemcachedLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerLoadBasedAutoScalingOutput)
}

func (i *MemcachedLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*MemcachedLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type MemcachedLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (MemcachedLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o MemcachedLayerLoadBasedAutoScalingOutput) ToMemcachedLayerLoadBasedAutoScalingOutput() MemcachedLayerLoadBasedAutoScalingOutput {
	return o
}

func (o MemcachedLayerLoadBasedAutoScalingOutput) ToMemcachedLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) MemcachedLayerLoadBasedAutoScalingOutput {
	return o
}

func (o MemcachedLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[MemcachedLayerLoadBasedAutoScaling] {
	return pulumix.Output[MemcachedLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o MemcachedLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[MemcachedLayerLoadBasedAutoScalingDownscaling, MemcachedLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[MemcachedLayerLoadBasedAutoScaling](o, func(v MemcachedLayerLoadBasedAutoScaling) *MemcachedLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[MemcachedLayerLoadBasedAutoScalingDownscaling, MemcachedLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o MemcachedLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScaling](o, func(v MemcachedLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o MemcachedLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[MemcachedLayerLoadBasedAutoScalingUpscaling, MemcachedLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[MemcachedLayerLoadBasedAutoScaling](o, func(v MemcachedLayerLoadBasedAutoScaling) *MemcachedLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[MemcachedLayerLoadBasedAutoScalingUpscaling, MemcachedLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type MemcachedLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type MemcachedLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (MemcachedLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i MemcachedLayerLoadBasedAutoScalingDownscalingArgs) ToMemcachedLayerLoadBasedAutoScalingDownscalingOutput() MemcachedLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToMemcachedLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i MemcachedLayerLoadBasedAutoScalingDownscalingArgs) ToMemcachedLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) MemcachedLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *MemcachedLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*MemcachedLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type MemcachedLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (MemcachedLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) ToMemcachedLayerLoadBasedAutoScalingDownscalingOutput() MemcachedLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) ToMemcachedLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) MemcachedLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[MemcachedLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[MemcachedLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o MemcachedLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingDownscaling](o, func(v MemcachedLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type MemcachedLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type MemcachedLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (MemcachedLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i MemcachedLayerLoadBasedAutoScalingUpscalingArgs) ToMemcachedLayerLoadBasedAutoScalingUpscalingOutput() MemcachedLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToMemcachedLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i MemcachedLayerLoadBasedAutoScalingUpscalingArgs) ToMemcachedLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) MemcachedLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *MemcachedLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*MemcachedLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type MemcachedLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (MemcachedLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) ToMemcachedLayerLoadBasedAutoScalingUpscalingOutput() MemcachedLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) ToMemcachedLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) MemcachedLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[MemcachedLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[MemcachedLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o MemcachedLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[MemcachedLayerLoadBasedAutoScalingUpscaling](o, func(v MemcachedLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type MysqlLayerCloudwatchConfiguration struct {
	Enabled    *bool                                        `pulumi:"enabled"`
	LogStreams []MysqlLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type MysqlLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                             `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*MysqlLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (MysqlLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i MysqlLayerCloudwatchConfigurationArgs) ToMysqlLayerCloudwatchConfigurationOutput() MysqlLayerCloudwatchConfigurationOutput {
	return i.ToMysqlLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i MysqlLayerCloudwatchConfigurationArgs) ToMysqlLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) MysqlLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerCloudwatchConfigurationOutput)
}

func (i *MysqlLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*MysqlLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type MysqlLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (MysqlLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o MysqlLayerCloudwatchConfigurationOutput) ToMysqlLayerCloudwatchConfigurationOutput() MysqlLayerCloudwatchConfigurationOutput {
	return o
}

func (o MysqlLayerCloudwatchConfigurationOutput) ToMysqlLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) MysqlLayerCloudwatchConfigurationOutput {
	return o
}

func (o MysqlLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MysqlLayerCloudwatchConfiguration] {
	return pulumix.Output[MysqlLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MysqlLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[MysqlLayerCloudwatchConfiguration](o, func(v MysqlLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o MysqlLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[MysqlLayerCloudwatchConfigurationLogStream, MysqlLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[MysqlLayerCloudwatchConfiguration](o, func(v MysqlLayerCloudwatchConfiguration) []MysqlLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[MysqlLayerCloudwatchConfigurationLogStream, MysqlLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type MysqlLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type MysqlLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (MysqlLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i MysqlLayerCloudwatchConfigurationLogStreamArgs) ToMysqlLayerCloudwatchConfigurationLogStreamOutput() MysqlLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToMysqlLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i MysqlLayerCloudwatchConfigurationLogStreamArgs) ToMysqlLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) MysqlLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *MysqlLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*MysqlLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type MysqlLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (MysqlLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) ToMysqlLayerCloudwatchConfigurationLogStreamOutput() MysqlLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) ToMysqlLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) MysqlLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[MysqlLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[MysqlLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o MysqlLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerCloudwatchConfigurationLogStream](o, func(v MysqlLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type MysqlLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type MysqlLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (MysqlLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolume)(nil)).Elem()
}

func (i MysqlLayerEbsVolumeArgs) ToMysqlLayerEbsVolumeOutput() MysqlLayerEbsVolumeOutput {
	return i.ToMysqlLayerEbsVolumeOutputWithContext(context.Background())
}

func (i MysqlLayerEbsVolumeArgs) ToMysqlLayerEbsVolumeOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerEbsVolumeOutput)
}

func (i *MysqlLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*MysqlLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type MysqlLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (MysqlLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerEbsVolume)(nil)).Elem()
}

func (o MysqlLayerEbsVolumeOutput) ToMysqlLayerEbsVolumeOutput() MysqlLayerEbsVolumeOutput {
	return o
}

func (o MysqlLayerEbsVolumeOutput) ToMysqlLayerEbsVolumeOutputWithContext(ctx context.Context) MysqlLayerEbsVolumeOutput {
	return o
}

func (o MysqlLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[MysqlLayerEbsVolume] {
	return pulumix.Output[MysqlLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o MysqlLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o MysqlLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o MysqlLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o MysqlLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o MysqlLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o MysqlLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o MysqlLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[MysqlLayerEbsVolume](o, func(v MysqlLayerEbsVolume) *string { return v.Type })
}

type MysqlLayerLoadBasedAutoScaling struct {
	Downscaling *MysqlLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                      `pulumi:"enable"`
	Upscaling   *MysqlLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type MysqlLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*MysqlLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                          `pulumi:"enable"`
	Upscaling   pulumix.Input[*MysqlLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (MysqlLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i MysqlLayerLoadBasedAutoScalingArgs) ToMysqlLayerLoadBasedAutoScalingOutput() MysqlLayerLoadBasedAutoScalingOutput {
	return i.ToMysqlLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i MysqlLayerLoadBasedAutoScalingArgs) ToMysqlLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) MysqlLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerLoadBasedAutoScalingOutput)
}

func (i *MysqlLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*MysqlLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type MysqlLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (MysqlLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o MysqlLayerLoadBasedAutoScalingOutput) ToMysqlLayerLoadBasedAutoScalingOutput() MysqlLayerLoadBasedAutoScalingOutput {
	return o
}

func (o MysqlLayerLoadBasedAutoScalingOutput) ToMysqlLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) MysqlLayerLoadBasedAutoScalingOutput {
	return o
}

func (o MysqlLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[MysqlLayerLoadBasedAutoScaling] {
	return pulumix.Output[MysqlLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o MysqlLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[MysqlLayerLoadBasedAutoScalingDownscaling, MysqlLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[MysqlLayerLoadBasedAutoScaling](o, func(v MysqlLayerLoadBasedAutoScaling) *MysqlLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[MysqlLayerLoadBasedAutoScalingDownscaling, MysqlLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o MysqlLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScaling](o, func(v MysqlLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o MysqlLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[MysqlLayerLoadBasedAutoScalingUpscaling, MysqlLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[MysqlLayerLoadBasedAutoScaling](o, func(v MysqlLayerLoadBasedAutoScaling) *MysqlLayerLoadBasedAutoScalingUpscaling { return v.Upscaling })
	return pulumix.GPtrOutput[MysqlLayerLoadBasedAutoScalingUpscaling, MysqlLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type MysqlLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type MysqlLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (MysqlLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i MysqlLayerLoadBasedAutoScalingDownscalingArgs) ToMysqlLayerLoadBasedAutoScalingDownscalingOutput() MysqlLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToMysqlLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i MysqlLayerLoadBasedAutoScalingDownscalingArgs) ToMysqlLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) MysqlLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *MysqlLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*MysqlLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type MysqlLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (MysqlLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) ToMysqlLayerLoadBasedAutoScalingDownscalingOutput() MysqlLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) ToMysqlLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) MysqlLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[MysqlLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[MysqlLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o MysqlLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingDownscaling](o, func(v MysqlLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type MysqlLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type MysqlLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (MysqlLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i MysqlLayerLoadBasedAutoScalingUpscalingArgs) ToMysqlLayerLoadBasedAutoScalingUpscalingOutput() MysqlLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToMysqlLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i MysqlLayerLoadBasedAutoScalingUpscalingArgs) ToMysqlLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) MysqlLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *MysqlLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*MysqlLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type MysqlLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (MysqlLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) ToMysqlLayerLoadBasedAutoScalingUpscalingOutput() MysqlLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) ToMysqlLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) MysqlLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[MysqlLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[MysqlLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o MysqlLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[MysqlLayerLoadBasedAutoScalingUpscaling](o, func(v MysqlLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type NodejsAppLayerCloudwatchConfiguration struct {
	Enabled    *bool                                            `pulumi:"enabled"`
	LogStreams []NodejsAppLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type NodejsAppLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                                 `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*NodejsAppLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (NodejsAppLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i NodejsAppLayerCloudwatchConfigurationArgs) ToNodejsAppLayerCloudwatchConfigurationOutput() NodejsAppLayerCloudwatchConfigurationOutput {
	return i.ToNodejsAppLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i NodejsAppLayerCloudwatchConfigurationArgs) ToNodejsAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) NodejsAppLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerCloudwatchConfigurationOutput)
}

func (i *NodejsAppLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*NodejsAppLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type NodejsAppLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o NodejsAppLayerCloudwatchConfigurationOutput) ToNodejsAppLayerCloudwatchConfigurationOutput() NodejsAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o NodejsAppLayerCloudwatchConfigurationOutput) ToNodejsAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) NodejsAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o NodejsAppLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[NodejsAppLayerCloudwatchConfiguration] {
	return pulumix.Output[NodejsAppLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o NodejsAppLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfiguration](o, func(v NodejsAppLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o NodejsAppLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[NodejsAppLayerCloudwatchConfigurationLogStream, NodejsAppLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[NodejsAppLayerCloudwatchConfiguration](o, func(v NodejsAppLayerCloudwatchConfiguration) []NodejsAppLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[NodejsAppLayerCloudwatchConfigurationLogStream, NodejsAppLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type NodejsAppLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type NodejsAppLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (NodejsAppLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i NodejsAppLayerCloudwatchConfigurationLogStreamArgs) ToNodejsAppLayerCloudwatchConfigurationLogStreamOutput() NodejsAppLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToNodejsAppLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i NodejsAppLayerCloudwatchConfigurationLogStreamArgs) ToNodejsAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) NodejsAppLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *NodejsAppLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*NodejsAppLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type NodejsAppLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) ToNodejsAppLayerCloudwatchConfigurationLogStreamOutput() NodejsAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) ToNodejsAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) NodejsAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[NodejsAppLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[NodejsAppLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o NodejsAppLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerCloudwatchConfigurationLogStream](o, func(v NodejsAppLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type NodejsAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type NodejsAppLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (NodejsAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolume)(nil)).Elem()
}

func (i NodejsAppLayerEbsVolumeArgs) ToNodejsAppLayerEbsVolumeOutput() NodejsAppLayerEbsVolumeOutput {
	return i.ToNodejsAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i NodejsAppLayerEbsVolumeArgs) ToNodejsAppLayerEbsVolumeOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerEbsVolumeOutput)
}

func (i *NodejsAppLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*NodejsAppLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type NodejsAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerEbsVolume)(nil)).Elem()
}

func (o NodejsAppLayerEbsVolumeOutput) ToNodejsAppLayerEbsVolumeOutput() NodejsAppLayerEbsVolumeOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeOutput) ToNodejsAppLayerEbsVolumeOutputWithContext(ctx context.Context) NodejsAppLayerEbsVolumeOutput {
	return o
}

func (o NodejsAppLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[NodejsAppLayerEbsVolume] {
	return pulumix.Output[NodejsAppLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o NodejsAppLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o NodejsAppLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o NodejsAppLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o NodejsAppLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o NodejsAppLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o NodejsAppLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o NodejsAppLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[NodejsAppLayerEbsVolume](o, func(v NodejsAppLayerEbsVolume) *string { return v.Type })
}

type NodejsAppLayerLoadBasedAutoScaling struct {
	Downscaling *NodejsAppLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                          `pulumi:"enable"`
	Upscaling   *NodejsAppLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type NodejsAppLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*NodejsAppLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                              `pulumi:"enable"`
	Upscaling   pulumix.Input[*NodejsAppLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (NodejsAppLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i NodejsAppLayerLoadBasedAutoScalingArgs) ToNodejsAppLayerLoadBasedAutoScalingOutput() NodejsAppLayerLoadBasedAutoScalingOutput {
	return i.ToNodejsAppLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i NodejsAppLayerLoadBasedAutoScalingArgs) ToNodejsAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) NodejsAppLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerLoadBasedAutoScalingOutput)
}

func (i *NodejsAppLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*NodejsAppLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type NodejsAppLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o NodejsAppLayerLoadBasedAutoScalingOutput) ToNodejsAppLayerLoadBasedAutoScalingOutput() NodejsAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o NodejsAppLayerLoadBasedAutoScalingOutput) ToNodejsAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) NodejsAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o NodejsAppLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[NodejsAppLayerLoadBasedAutoScaling] {
	return pulumix.Output[NodejsAppLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o NodejsAppLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[NodejsAppLayerLoadBasedAutoScalingDownscaling, NodejsAppLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[NodejsAppLayerLoadBasedAutoScaling](o, func(v NodejsAppLayerLoadBasedAutoScaling) *NodejsAppLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[NodejsAppLayerLoadBasedAutoScalingDownscaling, NodejsAppLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o NodejsAppLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScaling](o, func(v NodejsAppLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o NodejsAppLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[NodejsAppLayerLoadBasedAutoScalingUpscaling, NodejsAppLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[NodejsAppLayerLoadBasedAutoScaling](o, func(v NodejsAppLayerLoadBasedAutoScaling) *NodejsAppLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[NodejsAppLayerLoadBasedAutoScalingUpscaling, NodejsAppLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type NodejsAppLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type NodejsAppLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (NodejsAppLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i NodejsAppLayerLoadBasedAutoScalingDownscalingArgs) ToNodejsAppLayerLoadBasedAutoScalingDownscalingOutput() NodejsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToNodejsAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i NodejsAppLayerLoadBasedAutoScalingDownscalingArgs) ToNodejsAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) NodejsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *NodejsAppLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*NodejsAppLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type NodejsAppLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) ToNodejsAppLayerLoadBasedAutoScalingDownscalingOutput() NodejsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) ToNodejsAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) NodejsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[NodejsAppLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[NodejsAppLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o NodejsAppLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingDownscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type NodejsAppLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type NodejsAppLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (NodejsAppLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i NodejsAppLayerLoadBasedAutoScalingUpscalingArgs) ToNodejsAppLayerLoadBasedAutoScalingUpscalingOutput() NodejsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToNodejsAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i NodejsAppLayerLoadBasedAutoScalingUpscalingArgs) ToNodejsAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) NodejsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodejsAppLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *NodejsAppLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*NodejsAppLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type NodejsAppLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodejsAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) ToNodejsAppLayerLoadBasedAutoScalingUpscalingOutput() NodejsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) ToNodejsAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) NodejsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[NodejsAppLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[NodejsAppLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o NodejsAppLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[NodejsAppLayerLoadBasedAutoScalingUpscaling](o, func(v NodejsAppLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type PhpAppLayerCloudwatchConfiguration struct {
	Enabled    *bool                                         `pulumi:"enabled"`
	LogStreams []PhpAppLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type PhpAppLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                              `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*PhpAppLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (PhpAppLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i PhpAppLayerCloudwatchConfigurationArgs) ToPhpAppLayerCloudwatchConfigurationOutput() PhpAppLayerCloudwatchConfigurationOutput {
	return i.ToPhpAppLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i PhpAppLayerCloudwatchConfigurationArgs) ToPhpAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) PhpAppLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerCloudwatchConfigurationOutput)
}

func (i *PhpAppLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*PhpAppLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type PhpAppLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (PhpAppLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o PhpAppLayerCloudwatchConfigurationOutput) ToPhpAppLayerCloudwatchConfigurationOutput() PhpAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o PhpAppLayerCloudwatchConfigurationOutput) ToPhpAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) PhpAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o PhpAppLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[PhpAppLayerCloudwatchConfiguration] {
	return pulumix.Output[PhpAppLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o PhpAppLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfiguration](o, func(v PhpAppLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o PhpAppLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[PhpAppLayerCloudwatchConfigurationLogStream, PhpAppLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[PhpAppLayerCloudwatchConfiguration](o, func(v PhpAppLayerCloudwatchConfiguration) []PhpAppLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[PhpAppLayerCloudwatchConfigurationLogStream, PhpAppLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type PhpAppLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type PhpAppLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (PhpAppLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i PhpAppLayerCloudwatchConfigurationLogStreamArgs) ToPhpAppLayerCloudwatchConfigurationLogStreamOutput() PhpAppLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToPhpAppLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i PhpAppLayerCloudwatchConfigurationLogStreamArgs) ToPhpAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) PhpAppLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *PhpAppLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*PhpAppLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type PhpAppLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (PhpAppLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) ToPhpAppLayerCloudwatchConfigurationLogStreamOutput() PhpAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) ToPhpAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) PhpAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[PhpAppLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[PhpAppLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o PhpAppLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerCloudwatchConfigurationLogStream](o, func(v PhpAppLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type PhpAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type PhpAppLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (PhpAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolume)(nil)).Elem()
}

func (i PhpAppLayerEbsVolumeArgs) ToPhpAppLayerEbsVolumeOutput() PhpAppLayerEbsVolumeOutput {
	return i.ToPhpAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i PhpAppLayerEbsVolumeArgs) ToPhpAppLayerEbsVolumeOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerEbsVolumeOutput)
}

func (i *PhpAppLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*PhpAppLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type PhpAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (PhpAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerEbsVolume)(nil)).Elem()
}

func (o PhpAppLayerEbsVolumeOutput) ToPhpAppLayerEbsVolumeOutput() PhpAppLayerEbsVolumeOutput {
	return o
}

func (o PhpAppLayerEbsVolumeOutput) ToPhpAppLayerEbsVolumeOutputWithContext(ctx context.Context) PhpAppLayerEbsVolumeOutput {
	return o
}

func (o PhpAppLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[PhpAppLayerEbsVolume] {
	return pulumix.Output[PhpAppLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o PhpAppLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o PhpAppLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o PhpAppLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o PhpAppLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o PhpAppLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o PhpAppLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o PhpAppLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[PhpAppLayerEbsVolume](o, func(v PhpAppLayerEbsVolume) *string { return v.Type })
}

type PhpAppLayerLoadBasedAutoScaling struct {
	Downscaling *PhpAppLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                       `pulumi:"enable"`
	Upscaling   *PhpAppLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type PhpAppLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*PhpAppLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                           `pulumi:"enable"`
	Upscaling   pulumix.Input[*PhpAppLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (PhpAppLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i PhpAppLayerLoadBasedAutoScalingArgs) ToPhpAppLayerLoadBasedAutoScalingOutput() PhpAppLayerLoadBasedAutoScalingOutput {
	return i.ToPhpAppLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i PhpAppLayerLoadBasedAutoScalingArgs) ToPhpAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) PhpAppLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerLoadBasedAutoScalingOutput)
}

func (i *PhpAppLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*PhpAppLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type PhpAppLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (PhpAppLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o PhpAppLayerLoadBasedAutoScalingOutput) ToPhpAppLayerLoadBasedAutoScalingOutput() PhpAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o PhpAppLayerLoadBasedAutoScalingOutput) ToPhpAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) PhpAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o PhpAppLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[PhpAppLayerLoadBasedAutoScaling] {
	return pulumix.Output[PhpAppLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o PhpAppLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[PhpAppLayerLoadBasedAutoScalingDownscaling, PhpAppLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[PhpAppLayerLoadBasedAutoScaling](o, func(v PhpAppLayerLoadBasedAutoScaling) *PhpAppLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[PhpAppLayerLoadBasedAutoScalingDownscaling, PhpAppLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o PhpAppLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScaling](o, func(v PhpAppLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o PhpAppLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[PhpAppLayerLoadBasedAutoScalingUpscaling, PhpAppLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[PhpAppLayerLoadBasedAutoScaling](o, func(v PhpAppLayerLoadBasedAutoScaling) *PhpAppLayerLoadBasedAutoScalingUpscaling { return v.Upscaling })
	return pulumix.GPtrOutput[PhpAppLayerLoadBasedAutoScalingUpscaling, PhpAppLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type PhpAppLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type PhpAppLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (PhpAppLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i PhpAppLayerLoadBasedAutoScalingDownscalingArgs) ToPhpAppLayerLoadBasedAutoScalingDownscalingOutput() PhpAppLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToPhpAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i PhpAppLayerLoadBasedAutoScalingDownscalingArgs) ToPhpAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) PhpAppLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *PhpAppLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*PhpAppLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type PhpAppLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (PhpAppLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) ToPhpAppLayerLoadBasedAutoScalingDownscalingOutput() PhpAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) ToPhpAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) PhpAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[PhpAppLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[PhpAppLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o PhpAppLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingDownscaling](o, func(v PhpAppLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type PhpAppLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type PhpAppLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (PhpAppLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i PhpAppLayerLoadBasedAutoScalingUpscalingArgs) ToPhpAppLayerLoadBasedAutoScalingUpscalingOutput() PhpAppLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToPhpAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i PhpAppLayerLoadBasedAutoScalingUpscalingArgs) ToPhpAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) PhpAppLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpAppLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *PhpAppLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*PhpAppLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type PhpAppLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (PhpAppLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) ToPhpAppLayerLoadBasedAutoScalingUpscalingOutput() PhpAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) ToPhpAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) PhpAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[PhpAppLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[PhpAppLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o PhpAppLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[PhpAppLayerLoadBasedAutoScalingUpscaling](o, func(v PhpAppLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type RailsAppLayerCloudwatchConfiguration struct {
	Enabled    *bool                                           `pulumi:"enabled"`
	LogStreams []RailsAppLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type RailsAppLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                                `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*RailsAppLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (RailsAppLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i RailsAppLayerCloudwatchConfigurationArgs) ToRailsAppLayerCloudwatchConfigurationOutput() RailsAppLayerCloudwatchConfigurationOutput {
	return i.ToRailsAppLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i RailsAppLayerCloudwatchConfigurationArgs) ToRailsAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) RailsAppLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerCloudwatchConfigurationOutput)
}

func (i *RailsAppLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RailsAppLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type RailsAppLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (RailsAppLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o RailsAppLayerCloudwatchConfigurationOutput) ToRailsAppLayerCloudwatchConfigurationOutput() RailsAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o RailsAppLayerCloudwatchConfigurationOutput) ToRailsAppLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) RailsAppLayerCloudwatchConfigurationOutput {
	return o
}

func (o RailsAppLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayerCloudwatchConfiguration] {
	return pulumix.Output[RailsAppLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o RailsAppLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfiguration](o, func(v RailsAppLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o RailsAppLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[RailsAppLayerCloudwatchConfigurationLogStream, RailsAppLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[RailsAppLayerCloudwatchConfiguration](o, func(v RailsAppLayerCloudwatchConfiguration) []RailsAppLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[RailsAppLayerCloudwatchConfigurationLogStream, RailsAppLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type RailsAppLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type RailsAppLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (RailsAppLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i RailsAppLayerCloudwatchConfigurationLogStreamArgs) ToRailsAppLayerCloudwatchConfigurationLogStreamOutput() RailsAppLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToRailsAppLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i RailsAppLayerCloudwatchConfigurationLogStreamArgs) ToRailsAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) RailsAppLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *RailsAppLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*RailsAppLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type RailsAppLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (RailsAppLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) ToRailsAppLayerCloudwatchConfigurationLogStreamOutput() RailsAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) ToRailsAppLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) RailsAppLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[RailsAppLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o RailsAppLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerCloudwatchConfigurationLogStream](o, func(v RailsAppLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type RailsAppLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type RailsAppLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (RailsAppLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolume)(nil)).Elem()
}

func (i RailsAppLayerEbsVolumeArgs) ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput {
	return i.ToRailsAppLayerEbsVolumeOutputWithContext(context.Background())
}

func (i RailsAppLayerEbsVolumeArgs) ToRailsAppLayerEbsVolumeOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerEbsVolumeOutput)
}

func (i *RailsAppLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*RailsAppLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type RailsAppLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (RailsAppLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerEbsVolume)(nil)).Elem()
}

func (o RailsAppLayerEbsVolumeOutput) ToRailsAppLayerEbsVolumeOutput() RailsAppLayerEbsVolumeOutput {
	return o
}

func (o RailsAppLayerEbsVolumeOutput) ToRailsAppLayerEbsVolumeOutputWithContext(ctx context.Context) RailsAppLayerEbsVolumeOutput {
	return o
}

func (o RailsAppLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayerEbsVolume] {
	return pulumix.Output[RailsAppLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o RailsAppLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o RailsAppLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o RailsAppLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o RailsAppLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o RailsAppLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o RailsAppLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o RailsAppLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[RailsAppLayerEbsVolume](o, func(v RailsAppLayerEbsVolume) *string { return v.Type })
}

type RailsAppLayerLoadBasedAutoScaling struct {
	Downscaling *RailsAppLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                         `pulumi:"enable"`
	Upscaling   *RailsAppLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type RailsAppLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*RailsAppLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                             `pulumi:"enable"`
	Upscaling   pulumix.Input[*RailsAppLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (RailsAppLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i RailsAppLayerLoadBasedAutoScalingArgs) ToRailsAppLayerLoadBasedAutoScalingOutput() RailsAppLayerLoadBasedAutoScalingOutput {
	return i.ToRailsAppLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i RailsAppLayerLoadBasedAutoScalingArgs) ToRailsAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) RailsAppLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerLoadBasedAutoScalingOutput)
}

func (i *RailsAppLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*RailsAppLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type RailsAppLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (RailsAppLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o RailsAppLayerLoadBasedAutoScalingOutput) ToRailsAppLayerLoadBasedAutoScalingOutput() RailsAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o RailsAppLayerLoadBasedAutoScalingOutput) ToRailsAppLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) RailsAppLayerLoadBasedAutoScalingOutput {
	return o
}

func (o RailsAppLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayerLoadBasedAutoScaling] {
	return pulumix.Output[RailsAppLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o RailsAppLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScalingDownscaling, RailsAppLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[RailsAppLayerLoadBasedAutoScaling](o, func(v RailsAppLayerLoadBasedAutoScaling) *RailsAppLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScalingDownscaling, RailsAppLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o RailsAppLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScaling](o, func(v RailsAppLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o RailsAppLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScalingUpscaling, RailsAppLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[RailsAppLayerLoadBasedAutoScaling](o, func(v RailsAppLayerLoadBasedAutoScaling) *RailsAppLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[RailsAppLayerLoadBasedAutoScalingUpscaling, RailsAppLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type RailsAppLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type RailsAppLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (RailsAppLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i RailsAppLayerLoadBasedAutoScalingDownscalingArgs) ToRailsAppLayerLoadBasedAutoScalingDownscalingOutput() RailsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToRailsAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i RailsAppLayerLoadBasedAutoScalingDownscalingArgs) ToRailsAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) RailsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *RailsAppLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*RailsAppLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type RailsAppLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (RailsAppLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) ToRailsAppLayerLoadBasedAutoScalingDownscalingOutput() RailsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) ToRailsAppLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) RailsAppLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[RailsAppLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o RailsAppLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingDownscaling](o, func(v RailsAppLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type RailsAppLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type RailsAppLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (RailsAppLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i RailsAppLayerLoadBasedAutoScalingUpscalingArgs) ToRailsAppLayerLoadBasedAutoScalingUpscalingOutput() RailsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToRailsAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i RailsAppLayerLoadBasedAutoScalingUpscalingArgs) ToRailsAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) RailsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RailsAppLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *RailsAppLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*RailsAppLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type RailsAppLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (RailsAppLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RailsAppLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) ToRailsAppLayerLoadBasedAutoScalingUpscalingOutput() RailsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) ToRailsAppLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) RailsAppLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[RailsAppLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[RailsAppLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o RailsAppLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[RailsAppLayerLoadBasedAutoScalingUpscaling](o, func(v RailsAppLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

type StackCustomCookbooksSource struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password *string `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision *string `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey *string `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type string `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url string `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username *string `pulumi:"username"`
}

type StackCustomCookbooksSourceArgs struct {
	// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
	Password pulumix.Input[*string] `pulumi:"password"`
	// For sources that are version-aware, the revision to use.
	Revision pulumix.Input[*string] `pulumi:"revision"`
	// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
	SshKey pulumix.Input[*string] `pulumi:"sshKey"`
	// The type of source to use. For example, "archive".
	Type pulumix.Input[string] `pulumi:"type"`
	// The URL where the cookbooks resource can be found.
	Url pulumix.Input[string] `pulumi:"url"`
	// Username to use when authenticating to the source.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (StackCustomCookbooksSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSource)(nil)).Elem()
}

func (i StackCustomCookbooksSourceArgs) ToStackCustomCookbooksSourceOutput() StackCustomCookbooksSourceOutput {
	return i.ToStackCustomCookbooksSourceOutputWithContext(context.Background())
}

func (i StackCustomCookbooksSourceArgs) ToStackCustomCookbooksSourceOutputWithContext(ctx context.Context) StackCustomCookbooksSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackCustomCookbooksSourceOutput)
}

func (i *StackCustomCookbooksSourceArgs) ToOutput(ctx context.Context) pulumix.Output[*StackCustomCookbooksSourceArgs] {
	return pulumix.Val(i)
}

type StackCustomCookbooksSourceOutput struct{ *pulumi.OutputState }

func (StackCustomCookbooksSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackCustomCookbooksSource)(nil)).Elem()
}

func (o StackCustomCookbooksSourceOutput) ToStackCustomCookbooksSourceOutput() StackCustomCookbooksSourceOutput {
	return o
}

func (o StackCustomCookbooksSourceOutput) ToStackCustomCookbooksSourceOutputWithContext(ctx context.Context) StackCustomCookbooksSourceOutput {
	return o
}

func (o StackCustomCookbooksSourceOutput) ToOutput(ctx context.Context) pulumix.Output[StackCustomCookbooksSource] {
	return pulumix.Output[StackCustomCookbooksSource]{
		OutputState: o.OutputState,
	}
}

// Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceOutput) Password() pulumix.Output[*string] {
	return pulumix.Apply[StackCustomCookbooksSource](o, func(v StackCustomCookbooksSource) *string { return v.Password })
}

// For sources that are version-aware, the revision to use.
func (o StackCustomCookbooksSourceOutput) Revision() pulumix.Output[*string] {
	return pulumix.Apply[StackCustomCookbooksSource](o, func(v StackCustomCookbooksSource) *string { return v.Revision })
}

// SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
func (o StackCustomCookbooksSourceOutput) SshKey() pulumix.Output[*string] {
	return pulumix.Apply[StackCustomCookbooksSource](o, func(v StackCustomCookbooksSource) *string { return v.SshKey })
}

// The type of source to use. For example, "archive".
func (o StackCustomCookbooksSourceOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[StackCustomCookbooksSource](o, func(v StackCustomCookbooksSource) string { return v.Type })
}

// The URL where the cookbooks resource can be found.
func (o StackCustomCookbooksSourceOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[StackCustomCookbooksSource](o, func(v StackCustomCookbooksSource) string { return v.Url })
}

// Username to use when authenticating to the source.
func (o StackCustomCookbooksSourceOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[StackCustomCookbooksSource](o, func(v StackCustomCookbooksSource) *string { return v.Username })
}

type StaticWebLayerCloudwatchConfiguration struct {
	Enabled    *bool                                            `pulumi:"enabled"`
	LogStreams []StaticWebLayerCloudwatchConfigurationLogStream `pulumi:"logStreams"`
}

type StaticWebLayerCloudwatchConfigurationArgs struct {
	Enabled    pulumix.Input[*bool]                                                 `pulumi:"enabled"`
	LogStreams pulumix.Input[[]*StaticWebLayerCloudwatchConfigurationLogStreamArgs] `pulumi:"logStreams"`
}

func (StaticWebLayerCloudwatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerCloudwatchConfiguration)(nil)).Elem()
}

func (i StaticWebLayerCloudwatchConfigurationArgs) ToStaticWebLayerCloudwatchConfigurationOutput() StaticWebLayerCloudwatchConfigurationOutput {
	return i.ToStaticWebLayerCloudwatchConfigurationOutputWithContext(context.Background())
}

func (i StaticWebLayerCloudwatchConfigurationArgs) ToStaticWebLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) StaticWebLayerCloudwatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerCloudwatchConfigurationOutput)
}

func (i *StaticWebLayerCloudwatchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*StaticWebLayerCloudwatchConfigurationArgs] {
	return pulumix.Val(i)
}

type StaticWebLayerCloudwatchConfigurationOutput struct{ *pulumi.OutputState }

func (StaticWebLayerCloudwatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerCloudwatchConfiguration)(nil)).Elem()
}

func (o StaticWebLayerCloudwatchConfigurationOutput) ToStaticWebLayerCloudwatchConfigurationOutput() StaticWebLayerCloudwatchConfigurationOutput {
	return o
}

func (o StaticWebLayerCloudwatchConfigurationOutput) ToStaticWebLayerCloudwatchConfigurationOutputWithContext(ctx context.Context) StaticWebLayerCloudwatchConfigurationOutput {
	return o
}

func (o StaticWebLayerCloudwatchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayerCloudwatchConfiguration] {
	return pulumix.Output[StaticWebLayerCloudwatchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o StaticWebLayerCloudwatchConfigurationOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfiguration](o, func(v StaticWebLayerCloudwatchConfiguration) *bool { return v.Enabled })
}

func (o StaticWebLayerCloudwatchConfigurationOutput) LogStreams() pulumix.GArrayOutput[StaticWebLayerCloudwatchConfigurationLogStream, StaticWebLayerCloudwatchConfigurationLogStreamOutput] {
	value := pulumix.Apply[StaticWebLayerCloudwatchConfiguration](o, func(v StaticWebLayerCloudwatchConfiguration) []StaticWebLayerCloudwatchConfigurationLogStream {
		return v.LogStreams
	})
	return pulumix.GArrayOutput[StaticWebLayerCloudwatchConfigurationLogStream, StaticWebLayerCloudwatchConfigurationLogStreamOutput]{OutputState: value.OutputState}
}

type StaticWebLayerCloudwatchConfigurationLogStream struct {
	BatchCount            *int    `pulumi:"batchCount"`
	BatchSize             *int    `pulumi:"batchSize"`
	BufferDuration        *int    `pulumi:"bufferDuration"`
	DatetimeFormat        *string `pulumi:"datetimeFormat"`
	Encoding              *string `pulumi:"encoding"`
	File                  string  `pulumi:"file"`
	FileFingerprintLines  *string `pulumi:"fileFingerprintLines"`
	InitialPosition       *string `pulumi:"initialPosition"`
	LogGroupName          string  `pulumi:"logGroupName"`
	MultilineStartPattern *string `pulumi:"multilineStartPattern"`
	TimeZone              *string `pulumi:"timeZone"`
}

type StaticWebLayerCloudwatchConfigurationLogStreamArgs struct {
	BatchCount            pulumix.Input[*int]    `pulumi:"batchCount"`
	BatchSize             pulumix.Input[*int]    `pulumi:"batchSize"`
	BufferDuration        pulumix.Input[*int]    `pulumi:"bufferDuration"`
	DatetimeFormat        pulumix.Input[*string] `pulumi:"datetimeFormat"`
	Encoding              pulumix.Input[*string] `pulumi:"encoding"`
	File                  pulumix.Input[string]  `pulumi:"file"`
	FileFingerprintLines  pulumix.Input[*string] `pulumi:"fileFingerprintLines"`
	InitialPosition       pulumix.Input[*string] `pulumi:"initialPosition"`
	LogGroupName          pulumix.Input[string]  `pulumi:"logGroupName"`
	MultilineStartPattern pulumix.Input[*string] `pulumi:"multilineStartPattern"`
	TimeZone              pulumix.Input[*string] `pulumi:"timeZone"`
}

func (StaticWebLayerCloudwatchConfigurationLogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (i StaticWebLayerCloudwatchConfigurationLogStreamArgs) ToStaticWebLayerCloudwatchConfigurationLogStreamOutput() StaticWebLayerCloudwatchConfigurationLogStreamOutput {
	return i.ToStaticWebLayerCloudwatchConfigurationLogStreamOutputWithContext(context.Background())
}

func (i StaticWebLayerCloudwatchConfigurationLogStreamArgs) ToStaticWebLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) StaticWebLayerCloudwatchConfigurationLogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerCloudwatchConfigurationLogStreamOutput)
}

func (i *StaticWebLayerCloudwatchConfigurationLogStreamArgs) ToOutput(ctx context.Context) pulumix.Output[*StaticWebLayerCloudwatchConfigurationLogStreamArgs] {
	return pulumix.Val(i)
}

type StaticWebLayerCloudwatchConfigurationLogStreamOutput struct{ *pulumi.OutputState }

func (StaticWebLayerCloudwatchConfigurationLogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerCloudwatchConfigurationLogStream)(nil)).Elem()
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) ToStaticWebLayerCloudwatchConfigurationLogStreamOutput() StaticWebLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) ToStaticWebLayerCloudwatchConfigurationLogStreamOutputWithContext(ctx context.Context) StaticWebLayerCloudwatchConfigurationLogStreamOutput {
	return o
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayerCloudwatchConfigurationLogStream] {
	return pulumix.Output[StaticWebLayerCloudwatchConfigurationLogStream]{
		OutputState: o.OutputState,
	}
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) BatchCount() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *int { return v.BatchCount })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) BatchSize() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *int { return v.BatchSize })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) BufferDuration() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *int { return v.BufferDuration })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) DatetimeFormat() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *string { return v.DatetimeFormat })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) Encoding() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *string { return v.Encoding })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) File() pulumix.Output[string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) string { return v.File })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) FileFingerprintLines() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *string { return v.FileFingerprintLines })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) InitialPosition() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *string { return v.InitialPosition })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) LogGroupName() pulumix.Output[string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) string { return v.LogGroupName })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) MultilineStartPattern() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *string { return v.MultilineStartPattern })
}

func (o StaticWebLayerCloudwatchConfigurationLogStreamOutput) TimeZone() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerCloudwatchConfigurationLogStream](o, func(v StaticWebLayerCloudwatchConfigurationLogStream) *string { return v.TimeZone })
}

type StaticWebLayerEbsVolume struct {
	Encrypted *bool `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops *int `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint string `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks int `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel *string `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size int `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type *string `pulumi:"type"`
}

type StaticWebLayerEbsVolumeArgs struct {
	Encrypted pulumix.Input[*bool] `pulumi:"encrypted"`
	// For PIOPS volumes, the IOPS per disk.
	Iops pulumix.Input[*int] `pulumi:"iops"`
	// The path to mount the EBS volume on the layer's instances.
	MountPoint pulumix.Input[string] `pulumi:"mountPoint"`
	// The number of disks to use for the EBS volume.
	NumberOfDisks pulumix.Input[int] `pulumi:"numberOfDisks"`
	// The RAID level to use for the volume.
	RaidLevel pulumix.Input[*string] `pulumi:"raidLevel"`
	// The size of the volume in gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
	Type pulumix.Input[*string] `pulumi:"type"`
}

func (StaticWebLayerEbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolume)(nil)).Elem()
}

func (i StaticWebLayerEbsVolumeArgs) ToStaticWebLayerEbsVolumeOutput() StaticWebLayerEbsVolumeOutput {
	return i.ToStaticWebLayerEbsVolumeOutputWithContext(context.Background())
}

func (i StaticWebLayerEbsVolumeArgs) ToStaticWebLayerEbsVolumeOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerEbsVolumeOutput)
}

func (i *StaticWebLayerEbsVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[*StaticWebLayerEbsVolumeArgs] {
	return pulumix.Val(i)
}

type StaticWebLayerEbsVolumeOutput struct{ *pulumi.OutputState }

func (StaticWebLayerEbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerEbsVolume)(nil)).Elem()
}

func (o StaticWebLayerEbsVolumeOutput) ToStaticWebLayerEbsVolumeOutput() StaticWebLayerEbsVolumeOutput {
	return o
}

func (o StaticWebLayerEbsVolumeOutput) ToStaticWebLayerEbsVolumeOutputWithContext(ctx context.Context) StaticWebLayerEbsVolumeOutput {
	return o
}

func (o StaticWebLayerEbsVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayerEbsVolume] {
	return pulumix.Output[StaticWebLayerEbsVolume]{
		OutputState: o.OutputState,
	}
}

func (o StaticWebLayerEbsVolumeOutput) Encrypted() pulumix.Output[*bool] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) *bool { return v.Encrypted })
}

// For PIOPS volumes, the IOPS per disk.
func (o StaticWebLayerEbsVolumeOutput) Iops() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) *int { return v.Iops })
}

// The path to mount the EBS volume on the layer's instances.
func (o StaticWebLayerEbsVolumeOutput) MountPoint() pulumix.Output[string] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) string { return v.MountPoint })
}

// The number of disks to use for the EBS volume.
func (o StaticWebLayerEbsVolumeOutput) NumberOfDisks() pulumix.Output[int] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) int { return v.NumberOfDisks })
}

// The RAID level to use for the volume.
func (o StaticWebLayerEbsVolumeOutput) RaidLevel() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) *string { return v.RaidLevel })
}

// The size of the volume in gigabytes.
func (o StaticWebLayerEbsVolumeOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) int { return v.Size })
}

// The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
func (o StaticWebLayerEbsVolumeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[StaticWebLayerEbsVolume](o, func(v StaticWebLayerEbsVolume) *string { return v.Type })
}

type StaticWebLayerLoadBasedAutoScaling struct {
	Downscaling *StaticWebLayerLoadBasedAutoScalingDownscaling `pulumi:"downscaling"`
	Enable      *bool                                          `pulumi:"enable"`
	Upscaling   *StaticWebLayerLoadBasedAutoScalingUpscaling   `pulumi:"upscaling"`
}

type StaticWebLayerLoadBasedAutoScalingArgs struct {
	Downscaling pulumix.Input[*StaticWebLayerLoadBasedAutoScalingDownscalingArgs] `pulumi:"downscaling"`
	Enable      pulumix.Input[*bool]                                              `pulumi:"enable"`
	Upscaling   pulumix.Input[*StaticWebLayerLoadBasedAutoScalingUpscalingArgs]   `pulumi:"upscaling"`
}

func (StaticWebLayerLoadBasedAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (i StaticWebLayerLoadBasedAutoScalingArgs) ToStaticWebLayerLoadBasedAutoScalingOutput() StaticWebLayerLoadBasedAutoScalingOutput {
	return i.ToStaticWebLayerLoadBasedAutoScalingOutputWithContext(context.Background())
}

func (i StaticWebLayerLoadBasedAutoScalingArgs) ToStaticWebLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) StaticWebLayerLoadBasedAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerLoadBasedAutoScalingOutput)
}

func (i *StaticWebLayerLoadBasedAutoScalingArgs) ToOutput(ctx context.Context) pulumix.Output[*StaticWebLayerLoadBasedAutoScalingArgs] {
	return pulumix.Val(i)
}

type StaticWebLayerLoadBasedAutoScalingOutput struct{ *pulumi.OutputState }

func (StaticWebLayerLoadBasedAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerLoadBasedAutoScaling)(nil)).Elem()
}

func (o StaticWebLayerLoadBasedAutoScalingOutput) ToStaticWebLayerLoadBasedAutoScalingOutput() StaticWebLayerLoadBasedAutoScalingOutput {
	return o
}

func (o StaticWebLayerLoadBasedAutoScalingOutput) ToStaticWebLayerLoadBasedAutoScalingOutputWithContext(ctx context.Context) StaticWebLayerLoadBasedAutoScalingOutput {
	return o
}

func (o StaticWebLayerLoadBasedAutoScalingOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayerLoadBasedAutoScaling] {
	return pulumix.Output[StaticWebLayerLoadBasedAutoScaling]{
		OutputState: o.OutputState,
	}
}

func (o StaticWebLayerLoadBasedAutoScalingOutput) Downscaling() pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScalingDownscaling, StaticWebLayerLoadBasedAutoScalingDownscalingOutput] {
	value := pulumix.Apply[StaticWebLayerLoadBasedAutoScaling](o, func(v StaticWebLayerLoadBasedAutoScaling) *StaticWebLayerLoadBasedAutoScalingDownscaling {
		return v.Downscaling
	})
	return pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScalingDownscaling, StaticWebLayerLoadBasedAutoScalingDownscalingOutput]{OutputState: value.OutputState}
}

func (o StaticWebLayerLoadBasedAutoScalingOutput) Enable() pulumix.Output[*bool] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScaling](o, func(v StaticWebLayerLoadBasedAutoScaling) *bool { return v.Enable })
}

func (o StaticWebLayerLoadBasedAutoScalingOutput) Upscaling() pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScalingUpscaling, StaticWebLayerLoadBasedAutoScalingUpscalingOutput] {
	value := pulumix.Apply[StaticWebLayerLoadBasedAutoScaling](o, func(v StaticWebLayerLoadBasedAutoScaling) *StaticWebLayerLoadBasedAutoScalingUpscaling {
		return v.Upscaling
	})
	return pulumix.GPtrOutput[StaticWebLayerLoadBasedAutoScalingUpscaling, StaticWebLayerLoadBasedAutoScalingUpscalingOutput]{OutputState: value.OutputState}
}

type StaticWebLayerLoadBasedAutoScalingDownscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type StaticWebLayerLoadBasedAutoScalingDownscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (StaticWebLayerLoadBasedAutoScalingDownscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (i StaticWebLayerLoadBasedAutoScalingDownscalingArgs) ToStaticWebLayerLoadBasedAutoScalingDownscalingOutput() StaticWebLayerLoadBasedAutoScalingDownscalingOutput {
	return i.ToStaticWebLayerLoadBasedAutoScalingDownscalingOutputWithContext(context.Background())
}

func (i StaticWebLayerLoadBasedAutoScalingDownscalingArgs) ToStaticWebLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) StaticWebLayerLoadBasedAutoScalingDownscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerLoadBasedAutoScalingDownscalingOutput)
}

func (i *StaticWebLayerLoadBasedAutoScalingDownscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*StaticWebLayerLoadBasedAutoScalingDownscalingArgs] {
	return pulumix.Val(i)
}

type StaticWebLayerLoadBasedAutoScalingDownscalingOutput struct{ *pulumi.OutputState }

func (StaticWebLayerLoadBasedAutoScalingDownscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerLoadBasedAutoScalingDownscaling)(nil)).Elem()
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) ToStaticWebLayerLoadBasedAutoScalingDownscalingOutput() StaticWebLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) ToStaticWebLayerLoadBasedAutoScalingDownscalingOutputWithContext(ctx context.Context) StaticWebLayerLoadBasedAutoScalingDownscalingOutput {
	return o
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayerLoadBasedAutoScalingDownscaling] {
	return pulumix.Output[StaticWebLayerLoadBasedAutoScalingDownscaling]{
		OutputState: o.OutputState,
	}
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) *float64 { return v.CpuThreshold })
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) *int { return v.IgnoreMetricsTime })
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) *int { return v.InstanceCount })
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) *float64 { return v.LoadThreshold })
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) *float64 { return v.MemoryThreshold })
}

func (o StaticWebLayerLoadBasedAutoScalingDownscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingDownscaling](o, func(v StaticWebLayerLoadBasedAutoScalingDownscaling) *int { return v.ThresholdsWaitTime })
}

type StaticWebLayerLoadBasedAutoScalingUpscaling struct {
	Alarms             []string `pulumi:"alarms"`
	CpuThreshold       *float64 `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  *int     `pulumi:"ignoreMetricsTime"`
	InstanceCount      *int     `pulumi:"instanceCount"`
	LoadThreshold      *float64 `pulumi:"loadThreshold"`
	MemoryThreshold    *float64 `pulumi:"memoryThreshold"`
	ThresholdsWaitTime *int     `pulumi:"thresholdsWaitTime"`
}

type StaticWebLayerLoadBasedAutoScalingUpscalingArgs struct {
	Alarms             pulumix.Input[[]string] `pulumi:"alarms"`
	CpuThreshold       pulumix.Input[*float64] `pulumi:"cpuThreshold"`
	IgnoreMetricsTime  pulumix.Input[*int]     `pulumi:"ignoreMetricsTime"`
	InstanceCount      pulumix.Input[*int]     `pulumi:"instanceCount"`
	LoadThreshold      pulumix.Input[*float64] `pulumi:"loadThreshold"`
	MemoryThreshold    pulumix.Input[*float64] `pulumi:"memoryThreshold"`
	ThresholdsWaitTime pulumix.Input[*int]     `pulumi:"thresholdsWaitTime"`
}

func (StaticWebLayerLoadBasedAutoScalingUpscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (i StaticWebLayerLoadBasedAutoScalingUpscalingArgs) ToStaticWebLayerLoadBasedAutoScalingUpscalingOutput() StaticWebLayerLoadBasedAutoScalingUpscalingOutput {
	return i.ToStaticWebLayerLoadBasedAutoScalingUpscalingOutputWithContext(context.Background())
}

func (i StaticWebLayerLoadBasedAutoScalingUpscalingArgs) ToStaticWebLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) StaticWebLayerLoadBasedAutoScalingUpscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticWebLayerLoadBasedAutoScalingUpscalingOutput)
}

func (i *StaticWebLayerLoadBasedAutoScalingUpscalingArgs) ToOutput(ctx context.Context) pulumix.Output[*StaticWebLayerLoadBasedAutoScalingUpscalingArgs] {
	return pulumix.Val(i)
}

type StaticWebLayerLoadBasedAutoScalingUpscalingOutput struct{ *pulumi.OutputState }

func (StaticWebLayerLoadBasedAutoScalingUpscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticWebLayerLoadBasedAutoScalingUpscaling)(nil)).Elem()
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) ToStaticWebLayerLoadBasedAutoScalingUpscalingOutput() StaticWebLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) ToStaticWebLayerLoadBasedAutoScalingUpscalingOutputWithContext(ctx context.Context) StaticWebLayerLoadBasedAutoScalingUpscalingOutput {
	return o
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) ToOutput(ctx context.Context) pulumix.Output[StaticWebLayerLoadBasedAutoScalingUpscaling] {
	return pulumix.Output[StaticWebLayerLoadBasedAutoScalingUpscaling]{
		OutputState: o.OutputState,
	}
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) Alarms() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) []string { return v.Alarms })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) CpuThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) *float64 { return v.CpuThreshold })
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) IgnoreMetricsTime() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) *int { return v.IgnoreMetricsTime })
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) InstanceCount() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) *int { return v.InstanceCount })
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) LoadThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) *float64 { return v.LoadThreshold })
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) MemoryThreshold() pulumix.Output[*float64] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) *float64 { return v.MemoryThreshold })
}

func (o StaticWebLayerLoadBasedAutoScalingUpscalingOutput) ThresholdsWaitTime() pulumix.Output[*int] {
	return pulumix.Apply[StaticWebLayerLoadBasedAutoScalingUpscaling](o, func(v StaticWebLayerLoadBasedAutoScalingUpscaling) *int { return v.ThresholdsWaitTime })
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppSourceOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentOutput{})
	pulumi.RegisterOutputType(ApplicationSslConfigurationOutput{})
	pulumi.RegisterOutputType(CustomLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(CustomLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(CustomLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(CustomLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(CustomLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(CustomLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(EcsClusterLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(GangliaLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(GangliaLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(GangliaLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(GangliaLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(GangliaLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(GangliaLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(HaproxyLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(HaproxyLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(HaproxyLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(HaproxyLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(HaproxyLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(HaproxyLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(InstanceEbsBlockDeviceOutput{})
	pulumi.RegisterOutputType(InstanceEphemeralBlockDeviceOutput{})
	pulumi.RegisterOutputType(InstanceRootBlockDeviceOutput{})
	pulumi.RegisterOutputType(JavaAppLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(JavaAppLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(JavaAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(JavaAppLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(JavaAppLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(JavaAppLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(MemcachedLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(MemcachedLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(MemcachedLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(MemcachedLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(MemcachedLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(MemcachedLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(MysqlLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(MysqlLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(MysqlLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(MysqlLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(MysqlLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(MysqlLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(NodejsAppLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(PhpAppLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(PhpAppLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(PhpAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(PhpAppLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(PhpAppLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(PhpAppLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(RailsAppLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(RailsAppLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(RailsAppLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(RailsAppLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(RailsAppLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(RailsAppLayerLoadBasedAutoScalingUpscalingOutput{})
	pulumi.RegisterOutputType(StackCustomCookbooksSourceOutput{})
	pulumi.RegisterOutputType(StaticWebLayerCloudwatchConfigurationOutput{})
	pulumi.RegisterOutputType(StaticWebLayerCloudwatchConfigurationLogStreamOutput{})
	pulumi.RegisterOutputType(StaticWebLayerEbsVolumeOutput{})
	pulumi.RegisterOutputType(StaticWebLayerLoadBasedAutoScalingOutput{})
	pulumi.RegisterOutputType(StaticWebLayerLoadBasedAutoScalingDownscalingOutput{})
	pulumi.RegisterOutputType(StaticWebLayerLoadBasedAutoScalingUpscalingOutput{})
}
