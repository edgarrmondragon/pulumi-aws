// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS GuardDuty Finding Ids.
func GetFindingIds(ctx *pulumi.Context, args *GetFindingIdsArgs, opts ...pulumi.InvokeOption) (*GetFindingIdsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFindingIdsResult
	err := ctx.Invoke("aws:guardduty/getFindingIds:getFindingIds", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFindingIds.
type GetFindingIdsArgs struct {
	// ID of the GuardDuty detector.
	DetectorId string `pulumi:"detectorId"`
}

// A collection of values returned by getFindingIds.
type GetFindingIdsResult struct {
	DetectorId string `pulumi:"detectorId"`
	// A list of finding IDs for the specified detector.
	FindingIds []string `pulumi:"findingIds"`
	// Indicates whether findings are present for the specified detector.
	HasFindings bool   `pulumi:"hasFindings"`
	Id          string `pulumi:"id"`
}

func GetFindingIdsOutput(ctx *pulumi.Context, args GetFindingIdsOutputArgs, opts ...pulumi.InvokeOption) GetFindingIdsResultOutput {
	outputResult := pulumix.ApplyErr[*GetFindingIdsArgs](args.ToOutput(), func(plainArgs *GetFindingIdsArgs) (*GetFindingIdsResult, error) {
		return GetFindingIds(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetFindingIdsResultOutput, *GetFindingIdsResult](outputResult)
}

// A collection of arguments for invoking getFindingIds.
type GetFindingIdsOutputArgs struct {
	// ID of the GuardDuty detector.
	DetectorId pulumix.Input[string] `pulumi:"detectorId"`
}

func (args GetFindingIdsOutputArgs) ToOutput() pulumix.Output[*GetFindingIdsArgs] {
	allArgs := pulumix.All(
		args.DetectorId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetFindingIdsArgs {
		return &GetFindingIdsArgs{
			DetectorId: resolvedArgs[0].(string),
		}
	})
}

type GetFindingIdsResultOutput struct{ *pulumi.OutputState }

func (GetFindingIdsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFindingIdsResult)(nil)).Elem()
}

func (o GetFindingIdsResultOutput) ToOutput(context.Context) pulumix.Output[*GetFindingIdsResult] {
	return pulumix.Output[*GetFindingIdsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetFindingIdsResultOutput) DetectorId() pulumix.Output[string] {
	return pulumix.Apply[*GetFindingIdsResult](o, func(v *GetFindingIdsResult) string { return v.DetectorId })
}

func (o GetFindingIdsResultOutput) FindingIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetFindingIdsResult](o, func(v *GetFindingIdsResult) []string { return v.FindingIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetFindingIdsResultOutput) HasFindings() pulumix.Output[bool] {
	return pulumix.Apply[*GetFindingIdsResult](o, func(v *GetFindingIdsResult) bool { return v.HasFindings })
}

func (o GetFindingIdsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetFindingIdsResult](o, func(v *GetFindingIdsResult) string { return v.Id })
}
