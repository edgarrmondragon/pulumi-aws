// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS QuickSight IAM Policy Assignment.
type IamPolicyAssignment struct {
	pulumi.CustomResourceState

	// Assignment ID.
	AssignmentId pulumix.Output[string] `pulumi:"assignmentId"`
	// Name of the assignment.
	AssignmentName pulumix.Output[string] `pulumi:"assignmentName"`
	// Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
	//
	// The following arguments are optional:
	AssignmentStatus pulumix.Output[string] `pulumi:"assignmentStatus"`
	// AWS account ID.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
	Identities pulumix.GPtrOutput[IamPolicyAssignmentIdentities, IamPolicyAssignmentIdentitiesOutput] `pulumi:"identities"`
	// Namespace that contains the assignment. Defaults to `default`.
	Namespace pulumix.Output[string] `pulumi:"namespace"`
	// ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
	PolicyArn pulumix.Output[*string] `pulumi:"policyArn"`
}

// NewIamPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewIamPolicyAssignment(ctx *pulumi.Context,
	name string, args *IamPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*IamPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssignmentName == nil {
		return nil, errors.New("invalid value for required argument 'AssignmentName'")
	}
	if args.AssignmentStatus == nil {
		return nil, errors.New("invalid value for required argument 'AssignmentStatus'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamPolicyAssignment
	err := ctx.RegisterResource("aws:quicksight/iamPolicyAssignment:IamPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamPolicyAssignment gets an existing IamPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamPolicyAssignmentState, opts ...pulumi.ResourceOption) (*IamPolicyAssignment, error) {
	var resource IamPolicyAssignment
	err := ctx.ReadResource("aws:quicksight/iamPolicyAssignment:IamPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamPolicyAssignment resources.
type iamPolicyAssignmentState struct {
	// Assignment ID.
	AssignmentId *string `pulumi:"assignmentId"`
	// Name of the assignment.
	AssignmentName *string `pulumi:"assignmentName"`
	// Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
	//
	// The following arguments are optional:
	AssignmentStatus *string `pulumi:"assignmentStatus"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
	Identities *IamPolicyAssignmentIdentities `pulumi:"identities"`
	// Namespace that contains the assignment. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
	PolicyArn *string `pulumi:"policyArn"`
}

type IamPolicyAssignmentState struct {
	// Assignment ID.
	AssignmentId pulumix.Input[*string]
	// Name of the assignment.
	AssignmentName pulumix.Input[*string]
	// Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
	//
	// The following arguments are optional:
	AssignmentStatus pulumix.Input[*string]
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
	Identities pulumix.Input[*IamPolicyAssignmentIdentitiesArgs]
	// Namespace that contains the assignment. Defaults to `default`.
	Namespace pulumix.Input[*string]
	// ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
	PolicyArn pulumix.Input[*string]
}

func (IamPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyAssignmentState)(nil)).Elem()
}

type iamPolicyAssignmentArgs struct {
	// Name of the assignment.
	AssignmentName string `pulumi:"assignmentName"`
	// Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
	//
	// The following arguments are optional:
	AssignmentStatus string `pulumi:"assignmentStatus"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
	Identities *IamPolicyAssignmentIdentities `pulumi:"identities"`
	// Namespace that contains the assignment. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
	// ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
	PolicyArn *string `pulumi:"policyArn"`
}

// The set of arguments for constructing a IamPolicyAssignment resource.
type IamPolicyAssignmentArgs struct {
	// Name of the assignment.
	AssignmentName pulumix.Input[string]
	// Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
	//
	// The following arguments are optional:
	AssignmentStatus pulumix.Input[string]
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
	Identities pulumix.Input[*IamPolicyAssignmentIdentitiesArgs]
	// Namespace that contains the assignment. Defaults to `default`.
	Namespace pulumix.Input[*string]
	// ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
	PolicyArn pulumix.Input[*string]
}

func (IamPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyAssignmentArgs)(nil)).Elem()
}

type IamPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (IamPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAssignment)(nil)).Elem()
}

func (o IamPolicyAssignmentOutput) ToIamPolicyAssignmentOutput() IamPolicyAssignmentOutput {
	return o
}

func (o IamPolicyAssignmentOutput) ToIamPolicyAssignmentOutputWithContext(ctx context.Context) IamPolicyAssignmentOutput {
	return o
}

func (o IamPolicyAssignmentOutput) ToOutput(ctx context.Context) pulumix.Output[IamPolicyAssignment] {
	return pulumix.Output[IamPolicyAssignment]{
		OutputState: o.OutputState,
	}
}

// Assignment ID.
func (o IamPolicyAssignmentOutput) AssignmentId() pulumix.Output[string] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.Output[string] { return v.AssignmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the assignment.
func (o IamPolicyAssignmentOutput) AssignmentName() pulumix.Output[string] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.Output[string] { return v.AssignmentName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.
//
// The following arguments are optional:
func (o IamPolicyAssignmentOutput) AssignmentStatus() pulumix.Output[string] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.Output[string] { return v.AssignmentStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID.
func (o IamPolicyAssignmentOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon QuickSight users, groups, or both to assign the policy to. See `identities`.
func (o IamPolicyAssignmentOutput) Identities() pulumix.GPtrOutput[IamPolicyAssignmentIdentities, IamPolicyAssignmentIdentitiesOutput] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.GPtrOutput[IamPolicyAssignmentIdentities, IamPolicyAssignmentIdentitiesOutput] {
		return v.Identities
	})
	unwrapped := pulumix.Flatten[*IamPolicyAssignmentIdentities, pulumix.GPtrOutput[IamPolicyAssignmentIdentities, IamPolicyAssignmentIdentitiesOutput]](value)
	return pulumix.GPtrOutput[IamPolicyAssignmentIdentities, IamPolicyAssignmentIdentitiesOutput]{OutputState: unwrapped.OutputState}
}

// Namespace that contains the assignment. Defaults to `default`.
func (o IamPolicyAssignmentOutput) Namespace() pulumix.Output[string] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.Output[string] { return v.Namespace })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.
func (o IamPolicyAssignmentOutput) PolicyArn() pulumix.Output[*string] {
	value := pulumix.Apply[IamPolicyAssignment](o, func(v IamPolicyAssignment) pulumix.Output[*string] { return v.PolicyArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(IamPolicyAssignmentOutput{})
}
