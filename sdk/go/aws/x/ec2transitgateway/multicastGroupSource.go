// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Registers sources (network interfaces) with the transit gateway multicast group.
// A multicast source is a network interface attached to a supported instance that sends multicast traffic.
type MulticastGroupSource struct {
	pulumi.CustomResourceState

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumix.Output[string] `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Output[string] `pulumi:"transitGatewayMulticastDomainId"`
}

// NewMulticastGroupSource registers a new resource with the given unique name, arguments, and options.
func NewMulticastGroupSource(ctx *pulumi.Context,
	name string, args *MulticastGroupSourceArgs, opts ...pulumi.ResourceOption) (*MulticastGroupSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'GroupIpAddress'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.TransitGatewayMulticastDomainId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayMulticastDomainId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MulticastGroupSource
	err := ctx.RegisterResource("aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMulticastGroupSource gets an existing MulticastGroupSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMulticastGroupSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MulticastGroupSourceState, opts ...pulumi.ResourceOption) (*MulticastGroupSource, error) {
	var resource MulticastGroupSource
	err := ctx.ReadResource("aws:ec2transitgateway/multicastGroupSource:MulticastGroupSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MulticastGroupSource resources.
type multicastGroupSourceState struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress *string `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId *string `pulumi:"transitGatewayMulticastDomainId"`
}

type MulticastGroupSourceState struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumix.Input[*string]
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumix.Input[*string]
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Input[*string]
}

func (MulticastGroupSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastGroupSourceState)(nil)).Elem()
}

type multicastGroupSourceArgs struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress string `pulumi:"groupIpAddress"`
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId string `pulumi:"transitGatewayMulticastDomainId"`
}

// The set of arguments for constructing a MulticastGroupSource resource.
type MulticastGroupSourceArgs struct {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress pulumix.Input[string]
	// The group members' network interface ID to register with the transit gateway multicast group.
	NetworkInterfaceId pulumix.Input[string]
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId pulumix.Input[string]
}

func (MulticastGroupSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multicastGroupSourceArgs)(nil)).Elem()
}

type MulticastGroupSourceOutput struct{ *pulumi.OutputState }

func (MulticastGroupSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MulticastGroupSource)(nil)).Elem()
}

func (o MulticastGroupSourceOutput) ToMulticastGroupSourceOutput() MulticastGroupSourceOutput {
	return o
}

func (o MulticastGroupSourceOutput) ToMulticastGroupSourceOutputWithContext(ctx context.Context) MulticastGroupSourceOutput {
	return o
}

func (o MulticastGroupSourceOutput) ToOutput(ctx context.Context) pulumix.Output[MulticastGroupSource] {
	return pulumix.Output[MulticastGroupSource]{
		OutputState: o.OutputState,
	}
}

// The IP address assigned to the transit gateway multicast group.
func (o MulticastGroupSourceOutput) GroupIpAddress() pulumix.Output[string] {
	value := pulumix.Apply[MulticastGroupSource](o, func(v MulticastGroupSource) pulumix.Output[string] { return v.GroupIpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The group members' network interface ID to register with the transit gateway multicast group.
func (o MulticastGroupSourceOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastGroupSource](o, func(v MulticastGroupSource) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the transit gateway multicast domain.
func (o MulticastGroupSourceOutput) TransitGatewayMulticastDomainId() pulumix.Output[string] {
	value := pulumix.Apply[MulticastGroupSource](o, func(v MulticastGroupSource) pulumix.Output[string] { return v.TransitGatewayMulticastDomainId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MulticastGroupSourceOutput{})
}
