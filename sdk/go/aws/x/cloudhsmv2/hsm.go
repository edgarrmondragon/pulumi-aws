// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudhsmv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an HSM module in Amazon CloudHSM v2 cluster.
type Hsm struct {
	pulumi.CustomResourceState

	// The IDs of AZ in which HSM module will be located. Conflicts with `subnetId`.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumix.Output[string] `pulumi:"clusterId"`
	// The id of the ENI interface allocated for HSM module.
	HsmEniId pulumix.Output[string] `pulumi:"hsmEniId"`
	// The id of the HSM module.
	HsmId pulumix.Output[string] `pulumi:"hsmId"`
	// The state of the HSM module.
	HsmState pulumix.Output[string] `pulumi:"hsmState"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumix.Output[string] `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located. Conflicts with `availabilityZone`.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
}

// NewHsm registers a new resource with the given unique name, arguments, and options.
func NewHsm(ctx *pulumi.Context,
	name string, args *HsmArgs, opts ...pulumi.ResourceOption) (*Hsm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hsm
	err := ctx.RegisterResource("aws:cloudhsmv2/hsm:Hsm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsm gets an existing Hsm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmState, opts ...pulumi.ResourceOption) (*Hsm, error) {
	var resource Hsm
	err := ctx.ReadResource("aws:cloudhsmv2/hsm:Hsm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hsm resources.
type hsmState struct {
	// The IDs of AZ in which HSM module will be located. Conflicts with `subnetId`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId *string `pulumi:"clusterId"`
	// The id of the ENI interface allocated for HSM module.
	HsmEniId *string `pulumi:"hsmEniId"`
	// The id of the HSM module.
	HsmId *string `pulumi:"hsmId"`
	// The state of the HSM module.
	HsmState *string `pulumi:"hsmState"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress *string `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located. Conflicts with `availabilityZone`.
	SubnetId *string `pulumi:"subnetId"`
}

type HsmState struct {
	// The IDs of AZ in which HSM module will be located. Conflicts with `subnetId`.
	AvailabilityZone pulumix.Input[*string]
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumix.Input[*string]
	// The id of the ENI interface allocated for HSM module.
	HsmEniId pulumix.Input[*string]
	// The id of the HSM module.
	HsmId pulumix.Input[*string]
	// The state of the HSM module.
	HsmState pulumix.Input[*string]
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumix.Input[*string]
	// The ID of subnet in which HSM module will be located. Conflicts with `availabilityZone`.
	SubnetId pulumix.Input[*string]
}

func (HsmState) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmState)(nil)).Elem()
}

type hsmArgs struct {
	// The IDs of AZ in which HSM module will be located. Conflicts with `subnetId`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId string `pulumi:"clusterId"`
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress *string `pulumi:"ipAddress"`
	// The ID of subnet in which HSM module will be located. Conflicts with `availabilityZone`.
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Hsm resource.
type HsmArgs struct {
	// The IDs of AZ in which HSM module will be located. Conflicts with `subnetId`.
	AvailabilityZone pulumix.Input[*string]
	// The ID of Cloud HSM v2 cluster to which HSM will be added.
	ClusterId pulumix.Input[string]
	// The IP address of HSM module. Must be within the CIDR of selected subnet.
	IpAddress pulumix.Input[*string]
	// The ID of subnet in which HSM module will be located. Conflicts with `availabilityZone`.
	SubnetId pulumix.Input[*string]
}

func (HsmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmArgs)(nil)).Elem()
}

type HsmOutput struct{ *pulumi.OutputState }

func (HsmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hsm)(nil)).Elem()
}

func (o HsmOutput) ToHsmOutput() HsmOutput {
	return o
}

func (o HsmOutput) ToHsmOutputWithContext(ctx context.Context) HsmOutput {
	return o
}

func (o HsmOutput) ToOutput(ctx context.Context) pulumix.Output[Hsm] {
	return pulumix.Output[Hsm]{
		OutputState: o.OutputState,
	}
}

// The IDs of AZ in which HSM module will be located. Conflicts with `subnetId`.
func (o HsmOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of Cloud HSM v2 cluster to which HSM will be added.
func (o HsmOutput) ClusterId() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.ClusterId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The id of the ENI interface allocated for HSM module.
func (o HsmOutput) HsmEniId() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.HsmEniId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The id of the HSM module.
func (o HsmOutput) HsmId() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.HsmId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the HSM module.
func (o HsmOutput) HsmState() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.HsmState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP address of HSM module. Must be within the CIDR of selected subnet.
func (o HsmOutput) IpAddress() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.IpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of subnet in which HSM module will be located. Conflicts with `availabilityZone`.
func (o HsmOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[Hsm](o, func(v Hsm) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(HsmOutput{})
}
