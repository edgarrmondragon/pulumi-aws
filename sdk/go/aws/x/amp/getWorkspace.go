// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Amazon Managed Prometheus workspace data source.
func LookupWorkspace(ctx *pulumi.Context, args *LookupWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceResult
	err := ctx.Invoke("aws:amp/getWorkspace:getWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceArgs struct {
	// Tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Prometheus workspace ID.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getWorkspace.
type LookupWorkspaceResult struct {
	// Prometheus workspace alias.
	Alias string `pulumi:"alias"`
	// ARN of the Prometheus workspace.
	Arn string `pulumi:"arn"`
	// Creation date of the Prometheus workspace.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Endpoint of the Prometheus workspace.
	PrometheusEndpoint string `pulumi:"prometheusEndpoint"`
	// Status of the Prometheus workspace.
	Status string `pulumi:"status"`
	// Tags assigned to the resource.
	Tags        map[string]string `pulumi:"tags"`
	WorkspaceId string            `pulumi:"workspaceId"`
}

func LookupWorkspaceOutput(ctx *pulumi.Context, args LookupWorkspaceOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupWorkspaceArgs](args.ToOutput(), func(plainArgs *LookupWorkspaceArgs) (*LookupWorkspaceResult, error) {
		return LookupWorkspace(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupWorkspaceResultOutput, *LookupWorkspaceResult](outputResult)
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceOutputArgs struct {
	// Tags assigned to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Prometheus workspace ID.
	WorkspaceId pulumix.Input[string] `pulumi:"workspaceId"`
}

func (args LookupWorkspaceOutputArgs) ToOutput() pulumix.Output[*LookupWorkspaceArgs] {
	allArgs := pulumix.All(
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.WorkspaceId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupWorkspaceArgs {
		return &LookupWorkspaceArgs{
			Tags:        resolvedArgs[0].(map[string]string),
			WorkspaceId: resolvedArgs[1].(string),
		}
	})
}

type LookupWorkspaceResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceResult)(nil)).Elem()
}

func (o LookupWorkspaceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupWorkspaceResult] {
	return pulumix.Output[*LookupWorkspaceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.Alias })
}

func (o LookupWorkspaceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.Arn })
}

func (o LookupWorkspaceResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.CreatedDate })
}

func (o LookupWorkspaceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.Id })
}

func (o LookupWorkspaceResultOutput) PrometheusEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.PrometheusEndpoint })
}

func (o LookupWorkspaceResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.Status })
}

func (o LookupWorkspaceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) WorkspaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.WorkspaceId })
}
