// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM).
type HsmConfiguration struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A text description of the HSM configuration to be created.
	Description pulumix.Output[string] `pulumi:"description"`
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier pulumix.Output[string] `pulumi:"hsmConfigurationIdentifier"`
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress pulumix.Output[string] `pulumi:"hsmIpAddress"`
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName pulumix.Output[string] `pulumi:"hsmPartitionName"`
	// The password required to access the HSM partition.
	HsmPartitionPassword pulumix.Output[string] `pulumi:"hsmPartitionPassword"`
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate pulumix.Output[string] `pulumi:"hsmServerPublicCertificate"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewHsmConfiguration registers a new resource with the given unique name, arguments, and options.
func NewHsmConfiguration(ctx *pulumi.Context,
	name string, args *HsmConfigurationArgs, opts ...pulumi.ResourceOption) (*HsmConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.HsmConfigurationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'HsmConfigurationIdentifier'")
	}
	if args.HsmIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'HsmIpAddress'")
	}
	if args.HsmPartitionName == nil {
		return nil, errors.New("invalid value for required argument 'HsmPartitionName'")
	}
	if args.HsmPartitionPassword == nil {
		return nil, errors.New("invalid value for required argument 'HsmPartitionPassword'")
	}
	if args.HsmServerPublicCertificate == nil {
		return nil, errors.New("invalid value for required argument 'HsmServerPublicCertificate'")
	}
	if args.HsmPartitionPassword != nil {
		untypedSecretValue := pulumi.ToSecret(args.HsmPartitionPassword.ToOutput(ctx.Context()).Untyped())
		args.HsmPartitionPassword = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"hsmPartitionPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HsmConfiguration
	err := ctx.RegisterResource("aws:redshift/hsmConfiguration:HsmConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHsmConfiguration gets an existing HsmConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHsmConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HsmConfigurationState, opts ...pulumi.ResourceOption) (*HsmConfiguration, error) {
	var resource HsmConfiguration
	err := ctx.ReadResource("aws:redshift/hsmConfiguration:HsmConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HsmConfiguration resources.
type hsmConfigurationState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn *string `pulumi:"arn"`
	// A text description of the HSM configuration to be created.
	Description *string `pulumi:"description"`
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier *string `pulumi:"hsmConfigurationIdentifier"`
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress *string `pulumi:"hsmIpAddress"`
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName *string `pulumi:"hsmPartitionName"`
	// The password required to access the HSM partition.
	HsmPartitionPassword *string `pulumi:"hsmPartitionPassword"`
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate *string `pulumi:"hsmServerPublicCertificate"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type HsmConfigurationState struct {
	// Amazon Resource Name (ARN) of the Hsm Client Certificate.
	Arn pulumix.Input[*string]
	// A text description of the HSM configuration to be created.
	Description pulumix.Input[*string]
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier pulumix.Input[*string]
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress pulumix.Input[*string]
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName pulumix.Input[*string]
	// The password required to access the HSM partition.
	HsmPartitionPassword pulumix.Input[*string]
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (HsmConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmConfigurationState)(nil)).Elem()
}

type hsmConfigurationArgs struct {
	// A text description of the HSM configuration to be created.
	Description string `pulumi:"description"`
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier string `pulumi:"hsmConfigurationIdentifier"`
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress string `pulumi:"hsmIpAddress"`
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName string `pulumi:"hsmPartitionName"`
	// The password required to access the HSM partition.
	HsmPartitionPassword string `pulumi:"hsmPartitionPassword"`
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate string `pulumi:"hsmServerPublicCertificate"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HsmConfiguration resource.
type HsmConfigurationArgs struct {
	// A text description of the HSM configuration to be created.
	Description pulumix.Input[string]
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier pulumix.Input[string]
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress pulumix.Input[string]
	// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
	HsmPartitionName pulumix.Input[string]
	// The password required to access the HSM partition.
	HsmPartitionPassword pulumix.Input[string]
	// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
	HsmServerPublicCertificate pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (HsmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hsmConfigurationArgs)(nil)).Elem()
}

type HsmConfigurationOutput struct{ *pulumi.OutputState }

func (HsmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HsmConfiguration)(nil)).Elem()
}

func (o HsmConfigurationOutput) ToHsmConfigurationOutput() HsmConfigurationOutput {
	return o
}

func (o HsmConfigurationOutput) ToHsmConfigurationOutputWithContext(ctx context.Context) HsmConfigurationOutput {
	return o
}

func (o HsmConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[HsmConfiguration] {
	return pulumix.Output[HsmConfiguration]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Hsm Client Certificate.
func (o HsmConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A text description of the HSM configuration to be created.
func (o HsmConfigurationOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier to be assigned to the new Amazon Redshift HSM configuration.
func (o HsmConfigurationOutput) HsmConfigurationIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.HsmConfigurationIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IP address that the Amazon Redshift cluster must use to access the HSM.
func (o HsmConfigurationOutput) HsmIpAddress() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.HsmIpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
func (o HsmConfigurationOutput) HsmPartitionName() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.HsmPartitionName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The password required to access the HSM partition.
func (o HsmConfigurationOutput) HsmPartitionPassword() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.HsmPartitionPassword })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
func (o HsmConfigurationOutput) HsmServerPublicCertificate() pulumix.Output[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.Output[string] { return v.HsmServerPublicCertificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o HsmConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o HsmConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[HsmConfiguration](o, func(v HsmConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(HsmConfigurationOutput{})
}
