// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an S3 Access Point.
//
// > **NOTE on Access Points and Access Point Policies:** This provider provides both a standalone Access Point Policy resource and an Access Point resource with a resource policy defined in-line. You cannot use an Access Point with in-line resource policy in conjunction with an Access Point Policy resource. Doing so will cause a conflict of policies and will overwrite the access point's resource policy.
//
// > Advanced usage: To use a custom API endpoint for this resource, use the `s3control` endpoint provider configuration), not the `s3` endpoint provider configuration.
type AccessPoint struct {
	pulumi.CustomResourceState

	// AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Output[string] `pulumi:"accountId"`
	// Alias of the S3 Access Point.
	Alias pulumix.Output[string] `pulumi:"alias"`
	// ARN of the S3 Access Point.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Name of an AWS Partition S3 Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// AWS account ID associated with the S3 bucket associated with this access point.
	BucketAccountId pulumix.Output[string] `pulumi:"bucketAccountId"`
	// DNS domain name of the S3 Access Point in the format _`name`_-_`accountId`_.s3-accesspoint._region_.amazonaws.com.
	// Note: S3 access points only support secure access by HTTPS. HTTP isn't supported.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// VPC endpoints for the S3 Access Point.
	Endpoints pulumix.MapOutput[string] `pulumi:"endpoints"`
	// Indicates whether this access point currently has a policy that allows public access.
	HasPublicAccessPolicy pulumix.Output[bool] `pulumi:"hasPublicAccessPolicy"`
	// Name you want to assign to this access point.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// Indicates whether this access point allows access from the public Internet. Values are `VPC` (the access point doesn't allow access from the public Internet) and `Internet` (the access point allows access from the public Internet, subject to the access point and bucket access policies).
	NetworkOrigin pulumix.Output[string] `pulumi:"networkOrigin"`
	// Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `s3control.AccessPointPolicy`. To remove the `policy`, set it to `"{}"` (an empty JSON document).
	Policy pulumix.Output[string] `pulumi:"policy"`
	// Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
	PublicAccessBlockConfiguration pulumix.GPtrOutput[AccessPointPublicAccessBlockConfiguration, AccessPointPublicAccessBlockConfigurationOutput] `pulumi:"publicAccessBlockConfiguration"`
	// Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
	VpcConfiguration pulumix.GPtrOutput[AccessPointVpcConfiguration, AccessPointVpcConfigurationOutput] `pulumi:"vpcConfiguration"`
}

// NewAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewAccessPoint(ctx *pulumi.Context,
	name string, args *AccessPointArgs, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPoint
	err := ctx.RegisterResource("aws:s3/accessPoint:AccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPoint gets an existing AccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPointState, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	var resource AccessPoint
	err := ctx.ReadResource("aws:s3/accessPoint:AccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPoint resources.
type accessPointState struct {
	// AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// Alias of the S3 Access Point.
	Alias *string `pulumi:"alias"`
	// ARN of the S3 Access Point.
	Arn *string `pulumi:"arn"`
	// Name of an AWS Partition S3 Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
	Bucket *string `pulumi:"bucket"`
	// AWS account ID associated with the S3 bucket associated with this access point.
	BucketAccountId *string `pulumi:"bucketAccountId"`
	// DNS domain name of the S3 Access Point in the format _`name`_-_`accountId`_.s3-accesspoint._region_.amazonaws.com.
	// Note: S3 access points only support secure access by HTTPS. HTTP isn't supported.
	DomainName *string `pulumi:"domainName"`
	// VPC endpoints for the S3 Access Point.
	Endpoints map[string]string `pulumi:"endpoints"`
	// Indicates whether this access point currently has a policy that allows public access.
	HasPublicAccessPolicy *bool `pulumi:"hasPublicAccessPolicy"`
	// Name you want to assign to this access point.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Indicates whether this access point allows access from the public Internet. Values are `VPC` (the access point doesn't allow access from the public Internet) and `Internet` (the access point allows access from the public Internet, subject to the access point and bucket access policies).
	NetworkOrigin *string `pulumi:"networkOrigin"`
	// Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `s3control.AccessPointPolicy`. To remove the `policy`, set it to `"{}"` (an empty JSON document).
	Policy *string `pulumi:"policy"`
	// Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
	PublicAccessBlockConfiguration *AccessPointPublicAccessBlockConfiguration `pulumi:"publicAccessBlockConfiguration"`
	// Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
	VpcConfiguration *AccessPointVpcConfiguration `pulumi:"vpcConfiguration"`
}

type AccessPointState struct {
	// AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Input[*string]
	// Alias of the S3 Access Point.
	Alias pulumix.Input[*string]
	// ARN of the S3 Access Point.
	Arn pulumix.Input[*string]
	// Name of an AWS Partition S3 Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
	Bucket pulumix.Input[*string]
	// AWS account ID associated with the S3 bucket associated with this access point.
	BucketAccountId pulumix.Input[*string]
	// DNS domain name of the S3 Access Point in the format _`name`_-_`accountId`_.s3-accesspoint._region_.amazonaws.com.
	// Note: S3 access points only support secure access by HTTPS. HTTP isn't supported.
	DomainName pulumix.Input[*string]
	// VPC endpoints for the S3 Access Point.
	Endpoints pulumix.Input[map[string]string]
	// Indicates whether this access point currently has a policy that allows public access.
	HasPublicAccessPolicy pulumix.Input[*bool]
	// Name you want to assign to this access point.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Indicates whether this access point allows access from the public Internet. Values are `VPC` (the access point doesn't allow access from the public Internet) and `Internet` (the access point allows access from the public Internet, subject to the access point and bucket access policies).
	NetworkOrigin pulumix.Input[*string]
	// Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `s3control.AccessPointPolicy`. To remove the `policy`, set it to `"{}"` (an empty JSON document).
	Policy pulumix.Input[*string]
	// Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
	PublicAccessBlockConfiguration pulumix.Input[*AccessPointPublicAccessBlockConfigurationArgs]
	// Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
	VpcConfiguration pulumix.Input[*AccessPointVpcConfigurationArgs]
}

func (AccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointState)(nil)).Elem()
}

type accessPointArgs struct {
	// AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
	AccountId *string `pulumi:"accountId"`
	// Name of an AWS Partition S3 Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
	Bucket string `pulumi:"bucket"`
	// AWS account ID associated with the S3 bucket associated with this access point.
	BucketAccountId *string `pulumi:"bucketAccountId"`
	// Name you want to assign to this access point.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `s3control.AccessPointPolicy`. To remove the `policy`, set it to `"{}"` (an empty JSON document).
	Policy *string `pulumi:"policy"`
	// Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
	PublicAccessBlockConfiguration *AccessPointPublicAccessBlockConfiguration `pulumi:"publicAccessBlockConfiguration"`
	// Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
	VpcConfiguration *AccessPointVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a AccessPoint resource.
type AccessPointArgs struct {
	// AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
	AccountId pulumix.Input[*string]
	// Name of an AWS Partition S3 Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
	Bucket pulumix.Input[string]
	// AWS account ID associated with the S3 bucket associated with this access point.
	BucketAccountId pulumix.Input[*string]
	// Name you want to assign to this access point.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `s3control.AccessPointPolicy`. To remove the `policy`, set it to `"{}"` (an empty JSON document).
	Policy pulumix.Input[*string]
	// Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
	PublicAccessBlockConfiguration pulumix.Input[*AccessPointPublicAccessBlockConfigurationArgs]
	// Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
	VpcConfiguration pulumix.Input[*AccessPointVpcConfigurationArgs]
}

func (AccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointArgs)(nil)).Elem()
}

type AccessPointOutput struct{ *pulumi.OutputState }

func (AccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPoint)(nil)).Elem()
}

func (o AccessPointOutput) ToAccessPointOutput() AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPoint] {
	return pulumix.Output[AccessPoint]{
		OutputState: o.OutputState,
	}
}

// AWS account ID for the owner of the bucket for which you want to create an access point. Defaults to automatically determined account ID of the AWS provider.
func (o AccessPointOutput) AccountId() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.AccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Alias of the S3 Access Point.
func (o AccessPointOutput) Alias() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.Alias })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the S3 Access Point.
func (o AccessPointOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of an AWS Partition S3 Bucket or the ARN of S3 on Outposts Bucket that you want to associate this access point with.
func (o AccessPointOutput) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID associated with the S3 bucket associated with this access point.
func (o AccessPointOutput) BucketAccountId() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.BucketAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// DNS domain name of the S3 Access Point in the format _`name`_-_`accountId`_.s3-accesspoint._region_.amazonaws.com.
// Note: S3 access points only support secure access by HTTPS. HTTP isn't supported.
func (o AccessPointOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// VPC endpoints for the S3 Access Point.
func (o AccessPointOutput) Endpoints() pulumix.MapOutput[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.MapOutput[string] { return v.Endpoints })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Indicates whether this access point currently has a policy that allows public access.
func (o AccessPointOutput) HasPublicAccessPolicy() pulumix.Output[bool] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[bool] { return v.HasPublicAccessPolicy })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Name you want to assign to this access point.
//
// The following arguments are optional:
func (o AccessPointOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether this access point allows access from the public Internet. Values are `VPC` (the access point doesn't allow access from the public Internet) and `Internet` (the access point allows access from the public Internet, subject to the access point and bucket access policies).
func (o AccessPointOutput) NetworkOrigin() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.NetworkOrigin })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Valid JSON document that specifies the policy that you want to apply to this access point. Removing `policy` from your configuration or setting `policy` to null or an empty string (i.e., `policy = ""`) _will not_ delete the policy since it could have been set by `s3control.AccessPointPolicy`. To remove the `policy`, set it to `"{}"` (an empty JSON document).
func (o AccessPointOutput) Policy() pulumix.Output[string] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.Output[string] { return v.Policy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block to manage the `PublicAccessBlock` configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. Detailed below.
func (o AccessPointOutput) PublicAccessBlockConfiguration() pulumix.GPtrOutput[AccessPointPublicAccessBlockConfiguration, AccessPointPublicAccessBlockConfigurationOutput] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.GPtrOutput[AccessPointPublicAccessBlockConfiguration, AccessPointPublicAccessBlockConfigurationOutput] {
		return v.PublicAccessBlockConfiguration
	})
	unwrapped := pulumix.Flatten[*AccessPointPublicAccessBlockConfiguration, pulumix.GPtrOutput[AccessPointPublicAccessBlockConfiguration, AccessPointPublicAccessBlockConfigurationOutput]](value)
	return pulumix.GPtrOutput[AccessPointPublicAccessBlockConfiguration, AccessPointPublicAccessBlockConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block to restrict access to this access point to requests from the specified Virtual Private Cloud (VPC). Required for S3 on Outposts. Detailed below.
func (o AccessPointOutput) VpcConfiguration() pulumix.GPtrOutput[AccessPointVpcConfiguration, AccessPointVpcConfigurationOutput] {
	value := pulumix.Apply[AccessPoint](o, func(v AccessPoint) pulumix.GPtrOutput[AccessPointVpcConfiguration, AccessPointVpcConfigurationOutput] {
		return v.VpcConfiguration
	})
	unwrapped := pulumix.Flatten[*AccessPointVpcConfiguration, pulumix.GPtrOutput[AccessPointVpcConfiguration, AccessPointVpcConfigurationOutput]](value)
	return pulumix.GPtrOutput[AccessPointVpcConfiguration, AccessPointVpcConfigurationOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AccessPointOutput{})
}
