// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides access to all Environments for an AppConfig Application. This will allow you to pass Environment IDs to another
// resource.
func GetEnvironments(ctx *pulumi.Context, args *GetEnvironmentsArgs, opts ...pulumi.InvokeOption) (*GetEnvironmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEnvironmentsResult
	err := ctx.Invoke("aws:appconfig/getEnvironments:getEnvironments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironments.
type GetEnvironmentsArgs struct {
	// ID of the AppConfig Application.
	ApplicationId string `pulumi:"applicationId"`
}

// A collection of values returned by getEnvironments.
type GetEnvironmentsResult struct {
	ApplicationId string `pulumi:"applicationId"`
	// Set of Environment IDs associated with this AppConfig Application.
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetEnvironmentsOutput(ctx *pulumi.Context, args GetEnvironmentsOutputArgs, opts ...pulumi.InvokeOption) GetEnvironmentsResultOutput {
	outputResult := pulumix.ApplyErr[*GetEnvironmentsArgs](args.ToOutput(), func(plainArgs *GetEnvironmentsArgs) (*GetEnvironmentsResult, error) {
		return GetEnvironments(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetEnvironmentsResultOutput, *GetEnvironmentsResult](outputResult)
}

// A collection of arguments for invoking getEnvironments.
type GetEnvironmentsOutputArgs struct {
	// ID of the AppConfig Application.
	ApplicationId pulumix.Input[string] `pulumi:"applicationId"`
}

func (args GetEnvironmentsOutputArgs) ToOutput() pulumix.Output[*GetEnvironmentsArgs] {
	allArgs := pulumix.All(
		args.ApplicationId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetEnvironmentsArgs {
		return &GetEnvironmentsArgs{
			ApplicationId: resolvedArgs[0].(string),
		}
	})
}

type GetEnvironmentsResultOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsResult)(nil)).Elem()
}

func (o GetEnvironmentsResultOutput) ToOutput(context.Context) pulumix.Output[*GetEnvironmentsResult] {
	return pulumix.Output[*GetEnvironmentsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetEnvironmentsResultOutput) ApplicationId() pulumix.Output[string] {
	return pulumix.Apply[*GetEnvironmentsResult](o, func(v *GetEnvironmentsResult) string { return v.ApplicationId })
}

func (o GetEnvironmentsResultOutput) EnvironmentIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetEnvironmentsResult](o, func(v *GetEnvironmentsResult) []string { return v.EnvironmentIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetEnvironmentsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetEnvironmentsResult](o, func(v *GetEnvironmentsResult) string { return v.Id })
}
