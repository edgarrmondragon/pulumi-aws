// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get a list of AWS Cloudwatch Log Groups
func GetLogGroups(ctx *pulumi.Context, args *GetLogGroupsArgs, opts ...pulumi.InvokeOption) (*GetLogGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLogGroupsResult
	err := ctx.Invoke("aws:cloudwatch/getLogGroups:getLogGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogGroups.
type GetLogGroupsArgs struct {
	// Group prefix of the Cloudwatch log groups to list
	LogGroupNamePrefix *string `pulumi:"logGroupNamePrefix"`
}

// A collection of values returned by getLogGroups.
type GetLogGroupsResult struct {
	// Set of ARNs of the Cloudwatch log groups
	Arns []string `pulumi:"arns"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	LogGroupNamePrefix *string `pulumi:"logGroupNamePrefix"`
	// Set of names of the Cloudwatch log groups
	LogGroupNames []string `pulumi:"logGroupNames"`
}

func GetLogGroupsOutput(ctx *pulumi.Context, args GetLogGroupsOutputArgs, opts ...pulumi.InvokeOption) GetLogGroupsResultOutput {
	outputResult := pulumix.ApplyErr[*GetLogGroupsArgs](args.ToOutput(), func(plainArgs *GetLogGroupsArgs) (*GetLogGroupsResult, error) {
		return GetLogGroups(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLogGroupsResultOutput, *GetLogGroupsResult](outputResult)
}

// A collection of arguments for invoking getLogGroups.
type GetLogGroupsOutputArgs struct {
	// Group prefix of the Cloudwatch log groups to list
	LogGroupNamePrefix pulumix.Input[*string] `pulumi:"logGroupNamePrefix"`
}

func (args GetLogGroupsOutputArgs) ToOutput() pulumix.Output[*GetLogGroupsArgs] {
	allArgs := pulumix.All(
		args.LogGroupNamePrefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLogGroupsArgs {
		return &GetLogGroupsArgs{
			LogGroupNamePrefix: resolvedArgs[0].(*string),
		}
	})
}

type GetLogGroupsResultOutput struct{ *pulumi.OutputState }

func (GetLogGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogGroupsResult)(nil)).Elem()
}

func (o GetLogGroupsResultOutput) ToOutput(context.Context) pulumix.Output[*GetLogGroupsResult] {
	return pulumix.Output[*GetLogGroupsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLogGroupsResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLogGroupsResult](o, func(v *GetLogGroupsResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetLogGroupsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLogGroupsResult](o, func(v *GetLogGroupsResult) string { return v.Id })
}

func (o GetLogGroupsResultOutput) LogGroupNamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[*GetLogGroupsResult](o, func(v *GetLogGroupsResult) *string { return v.LogGroupNamePrefix })
}

func (o GetLogGroupsResultOutput) LogGroupNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetLogGroupsResult](o, func(v *GetLogGroupsResult) []string { return v.LogGroupNames })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
