// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway VPN Attachment.
//
// > EC2 Transit Gateway VPN Attachments are implicitly created by VPN Connections referencing an EC2 Transit Gateway so there is no managed resource. For ease, the `ec2.VpnConnection` resource includes a `transitGatewayAttachmentId` attribute which can replace some usage of this data source. For tagging the attachment, see the `ec2.Tag` resource.
func GetVpnAttachment(ctx *pulumi.Context, args *GetVpnAttachmentArgs, opts ...pulumi.InvokeOption) (*GetVpnAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpnAttachmentResult
	err := ctx.Invoke("aws:ec2transitgateway/getVpnAttachment:getVpnAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnAttachment.
type GetVpnAttachmentArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetVpnAttachmentFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired Transit Gateway VPN Attachment.
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of the EC2 VPN Connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
}

// A collection of values returned by getVpnAttachment.
type GetVpnAttachmentResult struct {
	Filters []GetVpnAttachmentFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway VPN Attachment
	Tags             map[string]string `pulumi:"tags"`
	TransitGatewayId *string           `pulumi:"transitGatewayId"`
	VpnConnectionId  *string           `pulumi:"vpnConnectionId"`
}

func GetVpnAttachmentOutput(ctx *pulumi.Context, args GetVpnAttachmentOutputArgs, opts ...pulumi.InvokeOption) GetVpnAttachmentResultOutput {
	outputResult := pulumix.ApplyErr[*GetVpnAttachmentArgs](args.ToOutput(), func(plainArgs *GetVpnAttachmentArgs) (*GetVpnAttachmentResult, error) {
		return GetVpnAttachment(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetVpnAttachmentResultOutput, *GetVpnAttachmentResult](outputResult)
}

// A collection of arguments for invoking getVpnAttachment.
type GetVpnAttachmentOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetVpnAttachmentFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match a pair on the desired Transit Gateway VPN Attachment.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string] `pulumi:"transitGatewayId"`
	// Identifier of the EC2 VPN Connection.
	VpnConnectionId pulumix.Input[*string] `pulumi:"vpnConnectionId"`
}

func (args GetVpnAttachmentOutputArgs) ToOutput() pulumix.Output[*GetVpnAttachmentArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TransitGatewayId.ToOutput(context.Background()).AsAny(),
		args.VpnConnectionId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetVpnAttachmentArgs {
		return &GetVpnAttachmentArgs{
			Filters:          resolvedArgs[0].([]GetVpnAttachmentFilter),
			Tags:             resolvedArgs[1].(map[string]string),
			TransitGatewayId: resolvedArgs[2].(*string),
			VpnConnectionId:  resolvedArgs[3].(*string),
		}
	})
}

type GetVpnAttachmentResultOutput struct{ *pulumi.OutputState }

func (GetVpnAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnAttachmentResult)(nil)).Elem()
}

func (o GetVpnAttachmentResultOutput) ToOutput(context.Context) pulumix.Output[*GetVpnAttachmentResult] {
	return pulumix.Output[*GetVpnAttachmentResult]{
		OutputState: o.OutputState,
	}
}

func (o GetVpnAttachmentResultOutput) Filters() pulumix.GArrayOutput[GetVpnAttachmentFilter, GetVpnAttachmentFilterOutput] {
	value := pulumix.Apply[*GetVpnAttachmentResult](o, func(v *GetVpnAttachmentResult) []GetVpnAttachmentFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpnAttachmentFilter, GetVpnAttachmentFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetVpnAttachmentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetVpnAttachmentResult](o, func(v *GetVpnAttachmentResult) string { return v.Id })
}

func (o GetVpnAttachmentResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetVpnAttachmentResult](o, func(v *GetVpnAttachmentResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetVpnAttachmentResultOutput) TransitGatewayId() pulumix.Output[*string] {
	return pulumix.Apply[*GetVpnAttachmentResult](o, func(v *GetVpnAttachmentResult) *string { return v.TransitGatewayId })
}

func (o GetVpnAttachmentResultOutput) VpnConnectionId() pulumix.Output[*string] {
	return pulumix.Apply[*GetVpnAttachmentResult](o, func(v *GetVpnAttachmentResult) *string { return v.VpnConnectionId })
}
