// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codeartifact

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RepositoryExternalConnections struct {
	// The name of the external connection associated with a repository.
	ExternalConnectionName string  `pulumi:"externalConnectionName"`
	PackageFormat          *string `pulumi:"packageFormat"`
	Status                 *string `pulumi:"status"`
}

type RepositoryExternalConnectionsArgs struct {
	// The name of the external connection associated with a repository.
	ExternalConnectionName pulumix.Input[string]  `pulumi:"externalConnectionName"`
	PackageFormat          pulumix.Input[*string] `pulumi:"packageFormat"`
	Status                 pulumix.Input[*string] `pulumi:"status"`
}

func (RepositoryExternalConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryExternalConnections)(nil)).Elem()
}

func (i RepositoryExternalConnectionsArgs) ToRepositoryExternalConnectionsOutput() RepositoryExternalConnectionsOutput {
	return i.ToRepositoryExternalConnectionsOutputWithContext(context.Background())
}

func (i RepositoryExternalConnectionsArgs) ToRepositoryExternalConnectionsOutputWithContext(ctx context.Context) RepositoryExternalConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryExternalConnectionsOutput)
}

func (i *RepositoryExternalConnectionsArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryExternalConnectionsArgs] {
	return pulumix.Val(i)
}

type RepositoryExternalConnectionsOutput struct{ *pulumi.OutputState }

func (RepositoryExternalConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryExternalConnections)(nil)).Elem()
}

func (o RepositoryExternalConnectionsOutput) ToRepositoryExternalConnectionsOutput() RepositoryExternalConnectionsOutput {
	return o
}

func (o RepositoryExternalConnectionsOutput) ToRepositoryExternalConnectionsOutputWithContext(ctx context.Context) RepositoryExternalConnectionsOutput {
	return o
}

func (o RepositoryExternalConnectionsOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryExternalConnections] {
	return pulumix.Output[RepositoryExternalConnections]{
		OutputState: o.OutputState,
	}
}

// The name of the external connection associated with a repository.
func (o RepositoryExternalConnectionsOutput) ExternalConnectionName() pulumix.Output[string] {
	return pulumix.Apply[RepositoryExternalConnections](o, func(v RepositoryExternalConnections) string { return v.ExternalConnectionName })
}

func (o RepositoryExternalConnectionsOutput) PackageFormat() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryExternalConnections](o, func(v RepositoryExternalConnections) *string { return v.PackageFormat })
}

func (o RepositoryExternalConnectionsOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryExternalConnections](o, func(v RepositoryExternalConnections) *string { return v.Status })
}

type RepositoryUpstream struct {
	// The name of an upstream repository.
	RepositoryName string `pulumi:"repositoryName"`
}

type RepositoryUpstreamArgs struct {
	// The name of an upstream repository.
	RepositoryName pulumix.Input[string] `pulumi:"repositoryName"`
}

func (RepositoryUpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryUpstream)(nil)).Elem()
}

func (i RepositoryUpstreamArgs) ToRepositoryUpstreamOutput() RepositoryUpstreamOutput {
	return i.ToRepositoryUpstreamOutputWithContext(context.Background())
}

func (i RepositoryUpstreamArgs) ToRepositoryUpstreamOutputWithContext(ctx context.Context) RepositoryUpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryUpstreamOutput)
}

func (i *RepositoryUpstreamArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryUpstreamArgs] {
	return pulumix.Val(i)
}

type RepositoryUpstreamOutput struct{ *pulumi.OutputState }

func (RepositoryUpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryUpstream)(nil)).Elem()
}

func (o RepositoryUpstreamOutput) ToRepositoryUpstreamOutput() RepositoryUpstreamOutput {
	return o
}

func (o RepositoryUpstreamOutput) ToRepositoryUpstreamOutputWithContext(ctx context.Context) RepositoryUpstreamOutput {
	return o
}

func (o RepositoryUpstreamOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryUpstream] {
	return pulumix.Output[RepositoryUpstream]{
		OutputState: o.OutputState,
	}
}

// The name of an upstream repository.
func (o RepositoryUpstreamOutput) RepositoryName() pulumix.Output[string] {
	return pulumix.Apply[RepositoryUpstream](o, func(v RepositoryUpstream) string { return v.RepositoryName })
}

func init() {
	pulumi.RegisterOutputType(RepositoryExternalConnectionsOutput{})
	pulumi.RegisterOutputType(RepositoryUpstreamOutput{})
}
