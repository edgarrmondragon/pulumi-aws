// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Step Functions Activity data source
func LookupActivity(ctx *pulumi.Context, args *LookupActivityArgs, opts ...pulumi.InvokeOption) (*LookupActivityResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupActivityResult
	err := ctx.Invoke("aws:sfn/getActivity:getActivity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getActivity.
type LookupActivityArgs struct {
	// ARN that identifies the activity.
	Arn *string `pulumi:"arn"`
	// Name that identifies the activity.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getActivity.
type LookupActivityResult struct {
	Arn string `pulumi:"arn"`
	// Date the activity was created.
	CreationDate string `pulumi:"creationDate"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupActivityOutput(ctx *pulumi.Context, args LookupActivityOutputArgs, opts ...pulumi.InvokeOption) LookupActivityResultOutput {
	outputResult := pulumix.ApplyErr[*LookupActivityArgs](args.ToOutput(), func(plainArgs *LookupActivityArgs) (*LookupActivityResult, error) {
		return LookupActivity(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupActivityResultOutput, *LookupActivityResult](outputResult)
}

// A collection of arguments for invoking getActivity.
type LookupActivityOutputArgs struct {
	// ARN that identifies the activity.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Name that identifies the activity.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (args LookupActivityOutputArgs) ToOutput() pulumix.Output[*LookupActivityArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupActivityArgs {
		return &LookupActivityArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
		}
	})
}

type LookupActivityResultOutput struct{ *pulumi.OutputState }

func (LookupActivityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActivityResult)(nil)).Elem()
}

func (o LookupActivityResultOutput) ToOutput(context.Context) pulumix.Output[*LookupActivityResult] {
	return pulumix.Output[*LookupActivityResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupActivityResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupActivityResult](o, func(v *LookupActivityResult) string { return v.Arn })
}

func (o LookupActivityResultOutput) CreationDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupActivityResult](o, func(v *LookupActivityResult) string { return v.CreationDate })
}

func (o LookupActivityResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupActivityResult](o, func(v *LookupActivityResult) string { return v.Id })
}

func (o LookupActivityResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupActivityResult](o, func(v *LookupActivityResult) string { return v.Name })
}
