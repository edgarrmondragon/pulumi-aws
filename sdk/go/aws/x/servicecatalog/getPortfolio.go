// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information for a Service Catalog Portfolio.
func LookupPortfolio(ctx *pulumi.Context, args *LookupPortfolioArgs, opts ...pulumi.InvokeOption) (*LookupPortfolioResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPortfolioResult
	err := ctx.Invoke("aws:servicecatalog/getPortfolio:getPortfolio", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPortfolio.
type LookupPortfolioArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Portfolio identifier.
	//
	// The following arguments are optional:
	Id string `pulumi:"id"`
	// Tags applied to the portfolio.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPortfolio.
type LookupPortfolioResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Portfolio ARN.
	Arn string `pulumi:"arn"`
	// Time the portfolio was created.
	CreatedTime string `pulumi:"createdTime"`
	// Description of the portfolio
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	// Portfolio name.
	Name string `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName string `pulumi:"providerName"`
	// Tags applied to the portfolio.
	Tags map[string]string `pulumi:"tags"`
}

func LookupPortfolioOutput(ctx *pulumi.Context, args LookupPortfolioOutputArgs, opts ...pulumi.InvokeOption) LookupPortfolioResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPortfolioArgs](args.ToOutput(), func(plainArgs *LookupPortfolioArgs) (*LookupPortfolioResult, error) {
		return LookupPortfolio(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPortfolioResultOutput, *LookupPortfolioResult](outputResult)
}

// A collection of arguments for invoking getPortfolio.
type LookupPortfolioOutputArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumix.Input[*string] `pulumi:"acceptLanguage"`
	// Portfolio identifier.
	//
	// The following arguments are optional:
	Id pulumix.Input[string] `pulumi:"id"`
	// Tags applied to the portfolio.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPortfolioOutputArgs) ToOutput() pulumix.Output[*LookupPortfolioArgs] {
	allArgs := pulumix.All(
		args.AcceptLanguage.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPortfolioArgs {
		return &LookupPortfolioArgs{
			AcceptLanguage: resolvedArgs[0].(*string),
			Id:             resolvedArgs[1].(string),
			Tags:           resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupPortfolioResultOutput struct{ *pulumi.OutputState }

func (LookupPortfolioResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortfolioResult)(nil)).Elem()
}

func (o LookupPortfolioResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPortfolioResult] {
	return pulumix.Output[*LookupPortfolioResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPortfolioResultOutput) AcceptLanguage() pulumix.Output[*string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) *string { return v.AcceptLanguage })
}

func (o LookupPortfolioResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) string { return v.Arn })
}

func (o LookupPortfolioResultOutput) CreatedTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) string { return v.CreatedTime })
}

func (o LookupPortfolioResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) string { return v.Description })
}

func (o LookupPortfolioResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) string { return v.Id })
}

func (o LookupPortfolioResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) string { return v.Name })
}

func (o LookupPortfolioResultOutput) ProviderName() pulumix.Output[string] {
	return pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) string { return v.ProviderName })
}

func (o LookupPortfolioResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPortfolioResult](o, func(v *LookupPortfolioResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
