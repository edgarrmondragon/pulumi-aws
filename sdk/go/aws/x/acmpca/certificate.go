// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to issue a certificate using AWS Certificate Manager Private Certificate Authority (ACM PCA).
//
// Certificates created using `acmpca.Certificate` are not eligible for automatic renewal,
// and must be replaced instead.
// To issue a renewable certificate using an ACM PCA, create a `acm.Certificate`
// with the parameter `certificateAuthorityArn`.
type Certificate struct {
	pulumi.CustomResourceState

	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	ApiPassthrough pulumix.Output[*string] `pulumi:"apiPassthrough"`
	// ARN of the certificate.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// PEM-encoded certificate value.
	Certificate pulumix.Output[string] `pulumi:"certificate"`
	// ARN of the certificate authority.
	CertificateAuthorityArn pulumix.Output[string] `pulumi:"certificateAuthorityArn"`
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
	CertificateChain pulumix.Output[string] `pulumi:"certificateChain"`
	// Certificate Signing Request in PEM format.
	CertificateSigningRequest pulumix.Output[string] `pulumi:"certificateSigningRequest"`
	// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
	SigningAlgorithm pulumix.Output[string] `pulumi:"signingAlgorithm"`
	// Template to use when issuing a certificate.
	// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
	TemplateArn pulumix.Output[*string] `pulumi:"templateArn"`
	// Configures end of the validity period for the certificate. See validity block below.
	Validity pulumix.GPtrOutput[CertificateValidity, CertificateValidityOutput] `pulumi:"validity"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityArn'")
	}
	if args.CertificateSigningRequest == nil {
		return nil, errors.New("invalid value for required argument 'CertificateSigningRequest'")
	}
	if args.SigningAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'SigningAlgorithm'")
	}
	if args.Validity == nil {
		return nil, errors.New("invalid value for required argument 'Validity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("aws:acmpca/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:acmpca/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	ApiPassthrough *string `pulumi:"apiPassthrough"`
	// ARN of the certificate.
	Arn *string `pulumi:"arn"`
	// PEM-encoded certificate value.
	Certificate *string `pulumi:"certificate"`
	// ARN of the certificate authority.
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
	CertificateChain *string `pulumi:"certificateChain"`
	// Certificate Signing Request in PEM format.
	CertificateSigningRequest *string `pulumi:"certificateSigningRequest"`
	// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
	SigningAlgorithm *string `pulumi:"signingAlgorithm"`
	// Template to use when issuing a certificate.
	// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
	TemplateArn *string `pulumi:"templateArn"`
	// Configures end of the validity period for the certificate. See validity block below.
	Validity *CertificateValidity `pulumi:"validity"`
}

type CertificateState struct {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	ApiPassthrough pulumix.Input[*string]
	// ARN of the certificate.
	Arn pulumix.Input[*string]
	// PEM-encoded certificate value.
	Certificate pulumix.Input[*string]
	// ARN of the certificate authority.
	CertificateAuthorityArn pulumix.Input[*string]
	// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
	CertificateChain pulumix.Input[*string]
	// Certificate Signing Request in PEM format.
	CertificateSigningRequest pulumix.Input[*string]
	// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
	SigningAlgorithm pulumix.Input[*string]
	// Template to use when issuing a certificate.
	// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
	TemplateArn pulumix.Input[*string]
	// Configures end of the validity period for the certificate. See validity block below.
	Validity pulumix.Input[*CertificateValidityArgs]
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	ApiPassthrough *string `pulumi:"apiPassthrough"`
	// ARN of the certificate authority.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// Certificate Signing Request in PEM format.
	CertificateSigningRequest string `pulumi:"certificateSigningRequest"`
	// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
	SigningAlgorithm string `pulumi:"signingAlgorithm"`
	// Template to use when issuing a certificate.
	// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
	TemplateArn *string `pulumi:"templateArn"`
	// Configures end of the validity period for the certificate. See validity block below.
	Validity CertificateValidity `pulumi:"validity"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
	ApiPassthrough pulumix.Input[*string]
	// ARN of the certificate authority.
	CertificateAuthorityArn pulumix.Input[string]
	// Certificate Signing Request in PEM format.
	CertificateSigningRequest pulumix.Input[string]
	// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
	SigningAlgorithm pulumix.Input[string]
	// Template to use when issuing a certificate.
	// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
	TemplateArn pulumix.Input[*string]
	// Configures end of the validity period for the certificate. See validity block below.
	Validity pulumix.Input[*CertificateValidityArgs]
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToOutput(ctx context.Context) pulumix.Output[Certificate] {
	return pulumix.Output[Certificate]{
		OutputState: o.OutputState,
	}
}

// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
func (o CertificateOutput) ApiPassthrough() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.ApiPassthrough })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the certificate.
func (o CertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// PEM-encoded certificate value.
func (o CertificateOutput) Certificate() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Certificate })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the certificate authority.
func (o CertificateOutput) CertificateAuthorityArn() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificateAuthorityArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
func (o CertificateOutput) CertificateChain() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificateChain })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Certificate Signing Request in PEM format.
func (o CertificateOutput) CertificateSigningRequest() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.CertificateSigningRequest })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
func (o CertificateOutput) SigningAlgorithm() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.SigningAlgorithm })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Template to use when issuing a certificate.
// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
func (o CertificateOutput) TemplateArn() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.TemplateArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configures end of the validity period for the certificate. See validity block below.
func (o CertificateOutput) Validity() pulumix.GPtrOutput[CertificateValidity, CertificateValidityOutput] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.GPtrOutput[CertificateValidity, CertificateValidityOutput] {
		return v.Validity
	})
	unwrapped := pulumix.Flatten[*CertificateValidity, pulumix.GPtrOutput[CertificateValidity, CertificateValidityOutput]](value)
	return pulumix.GPtrOutput[CertificateValidity, CertificateValidityOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
