// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SSM Patch Group resource
type PatchGroup struct {
	pulumi.CustomResourceState

	// The ID of the patch baseline to register the patch group with.
	BaselineId pulumix.Output[string] `pulumi:"baselineId"`
	// The name of the patch group that should be registered with the patch baseline.
	PatchGroup pulumix.Output[string] `pulumi:"patchGroup"`
}

// NewPatchGroup registers a new resource with the given unique name, arguments, and options.
func NewPatchGroup(ctx *pulumi.Context,
	name string, args *PatchGroupArgs, opts ...pulumi.ResourceOption) (*PatchGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaselineId == nil {
		return nil, errors.New("invalid value for required argument 'BaselineId'")
	}
	if args.PatchGroup == nil {
		return nil, errors.New("invalid value for required argument 'PatchGroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PatchGroup
	err := ctx.RegisterResource("aws:ssm/patchGroup:PatchGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPatchGroup gets an existing PatchGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPatchGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PatchGroupState, opts ...pulumi.ResourceOption) (*PatchGroup, error) {
	var resource PatchGroup
	err := ctx.ReadResource("aws:ssm/patchGroup:PatchGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PatchGroup resources.
type patchGroupState struct {
	// The ID of the patch baseline to register the patch group with.
	BaselineId *string `pulumi:"baselineId"`
	// The name of the patch group that should be registered with the patch baseline.
	PatchGroup *string `pulumi:"patchGroup"`
}

type PatchGroupState struct {
	// The ID of the patch baseline to register the patch group with.
	BaselineId pulumix.Input[*string]
	// The name of the patch group that should be registered with the patch baseline.
	PatchGroup pulumix.Input[*string]
}

func (PatchGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*patchGroupState)(nil)).Elem()
}

type patchGroupArgs struct {
	// The ID of the patch baseline to register the patch group with.
	BaselineId string `pulumi:"baselineId"`
	// The name of the patch group that should be registered with the patch baseline.
	PatchGroup string `pulumi:"patchGroup"`
}

// The set of arguments for constructing a PatchGroup resource.
type PatchGroupArgs struct {
	// The ID of the patch baseline to register the patch group with.
	BaselineId pulumix.Input[string]
	// The name of the patch group that should be registered with the patch baseline.
	PatchGroup pulumix.Input[string]
}

func (PatchGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*patchGroupArgs)(nil)).Elem()
}

type PatchGroupOutput struct{ *pulumi.OutputState }

func (PatchGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchGroup)(nil)).Elem()
}

func (o PatchGroupOutput) ToPatchGroupOutput() PatchGroupOutput {
	return o
}

func (o PatchGroupOutput) ToPatchGroupOutputWithContext(ctx context.Context) PatchGroupOutput {
	return o
}

func (o PatchGroupOutput) ToOutput(ctx context.Context) pulumix.Output[PatchGroup] {
	return pulumix.Output[PatchGroup]{
		OutputState: o.OutputState,
	}
}

// The ID of the patch baseline to register the patch group with.
func (o PatchGroupOutput) BaselineId() pulumix.Output[string] {
	value := pulumix.Apply[PatchGroup](o, func(v PatchGroup) pulumix.Output[string] { return v.BaselineId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the patch group that should be registered with the patch baseline.
func (o PatchGroupOutput) PatchGroup() pulumix.Output[string] {
	value := pulumix.Apply[PatchGroup](o, func(v PatchGroup) pulumix.Output[string] { return v.PatchGroup })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PatchGroupOutput{})
}
