// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS DMS (Database Migration) Replication Subnet Group.
func LookupReplicationSubnetGroup(ctx *pulumi.Context, args *LookupReplicationSubnetGroupArgs, opts ...pulumi.InvokeOption) (*LookupReplicationSubnetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReplicationSubnetGroupResult
	err := ctx.Invoke("aws:dms/getReplicationSubnetGroup:getReplicationSubnetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReplicationSubnetGroup.
type LookupReplicationSubnetGroupArgs struct {
	// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
	ReplicationSubnetGroupId string            `pulumi:"replicationSubnetGroupId"`
	Tags                     map[string]string `pulumi:"tags"`
}

// A collection of values returned by getReplicationSubnetGroup.
type LookupReplicationSubnetGroupResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                        string `pulumi:"id"`
	ReplicationSubnetGroupArn string `pulumi:"replicationSubnetGroupArn"`
	// Description for the subnet group.
	ReplicationSubnetGroupDescription string `pulumi:"replicationSubnetGroupDescription"`
	ReplicationSubnetGroupId          string `pulumi:"replicationSubnetGroupId"`
	SubnetGroupStatus                 string `pulumi:"subnetGroupStatus"`
	// List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
	SubnetIds []string          `pulumi:"subnetIds"`
	Tags      map[string]string `pulumi:"tags"`
	// The ID of the VPC the subnet group is in.
	VpcId string `pulumi:"vpcId"`
}

func LookupReplicationSubnetGroupOutput(ctx *pulumi.Context, args LookupReplicationSubnetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupReplicationSubnetGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupReplicationSubnetGroupArgs](args.ToOutput(), func(plainArgs *LookupReplicationSubnetGroupArgs) (*LookupReplicationSubnetGroupResult, error) {
		return LookupReplicationSubnetGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupReplicationSubnetGroupResultOutput, *LookupReplicationSubnetGroupResult](outputResult)
}

// A collection of arguments for invoking getReplicationSubnetGroup.
type LookupReplicationSubnetGroupOutputArgs struct {
	// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
	ReplicationSubnetGroupId pulumix.Input[string]            `pulumi:"replicationSubnetGroupId"`
	Tags                     pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupReplicationSubnetGroupOutputArgs) ToOutput() pulumix.Output[*LookupReplicationSubnetGroupArgs] {
	allArgs := pulumix.All(
		args.ReplicationSubnetGroupId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupReplicationSubnetGroupArgs {
		return &LookupReplicationSubnetGroupArgs{
			ReplicationSubnetGroupId: resolvedArgs[0].(string),
			Tags:                     resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupReplicationSubnetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupReplicationSubnetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationSubnetGroupResult)(nil)).Elem()
}

func (o LookupReplicationSubnetGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupReplicationSubnetGroupResult] {
	return pulumix.Output[*LookupReplicationSubnetGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupReplicationSubnetGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) string { return v.Id })
}

func (o LookupReplicationSubnetGroupResultOutput) ReplicationSubnetGroupArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) string { return v.ReplicationSubnetGroupArn })
}

func (o LookupReplicationSubnetGroupResultOutput) ReplicationSubnetGroupDescription() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) string { return v.ReplicationSubnetGroupDescription })
}

func (o LookupReplicationSubnetGroupResultOutput) ReplicationSubnetGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) string { return v.ReplicationSubnetGroupId })
}

func (o LookupReplicationSubnetGroupResultOutput) SubnetGroupStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) string { return v.SubnetGroupStatus })
}

func (o LookupReplicationSubnetGroupResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationSubnetGroupResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupReplicationSubnetGroupResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupReplicationSubnetGroupResult](o, func(v *LookupReplicationSubnetGroupResult) string { return v.VpcId })
}
