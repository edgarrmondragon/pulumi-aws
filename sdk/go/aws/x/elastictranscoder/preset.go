// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastictranscoder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Transcoder preset resource.
type Preset struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Audio parameters object (documented below).
	Audio pulumix.GPtrOutput[PresetAudio, PresetAudioOutput] `pulumi:"audio"`
	// Codec options for the audio parameters (documented below)
	AudioCodecOptions pulumix.GPtrOutput[PresetAudioCodecOptions, PresetAudioCodecOptionsOutput] `pulumi:"audioCodecOptions"`
	// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
	Container pulumix.Output[string] `pulumi:"container"`
	// A description of the preset (maximum 255 characters)
	Description pulumix.Output[*string] `pulumi:"description"`
	// The name of the preset. (maximum 40 characters)
	Name pulumix.Output[string] `pulumi:"name"`
	// Thumbnail parameters object (documented below)
	Thumbnails pulumix.GPtrOutput[PresetThumbnails, PresetThumbnailsOutput] `pulumi:"thumbnails"`
	Type       pulumix.Output[string]                                       `pulumi:"type"`
	// Video parameters object (documented below)
	Video pulumix.GPtrOutput[PresetVideo, PresetVideoOutput] `pulumi:"video"`
	// Codec options for the video parameters
	VideoCodecOptions pulumix.MapOutput[string] `pulumi:"videoCodecOptions"`
	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks pulumix.GArrayOutput[PresetVideoWatermark, PresetVideoWatermarkOutput] `pulumi:"videoWatermarks"`
}

// NewPreset registers a new resource with the given unique name, arguments, and options.
func NewPreset(ctx *pulumi.Context,
	name string, args *PresetArgs, opts ...pulumi.ResourceOption) (*Preset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Preset
	err := ctx.RegisterResource("aws:elastictranscoder/preset:Preset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreset gets an existing Preset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PresetState, opts ...pulumi.ResourceOption) (*Preset, error) {
	var resource Preset
	err := ctx.ReadResource("aws:elastictranscoder/preset:Preset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Preset resources.
type presetState struct {
	// Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
	Arn *string `pulumi:"arn"`
	// Audio parameters object (documented below).
	Audio *PresetAudio `pulumi:"audio"`
	// Codec options for the audio parameters (documented below)
	AudioCodecOptions *PresetAudioCodecOptions `pulumi:"audioCodecOptions"`
	// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
	Container *string `pulumi:"container"`
	// A description of the preset (maximum 255 characters)
	Description *string `pulumi:"description"`
	// The name of the preset. (maximum 40 characters)
	Name *string `pulumi:"name"`
	// Thumbnail parameters object (documented below)
	Thumbnails *PresetThumbnails `pulumi:"thumbnails"`
	Type       *string           `pulumi:"type"`
	// Video parameters object (documented below)
	Video *PresetVideo `pulumi:"video"`
	// Codec options for the video parameters
	VideoCodecOptions map[string]string `pulumi:"videoCodecOptions"`
	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks []PresetVideoWatermark `pulumi:"videoWatermarks"`
}

type PresetState struct {
	// Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
	Arn pulumix.Input[*string]
	// Audio parameters object (documented below).
	Audio pulumix.Input[*PresetAudioArgs]
	// Codec options for the audio parameters (documented below)
	AudioCodecOptions pulumix.Input[*PresetAudioCodecOptionsArgs]
	// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
	Container pulumix.Input[*string]
	// A description of the preset (maximum 255 characters)
	Description pulumix.Input[*string]
	// The name of the preset. (maximum 40 characters)
	Name pulumix.Input[*string]
	// Thumbnail parameters object (documented below)
	Thumbnails pulumix.Input[*PresetThumbnailsArgs]
	Type       pulumix.Input[*string]
	// Video parameters object (documented below)
	Video pulumix.Input[*PresetVideoArgs]
	// Codec options for the video parameters
	VideoCodecOptions pulumix.Input[map[string]string]
	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks pulumix.Input[[]*PresetVideoWatermarkArgs]
}

func (PresetState) ElementType() reflect.Type {
	return reflect.TypeOf((*presetState)(nil)).Elem()
}

type presetArgs struct {
	// Audio parameters object (documented below).
	Audio *PresetAudio `pulumi:"audio"`
	// Codec options for the audio parameters (documented below)
	AudioCodecOptions *PresetAudioCodecOptions `pulumi:"audioCodecOptions"`
	// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
	Container string `pulumi:"container"`
	// A description of the preset (maximum 255 characters)
	Description *string `pulumi:"description"`
	// The name of the preset. (maximum 40 characters)
	Name *string `pulumi:"name"`
	// Thumbnail parameters object (documented below)
	Thumbnails *PresetThumbnails `pulumi:"thumbnails"`
	Type       *string           `pulumi:"type"`
	// Video parameters object (documented below)
	Video *PresetVideo `pulumi:"video"`
	// Codec options for the video parameters
	VideoCodecOptions map[string]string `pulumi:"videoCodecOptions"`
	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks []PresetVideoWatermark `pulumi:"videoWatermarks"`
}

// The set of arguments for constructing a Preset resource.
type PresetArgs struct {
	// Audio parameters object (documented below).
	Audio pulumix.Input[*PresetAudioArgs]
	// Codec options for the audio parameters (documented below)
	AudioCodecOptions pulumix.Input[*PresetAudioCodecOptionsArgs]
	// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
	Container pulumix.Input[string]
	// A description of the preset (maximum 255 characters)
	Description pulumix.Input[*string]
	// The name of the preset. (maximum 40 characters)
	Name pulumix.Input[*string]
	// Thumbnail parameters object (documented below)
	Thumbnails pulumix.Input[*PresetThumbnailsArgs]
	Type       pulumix.Input[*string]
	// Video parameters object (documented below)
	Video pulumix.Input[*PresetVideoArgs]
	// Codec options for the video parameters
	VideoCodecOptions pulumix.Input[map[string]string]
	// Watermark parameters for the video parameters (documented below)
	VideoWatermarks pulumix.Input[[]*PresetVideoWatermarkArgs]
}

func (PresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*presetArgs)(nil)).Elem()
}

type PresetOutput struct{ *pulumi.OutputState }

func (PresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Preset)(nil)).Elem()
}

func (o PresetOutput) ToPresetOutput() PresetOutput {
	return o
}

func (o PresetOutput) ToPresetOutputWithContext(ctx context.Context) PresetOutput {
	return o
}

func (o PresetOutput) ToOutput(ctx context.Context) pulumix.Output[Preset] {
	return pulumix.Output[Preset]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the Elastic Transcoder Preset.
func (o PresetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Audio parameters object (documented below).
func (o PresetOutput) Audio() pulumix.GPtrOutput[PresetAudio, PresetAudioOutput] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.GPtrOutput[PresetAudio, PresetAudioOutput] { return v.Audio })
	unwrapped := pulumix.Flatten[*PresetAudio, pulumix.GPtrOutput[PresetAudio, PresetAudioOutput]](value)
	return pulumix.GPtrOutput[PresetAudio, PresetAudioOutput]{OutputState: unwrapped.OutputState}
}

// Codec options for the audio parameters (documented below)
func (o PresetOutput) AudioCodecOptions() pulumix.GPtrOutput[PresetAudioCodecOptions, PresetAudioCodecOptionsOutput] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.GPtrOutput[PresetAudioCodecOptions, PresetAudioCodecOptionsOutput] {
		return v.AudioCodecOptions
	})
	unwrapped := pulumix.Flatten[*PresetAudioCodecOptions, pulumix.GPtrOutput[PresetAudioCodecOptions, PresetAudioCodecOptionsOutput]](value)
	return pulumix.GPtrOutput[PresetAudioCodecOptions, PresetAudioCodecOptionsOutput]{OutputState: unwrapped.OutputState}
}

// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
func (o PresetOutput) Container() pulumix.Output[string] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.Output[string] { return v.Container })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the preset (maximum 255 characters)
func (o PresetOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the preset. (maximum 40 characters)
func (o PresetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Thumbnail parameters object (documented below)
func (o PresetOutput) Thumbnails() pulumix.GPtrOutput[PresetThumbnails, PresetThumbnailsOutput] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.GPtrOutput[PresetThumbnails, PresetThumbnailsOutput] { return v.Thumbnails })
	unwrapped := pulumix.Flatten[*PresetThumbnails, pulumix.GPtrOutput[PresetThumbnails, PresetThumbnailsOutput]](value)
	return pulumix.GPtrOutput[PresetThumbnails, PresetThumbnailsOutput]{OutputState: unwrapped.OutputState}
}

func (o PresetOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Video parameters object (documented below)
func (o PresetOutput) Video() pulumix.GPtrOutput[PresetVideo, PresetVideoOutput] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.GPtrOutput[PresetVideo, PresetVideoOutput] { return v.Video })
	unwrapped := pulumix.Flatten[*PresetVideo, pulumix.GPtrOutput[PresetVideo, PresetVideoOutput]](value)
	return pulumix.GPtrOutput[PresetVideo, PresetVideoOutput]{OutputState: unwrapped.OutputState}
}

// Codec options for the video parameters
func (o PresetOutput) VideoCodecOptions() pulumix.MapOutput[string] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.MapOutput[string] { return v.VideoCodecOptions })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Watermark parameters for the video parameters (documented below)
func (o PresetOutput) VideoWatermarks() pulumix.GArrayOutput[PresetVideoWatermark, PresetVideoWatermarkOutput] {
	value := pulumix.Apply[Preset](o, func(v Preset) pulumix.GArrayOutput[PresetVideoWatermark, PresetVideoWatermarkOutput] {
		return v.VideoWatermarks
	})
	unwrapped := pulumix.Flatten[[]PresetVideoWatermark, pulumix.GArrayOutput[PresetVideoWatermark, PresetVideoWatermarkOutput]](value)
	return pulumix.GArrayOutput[PresetVideoWatermark, PresetVideoWatermarkOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PresetOutput{})
}
