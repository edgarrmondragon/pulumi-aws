// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type BotAssociationLexBot struct {
	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	LexRegion *string `pulumi:"lexRegion"`
	// The name of the Amazon Lex (V1) bot.
	Name string `pulumi:"name"`
}

type BotAssociationLexBotArgs struct {
	// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
	LexRegion pulumix.Input[*string] `pulumi:"lexRegion"`
	// The name of the Amazon Lex (V1) bot.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (BotAssociationLexBotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BotAssociationLexBot)(nil)).Elem()
}

func (i BotAssociationLexBotArgs) ToBotAssociationLexBotOutput() BotAssociationLexBotOutput {
	return i.ToBotAssociationLexBotOutputWithContext(context.Background())
}

func (i BotAssociationLexBotArgs) ToBotAssociationLexBotOutputWithContext(ctx context.Context) BotAssociationLexBotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAssociationLexBotOutput)
}

func (i *BotAssociationLexBotArgs) ToOutput(ctx context.Context) pulumix.Output[*BotAssociationLexBotArgs] {
	return pulumix.Val(i)
}

type BotAssociationLexBotOutput struct{ *pulumi.OutputState }

func (BotAssociationLexBotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BotAssociationLexBot)(nil)).Elem()
}

func (o BotAssociationLexBotOutput) ToBotAssociationLexBotOutput() BotAssociationLexBotOutput {
	return o
}

func (o BotAssociationLexBotOutput) ToBotAssociationLexBotOutputWithContext(ctx context.Context) BotAssociationLexBotOutput {
	return o
}

func (o BotAssociationLexBotOutput) ToOutput(ctx context.Context) pulumix.Output[BotAssociationLexBot] {
	return pulumix.Output[BotAssociationLexBot]{
		OutputState: o.OutputState,
	}
}

// The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
func (o BotAssociationLexBotOutput) LexRegion() pulumix.Output[*string] {
	return pulumix.Apply[BotAssociationLexBot](o, func(v BotAssociationLexBot) *string { return v.LexRegion })
}

// The name of the Amazon Lex (V1) bot.
func (o BotAssociationLexBotOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[BotAssociationLexBot](o, func(v BotAssociationLexBot) string { return v.Name })
}

type HoursOfOperationConfig struct {
	// Specifies the day that the hours of operation applies to.
	Day string `pulumi:"day"`
	// A end time block specifies the time that your contact center closes. The `endTime` is documented below.
	EndTime HoursOfOperationConfigEndTime `pulumi:"endTime"`
	// A start time block specifies the time that your contact center opens. The `startTime` is documented below.
	StartTime HoursOfOperationConfigStartTime `pulumi:"startTime"`
}

type HoursOfOperationConfigArgs struct {
	// Specifies the day that the hours of operation applies to.
	Day pulumix.Input[string] `pulumi:"day"`
	// A end time block specifies the time that your contact center closes. The `endTime` is documented below.
	EndTime pulumix.Input[*HoursOfOperationConfigEndTimeArgs] `pulumi:"endTime"`
	// A start time block specifies the time that your contact center opens. The `startTime` is documented below.
	StartTime pulumix.Input[*HoursOfOperationConfigStartTimeArgs] `pulumi:"startTime"`
}

func (HoursOfOperationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfig)(nil)).Elem()
}

func (i HoursOfOperationConfigArgs) ToHoursOfOperationConfigOutput() HoursOfOperationConfigOutput {
	return i.ToHoursOfOperationConfigOutputWithContext(context.Background())
}

func (i HoursOfOperationConfigArgs) ToHoursOfOperationConfigOutputWithContext(ctx context.Context) HoursOfOperationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationConfigOutput)
}

func (i *HoursOfOperationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*HoursOfOperationConfigArgs] {
	return pulumix.Val(i)
}

type HoursOfOperationConfigOutput struct{ *pulumi.OutputState }

func (HoursOfOperationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfig)(nil)).Elem()
}

func (o HoursOfOperationConfigOutput) ToHoursOfOperationConfigOutput() HoursOfOperationConfigOutput {
	return o
}

func (o HoursOfOperationConfigOutput) ToHoursOfOperationConfigOutputWithContext(ctx context.Context) HoursOfOperationConfigOutput {
	return o
}

func (o HoursOfOperationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[HoursOfOperationConfig] {
	return pulumix.Output[HoursOfOperationConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the day that the hours of operation applies to.
func (o HoursOfOperationConfigOutput) Day() pulumix.Output[string] {
	return pulumix.Apply[HoursOfOperationConfig](o, func(v HoursOfOperationConfig) string { return v.Day })
}

// A end time block specifies the time that your contact center closes. The `endTime` is documented below.
func (o HoursOfOperationConfigOutput) EndTime() pulumix.GPtrOutput[HoursOfOperationConfigEndTime, HoursOfOperationConfigEndTimeOutput] {
	value := pulumix.Apply[HoursOfOperationConfig](o, func(v HoursOfOperationConfig) HoursOfOperationConfigEndTime { return v.EndTime })
	return pulumix.GPtrOutput[HoursOfOperationConfigEndTime, HoursOfOperationConfigEndTimeOutput]{OutputState: value.OutputState}
}

// A start time block specifies the time that your contact center opens. The `startTime` is documented below.
func (o HoursOfOperationConfigOutput) StartTime() pulumix.GPtrOutput[HoursOfOperationConfigStartTime, HoursOfOperationConfigStartTimeOutput] {
	value := pulumix.Apply[HoursOfOperationConfig](o, func(v HoursOfOperationConfig) HoursOfOperationConfigStartTime { return v.StartTime })
	return pulumix.GPtrOutput[HoursOfOperationConfigStartTime, HoursOfOperationConfigStartTimeOutput]{OutputState: value.OutputState}
}

type HoursOfOperationConfigEndTime struct {
	// Specifies the hour of closing.
	Hours int `pulumi:"hours"`
	// Specifies the minute of closing.
	Minutes int `pulumi:"minutes"`
}

type HoursOfOperationConfigEndTimeArgs struct {
	// Specifies the hour of closing.
	Hours pulumix.Input[int] `pulumi:"hours"`
	// Specifies the minute of closing.
	Minutes pulumix.Input[int] `pulumi:"minutes"`
}

func (HoursOfOperationConfigEndTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfigEndTime)(nil)).Elem()
}

func (i HoursOfOperationConfigEndTimeArgs) ToHoursOfOperationConfigEndTimeOutput() HoursOfOperationConfigEndTimeOutput {
	return i.ToHoursOfOperationConfigEndTimeOutputWithContext(context.Background())
}

func (i HoursOfOperationConfigEndTimeArgs) ToHoursOfOperationConfigEndTimeOutputWithContext(ctx context.Context) HoursOfOperationConfigEndTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationConfigEndTimeOutput)
}

func (i *HoursOfOperationConfigEndTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*HoursOfOperationConfigEndTimeArgs] {
	return pulumix.Val(i)
}

type HoursOfOperationConfigEndTimeOutput struct{ *pulumi.OutputState }

func (HoursOfOperationConfigEndTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfigEndTime)(nil)).Elem()
}

func (o HoursOfOperationConfigEndTimeOutput) ToHoursOfOperationConfigEndTimeOutput() HoursOfOperationConfigEndTimeOutput {
	return o
}

func (o HoursOfOperationConfigEndTimeOutput) ToHoursOfOperationConfigEndTimeOutputWithContext(ctx context.Context) HoursOfOperationConfigEndTimeOutput {
	return o
}

func (o HoursOfOperationConfigEndTimeOutput) ToOutput(ctx context.Context) pulumix.Output[HoursOfOperationConfigEndTime] {
	return pulumix.Output[HoursOfOperationConfigEndTime]{
		OutputState: o.OutputState,
	}
}

// Specifies the hour of closing.
func (o HoursOfOperationConfigEndTimeOutput) Hours() pulumix.Output[int] {
	return pulumix.Apply[HoursOfOperationConfigEndTime](o, func(v HoursOfOperationConfigEndTime) int { return v.Hours })
}

// Specifies the minute of closing.
func (o HoursOfOperationConfigEndTimeOutput) Minutes() pulumix.Output[int] {
	return pulumix.Apply[HoursOfOperationConfigEndTime](o, func(v HoursOfOperationConfigEndTime) int { return v.Minutes })
}

type HoursOfOperationConfigStartTime struct {
	// Specifies the hour of opening.
	Hours int `pulumi:"hours"`
	// Specifies the minute of opening.
	Minutes int `pulumi:"minutes"`
}

type HoursOfOperationConfigStartTimeArgs struct {
	// Specifies the hour of opening.
	Hours pulumix.Input[int] `pulumi:"hours"`
	// Specifies the minute of opening.
	Minutes pulumix.Input[int] `pulumi:"minutes"`
}

func (HoursOfOperationConfigStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfigStartTime)(nil)).Elem()
}

func (i HoursOfOperationConfigStartTimeArgs) ToHoursOfOperationConfigStartTimeOutput() HoursOfOperationConfigStartTimeOutput {
	return i.ToHoursOfOperationConfigStartTimeOutputWithContext(context.Background())
}

func (i HoursOfOperationConfigStartTimeArgs) ToHoursOfOperationConfigStartTimeOutputWithContext(ctx context.Context) HoursOfOperationConfigStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationConfigStartTimeOutput)
}

func (i *HoursOfOperationConfigStartTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*HoursOfOperationConfigStartTimeArgs] {
	return pulumix.Val(i)
}

type HoursOfOperationConfigStartTimeOutput struct{ *pulumi.OutputState }

func (HoursOfOperationConfigStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfigStartTime)(nil)).Elem()
}

func (o HoursOfOperationConfigStartTimeOutput) ToHoursOfOperationConfigStartTimeOutput() HoursOfOperationConfigStartTimeOutput {
	return o
}

func (o HoursOfOperationConfigStartTimeOutput) ToHoursOfOperationConfigStartTimeOutputWithContext(ctx context.Context) HoursOfOperationConfigStartTimeOutput {
	return o
}

func (o HoursOfOperationConfigStartTimeOutput) ToOutput(ctx context.Context) pulumix.Output[HoursOfOperationConfigStartTime] {
	return pulumix.Output[HoursOfOperationConfigStartTime]{
		OutputState: o.OutputState,
	}
}

// Specifies the hour of opening.
func (o HoursOfOperationConfigStartTimeOutput) Hours() pulumix.Output[int] {
	return pulumix.Apply[HoursOfOperationConfigStartTime](o, func(v HoursOfOperationConfigStartTime) int { return v.Hours })
}

// Specifies the minute of opening.
func (o HoursOfOperationConfigStartTimeOutput) Minutes() pulumix.Output[int] {
	return pulumix.Apply[HoursOfOperationConfigStartTime](o, func(v HoursOfOperationConfigStartTime) int { return v.Minutes })
}

type InstanceStorageConfigStorageConfig struct {
	// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
	KinesisFirehoseConfig *InstanceStorageConfigStorageConfigKinesisFirehoseConfig `pulumi:"kinesisFirehoseConfig"`
	// A block that specifies the configuration of the Kinesis data stream. Documented below.
	KinesisStreamConfig *InstanceStorageConfigStorageConfigKinesisStreamConfig `pulumi:"kinesisStreamConfig"`
	// A block that specifies the configuration of the Kinesis video stream. Documented below.
	KinesisVideoStreamConfig *InstanceStorageConfigStorageConfigKinesisVideoStreamConfig `pulumi:"kinesisVideoStreamConfig"`
	// A block that specifies the configuration of S3 Bucket. Documented below.
	S3Config *InstanceStorageConfigStorageConfigS3Config `pulumi:"s3Config"`
	// A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
	StorageType string `pulumi:"storageType"`
}

type InstanceStorageConfigStorageConfigArgs struct {
	// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
	KinesisFirehoseConfig pulumix.Input[*InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs] `pulumi:"kinesisFirehoseConfig"`
	// A block that specifies the configuration of the Kinesis data stream. Documented below.
	KinesisStreamConfig pulumix.Input[*InstanceStorageConfigStorageConfigKinesisStreamConfigArgs] `pulumi:"kinesisStreamConfig"`
	// A block that specifies the configuration of the Kinesis video stream. Documented below.
	KinesisVideoStreamConfig pulumix.Input[*InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs] `pulumi:"kinesisVideoStreamConfig"`
	// A block that specifies the configuration of S3 Bucket. Documented below.
	S3Config pulumix.Input[*InstanceStorageConfigStorageConfigS3ConfigArgs] `pulumi:"s3Config"`
	// A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
	StorageType pulumix.Input[string] `pulumi:"storageType"`
}

func (InstanceStorageConfigStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfig)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigArgs) ToInstanceStorageConfigStorageConfigOutput() InstanceStorageConfigStorageConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigArgs) ToInstanceStorageConfigStorageConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfig)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigOutput) ToInstanceStorageConfigStorageConfigOutput() InstanceStorageConfigStorageConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigOutput) ToInstanceStorageConfigStorageConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfig] {
	return pulumix.Output[InstanceStorageConfigStorageConfig]{
		OutputState: o.OutputState,
	}
}

// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
func (o InstanceStorageConfigStorageConfigOutput) KinesisFirehoseConfig() pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisFirehoseConfig, InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput] {
	value := pulumix.Apply[InstanceStorageConfigStorageConfig](o, func(v InstanceStorageConfigStorageConfig) *InstanceStorageConfigStorageConfigKinesisFirehoseConfig {
		return v.KinesisFirehoseConfig
	})
	return pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisFirehoseConfig, InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput]{OutputState: value.OutputState}
}

// A block that specifies the configuration of the Kinesis data stream. Documented below.
func (o InstanceStorageConfigStorageConfigOutput) KinesisStreamConfig() pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisStreamConfig, InstanceStorageConfigStorageConfigKinesisStreamConfigOutput] {
	value := pulumix.Apply[InstanceStorageConfigStorageConfig](o, func(v InstanceStorageConfigStorageConfig) *InstanceStorageConfigStorageConfigKinesisStreamConfig {
		return v.KinesisStreamConfig
	})
	return pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisStreamConfig, InstanceStorageConfigStorageConfigKinesisStreamConfigOutput]{OutputState: value.OutputState}
}

// A block that specifies the configuration of the Kinesis video stream. Documented below.
func (o InstanceStorageConfigStorageConfigOutput) KinesisVideoStreamConfig() pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig, InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput] {
	value := pulumix.Apply[InstanceStorageConfigStorageConfig](o, func(v InstanceStorageConfigStorageConfig) *InstanceStorageConfigStorageConfigKinesisVideoStreamConfig {
		return v.KinesisVideoStreamConfig
	})
	return pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig, InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput]{OutputState: value.OutputState}
}

// A block that specifies the configuration of S3 Bucket. Documented below.
func (o InstanceStorageConfigStorageConfigOutput) S3Config() pulumix.GPtrOutput[InstanceStorageConfigStorageConfigS3Config, InstanceStorageConfigStorageConfigS3ConfigOutput] {
	value := pulumix.Apply[InstanceStorageConfigStorageConfig](o, func(v InstanceStorageConfigStorageConfig) *InstanceStorageConfigStorageConfigS3Config {
		return v.S3Config
	})
	return pulumix.GPtrOutput[InstanceStorageConfigStorageConfigS3Config, InstanceStorageConfigStorageConfigS3ConfigOutput]{OutputState: value.OutputState}
}

// A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
func (o InstanceStorageConfigStorageConfigOutput) StorageType() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfig](o, func(v InstanceStorageConfigStorageConfig) string { return v.StorageType })
}

type InstanceStorageConfigStorageConfigKinesisFirehoseConfig struct {
	// The Amazon Resource Name (ARN) of the delivery stream.
	FirehoseArn string `pulumi:"firehoseArn"`
}

type InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs struct {
	// The Amazon Resource Name (ARN) of the delivery stream.
	FirehoseArn pulumix.Input[string] `pulumi:"firehoseArn"`
}

func (InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisFirehoseConfig)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ToInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput() InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ToInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisFirehoseConfig)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ToInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput() InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ToInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfigKinesisFirehoseConfig] {
	return pulumix.Output[InstanceStorageConfigStorageConfigKinesisFirehoseConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the delivery stream.
func (o InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) FirehoseArn() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigKinesisFirehoseConfig](o, func(v InstanceStorageConfigStorageConfigKinesisFirehoseConfig) string { return v.FirehoseArn })
}

type InstanceStorageConfigStorageConfigKinesisStreamConfig struct {
	// The Amazon Resource Name (ARN) of the data stream.
	StreamArn string `pulumi:"streamArn"`
}

type InstanceStorageConfigStorageConfigKinesisStreamConfigArgs struct {
	// The Amazon Resource Name (ARN) of the data stream.
	StreamArn pulumix.Input[string] `pulumi:"streamArn"`
}

func (InstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisStreamConfig)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ToInstanceStorageConfigStorageConfigKinesisStreamConfigOutput() InstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigKinesisStreamConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ToInstanceStorageConfigStorageConfigKinesisStreamConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigKinesisStreamConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigKinesisStreamConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigKinesisStreamConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisStreamConfig)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ToInstanceStorageConfigStorageConfigKinesisStreamConfigOutput() InstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ToInstanceStorageConfigStorageConfigKinesisStreamConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfigKinesisStreamConfig] {
	return pulumix.Output[InstanceStorageConfigStorageConfigKinesisStreamConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the data stream.
func (o InstanceStorageConfigStorageConfigKinesisStreamConfigOutput) StreamArn() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigKinesisStreamConfig](o, func(v InstanceStorageConfigStorageConfigKinesisStreamConfig) string { return v.StreamArn })
}

type InstanceStorageConfigStorageConfigKinesisVideoStreamConfig struct {
	// The encryption configuration. Documented below.
	EncryptionConfig InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig `pulumi:"encryptionConfig"`
	// The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
	Prefix string `pulumi:"prefix"`
	// The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.
	RetentionPeriodHours int `pulumi:"retentionPeriodHours"`
}

type InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs struct {
	// The encryption configuration. Documented below.
	EncryptionConfig pulumix.Input[*InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs] `pulumi:"encryptionConfig"`
	// The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
	Prefix pulumix.Input[string] `pulumi:"prefix"`
	// The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.
	RetentionPeriodHours pulumix.Input[int] `pulumi:"retentionPeriodHours"`
}

func (InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisVideoStreamConfig)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput() InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisVideoStreamConfig)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput() InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig] {
	return pulumix.Output[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig]{
		OutputState: o.OutputState,
	}
}

// The encryption configuration. Documented below.
func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) EncryptionConfig() pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig, InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput] {
	value := pulumix.Apply[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig](o, func(v InstanceStorageConfigStorageConfigKinesisVideoStreamConfig) InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig {
		return v.EncryptionConfig
	})
	return pulumix.GPtrOutput[InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig, InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput]{OutputState: value.OutputState}
}

// The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig](o, func(v InstanceStorageConfigStorageConfigKinesisVideoStreamConfig) string { return v.Prefix })
}

// The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.
func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) RetentionPeriodHours() pulumix.Output[int] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigKinesisVideoStreamConfig](o, func(v InstanceStorageConfigStorageConfigKinesisVideoStreamConfig) int { return v.RetentionPeriodHours })
}

type InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType string `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId string `pulumi:"keyId"`
}

type InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType pulumix.Input[string] `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId pulumix.Input[string] `pulumi:"keyId"`
}

func (InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput() InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput() InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ToInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig] {
	return pulumix.Output[InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The type of encryption. Valid Values: `KMS`.
func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) EncryptionType() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig](o, func(v InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig) string {
		return v.EncryptionType
	})
}

// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
func (o InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig](o, func(v InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig) string {
		return v.KeyId
	})
}

type InstanceStorageConfigStorageConfigS3Config struct {
	// The S3 bucket name.
	BucketName string `pulumi:"bucketName"`
	// The S3 bucket prefix.
	BucketPrefix string `pulumi:"bucketPrefix"`
	// The encryption configuration. Documented below.
	EncryptionConfig *InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig `pulumi:"encryptionConfig"`
}

type InstanceStorageConfigStorageConfigS3ConfigArgs struct {
	// The S3 bucket name.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The S3 bucket prefix.
	BucketPrefix pulumix.Input[string] `pulumi:"bucketPrefix"`
	// The encryption configuration. Documented below.
	EncryptionConfig pulumix.Input[*InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs] `pulumi:"encryptionConfig"`
}

func (InstanceStorageConfigStorageConfigS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigS3Config)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigS3ConfigArgs) ToInstanceStorageConfigStorageConfigS3ConfigOutput() InstanceStorageConfigStorageConfigS3ConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigS3ConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigS3ConfigArgs) ToInstanceStorageConfigStorageConfigS3ConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigS3ConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigS3ConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigS3ConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigS3ConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigS3Config)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigS3ConfigOutput) ToInstanceStorageConfigStorageConfigS3ConfigOutput() InstanceStorageConfigStorageConfigS3ConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigS3ConfigOutput) ToInstanceStorageConfigStorageConfigS3ConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigS3ConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigS3ConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfigS3Config] {
	return pulumix.Output[InstanceStorageConfigStorageConfigS3Config]{
		OutputState: o.OutputState,
	}
}

// The S3 bucket name.
func (o InstanceStorageConfigStorageConfigS3ConfigOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigS3Config](o, func(v InstanceStorageConfigStorageConfigS3Config) string { return v.BucketName })
}

// The S3 bucket prefix.
func (o InstanceStorageConfigStorageConfigS3ConfigOutput) BucketPrefix() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigS3Config](o, func(v InstanceStorageConfigStorageConfigS3Config) string { return v.BucketPrefix })
}

// The encryption configuration. Documented below.
func (o InstanceStorageConfigStorageConfigS3ConfigOutput) EncryptionConfig() pulumix.GPtrOutput[InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig, InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput] {
	value := pulumix.Apply[InstanceStorageConfigStorageConfigS3Config](o, func(v InstanceStorageConfigStorageConfigS3Config) *InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig {
		return v.EncryptionConfig
	})
	return pulumix.GPtrOutput[InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig, InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput]{OutputState: value.OutputState}
}

type InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType string `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId string `pulumi:"keyId"`
}

type InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType pulumix.Input[string] `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId pulumix.Input[string] `pulumi:"keyId"`
}

func (InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig)(nil)).Elem()
}

func (i InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ToInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput() InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return i.ToInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputWithContext(context.Background())
}

func (i InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ToInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput)
}

func (i *InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs] {
	return pulumix.Val(i)
}

type InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig)(nil)).Elem()
}

func (o InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ToInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput() InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ToInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputWithContext(ctx context.Context) InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return o
}

func (o InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig] {
	return pulumix.Output[InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The type of encryption. Valid Values: `KMS`.
func (o InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) EncryptionType() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig](o, func(v InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig) string { return v.EncryptionType })
}

// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
func (o InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig](o, func(v InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig) string { return v.KeyId })
}

type PhoneNumberStatus struct {
	// The status message.
	Message *string `pulumi:"message"`
	// The status of the phone number. Valid Values: `CLAIMED` | `IN_PROGRESS` | `FAILED`.
	Status *string `pulumi:"status"`
}

type PhoneNumberStatusArgs struct {
	// The status message.
	Message pulumix.Input[*string] `pulumi:"message"`
	// The status of the phone number. Valid Values: `CLAIMED` | `IN_PROGRESS` | `FAILED`.
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (PhoneNumberStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoneNumberStatus)(nil)).Elem()
}

func (i PhoneNumberStatusArgs) ToPhoneNumberStatusOutput() PhoneNumberStatusOutput {
	return i.ToPhoneNumberStatusOutputWithContext(context.Background())
}

func (i PhoneNumberStatusArgs) ToPhoneNumberStatusOutputWithContext(ctx context.Context) PhoneNumberStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoneNumberStatusOutput)
}

func (i *PhoneNumberStatusArgs) ToOutput(ctx context.Context) pulumix.Output[*PhoneNumberStatusArgs] {
	return pulumix.Val(i)
}

type PhoneNumberStatusOutput struct{ *pulumi.OutputState }

func (PhoneNumberStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoneNumberStatus)(nil)).Elem()
}

func (o PhoneNumberStatusOutput) ToPhoneNumberStatusOutput() PhoneNumberStatusOutput {
	return o
}

func (o PhoneNumberStatusOutput) ToPhoneNumberStatusOutputWithContext(ctx context.Context) PhoneNumberStatusOutput {
	return o
}

func (o PhoneNumberStatusOutput) ToOutput(ctx context.Context) pulumix.Output[PhoneNumberStatus] {
	return pulumix.Output[PhoneNumberStatus]{
		OutputState: o.OutputState,
	}
}

// The status message.
func (o PhoneNumberStatusOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[PhoneNumberStatus](o, func(v PhoneNumberStatus) *string { return v.Message })
}

// The status of the phone number. Valid Values: `CLAIMED` | `IN_PROGRESS` | `FAILED`.
func (o PhoneNumberStatusOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[PhoneNumberStatus](o, func(v PhoneNumberStatus) *string { return v.Status })
}

type QueueOutboundCallerConfig struct {
	// Specifies the caller ID name.
	OutboundCallerIdName *string `pulumi:"outboundCallerIdName"`
	// Specifies the caller ID number.
	OutboundCallerIdNumberId *string `pulumi:"outboundCallerIdNumberId"`
	// Specifies outbound whisper flow to be used during an outbound call.
	OutboundFlowId *string `pulumi:"outboundFlowId"`
}

type QueueOutboundCallerConfigArgs struct {
	// Specifies the caller ID name.
	OutboundCallerIdName pulumix.Input[*string] `pulumi:"outboundCallerIdName"`
	// Specifies the caller ID number.
	OutboundCallerIdNumberId pulumix.Input[*string] `pulumi:"outboundCallerIdNumberId"`
	// Specifies outbound whisper flow to be used during an outbound call.
	OutboundFlowId pulumix.Input[*string] `pulumi:"outboundFlowId"`
}

func (QueueOutboundCallerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueOutboundCallerConfig)(nil)).Elem()
}

func (i QueueOutboundCallerConfigArgs) ToQueueOutboundCallerConfigOutput() QueueOutboundCallerConfigOutput {
	return i.ToQueueOutboundCallerConfigOutputWithContext(context.Background())
}

func (i QueueOutboundCallerConfigArgs) ToQueueOutboundCallerConfigOutputWithContext(ctx context.Context) QueueOutboundCallerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutboundCallerConfigOutput)
}

func (i *QueueOutboundCallerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*QueueOutboundCallerConfigArgs] {
	return pulumix.Val(i)
}

type QueueOutboundCallerConfigOutput struct{ *pulumi.OutputState }

func (QueueOutboundCallerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueOutboundCallerConfig)(nil)).Elem()
}

func (o QueueOutboundCallerConfigOutput) ToQueueOutboundCallerConfigOutput() QueueOutboundCallerConfigOutput {
	return o
}

func (o QueueOutboundCallerConfigOutput) ToQueueOutboundCallerConfigOutputWithContext(ctx context.Context) QueueOutboundCallerConfigOutput {
	return o
}

func (o QueueOutboundCallerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[QueueOutboundCallerConfig] {
	return pulumix.Output[QueueOutboundCallerConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the caller ID name.
func (o QueueOutboundCallerConfigOutput) OutboundCallerIdName() pulumix.Output[*string] {
	return pulumix.Apply[QueueOutboundCallerConfig](o, func(v QueueOutboundCallerConfig) *string { return v.OutboundCallerIdName })
}

// Specifies the caller ID number.
func (o QueueOutboundCallerConfigOutput) OutboundCallerIdNumberId() pulumix.Output[*string] {
	return pulumix.Apply[QueueOutboundCallerConfig](o, func(v QueueOutboundCallerConfig) *string { return v.OutboundCallerIdNumberId })
}

// Specifies outbound whisper flow to be used during an outbound call.
func (o QueueOutboundCallerConfigOutput) OutboundFlowId() pulumix.Output[*string] {
	return pulumix.Apply[QueueOutboundCallerConfig](o, func(v QueueOutboundCallerConfig) *string { return v.OutboundFlowId })
}

type QuickConnectQuickConnectConfig struct {
	// Specifies the phone configuration of the Quick Connect. This is required only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
	PhoneConfigs []QuickConnectQuickConnectConfigPhoneConfig `pulumi:"phoneConfigs"`
	// Specifies the queue configuration of the Quick Connect. This is required only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
	QueueConfigs []QuickConnectQuickConnectConfigQueueConfig `pulumi:"queueConfigs"`
	// Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
	QuickConnectType string `pulumi:"quickConnectType"`
	// Specifies the user configuration of the Quick Connect. This is required only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
	UserConfigs []QuickConnectQuickConnectConfigUserConfig `pulumi:"userConfigs"`
}

type QuickConnectQuickConnectConfigArgs struct {
	// Specifies the phone configuration of the Quick Connect. This is required only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
	PhoneConfigs pulumix.Input[[]*QuickConnectQuickConnectConfigPhoneConfigArgs] `pulumi:"phoneConfigs"`
	// Specifies the queue configuration of the Quick Connect. This is required only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
	QueueConfigs pulumix.Input[[]*QuickConnectQuickConnectConfigQueueConfigArgs] `pulumi:"queueConfigs"`
	// Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
	QuickConnectType pulumix.Input[string] `pulumi:"quickConnectType"`
	// Specifies the user configuration of the Quick Connect. This is required only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
	UserConfigs pulumix.Input[[]*QuickConnectQuickConnectConfigUserConfigArgs] `pulumi:"userConfigs"`
}

func (QuickConnectQuickConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfig)(nil)).Elem()
}

func (i QuickConnectQuickConnectConfigArgs) ToQuickConnectQuickConnectConfigOutput() QuickConnectQuickConnectConfigOutput {
	return i.ToQuickConnectQuickConnectConfigOutputWithContext(context.Background())
}

func (i QuickConnectQuickConnectConfigArgs) ToQuickConnectQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQuickConnectConfigOutput)
}

func (i *QuickConnectQuickConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*QuickConnectQuickConnectConfigArgs] {
	return pulumix.Val(i)
}

type QuickConnectQuickConnectConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectQuickConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectQuickConnectConfigOutput) ToQuickConnectQuickConnectConfigOutput() QuickConnectQuickConnectConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigOutput) ToQuickConnectQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[QuickConnectQuickConnectConfig] {
	return pulumix.Output[QuickConnectQuickConnectConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the phone configuration of the Quick Connect. This is required only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
func (o QuickConnectQuickConnectConfigOutput) PhoneConfigs() pulumix.GArrayOutput[QuickConnectQuickConnectConfigPhoneConfig, QuickConnectQuickConnectConfigPhoneConfigOutput] {
	value := pulumix.Apply[QuickConnectQuickConnectConfig](o, func(v QuickConnectQuickConnectConfig) []QuickConnectQuickConnectConfigPhoneConfig {
		return v.PhoneConfigs
	})
	return pulumix.GArrayOutput[QuickConnectQuickConnectConfigPhoneConfig, QuickConnectQuickConnectConfigPhoneConfigOutput]{OutputState: value.OutputState}
}

// Specifies the queue configuration of the Quick Connect. This is required only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
func (o QuickConnectQuickConnectConfigOutput) QueueConfigs() pulumix.GArrayOutput[QuickConnectQuickConnectConfigQueueConfig, QuickConnectQuickConnectConfigQueueConfigOutput] {
	value := pulumix.Apply[QuickConnectQuickConnectConfig](o, func(v QuickConnectQuickConnectConfig) []QuickConnectQuickConnectConfigQueueConfig {
		return v.QueueConfigs
	})
	return pulumix.GArrayOutput[QuickConnectQuickConnectConfigQueueConfig, QuickConnectQuickConnectConfigQueueConfigOutput]{OutputState: value.OutputState}
}

// Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
func (o QuickConnectQuickConnectConfigOutput) QuickConnectType() pulumix.Output[string] {
	return pulumix.Apply[QuickConnectQuickConnectConfig](o, func(v QuickConnectQuickConnectConfig) string { return v.QuickConnectType })
}

// Specifies the user configuration of the Quick Connect. This is required only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
func (o QuickConnectQuickConnectConfigOutput) UserConfigs() pulumix.GArrayOutput[QuickConnectQuickConnectConfigUserConfig, QuickConnectQuickConnectConfigUserConfigOutput] {
	value := pulumix.Apply[QuickConnectQuickConnectConfig](o, func(v QuickConnectQuickConnectConfig) []QuickConnectQuickConnectConfigUserConfig {
		return v.UserConfigs
	})
	return pulumix.GArrayOutput[QuickConnectQuickConnectConfigUserConfig, QuickConnectQuickConnectConfigUserConfigOutput]{OutputState: value.OutputState}
}

type QuickConnectQuickConnectConfigPhoneConfig struct {
	// Specifies the phone number in in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

type QuickConnectQuickConnectConfigPhoneConfigArgs struct {
	// Specifies the phone number in in E.164 format.
	PhoneNumber pulumix.Input[string] `pulumi:"phoneNumber"`
}

func (QuickConnectQuickConnectConfigPhoneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfigPhoneConfig)(nil)).Elem()
}

func (i QuickConnectQuickConnectConfigPhoneConfigArgs) ToQuickConnectQuickConnectConfigPhoneConfigOutput() QuickConnectQuickConnectConfigPhoneConfigOutput {
	return i.ToQuickConnectQuickConnectConfigPhoneConfigOutputWithContext(context.Background())
}

func (i QuickConnectQuickConnectConfigPhoneConfigArgs) ToQuickConnectQuickConnectConfigPhoneConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigPhoneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQuickConnectConfigPhoneConfigOutput)
}

func (i *QuickConnectQuickConnectConfigPhoneConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*QuickConnectQuickConnectConfigPhoneConfigArgs] {
	return pulumix.Val(i)
}

type QuickConnectQuickConnectConfigPhoneConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectQuickConnectConfigPhoneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfigPhoneConfig)(nil)).Elem()
}

func (o QuickConnectQuickConnectConfigPhoneConfigOutput) ToQuickConnectQuickConnectConfigPhoneConfigOutput() QuickConnectQuickConnectConfigPhoneConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigPhoneConfigOutput) ToQuickConnectQuickConnectConfigPhoneConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigPhoneConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigPhoneConfigOutput) ToOutput(ctx context.Context) pulumix.Output[QuickConnectQuickConnectConfigPhoneConfig] {
	return pulumix.Output[QuickConnectQuickConnectConfigPhoneConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the phone number in in E.164 format.
func (o QuickConnectQuickConnectConfigPhoneConfigOutput) PhoneNumber() pulumix.Output[string] {
	return pulumix.Apply[QuickConnectQuickConnectConfigPhoneConfig](o, func(v QuickConnectQuickConnectConfigPhoneConfig) string { return v.PhoneNumber })
}

type QuickConnectQuickConnectConfigQueueConfig struct {
	// Specifies the identifier of the contact flow.
	ContactFlowId string `pulumi:"contactFlowId"`
	// Specifies the identifier for the queue.
	QueueId string `pulumi:"queueId"`
}

type QuickConnectQuickConnectConfigQueueConfigArgs struct {
	// Specifies the identifier of the contact flow.
	ContactFlowId pulumix.Input[string] `pulumi:"contactFlowId"`
	// Specifies the identifier for the queue.
	QueueId pulumix.Input[string] `pulumi:"queueId"`
}

func (QuickConnectQuickConnectConfigQueueConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfigQueueConfig)(nil)).Elem()
}

func (i QuickConnectQuickConnectConfigQueueConfigArgs) ToQuickConnectQuickConnectConfigQueueConfigOutput() QuickConnectQuickConnectConfigQueueConfigOutput {
	return i.ToQuickConnectQuickConnectConfigQueueConfigOutputWithContext(context.Background())
}

func (i QuickConnectQuickConnectConfigQueueConfigArgs) ToQuickConnectQuickConnectConfigQueueConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigQueueConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQuickConnectConfigQueueConfigOutput)
}

func (i *QuickConnectQuickConnectConfigQueueConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*QuickConnectQuickConnectConfigQueueConfigArgs] {
	return pulumix.Val(i)
}

type QuickConnectQuickConnectConfigQueueConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectQuickConnectConfigQueueConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfigQueueConfig)(nil)).Elem()
}

func (o QuickConnectQuickConnectConfigQueueConfigOutput) ToQuickConnectQuickConnectConfigQueueConfigOutput() QuickConnectQuickConnectConfigQueueConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigQueueConfigOutput) ToQuickConnectQuickConnectConfigQueueConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigQueueConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigQueueConfigOutput) ToOutput(ctx context.Context) pulumix.Output[QuickConnectQuickConnectConfigQueueConfig] {
	return pulumix.Output[QuickConnectQuickConnectConfigQueueConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identifier of the contact flow.
func (o QuickConnectQuickConnectConfigQueueConfigOutput) ContactFlowId() pulumix.Output[string] {
	return pulumix.Apply[QuickConnectQuickConnectConfigQueueConfig](o, func(v QuickConnectQuickConnectConfigQueueConfig) string { return v.ContactFlowId })
}

// Specifies the identifier for the queue.
func (o QuickConnectQuickConnectConfigQueueConfigOutput) QueueId() pulumix.Output[string] {
	return pulumix.Apply[QuickConnectQuickConnectConfigQueueConfig](o, func(v QuickConnectQuickConnectConfigQueueConfig) string { return v.QueueId })
}

type QuickConnectQuickConnectConfigUserConfig struct {
	// Specifies the identifier of the contact flow.
	ContactFlowId string `pulumi:"contactFlowId"`
	// Specifies the identifier for the user.
	UserId string `pulumi:"userId"`
}

type QuickConnectQuickConnectConfigUserConfigArgs struct {
	// Specifies the identifier of the contact flow.
	ContactFlowId pulumix.Input[string] `pulumi:"contactFlowId"`
	// Specifies the identifier for the user.
	UserId pulumix.Input[string] `pulumi:"userId"`
}

func (QuickConnectQuickConnectConfigUserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfigUserConfig)(nil)).Elem()
}

func (i QuickConnectQuickConnectConfigUserConfigArgs) ToQuickConnectQuickConnectConfigUserConfigOutput() QuickConnectQuickConnectConfigUserConfigOutput {
	return i.ToQuickConnectQuickConnectConfigUserConfigOutputWithContext(context.Background())
}

func (i QuickConnectQuickConnectConfigUserConfigArgs) ToQuickConnectQuickConnectConfigUserConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigUserConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQuickConnectConfigUserConfigOutput)
}

func (i *QuickConnectQuickConnectConfigUserConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*QuickConnectQuickConnectConfigUserConfigArgs] {
	return pulumix.Val(i)
}

type QuickConnectQuickConnectConfigUserConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectQuickConnectConfigUserConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQuickConnectConfigUserConfig)(nil)).Elem()
}

func (o QuickConnectQuickConnectConfigUserConfigOutput) ToQuickConnectQuickConnectConfigUserConfigOutput() QuickConnectQuickConnectConfigUserConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigUserConfigOutput) ToQuickConnectQuickConnectConfigUserConfigOutputWithContext(ctx context.Context) QuickConnectQuickConnectConfigUserConfigOutput {
	return o
}

func (o QuickConnectQuickConnectConfigUserConfigOutput) ToOutput(ctx context.Context) pulumix.Output[QuickConnectQuickConnectConfigUserConfig] {
	return pulumix.Output[QuickConnectQuickConnectConfigUserConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identifier of the contact flow.
func (o QuickConnectQuickConnectConfigUserConfigOutput) ContactFlowId() pulumix.Output[string] {
	return pulumix.Apply[QuickConnectQuickConnectConfigUserConfig](o, func(v QuickConnectQuickConnectConfigUserConfig) string { return v.ContactFlowId })
}

// Specifies the identifier for the user.
func (o QuickConnectQuickConnectConfigUserConfigOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[QuickConnectQuickConnectConfigUserConfig](o, func(v QuickConnectQuickConnectConfigUserConfig) string { return v.UserId })
}

type RoutingProfileMediaConcurrency struct {
	// Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel string `pulumi:"channel"`
	// Specifies the number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
	Concurrency int `pulumi:"concurrency"`
}

type RoutingProfileMediaConcurrencyArgs struct {
	// Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel pulumix.Input[string] `pulumi:"channel"`
	// Specifies the number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
	Concurrency pulumix.Input[int] `pulumi:"concurrency"`
}

func (RoutingProfileMediaConcurrencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingProfileMediaConcurrency)(nil)).Elem()
}

func (i RoutingProfileMediaConcurrencyArgs) ToRoutingProfileMediaConcurrencyOutput() RoutingProfileMediaConcurrencyOutput {
	return i.ToRoutingProfileMediaConcurrencyOutputWithContext(context.Background())
}

func (i RoutingProfileMediaConcurrencyArgs) ToRoutingProfileMediaConcurrencyOutputWithContext(ctx context.Context) RoutingProfileMediaConcurrencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingProfileMediaConcurrencyOutput)
}

func (i *RoutingProfileMediaConcurrencyArgs) ToOutput(ctx context.Context) pulumix.Output[*RoutingProfileMediaConcurrencyArgs] {
	return pulumix.Val(i)
}

type RoutingProfileMediaConcurrencyOutput struct{ *pulumi.OutputState }

func (RoutingProfileMediaConcurrencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingProfileMediaConcurrency)(nil)).Elem()
}

func (o RoutingProfileMediaConcurrencyOutput) ToRoutingProfileMediaConcurrencyOutput() RoutingProfileMediaConcurrencyOutput {
	return o
}

func (o RoutingProfileMediaConcurrencyOutput) ToRoutingProfileMediaConcurrencyOutputWithContext(ctx context.Context) RoutingProfileMediaConcurrencyOutput {
	return o
}

func (o RoutingProfileMediaConcurrencyOutput) ToOutput(ctx context.Context) pulumix.Output[RoutingProfileMediaConcurrency] {
	return pulumix.Output[RoutingProfileMediaConcurrency]{
		OutputState: o.OutputState,
	}
}

// Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
func (o RoutingProfileMediaConcurrencyOutput) Channel() pulumix.Output[string] {
	return pulumix.Apply[RoutingProfileMediaConcurrency](o, func(v RoutingProfileMediaConcurrency) string { return v.Channel })
}

// Specifies the number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
func (o RoutingProfileMediaConcurrencyOutput) Concurrency() pulumix.Output[int] {
	return pulumix.Apply[RoutingProfileMediaConcurrency](o, func(v RoutingProfileMediaConcurrency) int { return v.Concurrency })
}

type RoutingProfileQueueConfig struct {
	// Specifies the channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel string `pulumi:"channel"`
	// Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
	Delay int `pulumi:"delay"`
	// Specifies the order in which contacts are to be handled for the queue.
	Priority int `pulumi:"priority"`
	// ARN for the queue.
	QueueArn *string `pulumi:"queueArn"`
	// Specifies the identifier for the queue.
	QueueId string `pulumi:"queueId"`
	// Name for the queue.
	QueueName *string `pulumi:"queueName"`
}

type RoutingProfileQueueConfigArgs struct {
	// Specifies the channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel pulumix.Input[string] `pulumi:"channel"`
	// Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
	Delay pulumix.Input[int] `pulumi:"delay"`
	// Specifies the order in which contacts are to be handled for the queue.
	Priority pulumix.Input[int] `pulumi:"priority"`
	// ARN for the queue.
	QueueArn pulumix.Input[*string] `pulumi:"queueArn"`
	// Specifies the identifier for the queue.
	QueueId pulumix.Input[string] `pulumi:"queueId"`
	// Name for the queue.
	QueueName pulumix.Input[*string] `pulumi:"queueName"`
}

func (RoutingProfileQueueConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingProfileQueueConfig)(nil)).Elem()
}

func (i RoutingProfileQueueConfigArgs) ToRoutingProfileQueueConfigOutput() RoutingProfileQueueConfigOutput {
	return i.ToRoutingProfileQueueConfigOutputWithContext(context.Background())
}

func (i RoutingProfileQueueConfigArgs) ToRoutingProfileQueueConfigOutputWithContext(ctx context.Context) RoutingProfileQueueConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingProfileQueueConfigOutput)
}

func (i *RoutingProfileQueueConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*RoutingProfileQueueConfigArgs] {
	return pulumix.Val(i)
}

type RoutingProfileQueueConfigOutput struct{ *pulumi.OutputState }

func (RoutingProfileQueueConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingProfileQueueConfig)(nil)).Elem()
}

func (o RoutingProfileQueueConfigOutput) ToRoutingProfileQueueConfigOutput() RoutingProfileQueueConfigOutput {
	return o
}

func (o RoutingProfileQueueConfigOutput) ToRoutingProfileQueueConfigOutputWithContext(ctx context.Context) RoutingProfileQueueConfigOutput {
	return o
}

func (o RoutingProfileQueueConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RoutingProfileQueueConfig] {
	return pulumix.Output[RoutingProfileQueueConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
func (o RoutingProfileQueueConfigOutput) Channel() pulumix.Output[string] {
	return pulumix.Apply[RoutingProfileQueueConfig](o, func(v RoutingProfileQueueConfig) string { return v.Channel })
}

// Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
func (o RoutingProfileQueueConfigOutput) Delay() pulumix.Output[int] {
	return pulumix.Apply[RoutingProfileQueueConfig](o, func(v RoutingProfileQueueConfig) int { return v.Delay })
}

// Specifies the order in which contacts are to be handled for the queue.
func (o RoutingProfileQueueConfigOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[RoutingProfileQueueConfig](o, func(v RoutingProfileQueueConfig) int { return v.Priority })
}

// ARN for the queue.
func (o RoutingProfileQueueConfigOutput) QueueArn() pulumix.Output[*string] {
	return pulumix.Apply[RoutingProfileQueueConfig](o, func(v RoutingProfileQueueConfig) *string { return v.QueueArn })
}

// Specifies the identifier for the queue.
func (o RoutingProfileQueueConfigOutput) QueueId() pulumix.Output[string] {
	return pulumix.Apply[RoutingProfileQueueConfig](o, func(v RoutingProfileQueueConfig) string { return v.QueueId })
}

// Name for the queue.
func (o RoutingProfileQueueConfigOutput) QueueName() pulumix.Output[*string] {
	return pulumix.Apply[RoutingProfileQueueConfig](o, func(v RoutingProfileQueueConfig) *string { return v.QueueName })
}

type UserHierarchyGroupHierarchyPath struct {
	// A block that defines the details of level five. The level block is documented below.
	LevelFives []UserHierarchyGroupHierarchyPathLevelFife `pulumi:"levelFives"`
	// A block that defines the details of level four. The level block is documented below.
	LevelFours []UserHierarchyGroupHierarchyPathLevelFour `pulumi:"levelFours"`
	// A block that defines the details of level one. The level block is documented below.
	LevelOnes []UserHierarchyGroupHierarchyPathLevelOne `pulumi:"levelOnes"`
	// A block that defines the details of level three. The level block is documented below.
	LevelThrees []UserHierarchyGroupHierarchyPathLevelThree `pulumi:"levelThrees"`
	// A block that defines the details of level two. The level block is documented below.
	LevelTwos []UserHierarchyGroupHierarchyPathLevelTwo `pulumi:"levelTwos"`
}

type UserHierarchyGroupHierarchyPathArgs struct {
	// A block that defines the details of level five. The level block is documented below.
	LevelFives pulumix.Input[[]*UserHierarchyGroupHierarchyPathLevelFifeArgs] `pulumi:"levelFives"`
	// A block that defines the details of level four. The level block is documented below.
	LevelFours pulumix.Input[[]*UserHierarchyGroupHierarchyPathLevelFourArgs] `pulumi:"levelFours"`
	// A block that defines the details of level one. The level block is documented below.
	LevelOnes pulumix.Input[[]*UserHierarchyGroupHierarchyPathLevelOneArgs] `pulumi:"levelOnes"`
	// A block that defines the details of level three. The level block is documented below.
	LevelThrees pulumix.Input[[]*UserHierarchyGroupHierarchyPathLevelThreeArgs] `pulumi:"levelThrees"`
	// A block that defines the details of level two. The level block is documented below.
	LevelTwos pulumix.Input[[]*UserHierarchyGroupHierarchyPathLevelTwoArgs] `pulumi:"levelTwos"`
}

func (UserHierarchyGroupHierarchyPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPath)(nil)).Elem()
}

func (i UserHierarchyGroupHierarchyPathArgs) ToUserHierarchyGroupHierarchyPathOutput() UserHierarchyGroupHierarchyPathOutput {
	return i.ToUserHierarchyGroupHierarchyPathOutputWithContext(context.Background())
}

func (i UserHierarchyGroupHierarchyPathArgs) ToUserHierarchyGroupHierarchyPathOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupHierarchyPathOutput)
}

func (i *UserHierarchyGroupHierarchyPathArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyGroupHierarchyPathArgs] {
	return pulumix.Val(i)
}

type UserHierarchyGroupHierarchyPathOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupHierarchyPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPath)(nil)).Elem()
}

func (o UserHierarchyGroupHierarchyPathOutput) ToUserHierarchyGroupHierarchyPathOutput() UserHierarchyGroupHierarchyPathOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathOutput) ToUserHierarchyGroupHierarchyPathOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyGroupHierarchyPath] {
	return pulumix.Output[UserHierarchyGroupHierarchyPath]{
		OutputState: o.OutputState,
	}
}

// A block that defines the details of level five. The level block is documented below.
func (o UserHierarchyGroupHierarchyPathOutput) LevelFives() pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelFife, UserHierarchyGroupHierarchyPathLevelFifeOutput] {
	value := pulumix.Apply[UserHierarchyGroupHierarchyPath](o, func(v UserHierarchyGroupHierarchyPath) []UserHierarchyGroupHierarchyPathLevelFife {
		return v.LevelFives
	})
	return pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelFife, UserHierarchyGroupHierarchyPathLevelFifeOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level four. The level block is documented below.
func (o UserHierarchyGroupHierarchyPathOutput) LevelFours() pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelFour, UserHierarchyGroupHierarchyPathLevelFourOutput] {
	value := pulumix.Apply[UserHierarchyGroupHierarchyPath](o, func(v UserHierarchyGroupHierarchyPath) []UserHierarchyGroupHierarchyPathLevelFour {
		return v.LevelFours
	})
	return pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelFour, UserHierarchyGroupHierarchyPathLevelFourOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level one. The level block is documented below.
func (o UserHierarchyGroupHierarchyPathOutput) LevelOnes() pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelOne, UserHierarchyGroupHierarchyPathLevelOneOutput] {
	value := pulumix.Apply[UserHierarchyGroupHierarchyPath](o, func(v UserHierarchyGroupHierarchyPath) []UserHierarchyGroupHierarchyPathLevelOne { return v.LevelOnes })
	return pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelOne, UserHierarchyGroupHierarchyPathLevelOneOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level three. The level block is documented below.
func (o UserHierarchyGroupHierarchyPathOutput) LevelThrees() pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelThree, UserHierarchyGroupHierarchyPathLevelThreeOutput] {
	value := pulumix.Apply[UserHierarchyGroupHierarchyPath](o, func(v UserHierarchyGroupHierarchyPath) []UserHierarchyGroupHierarchyPathLevelThree {
		return v.LevelThrees
	})
	return pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelThree, UserHierarchyGroupHierarchyPathLevelThreeOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level two. The level block is documented below.
func (o UserHierarchyGroupHierarchyPathOutput) LevelTwos() pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelTwo, UserHierarchyGroupHierarchyPathLevelTwoOutput] {
	value := pulumix.Apply[UserHierarchyGroupHierarchyPath](o, func(v UserHierarchyGroupHierarchyPath) []UserHierarchyGroupHierarchyPathLevelTwo { return v.LevelTwos })
	return pulumix.GArrayOutput[UserHierarchyGroupHierarchyPathLevelTwo, UserHierarchyGroupHierarchyPathLevelTwoOutput]{OutputState: value.OutputState}
}

type UserHierarchyGroupHierarchyPathLevelFife struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
}

type UserHierarchyGroupHierarchyPathLevelFifeArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (UserHierarchyGroupHierarchyPathLevelFifeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelFife)(nil)).Elem()
}

func (i UserHierarchyGroupHierarchyPathLevelFifeArgs) ToUserHierarchyGroupHierarchyPathLevelFifeOutput() UserHierarchyGroupHierarchyPathLevelFifeOutput {
	return i.ToUserHierarchyGroupHierarchyPathLevelFifeOutputWithContext(context.Background())
}

func (i UserHierarchyGroupHierarchyPathLevelFifeArgs) ToUserHierarchyGroupHierarchyPathLevelFifeOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelFifeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupHierarchyPathLevelFifeOutput)
}

func (i *UserHierarchyGroupHierarchyPathLevelFifeArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyGroupHierarchyPathLevelFifeArgs] {
	return pulumix.Val(i)
}

type UserHierarchyGroupHierarchyPathLevelFifeOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupHierarchyPathLevelFifeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelFife)(nil)).Elem()
}

func (o UserHierarchyGroupHierarchyPathLevelFifeOutput) ToUserHierarchyGroupHierarchyPathLevelFifeOutput() UserHierarchyGroupHierarchyPathLevelFifeOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelFifeOutput) ToUserHierarchyGroupHierarchyPathLevelFifeOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelFifeOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelFifeOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyGroupHierarchyPathLevelFife] {
	return pulumix.Output[UserHierarchyGroupHierarchyPathLevelFife]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelFifeOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelFife](o, func(v UserHierarchyGroupHierarchyPathLevelFife) *string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelFifeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelFife](o, func(v UserHierarchyGroupHierarchyPathLevelFife) *string { return v.Id })
}

// The name of the user hierarchy group. Must not be more than 100 characters.
func (o UserHierarchyGroupHierarchyPathLevelFifeOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelFife](o, func(v UserHierarchyGroupHierarchyPathLevelFife) *string { return v.Name })
}

type UserHierarchyGroupHierarchyPathLevelFour struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
}

type UserHierarchyGroupHierarchyPathLevelFourArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (UserHierarchyGroupHierarchyPathLevelFourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelFour)(nil)).Elem()
}

func (i UserHierarchyGroupHierarchyPathLevelFourArgs) ToUserHierarchyGroupHierarchyPathLevelFourOutput() UserHierarchyGroupHierarchyPathLevelFourOutput {
	return i.ToUserHierarchyGroupHierarchyPathLevelFourOutputWithContext(context.Background())
}

func (i UserHierarchyGroupHierarchyPathLevelFourArgs) ToUserHierarchyGroupHierarchyPathLevelFourOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelFourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupHierarchyPathLevelFourOutput)
}

func (i *UserHierarchyGroupHierarchyPathLevelFourArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyGroupHierarchyPathLevelFourArgs] {
	return pulumix.Val(i)
}

type UserHierarchyGroupHierarchyPathLevelFourOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupHierarchyPathLevelFourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelFour)(nil)).Elem()
}

func (o UserHierarchyGroupHierarchyPathLevelFourOutput) ToUserHierarchyGroupHierarchyPathLevelFourOutput() UserHierarchyGroupHierarchyPathLevelFourOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelFourOutput) ToUserHierarchyGroupHierarchyPathLevelFourOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelFourOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelFourOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyGroupHierarchyPathLevelFour] {
	return pulumix.Output[UserHierarchyGroupHierarchyPathLevelFour]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelFourOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelFour](o, func(v UserHierarchyGroupHierarchyPathLevelFour) *string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelFourOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelFour](o, func(v UserHierarchyGroupHierarchyPathLevelFour) *string { return v.Id })
}

// The name of the user hierarchy group. Must not be more than 100 characters.
func (o UserHierarchyGroupHierarchyPathLevelFourOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelFour](o, func(v UserHierarchyGroupHierarchyPathLevelFour) *string { return v.Name })
}

type UserHierarchyGroupHierarchyPathLevelOne struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
}

type UserHierarchyGroupHierarchyPathLevelOneArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (UserHierarchyGroupHierarchyPathLevelOneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelOne)(nil)).Elem()
}

func (i UserHierarchyGroupHierarchyPathLevelOneArgs) ToUserHierarchyGroupHierarchyPathLevelOneOutput() UserHierarchyGroupHierarchyPathLevelOneOutput {
	return i.ToUserHierarchyGroupHierarchyPathLevelOneOutputWithContext(context.Background())
}

func (i UserHierarchyGroupHierarchyPathLevelOneArgs) ToUserHierarchyGroupHierarchyPathLevelOneOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelOneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupHierarchyPathLevelOneOutput)
}

func (i *UserHierarchyGroupHierarchyPathLevelOneArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyGroupHierarchyPathLevelOneArgs] {
	return pulumix.Val(i)
}

type UserHierarchyGroupHierarchyPathLevelOneOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupHierarchyPathLevelOneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelOne)(nil)).Elem()
}

func (o UserHierarchyGroupHierarchyPathLevelOneOutput) ToUserHierarchyGroupHierarchyPathLevelOneOutput() UserHierarchyGroupHierarchyPathLevelOneOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelOneOutput) ToUserHierarchyGroupHierarchyPathLevelOneOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelOneOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelOneOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyGroupHierarchyPathLevelOne] {
	return pulumix.Output[UserHierarchyGroupHierarchyPathLevelOne]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelOneOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelOne](o, func(v UserHierarchyGroupHierarchyPathLevelOne) *string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelOneOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelOne](o, func(v UserHierarchyGroupHierarchyPathLevelOne) *string { return v.Id })
}

// The name of the user hierarchy group. Must not be more than 100 characters.
func (o UserHierarchyGroupHierarchyPathLevelOneOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelOne](o, func(v UserHierarchyGroupHierarchyPathLevelOne) *string { return v.Name })
}

type UserHierarchyGroupHierarchyPathLevelThree struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
}

type UserHierarchyGroupHierarchyPathLevelThreeArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (UserHierarchyGroupHierarchyPathLevelThreeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelThree)(nil)).Elem()
}

func (i UserHierarchyGroupHierarchyPathLevelThreeArgs) ToUserHierarchyGroupHierarchyPathLevelThreeOutput() UserHierarchyGroupHierarchyPathLevelThreeOutput {
	return i.ToUserHierarchyGroupHierarchyPathLevelThreeOutputWithContext(context.Background())
}

func (i UserHierarchyGroupHierarchyPathLevelThreeArgs) ToUserHierarchyGroupHierarchyPathLevelThreeOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelThreeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupHierarchyPathLevelThreeOutput)
}

func (i *UserHierarchyGroupHierarchyPathLevelThreeArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyGroupHierarchyPathLevelThreeArgs] {
	return pulumix.Val(i)
}

type UserHierarchyGroupHierarchyPathLevelThreeOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupHierarchyPathLevelThreeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelThree)(nil)).Elem()
}

func (o UserHierarchyGroupHierarchyPathLevelThreeOutput) ToUserHierarchyGroupHierarchyPathLevelThreeOutput() UserHierarchyGroupHierarchyPathLevelThreeOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelThreeOutput) ToUserHierarchyGroupHierarchyPathLevelThreeOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelThreeOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelThreeOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyGroupHierarchyPathLevelThree] {
	return pulumix.Output[UserHierarchyGroupHierarchyPathLevelThree]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelThreeOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelThree](o, func(v UserHierarchyGroupHierarchyPathLevelThree) *string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelThreeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelThree](o, func(v UserHierarchyGroupHierarchyPathLevelThree) *string { return v.Id })
}

// The name of the user hierarchy group. Must not be more than 100 characters.
func (o UserHierarchyGroupHierarchyPathLevelThreeOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelThree](o, func(v UserHierarchyGroupHierarchyPathLevelThree) *string { return v.Name })
}

type UserHierarchyGroupHierarchyPathLevelTwo struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name *string `pulumi:"name"`
}

type UserHierarchyGroupHierarchyPathLevelTwoArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy group. Must not be more than 100 characters.
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (UserHierarchyGroupHierarchyPathLevelTwoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelTwo)(nil)).Elem()
}

func (i UserHierarchyGroupHierarchyPathLevelTwoArgs) ToUserHierarchyGroupHierarchyPathLevelTwoOutput() UserHierarchyGroupHierarchyPathLevelTwoOutput {
	return i.ToUserHierarchyGroupHierarchyPathLevelTwoOutputWithContext(context.Background())
}

func (i UserHierarchyGroupHierarchyPathLevelTwoArgs) ToUserHierarchyGroupHierarchyPathLevelTwoOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelTwoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyGroupHierarchyPathLevelTwoOutput)
}

func (i *UserHierarchyGroupHierarchyPathLevelTwoArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyGroupHierarchyPathLevelTwoArgs] {
	return pulumix.Val(i)
}

type UserHierarchyGroupHierarchyPathLevelTwoOutput struct{ *pulumi.OutputState }

func (UserHierarchyGroupHierarchyPathLevelTwoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyGroupHierarchyPathLevelTwo)(nil)).Elem()
}

func (o UserHierarchyGroupHierarchyPathLevelTwoOutput) ToUserHierarchyGroupHierarchyPathLevelTwoOutput() UserHierarchyGroupHierarchyPathLevelTwoOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelTwoOutput) ToUserHierarchyGroupHierarchyPathLevelTwoOutputWithContext(ctx context.Context) UserHierarchyGroupHierarchyPathLevelTwoOutput {
	return o
}

func (o UserHierarchyGroupHierarchyPathLevelTwoOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyGroupHierarchyPathLevelTwo] {
	return pulumix.Output[UserHierarchyGroupHierarchyPathLevelTwo]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelTwoOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelTwo](o, func(v UserHierarchyGroupHierarchyPathLevelTwo) *string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o UserHierarchyGroupHierarchyPathLevelTwoOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelTwo](o, func(v UserHierarchyGroupHierarchyPathLevelTwo) *string { return v.Id })
}

// The name of the user hierarchy group. Must not be more than 100 characters.
func (o UserHierarchyGroupHierarchyPathLevelTwoOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyGroupHierarchyPathLevelTwo](o, func(v UserHierarchyGroupHierarchyPathLevelTwo) *string { return v.Name })
}

type UserHierarchyStructureHierarchyStructure struct {
	// A block that defines the details of level five. The level block is documented below.
	//
	// Each level block supports the following arguments:
	LevelFive *UserHierarchyStructureHierarchyStructureLevelFive `pulumi:"levelFive"`
	// A block that defines the details of level four. The level block is documented below.
	LevelFour *UserHierarchyStructureHierarchyStructureLevelFour `pulumi:"levelFour"`
	// A block that defines the details of level one. The level block is documented below.
	LevelOne *UserHierarchyStructureHierarchyStructureLevelOne `pulumi:"levelOne"`
	// A block that defines the details of level three. The level block is documented below.
	LevelThree *UserHierarchyStructureHierarchyStructureLevelThree `pulumi:"levelThree"`
	// A block that defines the details of level two. The level block is documented below.
	LevelTwo *UserHierarchyStructureHierarchyStructureLevelTwo `pulumi:"levelTwo"`
}

type UserHierarchyStructureHierarchyStructureArgs struct {
	// A block that defines the details of level five. The level block is documented below.
	//
	// Each level block supports the following arguments:
	LevelFive pulumix.Input[*UserHierarchyStructureHierarchyStructureLevelFiveArgs] `pulumi:"levelFive"`
	// A block that defines the details of level four. The level block is documented below.
	LevelFour pulumix.Input[*UserHierarchyStructureHierarchyStructureLevelFourArgs] `pulumi:"levelFour"`
	// A block that defines the details of level one. The level block is documented below.
	LevelOne pulumix.Input[*UserHierarchyStructureHierarchyStructureLevelOneArgs] `pulumi:"levelOne"`
	// A block that defines the details of level three. The level block is documented below.
	LevelThree pulumix.Input[*UserHierarchyStructureHierarchyStructureLevelThreeArgs] `pulumi:"levelThree"`
	// A block that defines the details of level two. The level block is documented below.
	LevelTwo pulumix.Input[*UserHierarchyStructureHierarchyStructureLevelTwoArgs] `pulumi:"levelTwo"`
}

func (UserHierarchyStructureHierarchyStructureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructure)(nil)).Elem()
}

func (i UserHierarchyStructureHierarchyStructureArgs) ToUserHierarchyStructureHierarchyStructureOutput() UserHierarchyStructureHierarchyStructureOutput {
	return i.ToUserHierarchyStructureHierarchyStructureOutputWithContext(context.Background())
}

func (i UserHierarchyStructureHierarchyStructureArgs) ToUserHierarchyStructureHierarchyStructureOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyStructureHierarchyStructureOutput)
}

func (i *UserHierarchyStructureHierarchyStructureArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyStructureHierarchyStructureArgs] {
	return pulumix.Val(i)
}

type UserHierarchyStructureHierarchyStructureOutput struct{ *pulumi.OutputState }

func (UserHierarchyStructureHierarchyStructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructure)(nil)).Elem()
}

func (o UserHierarchyStructureHierarchyStructureOutput) ToUserHierarchyStructureHierarchyStructureOutput() UserHierarchyStructureHierarchyStructureOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureOutput) ToUserHierarchyStructureHierarchyStructureOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyStructureHierarchyStructure] {
	return pulumix.Output[UserHierarchyStructureHierarchyStructure]{
		OutputState: o.OutputState,
	}
}

// A block that defines the details of level five. The level block is documented below.
//
// Each level block supports the following arguments:
func (o UserHierarchyStructureHierarchyStructureOutput) LevelFive() pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelFive, UserHierarchyStructureHierarchyStructureLevelFiveOutput] {
	value := pulumix.Apply[UserHierarchyStructureHierarchyStructure](o, func(v UserHierarchyStructureHierarchyStructure) *UserHierarchyStructureHierarchyStructureLevelFive {
		return v.LevelFive
	})
	return pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelFive, UserHierarchyStructureHierarchyStructureLevelFiveOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level four. The level block is documented below.
func (o UserHierarchyStructureHierarchyStructureOutput) LevelFour() pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelFour, UserHierarchyStructureHierarchyStructureLevelFourOutput] {
	value := pulumix.Apply[UserHierarchyStructureHierarchyStructure](o, func(v UserHierarchyStructureHierarchyStructure) *UserHierarchyStructureHierarchyStructureLevelFour {
		return v.LevelFour
	})
	return pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelFour, UserHierarchyStructureHierarchyStructureLevelFourOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level one. The level block is documented below.
func (o UserHierarchyStructureHierarchyStructureOutput) LevelOne() pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelOne, UserHierarchyStructureHierarchyStructureLevelOneOutput] {
	value := pulumix.Apply[UserHierarchyStructureHierarchyStructure](o, func(v UserHierarchyStructureHierarchyStructure) *UserHierarchyStructureHierarchyStructureLevelOne {
		return v.LevelOne
	})
	return pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelOne, UserHierarchyStructureHierarchyStructureLevelOneOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level three. The level block is documented below.
func (o UserHierarchyStructureHierarchyStructureOutput) LevelThree() pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelThree, UserHierarchyStructureHierarchyStructureLevelThreeOutput] {
	value := pulumix.Apply[UserHierarchyStructureHierarchyStructure](o, func(v UserHierarchyStructureHierarchyStructure) *UserHierarchyStructureHierarchyStructureLevelThree {
		return v.LevelThree
	})
	return pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelThree, UserHierarchyStructureHierarchyStructureLevelThreeOutput]{OutputState: value.OutputState}
}

// A block that defines the details of level two. The level block is documented below.
func (o UserHierarchyStructureHierarchyStructureOutput) LevelTwo() pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelTwo, UserHierarchyStructureHierarchyStructureLevelTwoOutput] {
	value := pulumix.Apply[UserHierarchyStructureHierarchyStructure](o, func(v UserHierarchyStructureHierarchyStructure) *UserHierarchyStructureHierarchyStructureLevelTwo {
		return v.LevelTwo
	})
	return pulumix.GPtrOutput[UserHierarchyStructureHierarchyStructureLevelTwo, UserHierarchyStructureHierarchyStructureLevelTwoOutput]{OutputState: value.OutputState}
}

type UserHierarchyStructureHierarchyStructureLevelFive struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type UserHierarchyStructureHierarchyStructureLevelFiveArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (UserHierarchyStructureHierarchyStructureLevelFiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelFive)(nil)).Elem()
}

func (i UserHierarchyStructureHierarchyStructureLevelFiveArgs) ToUserHierarchyStructureHierarchyStructureLevelFiveOutput() UserHierarchyStructureHierarchyStructureLevelFiveOutput {
	return i.ToUserHierarchyStructureHierarchyStructureLevelFiveOutputWithContext(context.Background())
}

func (i UserHierarchyStructureHierarchyStructureLevelFiveArgs) ToUserHierarchyStructureHierarchyStructureLevelFiveOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelFiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyStructureHierarchyStructureLevelFiveOutput)
}

func (i *UserHierarchyStructureHierarchyStructureLevelFiveArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyStructureHierarchyStructureLevelFiveArgs] {
	return pulumix.Val(i)
}

type UserHierarchyStructureHierarchyStructureLevelFiveOutput struct{ *pulumi.OutputState }

func (UserHierarchyStructureHierarchyStructureLevelFiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelFive)(nil)).Elem()
}

func (o UserHierarchyStructureHierarchyStructureLevelFiveOutput) ToUserHierarchyStructureHierarchyStructureLevelFiveOutput() UserHierarchyStructureHierarchyStructureLevelFiveOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelFiveOutput) ToUserHierarchyStructureHierarchyStructureLevelFiveOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelFiveOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelFiveOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyStructureHierarchyStructureLevelFive] {
	return pulumix.Output[UserHierarchyStructureHierarchyStructureLevelFive]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelFiveOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelFive](o, func(v UserHierarchyStructureHierarchyStructureLevelFive) *string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelFiveOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelFive](o, func(v UserHierarchyStructureHierarchyStructureLevelFive) *string { return v.Id })
}

// The name of the user hierarchy level. Must not be more than 50 characters.
func (o UserHierarchyStructureHierarchyStructureLevelFiveOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelFive](o, func(v UserHierarchyStructureHierarchyStructureLevelFive) string { return v.Name })
}

type UserHierarchyStructureHierarchyStructureLevelFour struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type UserHierarchyStructureHierarchyStructureLevelFourArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (UserHierarchyStructureHierarchyStructureLevelFourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelFour)(nil)).Elem()
}

func (i UserHierarchyStructureHierarchyStructureLevelFourArgs) ToUserHierarchyStructureHierarchyStructureLevelFourOutput() UserHierarchyStructureHierarchyStructureLevelFourOutput {
	return i.ToUserHierarchyStructureHierarchyStructureLevelFourOutputWithContext(context.Background())
}

func (i UserHierarchyStructureHierarchyStructureLevelFourArgs) ToUserHierarchyStructureHierarchyStructureLevelFourOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelFourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyStructureHierarchyStructureLevelFourOutput)
}

func (i *UserHierarchyStructureHierarchyStructureLevelFourArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyStructureHierarchyStructureLevelFourArgs] {
	return pulumix.Val(i)
}

type UserHierarchyStructureHierarchyStructureLevelFourOutput struct{ *pulumi.OutputState }

func (UserHierarchyStructureHierarchyStructureLevelFourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelFour)(nil)).Elem()
}

func (o UserHierarchyStructureHierarchyStructureLevelFourOutput) ToUserHierarchyStructureHierarchyStructureLevelFourOutput() UserHierarchyStructureHierarchyStructureLevelFourOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelFourOutput) ToUserHierarchyStructureHierarchyStructureLevelFourOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelFourOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelFourOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyStructureHierarchyStructureLevelFour] {
	return pulumix.Output[UserHierarchyStructureHierarchyStructureLevelFour]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelFourOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelFour](o, func(v UserHierarchyStructureHierarchyStructureLevelFour) *string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelFourOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelFour](o, func(v UserHierarchyStructureHierarchyStructureLevelFour) *string { return v.Id })
}

// The name of the user hierarchy level. Must not be more than 50 characters.
func (o UserHierarchyStructureHierarchyStructureLevelFourOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelFour](o, func(v UserHierarchyStructureHierarchyStructureLevelFour) string { return v.Name })
}

type UserHierarchyStructureHierarchyStructureLevelOne struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type UserHierarchyStructureHierarchyStructureLevelOneArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (UserHierarchyStructureHierarchyStructureLevelOneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelOne)(nil)).Elem()
}

func (i UserHierarchyStructureHierarchyStructureLevelOneArgs) ToUserHierarchyStructureHierarchyStructureLevelOneOutput() UserHierarchyStructureHierarchyStructureLevelOneOutput {
	return i.ToUserHierarchyStructureHierarchyStructureLevelOneOutputWithContext(context.Background())
}

func (i UserHierarchyStructureHierarchyStructureLevelOneArgs) ToUserHierarchyStructureHierarchyStructureLevelOneOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelOneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyStructureHierarchyStructureLevelOneOutput)
}

func (i *UserHierarchyStructureHierarchyStructureLevelOneArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyStructureHierarchyStructureLevelOneArgs] {
	return pulumix.Val(i)
}

type UserHierarchyStructureHierarchyStructureLevelOneOutput struct{ *pulumi.OutputState }

func (UserHierarchyStructureHierarchyStructureLevelOneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelOne)(nil)).Elem()
}

func (o UserHierarchyStructureHierarchyStructureLevelOneOutput) ToUserHierarchyStructureHierarchyStructureLevelOneOutput() UserHierarchyStructureHierarchyStructureLevelOneOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelOneOutput) ToUserHierarchyStructureHierarchyStructureLevelOneOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelOneOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelOneOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyStructureHierarchyStructureLevelOne] {
	return pulumix.Output[UserHierarchyStructureHierarchyStructureLevelOne]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelOneOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelOne](o, func(v UserHierarchyStructureHierarchyStructureLevelOne) *string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelOneOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelOne](o, func(v UserHierarchyStructureHierarchyStructureLevelOne) *string { return v.Id })
}

// The name of the user hierarchy level. Must not be more than 50 characters.
func (o UserHierarchyStructureHierarchyStructureLevelOneOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelOne](o, func(v UserHierarchyStructureHierarchyStructureLevelOne) string { return v.Name })
}

type UserHierarchyStructureHierarchyStructureLevelThree struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type UserHierarchyStructureHierarchyStructureLevelThreeArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (UserHierarchyStructureHierarchyStructureLevelThreeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelThree)(nil)).Elem()
}

func (i UserHierarchyStructureHierarchyStructureLevelThreeArgs) ToUserHierarchyStructureHierarchyStructureLevelThreeOutput() UserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return i.ToUserHierarchyStructureHierarchyStructureLevelThreeOutputWithContext(context.Background())
}

func (i UserHierarchyStructureHierarchyStructureLevelThreeArgs) ToUserHierarchyStructureHierarchyStructureLevelThreeOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyStructureHierarchyStructureLevelThreeOutput)
}

func (i *UserHierarchyStructureHierarchyStructureLevelThreeArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyStructureHierarchyStructureLevelThreeArgs] {
	return pulumix.Val(i)
}

type UserHierarchyStructureHierarchyStructureLevelThreeOutput struct{ *pulumi.OutputState }

func (UserHierarchyStructureHierarchyStructureLevelThreeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelThree)(nil)).Elem()
}

func (o UserHierarchyStructureHierarchyStructureLevelThreeOutput) ToUserHierarchyStructureHierarchyStructureLevelThreeOutput() UserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelThreeOutput) ToUserHierarchyStructureHierarchyStructureLevelThreeOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelThreeOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyStructureHierarchyStructureLevelThree] {
	return pulumix.Output[UserHierarchyStructureHierarchyStructureLevelThree]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelThreeOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelThree](o, func(v UserHierarchyStructureHierarchyStructureLevelThree) *string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelThreeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelThree](o, func(v UserHierarchyStructureHierarchyStructureLevelThree) *string { return v.Id })
}

// The name of the user hierarchy level. Must not be more than 50 characters.
func (o UserHierarchyStructureHierarchyStructureLevelThreeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelThree](o, func(v UserHierarchyStructureHierarchyStructureLevelThree) string { return v.Name })
}

type UserHierarchyStructureHierarchyStructureLevelTwo struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn *string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id *string `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type UserHierarchyStructureHierarchyStructureLevelTwoArgs struct {
	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (UserHierarchyStructureHierarchyStructureLevelTwoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelTwo)(nil)).Elem()
}

func (i UserHierarchyStructureHierarchyStructureLevelTwoArgs) ToUserHierarchyStructureHierarchyStructureLevelTwoOutput() UserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return i.ToUserHierarchyStructureHierarchyStructureLevelTwoOutputWithContext(context.Background())
}

func (i UserHierarchyStructureHierarchyStructureLevelTwoArgs) ToUserHierarchyStructureHierarchyStructureLevelTwoOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHierarchyStructureHierarchyStructureLevelTwoOutput)
}

func (i *UserHierarchyStructureHierarchyStructureLevelTwoArgs) ToOutput(ctx context.Context) pulumix.Output[*UserHierarchyStructureHierarchyStructureLevelTwoArgs] {
	return pulumix.Val(i)
}

type UserHierarchyStructureHierarchyStructureLevelTwoOutput struct{ *pulumi.OutputState }

func (UserHierarchyStructureHierarchyStructureLevelTwoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHierarchyStructureHierarchyStructureLevelTwo)(nil)).Elem()
}

func (o UserHierarchyStructureHierarchyStructureLevelTwoOutput) ToUserHierarchyStructureHierarchyStructureLevelTwoOutput() UserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelTwoOutput) ToUserHierarchyStructureHierarchyStructureLevelTwoOutputWithContext(ctx context.Context) UserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return o
}

func (o UserHierarchyStructureHierarchyStructureLevelTwoOutput) ToOutput(ctx context.Context) pulumix.Output[UserHierarchyStructureHierarchyStructureLevelTwo] {
	return pulumix.Output[UserHierarchyStructureHierarchyStructureLevelTwo]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelTwoOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelTwo](o, func(v UserHierarchyStructureHierarchyStructureLevelTwo) *string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o UserHierarchyStructureHierarchyStructureLevelTwoOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelTwo](o, func(v UserHierarchyStructureHierarchyStructureLevelTwo) *string { return v.Id })
}

// The name of the user hierarchy level. Must not be more than 50 characters.
func (o UserHierarchyStructureHierarchyStructureLevelTwoOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[UserHierarchyStructureHierarchyStructureLevelTwo](o, func(v UserHierarchyStructureHierarchyStructureLevelTwo) string { return v.Name })
}

type UserIdentityInfo struct {
	// The email address. If you are using SAML for identity management and include this parameter, an error is returned. Note that updates to the `email` is supported. From the [UpdateUserIdentityInfo API documentation](https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateUserIdentityInfo.html) it is strongly recommended to limit who has the ability to invoke `UpdateUserIdentityInfo`. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
	Email *string `pulumi:"email"`
	// The first name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
	FirstName *string `pulumi:"firstName"`
	// The last name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
	LastName *string `pulumi:"lastName"`
}

type UserIdentityInfoArgs struct {
	// The email address. If you are using SAML for identity management and include this parameter, an error is returned. Note that updates to the `email` is supported. From the [UpdateUserIdentityInfo API documentation](https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateUserIdentityInfo.html) it is strongly recommended to limit who has the ability to invoke `UpdateUserIdentityInfo`. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
	Email pulumix.Input[*string] `pulumi:"email"`
	// The first name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
	FirstName pulumix.Input[*string] `pulumi:"firstName"`
	// The last name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
	LastName pulumix.Input[*string] `pulumi:"lastName"`
}

func (UserIdentityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityInfo)(nil)).Elem()
}

func (i UserIdentityInfoArgs) ToUserIdentityInfoOutput() UserIdentityInfoOutput {
	return i.ToUserIdentityInfoOutputWithContext(context.Background())
}

func (i UserIdentityInfoArgs) ToUserIdentityInfoOutputWithContext(ctx context.Context) UserIdentityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityInfoOutput)
}

func (i *UserIdentityInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*UserIdentityInfoArgs] {
	return pulumix.Val(i)
}

type UserIdentityInfoOutput struct{ *pulumi.OutputState }

func (UserIdentityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityInfo)(nil)).Elem()
}

func (o UserIdentityInfoOutput) ToUserIdentityInfoOutput() UserIdentityInfoOutput {
	return o
}

func (o UserIdentityInfoOutput) ToUserIdentityInfoOutputWithContext(ctx context.Context) UserIdentityInfoOutput {
	return o
}

func (o UserIdentityInfoOutput) ToOutput(ctx context.Context) pulumix.Output[UserIdentityInfo] {
	return pulumix.Output[UserIdentityInfo]{
		OutputState: o.OutputState,
	}
}

// The email address. If you are using SAML for identity management and include this parameter, an error is returned. Note that updates to the `email` is supported. From the [UpdateUserIdentityInfo API documentation](https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateUserIdentityInfo.html) it is strongly recommended to limit who has the ability to invoke `UpdateUserIdentityInfo`. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
func (o UserIdentityInfoOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[UserIdentityInfo](o, func(v UserIdentityInfo) *string { return v.Email })
}

// The first name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
func (o UserIdentityInfoOutput) FirstName() pulumix.Output[*string] {
	return pulumix.Apply[UserIdentityInfo](o, func(v UserIdentityInfo) *string { return v.FirstName })
}

// The last name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
func (o UserIdentityInfoOutput) LastName() pulumix.Output[*string] {
	return pulumix.Apply[UserIdentityInfo](o, func(v UserIdentityInfo) *string { return v.LastName })
}

type UserPhoneConfig struct {
	// The After Call Work (ACW) timeout setting, in seconds. Minimum value of 0.
	AfterContactWorkTimeLimit *int `pulumi:"afterContactWorkTimeLimit"`
	// When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
	AutoAccept *bool `pulumi:"autoAccept"`
	// The phone number for the user's desk phone. Required if `phoneType` is set as `DESK_PHONE`.
	DeskPhoneNumber *string `pulumi:"deskPhoneNumber"`
	// The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
	PhoneType string `pulumi:"phoneType"`
}

type UserPhoneConfigArgs struct {
	// The After Call Work (ACW) timeout setting, in seconds. Minimum value of 0.
	AfterContactWorkTimeLimit pulumix.Input[*int] `pulumi:"afterContactWorkTimeLimit"`
	// When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
	AutoAccept pulumix.Input[*bool] `pulumi:"autoAccept"`
	// The phone number for the user's desk phone. Required if `phoneType` is set as `DESK_PHONE`.
	DeskPhoneNumber pulumix.Input[*string] `pulumi:"deskPhoneNumber"`
	// The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
	PhoneType pulumix.Input[string] `pulumi:"phoneType"`
}

func (UserPhoneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPhoneConfig)(nil)).Elem()
}

func (i UserPhoneConfigArgs) ToUserPhoneConfigOutput() UserPhoneConfigOutput {
	return i.ToUserPhoneConfigOutputWithContext(context.Background())
}

func (i UserPhoneConfigArgs) ToUserPhoneConfigOutputWithContext(ctx context.Context) UserPhoneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPhoneConfigOutput)
}

func (i *UserPhoneConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*UserPhoneConfigArgs] {
	return pulumix.Val(i)
}

type UserPhoneConfigOutput struct{ *pulumi.OutputState }

func (UserPhoneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPhoneConfig)(nil)).Elem()
}

func (o UserPhoneConfigOutput) ToUserPhoneConfigOutput() UserPhoneConfigOutput {
	return o
}

func (o UserPhoneConfigOutput) ToUserPhoneConfigOutputWithContext(ctx context.Context) UserPhoneConfigOutput {
	return o
}

func (o UserPhoneConfigOutput) ToOutput(ctx context.Context) pulumix.Output[UserPhoneConfig] {
	return pulumix.Output[UserPhoneConfig]{
		OutputState: o.OutputState,
	}
}

// The After Call Work (ACW) timeout setting, in seconds. Minimum value of 0.
func (o UserPhoneConfigOutput) AfterContactWorkTimeLimit() pulumix.Output[*int] {
	return pulumix.Apply[UserPhoneConfig](o, func(v UserPhoneConfig) *int { return v.AfterContactWorkTimeLimit })
}

// When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
func (o UserPhoneConfigOutput) AutoAccept() pulumix.Output[*bool] {
	return pulumix.Apply[UserPhoneConfig](o, func(v UserPhoneConfig) *bool { return v.AutoAccept })
}

// The phone number for the user's desk phone. Required if `phoneType` is set as `DESK_PHONE`.
func (o UserPhoneConfigOutput) DeskPhoneNumber() pulumix.Output[*string] {
	return pulumix.Apply[UserPhoneConfig](o, func(v UserPhoneConfig) *string { return v.DeskPhoneNumber })
}

// The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
func (o UserPhoneConfigOutput) PhoneType() pulumix.Output[string] {
	return pulumix.Apply[UserPhoneConfig](o, func(v UserPhoneConfig) string { return v.PhoneType })
}

type GetBotAssociationLexBot struct {
	// Region that the Amazon Lex (V1) bot was created in.
	LexRegion string `pulumi:"lexRegion"`
	// Name of the Amazon Lex (V1) bot.
	Name string `pulumi:"name"`
}

type GetBotAssociationLexBotArgs struct {
	// Region that the Amazon Lex (V1) bot was created in.
	LexRegion pulumix.Input[string] `pulumi:"lexRegion"`
	// Name of the Amazon Lex (V1) bot.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetBotAssociationLexBotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBotAssociationLexBot)(nil)).Elem()
}

func (i GetBotAssociationLexBotArgs) ToGetBotAssociationLexBotOutput() GetBotAssociationLexBotOutput {
	return i.ToGetBotAssociationLexBotOutputWithContext(context.Background())
}

func (i GetBotAssociationLexBotArgs) ToGetBotAssociationLexBotOutputWithContext(ctx context.Context) GetBotAssociationLexBotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBotAssociationLexBotOutput)
}

func (i *GetBotAssociationLexBotArgs) ToOutput(ctx context.Context) pulumix.Output[*GetBotAssociationLexBotArgs] {
	return pulumix.Val(i)
}

type GetBotAssociationLexBotOutput struct{ *pulumi.OutputState }

func (GetBotAssociationLexBotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBotAssociationLexBot)(nil)).Elem()
}

func (o GetBotAssociationLexBotOutput) ToGetBotAssociationLexBotOutput() GetBotAssociationLexBotOutput {
	return o
}

func (o GetBotAssociationLexBotOutput) ToGetBotAssociationLexBotOutputWithContext(ctx context.Context) GetBotAssociationLexBotOutput {
	return o
}

func (o GetBotAssociationLexBotOutput) ToOutput(ctx context.Context) pulumix.Output[GetBotAssociationLexBot] {
	return pulumix.Output[GetBotAssociationLexBot]{
		OutputState: o.OutputState,
	}
}

// Region that the Amazon Lex (V1) bot was created in.
func (o GetBotAssociationLexBotOutput) LexRegion() pulumix.Output[string] {
	return pulumix.Apply[GetBotAssociationLexBot](o, func(v GetBotAssociationLexBot) string { return v.LexRegion })
}

// Name of the Amazon Lex (V1) bot.
func (o GetBotAssociationLexBotOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetBotAssociationLexBot](o, func(v GetBotAssociationLexBot) string { return v.Name })
}

type GetHoursOfOperationConfig struct {
	// Day that the hours of operation applies to.
	Day string `pulumi:"day"`
	// End time block specifies the time that your contact center closes. The `endTime` is documented below.
	EndTimes []GetHoursOfOperationConfigEndTime `pulumi:"endTimes"`
	// Start time block specifies the time that your contact center opens. The `startTime` is documented below.
	StartTimes []GetHoursOfOperationConfigStartTime `pulumi:"startTimes"`
}

type GetHoursOfOperationConfigArgs struct {
	// Day that the hours of operation applies to.
	Day pulumix.Input[string] `pulumi:"day"`
	// End time block specifies the time that your contact center closes. The `endTime` is documented below.
	EndTimes pulumix.Input[[]*GetHoursOfOperationConfigEndTimeArgs] `pulumi:"endTimes"`
	// Start time block specifies the time that your contact center opens. The `startTime` is documented below.
	StartTimes pulumix.Input[[]*GetHoursOfOperationConfigStartTimeArgs] `pulumi:"startTimes"`
}

func (GetHoursOfOperationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHoursOfOperationConfig)(nil)).Elem()
}

func (i GetHoursOfOperationConfigArgs) ToGetHoursOfOperationConfigOutput() GetHoursOfOperationConfigOutput {
	return i.ToGetHoursOfOperationConfigOutputWithContext(context.Background())
}

func (i GetHoursOfOperationConfigArgs) ToGetHoursOfOperationConfigOutputWithContext(ctx context.Context) GetHoursOfOperationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHoursOfOperationConfigOutput)
}

func (i *GetHoursOfOperationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetHoursOfOperationConfigArgs] {
	return pulumix.Val(i)
}

type GetHoursOfOperationConfigOutput struct{ *pulumi.OutputState }

func (GetHoursOfOperationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHoursOfOperationConfig)(nil)).Elem()
}

func (o GetHoursOfOperationConfigOutput) ToGetHoursOfOperationConfigOutput() GetHoursOfOperationConfigOutput {
	return o
}

func (o GetHoursOfOperationConfigOutput) ToGetHoursOfOperationConfigOutputWithContext(ctx context.Context) GetHoursOfOperationConfigOutput {
	return o
}

func (o GetHoursOfOperationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetHoursOfOperationConfig] {
	return pulumix.Output[GetHoursOfOperationConfig]{
		OutputState: o.OutputState,
	}
}

// Day that the hours of operation applies to.
func (o GetHoursOfOperationConfigOutput) Day() pulumix.Output[string] {
	return pulumix.Apply[GetHoursOfOperationConfig](o, func(v GetHoursOfOperationConfig) string { return v.Day })
}

// End time block specifies the time that your contact center closes. The `endTime` is documented below.
func (o GetHoursOfOperationConfigOutput) EndTimes() pulumix.GArrayOutput[GetHoursOfOperationConfigEndTime, GetHoursOfOperationConfigEndTimeOutput] {
	value := pulumix.Apply[GetHoursOfOperationConfig](o, func(v GetHoursOfOperationConfig) []GetHoursOfOperationConfigEndTime { return v.EndTimes })
	return pulumix.GArrayOutput[GetHoursOfOperationConfigEndTime, GetHoursOfOperationConfigEndTimeOutput]{OutputState: value.OutputState}
}

// Start time block specifies the time that your contact center opens. The `startTime` is documented below.
func (o GetHoursOfOperationConfigOutput) StartTimes() pulumix.GArrayOutput[GetHoursOfOperationConfigStartTime, GetHoursOfOperationConfigStartTimeOutput] {
	value := pulumix.Apply[GetHoursOfOperationConfig](o, func(v GetHoursOfOperationConfig) []GetHoursOfOperationConfigStartTime { return v.StartTimes })
	return pulumix.GArrayOutput[GetHoursOfOperationConfigStartTime, GetHoursOfOperationConfigStartTimeOutput]{OutputState: value.OutputState}
}

type GetHoursOfOperationConfigEndTime struct {
	// Hour of opening.
	Hours int `pulumi:"hours"`
	// Minute of opening.
	Minutes int `pulumi:"minutes"`
}

type GetHoursOfOperationConfigEndTimeArgs struct {
	// Hour of opening.
	Hours pulumix.Input[int] `pulumi:"hours"`
	// Minute of opening.
	Minutes pulumix.Input[int] `pulumi:"minutes"`
}

func (GetHoursOfOperationConfigEndTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHoursOfOperationConfigEndTime)(nil)).Elem()
}

func (i GetHoursOfOperationConfigEndTimeArgs) ToGetHoursOfOperationConfigEndTimeOutput() GetHoursOfOperationConfigEndTimeOutput {
	return i.ToGetHoursOfOperationConfigEndTimeOutputWithContext(context.Background())
}

func (i GetHoursOfOperationConfigEndTimeArgs) ToGetHoursOfOperationConfigEndTimeOutputWithContext(ctx context.Context) GetHoursOfOperationConfigEndTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHoursOfOperationConfigEndTimeOutput)
}

func (i *GetHoursOfOperationConfigEndTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetHoursOfOperationConfigEndTimeArgs] {
	return pulumix.Val(i)
}

type GetHoursOfOperationConfigEndTimeOutput struct{ *pulumi.OutputState }

func (GetHoursOfOperationConfigEndTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHoursOfOperationConfigEndTime)(nil)).Elem()
}

func (o GetHoursOfOperationConfigEndTimeOutput) ToGetHoursOfOperationConfigEndTimeOutput() GetHoursOfOperationConfigEndTimeOutput {
	return o
}

func (o GetHoursOfOperationConfigEndTimeOutput) ToGetHoursOfOperationConfigEndTimeOutputWithContext(ctx context.Context) GetHoursOfOperationConfigEndTimeOutput {
	return o
}

func (o GetHoursOfOperationConfigEndTimeOutput) ToOutput(ctx context.Context) pulumix.Output[GetHoursOfOperationConfigEndTime] {
	return pulumix.Output[GetHoursOfOperationConfigEndTime]{
		OutputState: o.OutputState,
	}
}

// Hour of opening.
func (o GetHoursOfOperationConfigEndTimeOutput) Hours() pulumix.Output[int] {
	return pulumix.Apply[GetHoursOfOperationConfigEndTime](o, func(v GetHoursOfOperationConfigEndTime) int { return v.Hours })
}

// Minute of opening.
func (o GetHoursOfOperationConfigEndTimeOutput) Minutes() pulumix.Output[int] {
	return pulumix.Apply[GetHoursOfOperationConfigEndTime](o, func(v GetHoursOfOperationConfigEndTime) int { return v.Minutes })
}

type GetHoursOfOperationConfigStartTime struct {
	// Hour of opening.
	Hours int `pulumi:"hours"`
	// Minute of opening.
	Minutes int `pulumi:"minutes"`
}

type GetHoursOfOperationConfigStartTimeArgs struct {
	// Hour of opening.
	Hours pulumix.Input[int] `pulumi:"hours"`
	// Minute of opening.
	Minutes pulumix.Input[int] `pulumi:"minutes"`
}

func (GetHoursOfOperationConfigStartTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHoursOfOperationConfigStartTime)(nil)).Elem()
}

func (i GetHoursOfOperationConfigStartTimeArgs) ToGetHoursOfOperationConfigStartTimeOutput() GetHoursOfOperationConfigStartTimeOutput {
	return i.ToGetHoursOfOperationConfigStartTimeOutputWithContext(context.Background())
}

func (i GetHoursOfOperationConfigStartTimeArgs) ToGetHoursOfOperationConfigStartTimeOutputWithContext(ctx context.Context) GetHoursOfOperationConfigStartTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHoursOfOperationConfigStartTimeOutput)
}

func (i *GetHoursOfOperationConfigStartTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetHoursOfOperationConfigStartTimeArgs] {
	return pulumix.Val(i)
}

type GetHoursOfOperationConfigStartTimeOutput struct{ *pulumi.OutputState }

func (GetHoursOfOperationConfigStartTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHoursOfOperationConfigStartTime)(nil)).Elem()
}

func (o GetHoursOfOperationConfigStartTimeOutput) ToGetHoursOfOperationConfigStartTimeOutput() GetHoursOfOperationConfigStartTimeOutput {
	return o
}

func (o GetHoursOfOperationConfigStartTimeOutput) ToGetHoursOfOperationConfigStartTimeOutputWithContext(ctx context.Context) GetHoursOfOperationConfigStartTimeOutput {
	return o
}

func (o GetHoursOfOperationConfigStartTimeOutput) ToOutput(ctx context.Context) pulumix.Output[GetHoursOfOperationConfigStartTime] {
	return pulumix.Output[GetHoursOfOperationConfigStartTime]{
		OutputState: o.OutputState,
	}
}

// Hour of opening.
func (o GetHoursOfOperationConfigStartTimeOutput) Hours() pulumix.Output[int] {
	return pulumix.Apply[GetHoursOfOperationConfigStartTime](o, func(v GetHoursOfOperationConfigStartTime) int { return v.Hours })
}

// Minute of opening.
func (o GetHoursOfOperationConfigStartTimeOutput) Minutes() pulumix.Output[int] {
	return pulumix.Apply[GetHoursOfOperationConfigStartTime](o, func(v GetHoursOfOperationConfigStartTime) int { return v.Minutes })
}

type GetInstanceStorageConfigStorageConfig struct {
	// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
	KinesisFirehoseConfigs []GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig `pulumi:"kinesisFirehoseConfigs"`
	// A block that specifies the configuration of the Kinesis data stream. Documented below.
	KinesisStreamConfigs []GetInstanceStorageConfigStorageConfigKinesisStreamConfig `pulumi:"kinesisStreamConfigs"`
	// A block that specifies the configuration of the Kinesis video stream. Documented below.
	KinesisVideoStreamConfigs []GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig `pulumi:"kinesisVideoStreamConfigs"`
	// A block that specifies the configuration of S3 Bucket. Documented below.
	S3Configs []GetInstanceStorageConfigStorageConfigS3Config `pulumi:"s3Configs"`
	// A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
	StorageType string `pulumi:"storageType"`
}

type GetInstanceStorageConfigStorageConfigArgs struct {
	// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
	KinesisFirehoseConfigs pulumix.Input[[]*GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs] `pulumi:"kinesisFirehoseConfigs"`
	// A block that specifies the configuration of the Kinesis data stream. Documented below.
	KinesisStreamConfigs pulumix.Input[[]*GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs] `pulumi:"kinesisStreamConfigs"`
	// A block that specifies the configuration of the Kinesis video stream. Documented below.
	KinesisVideoStreamConfigs pulumix.Input[[]*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs] `pulumi:"kinesisVideoStreamConfigs"`
	// A block that specifies the configuration of S3 Bucket. Documented below.
	S3Configs pulumix.Input[[]*GetInstanceStorageConfigStorageConfigS3ConfigArgs] `pulumi:"s3Configs"`
	// A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
	StorageType pulumix.Input[string] `pulumi:"storageType"`
}

func (GetInstanceStorageConfigStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfig)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigArgs) ToGetInstanceStorageConfigStorageConfigOutput() GetInstanceStorageConfigStorageConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigArgs) ToGetInstanceStorageConfigStorageConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfig)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigOutput) ToGetInstanceStorageConfigStorageConfigOutput() GetInstanceStorageConfigStorageConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigOutput) ToGetInstanceStorageConfigStorageConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfig] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfig]{
		OutputState: o.OutputState,
	}
}

// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
func (o GetInstanceStorageConfigStorageConfigOutput) KinesisFirehoseConfigs() pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig, GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput] {
	value := pulumix.Apply[GetInstanceStorageConfigStorageConfig](o, func(v GetInstanceStorageConfigStorageConfig) []GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig {
		return v.KinesisFirehoseConfigs
	})
	return pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig, GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput]{OutputState: value.OutputState}
}

// A block that specifies the configuration of the Kinesis data stream. Documented below.
func (o GetInstanceStorageConfigStorageConfigOutput) KinesisStreamConfigs() pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisStreamConfig, GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput] {
	value := pulumix.Apply[GetInstanceStorageConfigStorageConfig](o, func(v GetInstanceStorageConfigStorageConfig) []GetInstanceStorageConfigStorageConfigKinesisStreamConfig {
		return v.KinesisStreamConfigs
	})
	return pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisStreamConfig, GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput]{OutputState: value.OutputState}
}

// A block that specifies the configuration of the Kinesis video stream. Documented below.
func (o GetInstanceStorageConfigStorageConfigOutput) KinesisVideoStreamConfigs() pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig, GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput] {
	value := pulumix.Apply[GetInstanceStorageConfigStorageConfig](o, func(v GetInstanceStorageConfigStorageConfig) []GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig {
		return v.KinesisVideoStreamConfigs
	})
	return pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig, GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput]{OutputState: value.OutputState}
}

// A block that specifies the configuration of S3 Bucket. Documented below.
func (o GetInstanceStorageConfigStorageConfigOutput) S3Configs() pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigS3Config, GetInstanceStorageConfigStorageConfigS3ConfigOutput] {
	value := pulumix.Apply[GetInstanceStorageConfigStorageConfig](o, func(v GetInstanceStorageConfigStorageConfig) []GetInstanceStorageConfigStorageConfigS3Config {
		return v.S3Configs
	})
	return pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigS3Config, GetInstanceStorageConfigStorageConfigS3ConfigOutput]{OutputState: value.OutputState}
}

// A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
func (o GetInstanceStorageConfigStorageConfigOutput) StorageType() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfig](o, func(v GetInstanceStorageConfigStorageConfig) string { return v.StorageType })
}

type GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig struct {
	// The Amazon Resource Name (ARN) of the delivery stream.
	FirehoseArn string `pulumi:"firehoseArn"`
}

type GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs struct {
	// The Amazon Resource Name (ARN) of the delivery stream.
	FirehoseArn pulumix.Input[string] `pulumi:"firehoseArn"`
}

func (GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput() GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput() GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the delivery stream.
func (o GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput) FirehoseArn() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig) string { return v.FirehoseArn })
}

type GetInstanceStorageConfigStorageConfigKinesisStreamConfig struct {
	// The Amazon Resource Name (ARN) of the data stream.
	StreamArn string `pulumi:"streamArn"`
}

type GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs struct {
	// The Amazon Resource Name (ARN) of the data stream.
	StreamArn pulumix.Input[string] `pulumi:"streamArn"`
}

func (GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisStreamConfig)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput() GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigKinesisStreamConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisStreamConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigKinesisStreamConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisStreamConfig)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput() GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisStreamConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisStreamConfig] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisStreamConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the data stream.
func (o GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput) StreamArn() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisStreamConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisStreamConfig) string { return v.StreamArn })
}

type GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig struct {
	// The encryption configuration. Documented below.
	EncryptionConfigs []GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig `pulumi:"encryptionConfigs"`
	// The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
	Prefix string `pulumi:"prefix"`
	// The number of hours to retain the data in a data store associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0` indicates that the stream does not persist data.
	RetentionPeriodHours int `pulumi:"retentionPeriodHours"`
}

type GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs struct {
	// The encryption configuration. Documented below.
	EncryptionConfigs pulumix.Input[[]*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs] `pulumi:"encryptionConfigs"`
	// The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
	Prefix pulumix.Input[string] `pulumi:"prefix"`
	// The number of hours to retain the data in a data store associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0` indicates that the stream does not persist data.
	RetentionPeriodHours pulumix.Input[int] `pulumi:"retentionPeriodHours"`
}

func (GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput() GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput() GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig]{
		OutputState: o.OutputState,
	}
}

// The encryption configuration. Documented below.
func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) EncryptionConfigs() pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig, GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput] {
	value := pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig) []GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig {
		return v.EncryptionConfigs
	})
	return pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig, GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput]{OutputState: value.OutputState}
}

// The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) Prefix() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig) string { return v.Prefix })
}

// The number of hours to retain the data in a data store associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0` indicates that the stream does not persist data.
func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput) RetentionPeriodHours() pulumix.Output[int] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig) int {
		return v.RetentionPeriodHours
	})
}

type GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType string `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId string `pulumi:"keyId"`
}

type GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType pulumix.Input[string] `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId pulumix.Input[string] `pulumi:"keyId"`
}

func (GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput() GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput() GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ToGetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The type of encryption. Valid Values: `KMS`.
func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) EncryptionType() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig) string {
		return v.EncryptionType
	})
}

// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
func (o GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig](o, func(v GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig) string {
		return v.KeyId
	})
}

type GetInstanceStorageConfigStorageConfigS3Config struct {
	// The S3 bucket name.
	BucketName string `pulumi:"bucketName"`
	// The S3 bucket prefix.
	BucketPrefix string `pulumi:"bucketPrefix"`
	// The encryption configuration. Documented below.
	EncryptionConfigs []GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig `pulumi:"encryptionConfigs"`
}

type GetInstanceStorageConfigStorageConfigS3ConfigArgs struct {
	// The S3 bucket name.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The S3 bucket prefix.
	BucketPrefix pulumix.Input[string] `pulumi:"bucketPrefix"`
	// The encryption configuration. Documented below.
	EncryptionConfigs pulumix.Input[[]*GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs] `pulumi:"encryptionConfigs"`
}

func (GetInstanceStorageConfigStorageConfigS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigS3Config)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigS3ConfigArgs) ToGetInstanceStorageConfigStorageConfigS3ConfigOutput() GetInstanceStorageConfigStorageConfigS3ConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigS3ConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigS3ConfigArgs) ToGetInstanceStorageConfigStorageConfigS3ConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigS3ConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigS3ConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigS3ConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigS3ConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigS3Config)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigS3ConfigOutput) ToGetInstanceStorageConfigStorageConfigS3ConfigOutput() GetInstanceStorageConfigStorageConfigS3ConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigS3ConfigOutput) ToGetInstanceStorageConfigStorageConfigS3ConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigS3ConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigS3ConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfigS3Config] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfigS3Config]{
		OutputState: o.OutputState,
	}
}

// The S3 bucket name.
func (o GetInstanceStorageConfigStorageConfigS3ConfigOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigS3Config](o, func(v GetInstanceStorageConfigStorageConfigS3Config) string { return v.BucketName })
}

// The S3 bucket prefix.
func (o GetInstanceStorageConfigStorageConfigS3ConfigOutput) BucketPrefix() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigS3Config](o, func(v GetInstanceStorageConfigStorageConfigS3Config) string { return v.BucketPrefix })
}

// The encryption configuration. Documented below.
func (o GetInstanceStorageConfigStorageConfigS3ConfigOutput) EncryptionConfigs() pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig, GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput] {
	value := pulumix.Apply[GetInstanceStorageConfigStorageConfigS3Config](o, func(v GetInstanceStorageConfigStorageConfigS3Config) []GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig {
		return v.EncryptionConfigs
	})
	return pulumix.GArrayOutput[GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig, GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput]{OutputState: value.OutputState}
}

type GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType string `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId string `pulumi:"keyId"`
}

type GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs struct {
	// The type of encryption. Valid Values: `KMS`.
	EncryptionType pulumix.Input[string] `pulumi:"encryptionType"`
	// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
	KeyId pulumix.Input[string] `pulumi:"keyId"`
}

func (GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig)(nil)).Elem()
}

func (i GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ToGetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput() GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return i.ToGetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputWithContext(context.Background())
}

func (i GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ToGetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput)
}

func (i *GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigArgs] {
	return pulumix.Val(i)
}

type GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput struct{ *pulumi.OutputState }

func (GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig)(nil)).Elem()
}

func (o GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ToGetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput() GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ToGetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutputWithContext(ctx context.Context) GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput {
	return o
}

func (o GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig] {
	return pulumix.Output[GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The type of encryption. Valid Values: `KMS`.
func (o GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) EncryptionType() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig](o, func(v GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig) string { return v.EncryptionType })
}

// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
func (o GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput) KeyId() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig](o, func(v GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig) string { return v.KeyId })
}

type GetQueueOutboundCallerConfig struct {
	// Specifies the caller ID name.
	OutboundCallerIdName string `pulumi:"outboundCallerIdName"`
	// Specifies the caller ID number.
	OutboundCallerIdNumberId string `pulumi:"outboundCallerIdNumberId"`
	// Outbound whisper flow to be used during an outbound call.
	OutboundFlowId string `pulumi:"outboundFlowId"`
}

type GetQueueOutboundCallerConfigArgs struct {
	// Specifies the caller ID name.
	OutboundCallerIdName pulumix.Input[string] `pulumi:"outboundCallerIdName"`
	// Specifies the caller ID number.
	OutboundCallerIdNumberId pulumix.Input[string] `pulumi:"outboundCallerIdNumberId"`
	// Outbound whisper flow to be used during an outbound call.
	OutboundFlowId pulumix.Input[string] `pulumi:"outboundFlowId"`
}

func (GetQueueOutboundCallerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueueOutboundCallerConfig)(nil)).Elem()
}

func (i GetQueueOutboundCallerConfigArgs) ToGetQueueOutboundCallerConfigOutput() GetQueueOutboundCallerConfigOutput {
	return i.ToGetQueueOutboundCallerConfigOutputWithContext(context.Background())
}

func (i GetQueueOutboundCallerConfigArgs) ToGetQueueOutboundCallerConfigOutputWithContext(ctx context.Context) GetQueueOutboundCallerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueueOutboundCallerConfigOutput)
}

func (i *GetQueueOutboundCallerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetQueueOutboundCallerConfigArgs] {
	return pulumix.Val(i)
}

type GetQueueOutboundCallerConfigOutput struct{ *pulumi.OutputState }

func (GetQueueOutboundCallerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueueOutboundCallerConfig)(nil)).Elem()
}

func (o GetQueueOutboundCallerConfigOutput) ToGetQueueOutboundCallerConfigOutput() GetQueueOutboundCallerConfigOutput {
	return o
}

func (o GetQueueOutboundCallerConfigOutput) ToGetQueueOutboundCallerConfigOutputWithContext(ctx context.Context) GetQueueOutboundCallerConfigOutput {
	return o
}

func (o GetQueueOutboundCallerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetQueueOutboundCallerConfig] {
	return pulumix.Output[GetQueueOutboundCallerConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the caller ID name.
func (o GetQueueOutboundCallerConfigOutput) OutboundCallerIdName() pulumix.Output[string] {
	return pulumix.Apply[GetQueueOutboundCallerConfig](o, func(v GetQueueOutboundCallerConfig) string { return v.OutboundCallerIdName })
}

// Specifies the caller ID number.
func (o GetQueueOutboundCallerConfigOutput) OutboundCallerIdNumberId() pulumix.Output[string] {
	return pulumix.Apply[GetQueueOutboundCallerConfig](o, func(v GetQueueOutboundCallerConfig) string { return v.OutboundCallerIdNumberId })
}

// Outbound whisper flow to be used during an outbound call.
func (o GetQueueOutboundCallerConfigOutput) OutboundFlowId() pulumix.Output[string] {
	return pulumix.Apply[GetQueueOutboundCallerConfig](o, func(v GetQueueOutboundCallerConfig) string { return v.OutboundFlowId })
}

type GetQuickConnectQuickConnectConfig struct {
	// Phone configuration of the Quick Connect. This is returned only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
	PhoneConfigs []GetQuickConnectQuickConnectConfigPhoneConfig `pulumi:"phoneConfigs"`
	// Queue configuration of the Quick Connect. This is returned only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
	QueueConfigs []GetQuickConnectQuickConnectConfigQueueConfig `pulumi:"queueConfigs"`
	// Configuration type of the Quick Connect. Valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
	QuickConnectType string `pulumi:"quickConnectType"`
	// User configuration of the Quick Connect. This is returned only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
	UserConfigs []GetQuickConnectQuickConnectConfigUserConfig `pulumi:"userConfigs"`
}

type GetQuickConnectQuickConnectConfigArgs struct {
	// Phone configuration of the Quick Connect. This is returned only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
	PhoneConfigs pulumix.Input[[]*GetQuickConnectQuickConnectConfigPhoneConfigArgs] `pulumi:"phoneConfigs"`
	// Queue configuration of the Quick Connect. This is returned only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
	QueueConfigs pulumix.Input[[]*GetQuickConnectQuickConnectConfigQueueConfigArgs] `pulumi:"queueConfigs"`
	// Configuration type of the Quick Connect. Valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
	QuickConnectType pulumix.Input[string] `pulumi:"quickConnectType"`
	// User configuration of the Quick Connect. This is returned only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
	UserConfigs pulumix.Input[[]*GetQuickConnectQuickConnectConfigUserConfigArgs] `pulumi:"userConfigs"`
}

func (GetQuickConnectQuickConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfig)(nil)).Elem()
}

func (i GetQuickConnectQuickConnectConfigArgs) ToGetQuickConnectQuickConnectConfigOutput() GetQuickConnectQuickConnectConfigOutput {
	return i.ToGetQuickConnectQuickConnectConfigOutputWithContext(context.Background())
}

func (i GetQuickConnectQuickConnectConfigArgs) ToGetQuickConnectQuickConnectConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuickConnectQuickConnectConfigOutput)
}

func (i *GetQuickConnectQuickConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetQuickConnectQuickConnectConfigArgs] {
	return pulumix.Val(i)
}

type GetQuickConnectQuickConnectConfigOutput struct{ *pulumi.OutputState }

func (GetQuickConnectQuickConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfig)(nil)).Elem()
}

func (o GetQuickConnectQuickConnectConfigOutput) ToGetQuickConnectQuickConnectConfigOutput() GetQuickConnectQuickConnectConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigOutput) ToGetQuickConnectQuickConnectConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetQuickConnectQuickConnectConfig] {
	return pulumix.Output[GetQuickConnectQuickConnectConfig]{
		OutputState: o.OutputState,
	}
}

// Phone configuration of the Quick Connect. This is returned only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
func (o GetQuickConnectQuickConnectConfigOutput) PhoneConfigs() pulumix.GArrayOutput[GetQuickConnectQuickConnectConfigPhoneConfig, GetQuickConnectQuickConnectConfigPhoneConfigOutput] {
	value := pulumix.Apply[GetQuickConnectQuickConnectConfig](o, func(v GetQuickConnectQuickConnectConfig) []GetQuickConnectQuickConnectConfigPhoneConfig {
		return v.PhoneConfigs
	})
	return pulumix.GArrayOutput[GetQuickConnectQuickConnectConfigPhoneConfig, GetQuickConnectQuickConnectConfigPhoneConfigOutput]{OutputState: value.OutputState}
}

// Queue configuration of the Quick Connect. This is returned only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
func (o GetQuickConnectQuickConnectConfigOutput) QueueConfigs() pulumix.GArrayOutput[GetQuickConnectQuickConnectConfigQueueConfig, GetQuickConnectQuickConnectConfigQueueConfigOutput] {
	value := pulumix.Apply[GetQuickConnectQuickConnectConfig](o, func(v GetQuickConnectQuickConnectConfig) []GetQuickConnectQuickConnectConfigQueueConfig {
		return v.QueueConfigs
	})
	return pulumix.GArrayOutput[GetQuickConnectQuickConnectConfigQueueConfig, GetQuickConnectQuickConnectConfigQueueConfigOutput]{OutputState: value.OutputState}
}

// Configuration type of the Quick Connect. Valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
func (o GetQuickConnectQuickConnectConfigOutput) QuickConnectType() pulumix.Output[string] {
	return pulumix.Apply[GetQuickConnectQuickConnectConfig](o, func(v GetQuickConnectQuickConnectConfig) string { return v.QuickConnectType })
}

// User configuration of the Quick Connect. This is returned only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
func (o GetQuickConnectQuickConnectConfigOutput) UserConfigs() pulumix.GArrayOutput[GetQuickConnectQuickConnectConfigUserConfig, GetQuickConnectQuickConnectConfigUserConfigOutput] {
	value := pulumix.Apply[GetQuickConnectQuickConnectConfig](o, func(v GetQuickConnectQuickConnectConfig) []GetQuickConnectQuickConnectConfigUserConfig {
		return v.UserConfigs
	})
	return pulumix.GArrayOutput[GetQuickConnectQuickConnectConfigUserConfig, GetQuickConnectQuickConnectConfigUserConfigOutput]{OutputState: value.OutputState}
}

type GetQuickConnectQuickConnectConfigPhoneConfig struct {
	// Phone number in in E.164 format.
	PhoneNumber string `pulumi:"phoneNumber"`
}

type GetQuickConnectQuickConnectConfigPhoneConfigArgs struct {
	// Phone number in in E.164 format.
	PhoneNumber pulumix.Input[string] `pulumi:"phoneNumber"`
}

func (GetQuickConnectQuickConnectConfigPhoneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfigPhoneConfig)(nil)).Elem()
}

func (i GetQuickConnectQuickConnectConfigPhoneConfigArgs) ToGetQuickConnectQuickConnectConfigPhoneConfigOutput() GetQuickConnectQuickConnectConfigPhoneConfigOutput {
	return i.ToGetQuickConnectQuickConnectConfigPhoneConfigOutputWithContext(context.Background())
}

func (i GetQuickConnectQuickConnectConfigPhoneConfigArgs) ToGetQuickConnectQuickConnectConfigPhoneConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigPhoneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuickConnectQuickConnectConfigPhoneConfigOutput)
}

func (i *GetQuickConnectQuickConnectConfigPhoneConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetQuickConnectQuickConnectConfigPhoneConfigArgs] {
	return pulumix.Val(i)
}

type GetQuickConnectQuickConnectConfigPhoneConfigOutput struct{ *pulumi.OutputState }

func (GetQuickConnectQuickConnectConfigPhoneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfigPhoneConfig)(nil)).Elem()
}

func (o GetQuickConnectQuickConnectConfigPhoneConfigOutput) ToGetQuickConnectQuickConnectConfigPhoneConfigOutput() GetQuickConnectQuickConnectConfigPhoneConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigPhoneConfigOutput) ToGetQuickConnectQuickConnectConfigPhoneConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigPhoneConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigPhoneConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetQuickConnectQuickConnectConfigPhoneConfig] {
	return pulumix.Output[GetQuickConnectQuickConnectConfigPhoneConfig]{
		OutputState: o.OutputState,
	}
}

// Phone number in in E.164 format.
func (o GetQuickConnectQuickConnectConfigPhoneConfigOutput) PhoneNumber() pulumix.Output[string] {
	return pulumix.Apply[GetQuickConnectQuickConnectConfigPhoneConfig](o, func(v GetQuickConnectQuickConnectConfigPhoneConfig) string { return v.PhoneNumber })
}

type GetQuickConnectQuickConnectConfigQueueConfig struct {
	// Identifier of the contact flow.
	ContactFlowId string `pulumi:"contactFlowId"`
	// Identifier for the queue.
	QueueId string `pulumi:"queueId"`
}

type GetQuickConnectQuickConnectConfigQueueConfigArgs struct {
	// Identifier of the contact flow.
	ContactFlowId pulumix.Input[string] `pulumi:"contactFlowId"`
	// Identifier for the queue.
	QueueId pulumix.Input[string] `pulumi:"queueId"`
}

func (GetQuickConnectQuickConnectConfigQueueConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfigQueueConfig)(nil)).Elem()
}

func (i GetQuickConnectQuickConnectConfigQueueConfigArgs) ToGetQuickConnectQuickConnectConfigQueueConfigOutput() GetQuickConnectQuickConnectConfigQueueConfigOutput {
	return i.ToGetQuickConnectQuickConnectConfigQueueConfigOutputWithContext(context.Background())
}

func (i GetQuickConnectQuickConnectConfigQueueConfigArgs) ToGetQuickConnectQuickConnectConfigQueueConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigQueueConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuickConnectQuickConnectConfigQueueConfigOutput)
}

func (i *GetQuickConnectQuickConnectConfigQueueConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetQuickConnectQuickConnectConfigQueueConfigArgs] {
	return pulumix.Val(i)
}

type GetQuickConnectQuickConnectConfigQueueConfigOutput struct{ *pulumi.OutputState }

func (GetQuickConnectQuickConnectConfigQueueConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfigQueueConfig)(nil)).Elem()
}

func (o GetQuickConnectQuickConnectConfigQueueConfigOutput) ToGetQuickConnectQuickConnectConfigQueueConfigOutput() GetQuickConnectQuickConnectConfigQueueConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigQueueConfigOutput) ToGetQuickConnectQuickConnectConfigQueueConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigQueueConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigQueueConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetQuickConnectQuickConnectConfigQueueConfig] {
	return pulumix.Output[GetQuickConnectQuickConnectConfigQueueConfig]{
		OutputState: o.OutputState,
	}
}

// Identifier of the contact flow.
func (o GetQuickConnectQuickConnectConfigQueueConfigOutput) ContactFlowId() pulumix.Output[string] {
	return pulumix.Apply[GetQuickConnectQuickConnectConfigQueueConfig](o, func(v GetQuickConnectQuickConnectConfigQueueConfig) string { return v.ContactFlowId })
}

// Identifier for the queue.
func (o GetQuickConnectQuickConnectConfigQueueConfigOutput) QueueId() pulumix.Output[string] {
	return pulumix.Apply[GetQuickConnectQuickConnectConfigQueueConfig](o, func(v GetQuickConnectQuickConnectConfigQueueConfig) string { return v.QueueId })
}

type GetQuickConnectQuickConnectConfigUserConfig struct {
	// Identifier of the contact flow.
	ContactFlowId string `pulumi:"contactFlowId"`
	// Identifier for the user.
	UserId string `pulumi:"userId"`
}

type GetQuickConnectQuickConnectConfigUserConfigArgs struct {
	// Identifier of the contact flow.
	ContactFlowId pulumix.Input[string] `pulumi:"contactFlowId"`
	// Identifier for the user.
	UserId pulumix.Input[string] `pulumi:"userId"`
}

func (GetQuickConnectQuickConnectConfigUserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfigUserConfig)(nil)).Elem()
}

func (i GetQuickConnectQuickConnectConfigUserConfigArgs) ToGetQuickConnectQuickConnectConfigUserConfigOutput() GetQuickConnectQuickConnectConfigUserConfigOutput {
	return i.ToGetQuickConnectQuickConnectConfigUserConfigOutputWithContext(context.Background())
}

func (i GetQuickConnectQuickConnectConfigUserConfigArgs) ToGetQuickConnectQuickConnectConfigUserConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigUserConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuickConnectQuickConnectConfigUserConfigOutput)
}

func (i *GetQuickConnectQuickConnectConfigUserConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetQuickConnectQuickConnectConfigUserConfigArgs] {
	return pulumix.Val(i)
}

type GetQuickConnectQuickConnectConfigUserConfigOutput struct{ *pulumi.OutputState }

func (GetQuickConnectQuickConnectConfigUserConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuickConnectQuickConnectConfigUserConfig)(nil)).Elem()
}

func (o GetQuickConnectQuickConnectConfigUserConfigOutput) ToGetQuickConnectQuickConnectConfigUserConfigOutput() GetQuickConnectQuickConnectConfigUserConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigUserConfigOutput) ToGetQuickConnectQuickConnectConfigUserConfigOutputWithContext(ctx context.Context) GetQuickConnectQuickConnectConfigUserConfigOutput {
	return o
}

func (o GetQuickConnectQuickConnectConfigUserConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetQuickConnectQuickConnectConfigUserConfig] {
	return pulumix.Output[GetQuickConnectQuickConnectConfigUserConfig]{
		OutputState: o.OutputState,
	}
}

// Identifier of the contact flow.
func (o GetQuickConnectQuickConnectConfigUserConfigOutput) ContactFlowId() pulumix.Output[string] {
	return pulumix.Apply[GetQuickConnectQuickConnectConfigUserConfig](o, func(v GetQuickConnectQuickConnectConfigUserConfig) string { return v.ContactFlowId })
}

// Identifier for the user.
func (o GetQuickConnectQuickConnectConfigUserConfigOutput) UserId() pulumix.Output[string] {
	return pulumix.Apply[GetQuickConnectQuickConnectConfigUserConfig](o, func(v GetQuickConnectQuickConnectConfigUserConfig) string { return v.UserId })
}

type GetRoutingProfileMediaConcurrency struct {
	// Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel string `pulumi:"channel"`
	// Number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
	Concurrency int `pulumi:"concurrency"`
}

type GetRoutingProfileMediaConcurrencyArgs struct {
	// Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel pulumix.Input[string] `pulumi:"channel"`
	// Number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
	Concurrency pulumix.Input[int] `pulumi:"concurrency"`
}

func (GetRoutingProfileMediaConcurrencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingProfileMediaConcurrency)(nil)).Elem()
}

func (i GetRoutingProfileMediaConcurrencyArgs) ToGetRoutingProfileMediaConcurrencyOutput() GetRoutingProfileMediaConcurrencyOutput {
	return i.ToGetRoutingProfileMediaConcurrencyOutputWithContext(context.Background())
}

func (i GetRoutingProfileMediaConcurrencyArgs) ToGetRoutingProfileMediaConcurrencyOutputWithContext(ctx context.Context) GetRoutingProfileMediaConcurrencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingProfileMediaConcurrencyOutput)
}

func (i *GetRoutingProfileMediaConcurrencyArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRoutingProfileMediaConcurrencyArgs] {
	return pulumix.Val(i)
}

type GetRoutingProfileMediaConcurrencyOutput struct{ *pulumi.OutputState }

func (GetRoutingProfileMediaConcurrencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingProfileMediaConcurrency)(nil)).Elem()
}

func (o GetRoutingProfileMediaConcurrencyOutput) ToGetRoutingProfileMediaConcurrencyOutput() GetRoutingProfileMediaConcurrencyOutput {
	return o
}

func (o GetRoutingProfileMediaConcurrencyOutput) ToGetRoutingProfileMediaConcurrencyOutputWithContext(ctx context.Context) GetRoutingProfileMediaConcurrencyOutput {
	return o
}

func (o GetRoutingProfileMediaConcurrencyOutput) ToOutput(ctx context.Context) pulumix.Output[GetRoutingProfileMediaConcurrency] {
	return pulumix.Output[GetRoutingProfileMediaConcurrency]{
		OutputState: o.OutputState,
	}
}

// Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
func (o GetRoutingProfileMediaConcurrencyOutput) Channel() pulumix.Output[string] {
	return pulumix.Apply[GetRoutingProfileMediaConcurrency](o, func(v GetRoutingProfileMediaConcurrency) string { return v.Channel })
}

// Number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
func (o GetRoutingProfileMediaConcurrencyOutput) Concurrency() pulumix.Output[int] {
	return pulumix.Apply[GetRoutingProfileMediaConcurrency](o, func(v GetRoutingProfileMediaConcurrency) int { return v.Concurrency })
}

type GetRoutingProfileQueueConfig struct {
	// Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel string `pulumi:"channel"`
	// Delay, in seconds, that a contact should be in the queue before they are routed to an available agent
	Delay int `pulumi:"delay"`
	// Order in which contacts are to be handled for the queue.
	Priority int `pulumi:"priority"`
	// ARN for the queue.
	QueueArn string `pulumi:"queueArn"`
	// Identifier for the queue.
	QueueId string `pulumi:"queueId"`
	// Name for the queue.
	QueueName string `pulumi:"queueName"`
}

type GetRoutingProfileQueueConfigArgs struct {
	// Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
	Channel pulumix.Input[string] `pulumi:"channel"`
	// Delay, in seconds, that a contact should be in the queue before they are routed to an available agent
	Delay pulumix.Input[int] `pulumi:"delay"`
	// Order in which contacts are to be handled for the queue.
	Priority pulumix.Input[int] `pulumi:"priority"`
	// ARN for the queue.
	QueueArn pulumix.Input[string] `pulumi:"queueArn"`
	// Identifier for the queue.
	QueueId pulumix.Input[string] `pulumi:"queueId"`
	// Name for the queue.
	QueueName pulumix.Input[string] `pulumi:"queueName"`
}

func (GetRoutingProfileQueueConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingProfileQueueConfig)(nil)).Elem()
}

func (i GetRoutingProfileQueueConfigArgs) ToGetRoutingProfileQueueConfigOutput() GetRoutingProfileQueueConfigOutput {
	return i.ToGetRoutingProfileQueueConfigOutputWithContext(context.Background())
}

func (i GetRoutingProfileQueueConfigArgs) ToGetRoutingProfileQueueConfigOutputWithContext(ctx context.Context) GetRoutingProfileQueueConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutingProfileQueueConfigOutput)
}

func (i *GetRoutingProfileQueueConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRoutingProfileQueueConfigArgs] {
	return pulumix.Val(i)
}

type GetRoutingProfileQueueConfigOutput struct{ *pulumi.OutputState }

func (GetRoutingProfileQueueConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutingProfileQueueConfig)(nil)).Elem()
}

func (o GetRoutingProfileQueueConfigOutput) ToGetRoutingProfileQueueConfigOutput() GetRoutingProfileQueueConfigOutput {
	return o
}

func (o GetRoutingProfileQueueConfigOutput) ToGetRoutingProfileQueueConfigOutputWithContext(ctx context.Context) GetRoutingProfileQueueConfigOutput {
	return o
}

func (o GetRoutingProfileQueueConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetRoutingProfileQueueConfig] {
	return pulumix.Output[GetRoutingProfileQueueConfig]{
		OutputState: o.OutputState,
	}
}

// Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
func (o GetRoutingProfileQueueConfigOutput) Channel() pulumix.Output[string] {
	return pulumix.Apply[GetRoutingProfileQueueConfig](o, func(v GetRoutingProfileQueueConfig) string { return v.Channel })
}

// Delay, in seconds, that a contact should be in the queue before they are routed to an available agent
func (o GetRoutingProfileQueueConfigOutput) Delay() pulumix.Output[int] {
	return pulumix.Apply[GetRoutingProfileQueueConfig](o, func(v GetRoutingProfileQueueConfig) int { return v.Delay })
}

// Order in which contacts are to be handled for the queue.
func (o GetRoutingProfileQueueConfigOutput) Priority() pulumix.Output[int] {
	return pulumix.Apply[GetRoutingProfileQueueConfig](o, func(v GetRoutingProfileQueueConfig) int { return v.Priority })
}

// ARN for the queue.
func (o GetRoutingProfileQueueConfigOutput) QueueArn() pulumix.Output[string] {
	return pulumix.Apply[GetRoutingProfileQueueConfig](o, func(v GetRoutingProfileQueueConfig) string { return v.QueueArn })
}

// Identifier for the queue.
func (o GetRoutingProfileQueueConfigOutput) QueueId() pulumix.Output[string] {
	return pulumix.Apply[GetRoutingProfileQueueConfig](o, func(v GetRoutingProfileQueueConfig) string { return v.QueueId })
}

// Name for the queue.
func (o GetRoutingProfileQueueConfigOutput) QueueName() pulumix.Output[string] {
	return pulumix.Apply[GetRoutingProfileQueueConfig](o, func(v GetRoutingProfileQueueConfig) string { return v.QueueName })
}

type GetUserHierarchyGroupHierarchyPath struct {
	// Details of level five. See below.
	LevelFives []GetUserHierarchyGroupHierarchyPathLevelFife `pulumi:"levelFives"`
	// Details of level four. See below.
	LevelFours []GetUserHierarchyGroupHierarchyPathLevelFour `pulumi:"levelFours"`
	// Details of level one. See below.
	LevelOnes []GetUserHierarchyGroupHierarchyPathLevelOne `pulumi:"levelOnes"`
	// Details of level three. See below.
	LevelThrees []GetUserHierarchyGroupHierarchyPathLevelThree `pulumi:"levelThrees"`
	// Details of level two. See below.
	LevelTwos []GetUserHierarchyGroupHierarchyPathLevelTwo `pulumi:"levelTwos"`
}

type GetUserHierarchyGroupHierarchyPathArgs struct {
	// Details of level five. See below.
	LevelFives pulumix.Input[[]*GetUserHierarchyGroupHierarchyPathLevelFifeArgs] `pulumi:"levelFives"`
	// Details of level four. See below.
	LevelFours pulumix.Input[[]*GetUserHierarchyGroupHierarchyPathLevelFourArgs] `pulumi:"levelFours"`
	// Details of level one. See below.
	LevelOnes pulumix.Input[[]*GetUserHierarchyGroupHierarchyPathLevelOneArgs] `pulumi:"levelOnes"`
	// Details of level three. See below.
	LevelThrees pulumix.Input[[]*GetUserHierarchyGroupHierarchyPathLevelThreeArgs] `pulumi:"levelThrees"`
	// Details of level two. See below.
	LevelTwos pulumix.Input[[]*GetUserHierarchyGroupHierarchyPathLevelTwoArgs] `pulumi:"levelTwos"`
}

func (GetUserHierarchyGroupHierarchyPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPath)(nil)).Elem()
}

func (i GetUserHierarchyGroupHierarchyPathArgs) ToGetUserHierarchyGroupHierarchyPathOutput() GetUserHierarchyGroupHierarchyPathOutput {
	return i.ToGetUserHierarchyGroupHierarchyPathOutputWithContext(context.Background())
}

func (i GetUserHierarchyGroupHierarchyPathArgs) ToGetUserHierarchyGroupHierarchyPathOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyGroupHierarchyPathOutput)
}

func (i *GetUserHierarchyGroupHierarchyPathArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyGroupHierarchyPathArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyGroupHierarchyPathOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyGroupHierarchyPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPath)(nil)).Elem()
}

func (o GetUserHierarchyGroupHierarchyPathOutput) ToGetUserHierarchyGroupHierarchyPathOutput() GetUserHierarchyGroupHierarchyPathOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathOutput) ToGetUserHierarchyGroupHierarchyPathOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyGroupHierarchyPath] {
	return pulumix.Output[GetUserHierarchyGroupHierarchyPath]{
		OutputState: o.OutputState,
	}
}

// Details of level five. See below.
func (o GetUserHierarchyGroupHierarchyPathOutput) LevelFives() pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelFife, GetUserHierarchyGroupHierarchyPathLevelFifeOutput] {
	value := pulumix.Apply[GetUserHierarchyGroupHierarchyPath](o, func(v GetUserHierarchyGroupHierarchyPath) []GetUserHierarchyGroupHierarchyPathLevelFife {
		return v.LevelFives
	})
	return pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelFife, GetUserHierarchyGroupHierarchyPathLevelFifeOutput]{OutputState: value.OutputState}
}

// Details of level four. See below.
func (o GetUserHierarchyGroupHierarchyPathOutput) LevelFours() pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelFour, GetUserHierarchyGroupHierarchyPathLevelFourOutput] {
	value := pulumix.Apply[GetUserHierarchyGroupHierarchyPath](o, func(v GetUserHierarchyGroupHierarchyPath) []GetUserHierarchyGroupHierarchyPathLevelFour {
		return v.LevelFours
	})
	return pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelFour, GetUserHierarchyGroupHierarchyPathLevelFourOutput]{OutputState: value.OutputState}
}

// Details of level one. See below.
func (o GetUserHierarchyGroupHierarchyPathOutput) LevelOnes() pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelOne, GetUserHierarchyGroupHierarchyPathLevelOneOutput] {
	value := pulumix.Apply[GetUserHierarchyGroupHierarchyPath](o, func(v GetUserHierarchyGroupHierarchyPath) []GetUserHierarchyGroupHierarchyPathLevelOne {
		return v.LevelOnes
	})
	return pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelOne, GetUserHierarchyGroupHierarchyPathLevelOneOutput]{OutputState: value.OutputState}
}

// Details of level three. See below.
func (o GetUserHierarchyGroupHierarchyPathOutput) LevelThrees() pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelThree, GetUserHierarchyGroupHierarchyPathLevelThreeOutput] {
	value := pulumix.Apply[GetUserHierarchyGroupHierarchyPath](o, func(v GetUserHierarchyGroupHierarchyPath) []GetUserHierarchyGroupHierarchyPathLevelThree {
		return v.LevelThrees
	})
	return pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelThree, GetUserHierarchyGroupHierarchyPathLevelThreeOutput]{OutputState: value.OutputState}
}

// Details of level two. See below.
func (o GetUserHierarchyGroupHierarchyPathOutput) LevelTwos() pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelTwo, GetUserHierarchyGroupHierarchyPathLevelTwoOutput] {
	value := pulumix.Apply[GetUserHierarchyGroupHierarchyPath](o, func(v GetUserHierarchyGroupHierarchyPath) []GetUserHierarchyGroupHierarchyPathLevelTwo {
		return v.LevelTwos
	})
	return pulumix.GArrayOutput[GetUserHierarchyGroupHierarchyPathLevelTwo, GetUserHierarchyGroupHierarchyPathLevelTwoOutput]{OutputState: value.OutputState}
}

type GetUserHierarchyGroupHierarchyPathLevelFife struct {
	// ARN of the hierarchy group.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id string `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name string `pulumi:"name"`
}

type GetUserHierarchyGroupHierarchyPathLevelFifeArgs struct {
	// ARN of the hierarchy group.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[string] `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyGroupHierarchyPathLevelFifeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelFife)(nil)).Elem()
}

func (i GetUserHierarchyGroupHierarchyPathLevelFifeArgs) ToGetUserHierarchyGroupHierarchyPathLevelFifeOutput() GetUserHierarchyGroupHierarchyPathLevelFifeOutput {
	return i.ToGetUserHierarchyGroupHierarchyPathLevelFifeOutputWithContext(context.Background())
}

func (i GetUserHierarchyGroupHierarchyPathLevelFifeArgs) ToGetUserHierarchyGroupHierarchyPathLevelFifeOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelFifeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyGroupHierarchyPathLevelFifeOutput)
}

func (i *GetUserHierarchyGroupHierarchyPathLevelFifeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyGroupHierarchyPathLevelFifeArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyGroupHierarchyPathLevelFifeOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyGroupHierarchyPathLevelFifeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelFife)(nil)).Elem()
}

func (o GetUserHierarchyGroupHierarchyPathLevelFifeOutput) ToGetUserHierarchyGroupHierarchyPathLevelFifeOutput() GetUserHierarchyGroupHierarchyPathLevelFifeOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelFifeOutput) ToGetUserHierarchyGroupHierarchyPathLevelFifeOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelFifeOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelFifeOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelFife] {
	return pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelFife]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelFifeOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelFife](o, func(v GetUserHierarchyGroupHierarchyPathLevelFife) string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelFifeOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelFife](o, func(v GetUserHierarchyGroupHierarchyPathLevelFife) string { return v.Id })
}

// Returns information on a specific hierarchy group by name
func (o GetUserHierarchyGroupHierarchyPathLevelFifeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelFife](o, func(v GetUserHierarchyGroupHierarchyPathLevelFife) string { return v.Name })
}

type GetUserHierarchyGroupHierarchyPathLevelFour struct {
	// ARN of the hierarchy group.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id string `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name string `pulumi:"name"`
}

type GetUserHierarchyGroupHierarchyPathLevelFourArgs struct {
	// ARN of the hierarchy group.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[string] `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyGroupHierarchyPathLevelFourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelFour)(nil)).Elem()
}

func (i GetUserHierarchyGroupHierarchyPathLevelFourArgs) ToGetUserHierarchyGroupHierarchyPathLevelFourOutput() GetUserHierarchyGroupHierarchyPathLevelFourOutput {
	return i.ToGetUserHierarchyGroupHierarchyPathLevelFourOutputWithContext(context.Background())
}

func (i GetUserHierarchyGroupHierarchyPathLevelFourArgs) ToGetUserHierarchyGroupHierarchyPathLevelFourOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelFourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyGroupHierarchyPathLevelFourOutput)
}

func (i *GetUserHierarchyGroupHierarchyPathLevelFourArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyGroupHierarchyPathLevelFourArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyGroupHierarchyPathLevelFourOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyGroupHierarchyPathLevelFourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelFour)(nil)).Elem()
}

func (o GetUserHierarchyGroupHierarchyPathLevelFourOutput) ToGetUserHierarchyGroupHierarchyPathLevelFourOutput() GetUserHierarchyGroupHierarchyPathLevelFourOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelFourOutput) ToGetUserHierarchyGroupHierarchyPathLevelFourOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelFourOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelFourOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelFour] {
	return pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelFour]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelFourOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelFour](o, func(v GetUserHierarchyGroupHierarchyPathLevelFour) string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelFourOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelFour](o, func(v GetUserHierarchyGroupHierarchyPathLevelFour) string { return v.Id })
}

// Returns information on a specific hierarchy group by name
func (o GetUserHierarchyGroupHierarchyPathLevelFourOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelFour](o, func(v GetUserHierarchyGroupHierarchyPathLevelFour) string { return v.Name })
}

type GetUserHierarchyGroupHierarchyPathLevelOne struct {
	// ARN of the hierarchy group.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id string `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name string `pulumi:"name"`
}

type GetUserHierarchyGroupHierarchyPathLevelOneArgs struct {
	// ARN of the hierarchy group.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[string] `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyGroupHierarchyPathLevelOneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelOne)(nil)).Elem()
}

func (i GetUserHierarchyGroupHierarchyPathLevelOneArgs) ToGetUserHierarchyGroupHierarchyPathLevelOneOutput() GetUserHierarchyGroupHierarchyPathLevelOneOutput {
	return i.ToGetUserHierarchyGroupHierarchyPathLevelOneOutputWithContext(context.Background())
}

func (i GetUserHierarchyGroupHierarchyPathLevelOneArgs) ToGetUserHierarchyGroupHierarchyPathLevelOneOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelOneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyGroupHierarchyPathLevelOneOutput)
}

func (i *GetUserHierarchyGroupHierarchyPathLevelOneArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyGroupHierarchyPathLevelOneArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyGroupHierarchyPathLevelOneOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyGroupHierarchyPathLevelOneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelOne)(nil)).Elem()
}

func (o GetUserHierarchyGroupHierarchyPathLevelOneOutput) ToGetUserHierarchyGroupHierarchyPathLevelOneOutput() GetUserHierarchyGroupHierarchyPathLevelOneOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelOneOutput) ToGetUserHierarchyGroupHierarchyPathLevelOneOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelOneOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelOneOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelOne] {
	return pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelOne]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelOneOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelOne](o, func(v GetUserHierarchyGroupHierarchyPathLevelOne) string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelOneOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelOne](o, func(v GetUserHierarchyGroupHierarchyPathLevelOne) string { return v.Id })
}

// Returns information on a specific hierarchy group by name
func (o GetUserHierarchyGroupHierarchyPathLevelOneOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelOne](o, func(v GetUserHierarchyGroupHierarchyPathLevelOne) string { return v.Name })
}

type GetUserHierarchyGroupHierarchyPathLevelThree struct {
	// ARN of the hierarchy group.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id string `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name string `pulumi:"name"`
}

type GetUserHierarchyGroupHierarchyPathLevelThreeArgs struct {
	// ARN of the hierarchy group.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[string] `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyGroupHierarchyPathLevelThreeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelThree)(nil)).Elem()
}

func (i GetUserHierarchyGroupHierarchyPathLevelThreeArgs) ToGetUserHierarchyGroupHierarchyPathLevelThreeOutput() GetUserHierarchyGroupHierarchyPathLevelThreeOutput {
	return i.ToGetUserHierarchyGroupHierarchyPathLevelThreeOutputWithContext(context.Background())
}

func (i GetUserHierarchyGroupHierarchyPathLevelThreeArgs) ToGetUserHierarchyGroupHierarchyPathLevelThreeOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelThreeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyGroupHierarchyPathLevelThreeOutput)
}

func (i *GetUserHierarchyGroupHierarchyPathLevelThreeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyGroupHierarchyPathLevelThreeArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyGroupHierarchyPathLevelThreeOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyGroupHierarchyPathLevelThreeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelThree)(nil)).Elem()
}

func (o GetUserHierarchyGroupHierarchyPathLevelThreeOutput) ToGetUserHierarchyGroupHierarchyPathLevelThreeOutput() GetUserHierarchyGroupHierarchyPathLevelThreeOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelThreeOutput) ToGetUserHierarchyGroupHierarchyPathLevelThreeOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelThreeOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelThreeOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelThree] {
	return pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelThree]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelThreeOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelThree](o, func(v GetUserHierarchyGroupHierarchyPathLevelThree) string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelThreeOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelThree](o, func(v GetUserHierarchyGroupHierarchyPathLevelThree) string { return v.Id })
}

// Returns information on a specific hierarchy group by name
func (o GetUserHierarchyGroupHierarchyPathLevelThreeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelThree](o, func(v GetUserHierarchyGroupHierarchyPathLevelThree) string { return v.Name })
}

type GetUserHierarchyGroupHierarchyPathLevelTwo struct {
	// ARN of the hierarchy group.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id string `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name string `pulumi:"name"`
}

type GetUserHierarchyGroupHierarchyPathLevelTwoArgs struct {
	// ARN of the hierarchy group.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy group.
	Id pulumix.Input[string] `pulumi:"id"`
	// Returns information on a specific hierarchy group by name
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyGroupHierarchyPathLevelTwoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelTwo)(nil)).Elem()
}

func (i GetUserHierarchyGroupHierarchyPathLevelTwoArgs) ToGetUserHierarchyGroupHierarchyPathLevelTwoOutput() GetUserHierarchyGroupHierarchyPathLevelTwoOutput {
	return i.ToGetUserHierarchyGroupHierarchyPathLevelTwoOutputWithContext(context.Background())
}

func (i GetUserHierarchyGroupHierarchyPathLevelTwoArgs) ToGetUserHierarchyGroupHierarchyPathLevelTwoOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelTwoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyGroupHierarchyPathLevelTwoOutput)
}

func (i *GetUserHierarchyGroupHierarchyPathLevelTwoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyGroupHierarchyPathLevelTwoArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyGroupHierarchyPathLevelTwoOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyGroupHierarchyPathLevelTwoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyGroupHierarchyPathLevelTwo)(nil)).Elem()
}

func (o GetUserHierarchyGroupHierarchyPathLevelTwoOutput) ToGetUserHierarchyGroupHierarchyPathLevelTwoOutput() GetUserHierarchyGroupHierarchyPathLevelTwoOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelTwoOutput) ToGetUserHierarchyGroupHierarchyPathLevelTwoOutputWithContext(ctx context.Context) GetUserHierarchyGroupHierarchyPathLevelTwoOutput {
	return o
}

func (o GetUserHierarchyGroupHierarchyPathLevelTwoOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelTwo] {
	return pulumix.Output[GetUserHierarchyGroupHierarchyPathLevelTwo]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelTwoOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelTwo](o, func(v GetUserHierarchyGroupHierarchyPathLevelTwo) string { return v.Arn })
}

// The identifier of the hierarchy group.
func (o GetUserHierarchyGroupHierarchyPathLevelTwoOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelTwo](o, func(v GetUserHierarchyGroupHierarchyPathLevelTwo) string { return v.Id })
}

// Returns information on a specific hierarchy group by name
func (o GetUserHierarchyGroupHierarchyPathLevelTwoOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyGroupHierarchyPathLevelTwo](o, func(v GetUserHierarchyGroupHierarchyPathLevelTwo) string { return v.Name })
}

type GetUserHierarchyStructureHierarchyStructure struct {
	// Details of level five. See below.
	LevelFives []GetUserHierarchyStructureHierarchyStructureLevelFife `pulumi:"levelFives"`
	// Details of level four. See below.
	LevelFours []GetUserHierarchyStructureHierarchyStructureLevelFour `pulumi:"levelFours"`
	// Details of level one. See below.
	LevelOnes []GetUserHierarchyStructureHierarchyStructureLevelOne `pulumi:"levelOnes"`
	// Details of level three. See below.
	LevelThrees []GetUserHierarchyStructureHierarchyStructureLevelThree `pulumi:"levelThrees"`
	// Details of level two. See below.
	LevelTwos []GetUserHierarchyStructureHierarchyStructureLevelTwo `pulumi:"levelTwos"`
}

type GetUserHierarchyStructureHierarchyStructureArgs struct {
	// Details of level five. See below.
	LevelFives pulumix.Input[[]*GetUserHierarchyStructureHierarchyStructureLevelFifeArgs] `pulumi:"levelFives"`
	// Details of level four. See below.
	LevelFours pulumix.Input[[]*GetUserHierarchyStructureHierarchyStructureLevelFourArgs] `pulumi:"levelFours"`
	// Details of level one. See below.
	LevelOnes pulumix.Input[[]*GetUserHierarchyStructureHierarchyStructureLevelOneArgs] `pulumi:"levelOnes"`
	// Details of level three. See below.
	LevelThrees pulumix.Input[[]*GetUserHierarchyStructureHierarchyStructureLevelThreeArgs] `pulumi:"levelThrees"`
	// Details of level two. See below.
	LevelTwos pulumix.Input[[]*GetUserHierarchyStructureHierarchyStructureLevelTwoArgs] `pulumi:"levelTwos"`
}

func (GetUserHierarchyStructureHierarchyStructureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructure)(nil)).Elem()
}

func (i GetUserHierarchyStructureHierarchyStructureArgs) ToGetUserHierarchyStructureHierarchyStructureOutput() GetUserHierarchyStructureHierarchyStructureOutput {
	return i.ToGetUserHierarchyStructureHierarchyStructureOutputWithContext(context.Background())
}

func (i GetUserHierarchyStructureHierarchyStructureArgs) ToGetUserHierarchyStructureHierarchyStructureOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyStructureHierarchyStructureOutput)
}

func (i *GetUserHierarchyStructureHierarchyStructureArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyStructureHierarchyStructureArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyStructureHierarchyStructureOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyStructureHierarchyStructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructure)(nil)).Elem()
}

func (o GetUserHierarchyStructureHierarchyStructureOutput) ToGetUserHierarchyStructureHierarchyStructureOutput() GetUserHierarchyStructureHierarchyStructureOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureOutput) ToGetUserHierarchyStructureHierarchyStructureOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyStructureHierarchyStructure] {
	return pulumix.Output[GetUserHierarchyStructureHierarchyStructure]{
		OutputState: o.OutputState,
	}
}

// Details of level five. See below.
func (o GetUserHierarchyStructureHierarchyStructureOutput) LevelFives() pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelFife, GetUserHierarchyStructureHierarchyStructureLevelFifeOutput] {
	value := pulumix.Apply[GetUserHierarchyStructureHierarchyStructure](o, func(v GetUserHierarchyStructureHierarchyStructure) []GetUserHierarchyStructureHierarchyStructureLevelFife {
		return v.LevelFives
	})
	return pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelFife, GetUserHierarchyStructureHierarchyStructureLevelFifeOutput]{OutputState: value.OutputState}
}

// Details of level four. See below.
func (o GetUserHierarchyStructureHierarchyStructureOutput) LevelFours() pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelFour, GetUserHierarchyStructureHierarchyStructureLevelFourOutput] {
	value := pulumix.Apply[GetUserHierarchyStructureHierarchyStructure](o, func(v GetUserHierarchyStructureHierarchyStructure) []GetUserHierarchyStructureHierarchyStructureLevelFour {
		return v.LevelFours
	})
	return pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelFour, GetUserHierarchyStructureHierarchyStructureLevelFourOutput]{OutputState: value.OutputState}
}

// Details of level one. See below.
func (o GetUserHierarchyStructureHierarchyStructureOutput) LevelOnes() pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelOne, GetUserHierarchyStructureHierarchyStructureLevelOneOutput] {
	value := pulumix.Apply[GetUserHierarchyStructureHierarchyStructure](o, func(v GetUserHierarchyStructureHierarchyStructure) []GetUserHierarchyStructureHierarchyStructureLevelOne {
		return v.LevelOnes
	})
	return pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelOne, GetUserHierarchyStructureHierarchyStructureLevelOneOutput]{OutputState: value.OutputState}
}

// Details of level three. See below.
func (o GetUserHierarchyStructureHierarchyStructureOutput) LevelThrees() pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelThree, GetUserHierarchyStructureHierarchyStructureLevelThreeOutput] {
	value := pulumix.Apply[GetUserHierarchyStructureHierarchyStructure](o, func(v GetUserHierarchyStructureHierarchyStructure) []GetUserHierarchyStructureHierarchyStructureLevelThree {
		return v.LevelThrees
	})
	return pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelThree, GetUserHierarchyStructureHierarchyStructureLevelThreeOutput]{OutputState: value.OutputState}
}

// Details of level two. See below.
func (o GetUserHierarchyStructureHierarchyStructureOutput) LevelTwos() pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelTwo, GetUserHierarchyStructureHierarchyStructureLevelTwoOutput] {
	value := pulumix.Apply[GetUserHierarchyStructureHierarchyStructure](o, func(v GetUserHierarchyStructureHierarchyStructure) []GetUserHierarchyStructureHierarchyStructureLevelTwo {
		return v.LevelTwos
	})
	return pulumix.GArrayOutput[GetUserHierarchyStructureHierarchyStructureLevelTwo, GetUserHierarchyStructureHierarchyStructureLevelTwoOutput]{OutputState: value.OutputState}
}

type GetUserHierarchyStructureHierarchyStructureLevelFife struct {
	// ARN of the hierarchy level.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id string `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type GetUserHierarchyStructureHierarchyStructureLevelFifeArgs struct {
	// ARN of the hierarchy level.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyStructureHierarchyStructureLevelFifeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelFife)(nil)).Elem()
}

func (i GetUserHierarchyStructureHierarchyStructureLevelFifeArgs) ToGetUserHierarchyStructureHierarchyStructureLevelFifeOutput() GetUserHierarchyStructureHierarchyStructureLevelFifeOutput {
	return i.ToGetUserHierarchyStructureHierarchyStructureLevelFifeOutputWithContext(context.Background())
}

func (i GetUserHierarchyStructureHierarchyStructureLevelFifeArgs) ToGetUserHierarchyStructureHierarchyStructureLevelFifeOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelFifeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyStructureHierarchyStructureLevelFifeOutput)
}

func (i *GetUserHierarchyStructureHierarchyStructureLevelFifeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyStructureHierarchyStructureLevelFifeArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyStructureHierarchyStructureLevelFifeOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelFife)(nil)).Elem()
}

func (o GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) ToGetUserHierarchyStructureHierarchyStructureLevelFifeOutput() GetUserHierarchyStructureHierarchyStructureLevelFifeOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) ToGetUserHierarchyStructureHierarchyStructureLevelFifeOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelFifeOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelFife] {
	return pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelFife]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelFife](o, func(v GetUserHierarchyStructureHierarchyStructureLevelFife) string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelFife](o, func(v GetUserHierarchyStructureHierarchyStructureLevelFife) string { return v.Id })
}

// Name of the user hierarchy level. Must not be more than 50 characters.
func (o GetUserHierarchyStructureHierarchyStructureLevelFifeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelFife](o, func(v GetUserHierarchyStructureHierarchyStructureLevelFife) string { return v.Name })
}

type GetUserHierarchyStructureHierarchyStructureLevelFour struct {
	// ARN of the hierarchy level.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id string `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type GetUserHierarchyStructureHierarchyStructureLevelFourArgs struct {
	// ARN of the hierarchy level.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyStructureHierarchyStructureLevelFourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelFour)(nil)).Elem()
}

func (i GetUserHierarchyStructureHierarchyStructureLevelFourArgs) ToGetUserHierarchyStructureHierarchyStructureLevelFourOutput() GetUserHierarchyStructureHierarchyStructureLevelFourOutput {
	return i.ToGetUserHierarchyStructureHierarchyStructureLevelFourOutputWithContext(context.Background())
}

func (i GetUserHierarchyStructureHierarchyStructureLevelFourArgs) ToGetUserHierarchyStructureHierarchyStructureLevelFourOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelFourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyStructureHierarchyStructureLevelFourOutput)
}

func (i *GetUserHierarchyStructureHierarchyStructureLevelFourArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyStructureHierarchyStructureLevelFourArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyStructureHierarchyStructureLevelFourOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyStructureHierarchyStructureLevelFourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelFour)(nil)).Elem()
}

func (o GetUserHierarchyStructureHierarchyStructureLevelFourOutput) ToGetUserHierarchyStructureHierarchyStructureLevelFourOutput() GetUserHierarchyStructureHierarchyStructureLevelFourOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelFourOutput) ToGetUserHierarchyStructureHierarchyStructureLevelFourOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelFourOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelFourOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelFour] {
	return pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelFour]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelFourOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelFour](o, func(v GetUserHierarchyStructureHierarchyStructureLevelFour) string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelFourOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelFour](o, func(v GetUserHierarchyStructureHierarchyStructureLevelFour) string { return v.Id })
}

// Name of the user hierarchy level. Must not be more than 50 characters.
func (o GetUserHierarchyStructureHierarchyStructureLevelFourOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelFour](o, func(v GetUserHierarchyStructureHierarchyStructureLevelFour) string { return v.Name })
}

type GetUserHierarchyStructureHierarchyStructureLevelOne struct {
	// ARN of the hierarchy level.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id string `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type GetUserHierarchyStructureHierarchyStructureLevelOneArgs struct {
	// ARN of the hierarchy level.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyStructureHierarchyStructureLevelOneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelOne)(nil)).Elem()
}

func (i GetUserHierarchyStructureHierarchyStructureLevelOneArgs) ToGetUserHierarchyStructureHierarchyStructureLevelOneOutput() GetUserHierarchyStructureHierarchyStructureLevelOneOutput {
	return i.ToGetUserHierarchyStructureHierarchyStructureLevelOneOutputWithContext(context.Background())
}

func (i GetUserHierarchyStructureHierarchyStructureLevelOneArgs) ToGetUserHierarchyStructureHierarchyStructureLevelOneOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelOneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyStructureHierarchyStructureLevelOneOutput)
}

func (i *GetUserHierarchyStructureHierarchyStructureLevelOneArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyStructureHierarchyStructureLevelOneArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyStructureHierarchyStructureLevelOneOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyStructureHierarchyStructureLevelOneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelOne)(nil)).Elem()
}

func (o GetUserHierarchyStructureHierarchyStructureLevelOneOutput) ToGetUserHierarchyStructureHierarchyStructureLevelOneOutput() GetUserHierarchyStructureHierarchyStructureLevelOneOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelOneOutput) ToGetUserHierarchyStructureHierarchyStructureLevelOneOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelOneOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelOneOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelOne] {
	return pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelOne]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelOneOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelOne](o, func(v GetUserHierarchyStructureHierarchyStructureLevelOne) string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelOneOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelOne](o, func(v GetUserHierarchyStructureHierarchyStructureLevelOne) string { return v.Id })
}

// Name of the user hierarchy level. Must not be more than 50 characters.
func (o GetUserHierarchyStructureHierarchyStructureLevelOneOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelOne](o, func(v GetUserHierarchyStructureHierarchyStructureLevelOne) string { return v.Name })
}

type GetUserHierarchyStructureHierarchyStructureLevelThree struct {
	// ARN of the hierarchy level.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id string `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type GetUserHierarchyStructureHierarchyStructureLevelThreeArgs struct {
	// ARN of the hierarchy level.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyStructureHierarchyStructureLevelThreeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelThree)(nil)).Elem()
}

func (i GetUserHierarchyStructureHierarchyStructureLevelThreeArgs) ToGetUserHierarchyStructureHierarchyStructureLevelThreeOutput() GetUserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return i.ToGetUserHierarchyStructureHierarchyStructureLevelThreeOutputWithContext(context.Background())
}

func (i GetUserHierarchyStructureHierarchyStructureLevelThreeArgs) ToGetUserHierarchyStructureHierarchyStructureLevelThreeOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyStructureHierarchyStructureLevelThreeOutput)
}

func (i *GetUserHierarchyStructureHierarchyStructureLevelThreeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyStructureHierarchyStructureLevelThreeArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyStructureHierarchyStructureLevelThreeOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelThree)(nil)).Elem()
}

func (o GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) ToGetUserHierarchyStructureHierarchyStructureLevelThreeOutput() GetUserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) ToGetUserHierarchyStructureHierarchyStructureLevelThreeOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelThreeOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelThree] {
	return pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelThree]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelThree](o, func(v GetUserHierarchyStructureHierarchyStructureLevelThree) string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelThree](o, func(v GetUserHierarchyStructureHierarchyStructureLevelThree) string { return v.Id })
}

// Name of the user hierarchy level. Must not be more than 50 characters.
func (o GetUserHierarchyStructureHierarchyStructureLevelThreeOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelThree](o, func(v GetUserHierarchyStructureHierarchyStructureLevelThree) string { return v.Name })
}

type GetUserHierarchyStructureHierarchyStructureLevelTwo struct {
	// ARN of the hierarchy level.
	Arn string `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id string `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name string `pulumi:"name"`
}

type GetUserHierarchyStructureHierarchyStructureLevelTwoArgs struct {
	// ARN of the hierarchy level.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The identifier of the hierarchy level.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the user hierarchy level. Must not be more than 50 characters.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetUserHierarchyStructureHierarchyStructureLevelTwoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelTwo)(nil)).Elem()
}

func (i GetUserHierarchyStructureHierarchyStructureLevelTwoArgs) ToGetUserHierarchyStructureHierarchyStructureLevelTwoOutput() GetUserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return i.ToGetUserHierarchyStructureHierarchyStructureLevelTwoOutputWithContext(context.Background())
}

func (i GetUserHierarchyStructureHierarchyStructureLevelTwoArgs) ToGetUserHierarchyStructureHierarchyStructureLevelTwoOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserHierarchyStructureHierarchyStructureLevelTwoOutput)
}

func (i *GetUserHierarchyStructureHierarchyStructureLevelTwoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserHierarchyStructureHierarchyStructureLevelTwoArgs] {
	return pulumix.Val(i)
}

type GetUserHierarchyStructureHierarchyStructureLevelTwoOutput struct{ *pulumi.OutputState }

func (GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserHierarchyStructureHierarchyStructureLevelTwo)(nil)).Elem()
}

func (o GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) ToGetUserHierarchyStructureHierarchyStructureLevelTwoOutput() GetUserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) ToGetUserHierarchyStructureHierarchyStructureLevelTwoOutputWithContext(ctx context.Context) GetUserHierarchyStructureHierarchyStructureLevelTwoOutput {
	return o
}

func (o GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelTwo] {
	return pulumix.Output[GetUserHierarchyStructureHierarchyStructureLevelTwo]{
		OutputState: o.OutputState,
	}
}

// ARN of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelTwo](o, func(v GetUserHierarchyStructureHierarchyStructureLevelTwo) string { return v.Arn })
}

// The identifier of the hierarchy level.
func (o GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelTwo](o, func(v GetUserHierarchyStructureHierarchyStructureLevelTwo) string { return v.Id })
}

// Name of the user hierarchy level. Must not be more than 50 characters.
func (o GetUserHierarchyStructureHierarchyStructureLevelTwoOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUserHierarchyStructureHierarchyStructureLevelTwo](o, func(v GetUserHierarchyStructureHierarchyStructureLevelTwo) string { return v.Name })
}

type GetUserIdentityInfo struct {
	// The email address.
	Email string `pulumi:"email"`
	// The first name.
	FirstName string `pulumi:"firstName"`
	// The last name.
	LastName string `pulumi:"lastName"`
}

type GetUserIdentityInfoArgs struct {
	// The email address.
	Email pulumix.Input[string] `pulumi:"email"`
	// The first name.
	FirstName pulumix.Input[string] `pulumi:"firstName"`
	// The last name.
	LastName pulumix.Input[string] `pulumi:"lastName"`
}

func (GetUserIdentityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserIdentityInfo)(nil)).Elem()
}

func (i GetUserIdentityInfoArgs) ToGetUserIdentityInfoOutput() GetUserIdentityInfoOutput {
	return i.ToGetUserIdentityInfoOutputWithContext(context.Background())
}

func (i GetUserIdentityInfoArgs) ToGetUserIdentityInfoOutputWithContext(ctx context.Context) GetUserIdentityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserIdentityInfoOutput)
}

func (i *GetUserIdentityInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserIdentityInfoArgs] {
	return pulumix.Val(i)
}

type GetUserIdentityInfoOutput struct{ *pulumi.OutputState }

func (GetUserIdentityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserIdentityInfo)(nil)).Elem()
}

func (o GetUserIdentityInfoOutput) ToGetUserIdentityInfoOutput() GetUserIdentityInfoOutput {
	return o
}

func (o GetUserIdentityInfoOutput) ToGetUserIdentityInfoOutputWithContext(ctx context.Context) GetUserIdentityInfoOutput {
	return o
}

func (o GetUserIdentityInfoOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserIdentityInfo] {
	return pulumix.Output[GetUserIdentityInfo]{
		OutputState: o.OutputState,
	}
}

// The email address.
func (o GetUserIdentityInfoOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetUserIdentityInfo](o, func(v GetUserIdentityInfo) string { return v.Email })
}

// The first name.
func (o GetUserIdentityInfoOutput) FirstName() pulumix.Output[string] {
	return pulumix.Apply[GetUserIdentityInfo](o, func(v GetUserIdentityInfo) string { return v.FirstName })
}

// The last name.
func (o GetUserIdentityInfoOutput) LastName() pulumix.Output[string] {
	return pulumix.Apply[GetUserIdentityInfo](o, func(v GetUserIdentityInfo) string { return v.LastName })
}

type GetUserPhoneConfig struct {
	// The After Call Work (ACW) timeout setting, in seconds.
	AfterContactWorkTimeLimit int `pulumi:"afterContactWorkTimeLimit"`
	// When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
	AutoAccept bool `pulumi:"autoAccept"`
	// The phone number for the user's desk phone.
	DeskPhoneNumber string `pulumi:"deskPhoneNumber"`
	// The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
	PhoneType string `pulumi:"phoneType"`
}

type GetUserPhoneConfigArgs struct {
	// The After Call Work (ACW) timeout setting, in seconds.
	AfterContactWorkTimeLimit pulumix.Input[int] `pulumi:"afterContactWorkTimeLimit"`
	// When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
	AutoAccept pulumix.Input[bool] `pulumi:"autoAccept"`
	// The phone number for the user's desk phone.
	DeskPhoneNumber pulumix.Input[string] `pulumi:"deskPhoneNumber"`
	// The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
	PhoneType pulumix.Input[string] `pulumi:"phoneType"`
}

func (GetUserPhoneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPhoneConfig)(nil)).Elem()
}

func (i GetUserPhoneConfigArgs) ToGetUserPhoneConfigOutput() GetUserPhoneConfigOutput {
	return i.ToGetUserPhoneConfigOutputWithContext(context.Background())
}

func (i GetUserPhoneConfigArgs) ToGetUserPhoneConfigOutputWithContext(ctx context.Context) GetUserPhoneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPhoneConfigOutput)
}

func (i *GetUserPhoneConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserPhoneConfigArgs] {
	return pulumix.Val(i)
}

type GetUserPhoneConfigOutput struct{ *pulumi.OutputState }

func (GetUserPhoneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPhoneConfig)(nil)).Elem()
}

func (o GetUserPhoneConfigOutput) ToGetUserPhoneConfigOutput() GetUserPhoneConfigOutput {
	return o
}

func (o GetUserPhoneConfigOutput) ToGetUserPhoneConfigOutputWithContext(ctx context.Context) GetUserPhoneConfigOutput {
	return o
}

func (o GetUserPhoneConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserPhoneConfig] {
	return pulumix.Output[GetUserPhoneConfig]{
		OutputState: o.OutputState,
	}
}

// The After Call Work (ACW) timeout setting, in seconds.
func (o GetUserPhoneConfigOutput) AfterContactWorkTimeLimit() pulumix.Output[int] {
	return pulumix.Apply[GetUserPhoneConfig](o, func(v GetUserPhoneConfig) int { return v.AfterContactWorkTimeLimit })
}

// When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
func (o GetUserPhoneConfigOutput) AutoAccept() pulumix.Output[bool] {
	return pulumix.Apply[GetUserPhoneConfig](o, func(v GetUserPhoneConfig) bool { return v.AutoAccept })
}

// The phone number for the user's desk phone.
func (o GetUserPhoneConfigOutput) DeskPhoneNumber() pulumix.Output[string] {
	return pulumix.Apply[GetUserPhoneConfig](o, func(v GetUserPhoneConfig) string { return v.DeskPhoneNumber })
}

// The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
func (o GetUserPhoneConfigOutput) PhoneType() pulumix.Output[string] {
	return pulumix.Apply[GetUserPhoneConfig](o, func(v GetUserPhoneConfig) string { return v.PhoneType })
}

func init() {
	pulumi.RegisterOutputType(BotAssociationLexBotOutput{})
	pulumi.RegisterOutputType(HoursOfOperationConfigOutput{})
	pulumi.RegisterOutputType(HoursOfOperationConfigEndTimeOutput{})
	pulumi.RegisterOutputType(HoursOfOperationConfigStartTimeOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigKinesisStreamConfigOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigS3ConfigOutput{})
	pulumi.RegisterOutputType(InstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput{})
	pulumi.RegisterOutputType(PhoneNumberStatusOutput{})
	pulumi.RegisterOutputType(QueueOutboundCallerConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectQuickConnectConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectQuickConnectConfigPhoneConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectQuickConnectConfigQueueConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectQuickConnectConfigUserConfigOutput{})
	pulumi.RegisterOutputType(RoutingProfileMediaConcurrencyOutput{})
	pulumi.RegisterOutputType(RoutingProfileQueueConfigOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupHierarchyPathOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupHierarchyPathLevelFifeOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupHierarchyPathLevelFourOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupHierarchyPathLevelOneOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupHierarchyPathLevelThreeOutput{})
	pulumi.RegisterOutputType(UserHierarchyGroupHierarchyPathLevelTwoOutput{})
	pulumi.RegisterOutputType(UserHierarchyStructureHierarchyStructureOutput{})
	pulumi.RegisterOutputType(UserHierarchyStructureHierarchyStructureLevelFiveOutput{})
	pulumi.RegisterOutputType(UserHierarchyStructureHierarchyStructureLevelFourOutput{})
	pulumi.RegisterOutputType(UserHierarchyStructureHierarchyStructureLevelOneOutput{})
	pulumi.RegisterOutputType(UserHierarchyStructureHierarchyStructureLevelThreeOutput{})
	pulumi.RegisterOutputType(UserHierarchyStructureHierarchyStructureLevelTwoOutput{})
	pulumi.RegisterOutputType(UserIdentityInfoOutput{})
	pulumi.RegisterOutputType(UserPhoneConfigOutput{})
	pulumi.RegisterOutputType(GetBotAssociationLexBotOutput{})
	pulumi.RegisterOutputType(GetHoursOfOperationConfigOutput{})
	pulumi.RegisterOutputType(GetHoursOfOperationConfigEndTimeOutput{})
	pulumi.RegisterOutputType(GetHoursOfOperationConfigStartTimeOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigKinesisFirehoseConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigKinesisStreamConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigS3ConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfigOutput{})
	pulumi.RegisterOutputType(GetQueueOutboundCallerConfigOutput{})
	pulumi.RegisterOutputType(GetQuickConnectQuickConnectConfigOutput{})
	pulumi.RegisterOutputType(GetQuickConnectQuickConnectConfigPhoneConfigOutput{})
	pulumi.RegisterOutputType(GetQuickConnectQuickConnectConfigQueueConfigOutput{})
	pulumi.RegisterOutputType(GetQuickConnectQuickConnectConfigUserConfigOutput{})
	pulumi.RegisterOutputType(GetRoutingProfileMediaConcurrencyOutput{})
	pulumi.RegisterOutputType(GetRoutingProfileQueueConfigOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyGroupHierarchyPathOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyGroupHierarchyPathLevelFifeOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyGroupHierarchyPathLevelFourOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyGroupHierarchyPathLevelOneOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyGroupHierarchyPathLevelThreeOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyGroupHierarchyPathLevelTwoOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyStructureHierarchyStructureOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyStructureHierarchyStructureLevelFifeOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyStructureHierarchyStructureLevelFourOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyStructureHierarchyStructureLevelOneOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyStructureHierarchyStructureLevelThreeOutput{})
	pulumi.RegisterOutputType(GetUserHierarchyStructureHierarchyStructureLevelTwoOutput{})
	pulumi.RegisterOutputType(GetUserIdentityInfoOutput{})
	pulumi.RegisterOutputType(GetUserPhoneConfigOutput{})
}
