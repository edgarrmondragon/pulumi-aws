// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a GuardDuty detector.
func LookupDetector(ctx *pulumi.Context, args *LookupDetectorArgs, opts ...pulumi.InvokeOption) (*LookupDetectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDetectorResult
	err := ctx.Invoke("aws:guardduty/getDetector:getDetector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDetector.
type LookupDetectorArgs struct {
	// ID of the detector.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getDetector.
type LookupDetectorResult struct {
	// The frequency of notifications sent about subsequent finding occurrences.
	FindingPublishingFrequency string `pulumi:"findingPublishingFrequency"`
	Id                         string `pulumi:"id"`
	// Service-linked role that grants GuardDuty access to the resources in the AWS account.
	ServiceRoleArn string `pulumi:"serviceRoleArn"`
	// Current status of the detector.
	Status string `pulumi:"status"`
}

func LookupDetectorOutput(ctx *pulumi.Context, args LookupDetectorOutputArgs, opts ...pulumi.InvokeOption) LookupDetectorResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDetectorArgs](args.ToOutput(), func(plainArgs *LookupDetectorArgs) (*LookupDetectorResult, error) {
		return LookupDetector(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDetectorResultOutput, *LookupDetectorResult](outputResult)
}

// A collection of arguments for invoking getDetector.
type LookupDetectorOutputArgs struct {
	// ID of the detector.
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (args LookupDetectorOutputArgs) ToOutput() pulumix.Output[*LookupDetectorArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDetectorArgs {
		return &LookupDetectorArgs{
			Id: resolvedArgs[0].(*string),
		}
	})
}

type LookupDetectorResultOutput struct{ *pulumi.OutputState }

func (LookupDetectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDetectorResult)(nil)).Elem()
}

func (o LookupDetectorResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDetectorResult] {
	return pulumix.Output[*LookupDetectorResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDetectorResultOutput) FindingPublishingFrequency() pulumix.Output[string] {
	return pulumix.Apply[*LookupDetectorResult](o, func(v *LookupDetectorResult) string { return v.FindingPublishingFrequency })
}

func (o LookupDetectorResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDetectorResult](o, func(v *LookupDetectorResult) string { return v.Id })
}

func (o LookupDetectorResultOutput) ServiceRoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupDetectorResult](o, func(v *LookupDetectorResult) string { return v.ServiceRoleArn })
}

func (o LookupDetectorResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupDetectorResult](o, func(v *LookupDetectorResult) string { return v.Status })
}
