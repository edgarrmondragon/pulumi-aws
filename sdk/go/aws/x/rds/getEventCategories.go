// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func GetEventCategories(ctx *pulumi.Context, args *GetEventCategoriesArgs, opts ...pulumi.InvokeOption) (*GetEventCategoriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEventCategoriesResult
	err := ctx.Invoke("aws:rds/getEventCategories:getEventCategories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventCategories.
type GetEventCategoriesArgs struct {
	// Type of source that will be generating the events. Valid options are db-instance, db-security-group, db-parameter-group, db-snapshot, db-cluster or db-cluster-snapshot.
	SourceType *string `pulumi:"sourceType"`
}

// A collection of values returned by getEventCategories.
type GetEventCategoriesResult struct {
	// List of the event categories.
	EventCategories []string `pulumi:"eventCategories"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	SourceType *string `pulumi:"sourceType"`
}

func GetEventCategoriesOutput(ctx *pulumi.Context, args GetEventCategoriesOutputArgs, opts ...pulumi.InvokeOption) GetEventCategoriesResultOutput {
	outputResult := pulumix.ApplyErr[*GetEventCategoriesArgs](args.ToOutput(), func(plainArgs *GetEventCategoriesArgs) (*GetEventCategoriesResult, error) {
		return GetEventCategories(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetEventCategoriesResultOutput, *GetEventCategoriesResult](outputResult)
}

// A collection of arguments for invoking getEventCategories.
type GetEventCategoriesOutputArgs struct {
	// Type of source that will be generating the events. Valid options are db-instance, db-security-group, db-parameter-group, db-snapshot, db-cluster or db-cluster-snapshot.
	SourceType pulumix.Input[*string] `pulumi:"sourceType"`
}

func (args GetEventCategoriesOutputArgs) ToOutput() pulumix.Output[*GetEventCategoriesArgs] {
	allArgs := pulumix.All(
		args.SourceType.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetEventCategoriesArgs {
		return &GetEventCategoriesArgs{
			SourceType: resolvedArgs[0].(*string),
		}
	})
}

type GetEventCategoriesResultOutput struct{ *pulumi.OutputState }

func (GetEventCategoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventCategoriesResult)(nil)).Elem()
}

func (o GetEventCategoriesResultOutput) ToOutput(context.Context) pulumix.Output[*GetEventCategoriesResult] {
	return pulumix.Output[*GetEventCategoriesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetEventCategoriesResultOutput) EventCategories() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetEventCategoriesResult](o, func(v *GetEventCategoriesResult) []string { return v.EventCategories })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetEventCategoriesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetEventCategoriesResult](o, func(v *GetEventCategoriesResult) string { return v.Id })
}

func (o GetEventCategoriesResultOutput) SourceType() pulumix.Output[*string] {
	return pulumix.Apply[*GetEventCategoriesResult](o, func(v *GetEventCategoriesResult) *string { return v.SourceType })
}
