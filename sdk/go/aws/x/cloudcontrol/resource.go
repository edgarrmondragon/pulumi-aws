// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudcontrol

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Cloud Control API Resource. The configuration and lifecycle handling of these resources is proxied through Cloud Control API handlers to the backend service.
type Resource struct {
	pulumi.CustomResourceState

	// JSON string matching the CloudFormation resource type schema with desired configuration.
	DesiredState pulumix.Output[string] `pulumi:"desiredState"`
	// JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the `jsondecode()` function, for example, `jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"]`.
	Properties pulumix.Output[string] `pulumi:"properties"`
	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	RoleArn pulumix.Output[*string] `pulumi:"roleArn"`
	// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
	Schema pulumix.Output[string] `pulumi:"schema"`
	// CloudFormation resource type name. For example, `AWS::EC2::VPC`.
	//
	// The following arguments are optional:
	TypeName pulumix.Output[string] `pulumi:"typeName"`
	// Identifier of the CloudFormation resource type version.
	TypeVersionId pulumix.Output[*string] `pulumi:"typeVersionId"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DesiredState == nil {
		return nil, errors.New("invalid value for required argument 'DesiredState'")
	}
	if args.TypeName == nil {
		return nil, errors.New("invalid value for required argument 'TypeName'")
	}
	if args.Schema != nil {
		untypedSecretValue := pulumi.ToSecret(args.Schema.ToOutput(ctx.Context()).Untyped())
		args.Schema = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"schema",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("aws:cloudcontrol/resource:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("aws:cloudcontrol/resource:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	DesiredState *string `pulumi:"desiredState"`
	// JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the `jsondecode()` function, for example, `jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"]`.
	Properties *string `pulumi:"properties"`
	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	RoleArn *string `pulumi:"roleArn"`
	// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
	Schema *string `pulumi:"schema"`
	// CloudFormation resource type name. For example, `AWS::EC2::VPC`.
	//
	// The following arguments are optional:
	TypeName *string `pulumi:"typeName"`
	// Identifier of the CloudFormation resource type version.
	TypeVersionId *string `pulumi:"typeVersionId"`
}

type ResourceState struct {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	DesiredState pulumix.Input[*string]
	// JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the `jsondecode()` function, for example, `jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"]`.
	Properties pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	RoleArn pulumix.Input[*string]
	// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
	Schema pulumix.Input[*string]
	// CloudFormation resource type name. For example, `AWS::EC2::VPC`.
	//
	// The following arguments are optional:
	TypeName pulumix.Input[*string]
	// Identifier of the CloudFormation resource type version.
	TypeVersionId pulumix.Input[*string]
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	DesiredState string `pulumi:"desiredState"`
	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	RoleArn *string `pulumi:"roleArn"`
	// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
	Schema *string `pulumi:"schema"`
	// CloudFormation resource type name. For example, `AWS::EC2::VPC`.
	//
	// The following arguments are optional:
	TypeName string `pulumi:"typeName"`
	// Identifier of the CloudFormation resource type version.
	TypeVersionId *string `pulumi:"typeVersionId"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// JSON string matching the CloudFormation resource type schema with desired configuration.
	DesiredState pulumix.Input[string]
	// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
	RoleArn pulumix.Input[*string]
	// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
	Schema pulumix.Input[*string]
	// CloudFormation resource type name. For example, `AWS::EC2::VPC`.
	//
	// The following arguments are optional:
	TypeName pulumix.Input[string]
	// Identifier of the CloudFormation resource type version.
	TypeVersionId pulumix.Input[*string]
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) ToOutput(ctx context.Context) pulumix.Output[Resource] {
	return pulumix.Output[Resource]{
		OutputState: o.OutputState,
	}
}

// JSON string matching the CloudFormation resource type schema with desired configuration.
func (o ResourceOutput) DesiredState() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.DesiredState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON string matching the CloudFormation resource type schema with current configuration. Underlying attributes can be referenced via the `jsondecode()` function, for example, `jsondecode(data.aws_cloudcontrolapi_resource.example.properties)["example"]`.
func (o ResourceOutput) Properties() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.Properties })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the IAM Role to assume for operations.
func (o ResourceOutput) RoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[*string] { return v.RoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// JSON string of the CloudFormation resource type schema which is used for plan time validation where possible. Automatically fetched if not provided. In large scale environments with multiple resources using the same `typeName`, it is recommended to fetch the schema once via the `cloudformation.CloudFormationType` data source and use this argument to reduce `DescribeType` API operation throttling. This value is marked sensitive only to prevent large plan differences from showing.
func (o ResourceOutput) Schema() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.Schema })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// CloudFormation resource type name. For example, `AWS::EC2::VPC`.
//
// The following arguments are optional:
func (o ResourceOutput) TypeName() pulumix.Output[string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[string] { return v.TypeName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the CloudFormation resource type version.
func (o ResourceOutput) TypeVersionId() pulumix.Output[*string] {
	value := pulumix.Apply[Resource](o, func(v Resource) pulumix.Output[*string] { return v.TypeVersionId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ResourceOutput{})
}
