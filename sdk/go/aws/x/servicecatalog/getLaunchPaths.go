// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Lists the paths to the specified product. A path is how the user has access to a specified product, and is necessary when provisioning a product. A path also determines the constraints put on the product.
func GetLaunchPaths(ctx *pulumi.Context, args *GetLaunchPathsArgs, opts ...pulumi.InvokeOption) (*GetLaunchPathsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLaunchPathsResult
	err := ctx.Invoke("aws:servicecatalog/getLaunchPaths:getLaunchPaths", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLaunchPaths.
type GetLaunchPathsArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Product identifier.
	//
	// The following arguments are optional:
	ProductId string `pulumi:"productId"`
}

// A collection of values returned by getLaunchPaths.
type GetLaunchPathsResult struct {
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProductId string `pulumi:"productId"`
	// Block with information about the launch path. See details below.
	Summaries []GetLaunchPathsSummary `pulumi:"summaries"`
}

func GetLaunchPathsOutput(ctx *pulumi.Context, args GetLaunchPathsOutputArgs, opts ...pulumi.InvokeOption) GetLaunchPathsResultOutput {
	outputResult := pulumix.ApplyErr[*GetLaunchPathsArgs](args.ToOutput(), func(plainArgs *GetLaunchPathsArgs) (*GetLaunchPathsResult, error) {
		return GetLaunchPaths(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetLaunchPathsResultOutput, *GetLaunchPathsResult](outputResult)
}

// A collection of arguments for invoking getLaunchPaths.
type GetLaunchPathsOutputArgs struct {
	// Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). Default value is `en`.
	AcceptLanguage pulumix.Input[*string] `pulumi:"acceptLanguage"`
	// Product identifier.
	//
	// The following arguments are optional:
	ProductId pulumix.Input[string] `pulumi:"productId"`
}

func (args GetLaunchPathsOutputArgs) ToOutput() pulumix.Output[*GetLaunchPathsArgs] {
	allArgs := pulumix.All(
		args.AcceptLanguage.ToOutput(context.Background()).AsAny(),
		args.ProductId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetLaunchPathsArgs {
		return &GetLaunchPathsArgs{
			AcceptLanguage: resolvedArgs[0].(*string),
			ProductId:      resolvedArgs[1].(string),
		}
	})
}

type GetLaunchPathsResultOutput struct{ *pulumi.OutputState }

func (GetLaunchPathsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchPathsResult)(nil)).Elem()
}

func (o GetLaunchPathsResultOutput) ToOutput(context.Context) pulumix.Output[*GetLaunchPathsResult] {
	return pulumix.Output[*GetLaunchPathsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetLaunchPathsResultOutput) AcceptLanguage() pulumix.Output[*string] {
	return pulumix.Apply[*GetLaunchPathsResult](o, func(v *GetLaunchPathsResult) *string { return v.AcceptLanguage })
}

func (o GetLaunchPathsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetLaunchPathsResult](o, func(v *GetLaunchPathsResult) string { return v.Id })
}

func (o GetLaunchPathsResultOutput) ProductId() pulumix.Output[string] {
	return pulumix.Apply[*GetLaunchPathsResult](o, func(v *GetLaunchPathsResult) string { return v.ProductId })
}

func (o GetLaunchPathsResultOutput) Summaries() pulumix.GArrayOutput[GetLaunchPathsSummary, GetLaunchPathsSummaryOutput] {
	value := pulumix.Apply[*GetLaunchPathsResult](o, func(v *GetLaunchPathsResult) []GetLaunchPathsSummary { return v.Summaries })
	return pulumix.GArrayOutput[GetLaunchPathsSummary, GetLaunchPathsSummaryOutput]{
		OutputState: value.OutputState,
	}
}
