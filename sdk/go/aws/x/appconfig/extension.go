// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppConfig Extension resource.
type Extension struct {
	pulumi.CustomResourceState

	// The action points defined in the extension. Detailed below.
	ActionPoints pulumix.GArrayOutput[ExtensionActionPoint, ExtensionActionPointOutput] `pulumi:"actionPoints"`
	// ARN of the AppConfig Extension.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Information about the extension.
	Description pulumix.Output[string] `pulumi:"description"`
	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	Name pulumix.Output[string] `pulumi:"name"`
	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	Parameters pulumix.GArrayOutput[ExtensionParameter, ExtensionParameterOutput] `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The version number for the extension.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOption) (*Extension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionPoints == nil {
		return nil, errors.New("invalid value for required argument 'ActionPoints'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Extension
	err := ctx.RegisterResource("aws:appconfig/extension:Extension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionState, opts ...pulumi.ResourceOption) (*Extension, error) {
	var resource Extension
	err := ctx.ReadResource("aws:appconfig/extension:Extension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extension resources.
type extensionState struct {
	// The action points defined in the extension. Detailed below.
	ActionPoints []ExtensionActionPoint `pulumi:"actionPoints"`
	// ARN of the AppConfig Extension.
	Arn *string `pulumi:"arn"`
	// Information about the extension.
	Description *string `pulumi:"description"`
	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	Name *string `pulumi:"name"`
	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	Parameters []ExtensionParameter `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The version number for the extension.
	Version *int `pulumi:"version"`
}

type ExtensionState struct {
	// The action points defined in the extension. Detailed below.
	ActionPoints pulumix.Input[[]*ExtensionActionPointArgs]
	// ARN of the AppConfig Extension.
	Arn pulumix.Input[*string]
	// Information about the extension.
	Description pulumix.Input[*string]
	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	Name pulumix.Input[*string]
	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	Parameters pulumix.Input[[]*ExtensionParameterArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The version number for the extension.
	Version pulumix.Input[*int]
}

func (ExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionState)(nil)).Elem()
}

type extensionArgs struct {
	// The action points defined in the extension. Detailed below.
	ActionPoints []ExtensionActionPoint `pulumi:"actionPoints"`
	// Information about the extension.
	Description *string `pulumi:"description"`
	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	Name *string `pulumi:"name"`
	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	Parameters []ExtensionParameter `pulumi:"parameters"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// The action points defined in the extension. Detailed below.
	ActionPoints pulumix.Input[[]*ExtensionActionPointArgs]
	// Information about the extension.
	Description pulumix.Input[*string]
	// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
	Name pulumix.Input[*string]
	// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
	Parameters pulumix.Input[[]*ExtensionParameterArgs]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionArgs)(nil)).Elem()
}

type ExtensionOutput struct{ *pulumi.OutputState }

func (ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Extension)(nil)).Elem()
}

func (o ExtensionOutput) ToExtensionOutput() ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToOutput(ctx context.Context) pulumix.Output[Extension] {
	return pulumix.Output[Extension]{
		OutputState: o.OutputState,
	}
}

// The action points defined in the extension. Detailed below.
func (o ExtensionOutput) ActionPoints() pulumix.GArrayOutput[ExtensionActionPoint, ExtensionActionPointOutput] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.GArrayOutput[ExtensionActionPoint, ExtensionActionPointOutput] {
		return v.ActionPoints
	})
	unwrapped := pulumix.Flatten[[]ExtensionActionPoint, pulumix.GArrayOutput[ExtensionActionPoint, ExtensionActionPointOutput]](value)
	return pulumix.GArrayOutput[ExtensionActionPoint, ExtensionActionPointOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the AppConfig Extension.
func (o ExtensionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the extension.
func (o ExtensionOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
func (o ExtensionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
func (o ExtensionOutput) Parameters() pulumix.GArrayOutput[ExtensionParameter, ExtensionParameterOutput] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.GArrayOutput[ExtensionParameter, ExtensionParameterOutput] {
		return v.Parameters
	})
	unwrapped := pulumix.Flatten[[]ExtensionParameter, pulumix.GArrayOutput[ExtensionParameter, ExtensionParameterOutput]](value)
	return pulumix.GArrayOutput[ExtensionParameter, ExtensionParameterOutput]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ExtensionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ExtensionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The version number for the extension.
func (o ExtensionOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[Extension](o, func(v Extension) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ExtensionOutput{})
}
