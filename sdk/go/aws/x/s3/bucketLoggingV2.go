// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an S3 bucket (server access) logging resource. For more information, see [Logging requests using server access logging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html)
// in the AWS S3 User Guide.
//
// > **Note:** Amazon S3 supports server access logging, AWS CloudTrail, or a combination of both. Refer to the [Logging options for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html)
// to decide which method meets your requirements.
type BucketLoggingV2 struct {
	pulumi.CustomResourceState

	// Name of the bucket.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumix.Output[*string] `pulumi:"expectedBucketOwner"`
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket pulumix.Output[string] `pulumi:"targetBucket"`
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants pulumix.GArrayOutput[BucketLoggingV2TargetGrant, BucketLoggingV2TargetGrantOutput] `pulumi:"targetGrants"`
	// Prefix for all log object keys.
	TargetPrefix pulumix.Output[string] `pulumi:"targetPrefix"`
}

// NewBucketLoggingV2 registers a new resource with the given unique name, arguments, and options.
func NewBucketLoggingV2(ctx *pulumi.Context,
	name string, args *BucketLoggingV2Args, opts ...pulumi.ResourceOption) (*BucketLoggingV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.TargetBucket == nil {
		return nil, errors.New("invalid value for required argument 'TargetBucket'")
	}
	if args.TargetPrefix == nil {
		return nil, errors.New("invalid value for required argument 'TargetPrefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLoggingV2
	err := ctx.RegisterResource("aws:s3/bucketLoggingV2:BucketLoggingV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLoggingV2 gets an existing BucketLoggingV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLoggingV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLoggingV2State, opts ...pulumi.ResourceOption) (*BucketLoggingV2, error) {
	var resource BucketLoggingV2
	err := ctx.ReadResource("aws:s3/bucketLoggingV2:BucketLoggingV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLoggingV2 resources.
type bucketLoggingV2State struct {
	// Name of the bucket.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket *string `pulumi:"targetBucket"`
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants []BucketLoggingV2TargetGrant `pulumi:"targetGrants"`
	// Prefix for all log object keys.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

type BucketLoggingV2State struct {
	// Name of the bucket.
	Bucket pulumix.Input[*string]
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumix.Input[*string]
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket pulumix.Input[*string]
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants pulumix.Input[[]*BucketLoggingV2TargetGrantArgs]
	// Prefix for all log object keys.
	TargetPrefix pulumix.Input[*string]
}

func (BucketLoggingV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingV2State)(nil)).Elem()
}

type bucketLoggingV2Args struct {
	// Name of the bucket.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket string `pulumi:"targetBucket"`
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants []BucketLoggingV2TargetGrant `pulumi:"targetGrants"`
	// Prefix for all log object keys.
	TargetPrefix string `pulumi:"targetPrefix"`
}

// The set of arguments for constructing a BucketLoggingV2 resource.
type BucketLoggingV2Args struct {
	// Name of the bucket.
	Bucket pulumix.Input[string]
	// Account ID of the expected bucket owner.
	ExpectedBucketOwner pulumix.Input[*string]
	// Name of the bucket where you want Amazon S3 to store server access logs.
	TargetBucket pulumix.Input[string]
	// Set of configuration blocks with information for granting permissions. See below.
	TargetGrants pulumix.Input[[]*BucketLoggingV2TargetGrantArgs]
	// Prefix for all log object keys.
	TargetPrefix pulumix.Input[string]
}

func (BucketLoggingV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLoggingV2Args)(nil)).Elem()
}

type BucketLoggingV2Output struct{ *pulumi.OutputState }

func (BucketLoggingV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLoggingV2)(nil)).Elem()
}

func (o BucketLoggingV2Output) ToBucketLoggingV2Output() BucketLoggingV2Output {
	return o
}

func (o BucketLoggingV2Output) ToBucketLoggingV2OutputWithContext(ctx context.Context) BucketLoggingV2Output {
	return o
}

func (o BucketLoggingV2Output) ToOutput(ctx context.Context) pulumix.Output[BucketLoggingV2] {
	return pulumix.Output[BucketLoggingV2]{
		OutputState: o.OutputState,
	}
}

// Name of the bucket.
func (o BucketLoggingV2Output) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketLoggingV2](o, func(v BucketLoggingV2) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Account ID of the expected bucket owner.
func (o BucketLoggingV2Output) ExpectedBucketOwner() pulumix.Output[*string] {
	value := pulumix.Apply[BucketLoggingV2](o, func(v BucketLoggingV2) pulumix.Output[*string] { return v.ExpectedBucketOwner })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the bucket where you want Amazon S3 to store server access logs.
func (o BucketLoggingV2Output) TargetBucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketLoggingV2](o, func(v BucketLoggingV2) pulumix.Output[string] { return v.TargetBucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of configuration blocks with information for granting permissions. See below.
func (o BucketLoggingV2Output) TargetGrants() pulumix.GArrayOutput[BucketLoggingV2TargetGrant, BucketLoggingV2TargetGrantOutput] {
	value := pulumix.Apply[BucketLoggingV2](o, func(v BucketLoggingV2) pulumix.GArrayOutput[BucketLoggingV2TargetGrant, BucketLoggingV2TargetGrantOutput] {
		return v.TargetGrants
	})
	unwrapped := pulumix.Flatten[[]BucketLoggingV2TargetGrant, pulumix.GArrayOutput[BucketLoggingV2TargetGrant, BucketLoggingV2TargetGrantOutput]](value)
	return pulumix.GArrayOutput[BucketLoggingV2TargetGrant, BucketLoggingV2TargetGrantOutput]{OutputState: unwrapped.OutputState}
}

// Prefix for all log object keys.
func (o BucketLoggingV2Output) TargetPrefix() pulumix.Output[string] {
	value := pulumix.Apply[BucketLoggingV2](o, func(v BucketLoggingV2) pulumix.Output[string] { return v.TargetPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BucketLoggingV2Output{})
}
