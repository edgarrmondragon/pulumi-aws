// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an SSM Patch Baseline data source. Useful if you wish to reuse the default baselines provided.
func LookupPatchBaseline(ctx *pulumi.Context, args *LookupPatchBaselineArgs, opts ...pulumi.InvokeOption) (*LookupPatchBaselineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPatchBaselineResult
	err := ctx.Invoke("aws:ssm/getPatchBaseline:getPatchBaseline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPatchBaseline.
type LookupPatchBaselineArgs struct {
	// Filters the results against the baselines defaultBaseline field.
	DefaultBaseline *bool `pulumi:"defaultBaseline"`
	// Filter results by the baseline name prefix.
	NamePrefix *string `pulumi:"namePrefix"`
	// Specified OS for the baseline. Valid values: `AMAZON_LINUX`, `AMAZON_LINUX_2`, `UBUNTU`, `REDHAT_ENTERPRISE_LINUX`, `SUSE`, `CENTOS`, `ORACLE_LINUX`, `DEBIAN`, `MACOS`, `RASPBIAN` and `ROCKY_LINUX`.
	OperatingSystem *string `pulumi:"operatingSystem"`
	// Owner of the baseline. Valid values: `All`, `AWS`, `Self` (the current account).
	Owner string `pulumi:"owner"`
}

// A collection of values returned by getPatchBaseline.
type LookupPatchBaselineResult struct {
	// List of rules used to include patches in the baseline.
	ApprovalRules []GetPatchBaselineApprovalRule `pulumi:"approvalRules"`
	// List of explicitly approved patches for the baseline.
	ApprovedPatches []string `pulumi:"approvedPatches"`
	// The compliance level for approved patches.
	ApprovedPatchesComplianceLevel string `pulumi:"approvedPatchesComplianceLevel"`
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	ApprovedPatchesEnableNonSecurity bool  `pulumi:"approvedPatchesEnableNonSecurity"`
	DefaultBaseline                  *bool `pulumi:"defaultBaseline"`
	// Description of the baseline.
	Description string `pulumi:"description"`
	// Set of global filters used to exclude patches from the baseline.
	GlobalFilters []GetPatchBaselineGlobalFilter `pulumi:"globalFilters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name specified to identify the patch source.
	Name            string  `pulumi:"name"`
	NamePrefix      *string `pulumi:"namePrefix"`
	OperatingSystem *string `pulumi:"operatingSystem"`
	Owner           string  `pulumi:"owner"`
	// List of rejected patches.
	RejectedPatches []string `pulumi:"rejectedPatches"`
	// The action specified to take on patches included in the `rejectedPatches` list.
	RejectedPatchesAction string `pulumi:"rejectedPatchesAction"`
	// Information about the patches to use to update the managed nodes, including target operating systems and source repositories.
	Sources []GetPatchBaselineSource `pulumi:"sources"`
}

func LookupPatchBaselineOutput(ctx *pulumi.Context, args LookupPatchBaselineOutputArgs, opts ...pulumi.InvokeOption) LookupPatchBaselineResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPatchBaselineArgs](args.ToOutput(), func(plainArgs *LookupPatchBaselineArgs) (*LookupPatchBaselineResult, error) {
		return LookupPatchBaseline(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPatchBaselineResultOutput, *LookupPatchBaselineResult](outputResult)
}

// A collection of arguments for invoking getPatchBaseline.
type LookupPatchBaselineOutputArgs struct {
	// Filters the results against the baselines defaultBaseline field.
	DefaultBaseline pulumix.Input[*bool] `pulumi:"defaultBaseline"`
	// Filter results by the baseline name prefix.
	NamePrefix pulumix.Input[*string] `pulumi:"namePrefix"`
	// Specified OS for the baseline. Valid values: `AMAZON_LINUX`, `AMAZON_LINUX_2`, `UBUNTU`, `REDHAT_ENTERPRISE_LINUX`, `SUSE`, `CENTOS`, `ORACLE_LINUX`, `DEBIAN`, `MACOS`, `RASPBIAN` and `ROCKY_LINUX`.
	OperatingSystem pulumix.Input[*string] `pulumi:"operatingSystem"`
	// Owner of the baseline. Valid values: `All`, `AWS`, `Self` (the current account).
	Owner pulumix.Input[string] `pulumi:"owner"`
}

func (args LookupPatchBaselineOutputArgs) ToOutput() pulumix.Output[*LookupPatchBaselineArgs] {
	allArgs := pulumix.All(
		args.DefaultBaseline.ToOutput(context.Background()).AsAny(),
		args.NamePrefix.ToOutput(context.Background()).AsAny(),
		args.OperatingSystem.ToOutput(context.Background()).AsAny(),
		args.Owner.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPatchBaselineArgs {
		return &LookupPatchBaselineArgs{
			DefaultBaseline: resolvedArgs[0].(*bool),
			NamePrefix:      resolvedArgs[1].(*string),
			OperatingSystem: resolvedArgs[2].(*string),
			Owner:           resolvedArgs[3].(string),
		}
	})
}

type LookupPatchBaselineResultOutput struct{ *pulumi.OutputState }

func (LookupPatchBaselineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPatchBaselineResult)(nil)).Elem()
}

func (o LookupPatchBaselineResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPatchBaselineResult] {
	return pulumix.Output[*LookupPatchBaselineResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPatchBaselineResultOutput) ApprovalRules() pulumix.GArrayOutput[GetPatchBaselineApprovalRule, GetPatchBaselineApprovalRuleOutput] {
	value := pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) []GetPatchBaselineApprovalRule { return v.ApprovalRules })
	return pulumix.GArrayOutput[GetPatchBaselineApprovalRule, GetPatchBaselineApprovalRuleOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupPatchBaselineResultOutput) ApprovedPatches() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) []string { return v.ApprovedPatches })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupPatchBaselineResultOutput) ApprovedPatchesComplianceLevel() pulumix.Output[string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) string { return v.ApprovedPatchesComplianceLevel })
}

func (o LookupPatchBaselineResultOutput) ApprovedPatchesEnableNonSecurity() pulumix.Output[bool] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) bool { return v.ApprovedPatchesEnableNonSecurity })
}

func (o LookupPatchBaselineResultOutput) DefaultBaseline() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) *bool { return v.DefaultBaseline })
}

func (o LookupPatchBaselineResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) string { return v.Description })
}

func (o LookupPatchBaselineResultOutput) GlobalFilters() pulumix.GArrayOutput[GetPatchBaselineGlobalFilter, GetPatchBaselineGlobalFilterOutput] {
	value := pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) []GetPatchBaselineGlobalFilter { return v.GlobalFilters })
	return pulumix.GArrayOutput[GetPatchBaselineGlobalFilter, GetPatchBaselineGlobalFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupPatchBaselineResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) string { return v.Id })
}

func (o LookupPatchBaselineResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) string { return v.Name })
}

func (o LookupPatchBaselineResultOutput) NamePrefix() pulumix.Output[*string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) *string { return v.NamePrefix })
}

func (o LookupPatchBaselineResultOutput) OperatingSystem() pulumix.Output[*string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) *string { return v.OperatingSystem })
}

func (o LookupPatchBaselineResultOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) string { return v.Owner })
}

func (o LookupPatchBaselineResultOutput) RejectedPatches() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) []string { return v.RejectedPatches })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupPatchBaselineResultOutput) RejectedPatchesAction() pulumix.Output[string] {
	return pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) string { return v.RejectedPatchesAction })
}

func (o LookupPatchBaselineResultOutput) Sources() pulumix.GArrayOutput[GetPatchBaselineSource, GetPatchBaselineSourceOutput] {
	value := pulumix.Apply[*LookupPatchBaselineResult](o, func(v *LookupPatchBaselineResult) []GetPatchBaselineSource { return v.Sources })
	return pulumix.GArrayOutput[GetPatchBaselineSource, GetPatchBaselineSourceOutput]{
		OutputState: value.OutputState,
	}
}
