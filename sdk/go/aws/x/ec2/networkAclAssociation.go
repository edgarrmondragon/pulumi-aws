// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an network ACL association resource which allows you to associate your network ACL with any subnet(s).
//
// > **NOTE on Network ACLs and Network ACL Associations:** the provider provides both a standalone network ACL association resource
// and a network ACL resource with a `subnetIds` attribute. Do not use the same subnet ID in both a network ACL
// resource and a network ACL association resource. Doing so will cause a conflict of associations and will overwrite the association.
type NetworkAclAssociation struct {
	pulumi.CustomResourceState

	// The ID of the network ACL.
	NetworkAclId pulumix.Output[string] `pulumi:"networkAclId"`
	// The ID of the associated Subnet.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
}

// NewNetworkAclAssociation registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclAssociation(ctx *pulumi.Context,
	name string, args *NetworkAclAssociationArgs, opts ...pulumi.ResourceOption) (*NetworkAclAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAclAssociation
	err := ctx.RegisterResource("aws:ec2/networkAclAssociation:NetworkAclAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclAssociation gets an existing NetworkAclAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclAssociationState, opts ...pulumi.ResourceOption) (*NetworkAclAssociation, error) {
	var resource NetworkAclAssociation
	err := ctx.ReadResource("aws:ec2/networkAclAssociation:NetworkAclAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclAssociation resources.
type networkAclAssociationState struct {
	// The ID of the network ACL.
	NetworkAclId *string `pulumi:"networkAclId"`
	// The ID of the associated Subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type NetworkAclAssociationState struct {
	// The ID of the network ACL.
	NetworkAclId pulumix.Input[*string]
	// The ID of the associated Subnet.
	SubnetId pulumix.Input[*string]
}

func (NetworkAclAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclAssociationState)(nil)).Elem()
}

type networkAclAssociationArgs struct {
	// The ID of the network ACL.
	NetworkAclId string `pulumi:"networkAclId"`
	// The ID of the associated Subnet.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a NetworkAclAssociation resource.
type NetworkAclAssociationArgs struct {
	// The ID of the network ACL.
	NetworkAclId pulumix.Input[string]
	// The ID of the associated Subnet.
	SubnetId pulumix.Input[string]
}

func (NetworkAclAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclAssociationArgs)(nil)).Elem()
}

type NetworkAclAssociationOutput struct{ *pulumi.OutputState }

func (NetworkAclAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclAssociation)(nil)).Elem()
}

func (o NetworkAclAssociationOutput) ToNetworkAclAssociationOutput() NetworkAclAssociationOutput {
	return o
}

func (o NetworkAclAssociationOutput) ToNetworkAclAssociationOutputWithContext(ctx context.Context) NetworkAclAssociationOutput {
	return o
}

func (o NetworkAclAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAclAssociation] {
	return pulumix.Output[NetworkAclAssociation]{
		OutputState: o.OutputState,
	}
}

// The ID of the network ACL.
func (o NetworkAclAssociationOutput) NetworkAclId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAclAssociation](o, func(v NetworkAclAssociation) pulumix.Output[string] { return v.NetworkAclId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the associated Subnet.
func (o NetworkAclAssociationOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[NetworkAclAssociation](o, func(v NetworkAclAssociation) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(NetworkAclAssociationOutput{})
}
