// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an API Gateway Usage Plan Key.
type UsagePlanKey struct {
	pulumi.CustomResourceState

	// Identifier of the API key resource.
	KeyId pulumix.Output[string] `pulumi:"keyId"`
	// Type of the API key resource. Currently, the valid key type is API_KEY.
	KeyType pulumix.Output[string] `pulumi:"keyType"`
	// Name of a usage plan key.
	Name pulumix.Output[string] `pulumi:"name"`
	// Id of the usage plan resource representing to associate the key to.
	UsagePlanId pulumix.Output[string] `pulumi:"usagePlanId"`
	// Value of a usage plan key.
	Value pulumix.Output[string] `pulumi:"value"`
}

// NewUsagePlanKey registers a new resource with the given unique name, arguments, and options.
func NewUsagePlanKey(ctx *pulumi.Context,
	name string, args *UsagePlanKeyArgs, opts ...pulumi.ResourceOption) (*UsagePlanKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.KeyType == nil {
		return nil, errors.New("invalid value for required argument 'KeyType'")
	}
	if args.UsagePlanId == nil {
		return nil, errors.New("invalid value for required argument 'UsagePlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsagePlanKey
	err := ctx.RegisterResource("aws:apigateway/usagePlanKey:UsagePlanKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlanKey gets an existing UsagePlanKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlanKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanKeyState, opts ...pulumi.ResourceOption) (*UsagePlanKey, error) {
	var resource UsagePlanKey
	err := ctx.ReadResource("aws:apigateway/usagePlanKey:UsagePlanKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlanKey resources.
type usagePlanKeyState struct {
	// Identifier of the API key resource.
	KeyId *string `pulumi:"keyId"`
	// Type of the API key resource. Currently, the valid key type is API_KEY.
	KeyType *string `pulumi:"keyType"`
	// Name of a usage plan key.
	Name *string `pulumi:"name"`
	// Id of the usage plan resource representing to associate the key to.
	UsagePlanId *string `pulumi:"usagePlanId"`
	// Value of a usage plan key.
	Value *string `pulumi:"value"`
}

type UsagePlanKeyState struct {
	// Identifier of the API key resource.
	KeyId pulumix.Input[*string]
	// Type of the API key resource. Currently, the valid key type is API_KEY.
	KeyType pulumix.Input[*string]
	// Name of a usage plan key.
	Name pulumix.Input[*string]
	// Id of the usage plan resource representing to associate the key to.
	UsagePlanId pulumix.Input[*string]
	// Value of a usage plan key.
	Value pulumix.Input[*string]
}

func (UsagePlanKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanKeyState)(nil)).Elem()
}

type usagePlanKeyArgs struct {
	// Identifier of the API key resource.
	KeyId string `pulumi:"keyId"`
	// Type of the API key resource. Currently, the valid key type is API_KEY.
	KeyType string `pulumi:"keyType"`
	// Id of the usage plan resource representing to associate the key to.
	UsagePlanId string `pulumi:"usagePlanId"`
}

// The set of arguments for constructing a UsagePlanKey resource.
type UsagePlanKeyArgs struct {
	// Identifier of the API key resource.
	KeyId pulumix.Input[string]
	// Type of the API key resource. Currently, the valid key type is API_KEY.
	KeyType pulumix.Input[string]
	// Id of the usage plan resource representing to associate the key to.
	UsagePlanId pulumix.Input[string]
}

func (UsagePlanKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanKeyArgs)(nil)).Elem()
}

type UsagePlanKeyOutput struct{ *pulumi.OutputState }

func (UsagePlanKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKey)(nil)).Elem()
}

func (o UsagePlanKeyOutput) ToUsagePlanKeyOutput() UsagePlanKeyOutput {
	return o
}

func (o UsagePlanKeyOutput) ToUsagePlanKeyOutputWithContext(ctx context.Context) UsagePlanKeyOutput {
	return o
}

func (o UsagePlanKeyOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlanKey] {
	return pulumix.Output[UsagePlanKey]{
		OutputState: o.OutputState,
	}
}

// Identifier of the API key resource.
func (o UsagePlanKeyOutput) KeyId() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlanKey](o, func(v UsagePlanKey) pulumix.Output[string] { return v.KeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of the API key resource. Currently, the valid key type is API_KEY.
func (o UsagePlanKeyOutput) KeyType() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlanKey](o, func(v UsagePlanKey) pulumix.Output[string] { return v.KeyType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of a usage plan key.
func (o UsagePlanKeyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlanKey](o, func(v UsagePlanKey) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Id of the usage plan resource representing to associate the key to.
func (o UsagePlanKeyOutput) UsagePlanId() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlanKey](o, func(v UsagePlanKey) pulumix.Output[string] { return v.UsagePlanId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Value of a usage plan key.
func (o UsagePlanKeyOutput) Value() pulumix.Output[string] {
	value := pulumix.Apply[UsagePlanKey](o, func(v UsagePlanKey) pulumix.Output[string] { return v.Value })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(UsagePlanKeyOutput{})
}
