// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `vpc.getSecurityGroupRule` provides details about a specific security group rule.
func GetSecurityGroupRule(ctx *pulumi.Context, args *GetSecurityGroupRuleArgs, opts ...pulumi.InvokeOption) (*GetSecurityGroupRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityGroupRuleResult
	err := ctx.Invoke("aws:vpc/getSecurityGroupRule:getSecurityGroupRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityGroupRule.
type GetSecurityGroupRuleArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetSecurityGroupRuleFilter `pulumi:"filters"`
	// ID of the security group rule to select.
	SecurityGroupRuleId *string `pulumi:"securityGroupRuleId"`
}

// A collection of values returned by getSecurityGroupRule.
type GetSecurityGroupRuleResult struct {
	// The Amazon Resource Name (ARN) of the security group rule.
	Arn string `pulumi:"arn"`
	// The destination IPv4 CIDR range.
	CidrIpv4 string `pulumi:"cidrIpv4"`
	// The destination IPv6 CIDR range.
	CidrIpv6 string `pulumi:"cidrIpv6"`
	// The security group rule description.
	Description string                       `pulumi:"description"`
	Filters     []GetSecurityGroupRuleFilter `pulumi:"filters"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type.
	FromPort int    `pulumi:"fromPort"`
	Id       string `pulumi:"id"`
	// The IP protocol name or number. Use `-1` to specify all protocols.
	IpProtocol string `pulumi:"ipProtocol"`
	// Indicates whether the security group rule is an outbound rule.
	IsEgress bool `pulumi:"isEgress"`
	// The ID of the destination prefix list.
	PrefixListId string `pulumi:"prefixListId"`
	// The destination security group that is referenced in the rule.
	ReferencedSecurityGroupId string `pulumi:"referencedSecurityGroupId"`
	// The ID of the security group.
	SecurityGroupId     string `pulumi:"securityGroupId"`
	SecurityGroupRuleId string `pulumi:"securityGroupRuleId"`
	// A map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// (Optional) The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	ToPort int `pulumi:"toPort"`
}

func GetSecurityGroupRuleOutput(ctx *pulumi.Context, args GetSecurityGroupRuleOutputArgs, opts ...pulumi.InvokeOption) GetSecurityGroupRuleResultOutput {
	outputResult := pulumix.ApplyErr[*GetSecurityGroupRuleArgs](args.ToOutput(), func(plainArgs *GetSecurityGroupRuleArgs) (*GetSecurityGroupRuleResult, error) {
		return GetSecurityGroupRule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSecurityGroupRuleResultOutput, *GetSecurityGroupRuleResult](outputResult)
}

// A collection of arguments for invoking getSecurityGroupRule.
type GetSecurityGroupRuleOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetSecurityGroupRuleFilterArgs] `pulumi:"filters"`
	// ID of the security group rule to select.
	SecurityGroupRuleId pulumix.Input[*string] `pulumi:"securityGroupRuleId"`
}

func (args GetSecurityGroupRuleOutputArgs) ToOutput() pulumix.Output[*GetSecurityGroupRuleArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.SecurityGroupRuleId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSecurityGroupRuleArgs {
		return &GetSecurityGroupRuleArgs{
			Filters:             resolvedArgs[0].([]GetSecurityGroupRuleFilter),
			SecurityGroupRuleId: resolvedArgs[1].(*string),
		}
	})
}

type GetSecurityGroupRuleResultOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupRuleResult)(nil)).Elem()
}

func (o GetSecurityGroupRuleResultOutput) ToOutput(context.Context) pulumix.Output[*GetSecurityGroupRuleResult] {
	return pulumix.Output[*GetSecurityGroupRuleResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSecurityGroupRuleResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.Arn })
}

func (o GetSecurityGroupRuleResultOutput) CidrIpv4() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.CidrIpv4 })
}

func (o GetSecurityGroupRuleResultOutput) CidrIpv6() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.CidrIpv6 })
}

func (o GetSecurityGroupRuleResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.Description })
}

func (o GetSecurityGroupRuleResultOutput) Filters() pulumix.GArrayOutput[GetSecurityGroupRuleFilter, GetSecurityGroupRuleFilterOutput] {
	value := pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) []GetSecurityGroupRuleFilter { return v.Filters })
	return pulumix.GArrayOutput[GetSecurityGroupRuleFilter, GetSecurityGroupRuleFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetSecurityGroupRuleResultOutput) FromPort() pulumix.Output[int] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) int { return v.FromPort })
}

func (o GetSecurityGroupRuleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.Id })
}

func (o GetSecurityGroupRuleResultOutput) IpProtocol() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.IpProtocol })
}

func (o GetSecurityGroupRuleResultOutput) IsEgress() pulumix.Output[bool] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) bool { return v.IsEgress })
}

func (o GetSecurityGroupRuleResultOutput) PrefixListId() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.PrefixListId })
}

func (o GetSecurityGroupRuleResultOutput) ReferencedSecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.ReferencedSecurityGroupId })
}

func (o GetSecurityGroupRuleResultOutput) SecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.SecurityGroupId })
}

func (o GetSecurityGroupRuleResultOutput) SecurityGroupRuleId() pulumix.Output[string] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) string { return v.SecurityGroupRuleId })
}

func (o GetSecurityGroupRuleResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetSecurityGroupRuleResultOutput) ToPort() pulumix.Output[int] {
	return pulumix.Apply[*GetSecurityGroupRuleResult](o, func(v *GetSecurityGroupRuleResult) int { return v.ToPort })
}
