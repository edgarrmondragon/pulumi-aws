// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the HostedZoneId of the AWS Elastic Load Balancing HostedZoneId
// in a given region for the purpose of using in an AWS Route53 Alias.
func GetHostedZoneId(ctx *pulumi.Context, args *GetHostedZoneIdArgs, opts ...pulumi.InvokeOption) (*GetHostedZoneIdResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHostedZoneIdResult
	err := ctx.Invoke("aws:elb/getHostedZoneId:getHostedZoneId", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHostedZoneId.
type GetHostedZoneIdArgs struct {
	// Name of the region whose AWS ELB HostedZoneId is desired.
	// Defaults to the region from the AWS provider configuration.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getHostedZoneId.
type GetHostedZoneIdResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id     string  `pulumi:"id"`
	Region *string `pulumi:"region"`
}

func GetHostedZoneIdOutput(ctx *pulumi.Context, args GetHostedZoneIdOutputArgs, opts ...pulumi.InvokeOption) GetHostedZoneIdResultOutput {
	outputResult := pulumix.ApplyErr[*GetHostedZoneIdArgs](args.ToOutput(), func(plainArgs *GetHostedZoneIdArgs) (*GetHostedZoneIdResult, error) {
		return GetHostedZoneId(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetHostedZoneIdResultOutput, *GetHostedZoneIdResult](outputResult)
}

// A collection of arguments for invoking getHostedZoneId.
type GetHostedZoneIdOutputArgs struct {
	// Name of the region whose AWS ELB HostedZoneId is desired.
	// Defaults to the region from the AWS provider configuration.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (args GetHostedZoneIdOutputArgs) ToOutput() pulumix.Output[*GetHostedZoneIdArgs] {
	allArgs := pulumix.All(
		args.Region.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetHostedZoneIdArgs {
		return &GetHostedZoneIdArgs{
			Region: resolvedArgs[0].(*string),
		}
	})
}

type GetHostedZoneIdResultOutput struct{ *pulumi.OutputState }

func (GetHostedZoneIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostedZoneIdResult)(nil)).Elem()
}

func (o GetHostedZoneIdResultOutput) ToOutput(context.Context) pulumix.Output[*GetHostedZoneIdResult] {
	return pulumix.Output[*GetHostedZoneIdResult]{
		OutputState: o.OutputState,
	}
}

func (o GetHostedZoneIdResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetHostedZoneIdResult](o, func(v *GetHostedZoneIdResult) string { return v.Id })
}

func (o GetHostedZoneIdResultOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[*GetHostedZoneIdResult](o, func(v *GetHostedZoneIdResult) *string { return v.Region })
}
