// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an GameLift Game Session Queue resource.
type GameSessionQueue struct {
	pulumi.CustomResourceState

	// Game Session Queue ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Information to be added to all events that are related to this game session queue.
	CustomEventData pulumix.Output[*string] `pulumi:"customEventData"`
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations pulumix.ArrayOutput[string] `pulumi:"destinations"`
	// Name of the session queue.
	Name pulumix.Output[string] `pulumi:"name"`
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget pulumix.Output[*string] `pulumi:"notificationTarget"`
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies pulumix.GArrayOutput[GameSessionQueuePlayerLatencyPolicy, GameSessionQueuePlayerLatencyPolicyOutput] `pulumi:"playerLatencyPolicies"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds pulumix.Output[*int] `pulumi:"timeoutInSeconds"`
}

// NewGameSessionQueue registers a new resource with the given unique name, arguments, and options.
func NewGameSessionQueue(ctx *pulumi.Context,
	name string, args *GameSessionQueueArgs, opts ...pulumi.ResourceOption) (*GameSessionQueue, error) {
	if args == nil {
		args = &GameSessionQueueArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GameSessionQueue
	err := ctx.RegisterResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameSessionQueue gets an existing GameSessionQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameSessionQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameSessionQueueState, opts ...pulumi.ResourceOption) (*GameSessionQueue, error) {
	var resource GameSessionQueue
	err := ctx.ReadResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameSessionQueue resources.
type gameSessionQueueState struct {
	// Game Session Queue ARN.
	Arn *string `pulumi:"arn"`
	// Information to be added to all events that are related to this game session queue.
	CustomEventData *string `pulumi:"customEventData"`
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations []string `pulumi:"destinations"`
	// Name of the session queue.
	Name *string `pulumi:"name"`
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies []GameSessionQueuePlayerLatencyPolicy `pulumi:"playerLatencyPolicies"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

type GameSessionQueueState struct {
	// Game Session Queue ARN.
	Arn pulumix.Input[*string]
	// Information to be added to all events that are related to this game session queue.
	CustomEventData pulumix.Input[*string]
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations pulumix.Input[[]string]
	// Name of the session queue.
	Name pulumix.Input[*string]
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget pulumix.Input[*string]
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies pulumix.Input[[]*GameSessionQueuePlayerLatencyPolicyArgs]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds pulumix.Input[*int]
}

func (GameSessionQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameSessionQueueState)(nil)).Elem()
}

type gameSessionQueueArgs struct {
	// Information to be added to all events that are related to this game session queue.
	CustomEventData *string `pulumi:"customEventData"`
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations []string `pulumi:"destinations"`
	// Name of the session queue.
	Name *string `pulumi:"name"`
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies []GameSessionQueuePlayerLatencyPolicy `pulumi:"playerLatencyPolicies"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

// The set of arguments for constructing a GameSessionQueue resource.
type GameSessionQueueArgs struct {
	// Information to be added to all events that are related to this game session queue.
	CustomEventData pulumix.Input[*string]
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations pulumix.Input[[]string]
	// Name of the session queue.
	Name pulumix.Input[*string]
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget pulumix.Input[*string]
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies pulumix.Input[[]*GameSessionQueuePlayerLatencyPolicyArgs]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds pulumix.Input[*int]
}

func (GameSessionQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameSessionQueueArgs)(nil)).Elem()
}

type GameSessionQueueOutput struct{ *pulumi.OutputState }

func (GameSessionQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GameSessionQueue)(nil)).Elem()
}

func (o GameSessionQueueOutput) ToGameSessionQueueOutput() GameSessionQueueOutput {
	return o
}

func (o GameSessionQueueOutput) ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput {
	return o
}

func (o GameSessionQueueOutput) ToOutput(ctx context.Context) pulumix.Output[GameSessionQueue] {
	return pulumix.Output[GameSessionQueue]{
		OutputState: o.OutputState,
	}
}

// Game Session Queue ARN.
func (o GameSessionQueueOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information to be added to all events that are related to this game session queue.
func (o GameSessionQueueOutput) CustomEventData() pulumix.Output[*string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.Output[*string] { return v.CustomEventData })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// List of fleet/alias ARNs used by session queue for placing game sessions.
func (o GameSessionQueueOutput) Destinations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.ArrayOutput[string] { return v.Destinations })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of the session queue.
func (o GameSessionQueueOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An SNS topic ARN that is set up to receive game session placement notifications.
func (o GameSessionQueueOutput) NotificationTarget() pulumix.Output[*string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.Output[*string] { return v.NotificationTarget })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// One or more policies used to choose fleet based on player latency. See below.
func (o GameSessionQueueOutput) PlayerLatencyPolicies() pulumix.GArrayOutput[GameSessionQueuePlayerLatencyPolicy, GameSessionQueuePlayerLatencyPolicyOutput] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.GArrayOutput[GameSessionQueuePlayerLatencyPolicy, GameSessionQueuePlayerLatencyPolicyOutput] {
		return v.PlayerLatencyPolicies
	})
	unwrapped := pulumix.Flatten[[]GameSessionQueuePlayerLatencyPolicy, pulumix.GArrayOutput[GameSessionQueuePlayerLatencyPolicy, GameSessionQueuePlayerLatencyPolicyOutput]](value)
	return pulumix.GArrayOutput[GameSessionQueuePlayerLatencyPolicy, GameSessionQueuePlayerLatencyPolicyOutput]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o GameSessionQueueOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o GameSessionQueueOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Maximum time a game session request can remain in the queue.
func (o GameSessionQueueOutput) TimeoutInSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[GameSessionQueue](o, func(v GameSessionQueue) pulumix.Output[*int] { return v.TimeoutInSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(GameSessionQueueOutput{})
}
