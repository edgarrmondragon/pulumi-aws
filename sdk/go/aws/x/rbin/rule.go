// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rbin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS RBin Rule.
type Rule struct {
	pulumi.CustomResourceState

	Arn pulumix.Output[string] `pulumi:"arn"`
	// The retention rule description.
	Description pulumix.Output[string] `pulumi:"description"`
	// Information about the retention rule lock configuration. See `lockConfiguration` below.
	LockConfiguration pulumix.GPtrOutput[RuleLockConfiguration, RuleLockConfigurationOutput] `pulumi:"lockConfiguration"`
	// (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
	LockEndTime pulumix.Output[string] `pulumi:"lockEndTime"`
	// (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pendingUnlock`, `unlocked`.
	LockState pulumix.Output[string] `pulumi:"lockState"`
	// Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resourceTags` below.
	ResourceTags pulumix.GArrayOutput[RuleResourceTag, RuleResourceTagOutput] `pulumi:"resourceTags"`
	// The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
	ResourceType pulumix.Output[string] `pulumi:"resourceType"`
	// Information about the retention period for which the retention rule is to retain resources. See `retentionPeriod` below.
	//
	// The following arguments are optional:
	RetentionPeriod pulumix.GPtrOutput[RuleRetentionPeriod, RuleRetentionPeriodOutput] `pulumi:"retentionPeriod"`
	// (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
	Status  pulumix.Output[string]    `pulumi:"status"`
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.RetentionPeriod == nil {
		return nil, errors.New("invalid value for required argument 'RetentionPeriod'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("aws:rbin/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws:rbin/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	Arn *string `pulumi:"arn"`
	// The retention rule description.
	Description *string `pulumi:"description"`
	// Information about the retention rule lock configuration. See `lockConfiguration` below.
	LockConfiguration *RuleLockConfiguration `pulumi:"lockConfiguration"`
	// (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
	LockEndTime *string `pulumi:"lockEndTime"`
	// (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pendingUnlock`, `unlocked`.
	LockState *string `pulumi:"lockState"`
	// Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resourceTags` below.
	ResourceTags []RuleResourceTag `pulumi:"resourceTags"`
	// The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
	ResourceType *string `pulumi:"resourceType"`
	// Information about the retention period for which the retention rule is to retain resources. See `retentionPeriod` below.
	//
	// The following arguments are optional:
	RetentionPeriod *RuleRetentionPeriod `pulumi:"retentionPeriod"`
	// (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
	Status  *string           `pulumi:"status"`
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RuleState struct {
	Arn pulumix.Input[*string]
	// The retention rule description.
	Description pulumix.Input[*string]
	// Information about the retention rule lock configuration. See `lockConfiguration` below.
	LockConfiguration pulumix.Input[*RuleLockConfigurationArgs]
	// (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
	LockEndTime pulumix.Input[*string]
	// (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pendingUnlock`, `unlocked`.
	LockState pulumix.Input[*string]
	// Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resourceTags` below.
	ResourceTags pulumix.Input[[]*RuleResourceTagArgs]
	// The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
	ResourceType pulumix.Input[*string]
	// Information about the retention period for which the retention rule is to retain resources. See `retentionPeriod` below.
	//
	// The following arguments are optional:
	RetentionPeriod pulumix.Input[*RuleRetentionPeriodArgs]
	// (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
	Status  pulumix.Input[*string]
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The retention rule description.
	Description *string `pulumi:"description"`
	// Information about the retention rule lock configuration. See `lockConfiguration` below.
	LockConfiguration *RuleLockConfiguration `pulumi:"lockConfiguration"`
	// Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resourceTags` below.
	ResourceTags []RuleResourceTag `pulumi:"resourceTags"`
	// The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
	ResourceType string `pulumi:"resourceType"`
	// Information about the retention period for which the retention rule is to retain resources. See `retentionPeriod` below.
	//
	// The following arguments are optional:
	RetentionPeriod RuleRetentionPeriod `pulumi:"retentionPeriod"`
	Tags            map[string]string   `pulumi:"tags"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The retention rule description.
	Description pulumix.Input[*string]
	// Information about the retention rule lock configuration. See `lockConfiguration` below.
	LockConfiguration pulumix.Input[*RuleLockConfigurationArgs]
	// Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resourceTags` below.
	ResourceTags pulumix.Input[[]*RuleResourceTagArgs]
	// The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
	ResourceType pulumix.Input[string]
	// Information about the retention period for which the retention rule is to retain resources. See `retentionPeriod` below.
	//
	// The following arguments are optional:
	RetentionPeriod pulumix.Input[*RuleRetentionPeriodArgs]
	Tags            pulumix.Input[map[string]string]
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

func (o RuleOutput) ToOutput(ctx context.Context) pulumix.Output[Rule] {
	return pulumix.Output[Rule]{
		OutputState: o.OutputState,
	}
}

func (o RuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The retention rule description.
func (o RuleOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the retention rule lock configuration. See `lockConfiguration` below.
func (o RuleOutput) LockConfiguration() pulumix.GPtrOutput[RuleLockConfiguration, RuleLockConfigurationOutput] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.GPtrOutput[RuleLockConfiguration, RuleLockConfigurationOutput] {
		return v.LockConfiguration
	})
	unwrapped := pulumix.Flatten[*RuleLockConfiguration, pulumix.GPtrOutput[RuleLockConfiguration, RuleLockConfigurationOutput]](value)
	return pulumix.GPtrOutput[RuleLockConfiguration, RuleLockConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// (Timestamp) The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.
func (o RuleOutput) LockEndTime() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.LockEndTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// (Optional) The lock state of the retention rules to list. Only retention rules with the specified lock state are returned. Valid values are `locked`, `pendingUnlock`, `unlocked`.
func (o RuleOutput) LockState() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.LockState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. See `resourceTags` below.
func (o RuleOutput) ResourceTags() pulumix.GArrayOutput[RuleResourceTag, RuleResourceTagOutput] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.GArrayOutput[RuleResourceTag, RuleResourceTagOutput] { return v.ResourceTags })
	unwrapped := pulumix.Flatten[[]RuleResourceTag, pulumix.GArrayOutput[RuleResourceTag, RuleResourceTagOutput]](value)
	return pulumix.GArrayOutput[RuleResourceTag, RuleResourceTagOutput]{OutputState: unwrapped.OutputState}
}

// The resource type to be retained by the retention rule. Valid values are `EBS_SNAPSHOT` and `EC2_IMAGE`.
func (o RuleOutput) ResourceType() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.ResourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the retention period for which the retention rule is to retain resources. See `retentionPeriod` below.
//
// The following arguments are optional:
func (o RuleOutput) RetentionPeriod() pulumix.GPtrOutput[RuleRetentionPeriod, RuleRetentionPeriodOutput] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.GPtrOutput[RuleRetentionPeriod, RuleRetentionPeriodOutput] {
		return v.RetentionPeriod
	})
	unwrapped := pulumix.Flatten[*RuleRetentionPeriod, pulumix.GPtrOutput[RuleRetentionPeriod, RuleRetentionPeriodOutput]](value)
	return pulumix.GPtrOutput[RuleRetentionPeriod, RuleRetentionPeriodOutput]{OutputState: unwrapped.OutputState}
}

// (String) The state of the retention rule. Only retention rules that are in the `available` state retain resources. Valid values include `pending` and `available`.
func (o RuleOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o RuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o RuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Rule](o, func(v Rule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RuleOutput{})
}
