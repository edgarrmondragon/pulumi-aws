// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information on FSx Windows File System.
func LookupWindowsFileSystem(ctx *pulumi.Context, args *LookupWindowsFileSystemArgs, opts ...pulumi.InvokeOption) (*LookupWindowsFileSystemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWindowsFileSystemResult
	err := ctx.Invoke("aws:fsx/getWindowsFileSystem:getWindowsFileSystem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWindowsFileSystem.
type LookupWindowsFileSystemArgs struct {
	// Identifier of the file system (e.g. `fs-12345678`).
	Id string `pulumi:"id"`
	// The tags to associate with the file system.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getWindowsFileSystem.
type LookupWindowsFileSystemResult struct {
	// The ID for Microsoft Active Directory instance that the file system is join to.
	ActiveDirectoryId string `pulumi:"activeDirectoryId"`
	// An array DNS alias names associated with the Amazon FSx file system.
	Aliases []string `pulumi:"aliases"`
	// Amazon Resource Name of the file system.
	Arn string `pulumi:"arn"`
	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system.
	AuditLogConfigurations []GetWindowsFileSystemAuditLogConfiguration `pulumi:"auditLogConfigurations"`
	// The number of days to retain automatic backups.
	AutomaticBackupRetentionDays int    `pulumi:"automaticBackupRetentionDays"`
	BackupId                     string `pulumi:"backupId"`
	// A boolean flag indicating whether tags on the file system should be copied to backups.
	CopyTagsToBackups bool `pulumi:"copyTagsToBackups"`
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime string `pulumi:"dailyAutomaticBackupStartTime"`
	// The file system deployment type.
	DeploymentType string `pulumi:"deploymentType"`
	// DNS name for the file system (e.g. `fs-12345678.corp.example.com`).
	DnsName string `pulumi:"dnsName"`
	// Identifier of the file system (e.g. `fs-12345678`).
	Id string `pulumi:"id"`
	// ARN for the KMS Key to encrypt the file system at rest.
	KmsKeyId            string   `pulumi:"kmsKeyId"`
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// AWS account identifier that created the file system.
	OwnerId string `pulumi:"ownerId"`
	// The IP address of the primary, or preferred, file server.
	PreferredFileServerIp string `pulumi:"preferredFileServerIp"`
	// Specifies the subnet in which you want the preferred file server to be located.
	PreferredSubnetId string   `pulumi:"preferredSubnetId"`
	SecurityGroupIds  []string `pulumi:"securityGroupIds"`
	SkipFinalBackup   bool     `pulumi:"skipFinalBackup"`
	// The storage capacity of the file system in gibibytes (GiB).
	StorageCapacity int `pulumi:"storageCapacity"`
	// The type of storage the file system is using. If set to `SSD`, the file system uses solid state drive storage. If set to `HDD`, the file system uses hard disk drive storage.
	StorageType string `pulumi:"storageType"`
	// Specifies the IDs of the subnets that the file system is accessible from.
	SubnetIds []string `pulumi:"subnetIds"`
	// The tags to associate with the file system.
	Tags map[string]string `pulumi:"tags"`
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	ThroughputCapacity int `pulumi:"throughputCapacity"`
	// The ID of the primary virtual private cloud (VPC) for the file system.
	VpcId string `pulumi:"vpcId"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime string `pulumi:"weeklyMaintenanceStartTime"`
}

func LookupWindowsFileSystemOutput(ctx *pulumi.Context, args LookupWindowsFileSystemOutputArgs, opts ...pulumi.InvokeOption) LookupWindowsFileSystemResultOutput {
	outputResult := pulumix.ApplyErr[*LookupWindowsFileSystemArgs](args.ToOutput(), func(plainArgs *LookupWindowsFileSystemArgs) (*LookupWindowsFileSystemResult, error) {
		return LookupWindowsFileSystem(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupWindowsFileSystemResultOutput, *LookupWindowsFileSystemResult](outputResult)
}

// A collection of arguments for invoking getWindowsFileSystem.
type LookupWindowsFileSystemOutputArgs struct {
	// Identifier of the file system (e.g. `fs-12345678`).
	Id pulumix.Input[string] `pulumi:"id"`
	// The tags to associate with the file system.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupWindowsFileSystemOutputArgs) ToOutput() pulumix.Output[*LookupWindowsFileSystemArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupWindowsFileSystemArgs {
		return &LookupWindowsFileSystemArgs{
			Id:   resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupWindowsFileSystemResultOutput struct{ *pulumi.OutputState }

func (LookupWindowsFileSystemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWindowsFileSystemResult)(nil)).Elem()
}

func (o LookupWindowsFileSystemResultOutput) ToOutput(context.Context) pulumix.Output[*LookupWindowsFileSystemResult] {
	return pulumix.Output[*LookupWindowsFileSystemResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) ActiveDirectoryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.ActiveDirectoryId })
}

func (o LookupWindowsFileSystemResultOutput) Aliases() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) []string { return v.Aliases })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.Arn })
}

func (o LookupWindowsFileSystemResultOutput) AuditLogConfigurations() pulumix.GArrayOutput[GetWindowsFileSystemAuditLogConfiguration, GetWindowsFileSystemAuditLogConfigurationOutput] {
	value := pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) []GetWindowsFileSystemAuditLogConfiguration {
		return v.AuditLogConfigurations
	})
	return pulumix.GArrayOutput[GetWindowsFileSystemAuditLogConfiguration, GetWindowsFileSystemAuditLogConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) AutomaticBackupRetentionDays() pulumix.Output[int] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) int { return v.AutomaticBackupRetentionDays })
}

func (o LookupWindowsFileSystemResultOutput) BackupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.BackupId })
}

func (o LookupWindowsFileSystemResultOutput) CopyTagsToBackups() pulumix.Output[bool] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) bool { return v.CopyTagsToBackups })
}

func (o LookupWindowsFileSystemResultOutput) DailyAutomaticBackupStartTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.DailyAutomaticBackupStartTime })
}

func (o LookupWindowsFileSystemResultOutput) DeploymentType() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.DeploymentType })
}

func (o LookupWindowsFileSystemResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.DnsName })
}

func (o LookupWindowsFileSystemResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.Id })
}

func (o LookupWindowsFileSystemResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.KmsKeyId })
}

func (o LookupWindowsFileSystemResultOutput) NetworkInterfaceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) []string { return v.NetworkInterfaceIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.OwnerId })
}

func (o LookupWindowsFileSystemResultOutput) PreferredFileServerIp() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.PreferredFileServerIp })
}

func (o LookupWindowsFileSystemResultOutput) PreferredSubnetId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.PreferredSubnetId })
}

func (o LookupWindowsFileSystemResultOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) SkipFinalBackup() pulumix.Output[bool] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) bool { return v.SkipFinalBackup })
}

func (o LookupWindowsFileSystemResultOutput) StorageCapacity() pulumix.Output[int] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) int { return v.StorageCapacity })
}

func (o LookupWindowsFileSystemResultOutput) StorageType() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.StorageType })
}

func (o LookupWindowsFileSystemResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWindowsFileSystemResultOutput) ThroughputCapacity() pulumix.Output[int] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) int { return v.ThroughputCapacity })
}

func (o LookupWindowsFileSystemResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.VpcId })
}

func (o LookupWindowsFileSystemResultOutput) WeeklyMaintenanceStartTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupWindowsFileSystemResult](o, func(v *LookupWindowsFileSystemResult) string { return v.WeeklyMaintenanceStartTime })
}
