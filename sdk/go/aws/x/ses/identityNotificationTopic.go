// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing SES Identity Notification Topics
type IdentityNotificationTopic struct {
	pulumi.CustomResourceState

	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity pulumix.Output[string] `pulumi:"identity"`
	// Whether SES should include original email headers in SNS notifications of this type. `false` by default.
	IncludeOriginalHeaders pulumix.Output[*bool] `pulumi:"includeOriginalHeaders"`
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: `Bounce`, `Complaint` or `Delivery`.
	NotificationType pulumix.Output[string] `pulumi:"notificationType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to `""` (an empty string) to disable publishing.
	TopicArn pulumix.Output[*string] `pulumi:"topicArn"`
}

// NewIdentityNotificationTopic registers a new resource with the given unique name, arguments, and options.
func NewIdentityNotificationTopic(ctx *pulumi.Context,
	name string, args *IdentityNotificationTopicArgs, opts ...pulumi.ResourceOption) (*IdentityNotificationTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityNotificationTopic
	err := ctx.RegisterResource("aws:ses/identityNotificationTopic:IdentityNotificationTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityNotificationTopic gets an existing IdentityNotificationTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityNotificationTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityNotificationTopicState, opts ...pulumi.ResourceOption) (*IdentityNotificationTopic, error) {
	var resource IdentityNotificationTopic
	err := ctx.ReadResource("aws:ses/identityNotificationTopic:IdentityNotificationTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityNotificationTopic resources.
type identityNotificationTopicState struct {
	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity *string `pulumi:"identity"`
	// Whether SES should include original email headers in SNS notifications of this type. `false` by default.
	IncludeOriginalHeaders *bool `pulumi:"includeOriginalHeaders"`
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: `Bounce`, `Complaint` or `Delivery`.
	NotificationType *string `pulumi:"notificationType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to `""` (an empty string) to disable publishing.
	TopicArn *string `pulumi:"topicArn"`
}

type IdentityNotificationTopicState struct {
	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity pulumix.Input[*string]
	// Whether SES should include original email headers in SNS notifications of this type. `false` by default.
	IncludeOriginalHeaders pulumix.Input[*bool]
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: `Bounce`, `Complaint` or `Delivery`.
	NotificationType pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to `""` (an empty string) to disable publishing.
	TopicArn pulumix.Input[*string]
}

func (IdentityNotificationTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityNotificationTopicState)(nil)).Elem()
}

type identityNotificationTopicArgs struct {
	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity string `pulumi:"identity"`
	// Whether SES should include original email headers in SNS notifications of this type. `false` by default.
	IncludeOriginalHeaders *bool `pulumi:"includeOriginalHeaders"`
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: `Bounce`, `Complaint` or `Delivery`.
	NotificationType string `pulumi:"notificationType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to `""` (an empty string) to disable publishing.
	TopicArn *string `pulumi:"topicArn"`
}

// The set of arguments for constructing a IdentityNotificationTopic resource.
type IdentityNotificationTopicArgs struct {
	// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
	Identity pulumix.Input[string]
	// Whether SES should include original email headers in SNS notifications of this type. `false` by default.
	IncludeOriginalHeaders pulumix.Input[*bool]
	// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: `Bounce`, `Complaint` or `Delivery`.
	NotificationType pulumix.Input[string]
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to `""` (an empty string) to disable publishing.
	TopicArn pulumix.Input[*string]
}

func (IdentityNotificationTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityNotificationTopicArgs)(nil)).Elem()
}

type IdentityNotificationTopicOutput struct{ *pulumi.OutputState }

func (IdentityNotificationTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityNotificationTopic)(nil)).Elem()
}

func (o IdentityNotificationTopicOutput) ToIdentityNotificationTopicOutput() IdentityNotificationTopicOutput {
	return o
}

func (o IdentityNotificationTopicOutput) ToIdentityNotificationTopicOutputWithContext(ctx context.Context) IdentityNotificationTopicOutput {
	return o
}

func (o IdentityNotificationTopicOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityNotificationTopic] {
	return pulumix.Output[IdentityNotificationTopic]{
		OutputState: o.OutputState,
	}
}

// The identity for which the Amazon SNS topic will be set. You can specify an identity by using its name or by using its Amazon Resource Name (ARN).
func (o IdentityNotificationTopicOutput) Identity() pulumix.Output[string] {
	value := pulumix.Apply[IdentityNotificationTopic](o, func(v IdentityNotificationTopic) pulumix.Output[string] { return v.Identity })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether SES should include original email headers in SNS notifications of this type. `false` by default.
func (o IdentityNotificationTopicOutput) IncludeOriginalHeaders() pulumix.Output[*bool] {
	value := pulumix.Apply[IdentityNotificationTopic](o, func(v IdentityNotificationTopic) pulumix.Output[*bool] { return v.IncludeOriginalHeaders })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The type of notifications that will be published to the specified Amazon SNS topic. Valid Values: `Bounce`, `Complaint` or `Delivery`.
func (o IdentityNotificationTopicOutput) NotificationType() pulumix.Output[string] {
	value := pulumix.Apply[IdentityNotificationTopic](o, func(v IdentityNotificationTopic) pulumix.Output[string] { return v.NotificationType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the Amazon SNS topic. Can be set to `""` (an empty string) to disable publishing.
func (o IdentityNotificationTopicOutput) TopicArn() pulumix.Output[*string] {
	value := pulumix.Apply[IdentityNotificationTopic](o, func(v IdentityNotificationTopic) pulumix.Output[*string] { return v.TopicArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(IdentityNotificationTopicOutput{})
}
