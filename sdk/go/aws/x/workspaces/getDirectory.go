// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an AWS WorkSpaces directory.
func LookupDirectory(ctx *pulumi.Context, args *LookupDirectoryArgs, opts ...pulumi.InvokeOption) (*LookupDirectoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDirectoryResult
	err := ctx.Invoke("aws:workspaces/getDirectory:getDirectory", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDirectory.
type LookupDirectoryArgs struct {
	// Directory identifier for registration in WorkSpaces service.
	DirectoryId string `pulumi:"directoryId"`
	// A map of tags assigned to the WorkSpaces directory.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDirectory.
type LookupDirectoryResult struct {
	// Directory alias.
	Alias string `pulumi:"alias"`
	// User name for the service account.
	CustomerUserName string `pulumi:"customerUserName"`
	DirectoryId      string `pulumi:"directoryId"`
	// Name of the directory.
	DirectoryName string `pulumi:"directoryName"`
	// Directory type.
	DirectoryType string `pulumi:"directoryType"`
	// IP addresses of the DNS servers for the directory.
	DnsIpAddresses []string `pulumi:"dnsIpAddresses"`
	// Identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
	IamRoleId string `pulumi:"iamRoleId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifiers of the IP access control groups associated with the directory.
	IpGroupIds []string `pulumi:"ipGroupIds"`
	// Registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
	RegistrationCode string `pulumi:"registrationCode"`
	// The permissions to enable or disable self-service capabilities.
	SelfServicePermissions []GetDirectorySelfServicePermission `pulumi:"selfServicePermissions"`
	// Identifiers of the subnets where the directory resides.
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags assigned to the WorkSpaces directory.
	Tags map[string]string `pulumi:"tags"`
	// (Optional) Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
	WorkspaceAccessProperties []GetDirectoryWorkspaceAccessProperty `pulumi:"workspaceAccessProperties"`
	// The default properties that are used for creating WorkSpaces. Defined below.
	WorkspaceCreationProperties []GetDirectoryWorkspaceCreationProperty `pulumi:"workspaceCreationProperties"`
	// The identifier of the security group that is assigned to new WorkSpaces. Defined below.
	WorkspaceSecurityGroupId string `pulumi:"workspaceSecurityGroupId"`
}

func LookupDirectoryOutput(ctx *pulumi.Context, args LookupDirectoryOutputArgs, opts ...pulumi.InvokeOption) LookupDirectoryResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDirectoryArgs](args.ToOutput(), func(plainArgs *LookupDirectoryArgs) (*LookupDirectoryResult, error) {
		return LookupDirectory(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDirectoryResultOutput, *LookupDirectoryResult](outputResult)
}

// A collection of arguments for invoking getDirectory.
type LookupDirectoryOutputArgs struct {
	// Directory identifier for registration in WorkSpaces service.
	DirectoryId pulumix.Input[string] `pulumi:"directoryId"`
	// A map of tags assigned to the WorkSpaces directory.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupDirectoryOutputArgs) ToOutput() pulumix.Output[*LookupDirectoryArgs] {
	allArgs := pulumix.All(
		args.DirectoryId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDirectoryArgs {
		return &LookupDirectoryArgs{
			DirectoryId: resolvedArgs[0].(string),
			Tags:        resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupDirectoryResultOutput struct{ *pulumi.OutputState }

func (LookupDirectoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDirectoryResult)(nil)).Elem()
}

func (o LookupDirectoryResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDirectoryResult] {
	return pulumix.Output[*LookupDirectoryResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDirectoryResultOutput) Alias() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Alias })
}

func (o LookupDirectoryResultOutput) CustomerUserName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.CustomerUserName })
}

func (o LookupDirectoryResultOutput) DirectoryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.DirectoryId })
}

func (o LookupDirectoryResultOutput) DirectoryName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.DirectoryName })
}

func (o LookupDirectoryResultOutput) DirectoryType() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.DirectoryType })
}

func (o LookupDirectoryResultOutput) DnsIpAddresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []string { return v.DnsIpAddresses })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) IamRoleId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.IamRoleId })
}

func (o LookupDirectoryResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.Id })
}

func (o LookupDirectoryResultOutput) IpGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []string { return v.IpGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) RegistrationCode() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.RegistrationCode })
}

func (o LookupDirectoryResultOutput) SelfServicePermissions() pulumix.GArrayOutput[GetDirectorySelfServicePermission, GetDirectorySelfServicePermissionOutput] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []GetDirectorySelfServicePermission { return v.SelfServicePermissions })
	return pulumix.GArrayOutput[GetDirectorySelfServicePermission, GetDirectorySelfServicePermissionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) WorkspaceAccessProperties() pulumix.GArrayOutput[GetDirectoryWorkspaceAccessProperty, GetDirectoryWorkspaceAccessPropertyOutput] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []GetDirectoryWorkspaceAccessProperty {
		return v.WorkspaceAccessProperties
	})
	return pulumix.GArrayOutput[GetDirectoryWorkspaceAccessProperty, GetDirectoryWorkspaceAccessPropertyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) WorkspaceCreationProperties() pulumix.GArrayOutput[GetDirectoryWorkspaceCreationProperty, GetDirectoryWorkspaceCreationPropertyOutput] {
	value := pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) []GetDirectoryWorkspaceCreationProperty {
		return v.WorkspaceCreationProperties
	})
	return pulumix.GArrayOutput[GetDirectoryWorkspaceCreationProperty, GetDirectoryWorkspaceCreationPropertyOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupDirectoryResultOutput) WorkspaceSecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDirectoryResult](o, func(v *LookupDirectoryResult) string { return v.WorkspaceSecurityGroupId })
}
