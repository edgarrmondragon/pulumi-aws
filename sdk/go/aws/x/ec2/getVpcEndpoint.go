// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The VPC Endpoint data source provides details about
// a specific VPC endpoint.
func LookupVpcEndpoint(ctx *pulumi.Context, args *LookupVpcEndpointArgs, opts ...pulumi.InvokeOption) (*LookupVpcEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcEndpointResult
	err := ctx.Invoke("aws:ec2/getVpcEndpoint:getVpcEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcEndpoint.
type LookupVpcEndpointArgs struct {
	// Custom filter block as described below.
	Filters []GetVpcEndpointFilter `pulumi:"filters"`
	// ID of the specific VPC Endpoint to retrieve.
	Id *string `pulumi:"id"`
	// Service name of the specific VPC Endpoint to retrieve. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName *string `pulumi:"serviceName"`
	// State of the specific VPC Endpoint to retrieve.
	State *string `pulumi:"state"`
	// Map of tags, each pair of which must exactly match
	// a pair on the specific VPC Endpoint to retrieve.
	Tags map[string]string `pulumi:"tags"`
	// ID of the VPC in which the specific VPC Endpoint is used.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getVpcEndpoint.
type LookupVpcEndpointResult struct {
	// ARN of the VPC endpoint.
	Arn string `pulumi:"arn"`
	// List of CIDR blocks for the exposed AWS service. Applicable for endpoints of type `Gateway`.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// DNS entries for the VPC Endpoint. Applicable for endpoints of type `Interface`. DNS entry blocks are documented below.
	DnsEntries []GetVpcEndpointDnsEntry `pulumi:"dnsEntries"`
	// DNS options for the VPC Endpoint. DNS options blocks are documented below.
	DnsOptions    []GetVpcEndpointDnsOption `pulumi:"dnsOptions"`
	Filters       []GetVpcEndpointFilter    `pulumi:"filters"`
	Id            string                    `pulumi:"id"`
	IpAddressType string                    `pulumi:"ipAddressType"`
	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type `Interface`.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// ID of the AWS account that owns the VPC endpoint.
	OwnerId string `pulumi:"ownerId"`
	// Policy document associated with the VPC Endpoint. Applicable for endpoints of type `Gateway`.
	Policy string `pulumi:"policy"`
	// Prefix list ID of the exposed AWS service. Applicable for endpoints of type `Gateway`.
	PrefixListId string `pulumi:"prefixListId"`
	// Whether or not the VPC is associated with a private hosted zone - `true` or `false`. Applicable for endpoints of type `Interface`.
	PrivateDnsEnabled bool `pulumi:"privateDnsEnabled"`
	// Whether or not the VPC Endpoint is being managed by its service - `true` or `false`.
	RequesterManaged bool `pulumi:"requesterManaged"`
	// One or more route tables associated with the VPC Endpoint. Applicable for endpoints of type `Gateway`.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// One or more security groups associated with the network interfaces. Applicable for endpoints of type `Interface`.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	ServiceName      string   `pulumi:"serviceName"`
	State            string   `pulumi:"state"`
	// One or more subnets in which the VPC Endpoint is located. Applicable for endpoints of type `Interface`.
	SubnetIds []string          `pulumi:"subnetIds"`
	Tags      map[string]string `pulumi:"tags"`
	// VPC Endpoint type, `Gateway` or `Interface`.
	VpcEndpointType string `pulumi:"vpcEndpointType"`
	VpcId           string `pulumi:"vpcId"`
}

func LookupVpcEndpointOutput(ctx *pulumi.Context, args LookupVpcEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupVpcEndpointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcEndpointArgs](args.ToOutput(), func(plainArgs *LookupVpcEndpointArgs) (*LookupVpcEndpointResult, error) {
		return LookupVpcEndpoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcEndpointResultOutput, *LookupVpcEndpointResult](outputResult)
}

// A collection of arguments for invoking getVpcEndpoint.
type LookupVpcEndpointOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetVpcEndpointFilterArgs] `pulumi:"filters"`
	// ID of the specific VPC Endpoint to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Service name of the specific VPC Endpoint to retrieve. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
	ServiceName pulumix.Input[*string] `pulumi:"serviceName"`
	// State of the specific VPC Endpoint to retrieve.
	State pulumix.Input[*string] `pulumi:"state"`
	// Map of tags, each pair of which must exactly match
	// a pair on the specific VPC Endpoint to retrieve.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// ID of the VPC in which the specific VPC Endpoint is used.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args LookupVpcEndpointOutputArgs) ToOutput() pulumix.Output[*LookupVpcEndpointArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.ServiceName.ToOutput(context.Background()).AsAny(),
		args.State.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcEndpointArgs {
		return &LookupVpcEndpointArgs{
			Filters:     resolvedArgs[0].([]GetVpcEndpointFilter),
			Id:          resolvedArgs[1].(*string),
			ServiceName: resolvedArgs[2].(*string),
			State:       resolvedArgs[3].(*string),
			Tags:        resolvedArgs[4].(map[string]string),
			VpcId:       resolvedArgs[5].(*string),
		}
	})
}

type LookupVpcEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupVpcEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcEndpointResult)(nil)).Elem()
}

func (o LookupVpcEndpointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcEndpointResult] {
	return pulumix.Output[*LookupVpcEndpointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.Arn })
}

func (o LookupVpcEndpointResultOutput) CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []string { return v.CidrBlocks })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) DnsEntries() pulumix.GArrayOutput[GetVpcEndpointDnsEntry, GetVpcEndpointDnsEntryOutput] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []GetVpcEndpointDnsEntry { return v.DnsEntries })
	return pulumix.GArrayOutput[GetVpcEndpointDnsEntry, GetVpcEndpointDnsEntryOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) DnsOptions() pulumix.GArrayOutput[GetVpcEndpointDnsOption, GetVpcEndpointDnsOptionOutput] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []GetVpcEndpointDnsOption { return v.DnsOptions })
	return pulumix.GArrayOutput[GetVpcEndpointDnsOption, GetVpcEndpointDnsOptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) Filters() pulumix.GArrayOutput[GetVpcEndpointFilter, GetVpcEndpointFilterOutput] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []GetVpcEndpointFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcEndpointFilter, GetVpcEndpointFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.Id })
}

func (o LookupVpcEndpointResultOutput) IpAddressType() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.IpAddressType })
}

func (o LookupVpcEndpointResultOutput) NetworkInterfaceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []string { return v.NetworkInterfaceIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.OwnerId })
}

func (o LookupVpcEndpointResultOutput) Policy() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.Policy })
}

func (o LookupVpcEndpointResultOutput) PrefixListId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.PrefixListId })
}

func (o LookupVpcEndpointResultOutput) PrivateDnsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) bool { return v.PrivateDnsEnabled })
}

func (o LookupVpcEndpointResultOutput) RequesterManaged() pulumix.Output[bool] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) bool { return v.RequesterManaged })
}

func (o LookupVpcEndpointResultOutput) RouteTableIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []string { return v.RouteTableIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.ServiceName })
}

func (o LookupVpcEndpointResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.State })
}

func (o LookupVpcEndpointResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcEndpointResultOutput) VpcEndpointType() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.VpcEndpointType })
}

func (o LookupVpcEndpointResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcEndpointResult](o, func(v *LookupVpcEndpointResult) string { return v.VpcId })
}
