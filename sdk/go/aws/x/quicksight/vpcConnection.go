// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS QuickSight VPC Connection.
type VpcConnection struct {
	pulumi.CustomResourceState

	// ARN of the VPC connection.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
	AvailabilityStatus pulumix.Output[string] `pulumi:"availabilityStatus"`
	// AWS account ID.
	AwsAccountId pulumix.Output[string] `pulumi:"awsAccountId"`
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers pulumix.ArrayOutput[string] `pulumi:"dnsResolvers"`
	// The display name for the VPC connection.
	Name pulumix.Output[string] `pulumi:"name"`
	// The IAM role to associate with the VPC connection.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumix.MapOutput[string]                                              `pulumi:"tagsAll"`
	Timeouts pulumix.GPtrOutput[VpcConnectionTimeouts, VpcConnectionTimeoutsOutput] `pulumi:"timeouts"`
	// The ID of the VPC connection.
	VpcConnectionId pulumix.Output[string] `pulumi:"vpcConnectionId"`
}

// NewVpcConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcConnection(ctx *pulumi.Context,
	name string, args *VpcConnectionArgs, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcConnection
	err := ctx.RegisterResource("aws:quicksight/vpcConnection:VpcConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcConnection gets an existing VpcConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcConnectionState, opts ...pulumi.ResourceOption) (*VpcConnection, error) {
	var resource VpcConnection
	err := ctx.ReadResource("aws:quicksight/vpcConnection:VpcConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcConnection resources.
type vpcConnectionState struct {
	// ARN of the VPC connection.
	Arn *string `pulumi:"arn"`
	// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
	AvailabilityStatus *string `pulumi:"availabilityStatus"`
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers []string `pulumi:"dnsResolvers"`
	// The display name for the VPC connection.
	Name *string `pulumi:"name"`
	// The IAM role to associate with the VPC connection.
	RoleArn *string `pulumi:"roleArn"`
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  map[string]string      `pulumi:"tagsAll"`
	Timeouts *VpcConnectionTimeouts `pulumi:"timeouts"`
	// The ID of the VPC connection.
	VpcConnectionId *string `pulumi:"vpcConnectionId"`
}

type VpcConnectionState struct {
	// ARN of the VPC connection.
	Arn pulumix.Input[*string]
	// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
	AvailabilityStatus pulumix.Input[*string]
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers pulumix.Input[[]string]
	// The display name for the VPC connection.
	Name pulumix.Input[*string]
	// The IAM role to associate with the VPC connection.
	RoleArn pulumix.Input[*string]
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds pulumix.Input[[]string]
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds pulumix.Input[[]string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll  pulumix.Input[map[string]string]
	Timeouts pulumix.Input[*VpcConnectionTimeoutsArgs]
	// The ID of the VPC connection.
	VpcConnectionId pulumix.Input[*string]
}

func (VpcConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionState)(nil)).Elem()
}

type vpcConnectionArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers []string `pulumi:"dnsResolvers"`
	// The display name for the VPC connection.
	Name *string `pulumi:"name"`
	// The IAM role to associate with the VPC connection.
	RoleArn string `pulumi:"roleArn"`
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     map[string]string      `pulumi:"tags"`
	Timeouts *VpcConnectionTimeouts `pulumi:"timeouts"`
	// The ID of the VPC connection.
	VpcConnectionId string `pulumi:"vpcConnectionId"`
}

// The set of arguments for constructing a VpcConnection resource.
type VpcConnectionArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string]
	// A list of IP addresses of DNS resolver endpoints for the VPC connection.
	DnsResolvers pulumix.Input[[]string]
	// The display name for the VPC connection.
	Name pulumix.Input[*string]
	// The IAM role to associate with the VPC connection.
	RoleArn pulumix.Input[string]
	// A list of security group IDs for the VPC connection.
	SecurityGroupIds pulumix.Input[[]string]
	// A list of subnet IDs for the VPC connection.
	//
	// The following arguments are optional:
	SubnetIds pulumix.Input[[]string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags     pulumix.Input[map[string]string]
	Timeouts pulumix.Input[*VpcConnectionTimeoutsArgs]
	// The ID of the VPC connection.
	VpcConnectionId pulumix.Input[string]
}

func (VpcConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcConnectionArgs)(nil)).Elem()
}

type VpcConnectionOutput struct{ *pulumi.OutputState }

func (VpcConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnection)(nil)).Elem()
}

func (o VpcConnectionOutput) ToVpcConnectionOutput() VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToVpcConnectionOutputWithContext(ctx context.Context) VpcConnectionOutput {
	return o
}

func (o VpcConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnection] {
	return pulumix.Output[VpcConnection]{
		OutputState: o.OutputState,
	}
}

// ARN of the VPC connection.
func (o VpcConnectionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The availability status of the VPC connection. Valid values are `AVAILABLE`, `UNAVAILABLE` or `PARTIALLY_AVAILABLE`.
func (o VpcConnectionOutput) AvailabilityStatus() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.AvailabilityStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AWS account ID.
func (o VpcConnectionOutput) AwsAccountId() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.AwsAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of IP addresses of DNS resolver endpoints for the VPC connection.
func (o VpcConnectionOutput) DnsResolvers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.ArrayOutput[string] { return v.DnsResolvers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The display name for the VPC connection.
func (o VpcConnectionOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The IAM role to associate with the VPC connection.
func (o VpcConnectionOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of security group IDs for the VPC connection.
func (o VpcConnectionOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A list of subnet IDs for the VPC connection.
//
// The following arguments are optional:
func (o VpcConnectionOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o VpcConnectionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o VpcConnectionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o VpcConnectionOutput) Timeouts() pulumix.GPtrOutput[VpcConnectionTimeouts, VpcConnectionTimeoutsOutput] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.GPtrOutput[VpcConnectionTimeouts, VpcConnectionTimeoutsOutput] {
		return v.Timeouts
	})
	unwrapped := pulumix.Flatten[*VpcConnectionTimeouts, pulumix.GPtrOutput[VpcConnectionTimeouts, VpcConnectionTimeoutsOutput]](value)
	return pulumix.GPtrOutput[VpcConnectionTimeouts, VpcConnectionTimeoutsOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the VPC connection.
func (o VpcConnectionOutput) VpcConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[VpcConnection](o, func(v VpcConnection) pulumix.Output[string] { return v.VpcConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcConnectionOutput{})
}
