// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Information about a single RDS Reserved Instance Offering.
func GetReservedInstanceOffering(ctx *pulumi.Context, args *GetReservedInstanceOfferingArgs, opts ...pulumi.InvokeOption) (*GetReservedInstanceOfferingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetReservedInstanceOfferingResult
	err := ctx.Invoke("aws:rds/getReservedInstanceOffering:getReservedInstanceOffering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservedInstanceOffering.
type GetReservedInstanceOfferingArgs struct {
	// DB instance class for the reserved DB instance.
	DbInstanceClass string `pulumi:"dbInstanceClass"`
	// Duration of the reservation in years or seconds. Valid values are `1`, `3`, `31536000`, `94608000`
	Duration int `pulumi:"duration"`
	// Whether the reservation applies to Multi-AZ deployments.
	MultiAz bool `pulumi:"multiAz"`
	// Offering type of this reserved DB instance. Valid values are `No Upfront`, `Partial Upfront`, `All Upfront`.
	OfferingType string `pulumi:"offeringType"`
	// Description of the reserved DB instance.
	ProductDescription string `pulumi:"productDescription"`
}

// A collection of values returned by getReservedInstanceOffering.
type GetReservedInstanceOfferingResult struct {
	// Currency code for the reserved DB instance.
	CurrencyCode    string `pulumi:"currencyCode"`
	DbInstanceClass string `pulumi:"dbInstanceClass"`
	Duration        int    `pulumi:"duration"`
	// Fixed price charged for this reserved DB instance.
	FixedPrice float64 `pulumi:"fixedPrice"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	MultiAz bool   `pulumi:"multiAz"`
	// Unique identifier for the reservation.
	OfferingId         string `pulumi:"offeringId"`
	OfferingType       string `pulumi:"offeringType"`
	ProductDescription string `pulumi:"productDescription"`
}

func GetReservedInstanceOfferingOutput(ctx *pulumi.Context, args GetReservedInstanceOfferingOutputArgs, opts ...pulumi.InvokeOption) GetReservedInstanceOfferingResultOutput {
	outputResult := pulumix.ApplyErr[*GetReservedInstanceOfferingArgs](args.ToOutput(), func(plainArgs *GetReservedInstanceOfferingArgs) (*GetReservedInstanceOfferingResult, error) {
		return GetReservedInstanceOffering(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetReservedInstanceOfferingResultOutput, *GetReservedInstanceOfferingResult](outputResult)
}

// A collection of arguments for invoking getReservedInstanceOffering.
type GetReservedInstanceOfferingOutputArgs struct {
	// DB instance class for the reserved DB instance.
	DbInstanceClass pulumix.Input[string] `pulumi:"dbInstanceClass"`
	// Duration of the reservation in years or seconds. Valid values are `1`, `3`, `31536000`, `94608000`
	Duration pulumix.Input[int] `pulumi:"duration"`
	// Whether the reservation applies to Multi-AZ deployments.
	MultiAz pulumix.Input[bool] `pulumi:"multiAz"`
	// Offering type of this reserved DB instance. Valid values are `No Upfront`, `Partial Upfront`, `All Upfront`.
	OfferingType pulumix.Input[string] `pulumi:"offeringType"`
	// Description of the reserved DB instance.
	ProductDescription pulumix.Input[string] `pulumi:"productDescription"`
}

func (args GetReservedInstanceOfferingOutputArgs) ToOutput() pulumix.Output[*GetReservedInstanceOfferingArgs] {
	allArgs := pulumix.All(
		args.DbInstanceClass.ToOutput(context.Background()).AsAny(),
		args.Duration.ToOutput(context.Background()).AsAny(),
		args.MultiAz.ToOutput(context.Background()).AsAny(),
		args.OfferingType.ToOutput(context.Background()).AsAny(),
		args.ProductDescription.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetReservedInstanceOfferingArgs {
		return &GetReservedInstanceOfferingArgs{
			DbInstanceClass:    resolvedArgs[0].(string),
			Duration:           resolvedArgs[1].(int),
			MultiAz:            resolvedArgs[2].(bool),
			OfferingType:       resolvedArgs[3].(string),
			ProductDescription: resolvedArgs[4].(string),
		}
	})
}

type GetReservedInstanceOfferingResultOutput struct{ *pulumi.OutputState }

func (GetReservedInstanceOfferingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedInstanceOfferingResult)(nil)).Elem()
}

func (o GetReservedInstanceOfferingResultOutput) ToOutput(context.Context) pulumix.Output[*GetReservedInstanceOfferingResult] {
	return pulumix.Output[*GetReservedInstanceOfferingResult]{
		OutputState: o.OutputState,
	}
}

func (o GetReservedInstanceOfferingResultOutput) CurrencyCode() pulumix.Output[string] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) string { return v.CurrencyCode })
}

func (o GetReservedInstanceOfferingResultOutput) DbInstanceClass() pulumix.Output[string] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) string { return v.DbInstanceClass })
}

func (o GetReservedInstanceOfferingResultOutput) Duration() pulumix.Output[int] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) int { return v.Duration })
}

func (o GetReservedInstanceOfferingResultOutput) FixedPrice() pulumix.Output[float64] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) float64 { return v.FixedPrice })
}

func (o GetReservedInstanceOfferingResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) string { return v.Id })
}

func (o GetReservedInstanceOfferingResultOutput) MultiAz() pulumix.Output[bool] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) bool { return v.MultiAz })
}

func (o GetReservedInstanceOfferingResultOutput) OfferingId() pulumix.Output[string] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) string { return v.OfferingId })
}

func (o GetReservedInstanceOfferingResultOutput) OfferingType() pulumix.Output[string] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) string { return v.OfferingType })
}

func (o GetReservedInstanceOfferingResultOutput) ProductDescription() pulumix.Output[string] {
	return pulumix.Apply[*GetReservedInstanceOfferingResult](o, func(v *GetReservedInstanceOfferingResult) string { return v.ProductDescription })
}
