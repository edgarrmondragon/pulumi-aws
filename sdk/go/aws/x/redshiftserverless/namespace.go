// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Amazon Redshift Serverless Namespace.
type Namespace struct {
	pulumi.CustomResourceState

	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword pulumix.Output[*string] `pulumi:"adminUserPassword"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername pulumix.Output[string] `pulumi:"adminUsername"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the first database created in the namespace.
	DbName pulumix.Output[string] `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn pulumix.Output[*string] `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles pulumix.ArrayOutput[string] `pulumi:"iamRoles"`
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports pulumix.ArrayOutput[string] `pulumi:"logExports"`
	// The Redshift Namespace ID.
	NamespaceId pulumix.Output[string] `pulumi:"namespaceId"`
	// The name of the namespace.
	NamespaceName pulumix.Output[string] `pulumi:"namespaceName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.AdminUserPassword != nil {
		untypedSecretValue := pulumi.ToSecret(args.AdminUserPassword.ToOutput(ctx.Context()).Untyped())
		args.AdminUserPassword = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.AdminUsername != nil {
		untypedSecretValue := pulumi.ToSecret(args.AdminUsername.ToOutput(ctx.Context()).Untyped())
		args.AdminUsername = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminUserPassword",
		"adminUsername",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("aws:redshiftserverless/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("aws:redshiftserverless/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername *string `pulumi:"adminUsername"`
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	Arn *string `pulumi:"arn"`
	// The name of the first database created in the namespace.
	DbName *string `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn *string `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles []string `pulumi:"iamRoles"`
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports []string `pulumi:"logExports"`
	// The Redshift Namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// The name of the namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type NamespaceState struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword pulumix.Input[*string]
	// The username of the administrator for the first database created in the namespace.
	AdminUsername pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
	Arn pulumix.Input[*string]
	// The name of the first database created in the namespace.
	DbName pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn pulumix.Input[*string]
	// A list of IAM roles to associate with the namespace.
	IamRoles pulumix.Input[[]string]
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId pulumix.Input[*string]
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports pulumix.Input[[]string]
	// The Redshift Namespace ID.
	NamespaceId pulumix.Input[*string]
	// The name of the namespace.
	NamespaceName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername *string `pulumi:"adminUsername"`
	// The name of the first database created in the namespace.
	DbName *string `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn *string `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles []string `pulumi:"iamRoles"`
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports []string `pulumi:"logExports"`
	// The name of the namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// The password of the administrator for the first database created in the namespace.
	AdminUserPassword pulumix.Input[*string]
	// The username of the administrator for the first database created in the namespace.
	AdminUsername pulumix.Input[*string]
	// The name of the first database created in the namespace.
	DbName pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
	DefaultIamRoleArn pulumix.Input[*string]
	// A list of IAM roles to associate with the namespace.
	IamRoles pulumix.Input[[]string]
	// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
	KmsKeyId pulumix.Input[*string]
	// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
	LogExports pulumix.Input[[]string]
	// The name of the namespace.
	NamespaceName pulumix.Input[string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[Namespace] {
	return pulumix.Output[Namespace]{
		OutputState: o.OutputState,
	}
}

// The password of the administrator for the first database created in the namespace.
func (o NamespaceOutput) AdminUserPassword() pulumix.Output[*string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[*string] { return v.AdminUserPassword })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The username of the administrator for the first database created in the namespace.
func (o NamespaceOutput) AdminUsername() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.AdminUsername })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
func (o NamespaceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the first database created in the namespace.
func (o NamespaceOutput) DbName() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.DbName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
func (o NamespaceOutput) DefaultIamRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[*string] { return v.DefaultIamRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of IAM roles to associate with the namespace.
func (o NamespaceOutput) IamRoles() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.ArrayOutput[string] { return v.IamRoles })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
func (o NamespaceOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
func (o NamespaceOutput) LogExports() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.ArrayOutput[string] { return v.LogExports })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Redshift Namespace ID.
func (o NamespaceOutput) NamespaceId() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.NamespaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the namespace.
func (o NamespaceOutput) NamespaceName() pulumix.Output[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.Output[string] { return v.NamespaceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o NamespaceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o NamespaceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Namespace](o, func(v Namespace) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(NamespaceOutput{})
}
