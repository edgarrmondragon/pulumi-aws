// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get a list of AMI IDs matching the specified criteria.
func GetAmiIds(ctx *pulumi.Context, args *GetAmiIdsArgs, opts ...pulumi.InvokeOption) (*GetAmiIdsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAmiIdsResult
	err := ctx.Invoke("aws:ec2/getAmiIds:getAmiIds", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAmiIds.
type GetAmiIdsArgs struct {
	// Limit search to users with *explicit* launch
	// permission on  the image. Valid items are the numeric account ID or `self`.
	ExecutableUsers []string `pulumi:"executableUsers"`
	// One or more name/value pairs to filter off of. There
	// are several valid keys, for a full reference, check out
	// [describe-images in the AWS CLI reference][1].
	Filters []GetAmiIdsFilter `pulumi:"filters"`
	// If true, all deprecated AMIs are included in the response.
	// If false, no deprecated AMIs are included in the response. If no value is specified, the default value is `false`.
	IncludeDeprecated *bool `pulumi:"includeDeprecated"`
	// Regex string to apply to the AMI list returned
	// by AWS. This allows more advanced filtering not supported from the AWS API.
	// This filtering is done locally on what AWS returns, and could have a performance
	// impact if the result is large. Combine this with other
	// options to narrow down the list AWS returns.
	NameRegex *string `pulumi:"nameRegex"`
	// List of AMI owners to limit search. At least 1 value must be specified. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).
	Owners []string `pulumi:"owners"`
	// Used to sort AMIs by creation time.
	// If no value is specified, the default value is `false`.
	SortAscending *bool `pulumi:"sortAscending"`
}

// A collection of values returned by getAmiIds.
type GetAmiIdsResult struct {
	ExecutableUsers []string          `pulumi:"executableUsers"`
	Filters         []GetAmiIdsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                string   `pulumi:"id"`
	Ids               []string `pulumi:"ids"`
	IncludeDeprecated *bool    `pulumi:"includeDeprecated"`
	NameRegex         *string  `pulumi:"nameRegex"`
	Owners            []string `pulumi:"owners"`
	SortAscending     *bool    `pulumi:"sortAscending"`
}

func GetAmiIdsOutput(ctx *pulumi.Context, args GetAmiIdsOutputArgs, opts ...pulumi.InvokeOption) GetAmiIdsResultOutput {
	outputResult := pulumix.ApplyErr[*GetAmiIdsArgs](args.ToOutput(), func(plainArgs *GetAmiIdsArgs) (*GetAmiIdsResult, error) {
		return GetAmiIds(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetAmiIdsResultOutput, *GetAmiIdsResult](outputResult)
}

// A collection of arguments for invoking getAmiIds.
type GetAmiIdsOutputArgs struct {
	// Limit search to users with *explicit* launch
	// permission on  the image. Valid items are the numeric account ID or `self`.
	ExecutableUsers pulumix.Input[[]string] `pulumi:"executableUsers"`
	// One or more name/value pairs to filter off of. There
	// are several valid keys, for a full reference, check out
	// [describe-images in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetAmiIdsFilterArgs] `pulumi:"filters"`
	// If true, all deprecated AMIs are included in the response.
	// If false, no deprecated AMIs are included in the response. If no value is specified, the default value is `false`.
	IncludeDeprecated pulumix.Input[*bool] `pulumi:"includeDeprecated"`
	// Regex string to apply to the AMI list returned
	// by AWS. This allows more advanced filtering not supported from the AWS API.
	// This filtering is done locally on what AWS returns, and could have a performance
	// impact if the result is large. Combine this with other
	// options to narrow down the list AWS returns.
	NameRegex pulumix.Input[*string] `pulumi:"nameRegex"`
	// List of AMI owners to limit search. At least 1 value must be specified. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).
	Owners pulumix.Input[[]string] `pulumi:"owners"`
	// Used to sort AMIs by creation time.
	// If no value is specified, the default value is `false`.
	SortAscending pulumix.Input[*bool] `pulumi:"sortAscending"`
}

func (args GetAmiIdsOutputArgs) ToOutput() pulumix.Output[*GetAmiIdsArgs] {
	allArgs := pulumix.All(
		args.ExecutableUsers.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.IncludeDeprecated.ToOutput(context.Background()).AsAny(),
		args.NameRegex.ToOutput(context.Background()).AsAny(),
		args.Owners.ToOutput(context.Background()).AsAny(),
		args.SortAscending.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetAmiIdsArgs {
		return &GetAmiIdsArgs{
			ExecutableUsers:   resolvedArgs[0].([]string),
			Filters:           resolvedArgs[1].([]GetAmiIdsFilter),
			IncludeDeprecated: resolvedArgs[2].(*bool),
			NameRegex:         resolvedArgs[3].(*string),
			Owners:            resolvedArgs[4].([]string),
			SortAscending:     resolvedArgs[5].(*bool),
		}
	})
}

type GetAmiIdsResultOutput struct{ *pulumi.OutputState }

func (GetAmiIdsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAmiIdsResult)(nil)).Elem()
}

func (o GetAmiIdsResultOutput) ToOutput(context.Context) pulumix.Output[*GetAmiIdsResult] {
	return pulumix.Output[*GetAmiIdsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAmiIdsResultOutput) ExecutableUsers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) []string { return v.ExecutableUsers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetAmiIdsResultOutput) Filters() pulumix.GArrayOutput[GetAmiIdsFilter, GetAmiIdsFilterOutput] {
	value := pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) []GetAmiIdsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetAmiIdsFilter, GetAmiIdsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetAmiIdsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) string { return v.Id })
}

func (o GetAmiIdsResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetAmiIdsResultOutput) IncludeDeprecated() pulumix.Output[*bool] {
	return pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) *bool { return v.IncludeDeprecated })
}

func (o GetAmiIdsResultOutput) NameRegex() pulumix.Output[*string] {
	return pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) *string { return v.NameRegex })
}

func (o GetAmiIdsResultOutput) Owners() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) []string { return v.Owners })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetAmiIdsResultOutput) SortAscending() pulumix.Output[*bool] {
	return pulumix.Apply[*GetAmiIdsResult](o, func(v *GetAmiIdsResult) *bool { return v.SortAscending })
}
