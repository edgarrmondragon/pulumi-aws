// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can be created, updated, deleted, and imported.
//
// > **Note:** All arguments including the password will be stored in the raw state as plain-text. Read more about sensitive data in state.
//
// > **Note:** The `s3Settings` argument is deprecated, may not be maintained, and will be removed in a future version. Use the `dms.S3Endpoint` resource instead.
type Endpoint struct {
	pulumi.CustomResourceState

	// ARN for the certificate.
	CertificateArn pulumix.Output[string] `pulumi:"certificateArn"`
	// Name of the endpoint database.
	DatabaseName pulumix.Output[*string] `pulumi:"databaseName"`
	// Configuration block for OpenSearch settings. See below.
	ElasticsearchSettings pulumix.GPtrOutput[EndpointElasticsearchSettings, EndpointElasticsearchSettingsOutput] `pulumi:"elasticsearchSettings"`
	// ARN for the endpoint.
	EndpointArn pulumix.Output[string] `pulumi:"endpointArn"`
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumix.Output[string] `pulumi:"endpointId"`
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType pulumix.Output[string] `pulumi:"endpointType"`
	// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`, `s3`, `sqlserver`, `sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
	EngineName pulumix.Output[string] `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
	ExtraConnectionAttributes pulumix.Output[string] `pulumi:"extraConnectionAttributes"`
	// Configuration block for Kafka settings. See below.
	KafkaSettings pulumix.GPtrOutput[EndpointKafkaSettings, EndpointKafkaSettingsOutput] `pulumi:"kafkaSettings"`
	// Configuration block for Kinesis settings. See below.
	KinesisSettings pulumix.GPtrOutput[EndpointKinesisSettings, EndpointKinesisSettingsOutput] `pulumi:"kinesisSettings"`
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
	//
	// The following arguments are optional:
	KmsKeyArn pulumix.Output[string] `pulumi:"kmsKeyArn"`
	// Configuration block for MongoDB settings. See below.
	MongodbSettings pulumix.GPtrOutput[EndpointMongodbSettings, EndpointMongodbSettingsOutput] `pulumi:"mongodbSettings"`
	// Password to be used to login to the endpoint database.
	Password pulumix.Output[*string] `pulumi:"password"`
	// Port used by the endpoint database.
	Port          pulumix.Output[*int]                                                   `pulumi:"port"`
	RedisSettings pulumix.GPtrOutput[EndpointRedisSettings, EndpointRedisSettingsOutput] `pulumi:"redisSettings"`
	// Configuration block for Redshift settings. See below.
	RedshiftSettings pulumix.GPtrOutput[EndpointRedshiftSettings, EndpointRedshiftSettingsOutput] `pulumi:"redshiftSettings"`
	// (**Deprecated**, use the `dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
	S3Settings pulumix.GPtrOutput[EndpointS3Settings, EndpointS3SettingsOutput] `pulumi:"s3Settings"`
	// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in SecretsManagerSecret.
	SecretsManagerAccessRoleArn pulumix.Output[*string] `pulumi:"secretsManagerAccessRoleArn"`
	// Full ARN, partial ARN, or friendly name of the SecretsManagerSecret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
	SecretsManagerArn pulumix.Output[*string] `pulumi:"secretsManagerArn"`
	// Host name of the server.
	ServerName pulumix.Output[*string] `pulumi:"serverName"`
	// ARN used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumix.Output[*string] `pulumi:"serviceAccessRole"`
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
	SslMode pulumix.Output[string] `pulumi:"sslMode"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// User name to be used to login to the endpoint database.
	Username pulumix.Output[*string] `pulumi:"username"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointId'")
	}
	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("aws:dms/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("aws:dms/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	// ARN for the certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// Name of the endpoint database.
	DatabaseName *string `pulumi:"databaseName"`
	// Configuration block for OpenSearch settings. See below.
	ElasticsearchSettings *EndpointElasticsearchSettings `pulumi:"elasticsearchSettings"`
	// ARN for the endpoint.
	EndpointArn *string `pulumi:"endpointArn"`
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId *string `pulumi:"endpointId"`
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType *string `pulumi:"endpointType"`
	// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`, `s3`, `sqlserver`, `sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
	EngineName *string `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
	ExtraConnectionAttributes *string `pulumi:"extraConnectionAttributes"`
	// Configuration block for Kafka settings. See below.
	KafkaSettings *EndpointKafkaSettings `pulumi:"kafkaSettings"`
	// Configuration block for Kinesis settings. See below.
	KinesisSettings *EndpointKinesisSettings `pulumi:"kinesisSettings"`
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
	//
	// The following arguments are optional:
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Configuration block for MongoDB settings. See below.
	MongodbSettings *EndpointMongodbSettings `pulumi:"mongodbSettings"`
	// Password to be used to login to the endpoint database.
	Password *string `pulumi:"password"`
	// Port used by the endpoint database.
	Port          *int                   `pulumi:"port"`
	RedisSettings *EndpointRedisSettings `pulumi:"redisSettings"`
	// Configuration block for Redshift settings. See below.
	RedshiftSettings *EndpointRedshiftSettings `pulumi:"redshiftSettings"`
	// (**Deprecated**, use the `dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
	S3Settings *EndpointS3Settings `pulumi:"s3Settings"`
	// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in SecretsManagerSecret.
	SecretsManagerAccessRoleArn *string `pulumi:"secretsManagerAccessRoleArn"`
	// Full ARN, partial ARN, or friendly name of the SecretsManagerSecret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
	SecretsManagerArn *string `pulumi:"secretsManagerArn"`
	// Host name of the server.
	ServerName *string `pulumi:"serverName"`
	// ARN used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole *string `pulumi:"serviceAccessRole"`
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
	SslMode *string `pulumi:"sslMode"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// User name to be used to login to the endpoint database.
	Username *string `pulumi:"username"`
}

type EndpointState struct {
	// ARN for the certificate.
	CertificateArn pulumix.Input[*string]
	// Name of the endpoint database.
	DatabaseName pulumix.Input[*string]
	// Configuration block for OpenSearch settings. See below.
	ElasticsearchSettings pulumix.Input[*EndpointElasticsearchSettingsArgs]
	// ARN for the endpoint.
	EndpointArn pulumix.Input[*string]
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumix.Input[*string]
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType pulumix.Input[*string]
	// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`, `s3`, `sqlserver`, `sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
	EngineName pulumix.Input[*string]
	// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
	ExtraConnectionAttributes pulumix.Input[*string]
	// Configuration block for Kafka settings. See below.
	KafkaSettings pulumix.Input[*EndpointKafkaSettingsArgs]
	// Configuration block for Kinesis settings. See below.
	KinesisSettings pulumix.Input[*EndpointKinesisSettingsArgs]
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
	//
	// The following arguments are optional:
	KmsKeyArn pulumix.Input[*string]
	// Configuration block for MongoDB settings. See below.
	MongodbSettings pulumix.Input[*EndpointMongodbSettingsArgs]
	// Password to be used to login to the endpoint database.
	Password pulumix.Input[*string]
	// Port used by the endpoint database.
	Port          pulumix.Input[*int]
	RedisSettings pulumix.Input[*EndpointRedisSettingsArgs]
	// Configuration block for Redshift settings. See below.
	RedshiftSettings pulumix.Input[*EndpointRedshiftSettingsArgs]
	// (**Deprecated**, use the `dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
	S3Settings pulumix.Input[*EndpointS3SettingsArgs]
	// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in SecretsManagerSecret.
	SecretsManagerAccessRoleArn pulumix.Input[*string]
	// Full ARN, partial ARN, or friendly name of the SecretsManagerSecret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
	SecretsManagerArn pulumix.Input[*string]
	// Host name of the server.
	ServerName pulumix.Input[*string]
	// ARN used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumix.Input[*string]
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
	SslMode pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// User name to be used to login to the endpoint database.
	Username pulumix.Input[*string]
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// ARN for the certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// Name of the endpoint database.
	DatabaseName *string `pulumi:"databaseName"`
	// Configuration block for OpenSearch settings. See below.
	ElasticsearchSettings *EndpointElasticsearchSettings `pulumi:"elasticsearchSettings"`
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId string `pulumi:"endpointId"`
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType string `pulumi:"endpointType"`
	// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`, `s3`, `sqlserver`, `sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
	EngineName string `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
	ExtraConnectionAttributes *string `pulumi:"extraConnectionAttributes"`
	// Configuration block for Kafka settings. See below.
	KafkaSettings *EndpointKafkaSettings `pulumi:"kafkaSettings"`
	// Configuration block for Kinesis settings. See below.
	KinesisSettings *EndpointKinesisSettings `pulumi:"kinesisSettings"`
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
	//
	// The following arguments are optional:
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Configuration block for MongoDB settings. See below.
	MongodbSettings *EndpointMongodbSettings `pulumi:"mongodbSettings"`
	// Password to be used to login to the endpoint database.
	Password *string `pulumi:"password"`
	// Port used by the endpoint database.
	Port          *int                   `pulumi:"port"`
	RedisSettings *EndpointRedisSettings `pulumi:"redisSettings"`
	// Configuration block for Redshift settings. See below.
	RedshiftSettings *EndpointRedshiftSettings `pulumi:"redshiftSettings"`
	// (**Deprecated**, use the `dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
	S3Settings *EndpointS3Settings `pulumi:"s3Settings"`
	// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in SecretsManagerSecret.
	SecretsManagerAccessRoleArn *string `pulumi:"secretsManagerAccessRoleArn"`
	// Full ARN, partial ARN, or friendly name of the SecretsManagerSecret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
	SecretsManagerArn *string `pulumi:"secretsManagerArn"`
	// Host name of the server.
	ServerName *string `pulumi:"serverName"`
	// ARN used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole *string `pulumi:"serviceAccessRole"`
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
	SslMode *string `pulumi:"sslMode"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// User name to be used to login to the endpoint database.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// ARN for the certificate.
	CertificateArn pulumix.Input[*string]
	// Name of the endpoint database.
	DatabaseName pulumix.Input[*string]
	// Configuration block for OpenSearch settings. See below.
	ElasticsearchSettings pulumix.Input[*EndpointElasticsearchSettingsArgs]
	// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
	EndpointId pulumix.Input[string]
	// Type of endpoint. Valid values are `source`, `target`.
	EndpointType pulumix.Input[string]
	// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`, `s3`, `sqlserver`, `sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
	EngineName pulumix.Input[string]
	// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
	ExtraConnectionAttributes pulumix.Input[*string]
	// Configuration block for Kafka settings. See below.
	KafkaSettings pulumix.Input[*EndpointKafkaSettingsArgs]
	// Configuration block for Kinesis settings. See below.
	KinesisSettings pulumix.Input[*EndpointKinesisSettingsArgs]
	// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
	//
	// The following arguments are optional:
	KmsKeyArn pulumix.Input[*string]
	// Configuration block for MongoDB settings. See below.
	MongodbSettings pulumix.Input[*EndpointMongodbSettingsArgs]
	// Password to be used to login to the endpoint database.
	Password pulumix.Input[*string]
	// Port used by the endpoint database.
	Port          pulumix.Input[*int]
	RedisSettings pulumix.Input[*EndpointRedisSettingsArgs]
	// Configuration block for Redshift settings. See below.
	RedshiftSettings pulumix.Input[*EndpointRedshiftSettingsArgs]
	// (**Deprecated**, use the `dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
	S3Settings pulumix.Input[*EndpointS3SettingsArgs]
	// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in SecretsManagerSecret.
	SecretsManagerAccessRoleArn pulumix.Input[*string]
	// Full ARN, partial ARN, or friendly name of the SecretsManagerSecret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
	SecretsManagerArn pulumix.Input[*string]
	// Host name of the server.
	ServerName pulumix.Input[*string]
	// ARN used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumix.Input[*string]
	// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
	SslMode pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// User name to be used to login to the endpoint database.
	Username pulumix.Input[*string]
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) ToOutput(ctx context.Context) pulumix.Output[Endpoint] {
	return pulumix.Output[Endpoint]{
		OutputState: o.OutputState,
	}
}

// ARN for the certificate.
func (o EndpointOutput) CertificateArn() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.CertificateArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the endpoint database.
func (o EndpointOutput) DatabaseName() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.DatabaseName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration block for OpenSearch settings. See below.
func (o EndpointOutput) ElasticsearchSettings() pulumix.GPtrOutput[EndpointElasticsearchSettings, EndpointElasticsearchSettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointElasticsearchSettings, EndpointElasticsearchSettingsOutput] {
		return v.ElasticsearchSettings
	})
	unwrapped := pulumix.Flatten[*EndpointElasticsearchSettings, pulumix.GPtrOutput[EndpointElasticsearchSettings, EndpointElasticsearchSettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointElasticsearchSettings, EndpointElasticsearchSettingsOutput]{OutputState: unwrapped.OutputState}
}

// ARN for the endpoint.
func (o EndpointOutput) EndpointArn() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.EndpointArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Database endpoint identifier. Identifiers must contain from 1 to 255 alphanumeric characters or hyphens, begin with a letter, contain only ASCII letters, digits, and hyphens, not end with a hyphen, and not contain two consecutive hyphens.
func (o EndpointOutput) EndpointId() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.EndpointId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of endpoint. Valid values are `source`, `target`.
func (o EndpointOutput) EndpointType() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.EndpointType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of engine for the endpoint. Valid values are `aurora`, `aurora-postgresql`, `azuredb`, `azure-sql-managed-instance`, `babelfish`, `db2`, `db2-zos`, `docdb`, `dynamodb`, `elasticsearch`, `kafka`, `kinesis`, `mariadb`, `mongodb`, `mysql`, `opensearch`, `oracle`, `postgres`, `redshift`, `s3`, `sqlserver`, `sybase`. Please note that some of engine names are available only for `target` endpoint type (e.g. `redshift`).
func (o EndpointOutput) EngineName() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.EngineName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Additional attributes associated with the connection. For available attributes for a `source` Endpoint, see [Sources for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.html). For available attributes for a `target` Endpoint, see [Targets for data migration](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.html).
func (o EndpointOutput) ExtraConnectionAttributes() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.ExtraConnectionAttributes })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for Kafka settings. See below.
func (o EndpointOutput) KafkaSettings() pulumix.GPtrOutput[EndpointKafkaSettings, EndpointKafkaSettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointKafkaSettings, EndpointKafkaSettingsOutput] {
		return v.KafkaSettings
	})
	unwrapped := pulumix.Flatten[*EndpointKafkaSettings, pulumix.GPtrOutput[EndpointKafkaSettings, EndpointKafkaSettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointKafkaSettings, EndpointKafkaSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for Kinesis settings. See below.
func (o EndpointOutput) KinesisSettings() pulumix.GPtrOutput[EndpointKinesisSettings, EndpointKinesisSettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointKinesisSettings, EndpointKinesisSettingsOutput] {
		return v.KinesisSettings
	})
	unwrapped := pulumix.Flatten[*EndpointKinesisSettings, pulumix.GPtrOutput[EndpointKinesisSettings, EndpointKinesisSettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointKinesisSettings, EndpointKinesisSettingsOutput]{OutputState: unwrapped.OutputState}
}

// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter `s3_settings.server_side_encryption_kms_key_id`. When `engineName` is `redshift`, `kmsKeyArn` is the KMS Key for the Redshift target and the parameter `redshift_settings.server_side_encryption_kms_key_id` encrypts the S3 intermediate storage.
//
// The following arguments are optional:
func (o EndpointOutput) KmsKeyArn() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.KmsKeyArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for MongoDB settings. See below.
func (o EndpointOutput) MongodbSettings() pulumix.GPtrOutput[EndpointMongodbSettings, EndpointMongodbSettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointMongodbSettings, EndpointMongodbSettingsOutput] {
		return v.MongodbSettings
	})
	unwrapped := pulumix.Flatten[*EndpointMongodbSettings, pulumix.GPtrOutput[EndpointMongodbSettings, EndpointMongodbSettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointMongodbSettings, EndpointMongodbSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Password to be used to login to the endpoint database.
func (o EndpointOutput) Password() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.Password })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Port used by the endpoint database.
func (o EndpointOutput) Port() pulumix.Output[*int] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*int] { return v.Port })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o EndpointOutput) RedisSettings() pulumix.GPtrOutput[EndpointRedisSettings, EndpointRedisSettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointRedisSettings, EndpointRedisSettingsOutput] {
		return v.RedisSettings
	})
	unwrapped := pulumix.Flatten[*EndpointRedisSettings, pulumix.GPtrOutput[EndpointRedisSettings, EndpointRedisSettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointRedisSettings, EndpointRedisSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for Redshift settings. See below.
func (o EndpointOutput) RedshiftSettings() pulumix.GPtrOutput[EndpointRedshiftSettings, EndpointRedshiftSettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointRedshiftSettings, EndpointRedshiftSettingsOutput] {
		return v.RedshiftSettings
	})
	unwrapped := pulumix.Flatten[*EndpointRedshiftSettings, pulumix.GPtrOutput[EndpointRedshiftSettings, EndpointRedshiftSettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointRedshiftSettings, EndpointRedshiftSettingsOutput]{OutputState: unwrapped.OutputState}
}

// (**Deprecated**, use the `dms.S3Endpoint` resource instead) Configuration block for S3 settings. See below.
func (o EndpointOutput) S3Settings() pulumix.GPtrOutput[EndpointS3Settings, EndpointS3SettingsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointS3Settings, EndpointS3SettingsOutput] { return v.S3Settings })
	unwrapped := pulumix.Flatten[*EndpointS3Settings, pulumix.GPtrOutput[EndpointS3Settings, EndpointS3SettingsOutput]](value)
	return pulumix.GPtrOutput[EndpointS3Settings, EndpointS3SettingsOutput]{OutputState: unwrapped.OutputState}
}

// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in SecretsManagerSecret.
func (o EndpointOutput) SecretsManagerAccessRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.SecretsManagerAccessRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Full ARN, partial ARN, or friendly name of the SecretsManagerSecret that contains the endpoint connection details. Supported only when `engineName` is `aurora`, `aurora-postgresql`, `mariadb`, `mongodb`, `mysql`, `oracle`, `postgres`, `redshift`, or `sqlserver`.
func (o EndpointOutput) SecretsManagerArn() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.SecretsManagerArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Host name of the server.
func (o EndpointOutput) ServerName() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.ServerName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN used by the service access IAM role for dynamodb endpoints.
func (o EndpointOutput) ServiceAccessRole() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.ServiceAccessRole })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// SSL mode to use for the connection. Valid values are `none`, `require`, `verify-ca`, `verify-full`
func (o EndpointOutput) SslMode() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.SslMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EndpointOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o EndpointOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// User name to be used to login to the endpoint database.
func (o EndpointOutput) Username() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.Username })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(EndpointOutput{})
}
