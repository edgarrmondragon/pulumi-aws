// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS VPC Lattice Service Network or Service Access log subscription.
type AccessLogSubscription struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of the access log subscription.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the log destination.
	DestinationArn pulumix.Output[string] `pulumi:"destinationArn"`
	// Amazon Resource Name (ARN) of the service network or service.
	ResourceArn pulumix.Output[string] `pulumi:"resourceArn"`
	// The ID or Amazon Resource Identifier (ARN) of the service network or service. You must use the ARN if the resources specified in the operation are in different accounts.
	ResourceIdentifier pulumix.Output[string]    `pulumi:"resourceIdentifier"`
	Tags               pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll            pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewAccessLogSubscription registers a new resource with the given unique name, arguments, and options.
func NewAccessLogSubscription(ctx *pulumi.Context,
	name string, args *AccessLogSubscriptionArgs, opts ...pulumi.ResourceOption) (*AccessLogSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationArn'")
	}
	if args.ResourceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ResourceIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessLogSubscription
	err := ctx.RegisterResource("aws:vpclattice/accessLogSubscription:AccessLogSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessLogSubscription gets an existing AccessLogSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessLogSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessLogSubscriptionState, opts ...pulumi.ResourceOption) (*AccessLogSubscription, error) {
	var resource AccessLogSubscription
	err := ctx.ReadResource("aws:vpclattice/accessLogSubscription:AccessLogSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessLogSubscription resources.
type accessLogSubscriptionState struct {
	// Amazon Resource Name (ARN) of the access log subscription.
	Arn *string `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the log destination.
	DestinationArn *string `pulumi:"destinationArn"`
	// Amazon Resource Name (ARN) of the service network or service.
	ResourceArn *string `pulumi:"resourceArn"`
	// The ID or Amazon Resource Identifier (ARN) of the service network or service. You must use the ARN if the resources specified in the operation are in different accounts.
	ResourceIdentifier *string           `pulumi:"resourceIdentifier"`
	Tags               map[string]string `pulumi:"tags"`
	TagsAll            map[string]string `pulumi:"tagsAll"`
}

type AccessLogSubscriptionState struct {
	// Amazon Resource Name (ARN) of the access log subscription.
	Arn pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the log destination.
	DestinationArn pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the service network or service.
	ResourceArn pulumix.Input[*string]
	// The ID or Amazon Resource Identifier (ARN) of the service network or service. You must use the ARN if the resources specified in the operation are in different accounts.
	ResourceIdentifier pulumix.Input[*string]
	Tags               pulumix.Input[map[string]string]
	TagsAll            pulumix.Input[map[string]string]
}

func (AccessLogSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessLogSubscriptionState)(nil)).Elem()
}

type accessLogSubscriptionArgs struct {
	// Amazon Resource Name (ARN) of the log destination.
	DestinationArn string `pulumi:"destinationArn"`
	// The ID or Amazon Resource Identifier (ARN) of the service network or service. You must use the ARN if the resources specified in the operation are in different accounts.
	ResourceIdentifier string            `pulumi:"resourceIdentifier"`
	Tags               map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AccessLogSubscription resource.
type AccessLogSubscriptionArgs struct {
	// Amazon Resource Name (ARN) of the log destination.
	DestinationArn pulumix.Input[string]
	// The ID or Amazon Resource Identifier (ARN) of the service network or service. You must use the ARN if the resources specified in the operation are in different accounts.
	ResourceIdentifier pulumix.Input[string]
	Tags               pulumix.Input[map[string]string]
}

func (AccessLogSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessLogSubscriptionArgs)(nil)).Elem()
}

type AccessLogSubscriptionOutput struct{ *pulumi.OutputState }

func (AccessLogSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessLogSubscription)(nil)).Elem()
}

func (o AccessLogSubscriptionOutput) ToAccessLogSubscriptionOutput() AccessLogSubscriptionOutput {
	return o
}

func (o AccessLogSubscriptionOutput) ToAccessLogSubscriptionOutputWithContext(ctx context.Context) AccessLogSubscriptionOutput {
	return o
}

func (o AccessLogSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[AccessLogSubscription] {
	return pulumix.Output[AccessLogSubscription]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of the access log subscription.
func (o AccessLogSubscriptionOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[AccessLogSubscription](o, func(v AccessLogSubscription) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the log destination.
func (o AccessLogSubscriptionOutput) DestinationArn() pulumix.Output[string] {
	value := pulumix.Apply[AccessLogSubscription](o, func(v AccessLogSubscription) pulumix.Output[string] { return v.DestinationArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the service network or service.
func (o AccessLogSubscriptionOutput) ResourceArn() pulumix.Output[string] {
	value := pulumix.Apply[AccessLogSubscription](o, func(v AccessLogSubscription) pulumix.Output[string] { return v.ResourceArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID or Amazon Resource Identifier (ARN) of the service network or service. You must use the ARN if the resources specified in the operation are in different accounts.
func (o AccessLogSubscriptionOutput) ResourceIdentifier() pulumix.Output[string] {
	value := pulumix.Apply[AccessLogSubscription](o, func(v AccessLogSubscription) pulumix.Output[string] { return v.ResourceIdentifier })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o AccessLogSubscriptionOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[AccessLogSubscription](o, func(v AccessLogSubscription) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o AccessLogSubscriptionOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[AccessLogSubscription](o, func(v AccessLogSubscription) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(AccessLogSubscriptionOutput{})
}
