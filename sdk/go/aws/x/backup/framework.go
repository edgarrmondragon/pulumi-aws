// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup Framework resource.
//
// > **Note:** For the Deployment Status of the Framework to be successful, please turn on resource tracking to enable AWS Config recording to track configuration changes of your backup resources. This can be done from the AWS Console.
type Framework struct {
	pulumi.CustomResourceState

	// The ARN of the backup framework.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	Controls pulumix.GArrayOutput[FrameworkControl, FrameworkControlOutput] `pulumi:"controls"`
	// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime pulumix.Output[string] `pulumi:"creationTime"`
	// The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.
	DeploymentStatus pulumix.Output[string] `pulumi:"deploymentStatus"`
	// The description of the framework with a maximum of 1,024 characters
	Description pulumix.Output[*string] `pulumi:"description"`
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name pulumix.Output[string] `pulumi:"name"`
	// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
	Status pulumix.Output[string] `pulumi:"status"`
	// Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewFramework registers a new resource with the given unique name, arguments, and options.
func NewFramework(ctx *pulumi.Context,
	name string, args *FrameworkArgs, opts ...pulumi.ResourceOption) (*Framework, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Controls == nil {
		return nil, errors.New("invalid value for required argument 'Controls'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Framework
	err := ctx.RegisterResource("aws:backup/framework:Framework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFramework gets an existing Framework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkState, opts ...pulumi.ResourceOption) (*Framework, error) {
	var resource Framework
	err := ctx.ReadResource("aws:backup/framework:Framework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Framework resources.
type frameworkState struct {
	// The ARN of the backup framework.
	Arn *string `pulumi:"arn"`
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	Controls []FrameworkControl `pulumi:"controls"`
	// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime *string `pulumi:"creationTime"`
	// The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.
	DeploymentStatus *string `pulumi:"deploymentStatus"`
	// The description of the framework with a maximum of 1,024 characters
	Description *string `pulumi:"description"`
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name *string `pulumi:"name"`
	// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
	Status *string `pulumi:"status"`
	// Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type FrameworkState struct {
	// The ARN of the backup framework.
	Arn pulumix.Input[*string]
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	Controls pulumix.Input[[]*FrameworkControlArgs]
	// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
	CreationTime pulumix.Input[*string]
	// The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.
	DeploymentStatus pulumix.Input[*string]
	// The description of the framework with a maximum of 1,024 characters
	Description pulumix.Input[*string]
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name pulumix.Input[*string]
	// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
	Status pulumix.Input[*string]
	// Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (FrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkState)(nil)).Elem()
}

type frameworkArgs struct {
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	Controls []FrameworkControl `pulumi:"controls"`
	// The description of the framework with a maximum of 1,024 characters
	Description *string `pulumi:"description"`
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name *string `pulumi:"name"`
	// Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Framework resource.
type FrameworkArgs struct {
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	Controls pulumix.Input[[]*FrameworkControlArgs]
	// The description of the framework with a maximum of 1,024 characters
	Description pulumix.Input[*string]
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	Name pulumix.Input[*string]
	// Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (FrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkArgs)(nil)).Elem()
}

type FrameworkOutput struct{ *pulumi.OutputState }

func (FrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Framework)(nil)).Elem()
}

func (o FrameworkOutput) ToFrameworkOutput() FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToOutput(ctx context.Context) pulumix.Output[Framework] {
	return pulumix.Output[Framework]{
		OutputState: o.OutputState,
	}
}

// The ARN of the backup framework.
func (o FrameworkOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
func (o FrameworkOutput) Controls() pulumix.GArrayOutput[FrameworkControl, FrameworkControlOutput] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.GArrayOutput[FrameworkControl, FrameworkControlOutput] { return v.Controls })
	unwrapped := pulumix.Flatten[[]FrameworkControl, pulumix.GArrayOutput[FrameworkControl, FrameworkControlOutput]](value)
	return pulumix.GArrayOutput[FrameworkControl, FrameworkControlOutput]{OutputState: unwrapped.OutputState}
}

// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
func (o FrameworkOutput) CreationTime() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.CreationTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.
func (o FrameworkOutput) DeploymentStatus() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.DeploymentStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the framework with a maximum of 1,024 characters
func (o FrameworkOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
func (o FrameworkOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)
func (o FrameworkOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Metadata that you can assign to help organize the frameworks you create. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FrameworkOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o FrameworkOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Framework](o, func(v Framework) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FrameworkOutput{})
}
