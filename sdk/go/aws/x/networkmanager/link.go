// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a link for a site.
type Link struct {
	pulumi.CustomResourceState

	// Link Amazon Resource Name (ARN).
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth pulumix.GPtrOutput[LinkBandwidth, LinkBandwidthOutput] `pulumi:"bandwidth"`
	// A description of the link.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId pulumix.Output[string] `pulumi:"globalNetworkId"`
	// The provider of the link.
	ProviderName pulumix.Output[*string] `pulumi:"providerName"`
	// The ID of the site.
	SiteId pulumix.Output[string] `pulumi:"siteId"`
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of the link.
	Type pulumix.Output[*string] `pulumi:"type"`
}

// NewLink registers a new resource with the given unique name, arguments, and options.
func NewLink(ctx *pulumi.Context,
	name string, args *LinkArgs, opts ...pulumi.ResourceOption) (*Link, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Link
	err := ctx.RegisterResource("aws:networkmanager/link:Link", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLink gets an existing Link resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkState, opts ...pulumi.ResourceOption) (*Link, error) {
	var resource Link
	err := ctx.ReadResource("aws:networkmanager/link:Link", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Link resources.
type linkState struct {
	// Link Amazon Resource Name (ARN).
	Arn *string `pulumi:"arn"`
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth *LinkBandwidth `pulumi:"bandwidth"`
	// A description of the link.
	Description *string `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId *string `pulumi:"globalNetworkId"`
	// The provider of the link.
	ProviderName *string `pulumi:"providerName"`
	// The ID of the site.
	SiteId *string `pulumi:"siteId"`
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of the link.
	Type *string `pulumi:"type"`
}

type LinkState struct {
	// Link Amazon Resource Name (ARN).
	Arn pulumix.Input[*string]
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth pulumix.Input[*LinkBandwidthArgs]
	// A description of the link.
	Description pulumix.Input[*string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[*string]
	// The provider of the link.
	ProviderName pulumix.Input[*string]
	// The ID of the site.
	SiteId pulumix.Input[*string]
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of the link.
	Type pulumix.Input[*string]
}

func (LinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkState)(nil)).Elem()
}

type linkArgs struct {
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth LinkBandwidth `pulumi:"bandwidth"`
	// A description of the link.
	Description *string `pulumi:"description"`
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The provider of the link.
	ProviderName *string `pulumi:"providerName"`
	// The ID of the site.
	SiteId string `pulumi:"siteId"`
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of the link.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Link resource.
type LinkArgs struct {
	// The upload speed and download speed in Mbps. Documented below.
	Bandwidth pulumix.Input[*LinkBandwidthArgs]
	// A description of the link.
	Description pulumix.Input[*string]
	// The ID of the global network.
	GlobalNetworkId pulumix.Input[string]
	// The provider of the link.
	ProviderName pulumix.Input[*string]
	// The ID of the site.
	SiteId pulumix.Input[string]
	// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of the link.
	Type pulumix.Input[*string]
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkArgs)(nil)).Elem()
}

type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) ToOutput(ctx context.Context) pulumix.Output[Link] {
	return pulumix.Output[Link]{
		OutputState: o.OutputState,
	}
}

// Link Amazon Resource Name (ARN).
func (o LinkOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The upload speed and download speed in Mbps. Documented below.
func (o LinkOutput) Bandwidth() pulumix.GPtrOutput[LinkBandwidth, LinkBandwidthOutput] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.GPtrOutput[LinkBandwidth, LinkBandwidthOutput] { return v.Bandwidth })
	unwrapped := pulumix.Flatten[*LinkBandwidth, pulumix.GPtrOutput[LinkBandwidth, LinkBandwidthOutput]](value)
	return pulumix.GPtrOutput[LinkBandwidth, LinkBandwidthOutput]{OutputState: unwrapped.OutputState}
}

// A description of the link.
func (o LinkOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the global network.
func (o LinkOutput) GlobalNetworkId() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.GlobalNetworkId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The provider of the link.
func (o LinkOutput) ProviderName() pulumix.Output[*string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[*string] { return v.ProviderName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the site.
func (o LinkOutput) SiteId() pulumix.Output[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[string] { return v.SiteId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value tags for the link. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LinkOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LinkOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of the link.
func (o LinkOutput) Type() pulumix.Output[*string] {
	value := pulumix.Apply[Link](o, func(v Link) pulumix.Output[*string] { return v.Type })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(LinkOutput{})
}
