// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ACM certificate resource allows requesting and management of certificates
// from the Amazon Certificate Manager.
//
// ACM certificates can be created in three ways:
// Amazon-issued, where AWS provides the certificate authority and automatically manages renewal;
// imported certificates, issued by another certificate authority;
// and private certificates, issued using an ACM Private Certificate Authority.
//
// ## Amazon-Issued Certificates
//
// For Amazon-issued certificates, this resource deals with requesting certificates and managing their attributes and life-cycle.
// This resource does not deal with validation of a certificate but can provide inputs
// for other resources implementing the validation.
// It does not wait for a certificate to be issued.
// Use a `acm.CertificateValidation` resource for this.
//
// Most commonly, this resource is used together with `route53.Record` and
// `acm.CertificateValidation` to request a DNS validated certificate,
// deploy the required validation records and wait for validation to complete.
//
// Domain validation through email is also supported but should be avoided as it requires a manual step outside of this provider.
//
// ## Certificates Imported from Other Certificate Authority
//
// Imported certificates can be used to make certificates created with an external certificate authority available for AWS services.
//
// As they are not managed by AWS, imported certificates are not eligible for automatic renewal.
// New certificate materials can be supplied to an existing imported certificate to update it in place.
//
// ## Private Certificates
//
// Private certificates are issued by an ACM Private Cerificate Authority, which can be created using the resource type `acmpca.CertificateAuthority`.
//
// Private certificates created using this resource are eligible for managed renewal if they have been exported or associated with another AWS service.
// See [managed renewal documentation](https://docs.aws.amazon.com/acm/latest/userguide/managed-renewal.html) for more information.
// By default, a certificate is valid for 395 days and the managed renewal process will start 60 days before expiration.
// To renew the certificate earlier than 60 days before expiration, configure `earlyRenewalDuration`.
type Certificate struct {
	pulumi.CustomResourceState

	// ARN of the certificate
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ARN of an ACM PCA
	CertificateAuthorityArn pulumix.Output[*string] `pulumi:"certificateAuthorityArn"`
	// Certificate's PEM-formatted public key
	CertificateBody pulumix.Output[*string] `pulumi:"certificateBody"`
	// Certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumix.Output[*string] `pulumi:"certificateChain"`
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// Set of domain validation objects which can be used to complete certificate validation.
	// Can have more than one element, e.g., if SANs are defined.
	// Only set if `DNS`-validation was used.
	DomainValidationOptions pulumix.GArrayOutput[CertificateDomainValidationOption, CertificateDomainValidationOptionOutput] `pulumi:"domainValidationOptions"`
	// Amount of time to start automatic renewal process before expiration.
	// Has no effect if less than 60 days.
	// Represented by either
	// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
	// or a string such as `2160h`.
	EarlyRenewalDuration pulumix.Output[*string] `pulumi:"earlyRenewalDuration"`
	// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
	KeyAlgorithm pulumix.Output[string] `pulumi:"keyAlgorithm"`
	// Expiration date and time of the certificate.
	NotAfter pulumix.Output[string] `pulumi:"notAfter"`
	// Start of the validity period of the certificate.
	NotBefore pulumix.Output[string] `pulumi:"notBefore"`
	// Configuration block used to set certificate options. Detailed below.
	Options pulumix.GPtrOutput[CertificateOptions, CertificateOptionsOutput] `pulumi:"options"`
	// `true` if a Private certificate eligible for managed renewal is within the `earlyRenewalDuration` period.
	PendingRenewal pulumix.Output[bool] `pulumi:"pendingRenewal"`
	// Certificate's PEM-formatted private key
	PrivateKey pulumix.Output[*string] `pulumi:"privateKey"`
	// Whether the certificate is eligible for managed renewal.
	RenewalEligibility pulumix.Output[string] `pulumi:"renewalEligibility"`
	// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
	RenewalSummaries pulumix.GArrayOutput[CertificateRenewalSummary, CertificateRenewalSummaryOutput] `pulumi:"renewalSummaries"`
	// Status of the certificate.
	Status pulumix.Output[string] `pulumi:"status"`
	// Set of domains that should be SANs in the issued certificate.
	// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
	SubjectAlternativeNames pulumix.ArrayOutput[string] `pulumi:"subjectAlternativeNames"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Source of the certificate.
	Type pulumix.Output[string] `pulumi:"type"`
	// List of addresses that received a validation email. Only set if `EMAIL` validation was used.
	ValidationEmails pulumix.ArrayOutput[string] `pulumi:"validationEmails"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
	ValidationMethod pulumix.Output[string] `pulumi:"validationMethod"`
	// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
	// * Importing an existing certificate
	ValidationOptions pulumix.GArrayOutput[CertificateValidationOption, CertificateValidationOptionOutput] `pulumi:"validationOptions"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		args = &CertificateArgs{}
	}

	if args.PrivateKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.PrivateKey.ToOutput(ctx.Context()).Untyped())
		args.PrivateKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("aws:acm/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws:acm/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// ARN of the certificate
	Arn *string `pulumi:"arn"`
	// ARN of an ACM PCA
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// Certificate's PEM-formatted public key
	CertificateBody *string `pulumi:"certificateBody"`
	// Certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain *string `pulumi:"certificateChain"`
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName *string `pulumi:"domainName"`
	// Set of domain validation objects which can be used to complete certificate validation.
	// Can have more than one element, e.g., if SANs are defined.
	// Only set if `DNS`-validation was used.
	DomainValidationOptions []CertificateDomainValidationOption `pulumi:"domainValidationOptions"`
	// Amount of time to start automatic renewal process before expiration.
	// Has no effect if less than 60 days.
	// Represented by either
	// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
	// or a string such as `2160h`.
	EarlyRenewalDuration *string `pulumi:"earlyRenewalDuration"`
	// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// Expiration date and time of the certificate.
	NotAfter *string `pulumi:"notAfter"`
	// Start of the validity period of the certificate.
	NotBefore *string `pulumi:"notBefore"`
	// Configuration block used to set certificate options. Detailed below.
	Options *CertificateOptions `pulumi:"options"`
	// `true` if a Private certificate eligible for managed renewal is within the `earlyRenewalDuration` period.
	PendingRenewal *bool `pulumi:"pendingRenewal"`
	// Certificate's PEM-formatted private key
	PrivateKey *string `pulumi:"privateKey"`
	// Whether the certificate is eligible for managed renewal.
	RenewalEligibility *string `pulumi:"renewalEligibility"`
	// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
	RenewalSummaries []CertificateRenewalSummary `pulumi:"renewalSummaries"`
	// Status of the certificate.
	Status *string `pulumi:"status"`
	// Set of domains that should be SANs in the issued certificate.
	// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Source of the certificate.
	Type *string `pulumi:"type"`
	// List of addresses that received a validation email. Only set if `EMAIL` validation was used.
	ValidationEmails []string `pulumi:"validationEmails"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
	ValidationMethod *string `pulumi:"validationMethod"`
	// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
	// * Importing an existing certificate
	ValidationOptions []CertificateValidationOption `pulumi:"validationOptions"`
}

type CertificateState struct {
	// ARN of the certificate
	Arn pulumix.Input[*string]
	// ARN of an ACM PCA
	CertificateAuthorityArn pulumix.Input[*string]
	// Certificate's PEM-formatted public key
	CertificateBody pulumix.Input[*string]
	// Certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumix.Input[*string]
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumix.Input[*string]
	// Set of domain validation objects which can be used to complete certificate validation.
	// Can have more than one element, e.g., if SANs are defined.
	// Only set if `DNS`-validation was used.
	DomainValidationOptions pulumix.Input[[]*CertificateDomainValidationOptionArgs]
	// Amount of time to start automatic renewal process before expiration.
	// Has no effect if less than 60 days.
	// Represented by either
	// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
	// or a string such as `2160h`.
	EarlyRenewalDuration pulumix.Input[*string]
	// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
	KeyAlgorithm pulumix.Input[*string]
	// Expiration date and time of the certificate.
	NotAfter pulumix.Input[*string]
	// Start of the validity period of the certificate.
	NotBefore pulumix.Input[*string]
	// Configuration block used to set certificate options. Detailed below.
	Options pulumix.Input[*CertificateOptionsArgs]
	// `true` if a Private certificate eligible for managed renewal is within the `earlyRenewalDuration` period.
	PendingRenewal pulumix.Input[*bool]
	// Certificate's PEM-formatted private key
	PrivateKey pulumix.Input[*string]
	// Whether the certificate is eligible for managed renewal.
	RenewalEligibility pulumix.Input[*string]
	// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
	RenewalSummaries pulumix.Input[[]*CertificateRenewalSummaryArgs]
	// Status of the certificate.
	Status pulumix.Input[*string]
	// Set of domains that should be SANs in the issued certificate.
	// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
	SubjectAlternativeNames pulumix.Input[[]string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Source of the certificate.
	Type pulumix.Input[*string]
	// List of addresses that received a validation email. Only set if `EMAIL` validation was used.
	ValidationEmails pulumix.Input[[]string]
	// Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
	ValidationMethod pulumix.Input[*string]
	// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
	// * Importing an existing certificate
	ValidationOptions pulumix.Input[[]*CertificateValidationOptionArgs]
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// ARN of an ACM PCA
	CertificateAuthorityArn *string `pulumi:"certificateAuthorityArn"`
	// Certificate's PEM-formatted public key
	CertificateBody *string `pulumi:"certificateBody"`
	// Certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain *string `pulumi:"certificateChain"`
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName *string `pulumi:"domainName"`
	// Amount of time to start automatic renewal process before expiration.
	// Has no effect if less than 60 days.
	// Represented by either
	// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
	// or a string such as `2160h`.
	EarlyRenewalDuration *string `pulumi:"earlyRenewalDuration"`
	// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// Configuration block used to set certificate options. Detailed below.
	Options *CertificateOptions `pulumi:"options"`
	// Certificate's PEM-formatted private key
	PrivateKey *string `pulumi:"privateKey"`
	// Set of domains that should be SANs in the issued certificate.
	// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
	ValidationMethod *string `pulumi:"validationMethod"`
	// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
	// * Importing an existing certificate
	ValidationOptions []CertificateValidationOption `pulumi:"validationOptions"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// ARN of an ACM PCA
	CertificateAuthorityArn pulumix.Input[*string]
	// Certificate's PEM-formatted public key
	CertificateBody pulumix.Input[*string]
	// Certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumix.Input[*string]
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumix.Input[*string]
	// Amount of time to start automatic renewal process before expiration.
	// Has no effect if less than 60 days.
	// Represented by either
	// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
	// or a string such as `2160h`.
	EarlyRenewalDuration pulumix.Input[*string]
	// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
	KeyAlgorithm pulumix.Input[*string]
	// Configuration block used to set certificate options. Detailed below.
	Options pulumix.Input[*CertificateOptionsArgs]
	// Certificate's PEM-formatted private key
	PrivateKey pulumix.Input[*string]
	// Set of domains that should be SANs in the issued certificate.
	// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
	SubjectAlternativeNames pulumix.Input[[]string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
	ValidationMethod pulumix.Input[*string]
	// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
	// * Importing an existing certificate
	ValidationOptions pulumix.Input[[]*CertificateValidationOptionArgs]
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToOutput(ctx context.Context) pulumix.Output[Certificate] {
	return pulumix.Output[Certificate]{
		OutputState: o.OutputState,
	}
}

// ARN of the certificate
func (o CertificateOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of an ACM PCA
func (o CertificateOutput) CertificateAuthorityArn() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CertificateAuthorityArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Certificate's PEM-formatted public key
func (o CertificateOutput) CertificateBody() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CertificateBody })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Certificate's PEM-formatted chain
// * Creating a private CA issued certificate
func (o CertificateOutput) CertificateChain() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.CertificateChain })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Fully qualified domain name (FQDN) in the certificate.
func (o CertificateOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of domain validation objects which can be used to complete certificate validation.
// Can have more than one element, e.g., if SANs are defined.
// Only set if `DNS`-validation was used.
func (o CertificateOutput) DomainValidationOptions() pulumix.GArrayOutput[CertificateDomainValidationOption, CertificateDomainValidationOptionOutput] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.GArrayOutput[CertificateDomainValidationOption, CertificateDomainValidationOptionOutput] {
		return v.DomainValidationOptions
	})
	unwrapped := pulumix.Flatten[[]CertificateDomainValidationOption, pulumix.GArrayOutput[CertificateDomainValidationOption, CertificateDomainValidationOptionOutput]](value)
	return pulumix.GArrayOutput[CertificateDomainValidationOption, CertificateDomainValidationOptionOutput]{OutputState: unwrapped.OutputState}
}

// Amount of time to start automatic renewal process before expiration.
// Has no effect if less than 60 days.
// Represented by either
// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
// or a string such as `2160h`.
func (o CertificateOutput) EarlyRenewalDuration() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.EarlyRenewalDuration })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
func (o CertificateOutput) KeyAlgorithm() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.KeyAlgorithm })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Expiration date and time of the certificate.
func (o CertificateOutput) NotAfter() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.NotAfter })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Start of the validity period of the certificate.
func (o CertificateOutput) NotBefore() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.NotBefore })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block used to set certificate options. Detailed below.
func (o CertificateOutput) Options() pulumix.GPtrOutput[CertificateOptions, CertificateOptionsOutput] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.GPtrOutput[CertificateOptions, CertificateOptionsOutput] { return v.Options })
	unwrapped := pulumix.Flatten[*CertificateOptions, pulumix.GPtrOutput[CertificateOptions, CertificateOptionsOutput]](value)
	return pulumix.GPtrOutput[CertificateOptions, CertificateOptionsOutput]{OutputState: unwrapped.OutputState}
}

// `true` if a Private certificate eligible for managed renewal is within the `earlyRenewalDuration` period.
func (o CertificateOutput) PendingRenewal() pulumix.Output[bool] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[bool] { return v.PendingRenewal })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Certificate's PEM-formatted private key
func (o CertificateOutput) PrivateKey() pulumix.Output[*string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[*string] { return v.PrivateKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether the certificate is eligible for managed renewal.
func (o CertificateOutput) RenewalEligibility() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.RenewalEligibility })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
func (o CertificateOutput) RenewalSummaries() pulumix.GArrayOutput[CertificateRenewalSummary, CertificateRenewalSummaryOutput] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.GArrayOutput[CertificateRenewalSummary, CertificateRenewalSummaryOutput] {
		return v.RenewalSummaries
	})
	unwrapped := pulumix.Flatten[[]CertificateRenewalSummary, pulumix.GArrayOutput[CertificateRenewalSummary, CertificateRenewalSummaryOutput]](value)
	return pulumix.GArrayOutput[CertificateRenewalSummary, CertificateRenewalSummaryOutput]{OutputState: unwrapped.OutputState}
}

// Status of the certificate.
func (o CertificateOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of domains that should be SANs in the issued certificate.
// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
func (o CertificateOutput) SubjectAlternativeNames() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.ArrayOutput[string] { return v.SubjectAlternativeNames })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o CertificateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o CertificateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Source of the certificate.
func (o CertificateOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of addresses that received a validation email. Only set if `EMAIL` validation was used.
func (o CertificateOutput) ValidationEmails() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.ArrayOutput[string] { return v.ValidationEmails })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Which method to use for validation. `DNS` or `EMAIL` are valid. This parameter must not be set for certificates that were imported into ACM and then into Pulumi.
func (o CertificateOutput) ValidationMethod() pulumix.Output[string] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.Output[string] { return v.ValidationMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
// * Importing an existing certificate
func (o CertificateOutput) ValidationOptions() pulumix.GArrayOutput[CertificateValidationOption, CertificateValidationOptionOutput] {
	value := pulumix.Apply[Certificate](o, func(v Certificate) pulumix.GArrayOutput[CertificateValidationOption, CertificateValidationOptionOutput] {
		return v.ValidationOptions
	})
	unwrapped := pulumix.Flatten[[]CertificateValidationOption, pulumix.GArrayOutput[CertificateValidationOption, CertificateValidationOptionOutput]](value)
	return pulumix.GArrayOutput[CertificateValidationOption, CertificateValidationOptionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
