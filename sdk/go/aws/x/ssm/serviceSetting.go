// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This setting defines how a user interacts with or uses a service or a feature of a service.
type ServiceSetting struct {
	pulumi.CustomResourceState

	// ARN of the service setting.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// ID of the service setting.
	SettingId pulumix.Output[string] `pulumi:"settingId"`
	// Value of the service setting.
	SettingValue pulumix.Output[string] `pulumi:"settingValue"`
	// Status of the service setting. Value can be `Default`, `Customized` or `PendingUpdate`.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewServiceSetting registers a new resource with the given unique name, arguments, and options.
func NewServiceSetting(ctx *pulumi.Context,
	name string, args *ServiceSettingArgs, opts ...pulumi.ResourceOption) (*ServiceSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SettingId == nil {
		return nil, errors.New("invalid value for required argument 'SettingId'")
	}
	if args.SettingValue == nil {
		return nil, errors.New("invalid value for required argument 'SettingValue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceSetting
	err := ctx.RegisterResource("aws:ssm/serviceSetting:ServiceSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceSetting gets an existing ServiceSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceSettingState, opts ...pulumi.ResourceOption) (*ServiceSetting, error) {
	var resource ServiceSetting
	err := ctx.ReadResource("aws:ssm/serviceSetting:ServiceSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceSetting resources.
type serviceSettingState struct {
	// ARN of the service setting.
	Arn *string `pulumi:"arn"`
	// ID of the service setting.
	SettingId *string `pulumi:"settingId"`
	// Value of the service setting.
	SettingValue *string `pulumi:"settingValue"`
	// Status of the service setting. Value can be `Default`, `Customized` or `PendingUpdate`.
	Status *string `pulumi:"status"`
}

type ServiceSettingState struct {
	// ARN of the service setting.
	Arn pulumix.Input[*string]
	// ID of the service setting.
	SettingId pulumix.Input[*string]
	// Value of the service setting.
	SettingValue pulumix.Input[*string]
	// Status of the service setting. Value can be `Default`, `Customized` or `PendingUpdate`.
	Status pulumix.Input[*string]
}

func (ServiceSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSettingState)(nil)).Elem()
}

type serviceSettingArgs struct {
	// ID of the service setting.
	SettingId string `pulumi:"settingId"`
	// Value of the service setting.
	SettingValue string `pulumi:"settingValue"`
}

// The set of arguments for constructing a ServiceSetting resource.
type ServiceSettingArgs struct {
	// ID of the service setting.
	SettingId pulumix.Input[string]
	// Value of the service setting.
	SettingValue pulumix.Input[string]
}

func (ServiceSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceSettingArgs)(nil)).Elem()
}

type ServiceSettingOutput struct{ *pulumi.OutputState }

func (ServiceSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSetting)(nil)).Elem()
}

func (o ServiceSettingOutput) ToServiceSettingOutput() ServiceSettingOutput {
	return o
}

func (o ServiceSettingOutput) ToServiceSettingOutputWithContext(ctx context.Context) ServiceSettingOutput {
	return o
}

func (o ServiceSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceSetting] {
	return pulumix.Output[ServiceSetting]{
		OutputState: o.OutputState,
	}
}

// ARN of the service setting.
func (o ServiceSettingOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSetting](o, func(v ServiceSetting) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the service setting.
func (o ServiceSettingOutput) SettingId() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSetting](o, func(v ServiceSetting) pulumix.Output[string] { return v.SettingId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Value of the service setting.
func (o ServiceSettingOutput) SettingValue() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSetting](o, func(v ServiceSetting) pulumix.Output[string] { return v.SettingValue })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the service setting. Value can be `Default`, `Customized` or `PendingUpdate`.
func (o ServiceSettingOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[ServiceSetting](o, func(v ServiceSetting) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceSettingOutput{})
}
