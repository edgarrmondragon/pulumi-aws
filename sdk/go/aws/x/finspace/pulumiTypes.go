// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package finspace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type KxClusterAutoScalingConfiguration struct {
	// Metric your cluster will track in order to scale in and out. For example, CPU_UTILIZATION_PERCENTAGE is the average CPU usage across all nodes in a cluster.
	AutoScalingMetric string `pulumi:"autoScalingMetric"`
	// Highest number of nodes to scale. Cannot be greater than 5
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Desired value of chosen `autoScalingMetric`. When metric drops below this value, cluster will scale in. When metric goes above this value, cluster will scale out. Can be set between 0 and 100 percent.
	MetricTarget float64 `pulumi:"metricTarget"`
	// Lowest number of nodes to scale. Must be at least 1 and less than the `maxNodeCount`. If nodes in cluster belong to multiple availability zones, then `minNodeCount` must be at least 3.
	MinNodeCount int `pulumi:"minNodeCount"`
	// Duration in seconds that FinSpace will wait after a scale in event before initiating another scaling event.
	ScaleInCooldownSeconds float64 `pulumi:"scaleInCooldownSeconds"`
	// Duration in seconds that FinSpace will wait after a scale out event before initiating another scaling event.
	ScaleOutCooldownSeconds float64 `pulumi:"scaleOutCooldownSeconds"`
}

type KxClusterAutoScalingConfigurationArgs struct {
	// Metric your cluster will track in order to scale in and out. For example, CPU_UTILIZATION_PERCENTAGE is the average CPU usage across all nodes in a cluster.
	AutoScalingMetric pulumix.Input[string] `pulumi:"autoScalingMetric"`
	// Highest number of nodes to scale. Cannot be greater than 5
	MaxNodeCount pulumix.Input[int] `pulumi:"maxNodeCount"`
	// Desired value of chosen `autoScalingMetric`. When metric drops below this value, cluster will scale in. When metric goes above this value, cluster will scale out. Can be set between 0 and 100 percent.
	MetricTarget pulumix.Input[float64] `pulumi:"metricTarget"`
	// Lowest number of nodes to scale. Must be at least 1 and less than the `maxNodeCount`. If nodes in cluster belong to multiple availability zones, then `minNodeCount` must be at least 3.
	MinNodeCount pulumix.Input[int] `pulumi:"minNodeCount"`
	// Duration in seconds that FinSpace will wait after a scale in event before initiating another scaling event.
	ScaleInCooldownSeconds pulumix.Input[float64] `pulumi:"scaleInCooldownSeconds"`
	// Duration in seconds that FinSpace will wait after a scale out event before initiating another scaling event.
	ScaleOutCooldownSeconds pulumix.Input[float64] `pulumi:"scaleOutCooldownSeconds"`
}

func (KxClusterAutoScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterAutoScalingConfiguration)(nil)).Elem()
}

func (i KxClusterAutoScalingConfigurationArgs) ToKxClusterAutoScalingConfigurationOutput() KxClusterAutoScalingConfigurationOutput {
	return i.ToKxClusterAutoScalingConfigurationOutputWithContext(context.Background())
}

func (i KxClusterAutoScalingConfigurationArgs) ToKxClusterAutoScalingConfigurationOutputWithContext(ctx context.Context) KxClusterAutoScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterAutoScalingConfigurationOutput)
}

func (i *KxClusterAutoScalingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterAutoScalingConfigurationArgs] {
	return pulumix.Val(i)
}

type KxClusterAutoScalingConfigurationOutput struct{ *pulumi.OutputState }

func (KxClusterAutoScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterAutoScalingConfiguration)(nil)).Elem()
}

func (o KxClusterAutoScalingConfigurationOutput) ToKxClusterAutoScalingConfigurationOutput() KxClusterAutoScalingConfigurationOutput {
	return o
}

func (o KxClusterAutoScalingConfigurationOutput) ToKxClusterAutoScalingConfigurationOutputWithContext(ctx context.Context) KxClusterAutoScalingConfigurationOutput {
	return o
}

func (o KxClusterAutoScalingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterAutoScalingConfiguration] {
	return pulumix.Output[KxClusterAutoScalingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Metric your cluster will track in order to scale in and out. For example, CPU_UTILIZATION_PERCENTAGE is the average CPU usage across all nodes in a cluster.
func (o KxClusterAutoScalingConfigurationOutput) AutoScalingMetric() pulumix.Output[string] {
	return pulumix.Apply[KxClusterAutoScalingConfiguration](o, func(v KxClusterAutoScalingConfiguration) string { return v.AutoScalingMetric })
}

// Highest number of nodes to scale. Cannot be greater than 5
func (o KxClusterAutoScalingConfigurationOutput) MaxNodeCount() pulumix.Output[int] {
	return pulumix.Apply[KxClusterAutoScalingConfiguration](o, func(v KxClusterAutoScalingConfiguration) int { return v.MaxNodeCount })
}

// Desired value of chosen `autoScalingMetric`. When metric drops below this value, cluster will scale in. When metric goes above this value, cluster will scale out. Can be set between 0 and 100 percent.
func (o KxClusterAutoScalingConfigurationOutput) MetricTarget() pulumix.Output[float64] {
	return pulumix.Apply[KxClusterAutoScalingConfiguration](o, func(v KxClusterAutoScalingConfiguration) float64 { return v.MetricTarget })
}

// Lowest number of nodes to scale. Must be at least 1 and less than the `maxNodeCount`. If nodes in cluster belong to multiple availability zones, then `minNodeCount` must be at least 3.
func (o KxClusterAutoScalingConfigurationOutput) MinNodeCount() pulumix.Output[int] {
	return pulumix.Apply[KxClusterAutoScalingConfiguration](o, func(v KxClusterAutoScalingConfiguration) int { return v.MinNodeCount })
}

// Duration in seconds that FinSpace will wait after a scale in event before initiating another scaling event.
func (o KxClusterAutoScalingConfigurationOutput) ScaleInCooldownSeconds() pulumix.Output[float64] {
	return pulumix.Apply[KxClusterAutoScalingConfiguration](o, func(v KxClusterAutoScalingConfiguration) float64 { return v.ScaleInCooldownSeconds })
}

// Duration in seconds that FinSpace will wait after a scale out event before initiating another scaling event.
func (o KxClusterAutoScalingConfigurationOutput) ScaleOutCooldownSeconds() pulumix.Output[float64] {
	return pulumix.Apply[KxClusterAutoScalingConfiguration](o, func(v KxClusterAutoScalingConfiguration) float64 { return v.ScaleOutCooldownSeconds })
}

type KxClusterCacheStorageConfiguration struct {
	// Size of cache in Gigabytes.
	Size int `pulumi:"size"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type string `pulumi:"type"`
}

type KxClusterCacheStorageConfigurationArgs struct {
	// Size of cache in Gigabytes.
	Size pulumix.Input[int] `pulumi:"size"`
	// Type of KDB database. The following types are available:
	// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
	// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
	// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (KxClusterCacheStorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterCacheStorageConfiguration)(nil)).Elem()
}

func (i KxClusterCacheStorageConfigurationArgs) ToKxClusterCacheStorageConfigurationOutput() KxClusterCacheStorageConfigurationOutput {
	return i.ToKxClusterCacheStorageConfigurationOutputWithContext(context.Background())
}

func (i KxClusterCacheStorageConfigurationArgs) ToKxClusterCacheStorageConfigurationOutputWithContext(ctx context.Context) KxClusterCacheStorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterCacheStorageConfigurationOutput)
}

func (i *KxClusterCacheStorageConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterCacheStorageConfigurationArgs] {
	return pulumix.Val(i)
}

type KxClusterCacheStorageConfigurationOutput struct{ *pulumi.OutputState }

func (KxClusterCacheStorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterCacheStorageConfiguration)(nil)).Elem()
}

func (o KxClusterCacheStorageConfigurationOutput) ToKxClusterCacheStorageConfigurationOutput() KxClusterCacheStorageConfigurationOutput {
	return o
}

func (o KxClusterCacheStorageConfigurationOutput) ToKxClusterCacheStorageConfigurationOutputWithContext(ctx context.Context) KxClusterCacheStorageConfigurationOutput {
	return o
}

func (o KxClusterCacheStorageConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterCacheStorageConfiguration] {
	return pulumix.Output[KxClusterCacheStorageConfiguration]{
		OutputState: o.OutputState,
	}
}

// Size of cache in Gigabytes.
func (o KxClusterCacheStorageConfigurationOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[KxClusterCacheStorageConfiguration](o, func(v KxClusterCacheStorageConfiguration) int { return v.Size })
}

// Type of KDB database. The following types are available:
// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
func (o KxClusterCacheStorageConfigurationOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[KxClusterCacheStorageConfiguration](o, func(v KxClusterCacheStorageConfiguration) string { return v.Type })
}

type KxClusterCapacityConfiguration struct {
	// Number of instances running in a cluster. Must be at least 1 and at most 5.
	NodeCount int `pulumi:"nodeCount"`
	// Determines the hardware of the host computer used for your cluster instance. Each node type offers different memory and storage capabilities. Choose a node type based on the requirements of the application or software that you plan to run on your instance.
	//
	// You can only specify one of the following values:
	// * kx.s.large – The node type with a configuration of 12 GiB memory and 2 vCPUs.
	// * kx.s.xlarge – The node type with a configuration of 27 GiB memory and 4 vCPUs.
	// * kx.s.2xlarge – The node type with a configuration of 54 GiB memory and 8 vCPUs.
	// * kx.s.4xlarge – The node type with a configuration of 108 GiB memory and 16 vCPUs.
	// * kx.s.8xlarge – The node type with a configuration of 216 GiB memory and 32 vCPUs.
	// * kx.s.16xlarge – The node type with a configuration of 432 GiB memory and 64 vCPUs.
	// * kx.s.32xlarge – The node type with a configuration of 864 GiB memory and 128 vCPUs.
	NodeType string `pulumi:"nodeType"`
}

type KxClusterCapacityConfigurationArgs struct {
	// Number of instances running in a cluster. Must be at least 1 and at most 5.
	NodeCount pulumix.Input[int] `pulumi:"nodeCount"`
	// Determines the hardware of the host computer used for your cluster instance. Each node type offers different memory and storage capabilities. Choose a node type based on the requirements of the application or software that you plan to run on your instance.
	//
	// You can only specify one of the following values:
	// * kx.s.large – The node type with a configuration of 12 GiB memory and 2 vCPUs.
	// * kx.s.xlarge – The node type with a configuration of 27 GiB memory and 4 vCPUs.
	// * kx.s.2xlarge – The node type with a configuration of 54 GiB memory and 8 vCPUs.
	// * kx.s.4xlarge – The node type with a configuration of 108 GiB memory and 16 vCPUs.
	// * kx.s.8xlarge – The node type with a configuration of 216 GiB memory and 32 vCPUs.
	// * kx.s.16xlarge – The node type with a configuration of 432 GiB memory and 64 vCPUs.
	// * kx.s.32xlarge – The node type with a configuration of 864 GiB memory and 128 vCPUs.
	NodeType pulumix.Input[string] `pulumi:"nodeType"`
}

func (KxClusterCapacityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterCapacityConfiguration)(nil)).Elem()
}

func (i KxClusterCapacityConfigurationArgs) ToKxClusterCapacityConfigurationOutput() KxClusterCapacityConfigurationOutput {
	return i.ToKxClusterCapacityConfigurationOutputWithContext(context.Background())
}

func (i KxClusterCapacityConfigurationArgs) ToKxClusterCapacityConfigurationOutputWithContext(ctx context.Context) KxClusterCapacityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterCapacityConfigurationOutput)
}

func (i *KxClusterCapacityConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterCapacityConfigurationArgs] {
	return pulumix.Val(i)
}

type KxClusterCapacityConfigurationOutput struct{ *pulumi.OutputState }

func (KxClusterCapacityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterCapacityConfiguration)(nil)).Elem()
}

func (o KxClusterCapacityConfigurationOutput) ToKxClusterCapacityConfigurationOutput() KxClusterCapacityConfigurationOutput {
	return o
}

func (o KxClusterCapacityConfigurationOutput) ToKxClusterCapacityConfigurationOutputWithContext(ctx context.Context) KxClusterCapacityConfigurationOutput {
	return o
}

func (o KxClusterCapacityConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterCapacityConfiguration] {
	return pulumix.Output[KxClusterCapacityConfiguration]{
		OutputState: o.OutputState,
	}
}

// Number of instances running in a cluster. Must be at least 1 and at most 5.
func (o KxClusterCapacityConfigurationOutput) NodeCount() pulumix.Output[int] {
	return pulumix.Apply[KxClusterCapacityConfiguration](o, func(v KxClusterCapacityConfiguration) int { return v.NodeCount })
}

// Determines the hardware of the host computer used for your cluster instance. Each node type offers different memory and storage capabilities. Choose a node type based on the requirements of the application or software that you plan to run on your instance.
//
// You can only specify one of the following values:
// * kx.s.large – The node type with a configuration of 12 GiB memory and 2 vCPUs.
// * kx.s.xlarge – The node type with a configuration of 27 GiB memory and 4 vCPUs.
// * kx.s.2xlarge – The node type with a configuration of 54 GiB memory and 8 vCPUs.
// * kx.s.4xlarge – The node type with a configuration of 108 GiB memory and 16 vCPUs.
// * kx.s.8xlarge – The node type with a configuration of 216 GiB memory and 32 vCPUs.
// * kx.s.16xlarge – The node type with a configuration of 432 GiB memory and 64 vCPUs.
// * kx.s.32xlarge – The node type with a configuration of 864 GiB memory and 128 vCPUs.
func (o KxClusterCapacityConfigurationOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[KxClusterCapacityConfiguration](o, func(v KxClusterCapacityConfiguration) string { return v.NodeType })
}

type KxClusterCode struct {
	// Unique name for the S3 bucket.
	S3Bucket string `pulumi:"s3Bucket"`
	// Full S3 path (excluding bucket) to the .zip file that contains the code to be loaded onto the cluster when it’s started.
	S3Key string `pulumi:"s3Key"`
	// Version of an S3 Object.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
}

type KxClusterCodeArgs struct {
	// Unique name for the S3 bucket.
	S3Bucket pulumix.Input[string] `pulumi:"s3Bucket"`
	// Full S3 path (excluding bucket) to the .zip file that contains the code to be loaded onto the cluster when it’s started.
	S3Key pulumix.Input[string] `pulumi:"s3Key"`
	// Version of an S3 Object.
	S3ObjectVersion pulumix.Input[*string] `pulumi:"s3ObjectVersion"`
}

func (KxClusterCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterCode)(nil)).Elem()
}

func (i KxClusterCodeArgs) ToKxClusterCodeOutput() KxClusterCodeOutput {
	return i.ToKxClusterCodeOutputWithContext(context.Background())
}

func (i KxClusterCodeArgs) ToKxClusterCodeOutputWithContext(ctx context.Context) KxClusterCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterCodeOutput)
}

func (i *KxClusterCodeArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterCodeArgs] {
	return pulumix.Val(i)
}

type KxClusterCodeOutput struct{ *pulumi.OutputState }

func (KxClusterCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterCode)(nil)).Elem()
}

func (o KxClusterCodeOutput) ToKxClusterCodeOutput() KxClusterCodeOutput {
	return o
}

func (o KxClusterCodeOutput) ToKxClusterCodeOutputWithContext(ctx context.Context) KxClusterCodeOutput {
	return o
}

func (o KxClusterCodeOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterCode] {
	return pulumix.Output[KxClusterCode]{
		OutputState: o.OutputState,
	}
}

// Unique name for the S3 bucket.
func (o KxClusterCodeOutput) S3Bucket() pulumix.Output[string] {
	return pulumix.Apply[KxClusterCode](o, func(v KxClusterCode) string { return v.S3Bucket })
}

// Full S3 path (excluding bucket) to the .zip file that contains the code to be loaded onto the cluster when it’s started.
func (o KxClusterCodeOutput) S3Key() pulumix.Output[string] {
	return pulumix.Apply[KxClusterCode](o, func(v KxClusterCode) string { return v.S3Key })
}

// Version of an S3 Object.
func (o KxClusterCodeOutput) S3ObjectVersion() pulumix.Output[*string] {
	return pulumix.Apply[KxClusterCode](o, func(v KxClusterCode) *string { return v.S3ObjectVersion })
}

type KxClusterDatabase struct {
	// Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
	CacheConfigurations []KxClusterDatabaseCacheConfiguration `pulumi:"cacheConfigurations"`
	// A unique identifier of the changeset that is associated with the cluster.
	ChangesetId *string `pulumi:"changesetId"`
	// Name of the KX database.
	DatabaseName string `pulumi:"databaseName"`
}

type KxClusterDatabaseArgs struct {
	// Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
	CacheConfigurations pulumix.Input[[]*KxClusterDatabaseCacheConfigurationArgs] `pulumi:"cacheConfigurations"`
	// A unique identifier of the changeset that is associated with the cluster.
	ChangesetId pulumix.Input[*string] `pulumi:"changesetId"`
	// Name of the KX database.
	DatabaseName pulumix.Input[string] `pulumi:"databaseName"`
}

func (KxClusterDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterDatabase)(nil)).Elem()
}

func (i KxClusterDatabaseArgs) ToKxClusterDatabaseOutput() KxClusterDatabaseOutput {
	return i.ToKxClusterDatabaseOutputWithContext(context.Background())
}

func (i KxClusterDatabaseArgs) ToKxClusterDatabaseOutputWithContext(ctx context.Context) KxClusterDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterDatabaseOutput)
}

func (i *KxClusterDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterDatabaseArgs] {
	return pulumix.Val(i)
}

type KxClusterDatabaseOutput struct{ *pulumi.OutputState }

func (KxClusterDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterDatabase)(nil)).Elem()
}

func (o KxClusterDatabaseOutput) ToKxClusterDatabaseOutput() KxClusterDatabaseOutput {
	return o
}

func (o KxClusterDatabaseOutput) ToKxClusterDatabaseOutputWithContext(ctx context.Context) KxClusterDatabaseOutput {
	return o
}

func (o KxClusterDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterDatabase] {
	return pulumix.Output[KxClusterDatabase]{
		OutputState: o.OutputState,
	}
}

// Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
func (o KxClusterDatabaseOutput) CacheConfigurations() pulumix.GArrayOutput[KxClusterDatabaseCacheConfiguration, KxClusterDatabaseCacheConfigurationOutput] {
	value := pulumix.Apply[KxClusterDatabase](o, func(v KxClusterDatabase) []KxClusterDatabaseCacheConfiguration { return v.CacheConfigurations })
	return pulumix.GArrayOutput[KxClusterDatabaseCacheConfiguration, KxClusterDatabaseCacheConfigurationOutput]{OutputState: value.OutputState}
}

// A unique identifier of the changeset that is associated with the cluster.
func (o KxClusterDatabaseOutput) ChangesetId() pulumix.Output[*string] {
	return pulumix.Apply[KxClusterDatabase](o, func(v KxClusterDatabase) *string { return v.ChangesetId })
}

// Name of the KX database.
func (o KxClusterDatabaseOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[KxClusterDatabase](o, func(v KxClusterDatabase) string { return v.DatabaseName })
}

type KxClusterDatabaseCacheConfiguration struct {
	// Type of disk cache.
	CacheType string `pulumi:"cacheType"`
	// Paths within the database to cache.
	DbPaths []string `pulumi:"dbPaths"`
}

type KxClusterDatabaseCacheConfigurationArgs struct {
	// Type of disk cache.
	CacheType pulumix.Input[string] `pulumi:"cacheType"`
	// Paths within the database to cache.
	DbPaths pulumix.Input[[]string] `pulumi:"dbPaths"`
}

func (KxClusterDatabaseCacheConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterDatabaseCacheConfiguration)(nil)).Elem()
}

func (i KxClusterDatabaseCacheConfigurationArgs) ToKxClusterDatabaseCacheConfigurationOutput() KxClusterDatabaseCacheConfigurationOutput {
	return i.ToKxClusterDatabaseCacheConfigurationOutputWithContext(context.Background())
}

func (i KxClusterDatabaseCacheConfigurationArgs) ToKxClusterDatabaseCacheConfigurationOutputWithContext(ctx context.Context) KxClusterDatabaseCacheConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterDatabaseCacheConfigurationOutput)
}

func (i *KxClusterDatabaseCacheConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterDatabaseCacheConfigurationArgs] {
	return pulumix.Val(i)
}

type KxClusterDatabaseCacheConfigurationOutput struct{ *pulumi.OutputState }

func (KxClusterDatabaseCacheConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterDatabaseCacheConfiguration)(nil)).Elem()
}

func (o KxClusterDatabaseCacheConfigurationOutput) ToKxClusterDatabaseCacheConfigurationOutput() KxClusterDatabaseCacheConfigurationOutput {
	return o
}

func (o KxClusterDatabaseCacheConfigurationOutput) ToKxClusterDatabaseCacheConfigurationOutputWithContext(ctx context.Context) KxClusterDatabaseCacheConfigurationOutput {
	return o
}

func (o KxClusterDatabaseCacheConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterDatabaseCacheConfiguration] {
	return pulumix.Output[KxClusterDatabaseCacheConfiguration]{
		OutputState: o.OutputState,
	}
}

// Type of disk cache.
func (o KxClusterDatabaseCacheConfigurationOutput) CacheType() pulumix.Output[string] {
	return pulumix.Apply[KxClusterDatabaseCacheConfiguration](o, func(v KxClusterDatabaseCacheConfiguration) string { return v.CacheType })
}

// Paths within the database to cache.
func (o KxClusterDatabaseCacheConfigurationOutput) DbPaths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[KxClusterDatabaseCacheConfiguration](o, func(v KxClusterDatabaseCacheConfiguration) []string { return v.DbPaths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type KxClusterSavedownStorageConfiguration struct {
	// Size of temporary storage in gigabytes. Must be between 10 and 16000.
	Size int `pulumi:"size"`
	// Type of writeable storage space for temporarily storing your savedown data. The valid values are:
	// * SDS01 - This type represents 3000 IOPS and io2 ebs volume type.
	Type string `pulumi:"type"`
}

type KxClusterSavedownStorageConfigurationArgs struct {
	// Size of temporary storage in gigabytes. Must be between 10 and 16000.
	Size pulumix.Input[int] `pulumi:"size"`
	// Type of writeable storage space for temporarily storing your savedown data. The valid values are:
	// * SDS01 - This type represents 3000 IOPS and io2 ebs volume type.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (KxClusterSavedownStorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterSavedownStorageConfiguration)(nil)).Elem()
}

func (i KxClusterSavedownStorageConfigurationArgs) ToKxClusterSavedownStorageConfigurationOutput() KxClusterSavedownStorageConfigurationOutput {
	return i.ToKxClusterSavedownStorageConfigurationOutputWithContext(context.Background())
}

func (i KxClusterSavedownStorageConfigurationArgs) ToKxClusterSavedownStorageConfigurationOutputWithContext(ctx context.Context) KxClusterSavedownStorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterSavedownStorageConfigurationOutput)
}

func (i *KxClusterSavedownStorageConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterSavedownStorageConfigurationArgs] {
	return pulumix.Val(i)
}

type KxClusterSavedownStorageConfigurationOutput struct{ *pulumi.OutputState }

func (KxClusterSavedownStorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterSavedownStorageConfiguration)(nil)).Elem()
}

func (o KxClusterSavedownStorageConfigurationOutput) ToKxClusterSavedownStorageConfigurationOutput() KxClusterSavedownStorageConfigurationOutput {
	return o
}

func (o KxClusterSavedownStorageConfigurationOutput) ToKxClusterSavedownStorageConfigurationOutputWithContext(ctx context.Context) KxClusterSavedownStorageConfigurationOutput {
	return o
}

func (o KxClusterSavedownStorageConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterSavedownStorageConfiguration] {
	return pulumix.Output[KxClusterSavedownStorageConfiguration]{
		OutputState: o.OutputState,
	}
}

// Size of temporary storage in gigabytes. Must be between 10 and 16000.
func (o KxClusterSavedownStorageConfigurationOutput) Size() pulumix.Output[int] {
	return pulumix.Apply[KxClusterSavedownStorageConfiguration](o, func(v KxClusterSavedownStorageConfiguration) int { return v.Size })
}

// Type of writeable storage space for temporarily storing your savedown data. The valid values are:
// * SDS01 - This type represents 3000 IOPS and io2 ebs volume type.
func (o KxClusterSavedownStorageConfigurationOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[KxClusterSavedownStorageConfiguration](o, func(v KxClusterSavedownStorageConfiguration) string { return v.Type })
}

type KxClusterVpcConfiguration struct {
	// IP address type for cluster network configuration parameters. The following type is available: IP_V4 - IP address version 4.
	IpAddressType string `pulumi:"ipAddressType"`
	// Unique identifier of the VPC security group applied to the VPC endpoint ENI for the cluster.
	// * ` subnetIds  `- (Required) Identifier of the subnet that the Privatelink VPC endpoint uses to connect to the cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SubnetIds        []string `pulumi:"subnetIds"`
	// Identifier of the VPC endpoint
	VpcId string `pulumi:"vpcId"`
}

type KxClusterVpcConfigurationArgs struct {
	// IP address type for cluster network configuration parameters. The following type is available: IP_V4 - IP address version 4.
	IpAddressType pulumix.Input[string] `pulumi:"ipAddressType"`
	// Unique identifier of the VPC security group applied to the VPC endpoint ENI for the cluster.
	// * ` subnetIds  `- (Required) Identifier of the subnet that the Privatelink VPC endpoint uses to connect to the cluster.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	SubnetIds        pulumix.Input[[]string] `pulumi:"subnetIds"`
	// Identifier of the VPC endpoint
	VpcId pulumix.Input[string] `pulumi:"vpcId"`
}

func (KxClusterVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterVpcConfiguration)(nil)).Elem()
}

func (i KxClusterVpcConfigurationArgs) ToKxClusterVpcConfigurationOutput() KxClusterVpcConfigurationOutput {
	return i.ToKxClusterVpcConfigurationOutputWithContext(context.Background())
}

func (i KxClusterVpcConfigurationArgs) ToKxClusterVpcConfigurationOutputWithContext(ctx context.Context) KxClusterVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxClusterVpcConfigurationOutput)
}

func (i *KxClusterVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxClusterVpcConfigurationArgs] {
	return pulumix.Val(i)
}

type KxClusterVpcConfigurationOutput struct{ *pulumi.OutputState }

func (KxClusterVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxClusterVpcConfiguration)(nil)).Elem()
}

func (o KxClusterVpcConfigurationOutput) ToKxClusterVpcConfigurationOutput() KxClusterVpcConfigurationOutput {
	return o
}

func (o KxClusterVpcConfigurationOutput) ToKxClusterVpcConfigurationOutputWithContext(ctx context.Context) KxClusterVpcConfigurationOutput {
	return o
}

func (o KxClusterVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxClusterVpcConfiguration] {
	return pulumix.Output[KxClusterVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// IP address type for cluster network configuration parameters. The following type is available: IP_V4 - IP address version 4.
func (o KxClusterVpcConfigurationOutput) IpAddressType() pulumix.Output[string] {
	return pulumix.Apply[KxClusterVpcConfiguration](o, func(v KxClusterVpcConfiguration) string { return v.IpAddressType })
}

// Unique identifier of the VPC security group applied to the VPC endpoint ENI for the cluster.
// * ` subnetIds  `- (Required) Identifier of the subnet that the Privatelink VPC endpoint uses to connect to the cluster.
func (o KxClusterVpcConfigurationOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[KxClusterVpcConfiguration](o, func(v KxClusterVpcConfiguration) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o KxClusterVpcConfigurationOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[KxClusterVpcConfiguration](o, func(v KxClusterVpcConfiguration) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Identifier of the VPC endpoint
func (o KxClusterVpcConfigurationOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[KxClusterVpcConfiguration](o, func(v KxClusterVpcConfiguration) string { return v.VpcId })
}

type KxEnvironmentCustomDnsConfiguration struct {
	// IP address of the DNS server.
	CustomDnsServerIp string `pulumi:"customDnsServerIp"`
	// Name of the DNS server.
	CustomDnsServerName string `pulumi:"customDnsServerName"`
}

type KxEnvironmentCustomDnsConfigurationArgs struct {
	// IP address of the DNS server.
	CustomDnsServerIp pulumix.Input[string] `pulumi:"customDnsServerIp"`
	// Name of the DNS server.
	CustomDnsServerName pulumix.Input[string] `pulumi:"customDnsServerName"`
}

func (KxEnvironmentCustomDnsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentCustomDnsConfiguration)(nil)).Elem()
}

func (i KxEnvironmentCustomDnsConfigurationArgs) ToKxEnvironmentCustomDnsConfigurationOutput() KxEnvironmentCustomDnsConfigurationOutput {
	return i.ToKxEnvironmentCustomDnsConfigurationOutputWithContext(context.Background())
}

func (i KxEnvironmentCustomDnsConfigurationArgs) ToKxEnvironmentCustomDnsConfigurationOutputWithContext(ctx context.Context) KxEnvironmentCustomDnsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxEnvironmentCustomDnsConfigurationOutput)
}

func (i *KxEnvironmentCustomDnsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxEnvironmentCustomDnsConfigurationArgs] {
	return pulumix.Val(i)
}

type KxEnvironmentCustomDnsConfigurationOutput struct{ *pulumi.OutputState }

func (KxEnvironmentCustomDnsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentCustomDnsConfiguration)(nil)).Elem()
}

func (o KxEnvironmentCustomDnsConfigurationOutput) ToKxEnvironmentCustomDnsConfigurationOutput() KxEnvironmentCustomDnsConfigurationOutput {
	return o
}

func (o KxEnvironmentCustomDnsConfigurationOutput) ToKxEnvironmentCustomDnsConfigurationOutputWithContext(ctx context.Context) KxEnvironmentCustomDnsConfigurationOutput {
	return o
}

func (o KxEnvironmentCustomDnsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxEnvironmentCustomDnsConfiguration] {
	return pulumix.Output[KxEnvironmentCustomDnsConfiguration]{
		OutputState: o.OutputState,
	}
}

// IP address of the DNS server.
func (o KxEnvironmentCustomDnsConfigurationOutput) CustomDnsServerIp() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentCustomDnsConfiguration](o, func(v KxEnvironmentCustomDnsConfiguration) string { return v.CustomDnsServerIp })
}

// Name of the DNS server.
func (o KxEnvironmentCustomDnsConfigurationOutput) CustomDnsServerName() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentCustomDnsConfiguration](o, func(v KxEnvironmentCustomDnsConfiguration) string { return v.CustomDnsServerName })
}

type KxEnvironmentTransitGatewayConfiguration struct {
	// Rules that define how you manage outbound traffic from kdb network to your internal network. Defined below.
	AttachmentNetworkAclConfigurations []KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration `pulumi:"attachmentNetworkAclConfigurations"`
	// Routing CIDR on behalf of KX environment. It could be any “/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer’s transit gateway routing table so that the traffics could be routed to KX network.
	RoutableCidrSpace string `pulumi:"routableCidrSpace"`
	// Identifier of the transit gateway created by the customer to connect outbound traffics from KX network to your internal network.
	TransitGatewayId string `pulumi:"transitGatewayId"`
}

type KxEnvironmentTransitGatewayConfigurationArgs struct {
	// Rules that define how you manage outbound traffic from kdb network to your internal network. Defined below.
	AttachmentNetworkAclConfigurations pulumix.Input[[]*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs] `pulumi:"attachmentNetworkAclConfigurations"`
	// Routing CIDR on behalf of KX environment. It could be any “/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer’s transit gateway routing table so that the traffics could be routed to KX network.
	RoutableCidrSpace pulumix.Input[string] `pulumi:"routableCidrSpace"`
	// Identifier of the transit gateway created by the customer to connect outbound traffics from KX network to your internal network.
	TransitGatewayId pulumix.Input[string] `pulumi:"transitGatewayId"`
}

func (KxEnvironmentTransitGatewayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfiguration)(nil)).Elem()
}

func (i KxEnvironmentTransitGatewayConfigurationArgs) ToKxEnvironmentTransitGatewayConfigurationOutput() KxEnvironmentTransitGatewayConfigurationOutput {
	return i.ToKxEnvironmentTransitGatewayConfigurationOutputWithContext(context.Background())
}

func (i KxEnvironmentTransitGatewayConfigurationArgs) ToKxEnvironmentTransitGatewayConfigurationOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxEnvironmentTransitGatewayConfigurationOutput)
}

func (i *KxEnvironmentTransitGatewayConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxEnvironmentTransitGatewayConfigurationArgs] {
	return pulumix.Val(i)
}

type KxEnvironmentTransitGatewayConfigurationOutput struct{ *pulumi.OutputState }

func (KxEnvironmentTransitGatewayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfiguration)(nil)).Elem()
}

func (o KxEnvironmentTransitGatewayConfigurationOutput) ToKxEnvironmentTransitGatewayConfigurationOutput() KxEnvironmentTransitGatewayConfigurationOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationOutput) ToKxEnvironmentTransitGatewayConfigurationOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxEnvironmentTransitGatewayConfiguration] {
	return pulumix.Output[KxEnvironmentTransitGatewayConfiguration]{
		OutputState: o.OutputState,
	}
}

// Rules that define how you manage outbound traffic from kdb network to your internal network. Defined below.
func (o KxEnvironmentTransitGatewayConfigurationOutput) AttachmentNetworkAclConfigurations() pulumix.GArrayOutput[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration, KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput] {
	value := pulumix.Apply[KxEnvironmentTransitGatewayConfiguration](o, func(v KxEnvironmentTransitGatewayConfiguration) []KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration {
		return v.AttachmentNetworkAclConfigurations
	})
	return pulumix.GArrayOutput[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration, KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput]{OutputState: value.OutputState}
}

// Routing CIDR on behalf of KX environment. It could be any “/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer’s transit gateway routing table so that the traffics could be routed to KX network.
func (o KxEnvironmentTransitGatewayConfigurationOutput) RoutableCidrSpace() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfiguration](o, func(v KxEnvironmentTransitGatewayConfiguration) string { return v.RoutableCidrSpace })
}

// Identifier of the transit gateway created by the customer to connect outbound traffics from KX network to your internal network.
func (o KxEnvironmentTransitGatewayConfigurationOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfiguration](o, func(v KxEnvironmentTransitGatewayConfiguration) string { return v.TransitGatewayId })
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration struct {
	// The IPv4 network range to allow or deny, in CIDR notation. The specified CIDR block is modified to its canonical form. For example, `100.68.0.18/18` will be converted to `100.68.0.0/18`.
	CidrBlock string `pulumi:"cidrBlock"`
	// Defines the ICMP protocol that consists of the ICMP type and code. Defined below.
	IcmpTypeCode *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode `pulumi:"icmpTypeCode"`
	// Range of ports the rule applies to. Defined below.
	PortRange *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange `pulumi:"portRange"`
	// Protocol number. A value of `1` means all the protocols.
	Protocol string `pulumi:"protocol"`
	// Indicates whether to `allow` or `deny` the traffic that matches the rule.
	RuleAction string `pulumi:"ruleAction"`
	// Rule number for the entry. All the network ACL entries are processed in ascending order by rule number.
	RuleNumber int `pulumi:"ruleNumber"`
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs struct {
	// The IPv4 network range to allow or deny, in CIDR notation. The specified CIDR block is modified to its canonical form. For example, `100.68.0.18/18` will be converted to `100.68.0.0/18`.
	CidrBlock pulumix.Input[string] `pulumi:"cidrBlock"`
	// Defines the ICMP protocol that consists of the ICMP type and code. Defined below.
	IcmpTypeCode pulumix.Input[*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs] `pulumi:"icmpTypeCode"`
	// Range of ports the rule applies to. Defined below.
	PortRange pulumix.Input[*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs] `pulumi:"portRange"`
	// Protocol number. A value of `1` means all the protocols.
	Protocol pulumix.Input[string] `pulumi:"protocol"`
	// Indicates whether to `allow` or `deny` the traffic that matches the rule.
	RuleAction pulumix.Input[string] `pulumi:"ruleAction"`
	// Rule number for the entry. All the network ACL entries are processed in ascending order by rule number.
	RuleNumber pulumix.Input[int] `pulumi:"ruleNumber"`
}

func (KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration)(nil)).Elem()
}

func (i KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput() KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput {
	return i.ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutputWithContext(context.Background())
}

func (i KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput)
}

func (i *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationArgs] {
	return pulumix.Val(i)
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput struct{ *pulumi.OutputState }

func (KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration)(nil)).Elem()
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput() KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration] {
	return pulumix.Output[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration]{
		OutputState: o.OutputState,
	}
}

// The IPv4 network range to allow or deny, in CIDR notation. The specified CIDR block is modified to its canonical form. For example, `100.68.0.18/18` will be converted to `100.68.0.0/18`.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration) string {
		return v.CidrBlock
	})
}

// Defines the ICMP protocol that consists of the ICMP type and code. Defined below.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) IcmpTypeCode() pulumix.GPtrOutput[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode, KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput] {
	value := pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration) *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode {
		return v.IcmpTypeCode
	})
	return pulumix.GPtrOutput[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode, KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput]{OutputState: value.OutputState}
}

// Range of ports the rule applies to. Defined below.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) PortRange() pulumix.GPtrOutput[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange, KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput] {
	value := pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration) *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange {
		return v.PortRange
	})
	return pulumix.GPtrOutput[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange, KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput]{OutputState: value.OutputState}
}

// Protocol number. A value of `1` means all the protocols.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) Protocol() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration) string {
		return v.Protocol
	})
}

// Indicates whether to `allow` or `deny` the traffic that matches the rule.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) RuleAction() pulumix.Output[string] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration) string {
		return v.RuleAction
	})
}

// Rule number for the entry. All the network ACL entries are processed in ascending order by rule number.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput) RuleNumber() pulumix.Output[int] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration) int {
		return v.RuleNumber
	})
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode struct {
	// ICMP code. A value of `-1` means all codes for the specified ICMP type.
	Code int `pulumi:"code"`
	// ICMP type. A value of `-1` means all types.
	Type int `pulumi:"type"`
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs struct {
	// ICMP code. A value of `-1` means all codes for the specified ICMP type.
	Code pulumix.Input[int] `pulumi:"code"`
	// ICMP type. A value of `-1` means all types.
	Type pulumix.Input[int] `pulumi:"type"`
}

func (KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode)(nil)).Elem()
}

func (i KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput() KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput {
	return i.ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutputWithContext(context.Background())
}

func (i KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput)
}

func (i *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs) ToOutput(ctx context.Context) pulumix.Output[*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeArgs] {
	return pulumix.Val(i)
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput struct{ *pulumi.OutputState }

func (KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode)(nil)).Elem()
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput() KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput) ToOutput(ctx context.Context) pulumix.Output[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode] {
	return pulumix.Output[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode]{
		OutputState: o.OutputState,
	}
}

// ICMP code. A value of `-1` means all codes for the specified ICMP type.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput) Code() pulumix.Output[int] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode) int {
		return v.Code
	})
}

// ICMP type. A value of `-1` means all types.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput) Type() pulumix.Output[int] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode) int {
		return v.Type
	})
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange struct {
	// First port in the range.
	From int `pulumi:"from"`
	// Last port in the range.
	To int `pulumi:"to"`
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs struct {
	// First port in the range.
	From pulumix.Input[int] `pulumi:"from"`
	// Last port in the range.
	To pulumix.Input[int] `pulumi:"to"`
}

func (KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange)(nil)).Elem()
}

func (i KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput() KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput {
	return i.ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutputWithContext(context.Background())
}

func (i KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput)
}

func (i *KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeArgs] {
	return pulumix.Val(i)
}

type KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput struct{ *pulumi.OutputState }

func (KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange)(nil)).Elem()
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput() KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput) ToKxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutputWithContext(ctx context.Context) KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput {
	return o
}

func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput) ToOutput(ctx context.Context) pulumix.Output[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange] {
	return pulumix.Output[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange]{
		OutputState: o.OutputState,
	}
}

// First port in the range.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput) From() pulumix.Output[int] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange) int {
		return v.From
	})
}

// Last port in the range.
func (o KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput) To() pulumix.Output[int] {
	return pulumix.Apply[KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange](o, func(v KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange) int {
		return v.To
	})
}

func init() {
	pulumi.RegisterOutputType(KxClusterAutoScalingConfigurationOutput{})
	pulumi.RegisterOutputType(KxClusterCacheStorageConfigurationOutput{})
	pulumi.RegisterOutputType(KxClusterCapacityConfigurationOutput{})
	pulumi.RegisterOutputType(KxClusterCodeOutput{})
	pulumi.RegisterOutputType(KxClusterDatabaseOutput{})
	pulumi.RegisterOutputType(KxClusterDatabaseCacheConfigurationOutput{})
	pulumi.RegisterOutputType(KxClusterSavedownStorageConfigurationOutput{})
	pulumi.RegisterOutputType(KxClusterVpcConfigurationOutput{})
	pulumi.RegisterOutputType(KxEnvironmentCustomDnsConfigurationOutput{})
	pulumi.RegisterOutputType(KxEnvironmentTransitGatewayConfigurationOutput{})
	pulumi.RegisterOutputType(KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationOutput{})
	pulumi.RegisterOutputType(KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCodeOutput{})
	pulumi.RegisterOutputType(KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRangeOutput{})
}
