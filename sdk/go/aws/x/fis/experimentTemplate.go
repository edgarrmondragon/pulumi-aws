// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an FIS Experiment Template, which can be used to run an experiment.
// An experiment template contains one or more actions to run on specified targets during an experiment.
// It also contains the stop conditions that prevent the experiment from going out of bounds.
// See [Amazon Fault Injection Simulator](https://docs.aws.amazon.com/fis/index.html)
// for more information.
type ExperimentTemplate struct {
	pulumi.CustomResourceState

	// Action to be performed during an experiment. See below.
	Actions pulumix.GArrayOutput[ExperimentTemplateAction, ExperimentTemplateActionOutput] `pulumi:"actions"`
	// Description for the experiment template.
	Description pulumix.Output[string] `pulumi:"description"`
	// The configuration for experiment logging. See below.
	LogConfiguration pulumix.GPtrOutput[ExperimentTemplateLogConfiguration, ExperimentTemplateLogConfigurationOutput] `pulumi:"logConfiguration"`
	// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// When an ongoing experiment should be stopped. See below.
	//
	// The following arguments are optional:
	StopConditions pulumix.GArrayOutput[ExperimentTemplateStopCondition, ExperimentTemplateStopConditionOutput] `pulumi:"stopConditions"`
	// Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Target of an action. See below.
	Targets pulumix.GArrayOutput[ExperimentTemplateTarget, ExperimentTemplateTargetOutput] `pulumi:"targets"`
}

// NewExperimentTemplate registers a new resource with the given unique name, arguments, and options.
func NewExperimentTemplate(ctx *pulumi.Context,
	name string, args *ExperimentTemplateArgs, opts ...pulumi.ResourceOption) (*ExperimentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.StopConditions == nil {
		return nil, errors.New("invalid value for required argument 'StopConditions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExperimentTemplate
	err := ctx.RegisterResource("aws:fis/experimentTemplate:ExperimentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentTemplate gets an existing ExperimentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentTemplateState, opts ...pulumi.ResourceOption) (*ExperimentTemplate, error) {
	var resource ExperimentTemplate
	err := ctx.ReadResource("aws:fis/experimentTemplate:ExperimentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentTemplate resources.
type experimentTemplateState struct {
	// Action to be performed during an experiment. See below.
	Actions []ExperimentTemplateAction `pulumi:"actions"`
	// Description for the experiment template.
	Description *string `pulumi:"description"`
	// The configuration for experiment logging. See below.
	LogConfiguration *ExperimentTemplateLogConfiguration `pulumi:"logConfiguration"`
	// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
	RoleArn *string `pulumi:"roleArn"`
	// When an ongoing experiment should be stopped. See below.
	//
	// The following arguments are optional:
	StopConditions []ExperimentTemplateStopCondition `pulumi:"stopConditions"`
	// Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Target of an action. See below.
	Targets []ExperimentTemplateTarget `pulumi:"targets"`
}

type ExperimentTemplateState struct {
	// Action to be performed during an experiment. See below.
	Actions pulumix.Input[[]*ExperimentTemplateActionArgs]
	// Description for the experiment template.
	Description pulumix.Input[*string]
	// The configuration for experiment logging. See below.
	LogConfiguration pulumix.Input[*ExperimentTemplateLogConfigurationArgs]
	// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
	RoleArn pulumix.Input[*string]
	// When an ongoing experiment should be stopped. See below.
	//
	// The following arguments are optional:
	StopConditions pulumix.Input[[]*ExperimentTemplateStopConditionArgs]
	// Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Target of an action. See below.
	Targets pulumix.Input[[]*ExperimentTemplateTargetArgs]
}

func (ExperimentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentTemplateState)(nil)).Elem()
}

type experimentTemplateArgs struct {
	// Action to be performed during an experiment. See below.
	Actions []ExperimentTemplateAction `pulumi:"actions"`
	// Description for the experiment template.
	Description string `pulumi:"description"`
	// The configuration for experiment logging. See below.
	LogConfiguration *ExperimentTemplateLogConfiguration `pulumi:"logConfiguration"`
	// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
	RoleArn string `pulumi:"roleArn"`
	// When an ongoing experiment should be stopped. See below.
	//
	// The following arguments are optional:
	StopConditions []ExperimentTemplateStopCondition `pulumi:"stopConditions"`
	// Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Target of an action. See below.
	Targets []ExperimentTemplateTarget `pulumi:"targets"`
}

// The set of arguments for constructing a ExperimentTemplate resource.
type ExperimentTemplateArgs struct {
	// Action to be performed during an experiment. See below.
	Actions pulumix.Input[[]*ExperimentTemplateActionArgs]
	// Description for the experiment template.
	Description pulumix.Input[string]
	// The configuration for experiment logging. See below.
	LogConfiguration pulumix.Input[*ExperimentTemplateLogConfigurationArgs]
	// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
	RoleArn pulumix.Input[string]
	// When an ongoing experiment should be stopped. See below.
	//
	// The following arguments are optional:
	StopConditions pulumix.Input[[]*ExperimentTemplateStopConditionArgs]
	// Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Target of an action. See below.
	Targets pulumix.Input[[]*ExperimentTemplateTargetArgs]
}

func (ExperimentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentTemplateArgs)(nil)).Elem()
}

type ExperimentTemplateOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplate)(nil)).Elem()
}

func (o ExperimentTemplateOutput) ToExperimentTemplateOutput() ExperimentTemplateOutput {
	return o
}

func (o ExperimentTemplateOutput) ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput {
	return o
}

func (o ExperimentTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentTemplate] {
	return pulumix.Output[ExperimentTemplate]{
		OutputState: o.OutputState,
	}
}

// Action to be performed during an experiment. See below.
func (o ExperimentTemplateOutput) Actions() pulumix.GArrayOutput[ExperimentTemplateAction, ExperimentTemplateActionOutput] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.GArrayOutput[ExperimentTemplateAction, ExperimentTemplateActionOutput] {
		return v.Actions
	})
	unwrapped := pulumix.Flatten[[]ExperimentTemplateAction, pulumix.GArrayOutput[ExperimentTemplateAction, ExperimentTemplateActionOutput]](value)
	return pulumix.GArrayOutput[ExperimentTemplateAction, ExperimentTemplateActionOutput]{OutputState: unwrapped.OutputState}
}

// Description for the experiment template.
func (o ExperimentTemplateOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The configuration for experiment logging. See below.
func (o ExperimentTemplateOutput) LogConfiguration() pulumix.GPtrOutput[ExperimentTemplateLogConfiguration, ExperimentTemplateLogConfigurationOutput] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.GPtrOutput[ExperimentTemplateLogConfiguration, ExperimentTemplateLogConfigurationOutput] {
		return v.LogConfiguration
	})
	unwrapped := pulumix.Flatten[*ExperimentTemplateLogConfiguration, pulumix.GPtrOutput[ExperimentTemplateLogConfiguration, ExperimentTemplateLogConfigurationOutput]](value)
	return pulumix.GPtrOutput[ExperimentTemplateLogConfiguration, ExperimentTemplateLogConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
func (o ExperimentTemplateOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When an ongoing experiment should be stopped. See below.
//
// The following arguments are optional:
func (o ExperimentTemplateOutput) StopConditions() pulumix.GArrayOutput[ExperimentTemplateStopCondition, ExperimentTemplateStopConditionOutput] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.GArrayOutput[ExperimentTemplateStopCondition, ExperimentTemplateStopConditionOutput] {
		return v.StopConditions
	})
	unwrapped := pulumix.Flatten[[]ExperimentTemplateStopCondition, pulumix.GArrayOutput[ExperimentTemplateStopCondition, ExperimentTemplateStopConditionOutput]](value)
	return pulumix.GArrayOutput[ExperimentTemplateStopCondition, ExperimentTemplateStopConditionOutput]{OutputState: unwrapped.OutputState}
}

// Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ExperimentTemplateOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ExperimentTemplateOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Target of an action. See below.
func (o ExperimentTemplateOutput) Targets() pulumix.GArrayOutput[ExperimentTemplateTarget, ExperimentTemplateTargetOutput] {
	value := pulumix.Apply[ExperimentTemplate](o, func(v ExperimentTemplate) pulumix.GArrayOutput[ExperimentTemplateTarget, ExperimentTemplateTargetOutput] {
		return v.Targets
	})
	unwrapped := pulumix.Flatten[[]ExperimentTemplateTarget, pulumix.GArrayOutput[ExperimentTemplateTarget, ExperimentTemplateTargetOutput]](value)
	return pulumix.GArrayOutput[ExperimentTemplateTarget, ExperimentTemplateTargetOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ExperimentTemplateOutput{})
}
