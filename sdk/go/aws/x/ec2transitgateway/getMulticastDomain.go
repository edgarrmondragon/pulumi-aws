// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway Multicast Domain.
func LookupMulticastDomain(ctx *pulumi.Context, args *LookupMulticastDomainArgs, opts ...pulumi.InvokeOption) (*LookupMulticastDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMulticastDomainResult
	err := ctx.Invoke("aws:ec2transitgateway/getMulticastDomain:getMulticastDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMulticastDomain.
type LookupMulticastDomainArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetMulticastDomainFilter `pulumi:"filters"`
	// Key-value tags for the EC2 Transit Gateway Multicast Domain.
	Tags map[string]string `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway Multicast Domain.
	TransitGatewayMulticastDomainId *string `pulumi:"transitGatewayMulticastDomainId"`
}

// A collection of values returned by getMulticastDomain.
type LookupMulticastDomainResult struct {
	// EC2 Transit Gateway Multicast Domain ARN.
	Arn string `pulumi:"arn"`
	// EC2 Transit Gateway Multicast Domain Associations
	Associations []GetMulticastDomainAssociationType `pulumi:"associations"`
	// Whether to automatically accept cross-account subnet associations that are associated with the EC2 Transit Gateway Multicast Domain.
	AutoAcceptSharedAssociations string                     `pulumi:"autoAcceptSharedAssociations"`
	Filters                      []GetMulticastDomainFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether to enable Internet Group Management Protocol (IGMP) version 2 for the EC2 Transit Gateway Multicast Domain.
	Igmpv2Support string `pulumi:"igmpv2Support"`
	// EC2 Multicast Domain Group Members
	Members []GetMulticastDomainMember `pulumi:"members"`
	// Identifier of the AWS account that owns the EC2 Transit Gateway Multicast Domain.
	OwnerId string `pulumi:"ownerId"`
	// EC2 Multicast Domain Group Sources
	Sources []GetMulticastDomainSource `pulumi:"sources"`
	State   string                     `pulumi:"state"`
	// Whether to enable support for statically configuring multicast group sources for the EC2 Transit Gateway Multicast Domain.
	StaticSourcesSupport string `pulumi:"staticSourcesSupport"`
	// Key-value tags for the EC2 Transit Gateway Multicast Domain.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId string `pulumi:"transitGatewayAttachmentId"`
	// EC2 Transit Gateway identifier.
	TransitGatewayId                string `pulumi:"transitGatewayId"`
	TransitGatewayMulticastDomainId string `pulumi:"transitGatewayMulticastDomainId"`
}

func LookupMulticastDomainOutput(ctx *pulumi.Context, args LookupMulticastDomainOutputArgs, opts ...pulumi.InvokeOption) LookupMulticastDomainResultOutput {
	outputResult := pulumix.ApplyErr[*LookupMulticastDomainArgs](args.ToOutput(), func(plainArgs *LookupMulticastDomainArgs) (*LookupMulticastDomainResult, error) {
		return LookupMulticastDomain(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupMulticastDomainResultOutput, *LookupMulticastDomainResult](outputResult)
}

// A collection of arguments for invoking getMulticastDomain.
type LookupMulticastDomainOutputArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetMulticastDomainFilterArgs] `pulumi:"filters"`
	// Key-value tags for the EC2 Transit Gateway Multicast Domain.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Identifier of the EC2 Transit Gateway Multicast Domain.
	TransitGatewayMulticastDomainId pulumix.Input[*string] `pulumi:"transitGatewayMulticastDomainId"`
}

func (args LookupMulticastDomainOutputArgs) ToOutput() pulumix.Output[*LookupMulticastDomainArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.TransitGatewayMulticastDomainId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupMulticastDomainArgs {
		return &LookupMulticastDomainArgs{
			Filters:                         resolvedArgs[0].([]GetMulticastDomainFilter),
			Tags:                            resolvedArgs[1].(map[string]string),
			TransitGatewayMulticastDomainId: resolvedArgs[2].(*string),
		}
	})
}

type LookupMulticastDomainResultOutput struct{ *pulumi.OutputState }

func (LookupMulticastDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMulticastDomainResult)(nil)).Elem()
}

func (o LookupMulticastDomainResultOutput) ToOutput(context.Context) pulumix.Output[*LookupMulticastDomainResult] {
	return pulumix.Output[*LookupMulticastDomainResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupMulticastDomainResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.Arn })
}

func (o LookupMulticastDomainResultOutput) Associations() pulumix.GArrayOutput[GetMulticastDomainAssociationType, GetMulticastDomainAssociationTypeOutput] {
	value := pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) []GetMulticastDomainAssociationType { return v.Associations })
	return pulumix.GArrayOutput[GetMulticastDomainAssociationType, GetMulticastDomainAssociationTypeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMulticastDomainResultOutput) AutoAcceptSharedAssociations() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.AutoAcceptSharedAssociations })
}

func (o LookupMulticastDomainResultOutput) Filters() pulumix.GArrayOutput[GetMulticastDomainFilter, GetMulticastDomainFilterOutput] {
	value := pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) []GetMulticastDomainFilter { return v.Filters })
	return pulumix.GArrayOutput[GetMulticastDomainFilter, GetMulticastDomainFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMulticastDomainResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.Id })
}

func (o LookupMulticastDomainResultOutput) Igmpv2Support() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.Igmpv2Support })
}

func (o LookupMulticastDomainResultOutput) Members() pulumix.GArrayOutput[GetMulticastDomainMember, GetMulticastDomainMemberOutput] {
	value := pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) []GetMulticastDomainMember { return v.Members })
	return pulumix.GArrayOutput[GetMulticastDomainMember, GetMulticastDomainMemberOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMulticastDomainResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.OwnerId })
}

func (o LookupMulticastDomainResultOutput) Sources() pulumix.GArrayOutput[GetMulticastDomainSource, GetMulticastDomainSourceOutput] {
	value := pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) []GetMulticastDomainSource { return v.Sources })
	return pulumix.GArrayOutput[GetMulticastDomainSource, GetMulticastDomainSourceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMulticastDomainResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.State })
}

func (o LookupMulticastDomainResultOutput) StaticSourcesSupport() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.StaticSourcesSupport })
}

func (o LookupMulticastDomainResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupMulticastDomainResultOutput) TransitGatewayAttachmentId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.TransitGatewayAttachmentId })
}

func (o LookupMulticastDomainResultOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.TransitGatewayId })
}

func (o LookupMulticastDomainResultOutput) TransitGatewayMulticastDomainId() pulumix.Output[string] {
	return pulumix.Apply[*LookupMulticastDomainResult](o, func(v *LookupMulticastDomainResult) string { return v.TransitGatewayMulticastDomainId })
}
