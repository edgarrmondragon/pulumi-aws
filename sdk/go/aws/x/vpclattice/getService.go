// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS VPC Lattice Service.
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("aws:vpclattice/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// Service name.
	Name *string `pulumi:"name"`
	// ID or Amazon Resource Name (ARN) of the service network.
	ServiceIdentifier *string `pulumi:"serviceIdentifier"`
	// List of tags associated with the service.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// ARN of the service.
	Arn string `pulumi:"arn"`
	// Type of IAM policy. Either `NONE` or `AWS_IAM`.
	AuthType string `pulumi:"authType"`
	// Amazon Resource Name (ARN) of the certificate.
	CertificateArn string `pulumi:"certificateArn"`
	// Custom domain name of the service.
	CustomDomainName string `pulumi:"customDomainName"`
	// DNS name of the service.
	DnsEntries []GetServiceDnsEntry `pulumi:"dnsEntries"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	Name              string `pulumi:"name"`
	ServiceIdentifier string `pulumi:"serviceIdentifier"`
	// Status of the service.
	Status string `pulumi:"status"`
	// List of tags associated with the service.
	Tags map[string]string `pulumi:"tags"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServiceArgs](args.ToOutput(), func(plainArgs *LookupServiceArgs) (*LookupServiceResult, error) {
		return LookupService(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServiceResultOutput, *LookupServiceResult](outputResult)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// Service name.
	Name pulumix.Input[*string] `pulumi:"name"`
	// ID or Amazon Resource Name (ARN) of the service network.
	ServiceIdentifier pulumix.Input[*string] `pulumi:"serviceIdentifier"`
	// List of tags associated with the service.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupServiceOutputArgs) ToOutput() pulumix.Output[*LookupServiceArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.ServiceIdentifier.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServiceArgs {
		return &LookupServiceArgs{
			Name:              resolvedArgs[0].(*string),
			ServiceIdentifier: resolvedArgs[1].(*string),
			Tags:              resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServiceResult] {
	return pulumix.Output[*LookupServiceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServiceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Arn })
}

func (o LookupServiceResultOutput) AuthType() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.AuthType })
}

func (o LookupServiceResultOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.CertificateArn })
}

func (o LookupServiceResultOutput) CustomDomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.CustomDomainName })
}

func (o LookupServiceResultOutput) DnsEntries() pulumix.GArrayOutput[GetServiceDnsEntry, GetServiceDnsEntryOutput] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) []GetServiceDnsEntry { return v.DnsEntries })
	return pulumix.GArrayOutput[GetServiceDnsEntry, GetServiceDnsEntryOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Id })
}

func (o LookupServiceResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Name })
}

func (o LookupServiceResultOutput) ServiceIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.ServiceIdentifier })
}

func (o LookupServiceResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Status })
}

func (o LookupServiceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
