// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cognito User Pool Client resource.
func LookupUserPoolClient(ctx *pulumi.Context, args *LookupUserPoolClientArgs, opts ...pulumi.InvokeOption) (*LookupUserPoolClientResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserPoolClientResult
	err := ctx.Invoke("aws:cognito/getUserPoolClient:getUserPoolClient", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserPoolClient.
type LookupUserPoolClientArgs struct {
	// Client Id of the user pool.
	ClientId string `pulumi:"clientId"`
	// User pool the client belongs to.
	UserPoolId string `pulumi:"userPoolId"`
}

// A collection of values returned by getUserPoolClient.
type LookupUserPoolClientResult struct {
	// (Optional) Time limit, between 5 minutes and 1 day, after which the access token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `tokenValidityUnits`.
	AccessTokenValidity int `pulumi:"accessTokenValidity"`
	// (Optional) List of allowed OAuth flows (code, implicit, client_credentials).
	AllowedOauthFlows []string `pulumi:"allowedOauthFlows"`
	// (Optional) Whether the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
	AllowedOauthFlowsUserPoolClient bool `pulumi:"allowedOauthFlowsUserPoolClient"`
	// (Optional) List of allowed OAuth scopes (phone, email, openid, profile, and aws.cognito.signin.user.admin).
	AllowedOauthScopes []string `pulumi:"allowedOauthScopes"`
	// (Optional) Configuration block for Amazon Pinpoint analytics for collecting metrics for this user pool. Detailed below.
	AnalyticsConfigurations []GetUserPoolClientAnalyticsConfiguration `pulumi:"analyticsConfigurations"`
	// (Optional) List of allowed callback URLs for the identity providers.
	CallbackUrls []string `pulumi:"callbackUrls"`
	ClientId     string   `pulumi:"clientId"`
	// Client secret of the user pool client.
	ClientSecret string `pulumi:"clientSecret"`
	// (Optional) Default redirect URI. Must be in the list of callback URLs.
	DefaultRedirectUri                       string `pulumi:"defaultRedirectUri"`
	EnablePropagateAdditionalUserContextData bool   `pulumi:"enablePropagateAdditionalUserContextData"`
	// (Optional) Enables or disables token revocation.
	EnableTokenRevocation bool `pulumi:"enableTokenRevocation"`
	// (Optional) List of authentication flows (ADMIN_NO_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH, ALLOW_CUSTOM_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH).
	ExplicitAuthFlows []string `pulumi:"explicitAuthFlows"`
	// (Optional) Should an application secret be generated.
	GenerateSecret bool `pulumi:"generateSecret"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Optional) Time limit, between 5 minutes and 1 day, after which the ID token is no longer valid and cannot be used. This value will be overridden if you have entered a value in `tokenValidityUnits`.
	IdTokenValidity int `pulumi:"idTokenValidity"`
	// (Optional) List of allowed logout URLs for the identity providers.
	LogoutUrls []string `pulumi:"logoutUrls"`
	Name       string   `pulumi:"name"`
	// (Optional) Choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to `ENABLED` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to `LEGACY`, those APIs will return a `UserNotFoundException` exception if the user does not exist in the user pool.
	PreventUserExistenceErrors string `pulumi:"preventUserExistenceErrors"`
	// (Optional) List of user pool attributes the application client can read from.
	ReadAttributes []string `pulumi:"readAttributes"`
	// (Optional) Time limit in days refresh tokens are valid for.
	RefreshTokenValidity int `pulumi:"refreshTokenValidity"`
	// (Optional) List of provider names for the identity providers that are supported on this client. Uses the `providerName` attribute of `cognito.IdentityProvider` resource(s), or the equivalent string(s).
	SupportedIdentityProviders []string `pulumi:"supportedIdentityProviders"`
	// (Optional) Configuration block for units in which the validity times are represented in. Detailed below.
	TokenValidityUnits []GetUserPoolClientTokenValidityUnit `pulumi:"tokenValidityUnits"`
	UserPoolId         string                               `pulumi:"userPoolId"`
	// (Optional) List of user pool attributes the application client can write to.
	WriteAttributes []string `pulumi:"writeAttributes"`
}

func LookupUserPoolClientOutput(ctx *pulumi.Context, args LookupUserPoolClientOutputArgs, opts ...pulumi.InvokeOption) LookupUserPoolClientResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserPoolClientArgs](args.ToOutput(), func(plainArgs *LookupUserPoolClientArgs) (*LookupUserPoolClientResult, error) {
		return LookupUserPoolClient(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserPoolClientResultOutput, *LookupUserPoolClientResult](outputResult)
}

// A collection of arguments for invoking getUserPoolClient.
type LookupUserPoolClientOutputArgs struct {
	// Client Id of the user pool.
	ClientId pulumix.Input[string] `pulumi:"clientId"`
	// User pool the client belongs to.
	UserPoolId pulumix.Input[string] `pulumi:"userPoolId"`
}

func (args LookupUserPoolClientOutputArgs) ToOutput() pulumix.Output[*LookupUserPoolClientArgs] {
	allArgs := pulumix.All(
		args.ClientId.ToOutput(context.Background()).AsAny(),
		args.UserPoolId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserPoolClientArgs {
		return &LookupUserPoolClientArgs{
			ClientId:   resolvedArgs[0].(string),
			UserPoolId: resolvedArgs[1].(string),
		}
	})
}

type LookupUserPoolClientResultOutput struct{ *pulumi.OutputState }

func (LookupUserPoolClientResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolClientResult)(nil)).Elem()
}

func (o LookupUserPoolClientResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserPoolClientResult] {
	return pulumix.Output[*LookupUserPoolClientResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) AccessTokenValidity() pulumix.Output[int] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) int { return v.AccessTokenValidity })
}

func (o LookupUserPoolClientResultOutput) AllowedOauthFlows() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.AllowedOauthFlows })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) AllowedOauthFlowsUserPoolClient() pulumix.Output[bool] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) bool { return v.AllowedOauthFlowsUserPoolClient })
}

func (o LookupUserPoolClientResultOutput) AllowedOauthScopes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.AllowedOauthScopes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) AnalyticsConfigurations() pulumix.GArrayOutput[GetUserPoolClientAnalyticsConfiguration, GetUserPoolClientAnalyticsConfigurationOutput] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []GetUserPoolClientAnalyticsConfiguration {
		return v.AnalyticsConfigurations
	})
	return pulumix.GArrayOutput[GetUserPoolClientAnalyticsConfiguration, GetUserPoolClientAnalyticsConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) CallbackUrls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.CallbackUrls })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) ClientId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.ClientId })
}

func (o LookupUserPoolClientResultOutput) ClientSecret() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.ClientSecret })
}

func (o LookupUserPoolClientResultOutput) DefaultRedirectUri() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.DefaultRedirectUri })
}

func (o LookupUserPoolClientResultOutput) EnablePropagateAdditionalUserContextData() pulumix.Output[bool] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) bool { return v.EnablePropagateAdditionalUserContextData })
}

func (o LookupUserPoolClientResultOutput) EnableTokenRevocation() pulumix.Output[bool] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) bool { return v.EnableTokenRevocation })
}

func (o LookupUserPoolClientResultOutput) ExplicitAuthFlows() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.ExplicitAuthFlows })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) GenerateSecret() pulumix.Output[bool] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) bool { return v.GenerateSecret })
}

func (o LookupUserPoolClientResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.Id })
}

func (o LookupUserPoolClientResultOutput) IdTokenValidity() pulumix.Output[int] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) int { return v.IdTokenValidity })
}

func (o LookupUserPoolClientResultOutput) LogoutUrls() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.LogoutUrls })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.Name })
}

func (o LookupUserPoolClientResultOutput) PreventUserExistenceErrors() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.PreventUserExistenceErrors })
}

func (o LookupUserPoolClientResultOutput) ReadAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.ReadAttributes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) RefreshTokenValidity() pulumix.Output[int] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) int { return v.RefreshTokenValidity })
}

func (o LookupUserPoolClientResultOutput) SupportedIdentityProviders() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.SupportedIdentityProviders })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) TokenValidityUnits() pulumix.GArrayOutput[GetUserPoolClientTokenValidityUnit, GetUserPoolClientTokenValidityUnitOutput] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []GetUserPoolClientTokenValidityUnit { return v.TokenValidityUnits })
	return pulumix.GArrayOutput[GetUserPoolClientTokenValidityUnit, GetUserPoolClientTokenValidityUnitOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupUserPoolClientResultOutput) UserPoolId() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) string { return v.UserPoolId })
}

func (o LookupUserPoolClientResultOutput) WriteAttributes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupUserPoolClientResult](o, func(v *LookupUserPoolClientResult) []string { return v.WriteAttributes })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
