// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a version of a CloudFormation Type.
type CloudFormationType struct {
	pulumi.CustomResourceState

	// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type version. See also `typeArn`.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Identifier of the CloudFormation Type default version.
	DefaultVersionId pulumix.Output[string] `pulumi:"defaultVersionId"`
	// Deprecation status of the version.
	DeprecatedStatus pulumix.Output[string] `pulumi:"deprecatedStatus"`
	// Description of the version.
	Description pulumix.Output[string] `pulumi:"description"`
	// URL of the documentation for the CloudFormation Type.
	DocumentationUrl pulumix.Output[string] `pulumi:"documentationUrl"`
	// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
	ExecutionRoleArn pulumix.Output[*string] `pulumi:"executionRoleArn"`
	// Whether the CloudFormation Type version is the default version.
	IsDefaultVersion pulumix.Output[bool] `pulumi:"isDefaultVersion"`
	// Configuration block containing logging configuration.
	LoggingConfig pulumix.GPtrOutput[CloudFormationTypeLoggingConfig, CloudFormationTypeLoggingConfigOutput] `pulumi:"loggingConfig"`
	// Provisioning behavior of the CloudFormation Type.
	ProvisioningType pulumix.Output[string] `pulumi:"provisioningType"`
	// JSON document of the CloudFormation Type schema.
	Schema pulumix.Output[string] `pulumi:"schema"`
	// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
	SchemaHandlerPackage pulumix.Output[string] `pulumi:"schemaHandlerPackage"`
	// URL of the source code for the CloudFormation Type.
	SourceUrl pulumix.Output[string] `pulumi:"sourceUrl"`
	// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
	Type pulumix.Output[string] `pulumi:"type"`
	// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type. See also `arn`.
	TypeArn pulumix.Output[string] `pulumi:"typeArn"`
	// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
	TypeName pulumix.Output[string] `pulumi:"typeName"`
	// (Optional) Identifier of the CloudFormation Type version.
	VersionId pulumix.Output[string] `pulumi:"versionId"`
	// Scope of the CloudFormation Type.
	Visibility pulumix.Output[string] `pulumi:"visibility"`
}

// NewCloudFormationType registers a new resource with the given unique name, arguments, and options.
func NewCloudFormationType(ctx *pulumi.Context,
	name string, args *CloudFormationTypeArgs, opts ...pulumi.ResourceOption) (*CloudFormationType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SchemaHandlerPackage == nil {
		return nil, errors.New("invalid value for required argument 'SchemaHandlerPackage'")
	}
	if args.TypeName == nil {
		return nil, errors.New("invalid value for required argument 'TypeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudFormationType
	err := ctx.RegisterResource("aws:cloudformation/cloudFormationType:CloudFormationType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudFormationType gets an existing CloudFormationType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudFormationType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudFormationTypeState, opts ...pulumi.ResourceOption) (*CloudFormationType, error) {
	var resource CloudFormationType
	err := ctx.ReadResource("aws:cloudformation/cloudFormationType:CloudFormationType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudFormationType resources.
type cloudFormationTypeState struct {
	// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type version. See also `typeArn`.
	Arn *string `pulumi:"arn"`
	// Identifier of the CloudFormation Type default version.
	DefaultVersionId *string `pulumi:"defaultVersionId"`
	// Deprecation status of the version.
	DeprecatedStatus *string `pulumi:"deprecatedStatus"`
	// Description of the version.
	Description *string `pulumi:"description"`
	// URL of the documentation for the CloudFormation Type.
	DocumentationUrl *string `pulumi:"documentationUrl"`
	// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Whether the CloudFormation Type version is the default version.
	IsDefaultVersion *bool `pulumi:"isDefaultVersion"`
	// Configuration block containing logging configuration.
	LoggingConfig *CloudFormationTypeLoggingConfig `pulumi:"loggingConfig"`
	// Provisioning behavior of the CloudFormation Type.
	ProvisioningType *string `pulumi:"provisioningType"`
	// JSON document of the CloudFormation Type schema.
	Schema *string `pulumi:"schema"`
	// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
	SchemaHandlerPackage *string `pulumi:"schemaHandlerPackage"`
	// URL of the source code for the CloudFormation Type.
	SourceUrl *string `pulumi:"sourceUrl"`
	// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
	Type *string `pulumi:"type"`
	// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type. See also `arn`.
	TypeArn *string `pulumi:"typeArn"`
	// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
	TypeName *string `pulumi:"typeName"`
	// (Optional) Identifier of the CloudFormation Type version.
	VersionId *string `pulumi:"versionId"`
	// Scope of the CloudFormation Type.
	Visibility *string `pulumi:"visibility"`
}

type CloudFormationTypeState struct {
	// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type version. See also `typeArn`.
	Arn pulumix.Input[*string]
	// Identifier of the CloudFormation Type default version.
	DefaultVersionId pulumix.Input[*string]
	// Deprecation status of the version.
	DeprecatedStatus pulumix.Input[*string]
	// Description of the version.
	Description pulumix.Input[*string]
	// URL of the documentation for the CloudFormation Type.
	DocumentationUrl pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
	ExecutionRoleArn pulumix.Input[*string]
	// Whether the CloudFormation Type version is the default version.
	IsDefaultVersion pulumix.Input[*bool]
	// Configuration block containing logging configuration.
	LoggingConfig pulumix.Input[*CloudFormationTypeLoggingConfigArgs]
	// Provisioning behavior of the CloudFormation Type.
	ProvisioningType pulumix.Input[*string]
	// JSON document of the CloudFormation Type schema.
	Schema pulumix.Input[*string]
	// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
	SchemaHandlerPackage pulumix.Input[*string]
	// URL of the source code for the CloudFormation Type.
	SourceUrl pulumix.Input[*string]
	// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
	Type pulumix.Input[*string]
	// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type. See also `arn`.
	TypeArn pulumix.Input[*string]
	// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
	TypeName pulumix.Input[*string]
	// (Optional) Identifier of the CloudFormation Type version.
	VersionId pulumix.Input[*string]
	// Scope of the CloudFormation Type.
	Visibility pulumix.Input[*string]
}

func (CloudFormationTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudFormationTypeState)(nil)).Elem()
}

type cloudFormationTypeArgs struct {
	// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Configuration block containing logging configuration.
	LoggingConfig *CloudFormationTypeLoggingConfig `pulumi:"loggingConfig"`
	// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
	SchemaHandlerPackage string `pulumi:"schemaHandlerPackage"`
	// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
	Type *string `pulumi:"type"`
	// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
	TypeName string `pulumi:"typeName"`
}

// The set of arguments for constructing a CloudFormationType resource.
type CloudFormationTypeArgs struct {
	// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
	ExecutionRoleArn pulumix.Input[*string]
	// Configuration block containing logging configuration.
	LoggingConfig pulumix.Input[*CloudFormationTypeLoggingConfigArgs]
	// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
	SchemaHandlerPackage pulumix.Input[string]
	// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
	Type pulumix.Input[*string]
	// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
	TypeName pulumix.Input[string]
}

func (CloudFormationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudFormationTypeArgs)(nil)).Elem()
}

type CloudFormationTypeOutput struct{ *pulumi.OutputState }

func (CloudFormationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudFormationType)(nil)).Elem()
}

func (o CloudFormationTypeOutput) ToCloudFormationTypeOutput() CloudFormationTypeOutput {
	return o
}

func (o CloudFormationTypeOutput) ToCloudFormationTypeOutputWithContext(ctx context.Context) CloudFormationTypeOutput {
	return o
}

func (o CloudFormationTypeOutput) ToOutput(ctx context.Context) pulumix.Output[CloudFormationType] {
	return pulumix.Output[CloudFormationType]{
		OutputState: o.OutputState,
	}
}

// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type version. See also `typeArn`.
func (o CloudFormationTypeOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of the CloudFormation Type default version.
func (o CloudFormationTypeOutput) DefaultVersionId() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.DefaultVersionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Deprecation status of the version.
func (o CloudFormationTypeOutput) DeprecatedStatus() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.DeprecatedStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the version.
func (o CloudFormationTypeOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// URL of the documentation for the CloudFormation Type.
func (o CloudFormationTypeOutput) DocumentationUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.DocumentationUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
func (o CloudFormationTypeOutput) ExecutionRoleArn() pulumix.Output[*string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[*string] { return v.ExecutionRoleArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Whether the CloudFormation Type version is the default version.
func (o CloudFormationTypeOutput) IsDefaultVersion() pulumix.Output[bool] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[bool] { return v.IsDefaultVersion })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Configuration block containing logging configuration.
func (o CloudFormationTypeOutput) LoggingConfig() pulumix.GPtrOutput[CloudFormationTypeLoggingConfig, CloudFormationTypeLoggingConfigOutput] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.GPtrOutput[CloudFormationTypeLoggingConfig, CloudFormationTypeLoggingConfigOutput] {
		return v.LoggingConfig
	})
	unwrapped := pulumix.Flatten[*CloudFormationTypeLoggingConfig, pulumix.GPtrOutput[CloudFormationTypeLoggingConfig, CloudFormationTypeLoggingConfigOutput]](value)
	return pulumix.GPtrOutput[CloudFormationTypeLoggingConfig, CloudFormationTypeLoggingConfigOutput]{OutputState: unwrapped.OutputState}
}

// Provisioning behavior of the CloudFormation Type.
func (o CloudFormationTypeOutput) ProvisioningType() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.ProvisioningType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// JSON document of the CloudFormation Type schema.
func (o CloudFormationTypeOutput) Schema() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.Schema })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
func (o CloudFormationTypeOutput) SchemaHandlerPackage() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.SchemaHandlerPackage })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// URL of the source code for the CloudFormation Type.
func (o CloudFormationTypeOutput) SourceUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.SourceUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
func (o CloudFormationTypeOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type. See also `arn`.
func (o CloudFormationTypeOutput) TypeArn() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.TypeArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
func (o CloudFormationTypeOutput) TypeName() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.TypeName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// (Optional) Identifier of the CloudFormation Type version.
func (o CloudFormationTypeOutput) VersionId() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.VersionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Scope of the CloudFormation Type.
func (o CloudFormationTypeOutput) Visibility() pulumix.Output[string] {
	value := pulumix.Apply[CloudFormationType](o, func(v CloudFormationType) pulumix.Output[string] { return v.Visibility })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudFormationTypeOutput{})
}
