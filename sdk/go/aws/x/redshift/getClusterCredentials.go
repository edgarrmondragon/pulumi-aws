// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides redshift cluster temporary credentials.
func GetClusterCredentials(ctx *pulumi.Context, args *GetClusterCredentialsArgs, opts ...pulumi.InvokeOption) (*GetClusterCredentialsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClusterCredentialsResult
	err := ctx.Invoke("aws:redshift/getClusterCredentials:getClusterCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterCredentials.
type GetClusterCredentialsArgs struct {
	// Create a database user with the name specified for the user named in `dbUser` if one does not exist.
	AutoCreate *bool `pulumi:"autoCreate"`
	// Unique identifier of the cluster that contains the database for which your are requesting credentials.
	ClusterIdentifier string `pulumi:"clusterIdentifier"`
	// List of the names of existing database groups that the user named in `dbUser` will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to `PUBLIC`.
	DbGroups []string `pulumi:"dbGroups"`
	// Name of a database that DbUser is authorized to log on to. If `dbName` is not specified, `dbUser` can log on to any existing database.
	DbName *string `pulumi:"dbName"`
	// Name of a database user. If a user name matching `dbUser` exists in the database, the temporary user credentials have the same permissions as the  existing user. If `dbUser` doesn't exist in the database and `autoCreate` is `True`, a new user is created using the value for `dbUser` with `PUBLIC` permissions.  If a database user matching the value for `dbUser` doesn't exist and `not` is `False`, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.
	DbUser string `pulumi:"dbUser"`
	// The number of seconds until the returned temporary password expires. Valid values are between `900` and `3600`. Default value is `900`.
	DurationSeconds *int `pulumi:"durationSeconds"`
}

// A collection of values returned by getClusterCredentials.
type GetClusterCredentialsResult struct {
	AutoCreate        *bool    `pulumi:"autoCreate"`
	ClusterIdentifier string   `pulumi:"clusterIdentifier"`
	DbGroups          []string `pulumi:"dbGroups"`
	DbName            *string  `pulumi:"dbName"`
	// Temporary password that authorizes the user name returned by `dbUser` to log on to the database `dbName`.
	DbPassword      string `pulumi:"dbPassword"`
	DbUser          string `pulumi:"dbUser"`
	DurationSeconds *int   `pulumi:"durationSeconds"`
	// Date and time the password in `dbPassword` expires.
	Expiration string `pulumi:"expiration"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetClusterCredentialsOutput(ctx *pulumi.Context, args GetClusterCredentialsOutputArgs, opts ...pulumi.InvokeOption) GetClusterCredentialsResultOutput {
	outputResult := pulumix.ApplyErr[*GetClusterCredentialsArgs](args.ToOutput(), func(plainArgs *GetClusterCredentialsArgs) (*GetClusterCredentialsResult, error) {
		return GetClusterCredentials(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetClusterCredentialsResultOutput, *GetClusterCredentialsResult](outputResult)
}

// A collection of arguments for invoking getClusterCredentials.
type GetClusterCredentialsOutputArgs struct {
	// Create a database user with the name specified for the user named in `dbUser` if one does not exist.
	AutoCreate pulumix.Input[*bool] `pulumi:"autoCreate"`
	// Unique identifier of the cluster that contains the database for which your are requesting credentials.
	ClusterIdentifier pulumix.Input[string] `pulumi:"clusterIdentifier"`
	// List of the names of existing database groups that the user named in `dbUser` will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to `PUBLIC`.
	DbGroups pulumix.Input[[]string] `pulumi:"dbGroups"`
	// Name of a database that DbUser is authorized to log on to. If `dbName` is not specified, `dbUser` can log on to any existing database.
	DbName pulumix.Input[*string] `pulumi:"dbName"`
	// Name of a database user. If a user name matching `dbUser` exists in the database, the temporary user credentials have the same permissions as the  existing user. If `dbUser` doesn't exist in the database and `autoCreate` is `True`, a new user is created using the value for `dbUser` with `PUBLIC` permissions.  If a database user matching the value for `dbUser` doesn't exist and `not` is `False`, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.
	DbUser pulumix.Input[string] `pulumi:"dbUser"`
	// The number of seconds until the returned temporary password expires. Valid values are between `900` and `3600`. Default value is `900`.
	DurationSeconds pulumix.Input[*int] `pulumi:"durationSeconds"`
}

func (args GetClusterCredentialsOutputArgs) ToOutput() pulumix.Output[*GetClusterCredentialsArgs] {
	allArgs := pulumix.All(
		args.AutoCreate.ToOutput(context.Background()).AsAny(),
		args.ClusterIdentifier.ToOutput(context.Background()).AsAny(),
		args.DbGroups.ToOutput(context.Background()).AsAny(),
		args.DbName.ToOutput(context.Background()).AsAny(),
		args.DbUser.ToOutput(context.Background()).AsAny(),
		args.DurationSeconds.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetClusterCredentialsArgs {
		return &GetClusterCredentialsArgs{
			AutoCreate:        resolvedArgs[0].(*bool),
			ClusterIdentifier: resolvedArgs[1].(string),
			DbGroups:          resolvedArgs[2].([]string),
			DbName:            resolvedArgs[3].(*string),
			DbUser:            resolvedArgs[4].(string),
			DurationSeconds:   resolvedArgs[5].(*int),
		}
	})
}

type GetClusterCredentialsResultOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialsResult)(nil)).Elem()
}

func (o GetClusterCredentialsResultOutput) ToOutput(context.Context) pulumix.Output[*GetClusterCredentialsResult] {
	return pulumix.Output[*GetClusterCredentialsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterCredentialsResultOutput) AutoCreate() pulumix.Output[*bool] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) *bool { return v.AutoCreate })
}

func (o GetClusterCredentialsResultOutput) ClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) string { return v.ClusterIdentifier })
}

func (o GetClusterCredentialsResultOutput) DbGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) []string { return v.DbGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetClusterCredentialsResultOutput) DbName() pulumix.Output[*string] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) *string { return v.DbName })
}

func (o GetClusterCredentialsResultOutput) DbPassword() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) string { return v.DbPassword })
}

func (o GetClusterCredentialsResultOutput) DbUser() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) string { return v.DbUser })
}

func (o GetClusterCredentialsResultOutput) DurationSeconds() pulumix.Output[*int] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) *int { return v.DurationSeconds })
}

func (o GetClusterCredentialsResultOutput) Expiration() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) string { return v.Expiration })
}

func (o GetClusterCredentialsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterCredentialsResult](o, func(v *GetClusterCredentialsResult) string { return v.Id })
}
