// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Resource Access Manager (RAM) Resource Share. To associate principals with the share, see the `ram.PrincipalAssociation` resource. To associate resources with the share, see the `ram.ResourceAssociation` resource.
type ResourceShare struct {
	pulumi.CustomResourceState

	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals pulumix.Output[*bool] `pulumi:"allowExternalPrincipals"`
	// The Amazon Resource Name (ARN) of the resource share.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name of the resource share.
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	PermissionArns pulumix.ArrayOutput[string] `pulumi:"permissionArns"`
	// A map of tags to assign to the resource share. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewResourceShare registers a new resource with the given unique name, arguments, and options.
func NewResourceShare(ctx *pulumi.Context,
	name string, args *ResourceShareArgs, opts ...pulumi.ResourceOption) (*ResourceShare, error) {
	if args == nil {
		args = &ResourceShareArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceShare
	err := ctx.RegisterResource("aws:ram/resourceShare:ResourceShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceShare gets an existing ResourceShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceShareState, opts ...pulumi.ResourceOption) (*ResourceShare, error) {
	var resource ResourceShare
	err := ctx.ReadResource("aws:ram/resourceShare:ResourceShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceShare resources.
type resourceShareState struct {
	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals *bool `pulumi:"allowExternalPrincipals"`
	// The Amazon Resource Name (ARN) of the resource share.
	Arn *string `pulumi:"arn"`
	// The name of the resource share.
	Name *string `pulumi:"name"`
	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	PermissionArns []string `pulumi:"permissionArns"`
	// A map of tags to assign to the resource share. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type ResourceShareState struct {
	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals pulumix.Input[*bool]
	// The Amazon Resource Name (ARN) of the resource share.
	Arn pulumix.Input[*string]
	// The name of the resource share.
	Name pulumix.Input[*string]
	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	PermissionArns pulumix.Input[[]string]
	// A map of tags to assign to the resource share. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (ResourceShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceShareState)(nil)).Elem()
}

type resourceShareArgs struct {
	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals *bool `pulumi:"allowExternalPrincipals"`
	// The name of the resource share.
	Name *string `pulumi:"name"`
	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	PermissionArns []string `pulumi:"permissionArns"`
	// A map of tags to assign to the resource share. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ResourceShare resource.
type ResourceShareArgs struct {
	// Indicates whether principals outside your organization can be associated with a resource share.
	AllowExternalPrincipals pulumix.Input[*bool]
	// The name of the resource share.
	Name pulumix.Input[*string]
	// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
	PermissionArns pulumix.Input[[]string]
	// A map of tags to assign to the resource share. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (ResourceShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceShareArgs)(nil)).Elem()
}

type ResourceShareOutput struct{ *pulumi.OutputState }

func (ResourceShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceShare)(nil)).Elem()
}

func (o ResourceShareOutput) ToResourceShareOutput() ResourceShareOutput {
	return o
}

func (o ResourceShareOutput) ToResourceShareOutputWithContext(ctx context.Context) ResourceShareOutput {
	return o
}

func (o ResourceShareOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceShare] {
	return pulumix.Output[ResourceShare]{
		OutputState: o.OutputState,
	}
}

// Indicates whether principals outside your organization can be associated with a resource share.
func (o ResourceShareOutput) AllowExternalPrincipals() pulumix.Output[*bool] {
	value := pulumix.Apply[ResourceShare](o, func(v ResourceShare) pulumix.Output[*bool] { return v.AllowExternalPrincipals })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The Amazon Resource Name (ARN) of the resource share.
func (o ResourceShareOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShare](o, func(v ResourceShare) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the resource share.
func (o ResourceShareOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ResourceShare](o, func(v ResourceShare) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the Amazon Resource Names (ARNs) of the RAM permission to associate with the resource share. If you do not specify an ARN for the permission, RAM automatically attaches the default version of the permission for each resource type. You can associate only one permission with each resource type included in the resource share.
func (o ResourceShareOutput) PermissionArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ResourceShare](o, func(v ResourceShare) pulumix.ArrayOutput[string] { return v.PermissionArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the resource share. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ResourceShareOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResourceShare](o, func(v ResourceShare) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ResourceShareOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ResourceShare](o, func(v ResourceShare) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ResourceShareOutput{})
}
