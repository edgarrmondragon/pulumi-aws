// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a WAF SQL Injection Match Set Resource
type SqlInjectionMatchSet struct {
	pulumi.CustomResourceState

	// The name or description of the SQL Injection Match Set.
	Name pulumix.Output[string] `pulumi:"name"`
	// The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
	SqlInjectionMatchTuples pulumix.GArrayOutput[SqlInjectionMatchSetSqlInjectionMatchTuple, SqlInjectionMatchSetSqlInjectionMatchTupleOutput] `pulumi:"sqlInjectionMatchTuples"`
}

// NewSqlInjectionMatchSet registers a new resource with the given unique name, arguments, and options.
func NewSqlInjectionMatchSet(ctx *pulumi.Context,
	name string, args *SqlInjectionMatchSetArgs, opts ...pulumi.ResourceOption) (*SqlInjectionMatchSet, error) {
	if args == nil {
		args = &SqlInjectionMatchSetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlInjectionMatchSet
	err := ctx.RegisterResource("aws:waf/sqlInjectionMatchSet:SqlInjectionMatchSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlInjectionMatchSet gets an existing SqlInjectionMatchSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlInjectionMatchSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlInjectionMatchSetState, opts ...pulumi.ResourceOption) (*SqlInjectionMatchSet, error) {
	var resource SqlInjectionMatchSet
	err := ctx.ReadResource("aws:waf/sqlInjectionMatchSet:SqlInjectionMatchSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlInjectionMatchSet resources.
type sqlInjectionMatchSetState struct {
	// The name or description of the SQL Injection Match Set.
	Name *string `pulumi:"name"`
	// The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
	SqlInjectionMatchTuples []SqlInjectionMatchSetSqlInjectionMatchTuple `pulumi:"sqlInjectionMatchTuples"`
}

type SqlInjectionMatchSetState struct {
	// The name or description of the SQL Injection Match Set.
	Name pulumix.Input[*string]
	// The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
	SqlInjectionMatchTuples pulumix.Input[[]*SqlInjectionMatchSetSqlInjectionMatchTupleArgs]
}

func (SqlInjectionMatchSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlInjectionMatchSetState)(nil)).Elem()
}

type sqlInjectionMatchSetArgs struct {
	// The name or description of the SQL Injection Match Set.
	Name *string `pulumi:"name"`
	// The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
	SqlInjectionMatchTuples []SqlInjectionMatchSetSqlInjectionMatchTuple `pulumi:"sqlInjectionMatchTuples"`
}

// The set of arguments for constructing a SqlInjectionMatchSet resource.
type SqlInjectionMatchSetArgs struct {
	// The name or description of the SQL Injection Match Set.
	Name pulumix.Input[*string]
	// The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
	SqlInjectionMatchTuples pulumix.Input[[]*SqlInjectionMatchSetSqlInjectionMatchTupleArgs]
}

func (SqlInjectionMatchSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlInjectionMatchSetArgs)(nil)).Elem()
}

type SqlInjectionMatchSetOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSet)(nil)).Elem()
}

func (o SqlInjectionMatchSetOutput) ToSqlInjectionMatchSetOutput() SqlInjectionMatchSetOutput {
	return o
}

func (o SqlInjectionMatchSetOutput) ToSqlInjectionMatchSetOutputWithContext(ctx context.Context) SqlInjectionMatchSetOutput {
	return o
}

func (o SqlInjectionMatchSetOutput) ToOutput(ctx context.Context) pulumix.Output[SqlInjectionMatchSet] {
	return pulumix.Output[SqlInjectionMatchSet]{
		OutputState: o.OutputState,
	}
}

// The name or description of the SQL Injection Match Set.
func (o SqlInjectionMatchSetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SqlInjectionMatchSet](o, func(v SqlInjectionMatchSet) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
func (o SqlInjectionMatchSetOutput) SqlInjectionMatchTuples() pulumix.GArrayOutput[SqlInjectionMatchSetSqlInjectionMatchTuple, SqlInjectionMatchSetSqlInjectionMatchTupleOutput] {
	value := pulumix.Apply[SqlInjectionMatchSet](o, func(v SqlInjectionMatchSet) pulumix.GArrayOutput[SqlInjectionMatchSetSqlInjectionMatchTuple, SqlInjectionMatchSetSqlInjectionMatchTupleOutput] {
		return v.SqlInjectionMatchTuples
	})
	unwrapped := pulumix.Flatten[[]SqlInjectionMatchSetSqlInjectionMatchTuple, pulumix.GArrayOutput[SqlInjectionMatchSetSqlInjectionMatchTuple, SqlInjectionMatchSetSqlInjectionMatchTupleOutput]](value)
	return pulumix.GArrayOutput[SqlInjectionMatchSetSqlInjectionMatchTuple, SqlInjectionMatchSetSqlInjectionMatchTupleOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SqlInjectionMatchSetOutput{})
}
