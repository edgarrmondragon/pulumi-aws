// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use the `awsKendraIndexBlockList` resource to manage an AWS Kendra block list used for query suggestions for an index.
type QuerySuggestionsBlockList struct {
	pulumi.CustomResourceState

	// ARN of the block list.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description for a block list.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Identifier of the index for a block list.
	IndexId pulumix.Output[string] `pulumi:"indexId"`
	// Name for the block list.
	Name pulumix.Output[string] `pulumi:"name"`
	// Unique identifier of the block list.
	QuerySuggestionsBlockListId pulumix.Output[string] `pulumi:"querySuggestionsBlockListId"`
	// IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// S3 path where your block list text file is located. See details below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path pulumix.GPtrOutput[QuerySuggestionsBlockListSourceS3Path, QuerySuggestionsBlockListSourceS3PathOutput] `pulumi:"sourceS3Path"`
	Status       pulumix.Output[string]                                                                                 `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider's defaultTags configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewQuerySuggestionsBlockList registers a new resource with the given unique name, arguments, and options.
func NewQuerySuggestionsBlockList(ctx *pulumi.Context,
	name string, args *QuerySuggestionsBlockListArgs, opts ...pulumi.ResourceOption) (*QuerySuggestionsBlockList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.SourceS3Path == nil {
		return nil, errors.New("invalid value for required argument 'SourceS3Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QuerySuggestionsBlockList
	err := ctx.RegisterResource("aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuerySuggestionsBlockList gets an existing QuerySuggestionsBlockList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuerySuggestionsBlockList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuerySuggestionsBlockListState, opts ...pulumi.ResourceOption) (*QuerySuggestionsBlockList, error) {
	var resource QuerySuggestionsBlockList
	err := ctx.ReadResource("aws:kendra/querySuggestionsBlockList:QuerySuggestionsBlockList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuerySuggestionsBlockList resources.
type querySuggestionsBlockListState struct {
	// ARN of the block list.
	Arn *string `pulumi:"arn"`
	// Description for a block list.
	Description *string `pulumi:"description"`
	// Identifier of the index for a block list.
	IndexId *string `pulumi:"indexId"`
	// Name for the block list.
	Name *string `pulumi:"name"`
	// Unique identifier of the block list.
	QuerySuggestionsBlockListId *string `pulumi:"querySuggestionsBlockListId"`
	// IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn *string `pulumi:"roleArn"`
	// S3 path where your block list text file is located. See details below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path *QuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Path"`
	Status       *string                                `pulumi:"status"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider's defaultTags configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type QuerySuggestionsBlockListState struct {
	// ARN of the block list.
	Arn pulumix.Input[*string]
	// Description for a block list.
	Description pulumix.Input[*string]
	// Identifier of the index for a block list.
	IndexId pulumix.Input[*string]
	// Name for the block list.
	Name pulumix.Input[*string]
	// Unique identifier of the block list.
	QuerySuggestionsBlockListId pulumix.Input[*string]
	// IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn pulumix.Input[*string]
	// S3 path where your block list text file is located. See details below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path pulumix.Input[*QuerySuggestionsBlockListSourceS3PathArgs]
	Status       pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider's defaultTags configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (QuerySuggestionsBlockListState) ElementType() reflect.Type {
	return reflect.TypeOf((*querySuggestionsBlockListState)(nil)).Elem()
}

type querySuggestionsBlockListArgs struct {
	// Description for a block list.
	Description *string `pulumi:"description"`
	// Identifier of the index for a block list.
	IndexId string `pulumi:"indexId"`
	// Name for the block list.
	Name *string `pulumi:"name"`
	// IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn string `pulumi:"roleArn"`
	// S3 path where your block list text file is located. See details below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path QuerySuggestionsBlockListSourceS3Path `pulumi:"sourceS3Path"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a QuerySuggestionsBlockList resource.
type QuerySuggestionsBlockListArgs struct {
	// Description for a block list.
	Description pulumix.Input[*string]
	// Identifier of the index for a block list.
	IndexId pulumix.Input[string]
	// Name for the block list.
	Name pulumix.Input[*string]
	// IAM (Identity and Access Management) role used to access the block list text file in S3.
	RoleArn pulumix.Input[string]
	// S3 path where your block list text file is located. See details below.
	//
	// The `sourceS3Path` configuration block supports the following arguments:
	SourceS3Path pulumix.Input[*QuerySuggestionsBlockListSourceS3PathArgs]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (QuerySuggestionsBlockListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*querySuggestionsBlockListArgs)(nil)).Elem()
}

type QuerySuggestionsBlockListOutput struct{ *pulumi.OutputState }

func (QuerySuggestionsBlockListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySuggestionsBlockList)(nil)).Elem()
}

func (o QuerySuggestionsBlockListOutput) ToQuerySuggestionsBlockListOutput() QuerySuggestionsBlockListOutput {
	return o
}

func (o QuerySuggestionsBlockListOutput) ToQuerySuggestionsBlockListOutputWithContext(ctx context.Context) QuerySuggestionsBlockListOutput {
	return o
}

func (o QuerySuggestionsBlockListOutput) ToOutput(ctx context.Context) pulumix.Output[QuerySuggestionsBlockList] {
	return pulumix.Output[QuerySuggestionsBlockList]{
		OutputState: o.OutputState,
	}
}

// ARN of the block list.
func (o QuerySuggestionsBlockListOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description for a block list.
func (o QuerySuggestionsBlockListOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of the index for a block list.
func (o QuerySuggestionsBlockListOutput) IndexId() pulumix.Output[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[string] { return v.IndexId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name for the block list.
func (o QuerySuggestionsBlockListOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique identifier of the block list.
func (o QuerySuggestionsBlockListOutput) QuerySuggestionsBlockListId() pulumix.Output[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[string] { return v.QuerySuggestionsBlockListId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IAM (Identity and Access Management) role used to access the block list text file in S3.
func (o QuerySuggestionsBlockListOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// S3 path where your block list text file is located. See details below.
//
// The `sourceS3Path` configuration block supports the following arguments:
func (o QuerySuggestionsBlockListOutput) SourceS3Path() pulumix.GPtrOutput[QuerySuggestionsBlockListSourceS3Path, QuerySuggestionsBlockListSourceS3PathOutput] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.GPtrOutput[QuerySuggestionsBlockListSourceS3Path, QuerySuggestionsBlockListSourceS3PathOutput] {
		return v.SourceS3Path
	})
	unwrapped := pulumix.Flatten[*QuerySuggestionsBlockListSourceS3Path, pulumix.GPtrOutput[QuerySuggestionsBlockListSourceS3Path, QuerySuggestionsBlockListSourceS3PathOutput]](value)
	return pulumix.GPtrOutput[QuerySuggestionsBlockListSourceS3Path, QuerySuggestionsBlockListSourceS3PathOutput]{OutputState: unwrapped.OutputState}
}

func (o QuerySuggestionsBlockListOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block, tags with matching keys will overwrite those defined at the provider-level.
func (o QuerySuggestionsBlockListOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider's defaultTags configuration block.
func (o QuerySuggestionsBlockListOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[QuerySuggestionsBlockList](o, func(v QuerySuggestionsBlockList) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(QuerySuggestionsBlockListOutput{})
}
