// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type FrameworkControl struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters []FrameworkControlInputParameter `pulumi:"inputParameters"`
	// The name of a control. This name is between 1 and 256 characters.
	Name string `pulumi:"name"`
	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scope *FrameworkControlScope `pulumi:"scope"`
}

type FrameworkControlArgs struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters pulumix.Input[[]*FrameworkControlInputParameterArgs] `pulumi:"inputParameters"`
	// The name of a control. This name is between 1 and 256 characters.
	Name pulumix.Input[string] `pulumi:"name"`
	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scope pulumix.Input[*FrameworkControlScopeArgs] `pulumi:"scope"`
}

func (FrameworkControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControl)(nil)).Elem()
}

func (i FrameworkControlArgs) ToFrameworkControlOutput() FrameworkControlOutput {
	return i.ToFrameworkControlOutputWithContext(context.Background())
}

func (i FrameworkControlArgs) ToFrameworkControlOutputWithContext(ctx context.Context) FrameworkControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlOutput)
}

func (i *FrameworkControlArgs) ToOutput(ctx context.Context) pulumix.Output[*FrameworkControlArgs] {
	return pulumix.Val(i)
}

type FrameworkControlOutput struct{ *pulumi.OutputState }

func (FrameworkControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControl)(nil)).Elem()
}

func (o FrameworkControlOutput) ToFrameworkControlOutput() FrameworkControlOutput {
	return o
}

func (o FrameworkControlOutput) ToFrameworkControlOutputWithContext(ctx context.Context) FrameworkControlOutput {
	return o
}

func (o FrameworkControlOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControl] {
	return pulumix.Output[FrameworkControl]{
		OutputState: o.OutputState,
	}
}

// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
func (o FrameworkControlOutput) InputParameters() pulumix.GArrayOutput[FrameworkControlInputParameter, FrameworkControlInputParameterOutput] {
	value := pulumix.Apply[FrameworkControl](o, func(v FrameworkControl) []FrameworkControlInputParameter { return v.InputParameters })
	return pulumix.GArrayOutput[FrameworkControlInputParameter, FrameworkControlInputParameterOutput]{OutputState: value.OutputState}
}

// The name of a control. This name is between 1 and 256 characters.
func (o FrameworkControlOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[FrameworkControl](o, func(v FrameworkControl) string { return v.Name })
}

// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
func (o FrameworkControlOutput) Scope() pulumix.GPtrOutput[FrameworkControlScope, FrameworkControlScopeOutput] {
	value := pulumix.Apply[FrameworkControl](o, func(v FrameworkControl) *FrameworkControlScope { return v.Scope })
	return pulumix.GPtrOutput[FrameworkControlScope, FrameworkControlScopeOutput]{OutputState: value.OutputState}
}

type FrameworkControlInputParameter struct {
	// The name of a parameter, for example, BackupPlanFrequency.
	Name *string `pulumi:"name"`
	// The value of parameter, for example, hourly.
	Value *string `pulumi:"value"`
}

type FrameworkControlInputParameterArgs struct {
	// The name of a parameter, for example, BackupPlanFrequency.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The value of parameter, for example, hourly.
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (FrameworkControlInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlInputParameter)(nil)).Elem()
}

func (i FrameworkControlInputParameterArgs) ToFrameworkControlInputParameterOutput() FrameworkControlInputParameterOutput {
	return i.ToFrameworkControlInputParameterOutputWithContext(context.Background())
}

func (i FrameworkControlInputParameterArgs) ToFrameworkControlInputParameterOutputWithContext(ctx context.Context) FrameworkControlInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlInputParameterOutput)
}

func (i *FrameworkControlInputParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*FrameworkControlInputParameterArgs] {
	return pulumix.Val(i)
}

type FrameworkControlInputParameterOutput struct{ *pulumi.OutputState }

func (FrameworkControlInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlInputParameter)(nil)).Elem()
}

func (o FrameworkControlInputParameterOutput) ToFrameworkControlInputParameterOutput() FrameworkControlInputParameterOutput {
	return o
}

func (o FrameworkControlInputParameterOutput) ToFrameworkControlInputParameterOutputWithContext(ctx context.Context) FrameworkControlInputParameterOutput {
	return o
}

func (o FrameworkControlInputParameterOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlInputParameter] {
	return pulumix.Output[FrameworkControlInputParameter]{
		OutputState: o.OutputState,
	}
}

// The name of a parameter, for example, BackupPlanFrequency.
func (o FrameworkControlInputParameterOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[FrameworkControlInputParameter](o, func(v FrameworkControlInputParameter) *string { return v.Name })
}

// The value of parameter, for example, hourly.
func (o FrameworkControlInputParameterOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[FrameworkControlInputParameter](o, func(v FrameworkControlInputParameter) *string { return v.Value })
}

type FrameworkControlScope struct {
	// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
	ComplianceResourceIds []string `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes []string `pulumi:"complianceResourceTypes"`
	// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags map[string]string `pulumi:"tags"`
}

type FrameworkControlScopeArgs struct {
	// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
	ComplianceResourceIds pulumix.Input[[]string] `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes pulumix.Input[[]string] `pulumi:"complianceResourceTypes"`
	// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (FrameworkControlScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlScope)(nil)).Elem()
}

func (i FrameworkControlScopeArgs) ToFrameworkControlScopeOutput() FrameworkControlScopeOutput {
	return i.ToFrameworkControlScopeOutputWithContext(context.Background())
}

func (i FrameworkControlScopeArgs) ToFrameworkControlScopeOutputWithContext(ctx context.Context) FrameworkControlScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkControlScopeOutput)
}

func (i *FrameworkControlScopeArgs) ToOutput(ctx context.Context) pulumix.Output[*FrameworkControlScopeArgs] {
	return pulumix.Val(i)
}

type FrameworkControlScopeOutput struct{ *pulumi.OutputState }

func (FrameworkControlScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrameworkControlScope)(nil)).Elem()
}

func (o FrameworkControlScopeOutput) ToFrameworkControlScopeOutput() FrameworkControlScopeOutput {
	return o
}

func (o FrameworkControlScopeOutput) ToFrameworkControlScopeOutputWithContext(ctx context.Context) FrameworkControlScopeOutput {
	return o
}

func (o FrameworkControlScopeOutput) ToOutput(ctx context.Context) pulumix.Output[FrameworkControlScope] {
	return pulumix.Output[FrameworkControlScope]{
		OutputState: o.OutputState,
	}
}

// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
func (o FrameworkControlScopeOutput) ComplianceResourceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FrameworkControlScope](o, func(v FrameworkControlScope) []string { return v.ComplianceResourceIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
func (o FrameworkControlScopeOutput) ComplianceResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FrameworkControlScope](o, func(v FrameworkControlScope) []string { return v.ComplianceResourceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
func (o FrameworkControlScopeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[FrameworkControlScope](o, func(v FrameworkControlScope) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type PlanAdvancedBackupSetting struct {
	// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
	BackupOptions map[string]string `pulumi:"backupOptions"`
	// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
	ResourceType string `pulumi:"resourceType"`
}

type PlanAdvancedBackupSettingArgs struct {
	// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
	BackupOptions pulumix.Input[map[string]string] `pulumi:"backupOptions"`
	// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
	ResourceType pulumix.Input[string] `pulumi:"resourceType"`
}

func (PlanAdvancedBackupSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAdvancedBackupSetting)(nil)).Elem()
}

func (i PlanAdvancedBackupSettingArgs) ToPlanAdvancedBackupSettingOutput() PlanAdvancedBackupSettingOutput {
	return i.ToPlanAdvancedBackupSettingOutputWithContext(context.Background())
}

func (i PlanAdvancedBackupSettingArgs) ToPlanAdvancedBackupSettingOutputWithContext(ctx context.Context) PlanAdvancedBackupSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAdvancedBackupSettingOutput)
}

func (i *PlanAdvancedBackupSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanAdvancedBackupSettingArgs] {
	return pulumix.Val(i)
}

type PlanAdvancedBackupSettingOutput struct{ *pulumi.OutputState }

func (PlanAdvancedBackupSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAdvancedBackupSetting)(nil)).Elem()
}

func (o PlanAdvancedBackupSettingOutput) ToPlanAdvancedBackupSettingOutput() PlanAdvancedBackupSettingOutput {
	return o
}

func (o PlanAdvancedBackupSettingOutput) ToPlanAdvancedBackupSettingOutputWithContext(ctx context.Context) PlanAdvancedBackupSettingOutput {
	return o
}

func (o PlanAdvancedBackupSettingOutput) ToOutput(ctx context.Context) pulumix.Output[PlanAdvancedBackupSetting] {
	return pulumix.Output[PlanAdvancedBackupSetting]{
		OutputState: o.OutputState,
	}
}

// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
func (o PlanAdvancedBackupSettingOutput) BackupOptions() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlanAdvancedBackupSetting](o, func(v PlanAdvancedBackupSetting) map[string]string { return v.BackupOptions })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
func (o PlanAdvancedBackupSettingOutput) ResourceType() pulumix.Output[string] {
	return pulumix.Apply[PlanAdvancedBackupSetting](o, func(v PlanAdvancedBackupSetting) string { return v.ResourceType })
}

type PlanRule struct {
	// The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
	CompletionWindow *int `pulumi:"completionWindow"`
	// Configuration block(s) with copy operation settings. Detailed below.
	CopyActions []PlanRuleCopyAction `pulumi:"copyActions"`
	// Enable continuous backups for supported resources.
	EnableContinuousBackup *bool `pulumi:"enableContinuousBackup"`
	// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
	Lifecycle *PlanRuleLifecycle `pulumi:"lifecycle"`
	// Metadata that you can assign to help organize the resources that you create.
	RecoveryPointTags map[string]string `pulumi:"recoveryPointTags"`
	// An display name for a backup rule.
	RuleName string `pulumi:"ruleName"`
	// A CRON expression specifying when AWS Backup initiates a backup job.
	Schedule *string `pulumi:"schedule"`
	// The amount of time in minutes before beginning a backup.
	StartWindow *int `pulumi:"startWindow"`
	// The name of a logical container where backups are stored.
	TargetVaultName string `pulumi:"targetVaultName"`
}

type PlanRuleArgs struct {
	// The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
	CompletionWindow pulumix.Input[*int] `pulumi:"completionWindow"`
	// Configuration block(s) with copy operation settings. Detailed below.
	CopyActions pulumix.Input[[]*PlanRuleCopyActionArgs] `pulumi:"copyActions"`
	// Enable continuous backups for supported resources.
	EnableContinuousBackup pulumix.Input[*bool] `pulumi:"enableContinuousBackup"`
	// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
	Lifecycle pulumix.Input[*PlanRuleLifecycleArgs] `pulumi:"lifecycle"`
	// Metadata that you can assign to help organize the resources that you create.
	RecoveryPointTags pulumix.Input[map[string]string] `pulumi:"recoveryPointTags"`
	// An display name for a backup rule.
	RuleName pulumix.Input[string] `pulumi:"ruleName"`
	// A CRON expression specifying when AWS Backup initiates a backup job.
	Schedule pulumix.Input[*string] `pulumi:"schedule"`
	// The amount of time in minutes before beginning a backup.
	StartWindow pulumix.Input[*int] `pulumi:"startWindow"`
	// The name of a logical container where backups are stored.
	TargetVaultName pulumix.Input[string] `pulumi:"targetVaultName"`
}

func (PlanRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRule)(nil)).Elem()
}

func (i PlanRuleArgs) ToPlanRuleOutput() PlanRuleOutput {
	return i.ToPlanRuleOutputWithContext(context.Background())
}

func (i PlanRuleArgs) ToPlanRuleOutputWithContext(ctx context.Context) PlanRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleOutput)
}

func (i *PlanRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanRuleArgs] {
	return pulumix.Val(i)
}

type PlanRuleOutput struct{ *pulumi.OutputState }

func (PlanRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRule)(nil)).Elem()
}

func (o PlanRuleOutput) ToPlanRuleOutput() PlanRuleOutput {
	return o
}

func (o PlanRuleOutput) ToPlanRuleOutputWithContext(ctx context.Context) PlanRuleOutput {
	return o
}

func (o PlanRuleOutput) ToOutput(ctx context.Context) pulumix.Output[PlanRule] {
	return pulumix.Output[PlanRule]{
		OutputState: o.OutputState,
	}
}

// The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
func (o PlanRuleOutput) CompletionWindow() pulumix.Output[*int] {
	return pulumix.Apply[PlanRule](o, func(v PlanRule) *int { return v.CompletionWindow })
}

// Configuration block(s) with copy operation settings. Detailed below.
func (o PlanRuleOutput) CopyActions() pulumix.GArrayOutput[PlanRuleCopyAction, PlanRuleCopyActionOutput] {
	value := pulumix.Apply[PlanRule](o, func(v PlanRule) []PlanRuleCopyAction { return v.CopyActions })
	return pulumix.GArrayOutput[PlanRuleCopyAction, PlanRuleCopyActionOutput]{OutputState: value.OutputState}
}

// Enable continuous backups for supported resources.
func (o PlanRuleOutput) EnableContinuousBackup() pulumix.Output[*bool] {
	return pulumix.Apply[PlanRule](o, func(v PlanRule) *bool { return v.EnableContinuousBackup })
}

// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
func (o PlanRuleOutput) Lifecycle() pulumix.GPtrOutput[PlanRuleLifecycle, PlanRuleLifecycleOutput] {
	value := pulumix.Apply[PlanRule](o, func(v PlanRule) *PlanRuleLifecycle { return v.Lifecycle })
	return pulumix.GPtrOutput[PlanRuleLifecycle, PlanRuleLifecycleOutput]{OutputState: value.OutputState}
}

// Metadata that you can assign to help organize the resources that you create.
func (o PlanRuleOutput) RecoveryPointTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[PlanRule](o, func(v PlanRule) map[string]string { return v.RecoveryPointTags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// An display name for a backup rule.
func (o PlanRuleOutput) RuleName() pulumix.Output[string] {
	return pulumix.Apply[PlanRule](o, func(v PlanRule) string { return v.RuleName })
}

// A CRON expression specifying when AWS Backup initiates a backup job.
func (o PlanRuleOutput) Schedule() pulumix.Output[*string] {
	return pulumix.Apply[PlanRule](o, func(v PlanRule) *string { return v.Schedule })
}

// The amount of time in minutes before beginning a backup.
func (o PlanRuleOutput) StartWindow() pulumix.Output[*int] {
	return pulumix.Apply[PlanRule](o, func(v PlanRule) *int { return v.StartWindow })
}

// The name of a logical container where backups are stored.
func (o PlanRuleOutput) TargetVaultName() pulumix.Output[string] {
	return pulumix.Apply[PlanRule](o, func(v PlanRule) string { return v.TargetVaultName })
}

type PlanRuleCopyAction struct {
	// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
	DestinationVaultArn string `pulumi:"destinationVaultArn"`
	// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
	Lifecycle *PlanRuleCopyActionLifecycle `pulumi:"lifecycle"`
}

type PlanRuleCopyActionArgs struct {
	// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
	DestinationVaultArn pulumix.Input[string] `pulumi:"destinationVaultArn"`
	// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
	Lifecycle pulumix.Input[*PlanRuleCopyActionLifecycleArgs] `pulumi:"lifecycle"`
}

func (PlanRuleCopyActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyAction)(nil)).Elem()
}

func (i PlanRuleCopyActionArgs) ToPlanRuleCopyActionOutput() PlanRuleCopyActionOutput {
	return i.ToPlanRuleCopyActionOutputWithContext(context.Background())
}

func (i PlanRuleCopyActionArgs) ToPlanRuleCopyActionOutputWithContext(ctx context.Context) PlanRuleCopyActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionOutput)
}

func (i *PlanRuleCopyActionArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanRuleCopyActionArgs] {
	return pulumix.Val(i)
}

type PlanRuleCopyActionOutput struct{ *pulumi.OutputState }

func (PlanRuleCopyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyAction)(nil)).Elem()
}

func (o PlanRuleCopyActionOutput) ToPlanRuleCopyActionOutput() PlanRuleCopyActionOutput {
	return o
}

func (o PlanRuleCopyActionOutput) ToPlanRuleCopyActionOutputWithContext(ctx context.Context) PlanRuleCopyActionOutput {
	return o
}

func (o PlanRuleCopyActionOutput) ToOutput(ctx context.Context) pulumix.Output[PlanRuleCopyAction] {
	return pulumix.Output[PlanRuleCopyAction]{
		OutputState: o.OutputState,
	}
}

// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
func (o PlanRuleCopyActionOutput) DestinationVaultArn() pulumix.Output[string] {
	return pulumix.Apply[PlanRuleCopyAction](o, func(v PlanRuleCopyAction) string { return v.DestinationVaultArn })
}

// The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
func (o PlanRuleCopyActionOutput) Lifecycle() pulumix.GPtrOutput[PlanRuleCopyActionLifecycle, PlanRuleCopyActionLifecycleOutput] {
	value := pulumix.Apply[PlanRuleCopyAction](o, func(v PlanRuleCopyAction) *PlanRuleCopyActionLifecycle { return v.Lifecycle })
	return pulumix.GPtrOutput[PlanRuleCopyActionLifecycle, PlanRuleCopyActionLifecycleOutput]{OutputState: value.OutputState}
}

type PlanRuleCopyActionLifecycle struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter *int `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter *int `pulumi:"deleteAfter"`
}

type PlanRuleCopyActionLifecycleArgs struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter pulumix.Input[*int] `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter pulumix.Input[*int] `pulumi:"deleteAfter"`
}

func (PlanRuleCopyActionLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyActionLifecycle)(nil)).Elem()
}

func (i PlanRuleCopyActionLifecycleArgs) ToPlanRuleCopyActionLifecycleOutput() PlanRuleCopyActionLifecycleOutput {
	return i.ToPlanRuleCopyActionLifecycleOutputWithContext(context.Background())
}

func (i PlanRuleCopyActionLifecycleArgs) ToPlanRuleCopyActionLifecycleOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleCopyActionLifecycleOutput)
}

func (i *PlanRuleCopyActionLifecycleArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanRuleCopyActionLifecycleArgs] {
	return pulumix.Val(i)
}

type PlanRuleCopyActionLifecycleOutput struct{ *pulumi.OutputState }

func (PlanRuleCopyActionLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleCopyActionLifecycle)(nil)).Elem()
}

func (o PlanRuleCopyActionLifecycleOutput) ToPlanRuleCopyActionLifecycleOutput() PlanRuleCopyActionLifecycleOutput {
	return o
}

func (o PlanRuleCopyActionLifecycleOutput) ToPlanRuleCopyActionLifecycleOutputWithContext(ctx context.Context) PlanRuleCopyActionLifecycleOutput {
	return o
}

func (o PlanRuleCopyActionLifecycleOutput) ToOutput(ctx context.Context) pulumix.Output[PlanRuleCopyActionLifecycle] {
	return pulumix.Output[PlanRuleCopyActionLifecycle]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after creation that a recovery point is moved to cold storage.
func (o PlanRuleCopyActionLifecycleOutput) ColdStorageAfter() pulumix.Output[*int] {
	return pulumix.Apply[PlanRuleCopyActionLifecycle](o, func(v PlanRuleCopyActionLifecycle) *int { return v.ColdStorageAfter })
}

// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
func (o PlanRuleCopyActionLifecycleOutput) DeleteAfter() pulumix.Output[*int] {
	return pulumix.Apply[PlanRuleCopyActionLifecycle](o, func(v PlanRuleCopyActionLifecycle) *int { return v.DeleteAfter })
}

type PlanRuleLifecycle struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter *int `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter *int `pulumi:"deleteAfter"`
}

type PlanRuleLifecycleArgs struct {
	// Specifies the number of days after creation that a recovery point is moved to cold storage.
	ColdStorageAfter pulumix.Input[*int] `pulumi:"coldStorageAfter"`
	// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
	DeleteAfter pulumix.Input[*int] `pulumi:"deleteAfter"`
}

func (PlanRuleLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleLifecycle)(nil)).Elem()
}

func (i PlanRuleLifecycleArgs) ToPlanRuleLifecycleOutput() PlanRuleLifecycleOutput {
	return i.ToPlanRuleLifecycleOutputWithContext(context.Background())
}

func (i PlanRuleLifecycleArgs) ToPlanRuleLifecycleOutputWithContext(ctx context.Context) PlanRuleLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRuleLifecycleOutput)
}

func (i *PlanRuleLifecycleArgs) ToOutput(ctx context.Context) pulumix.Output[*PlanRuleLifecycleArgs] {
	return pulumix.Val(i)
}

type PlanRuleLifecycleOutput struct{ *pulumi.OutputState }

func (PlanRuleLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRuleLifecycle)(nil)).Elem()
}

func (o PlanRuleLifecycleOutput) ToPlanRuleLifecycleOutput() PlanRuleLifecycleOutput {
	return o
}

func (o PlanRuleLifecycleOutput) ToPlanRuleLifecycleOutputWithContext(ctx context.Context) PlanRuleLifecycleOutput {
	return o
}

func (o PlanRuleLifecycleOutput) ToOutput(ctx context.Context) pulumix.Output[PlanRuleLifecycle] {
	return pulumix.Output[PlanRuleLifecycle]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days after creation that a recovery point is moved to cold storage.
func (o PlanRuleLifecycleOutput) ColdStorageAfter() pulumix.Output[*int] {
	return pulumix.Apply[PlanRuleLifecycle](o, func(v PlanRuleLifecycle) *int { return v.ColdStorageAfter })
}

// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
func (o PlanRuleLifecycleOutput) DeleteAfter() pulumix.Output[*int] {
	return pulumix.Apply[PlanRuleLifecycle](o, func(v PlanRuleLifecycle) *int { return v.DeleteAfter })
}

type ReportPlanReportDeliveryChannel struct {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	Formats []string `pulumi:"formats"`
	// The unique name of the S3 bucket that receives your reports.
	S3BucketName string `pulumi:"s3BucketName"`
	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

type ReportPlanReportDeliveryChannelArgs struct {
	// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
	Formats pulumix.Input[[]string] `pulumi:"formats"`
	// The unique name of the S3 bucket that receives your reports.
	S3BucketName pulumix.Input[string] `pulumi:"s3BucketName"`
	// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
	S3KeyPrefix pulumix.Input[*string] `pulumi:"s3KeyPrefix"`
}

func (ReportPlanReportDeliveryChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (i ReportPlanReportDeliveryChannelArgs) ToReportPlanReportDeliveryChannelOutput() ReportPlanReportDeliveryChannelOutput {
	return i.ToReportPlanReportDeliveryChannelOutputWithContext(context.Background())
}

func (i ReportPlanReportDeliveryChannelArgs) ToReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportDeliveryChannelOutput)
}

func (i *ReportPlanReportDeliveryChannelArgs) ToOutput(ctx context.Context) pulumix.Output[*ReportPlanReportDeliveryChannelArgs] {
	return pulumix.Val(i)
}

type ReportPlanReportDeliveryChannelOutput struct{ *pulumi.OutputState }

func (ReportPlanReportDeliveryChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (o ReportPlanReportDeliveryChannelOutput) ToReportPlanReportDeliveryChannelOutput() ReportPlanReportDeliveryChannelOutput {
	return o
}

func (o ReportPlanReportDeliveryChannelOutput) ToReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) ReportPlanReportDeliveryChannelOutput {
	return o
}

func (o ReportPlanReportDeliveryChannelOutput) ToOutput(ctx context.Context) pulumix.Output[ReportPlanReportDeliveryChannel] {
	return pulumix.Output[ReportPlanReportDeliveryChannel]{
		OutputState: o.OutputState,
	}
}

// A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
func (o ReportPlanReportDeliveryChannelOutput) Formats() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportPlanReportDeliveryChannel](o, func(v ReportPlanReportDeliveryChannel) []string { return v.Formats })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The unique name of the S3 bucket that receives your reports.
func (o ReportPlanReportDeliveryChannelOutput) S3BucketName() pulumix.Output[string] {
	return pulumix.Apply[ReportPlanReportDeliveryChannel](o, func(v ReportPlanReportDeliveryChannel) string { return v.S3BucketName })
}

// The prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
func (o ReportPlanReportDeliveryChannelOutput) S3KeyPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ReportPlanReportDeliveryChannel](o, func(v ReportPlanReportDeliveryChannel) *string { return v.S3KeyPrefix })
}

type ReportPlanReportSetting struct {
	// Specifies the list of accounts a report covers.
	Accounts []string `pulumi:"accounts"`
	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	FrameworkArns []string `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks *int `pulumi:"numberOfFrameworks"`
	// Specifies the list of Organizational Units a report covers.
	OrganizationUnits []string `pulumi:"organizationUnits"`
	// Specifies the list of regions a report covers.
	Regions []string `pulumi:"regions"`
	// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
	ReportTemplate string `pulumi:"reportTemplate"`
}

type ReportPlanReportSettingArgs struct {
	// Specifies the list of accounts a report covers.
	Accounts pulumix.Input[[]string] `pulumi:"accounts"`
	// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
	FrameworkArns pulumix.Input[[]string] `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks pulumix.Input[*int] `pulumi:"numberOfFrameworks"`
	// Specifies the list of Organizational Units a report covers.
	OrganizationUnits pulumix.Input[[]string] `pulumi:"organizationUnits"`
	// Specifies the list of regions a report covers.
	Regions pulumix.Input[[]string] `pulumi:"regions"`
	// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
	ReportTemplate pulumix.Input[string] `pulumi:"reportTemplate"`
}

func (ReportPlanReportSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportSetting)(nil)).Elem()
}

func (i ReportPlanReportSettingArgs) ToReportPlanReportSettingOutput() ReportPlanReportSettingOutput {
	return i.ToReportPlanReportSettingOutputWithContext(context.Background())
}

func (i ReportPlanReportSettingArgs) ToReportPlanReportSettingOutputWithContext(ctx context.Context) ReportPlanReportSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanReportSettingOutput)
}

func (i *ReportPlanReportSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*ReportPlanReportSettingArgs] {
	return pulumix.Val(i)
}

type ReportPlanReportSettingOutput struct{ *pulumi.OutputState }

func (ReportPlanReportSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlanReportSetting)(nil)).Elem()
}

func (o ReportPlanReportSettingOutput) ToReportPlanReportSettingOutput() ReportPlanReportSettingOutput {
	return o
}

func (o ReportPlanReportSettingOutput) ToReportPlanReportSettingOutputWithContext(ctx context.Context) ReportPlanReportSettingOutput {
	return o
}

func (o ReportPlanReportSettingOutput) ToOutput(ctx context.Context) pulumix.Output[ReportPlanReportSetting] {
	return pulumix.Output[ReportPlanReportSetting]{
		OutputState: o.OutputState,
	}
}

// Specifies the list of accounts a report covers.
func (o ReportPlanReportSettingOutput) Accounts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportPlanReportSetting](o, func(v ReportPlanReportSetting) []string { return v.Accounts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the Amazon Resource Names (ARNs) of the frameworks a report covers.
func (o ReportPlanReportSettingOutput) FrameworkArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportPlanReportSetting](o, func(v ReportPlanReportSetting) []string { return v.FrameworkArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the number of frameworks a report covers.
func (o ReportPlanReportSettingOutput) NumberOfFrameworks() pulumix.Output[*int] {
	return pulumix.Apply[ReportPlanReportSetting](o, func(v ReportPlanReportSetting) *int { return v.NumberOfFrameworks })
}

// Specifies the list of Organizational Units a report covers.
func (o ReportPlanReportSettingOutput) OrganizationUnits() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportPlanReportSetting](o, func(v ReportPlanReportSetting) []string { return v.OrganizationUnits })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the list of regions a report covers.
func (o ReportPlanReportSettingOutput) Regions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ReportPlanReportSetting](o, func(v ReportPlanReportSetting) []string { return v.Regions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Identifies the report template for the report. Reports are built using a report template. The report templates are: `RESOURCE_COMPLIANCE_REPORT` | `CONTROL_COMPLIANCE_REPORT` | `BACKUP_JOB_REPORT` | `COPY_JOB_REPORT` | `RESTORE_JOB_REPORT`.
func (o ReportPlanReportSettingOutput) ReportTemplate() pulumix.Output[string] {
	return pulumix.Apply[ReportPlanReportSetting](o, func(v ReportPlanReportSetting) string { return v.ReportTemplate })
}

type SelectionCondition struct {
	StringEquals    []SelectionConditionStringEqual    `pulumi:"stringEquals"`
	StringLikes     []SelectionConditionStringLike     `pulumi:"stringLikes"`
	StringNotEquals []SelectionConditionStringNotEqual `pulumi:"stringNotEquals"`
	StringNotLikes  []SelectionConditionStringNotLike  `pulumi:"stringNotLikes"`
}

type SelectionConditionArgs struct {
	StringEquals    pulumix.Input[[]*SelectionConditionStringEqualArgs]    `pulumi:"stringEquals"`
	StringLikes     pulumix.Input[[]*SelectionConditionStringLikeArgs]     `pulumi:"stringLikes"`
	StringNotEquals pulumix.Input[[]*SelectionConditionStringNotEqualArgs] `pulumi:"stringNotEquals"`
	StringNotLikes  pulumix.Input[[]*SelectionConditionStringNotLikeArgs]  `pulumi:"stringNotLikes"`
}

func (SelectionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionCondition)(nil)).Elem()
}

func (i SelectionConditionArgs) ToSelectionConditionOutput() SelectionConditionOutput {
	return i.ToSelectionConditionOutputWithContext(context.Background())
}

func (i SelectionConditionArgs) ToSelectionConditionOutputWithContext(ctx context.Context) SelectionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionOutput)
}

func (i *SelectionConditionArgs) ToOutput(ctx context.Context) pulumix.Output[*SelectionConditionArgs] {
	return pulumix.Val(i)
}

type SelectionConditionOutput struct{ *pulumi.OutputState }

func (SelectionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionCondition)(nil)).Elem()
}

func (o SelectionConditionOutput) ToSelectionConditionOutput() SelectionConditionOutput {
	return o
}

func (o SelectionConditionOutput) ToSelectionConditionOutputWithContext(ctx context.Context) SelectionConditionOutput {
	return o
}

func (o SelectionConditionOutput) ToOutput(ctx context.Context) pulumix.Output[SelectionCondition] {
	return pulumix.Output[SelectionCondition]{
		OutputState: o.OutputState,
	}
}

func (o SelectionConditionOutput) StringEquals() pulumix.GArrayOutput[SelectionConditionStringEqual, SelectionConditionStringEqualOutput] {
	value := pulumix.Apply[SelectionCondition](o, func(v SelectionCondition) []SelectionConditionStringEqual { return v.StringEquals })
	return pulumix.GArrayOutput[SelectionConditionStringEqual, SelectionConditionStringEqualOutput]{OutputState: value.OutputState}
}

func (o SelectionConditionOutput) StringLikes() pulumix.GArrayOutput[SelectionConditionStringLike, SelectionConditionStringLikeOutput] {
	value := pulumix.Apply[SelectionCondition](o, func(v SelectionCondition) []SelectionConditionStringLike { return v.StringLikes })
	return pulumix.GArrayOutput[SelectionConditionStringLike, SelectionConditionStringLikeOutput]{OutputState: value.OutputState}
}

func (o SelectionConditionOutput) StringNotEquals() pulumix.GArrayOutput[SelectionConditionStringNotEqual, SelectionConditionStringNotEqualOutput] {
	value := pulumix.Apply[SelectionCondition](o, func(v SelectionCondition) []SelectionConditionStringNotEqual { return v.StringNotEquals })
	return pulumix.GArrayOutput[SelectionConditionStringNotEqual, SelectionConditionStringNotEqualOutput]{OutputState: value.OutputState}
}

func (o SelectionConditionOutput) StringNotLikes() pulumix.GArrayOutput[SelectionConditionStringNotLike, SelectionConditionStringNotLikeOutput] {
	value := pulumix.Apply[SelectionCondition](o, func(v SelectionCondition) []SelectionConditionStringNotLike { return v.StringNotLikes })
	return pulumix.GArrayOutput[SelectionConditionStringNotLike, SelectionConditionStringNotLikeOutput]{OutputState: value.OutputState}
}

type SelectionConditionStringEqual struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type SelectionConditionStringEqualArgs struct {
	// The key in a key-value pair.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SelectionConditionStringEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringEqual)(nil)).Elem()
}

func (i SelectionConditionStringEqualArgs) ToSelectionConditionStringEqualOutput() SelectionConditionStringEqualOutput {
	return i.ToSelectionConditionStringEqualOutputWithContext(context.Background())
}

func (i SelectionConditionStringEqualArgs) ToSelectionConditionStringEqualOutputWithContext(ctx context.Context) SelectionConditionStringEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringEqualOutput)
}

func (i *SelectionConditionStringEqualArgs) ToOutput(ctx context.Context) pulumix.Output[*SelectionConditionStringEqualArgs] {
	return pulumix.Val(i)
}

type SelectionConditionStringEqualOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringEqual)(nil)).Elem()
}

func (o SelectionConditionStringEqualOutput) ToSelectionConditionStringEqualOutput() SelectionConditionStringEqualOutput {
	return o
}

func (o SelectionConditionStringEqualOutput) ToSelectionConditionStringEqualOutputWithContext(ctx context.Context) SelectionConditionStringEqualOutput {
	return o
}

func (o SelectionConditionStringEqualOutput) ToOutput(ctx context.Context) pulumix.Output[SelectionConditionStringEqual] {
	return pulumix.Output[SelectionConditionStringEqual]{
		OutputState: o.OutputState,
	}
}

// The key in a key-value pair.
func (o SelectionConditionStringEqualOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringEqual](o, func(v SelectionConditionStringEqual) string { return v.Key })
}

// The value in a key-value pair.
func (o SelectionConditionStringEqualOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringEqual](o, func(v SelectionConditionStringEqual) string { return v.Value })
}

type SelectionConditionStringLike struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type SelectionConditionStringLikeArgs struct {
	// The key in a key-value pair.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SelectionConditionStringLikeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringLike)(nil)).Elem()
}

func (i SelectionConditionStringLikeArgs) ToSelectionConditionStringLikeOutput() SelectionConditionStringLikeOutput {
	return i.ToSelectionConditionStringLikeOutputWithContext(context.Background())
}

func (i SelectionConditionStringLikeArgs) ToSelectionConditionStringLikeOutputWithContext(ctx context.Context) SelectionConditionStringLikeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringLikeOutput)
}

func (i *SelectionConditionStringLikeArgs) ToOutput(ctx context.Context) pulumix.Output[*SelectionConditionStringLikeArgs] {
	return pulumix.Val(i)
}

type SelectionConditionStringLikeOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringLikeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringLike)(nil)).Elem()
}

func (o SelectionConditionStringLikeOutput) ToSelectionConditionStringLikeOutput() SelectionConditionStringLikeOutput {
	return o
}

func (o SelectionConditionStringLikeOutput) ToSelectionConditionStringLikeOutputWithContext(ctx context.Context) SelectionConditionStringLikeOutput {
	return o
}

func (o SelectionConditionStringLikeOutput) ToOutput(ctx context.Context) pulumix.Output[SelectionConditionStringLike] {
	return pulumix.Output[SelectionConditionStringLike]{
		OutputState: o.OutputState,
	}
}

// The key in a key-value pair.
func (o SelectionConditionStringLikeOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringLike](o, func(v SelectionConditionStringLike) string { return v.Key })
}

// The value in a key-value pair.
func (o SelectionConditionStringLikeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringLike](o, func(v SelectionConditionStringLike) string { return v.Value })
}

type SelectionConditionStringNotEqual struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type SelectionConditionStringNotEqualArgs struct {
	// The key in a key-value pair.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SelectionConditionStringNotEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotEqual)(nil)).Elem()
}

func (i SelectionConditionStringNotEqualArgs) ToSelectionConditionStringNotEqualOutput() SelectionConditionStringNotEqualOutput {
	return i.ToSelectionConditionStringNotEqualOutputWithContext(context.Background())
}

func (i SelectionConditionStringNotEqualArgs) ToSelectionConditionStringNotEqualOutputWithContext(ctx context.Context) SelectionConditionStringNotEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringNotEqualOutput)
}

func (i *SelectionConditionStringNotEqualArgs) ToOutput(ctx context.Context) pulumix.Output[*SelectionConditionStringNotEqualArgs] {
	return pulumix.Val(i)
}

type SelectionConditionStringNotEqualOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringNotEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotEqual)(nil)).Elem()
}

func (o SelectionConditionStringNotEqualOutput) ToSelectionConditionStringNotEqualOutput() SelectionConditionStringNotEqualOutput {
	return o
}

func (o SelectionConditionStringNotEqualOutput) ToSelectionConditionStringNotEqualOutputWithContext(ctx context.Context) SelectionConditionStringNotEqualOutput {
	return o
}

func (o SelectionConditionStringNotEqualOutput) ToOutput(ctx context.Context) pulumix.Output[SelectionConditionStringNotEqual] {
	return pulumix.Output[SelectionConditionStringNotEqual]{
		OutputState: o.OutputState,
	}
}

// The key in a key-value pair.
func (o SelectionConditionStringNotEqualOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringNotEqual](o, func(v SelectionConditionStringNotEqual) string { return v.Key })
}

// The value in a key-value pair.
func (o SelectionConditionStringNotEqualOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringNotEqual](o, func(v SelectionConditionStringNotEqual) string { return v.Value })
}

type SelectionConditionStringNotLike struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type SelectionConditionStringNotLikeArgs struct {
	// The key in a key-value pair.
	Key pulumix.Input[string] `pulumi:"key"`
	// The value in a key-value pair.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SelectionConditionStringNotLikeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotLike)(nil)).Elem()
}

func (i SelectionConditionStringNotLikeArgs) ToSelectionConditionStringNotLikeOutput() SelectionConditionStringNotLikeOutput {
	return i.ToSelectionConditionStringNotLikeOutputWithContext(context.Background())
}

func (i SelectionConditionStringNotLikeArgs) ToSelectionConditionStringNotLikeOutputWithContext(ctx context.Context) SelectionConditionStringNotLikeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionConditionStringNotLikeOutput)
}

func (i *SelectionConditionStringNotLikeArgs) ToOutput(ctx context.Context) pulumix.Output[*SelectionConditionStringNotLikeArgs] {
	return pulumix.Val(i)
}

type SelectionConditionStringNotLikeOutput struct{ *pulumi.OutputState }

func (SelectionConditionStringNotLikeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionConditionStringNotLike)(nil)).Elem()
}

func (o SelectionConditionStringNotLikeOutput) ToSelectionConditionStringNotLikeOutput() SelectionConditionStringNotLikeOutput {
	return o
}

func (o SelectionConditionStringNotLikeOutput) ToSelectionConditionStringNotLikeOutputWithContext(ctx context.Context) SelectionConditionStringNotLikeOutput {
	return o
}

func (o SelectionConditionStringNotLikeOutput) ToOutput(ctx context.Context) pulumix.Output[SelectionConditionStringNotLike] {
	return pulumix.Output[SelectionConditionStringNotLike]{
		OutputState: o.OutputState,
	}
}

// The key in a key-value pair.
func (o SelectionConditionStringNotLikeOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringNotLike](o, func(v SelectionConditionStringNotLike) string { return v.Key })
}

// The value in a key-value pair.
func (o SelectionConditionStringNotLikeOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SelectionConditionStringNotLike](o, func(v SelectionConditionStringNotLike) string { return v.Value })
}

type SelectionSelectionTag struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
	Type string `pulumi:"type"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type SelectionSelectionTagArgs struct {
	// The key in a key-value pair.
	Key pulumix.Input[string] `pulumi:"key"`
	// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
	Type pulumix.Input[string] `pulumi:"type"`
	// The value in a key-value pair.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SelectionSelectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionSelectionTag)(nil)).Elem()
}

func (i SelectionSelectionTagArgs) ToSelectionSelectionTagOutput() SelectionSelectionTagOutput {
	return i.ToSelectionSelectionTagOutputWithContext(context.Background())
}

func (i SelectionSelectionTagArgs) ToSelectionSelectionTagOutputWithContext(ctx context.Context) SelectionSelectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectionSelectionTagOutput)
}

func (i *SelectionSelectionTagArgs) ToOutput(ctx context.Context) pulumix.Output[*SelectionSelectionTagArgs] {
	return pulumix.Val(i)
}

type SelectionSelectionTagOutput struct{ *pulumi.OutputState }

func (SelectionSelectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectionSelectionTag)(nil)).Elem()
}

func (o SelectionSelectionTagOutput) ToSelectionSelectionTagOutput() SelectionSelectionTagOutput {
	return o
}

func (o SelectionSelectionTagOutput) ToSelectionSelectionTagOutputWithContext(ctx context.Context) SelectionSelectionTagOutput {
	return o
}

func (o SelectionSelectionTagOutput) ToOutput(ctx context.Context) pulumix.Output[SelectionSelectionTag] {
	return pulumix.Output[SelectionSelectionTag]{
		OutputState: o.OutputState,
	}
}

// The key in a key-value pair.
func (o SelectionSelectionTagOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SelectionSelectionTag](o, func(v SelectionSelectionTag) string { return v.Key })
}

// An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
func (o SelectionSelectionTagOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[SelectionSelectionTag](o, func(v SelectionSelectionTag) string { return v.Type })
}

// The value in a key-value pair.
func (o SelectionSelectionTagOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SelectionSelectionTag](o, func(v SelectionSelectionTag) string { return v.Value })
}

type GetFrameworkControl struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters []GetFrameworkControlInputParameter `pulumi:"inputParameters"`
	// Backup framework name.
	Name string `pulumi:"name"`
	// Scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scopes []GetFrameworkControlScope `pulumi:"scopes"`
}

type GetFrameworkControlArgs struct {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	InputParameters pulumix.Input[[]*GetFrameworkControlInputParameterArgs] `pulumi:"inputParameters"`
	// Backup framework name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	Scopes pulumix.Input[[]*GetFrameworkControlScopeArgs] `pulumi:"scopes"`
}

func (GetFrameworkControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControl)(nil)).Elem()
}

func (i GetFrameworkControlArgs) ToGetFrameworkControlOutput() GetFrameworkControlOutput {
	return i.ToGetFrameworkControlOutputWithContext(context.Background())
}

func (i GetFrameworkControlArgs) ToGetFrameworkControlOutputWithContext(ctx context.Context) GetFrameworkControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlOutput)
}

func (i *GetFrameworkControlArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFrameworkControlArgs] {
	return pulumix.Val(i)
}

type GetFrameworkControlOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControl)(nil)).Elem()
}

func (o GetFrameworkControlOutput) ToGetFrameworkControlOutput() GetFrameworkControlOutput {
	return o
}

func (o GetFrameworkControlOutput) ToGetFrameworkControlOutputWithContext(ctx context.Context) GetFrameworkControlOutput {
	return o
}

func (o GetFrameworkControlOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControl] {
	return pulumix.Output[GetFrameworkControl]{
		OutputState: o.OutputState,
	}
}

// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
func (o GetFrameworkControlOutput) InputParameters() pulumix.GArrayOutput[GetFrameworkControlInputParameter, GetFrameworkControlInputParameterOutput] {
	value := pulumix.Apply[GetFrameworkControl](o, func(v GetFrameworkControl) []GetFrameworkControlInputParameter { return v.InputParameters })
	return pulumix.GArrayOutput[GetFrameworkControlInputParameter, GetFrameworkControlInputParameterOutput]{OutputState: value.OutputState}
}

// Backup framework name.
func (o GetFrameworkControlOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetFrameworkControl](o, func(v GetFrameworkControl) string { return v.Name })
}

// Scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
func (o GetFrameworkControlOutput) Scopes() pulumix.GArrayOutput[GetFrameworkControlScope, GetFrameworkControlScopeOutput] {
	value := pulumix.Apply[GetFrameworkControl](o, func(v GetFrameworkControl) []GetFrameworkControlScope { return v.Scopes })
	return pulumix.GArrayOutput[GetFrameworkControlScope, GetFrameworkControlScopeOutput]{OutputState: value.OutputState}
}

type GetFrameworkControlInputParameter struct {
	// Backup framework name.
	Name string `pulumi:"name"`
	// Value of parameter, for example, hourly.
	Value string `pulumi:"value"`
}

type GetFrameworkControlInputParameterArgs struct {
	// Backup framework name.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value of parameter, for example, hourly.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetFrameworkControlInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlInputParameter)(nil)).Elem()
}

func (i GetFrameworkControlInputParameterArgs) ToGetFrameworkControlInputParameterOutput() GetFrameworkControlInputParameterOutput {
	return i.ToGetFrameworkControlInputParameterOutputWithContext(context.Background())
}

func (i GetFrameworkControlInputParameterArgs) ToGetFrameworkControlInputParameterOutputWithContext(ctx context.Context) GetFrameworkControlInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlInputParameterOutput)
}

func (i *GetFrameworkControlInputParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFrameworkControlInputParameterArgs] {
	return pulumix.Val(i)
}

type GetFrameworkControlInputParameterOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlInputParameter)(nil)).Elem()
}

func (o GetFrameworkControlInputParameterOutput) ToGetFrameworkControlInputParameterOutput() GetFrameworkControlInputParameterOutput {
	return o
}

func (o GetFrameworkControlInputParameterOutput) ToGetFrameworkControlInputParameterOutputWithContext(ctx context.Context) GetFrameworkControlInputParameterOutput {
	return o
}

func (o GetFrameworkControlInputParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlInputParameter] {
	return pulumix.Output[GetFrameworkControlInputParameter]{
		OutputState: o.OutputState,
	}
}

// Backup framework name.
func (o GetFrameworkControlInputParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetFrameworkControlInputParameter](o, func(v GetFrameworkControlInputParameter) string { return v.Name })
}

// Value of parameter, for example, hourly.
func (o GetFrameworkControlInputParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetFrameworkControlInputParameter](o, func(v GetFrameworkControlInputParameter) string { return v.Value })
}

type GetFrameworkControlScope struct {
	// The ID of the only AWS resource that you want your control scope to contain.
	ComplianceResourceIds []string `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes []string `pulumi:"complianceResourceTypes"`
	// Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags map[string]string `pulumi:"tags"`
}

type GetFrameworkControlScopeArgs struct {
	// The ID of the only AWS resource that you want your control scope to contain.
	ComplianceResourceIds pulumix.Input[[]string] `pulumi:"complianceResourceIds"`
	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	ComplianceResourceTypes pulumix.Input[[]string] `pulumi:"complianceResourceTypes"`
	// Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (GetFrameworkControlScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlScope)(nil)).Elem()
}

func (i GetFrameworkControlScopeArgs) ToGetFrameworkControlScopeOutput() GetFrameworkControlScopeOutput {
	return i.ToGetFrameworkControlScopeOutputWithContext(context.Background())
}

func (i GetFrameworkControlScopeArgs) ToGetFrameworkControlScopeOutputWithContext(ctx context.Context) GetFrameworkControlScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrameworkControlScopeOutput)
}

func (i *GetFrameworkControlScopeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFrameworkControlScopeArgs] {
	return pulumix.Val(i)
}

type GetFrameworkControlScopeOutput struct{ *pulumi.OutputState }

func (GetFrameworkControlScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrameworkControlScope)(nil)).Elem()
}

func (o GetFrameworkControlScopeOutput) ToGetFrameworkControlScopeOutput() GetFrameworkControlScopeOutput {
	return o
}

func (o GetFrameworkControlScopeOutput) ToGetFrameworkControlScopeOutputWithContext(ctx context.Context) GetFrameworkControlScopeOutput {
	return o
}

func (o GetFrameworkControlScopeOutput) ToOutput(ctx context.Context) pulumix.Output[GetFrameworkControlScope] {
	return pulumix.Output[GetFrameworkControlScope]{
		OutputState: o.OutputState,
	}
}

// The ID of the only AWS resource that you want your control scope to contain.
func (o GetFrameworkControlScopeOutput) ComplianceResourceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFrameworkControlScope](o, func(v GetFrameworkControlScope) []string { return v.ComplianceResourceIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
func (o GetFrameworkControlScopeOutput) ComplianceResourceTypes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetFrameworkControlScope](o, func(v GetFrameworkControlScope) []string { return v.ComplianceResourceTypes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.
func (o GetFrameworkControlScopeOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[GetFrameworkControlScope](o, func(v GetFrameworkControlScope) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

type GetReportPlanReportDeliveryChannel struct {
	// List of the format of your reports: CSV, JSON, or both.
	Formats []string `pulumi:"formats"`
	// Unique name of the S3 bucket that receives your reports.
	S3BucketName string `pulumi:"s3BucketName"`
	// Prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
	S3KeyPrefix string `pulumi:"s3KeyPrefix"`
}

type GetReportPlanReportDeliveryChannelArgs struct {
	// List of the format of your reports: CSV, JSON, or both.
	Formats pulumix.Input[[]string] `pulumi:"formats"`
	// Unique name of the S3 bucket that receives your reports.
	S3BucketName pulumix.Input[string] `pulumi:"s3BucketName"`
	// Prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
	S3KeyPrefix pulumix.Input[string] `pulumi:"s3KeyPrefix"`
}

func (GetReportPlanReportDeliveryChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (i GetReportPlanReportDeliveryChannelArgs) ToGetReportPlanReportDeliveryChannelOutput() GetReportPlanReportDeliveryChannelOutput {
	return i.ToGetReportPlanReportDeliveryChannelOutputWithContext(context.Background())
}

func (i GetReportPlanReportDeliveryChannelArgs) ToGetReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) GetReportPlanReportDeliveryChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReportPlanReportDeliveryChannelOutput)
}

func (i *GetReportPlanReportDeliveryChannelArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReportPlanReportDeliveryChannelArgs] {
	return pulumix.Val(i)
}

type GetReportPlanReportDeliveryChannelOutput struct{ *pulumi.OutputState }

func (GetReportPlanReportDeliveryChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportDeliveryChannel)(nil)).Elem()
}

func (o GetReportPlanReportDeliveryChannelOutput) ToGetReportPlanReportDeliveryChannelOutput() GetReportPlanReportDeliveryChannelOutput {
	return o
}

func (o GetReportPlanReportDeliveryChannelOutput) ToGetReportPlanReportDeliveryChannelOutputWithContext(ctx context.Context) GetReportPlanReportDeliveryChannelOutput {
	return o
}

func (o GetReportPlanReportDeliveryChannelOutput) ToOutput(ctx context.Context) pulumix.Output[GetReportPlanReportDeliveryChannel] {
	return pulumix.Output[GetReportPlanReportDeliveryChannel]{
		OutputState: o.OutputState,
	}
}

// List of the format of your reports: CSV, JSON, or both.
func (o GetReportPlanReportDeliveryChannelOutput) Formats() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReportPlanReportDeliveryChannel](o, func(v GetReportPlanReportDeliveryChannel) []string { return v.Formats })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Unique name of the S3 bucket that receives your reports.
func (o GetReportPlanReportDeliveryChannelOutput) S3BucketName() pulumix.Output[string] {
	return pulumix.Apply[GetReportPlanReportDeliveryChannel](o, func(v GetReportPlanReportDeliveryChannel) string { return v.S3BucketName })
}

// Prefix for where Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name.
func (o GetReportPlanReportDeliveryChannelOutput) S3KeyPrefix() pulumix.Output[string] {
	return pulumix.Apply[GetReportPlanReportDeliveryChannel](o, func(v GetReportPlanReportDeliveryChannel) string { return v.S3KeyPrefix })
}

type GetReportPlanReportSetting struct {
	// (Optional) Specifies the list of accounts a report covers.
	Accounts []string `pulumi:"accounts"`
	// ARNs of the frameworks a report covers.
	FrameworkArns []string `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks int `pulumi:"numberOfFrameworks"`
	// (Optional) Specifies the list of Organizational Units a report covers.
	OrganizationUnits []string `pulumi:"organizationUnits"`
	// (Optional) Specifies the list of regions a report covers.
	Regions []string `pulumi:"regions"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportTemplate string `pulumi:"reportTemplate"`
}

type GetReportPlanReportSettingArgs struct {
	// (Optional) Specifies the list of accounts a report covers.
	Accounts pulumix.Input[[]string] `pulumi:"accounts"`
	// ARNs of the frameworks a report covers.
	FrameworkArns pulumix.Input[[]string] `pulumi:"frameworkArns"`
	// Specifies the number of frameworks a report covers.
	NumberOfFrameworks pulumix.Input[int] `pulumi:"numberOfFrameworks"`
	// (Optional) Specifies the list of Organizational Units a report covers.
	OrganizationUnits pulumix.Input[[]string] `pulumi:"organizationUnits"`
	// (Optional) Specifies the list of regions a report covers.
	Regions pulumix.Input[[]string] `pulumi:"regions"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportTemplate pulumix.Input[string] `pulumi:"reportTemplate"`
}

func (GetReportPlanReportSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportSetting)(nil)).Elem()
}

func (i GetReportPlanReportSettingArgs) ToGetReportPlanReportSettingOutput() GetReportPlanReportSettingOutput {
	return i.ToGetReportPlanReportSettingOutputWithContext(context.Background())
}

func (i GetReportPlanReportSettingArgs) ToGetReportPlanReportSettingOutputWithContext(ctx context.Context) GetReportPlanReportSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReportPlanReportSettingOutput)
}

func (i *GetReportPlanReportSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReportPlanReportSettingArgs] {
	return pulumix.Val(i)
}

type GetReportPlanReportSettingOutput struct{ *pulumi.OutputState }

func (GetReportPlanReportSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportPlanReportSetting)(nil)).Elem()
}

func (o GetReportPlanReportSettingOutput) ToGetReportPlanReportSettingOutput() GetReportPlanReportSettingOutput {
	return o
}

func (o GetReportPlanReportSettingOutput) ToGetReportPlanReportSettingOutputWithContext(ctx context.Context) GetReportPlanReportSettingOutput {
	return o
}

func (o GetReportPlanReportSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetReportPlanReportSetting] {
	return pulumix.Output[GetReportPlanReportSetting]{
		OutputState: o.OutputState,
	}
}

// (Optional) Specifies the list of accounts a report covers.
func (o GetReportPlanReportSettingOutput) Accounts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReportPlanReportSetting](o, func(v GetReportPlanReportSetting) []string { return v.Accounts })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARNs of the frameworks a report covers.
func (o GetReportPlanReportSettingOutput) FrameworkArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReportPlanReportSetting](o, func(v GetReportPlanReportSetting) []string { return v.FrameworkArns })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the number of frameworks a report covers.
func (o GetReportPlanReportSettingOutput) NumberOfFrameworks() pulumix.Output[int] {
	return pulumix.Apply[GetReportPlanReportSetting](o, func(v GetReportPlanReportSetting) int { return v.NumberOfFrameworks })
}

// (Optional) Specifies the list of Organizational Units a report covers.
func (o GetReportPlanReportSettingOutput) OrganizationUnits() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReportPlanReportSetting](o, func(v GetReportPlanReportSetting) []string { return v.OrganizationUnits })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// (Optional) Specifies the list of regions a report covers.
func (o GetReportPlanReportSettingOutput) Regions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetReportPlanReportSetting](o, func(v GetReportPlanReportSetting) []string { return v.Regions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Identifies the report template for the report. Reports are built using a report template.
func (o GetReportPlanReportSettingOutput) ReportTemplate() pulumix.Output[string] {
	return pulumix.Apply[GetReportPlanReportSetting](o, func(v GetReportPlanReportSetting) string { return v.ReportTemplate })
}

func init() {
	pulumi.RegisterOutputType(FrameworkControlOutput{})
	pulumi.RegisterOutputType(FrameworkControlInputParameterOutput{})
	pulumi.RegisterOutputType(FrameworkControlScopeOutput{})
	pulumi.RegisterOutputType(PlanAdvancedBackupSettingOutput{})
	pulumi.RegisterOutputType(PlanRuleOutput{})
	pulumi.RegisterOutputType(PlanRuleCopyActionOutput{})
	pulumi.RegisterOutputType(PlanRuleCopyActionLifecycleOutput{})
	pulumi.RegisterOutputType(PlanRuleLifecycleOutput{})
	pulumi.RegisterOutputType(ReportPlanReportDeliveryChannelOutput{})
	pulumi.RegisterOutputType(ReportPlanReportSettingOutput{})
	pulumi.RegisterOutputType(SelectionConditionOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringEqualOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringLikeOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringNotEqualOutput{})
	pulumi.RegisterOutputType(SelectionConditionStringNotLikeOutput{})
	pulumi.RegisterOutputType(SelectionSelectionTagOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlInputParameterOutput{})
	pulumi.RegisterOutputType(GetFrameworkControlScopeOutput{})
	pulumi.RegisterOutputType(GetReportPlanReportDeliveryChannelOutput{})
	pulumi.RegisterOutputType(GetReportPlanReportSettingOutput{})
}
