// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage [default logging options](https://docs.aws.amazon.com/iot/latest/developerguide/configure-logging.html#configure-logging-console).
type LoggingOptions struct {
	pulumi.CustomResourceState

	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel pulumix.Output[string] `pulumi:"defaultLogLevel"`
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs pulumix.Output[*bool] `pulumi:"disableAllLogs"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
}

// NewLoggingOptions registers a new resource with the given unique name, arguments, and options.
func NewLoggingOptions(ctx *pulumi.Context,
	name string, args *LoggingOptionsArgs, opts ...pulumi.ResourceOption) (*LoggingOptions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultLogLevel == nil {
		return nil, errors.New("invalid value for required argument 'DefaultLogLevel'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoggingOptions
	err := ctx.RegisterResource("aws:iot/loggingOptions:LoggingOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingOptions gets an existing LoggingOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingOptionsState, opts ...pulumi.ResourceOption) (*LoggingOptions, error) {
	var resource LoggingOptions
	err := ctx.ReadResource("aws:iot/loggingOptions:LoggingOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingOptions resources.
type loggingOptionsState struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel *string `pulumi:"defaultLogLevel"`
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs *bool `pulumi:"disableAllLogs"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn *string `pulumi:"roleArn"`
}

type LoggingOptionsState struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel pulumix.Input[*string]
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs pulumix.Input[*bool]
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn pulumix.Input[*string]
}

func (LoggingOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingOptionsState)(nil)).Elem()
}

type loggingOptionsArgs struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel string `pulumi:"defaultLogLevel"`
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs *bool `pulumi:"disableAllLogs"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn string `pulumi:"roleArn"`
}

// The set of arguments for constructing a LoggingOptions resource.
type LoggingOptionsArgs struct {
	// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
	DefaultLogLevel pulumix.Input[string]
	// If `true` all logs are disabled. The default is `false`.
	DisableAllLogs pulumix.Input[*bool]
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn pulumix.Input[string]
}

func (LoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingOptionsArgs)(nil)).Elem()
}

type LoggingOptionsOutput struct{ *pulumi.OutputState }

func (LoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingOptions)(nil)).Elem()
}

func (o LoggingOptionsOutput) ToLoggingOptionsOutput() LoggingOptionsOutput {
	return o
}

func (o LoggingOptionsOutput) ToLoggingOptionsOutputWithContext(ctx context.Context) LoggingOptionsOutput {
	return o
}

func (o LoggingOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingOptions] {
	return pulumix.Output[LoggingOptions]{
		OutputState: o.OutputState,
	}
}

// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
func (o LoggingOptionsOutput) DefaultLogLevel() pulumix.Output[string] {
	value := pulumix.Apply[LoggingOptions](o, func(v LoggingOptions) pulumix.Output[string] { return v.DefaultLogLevel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If `true` all logs are disabled. The default is `false`.
func (o LoggingOptionsOutput) DisableAllLogs() pulumix.Output[*bool] {
	value := pulumix.Apply[LoggingOptions](o, func(v LoggingOptions) pulumix.Output[*bool] { return v.DisableAllLogs })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The ARN of the role that allows IoT to write to Cloudwatch logs.
func (o LoggingOptionsOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[LoggingOptions](o, func(v LoggingOptions) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LoggingOptionsOutput{})
}
