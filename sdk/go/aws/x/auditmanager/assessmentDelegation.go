// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Audit Manager Assessment Delegation.
type AssessmentDelegation struct {
	pulumi.CustomResourceState

	// Identifier for the assessment.
	AssessmentId pulumix.Output[string] `pulumi:"assessmentId"`
	// Comment describing the delegation request.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
	ControlSetId pulumix.Output[string] `pulumi:"controlSetId"`
	// Unique identifier for the delegation.
	DelegationId pulumix.Output[string] `pulumi:"delegationId"`
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
	//
	// The following arguments are optional:
	RoleType pulumix.Output[string] `pulumi:"roleType"`
	// Status of the delegation.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewAssessmentDelegation registers a new resource with the given unique name, arguments, and options.
func NewAssessmentDelegation(ctx *pulumi.Context,
	name string, args *AssessmentDelegationArgs, opts ...pulumi.ResourceOption) (*AssessmentDelegation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'AssessmentId'")
	}
	if args.ControlSetId == nil {
		return nil, errors.New("invalid value for required argument 'ControlSetId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.RoleType == nil {
		return nil, errors.New("invalid value for required argument 'RoleType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssessmentDelegation
	err := ctx.RegisterResource("aws:auditmanager/assessmentDelegation:AssessmentDelegation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentDelegation gets an existing AssessmentDelegation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentDelegation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentDelegationState, opts ...pulumi.ResourceOption) (*AssessmentDelegation, error) {
	var resource AssessmentDelegation
	err := ctx.ReadResource("aws:auditmanager/assessmentDelegation:AssessmentDelegation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentDelegation resources.
type assessmentDelegationState struct {
	// Identifier for the assessment.
	AssessmentId *string `pulumi:"assessmentId"`
	// Comment describing the delegation request.
	Comment *string `pulumi:"comment"`
	// Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
	ControlSetId *string `pulumi:"controlSetId"`
	// Unique identifier for the delegation.
	DelegationId *string `pulumi:"delegationId"`
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn *string `pulumi:"roleArn"`
	// Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
	//
	// The following arguments are optional:
	RoleType *string `pulumi:"roleType"`
	// Status of the delegation.
	Status *string `pulumi:"status"`
}

type AssessmentDelegationState struct {
	// Identifier for the assessment.
	AssessmentId pulumix.Input[*string]
	// Comment describing the delegation request.
	Comment pulumix.Input[*string]
	// Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
	ControlSetId pulumix.Input[*string]
	// Unique identifier for the delegation.
	DelegationId pulumix.Input[*string]
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumix.Input[*string]
	// Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
	//
	// The following arguments are optional:
	RoleType pulumix.Input[*string]
	// Status of the delegation.
	Status pulumix.Input[*string]
}

func (AssessmentDelegationState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentDelegationState)(nil)).Elem()
}

type assessmentDelegationArgs struct {
	// Identifier for the assessment.
	AssessmentId string `pulumi:"assessmentId"`
	// Comment describing the delegation request.
	Comment *string `pulumi:"comment"`
	// Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
	ControlSetId string `pulumi:"controlSetId"`
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn string `pulumi:"roleArn"`
	// Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
	//
	// The following arguments are optional:
	RoleType string `pulumi:"roleType"`
}

// The set of arguments for constructing a AssessmentDelegation resource.
type AssessmentDelegationArgs struct {
	// Identifier for the assessment.
	AssessmentId pulumix.Input[string]
	// Comment describing the delegation request.
	Comment pulumix.Input[*string]
	// Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
	ControlSetId pulumix.Input[string]
	// Amazon Resource Name (ARN) of the IAM role.
	RoleArn pulumix.Input[string]
	// Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
	//
	// The following arguments are optional:
	RoleType pulumix.Input[string]
}

func (AssessmentDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentDelegationArgs)(nil)).Elem()
}

type AssessmentDelegationOutput struct{ *pulumi.OutputState }

func (AssessmentDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentDelegation)(nil)).Elem()
}

func (o AssessmentDelegationOutput) ToAssessmentDelegationOutput() AssessmentDelegationOutput {
	return o
}

func (o AssessmentDelegationOutput) ToAssessmentDelegationOutputWithContext(ctx context.Context) AssessmentDelegationOutput {
	return o
}

func (o AssessmentDelegationOutput) ToOutput(ctx context.Context) pulumix.Output[AssessmentDelegation] {
	return pulumix.Output[AssessmentDelegation]{
		OutputState: o.OutputState,
	}
}

// Identifier for the assessment.
func (o AssessmentDelegationOutput) AssessmentId() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[string] { return v.AssessmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Comment describing the delegation request.
func (o AssessmentDelegationOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Assessment control set name. This value is the control set name used during assessment creation (not the AWS-generated ID). The `_id` suffix on this attribute has been preserved to be consistent with the underlying AWS API.
func (o AssessmentDelegationOutput) ControlSetId() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[string] { return v.ControlSetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique identifier for the delegation.
func (o AssessmentDelegationOutput) DelegationId() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[string] { return v.DelegationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amazon Resource Name (ARN) of the IAM role.
func (o AssessmentDelegationOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of customer persona. For assessment delegation, type must always be `RESOURCE_OWNER`.
//
// The following arguments are optional:
func (o AssessmentDelegationOutput) RoleType() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[string] { return v.RoleType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the delegation.
func (o AssessmentDelegationOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[AssessmentDelegation](o, func(v AssessmentDelegation) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AssessmentDelegationOutput{})
}
