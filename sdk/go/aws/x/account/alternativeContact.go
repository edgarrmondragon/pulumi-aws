// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages the specified alternate contact attached to an AWS Account.
type AlternativeContact struct {
	pulumi.CustomResourceState

	// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
	AccountId pulumix.Output[*string] `pulumi:"accountId"`
	// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType pulumix.Output[string] `pulumi:"alternateContactType"`
	// An email address for the alternate contact.
	EmailAddress pulumix.Output[string] `pulumi:"emailAddress"`
	// Name of the alternate contact.
	Name pulumix.Output[string] `pulumi:"name"`
	// Phone number for the alternate contact.
	PhoneNumber pulumix.Output[string] `pulumi:"phoneNumber"`
	// Title for the alternate contact.
	Title pulumix.Output[string] `pulumi:"title"`
}

// NewAlternativeContact registers a new resource with the given unique name, arguments, and options.
func NewAlternativeContact(ctx *pulumi.Context,
	name string, args *AlternativeContactArgs, opts ...pulumi.ResourceOption) (*AlternativeContact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlternateContactType == nil {
		return nil, errors.New("invalid value for required argument 'AlternateContactType'")
	}
	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	if args.PhoneNumber == nil {
		return nil, errors.New("invalid value for required argument 'PhoneNumber'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlternativeContact
	err := ctx.RegisterResource("aws:account/alternativeContact:AlternativeContact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlternativeContact gets an existing AlternativeContact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlternativeContact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlternativeContactState, opts ...pulumi.ResourceOption) (*AlternativeContact, error) {
	var resource AlternativeContact
	err := ctx.ReadResource("aws:account/alternativeContact:AlternativeContact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlternativeContact resources.
type alternativeContactState struct {
	// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType *string `pulumi:"alternateContactType"`
	// An email address for the alternate contact.
	EmailAddress *string `pulumi:"emailAddress"`
	// Name of the alternate contact.
	Name *string `pulumi:"name"`
	// Phone number for the alternate contact.
	PhoneNumber *string `pulumi:"phoneNumber"`
	// Title for the alternate contact.
	Title *string `pulumi:"title"`
}

type AlternativeContactState struct {
	// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
	AccountId pulumix.Input[*string]
	// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType pulumix.Input[*string]
	// An email address for the alternate contact.
	EmailAddress pulumix.Input[*string]
	// Name of the alternate contact.
	Name pulumix.Input[*string]
	// Phone number for the alternate contact.
	PhoneNumber pulumix.Input[*string]
	// Title for the alternate contact.
	Title pulumix.Input[*string]
}

func (AlternativeContactState) ElementType() reflect.Type {
	return reflect.TypeOf((*alternativeContactState)(nil)).Elem()
}

type alternativeContactArgs struct {
	// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
	AccountId *string `pulumi:"accountId"`
	// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType string `pulumi:"alternateContactType"`
	// An email address for the alternate contact.
	EmailAddress string `pulumi:"emailAddress"`
	// Name of the alternate contact.
	Name *string `pulumi:"name"`
	// Phone number for the alternate contact.
	PhoneNumber string `pulumi:"phoneNumber"`
	// Title for the alternate contact.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a AlternativeContact resource.
type AlternativeContactArgs struct {
	// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
	AccountId pulumix.Input[*string]
	// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
	AlternateContactType pulumix.Input[string]
	// An email address for the alternate contact.
	EmailAddress pulumix.Input[string]
	// Name of the alternate contact.
	Name pulumix.Input[*string]
	// Phone number for the alternate contact.
	PhoneNumber pulumix.Input[string]
	// Title for the alternate contact.
	Title pulumix.Input[string]
}

func (AlternativeContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alternativeContactArgs)(nil)).Elem()
}

type AlternativeContactOutput struct{ *pulumi.OutputState }

func (AlternativeContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlternativeContact)(nil)).Elem()
}

func (o AlternativeContactOutput) ToAlternativeContactOutput() AlternativeContactOutput {
	return o
}

func (o AlternativeContactOutput) ToAlternativeContactOutputWithContext(ctx context.Context) AlternativeContactOutput {
	return o
}

func (o AlternativeContactOutput) ToOutput(ctx context.Context) pulumix.Output[AlternativeContact] {
	return pulumix.Output[AlternativeContact]{
		OutputState: o.OutputState,
	}
}

// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
func (o AlternativeContactOutput) AccountId() pulumix.Output[*string] {
	value := pulumix.Apply[AlternativeContact](o, func(v AlternativeContact) pulumix.Output[*string] { return v.AccountId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
func (o AlternativeContactOutput) AlternateContactType() pulumix.Output[string] {
	value := pulumix.Apply[AlternativeContact](o, func(v AlternativeContact) pulumix.Output[string] { return v.AlternateContactType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An email address for the alternate contact.
func (o AlternativeContactOutput) EmailAddress() pulumix.Output[string] {
	value := pulumix.Apply[AlternativeContact](o, func(v AlternativeContact) pulumix.Output[string] { return v.EmailAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the alternate contact.
func (o AlternativeContactOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[AlternativeContact](o, func(v AlternativeContact) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Phone number for the alternate contact.
func (o AlternativeContactOutput) PhoneNumber() pulumix.Output[string] {
	value := pulumix.Apply[AlternativeContact](o, func(v AlternativeContact) pulumix.Output[string] { return v.PhoneNumber })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Title for the alternate contact.
func (o AlternativeContactOutput) Title() pulumix.Output[string] {
	value := pulumix.Apply[AlternativeContact](o, func(v AlternativeContact) pulumix.Output[string] { return v.Title })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AlternativeContactOutput{})
}
