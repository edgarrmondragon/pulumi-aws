// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an independent configuration resource for S3 bucket [lifecycle configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html).
//
// An S3 Lifecycle configuration consists of one or more Lifecycle rules. Each rule consists of the following:
//
// * Rule metadata (`id` and `status`)
// * Filter identifying objects to which the rule applies
// * One or more transition or expiration actions
//
// For more information see the Amazon S3 User Guide on [`Lifecycle Configuration Elements`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html).
//
// > **NOTE:** S3 Buckets only support a single lifecycle configuration. Declaring multiple `s3.BucketLifecycleConfigurationV2` resources to the same S3 Bucket will cause a perpetual difference in configuration.
//
// > **NOTE:** Lifecycle configurations may take some time to fully propagate to all AWS S3 systems.
// Running TODO operations shortly after creating a lifecycle configuration may result in changes that affect configuration idempotence.
// See the Amazon S3 User Guide on [setting lifecycle configuration on a bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-set-lifecycle-configuration-intro.html).
type BucketLifecycleConfigurationV2 struct {
	pulumi.CustomResourceState

	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumix.Output[string] `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumix.Output[*string] `pulumi:"expectedBucketOwner"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules pulumix.GArrayOutput[BucketLifecycleConfigurationV2Rule, BucketLifecycleConfigurationV2RuleOutput] `pulumi:"rules"`
}

// NewBucketLifecycleConfigurationV2 registers a new resource with the given unique name, arguments, and options.
func NewBucketLifecycleConfigurationV2(ctx *pulumi.Context,
	name string, args *BucketLifecycleConfigurationV2Args, opts ...pulumi.ResourceOption) (*BucketLifecycleConfigurationV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLifecycleConfigurationV2
	err := ctx.RegisterResource("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLifecycleConfigurationV2 gets an existing BucketLifecycleConfigurationV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLifecycleConfigurationV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLifecycleConfigurationV2State, opts ...pulumi.ResourceOption) (*BucketLifecycleConfigurationV2, error) {
	var resource BucketLifecycleConfigurationV2
	err := ctx.ReadResource("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLifecycleConfigurationV2 resources.
type bucketLifecycleConfigurationV2State struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket *string `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules []BucketLifecycleConfigurationV2Rule `pulumi:"rules"`
}

type BucketLifecycleConfigurationV2State struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumix.Input[*string]
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumix.Input[*string]
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules pulumix.Input[[]*BucketLifecycleConfigurationV2RuleArgs]
}

func (BucketLifecycleConfigurationV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationV2State)(nil)).Elem()
}

type bucketLifecycleConfigurationV2Args struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket string `pulumi:"bucket"`
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules []BucketLifecycleConfigurationV2Rule `pulumi:"rules"`
}

// The set of arguments for constructing a BucketLifecycleConfigurationV2 resource.
type BucketLifecycleConfigurationV2Args struct {
	// Name of the source S3 bucket you want Amazon S3 to monitor.
	Bucket pulumix.Input[string]
	// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
	ExpectedBucketOwner pulumix.Input[*string]
	// List of configuration blocks describing the rules managing the replication. See below.
	Rules pulumix.Input[[]*BucketLifecycleConfigurationV2RuleArgs]
}

func (BucketLifecycleConfigurationV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLifecycleConfigurationV2Args)(nil)).Elem()
}

type BucketLifecycleConfigurationV2Output struct{ *pulumi.OutputState }

func (BucketLifecycleConfigurationV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketLifecycleConfigurationV2)(nil)).Elem()
}

func (o BucketLifecycleConfigurationV2Output) ToBucketLifecycleConfigurationV2Output() BucketLifecycleConfigurationV2Output {
	return o
}

func (o BucketLifecycleConfigurationV2Output) ToBucketLifecycleConfigurationV2OutputWithContext(ctx context.Context) BucketLifecycleConfigurationV2Output {
	return o
}

func (o BucketLifecycleConfigurationV2Output) ToOutput(ctx context.Context) pulumix.Output[BucketLifecycleConfigurationV2] {
	return pulumix.Output[BucketLifecycleConfigurationV2]{
		OutputState: o.OutputState,
	}
}

// Name of the source S3 bucket you want Amazon S3 to monitor.
func (o BucketLifecycleConfigurationV2Output) Bucket() pulumix.Output[string] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2](o, func(v BucketLifecycleConfigurationV2) pulumix.Output[string] { return v.Bucket })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
func (o BucketLifecycleConfigurationV2Output) ExpectedBucketOwner() pulumix.Output[*string] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2](o, func(v BucketLifecycleConfigurationV2) pulumix.Output[*string] { return v.ExpectedBucketOwner })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// List of configuration blocks describing the rules managing the replication. See below.
func (o BucketLifecycleConfigurationV2Output) Rules() pulumix.GArrayOutput[BucketLifecycleConfigurationV2Rule, BucketLifecycleConfigurationV2RuleOutput] {
	value := pulumix.Apply[BucketLifecycleConfigurationV2](o, func(v BucketLifecycleConfigurationV2) pulumix.GArrayOutput[BucketLifecycleConfigurationV2Rule, BucketLifecycleConfigurationV2RuleOutput] {
		return v.Rules
	})
	unwrapped := pulumix.Flatten[[]BucketLifecycleConfigurationV2Rule, pulumix.GArrayOutput[BucketLifecycleConfigurationV2Rule, BucketLifecycleConfigurationV2RuleOutput]](value)
	return pulumix.GArrayOutput[BucketLifecycleConfigurationV2Rule, BucketLifecycleConfigurationV2RuleOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(BucketLifecycleConfigurationV2Output{})
}
