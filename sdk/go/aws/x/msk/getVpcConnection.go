// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an Amazon MSK VPC Connection.
func LookupVpcConnection(ctx *pulumi.Context, args *LookupVpcConnectionArgs, opts ...pulumi.InvokeOption) (*LookupVpcConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcConnectionResult
	err := ctx.Invoke("aws:msk/getVpcConnection:getVpcConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcConnection.
type LookupVpcConnectionArgs struct {
	// ARN of the VPC Connection.
	Arn string `pulumi:"arn"`
	// Map of key-value pairs assigned to the VPC Connection.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcConnection.
type LookupVpcConnectionResult struct {
	Arn string `pulumi:"arn"`
	// The authentication type for the client VPC Connection.
	Authentication string `pulumi:"authentication"`
	// The list of subnets in the client VPC.
	ClientSubnets []string `pulumi:"clientSubnets"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The security groups attached to the ENIs for the broker nodes.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Map of key-value pairs assigned to the VPC Connection.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the cluster.
	TargetClusterArn string `pulumi:"targetClusterArn"`
	// The VPC ID of the remote client.
	VpcId string `pulumi:"vpcId"`
}

func LookupVpcConnectionOutput(ctx *pulumi.Context, args LookupVpcConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupVpcConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcConnectionArgs](args.ToOutput(), func(plainArgs *LookupVpcConnectionArgs) (*LookupVpcConnectionResult, error) {
		return LookupVpcConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcConnectionResultOutput, *LookupVpcConnectionResult](outputResult)
}

// A collection of arguments for invoking getVpcConnection.
type LookupVpcConnectionOutputArgs struct {
	// ARN of the VPC Connection.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Map of key-value pairs assigned to the VPC Connection.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVpcConnectionOutputArgs) ToOutput() pulumix.Output[*LookupVpcConnectionArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcConnectionArgs {
		return &LookupVpcConnectionArgs{
			Arn:  resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupVpcConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupVpcConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcConnectionResult)(nil)).Elem()
}

func (o LookupVpcConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcConnectionResult] {
	return pulumix.Output[*LookupVpcConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcConnectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) string { return v.Arn })
}

func (o LookupVpcConnectionResultOutput) Authentication() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) string { return v.Authentication })
}

func (o LookupVpcConnectionResultOutput) ClientSubnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) []string { return v.ClientSubnets })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) string { return v.Id })
}

func (o LookupVpcConnectionResultOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcConnectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcConnectionResultOutput) TargetClusterArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) string { return v.TargetClusterArn })
}

func (o LookupVpcConnectionResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcConnectionResult](o, func(v *LookupVpcConnectionResult) string { return v.VpcId })
}
