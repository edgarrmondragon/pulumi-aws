// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to retrieve information about an EventBridge connection.
//
// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
func LookupEventConnection(ctx *pulumi.Context, args *LookupEventConnectionArgs, opts ...pulumi.InvokeOption) (*LookupEventConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventConnectionResult
	err := ctx.Invoke("aws:cloudwatch/getEventConnection:getEventConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventConnection.
type LookupEventConnectionArgs struct {
	// Name of the connection.
	Name string `pulumi:"name"`
}

// A collection of values returned by getEventConnection.
type LookupEventConnectionResult struct {
	// ARN (Amazon Resource Name) for the connection.
	Arn string `pulumi:"arn"`
	// Type of authorization to use to connect. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
	AuthorizationType string `pulumi:"authorizationType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the connection.
	Name string `pulumi:"name"`
	// ARN (Amazon Resource Name) for the secret created from the authorization parameters specified for the connection.
	SecretArn string `pulumi:"secretArn"`
}

func LookupEventConnectionOutput(ctx *pulumi.Context, args LookupEventConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupEventConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupEventConnectionArgs](args.ToOutput(), func(plainArgs *LookupEventConnectionArgs) (*LookupEventConnectionResult, error) {
		return LookupEventConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupEventConnectionResultOutput, *LookupEventConnectionResult](outputResult)
}

// A collection of arguments for invoking getEventConnection.
type LookupEventConnectionOutputArgs struct {
	// Name of the connection.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupEventConnectionOutputArgs) ToOutput() pulumix.Output[*LookupEventConnectionArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupEventConnectionArgs {
		return &LookupEventConnectionArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupEventConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupEventConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventConnectionResult)(nil)).Elem()
}

func (o LookupEventConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupEventConnectionResult] {
	return pulumix.Output[*LookupEventConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupEventConnectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventConnectionResult](o, func(v *LookupEventConnectionResult) string { return v.Arn })
}

func (o LookupEventConnectionResultOutput) AuthorizationType() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventConnectionResult](o, func(v *LookupEventConnectionResult) string { return v.AuthorizationType })
}

func (o LookupEventConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventConnectionResult](o, func(v *LookupEventConnectionResult) string { return v.Id })
}

func (o LookupEventConnectionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventConnectionResult](o, func(v *LookupEventConnectionResult) string { return v.Name })
}

func (o LookupEventConnectionResultOutput) SecretArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEventConnectionResult](o, func(v *LookupEventConnectionResult) string { return v.SecretArn })
}
