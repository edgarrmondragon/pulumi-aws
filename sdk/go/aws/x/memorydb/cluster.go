// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a MemoryDB Cluster.
//
// More information about MemoryDB can be found in the [Developer Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/what-is-memorydb-for-redis.html).
type Cluster struct {
	pulumi.CustomResourceState

	// The name of the Access Control List to associate with the cluster.
	AclName pulumix.Output[string] `pulumi:"aclName"`
	// The ARN of the cluster.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
	AutoMinorVersionUpgrade pulumix.Output[*bool]                                                      `pulumi:"autoMinorVersionUpgrade"`
	ClusterEndpoints        pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput] `pulumi:"clusterEndpoints"`
	// Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
	DataTiering pulumix.Output[*bool] `pulumi:"dataTiering"`
	// Description for the cluster.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Patch version number of the Redis engine used by the cluster.
	EnginePatchVersion pulumix.Output[string] `pulumi:"enginePatchVersion"`
	// Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotName pulumix.Output[*string] `pulumi:"finalSnapshotName"`
	// ARN of the KMS key used to encrypt the cluster at rest.
	KmsKeyArn pulumix.Output[*string] `pulumi:"kmsKeyArn"`
	// Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
	MaintenanceWindow pulumix.Output[string] `pulumi:"maintenanceWindow"`
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
	//
	// The following arguments are optional:
	NodeType pulumix.Output[string] `pulumi:"nodeType"`
	// The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
	NumReplicasPerShard pulumix.Output[*int] `pulumi:"numReplicasPerShard"`
	// The number of shards in the cluster. Defaults to `1`.
	NumShards pulumix.Output[*int] `pulumi:"numShards"`
	// The name of the parameter group associated with the cluster.
	ParameterGroupName pulumix.Output[string] `pulumi:"parameterGroupName"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumix.Output[int] `pulumi:"port"`
	// Set of VPC Security Group ID-s to associate with this cluster.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// Set of shards in this cluster.
	Shards pulumix.GArrayOutput[ClusterShard, ClusterShardOutput] `pulumi:"shards"`
	// List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
	SnapshotArns pulumix.ArrayOutput[string] `pulumi:"snapshotArns"`
	// The name of a snapshot from which to restore data into the new cluster.
	SnapshotName pulumix.Output[*string] `pulumi:"snapshotName"`
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
	SnapshotRetentionLimit pulumix.Output[int] `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
	SnapshotWindow pulumix.Output[string] `pulumi:"snapshotWindow"`
	// ARN of the SNS topic to which cluster notifications are sent.
	SnsTopicArn pulumix.Output[*string] `pulumi:"snsTopicArn"`
	// The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
	SubnetGroupName pulumix.Output[string] `pulumi:"subnetGroupName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// A flag to enable in-transit encryption on the cluster. When set to `false`, the `aclName` must be `open-access`. Defaults to `true`.
	TlsEnabled pulumix.Output[*bool] `pulumi:"tlsEnabled"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclName == nil {
		return nil, errors.New("invalid value for required argument 'AclName'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws:memorydb/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws:memorydb/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The name of the Access Control List to associate with the cluster.
	AclName *string `pulumi:"aclName"`
	// The ARN of the cluster.
	Arn *string `pulumi:"arn"`
	// When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
	AutoMinorVersionUpgrade *bool                    `pulumi:"autoMinorVersionUpgrade"`
	ClusterEndpoints        []ClusterClusterEndpoint `pulumi:"clusterEndpoints"`
	// Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
	DataTiering *bool `pulumi:"dataTiering"`
	// Description for the cluster.
	Description *string `pulumi:"description"`
	// Patch version number of the Redis engine used by the cluster.
	EnginePatchVersion *string `pulumi:"enginePatchVersion"`
	// Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
	EngineVersion *string `pulumi:"engineVersion"`
	// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotName *string `pulumi:"finalSnapshotName"`
	// ARN of the KMS key used to encrypt the cluster at rest.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
	//
	// The following arguments are optional:
	NodeType *string `pulumi:"nodeType"`
	// The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
	NumReplicasPerShard *int `pulumi:"numReplicasPerShard"`
	// The number of shards in the cluster. Defaults to `1`.
	NumShards *int `pulumi:"numShards"`
	// The name of the parameter group associated with the cluster.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port *int `pulumi:"port"`
	// Set of VPC Security Group ID-s to associate with this cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Set of shards in this cluster.
	Shards []ClusterShard `pulumi:"shards"`
	// List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
	SnapshotArns []string `pulumi:"snapshotArns"`
	// The name of a snapshot from which to restore data into the new cluster.
	SnapshotName *string `pulumi:"snapshotName"`
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
	SnapshotRetentionLimit *int `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
	SnapshotWindow *string `pulumi:"snapshotWindow"`
	// ARN of the SNS topic to which cluster notifications are sent.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// A flag to enable in-transit encryption on the cluster. When set to `false`, the `aclName` must be `open-access`. Defaults to `true`.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
}

type ClusterState struct {
	// The name of the Access Control List to associate with the cluster.
	AclName pulumix.Input[*string]
	// The ARN of the cluster.
	Arn pulumix.Input[*string]
	// When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
	AutoMinorVersionUpgrade pulumix.Input[*bool]
	ClusterEndpoints        pulumix.Input[[]*ClusterClusterEndpointArgs]
	// Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
	DataTiering pulumix.Input[*bool]
	// Description for the cluster.
	Description pulumix.Input[*string]
	// Patch version number of the Redis engine used by the cluster.
	EnginePatchVersion pulumix.Input[*string]
	// Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
	EngineVersion pulumix.Input[*string]
	// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotName pulumix.Input[*string]
	// ARN of the KMS key used to encrypt the cluster at rest.
	KmsKeyArn pulumix.Input[*string]
	// Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
	MaintenanceWindow pulumix.Input[*string]
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
	//
	// The following arguments are optional:
	NodeType pulumix.Input[*string]
	// The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
	NumReplicasPerShard pulumix.Input[*int]
	// The number of shards in the cluster. Defaults to `1`.
	NumShards pulumix.Input[*int]
	// The name of the parameter group associated with the cluster.
	ParameterGroupName pulumix.Input[*string]
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumix.Input[*int]
	// Set of VPC Security Group ID-s to associate with this cluster.
	SecurityGroupIds pulumix.Input[[]string]
	// Set of shards in this cluster.
	Shards pulumix.Input[[]*ClusterShardArgs]
	// List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
	SnapshotArns pulumix.Input[[]string]
	// The name of a snapshot from which to restore data into the new cluster.
	SnapshotName pulumix.Input[*string]
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
	SnapshotRetentionLimit pulumix.Input[*int]
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
	SnapshotWindow pulumix.Input[*string]
	// ARN of the SNS topic to which cluster notifications are sent.
	SnsTopicArn pulumix.Input[*string]
	// The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
	SubnetGroupName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// A flag to enable in-transit encryption on the cluster. When set to `false`, the `aclName` must be `open-access`. Defaults to `true`.
	TlsEnabled pulumix.Input[*bool]
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The name of the Access Control List to associate with the cluster.
	AclName string `pulumi:"aclName"`
	// When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
	DataTiering *bool `pulumi:"dataTiering"`
	// Description for the cluster.
	Description *string `pulumi:"description"`
	// Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
	EngineVersion *string `pulumi:"engineVersion"`
	// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotName *string `pulumi:"finalSnapshotName"`
	// ARN of the KMS key used to encrypt the cluster at rest.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
	//
	// The following arguments are optional:
	NodeType string `pulumi:"nodeType"`
	// The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
	NumReplicasPerShard *int `pulumi:"numReplicasPerShard"`
	// The number of shards in the cluster. Defaults to `1`.
	NumShards *int `pulumi:"numShards"`
	// The name of the parameter group associated with the cluster.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port *int `pulumi:"port"`
	// Set of VPC Security Group ID-s to associate with this cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
	SnapshotArns []string `pulumi:"snapshotArns"`
	// The name of a snapshot from which to restore data into the new cluster.
	SnapshotName *string `pulumi:"snapshotName"`
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
	SnapshotRetentionLimit *int `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
	SnapshotWindow *string `pulumi:"snapshotWindow"`
	// ARN of the SNS topic to which cluster notifications are sent.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A flag to enable in-transit encryption on the cluster. When set to `false`, the `aclName` must be `open-access`. Defaults to `true`.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name of the Access Control List to associate with the cluster.
	AclName pulumix.Input[string]
	// When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
	AutoMinorVersionUpgrade pulumix.Input[*bool]
	// Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
	DataTiering pulumix.Input[*bool]
	// Description for the cluster.
	Description pulumix.Input[*string]
	// Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
	EngineVersion pulumix.Input[*string]
	// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotName pulumix.Input[*string]
	// ARN of the KMS key used to encrypt the cluster at rest.
	KmsKeyArn pulumix.Input[*string]
	// Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
	MaintenanceWindow pulumix.Input[*string]
	// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
	//
	// The following arguments are optional:
	NodeType pulumix.Input[string]
	// The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
	NumReplicasPerShard pulumix.Input[*int]
	// The number of shards in the cluster. Defaults to `1`.
	NumShards pulumix.Input[*int]
	// The name of the parameter group associated with the cluster.
	ParameterGroupName pulumix.Input[*string]
	// The port number on which each of the nodes accepts connections. Defaults to `6379`.
	Port pulumix.Input[*int]
	// Set of VPC Security Group ID-s to associate with this cluster.
	SecurityGroupIds pulumix.Input[[]string]
	// List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
	SnapshotArns pulumix.Input[[]string]
	// The name of a snapshot from which to restore data into the new cluster.
	SnapshotName pulumix.Input[*string]
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
	SnapshotRetentionLimit pulumix.Input[*int]
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
	SnapshotWindow pulumix.Input[*string]
	// ARN of the SNS topic to which cluster notifications are sent.
	SnsTopicArn pulumix.Input[*string]
	// The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
	SubnetGroupName pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A flag to enable in-transit encryption on the cluster. When set to `false`, the `aclName` must be `open-access`. Defaults to `true`.
	TlsEnabled pulumix.Input[*bool]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// The name of the Access Control List to associate with the cluster.
func (o ClusterOutput) AclName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.AclName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the cluster.
func (o ClusterOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
func (o ClusterOutput) AutoMinorVersionUpgrade() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.AutoMinorVersionUpgrade })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o ClusterOutput) ClusterEndpoints() pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput] {
		return v.ClusterEndpoints
	})
	unwrapped := pulumix.Flatten[[]ClusterClusterEndpoint, pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput]](value)
	return pulumix.GArrayOutput[ClusterClusterEndpoint, ClusterClusterEndpointOutput]{OutputState: unwrapped.OutputState}
}

// Enables data tiering. This option is not supported by all instance types. For more information, see [Data tiering](https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html).
func (o ClusterOutput) DataTiering() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.DataTiering })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Description for the cluster.
func (o ClusterOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Patch version number of the Redis engine used by the cluster.
func (o ClusterOutput) EnginePatchVersion() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.EnginePatchVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
func (o ClusterOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
func (o ClusterOutput) FinalSnapshotName() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.FinalSnapshotName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ARN of the KMS key used to encrypt the cluster at rest.
func (o ClusterOutput) KmsKeyArn() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.KmsKeyArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies the weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
func (o ClusterOutput) MaintenanceWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.MaintenanceWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ClusterOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o ClusterOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
//
// The following arguments are optional:
func (o ClusterOutput) NodeType() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.NodeType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
func (o ClusterOutput) NumReplicasPerShard() pulumix.Output[*int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*int] { return v.NumReplicasPerShard })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The number of shards in the cluster. Defaults to `1`.
func (o ClusterOutput) NumShards() pulumix.Output[*int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*int] { return v.NumShards })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name of the parameter group associated with the cluster.
func (o ClusterOutput) ParameterGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.ParameterGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port number on which each of the nodes accepts connections. Defaults to `6379`.
func (o ClusterOutput) Port() pulumix.Output[int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[int] { return v.Port })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Set of VPC Security Group ID-s to associate with this cluster.
func (o ClusterOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Set of shards in this cluster.
func (o ClusterOutput) Shards() pulumix.GArrayOutput[ClusterShard, ClusterShardOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GArrayOutput[ClusterShard, ClusterShardOutput] { return v.Shards })
	unwrapped := pulumix.Flatten[[]ClusterShard, pulumix.GArrayOutput[ClusterShard, ClusterShardOutput]](value)
	return pulumix.GArrayOutput[ClusterShard, ClusterShardOutput]{OutputState: unwrapped.OutputState}
}

// List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
func (o ClusterOutput) SnapshotArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.ArrayOutput[string] { return v.SnapshotArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The name of a snapshot from which to restore data into the new cluster.
func (o ClusterOutput) SnapshotName() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.SnapshotName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
func (o ClusterOutput) SnapshotRetentionLimit() pulumix.Output[int] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[int] { return v.SnapshotRetentionLimit })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
func (o ClusterOutput) SnapshotWindow() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.SnapshotWindow })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the SNS topic to which cluster notifications are sent.
func (o ClusterOutput) SnsTopicArn() pulumix.Output[*string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*string] { return v.SnsTopicArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
func (o ClusterOutput) SubnetGroupName() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.SubnetGroupName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ClusterOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ClusterOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A flag to enable in-transit encryption on the cluster. When set to `false`, the `aclName` must be `open-access`. Defaults to `true`.
func (o ClusterOutput) TlsEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[*bool] { return v.TlsEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
