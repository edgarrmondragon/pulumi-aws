// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppStream fleet.
type Fleet struct {
	pulumi.CustomResourceState

	// ARN of the appstream fleet.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Configuration block for the desired capacity of the fleet. See below.
	ComputeCapacity pulumix.GPtrOutput[FleetComputeCapacity, FleetComputeCapacityOutput] `pulumi:"computeCapacity"`
	// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Description to display.
	Description pulumix.Output[string] `pulumi:"description"`
	// Amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInSeconds pulumix.Output[int] `pulumi:"disconnectTimeoutInSeconds"`
	// Human-readable friendly name for the AppStream fleet.
	DisplayName pulumix.Output[string] `pulumi:"displayName"`
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
	DomainJoinInfo pulumix.GPtrOutput[FleetDomainJoinInfo, FleetDomainJoinInfoOutput] `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the fleet.
	EnableDefaultInternetAccess pulumix.Output[bool] `pulumi:"enableDefaultInternetAccess"`
	// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
	FleetType pulumix.Output[string] `pulumi:"fleetType"`
	// ARN of the IAM role to apply to the fleet.
	IamRoleArn pulumix.Output[string] `pulumi:"iamRoleArn"`
	// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
	IdleDisconnectTimeoutInSeconds pulumix.Output[*int] `pulumi:"idleDisconnectTimeoutInSeconds"`
	// ARN of the public, private, or shared image to use.
	ImageArn pulumix.Output[string] `pulumi:"imageArn"`
	// Name of the image used to create the fleet.
	ImageName pulumix.Output[string] `pulumi:"imageName"`
	// Instance type to use when launching fleet instances.
	InstanceType pulumix.Output[string] `pulumi:"instanceType"`
	// Maximum amount of time that a streaming session can remain active, in seconds.
	MaxUserDurationInSeconds pulumix.Output[int] `pulumi:"maxUserDurationInSeconds"`
	// Unique name for the fleet.
	//
	// The following arguments are optional:
	Name pulumix.Output[string] `pulumi:"name"`
	// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
	State pulumix.Output[string] `pulumi:"state"`
	// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
	StreamView pulumix.Output[string] `pulumi:"streamView"`
	// Map of tags to attach to AppStream instances.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig pulumix.GPtrOutput[FleetVpcConfig, FleetVpcConfigOutput] `pulumi:"vpcConfig"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComputeCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ComputeCapacity'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws:appstream/fleet:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws:appstream/fleet:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
	// ARN of the appstream fleet.
	Arn *string `pulumi:"arn"`
	// Configuration block for the desired capacity of the fleet. See below.
	ComputeCapacity *FleetComputeCapacity `pulumi:"computeCapacity"`
	// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
	CreatedTime *string `pulumi:"createdTime"`
	// Description to display.
	Description *string `pulumi:"description"`
	// Amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInSeconds *int `pulumi:"disconnectTimeoutInSeconds"`
	// Human-readable friendly name for the AppStream fleet.
	DisplayName *string `pulumi:"displayName"`
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
	DomainJoinInfo *FleetDomainJoinInfo `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the fleet.
	EnableDefaultInternetAccess *bool `pulumi:"enableDefaultInternetAccess"`
	// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
	FleetType *string `pulumi:"fleetType"`
	// ARN of the IAM role to apply to the fleet.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
	IdleDisconnectTimeoutInSeconds *int `pulumi:"idleDisconnectTimeoutInSeconds"`
	// ARN of the public, private, or shared image to use.
	ImageArn *string `pulumi:"imageArn"`
	// Name of the image used to create the fleet.
	ImageName *string `pulumi:"imageName"`
	// Instance type to use when launching fleet instances.
	InstanceType *string `pulumi:"instanceType"`
	// Maximum amount of time that a streaming session can remain active, in seconds.
	MaxUserDurationInSeconds *int `pulumi:"maxUserDurationInSeconds"`
	// Unique name for the fleet.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
	State *string `pulumi:"state"`
	// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
	StreamView *string `pulumi:"streamView"`
	// Map of tags to attach to AppStream instances.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig *FleetVpcConfig `pulumi:"vpcConfig"`
}

type FleetState struct {
	// ARN of the appstream fleet.
	Arn pulumix.Input[*string]
	// Configuration block for the desired capacity of the fleet. See below.
	ComputeCapacity pulumix.Input[*FleetComputeCapacityArgs]
	// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
	CreatedTime pulumix.Input[*string]
	// Description to display.
	Description pulumix.Input[*string]
	// Amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInSeconds pulumix.Input[*int]
	// Human-readable friendly name for the AppStream fleet.
	DisplayName pulumix.Input[*string]
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
	DomainJoinInfo pulumix.Input[*FleetDomainJoinInfoArgs]
	// Enables or disables default internet access for the fleet.
	EnableDefaultInternetAccess pulumix.Input[*bool]
	// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
	FleetType pulumix.Input[*string]
	// ARN of the IAM role to apply to the fleet.
	IamRoleArn pulumix.Input[*string]
	// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
	IdleDisconnectTimeoutInSeconds pulumix.Input[*int]
	// ARN of the public, private, or shared image to use.
	ImageArn pulumix.Input[*string]
	// Name of the image used to create the fleet.
	ImageName pulumix.Input[*string]
	// Instance type to use when launching fleet instances.
	InstanceType pulumix.Input[*string]
	// Maximum amount of time that a streaming session can remain active, in seconds.
	MaxUserDurationInSeconds pulumix.Input[*int]
	// Unique name for the fleet.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
	State pulumix.Input[*string]
	// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
	StreamView pulumix.Input[*string]
	// Map of tags to attach to AppStream instances.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig pulumix.Input[*FleetVpcConfigArgs]
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	// Configuration block for the desired capacity of the fleet. See below.
	ComputeCapacity FleetComputeCapacity `pulumi:"computeCapacity"`
	// Description to display.
	Description *string `pulumi:"description"`
	// Amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInSeconds *int `pulumi:"disconnectTimeoutInSeconds"`
	// Human-readable friendly name for the AppStream fleet.
	DisplayName *string `pulumi:"displayName"`
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
	DomainJoinInfo *FleetDomainJoinInfo `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the fleet.
	EnableDefaultInternetAccess *bool `pulumi:"enableDefaultInternetAccess"`
	// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
	FleetType *string `pulumi:"fleetType"`
	// ARN of the IAM role to apply to the fleet.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
	IdleDisconnectTimeoutInSeconds *int `pulumi:"idleDisconnectTimeoutInSeconds"`
	// ARN of the public, private, or shared image to use.
	ImageArn *string `pulumi:"imageArn"`
	// Name of the image used to create the fleet.
	ImageName *string `pulumi:"imageName"`
	// Instance type to use when launching fleet instances.
	InstanceType string `pulumi:"instanceType"`
	// Maximum amount of time that a streaming session can remain active, in seconds.
	MaxUserDurationInSeconds *int `pulumi:"maxUserDurationInSeconds"`
	// Unique name for the fleet.
	//
	// The following arguments are optional:
	Name *string `pulumi:"name"`
	// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
	StreamView *string `pulumi:"streamView"`
	// Map of tags to attach to AppStream instances.
	Tags map[string]string `pulumi:"tags"`
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig *FleetVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// Configuration block for the desired capacity of the fleet. See below.
	ComputeCapacity pulumix.Input[*FleetComputeCapacityArgs]
	// Description to display.
	Description pulumix.Input[*string]
	// Amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInSeconds pulumix.Input[*int]
	// Human-readable friendly name for the AppStream fleet.
	DisplayName pulumix.Input[*string]
	// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
	DomainJoinInfo pulumix.Input[*FleetDomainJoinInfoArgs]
	// Enables or disables default internet access for the fleet.
	EnableDefaultInternetAccess pulumix.Input[*bool]
	// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
	FleetType pulumix.Input[*string]
	// ARN of the IAM role to apply to the fleet.
	IamRoleArn pulumix.Input[*string]
	// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
	IdleDisconnectTimeoutInSeconds pulumix.Input[*int]
	// ARN of the public, private, or shared image to use.
	ImageArn pulumix.Input[*string]
	// Name of the image used to create the fleet.
	ImageName pulumix.Input[*string]
	// Instance type to use when launching fleet instances.
	InstanceType pulumix.Input[string]
	// Maximum amount of time that a streaming session can remain active, in seconds.
	MaxUserDurationInSeconds pulumix.Input[*int]
	// Unique name for the fleet.
	//
	// The following arguments are optional:
	Name pulumix.Input[*string]
	// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
	StreamView pulumix.Input[*string]
	// Map of tags to attach to AppStream instances.
	Tags pulumix.Input[map[string]string]
	// Configuration block for the VPC configuration for the image builder. See below.
	VpcConfig pulumix.Input[*FleetVpcConfigArgs]
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) ToOutput(ctx context.Context) pulumix.Output[Fleet] {
	return pulumix.Output[Fleet]{
		OutputState: o.OutputState,
	}
}

// ARN of the appstream fleet.
func (o FleetOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the desired capacity of the fleet. See below.
func (o FleetOutput) ComputeCapacity() pulumix.GPtrOutput[FleetComputeCapacity, FleetComputeCapacityOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GPtrOutput[FleetComputeCapacity, FleetComputeCapacityOutput] {
		return v.ComputeCapacity
	})
	unwrapped := pulumix.Flatten[*FleetComputeCapacity, pulumix.GPtrOutput[FleetComputeCapacity, FleetComputeCapacityOutput]](value)
	return pulumix.GPtrOutput[FleetComputeCapacity, FleetComputeCapacityOutput]{OutputState: unwrapped.OutputState}
}

// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
func (o FleetOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description to display.
func (o FleetOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amount of time that a streaming session remains active after users disconnect.
func (o FleetOutput) DisconnectTimeoutInSeconds() pulumix.Output[int] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[int] { return v.DisconnectTimeoutInSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Human-readable friendly name for the AppStream fleet.
func (o FleetOutput) DisplayName() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.DisplayName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
func (o FleetOutput) DomainJoinInfo() pulumix.GPtrOutput[FleetDomainJoinInfo, FleetDomainJoinInfoOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GPtrOutput[FleetDomainJoinInfo, FleetDomainJoinInfoOutput] {
		return v.DomainJoinInfo
	})
	unwrapped := pulumix.Flatten[*FleetDomainJoinInfo, pulumix.GPtrOutput[FleetDomainJoinInfo, FleetDomainJoinInfoOutput]](value)
	return pulumix.GPtrOutput[FleetDomainJoinInfo, FleetDomainJoinInfoOutput]{OutputState: unwrapped.OutputState}
}

// Enables or disables default internet access for the fleet.
func (o FleetOutput) EnableDefaultInternetAccess() pulumix.Output[bool] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[bool] { return v.EnableDefaultInternetAccess })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
func (o FleetOutput) FleetType() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.FleetType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the IAM role to apply to the fleet.
func (o FleetOutput) IamRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.IamRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
func (o FleetOutput) IdleDisconnectTimeoutInSeconds() pulumix.Output[*int] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[*int] { return v.IdleDisconnectTimeoutInSeconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// ARN of the public, private, or shared image to use.
func (o FleetOutput) ImageArn() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.ImageArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the image used to create the fleet.
func (o FleetOutput) ImageName() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.ImageName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance type to use when launching fleet instances.
func (o FleetOutput) InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Maximum amount of time that a streaming session can remain active, in seconds.
func (o FleetOutput) MaxUserDurationInSeconds() pulumix.Output[int] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[int] { return v.MaxUserDurationInSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Unique name for the fleet.
//
// The following arguments are optional:
func (o FleetOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
func (o FleetOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
func (o FleetOutput) StreamView() pulumix.Output[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.Output[string] { return v.StreamView })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to attach to AppStream instances.
func (o FleetOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o FleetOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block for the VPC configuration for the image builder. See below.
func (o FleetOutput) VpcConfig() pulumix.GPtrOutput[FleetVpcConfig, FleetVpcConfigOutput] {
	value := pulumix.Apply[Fleet](o, func(v Fleet) pulumix.GPtrOutput[FleetVpcConfig, FleetVpcConfigOutput] { return v.VpcConfig })
	unwrapped := pulumix.Flatten[*FleetVpcConfig, pulumix.GPtrOutput[FleetVpcConfig, FleetVpcConfigOutput]](value)
	return pulumix.GPtrOutput[FleetVpcConfig, FleetVpcConfigOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FleetOutput{})
}
