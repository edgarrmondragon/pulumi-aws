// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ID of a registered AMI for use in other
// resources.
func LookupAmi(ctx *pulumi.Context, args *LookupAmiArgs, opts ...pulumi.InvokeOption) (*LookupAmiResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAmiResult
	err := ctx.Invoke("aws:ec2/getAmi:getAmi", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAmi.
type LookupAmiArgs struct {
	// Limit search to users with *explicit* launch permission on
	// the image. Valid items are the numeric account ID or `self`.
	ExecutableUsers []string `pulumi:"executableUsers"`
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-images in the AWS CLI reference][1].
	Filters []GetAmiFilter `pulumi:"filters"`
	// If true, all deprecated AMIs are included in the response. If false, no deprecated AMIs are included in the response. If no value is specified, the default value is false.
	IncludeDeprecated *bool `pulumi:"includeDeprecated"`
	// If more than one result is returned, use the most
	// recent AMI.
	MostRecent *bool `pulumi:"mostRecent"`
	// Regex string to apply to the AMI list returned
	// by AWS. This allows more advanced filtering not supported from the AWS API. This
	// filtering is done locally on what AWS returns, and could have a performance
	// impact if the result is large. Combine this with other
	// options to narrow down the list AWS returns.
	//
	// > **NOTE:** If more or less than a single match is returned by the search,
	// this call will fail. Ensure that your search is specific enough to return
	// a single AMI ID only, or use `mostRecent` to choose the most recent one. If
	// you want to match multiple AMIs, use the `ec2.getAmiIds` data source instead.
	NameRegex *string `pulumi:"nameRegex"`
	// List of AMI owners to limit search. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).
	Owners []string `pulumi:"owners"`
	// Any tags assigned to the image.
	// * `tags.#.key` - Key name of the tag.
	// * `tags.#.value` - Value of the tag.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getAmi.
type LookupAmiResult struct {
	// OS architecture of the AMI (ie: `i386` or `x8664`).
	Architecture string `pulumi:"architecture"`
	// ARN of the AMI.
	Arn string `pulumi:"arn"`
	// Set of objects with block device mappings of the AMI.
	BlockDeviceMappings []GetAmiBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// Boot mode of the image.
	BootMode string `pulumi:"bootMode"`
	// Date and time the image was created.
	CreationDate string `pulumi:"creationDate"`
	// Date and time when the image will be deprecated.
	DeprecationTime string `pulumi:"deprecationTime"`
	// Description of the AMI that was provided during image
	// creation.
	Description string `pulumi:"description"`
	// Whether enhanced networking with ENA is enabled.
	EnaSupport      bool           `pulumi:"enaSupport"`
	ExecutableUsers []string       `pulumi:"executableUsers"`
	Filters         []GetAmiFilter `pulumi:"filters"`
	// Hypervisor type of the image.
	Hypervisor string `pulumi:"hypervisor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the AMI. Should be the same as the resource `id`.
	ImageId string `pulumi:"imageId"`
	// Location of the AMI.
	ImageLocation string `pulumi:"imageLocation"`
	// AWS account alias (for example, `amazon`, `self`) or
	// the AWS account ID of the AMI owner.
	ImageOwnerAlias string `pulumi:"imageOwnerAlias"`
	// Type of image.
	ImageType string `pulumi:"imageType"`
	// Instance Metadata Service (IMDS) support mode for the image. Set to `v2.0` if instances ran from this image enforce IMDSv2.
	ImdsSupport       string `pulumi:"imdsSupport"`
	IncludeDeprecated *bool  `pulumi:"includeDeprecated"`
	// Kernel associated with the image, if any. Only applicable
	// for machine images.
	KernelId   string `pulumi:"kernelId"`
	MostRecent *bool  `pulumi:"mostRecent"`
	// Name of the AMI that was provided during image creation.
	Name      string  `pulumi:"name"`
	NameRegex *string `pulumi:"nameRegex"`
	// AWS account ID of the image owner.
	OwnerId string   `pulumi:"ownerId"`
	Owners  []string `pulumi:"owners"`
	// Value is Windows for `Windows` AMIs; otherwise blank.
	Platform string `pulumi:"platform"`
	// Platform details associated with the billing code of the AMI.
	PlatformDetails string `pulumi:"platformDetails"`
	// Any product codes associated with the AMI.
	// * `product_codes.#.product_code_id` - The product code.
	// * `product_codes.#.product_code_type` - The type of product code.
	ProductCodes []GetAmiProductCode `pulumi:"productCodes"`
	// `true` if the image has public launch permissions.
	Public bool `pulumi:"public"`
	// RAM disk associated with the image, if any. Only applicable
	// for machine images.
	RamdiskId string `pulumi:"ramdiskId"`
	// Device name of the root device.
	RootDeviceName string `pulumi:"rootDeviceName"`
	// Type of root device (ie: `ebs` or `instance-store`).
	RootDeviceType string `pulumi:"rootDeviceType"`
	// Snapshot id associated with the root device, if any
	// (only applies to `ebs` root devices).
	RootSnapshotId string `pulumi:"rootSnapshotId"`
	// Whether enhanced networking is enabled.
	SriovNetSupport string `pulumi:"sriovNetSupport"`
	// Current state of the AMI. If the state is `available`, the image
	// is successfully registered and can be used to launch an instance.
	State string `pulumi:"state"`
	// Describes a state change. Fields are `UNSET` if not available.
	// * `state_reason.code` - The reason code for the state change.
	// * `state_reason.message` - The message for the state change.
	StateReason map[string]string `pulumi:"stateReason"`
	// Any tags assigned to the image.
	// * `tags.#.key` - Key name of the tag.
	// * `tags.#.value` - Value of the tag.
	Tags map[string]string `pulumi:"tags"`
	// If the image is configured for NitroTPM support, the value is `v2.0`.
	TpmSupport string `pulumi:"tpmSupport"`
	// Operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
	UsageOperation string `pulumi:"usageOperation"`
	// Type of virtualization of the AMI (ie: `hvm` or
	// `paravirtual`).
	VirtualizationType string `pulumi:"virtualizationType"`
}

func LookupAmiOutput(ctx *pulumi.Context, args LookupAmiOutputArgs, opts ...pulumi.InvokeOption) LookupAmiResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAmiArgs](args.ToOutput(), func(plainArgs *LookupAmiArgs) (*LookupAmiResult, error) {
		return LookupAmi(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAmiResultOutput, *LookupAmiResult](outputResult)
}

// A collection of arguments for invoking getAmi.
type LookupAmiOutputArgs struct {
	// Limit search to users with *explicit* launch permission on
	// the image. Valid items are the numeric account ID or `self`.
	ExecutableUsers pulumix.Input[[]string] `pulumi:"executableUsers"`
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-images in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetAmiFilterArgs] `pulumi:"filters"`
	// If true, all deprecated AMIs are included in the response. If false, no deprecated AMIs are included in the response. If no value is specified, the default value is false.
	IncludeDeprecated pulumix.Input[*bool] `pulumi:"includeDeprecated"`
	// If more than one result is returned, use the most
	// recent AMI.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Regex string to apply to the AMI list returned
	// by AWS. This allows more advanced filtering not supported from the AWS API. This
	// filtering is done locally on what AWS returns, and could have a performance
	// impact if the result is large. Combine this with other
	// options to narrow down the list AWS returns.
	//
	// > **NOTE:** If more or less than a single match is returned by the search,
	// this call will fail. Ensure that your search is specific enough to return
	// a single AMI ID only, or use `mostRecent` to choose the most recent one. If
	// you want to match multiple AMIs, use the `ec2.getAmiIds` data source instead.
	NameRegex pulumix.Input[*string] `pulumi:"nameRegex"`
	// List of AMI owners to limit search. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).
	Owners pulumix.Input[[]string] `pulumi:"owners"`
	// Any tags assigned to the image.
	// * `tags.#.key` - Key name of the tag.
	// * `tags.#.value` - Value of the tag.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupAmiOutputArgs) ToOutput() pulumix.Output[*LookupAmiArgs] {
	allArgs := pulumix.All(
		args.ExecutableUsers.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.IncludeDeprecated.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.NameRegex.ToOutput(context.Background()).AsAny(),
		args.Owners.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAmiArgs {
		return &LookupAmiArgs{
			ExecutableUsers:   resolvedArgs[0].([]string),
			Filters:           resolvedArgs[1].([]GetAmiFilter),
			IncludeDeprecated: resolvedArgs[2].(*bool),
			MostRecent:        resolvedArgs[3].(*bool),
			NameRegex:         resolvedArgs[4].(*string),
			Owners:            resolvedArgs[5].([]string),
			Tags:              resolvedArgs[6].(map[string]string),
		}
	})
}

type LookupAmiResultOutput struct{ *pulumi.OutputState }

func (LookupAmiResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAmiResult)(nil)).Elem()
}

func (o LookupAmiResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAmiResult] {
	return pulumix.Output[*LookupAmiResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAmiResultOutput) Architecture() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Architecture })
}

func (o LookupAmiResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Arn })
}

func (o LookupAmiResultOutput) BlockDeviceMappings() pulumix.GArrayOutput[GetAmiBlockDeviceMapping, GetAmiBlockDeviceMappingOutput] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) []GetAmiBlockDeviceMapping { return v.BlockDeviceMappings })
	return pulumix.GArrayOutput[GetAmiBlockDeviceMapping, GetAmiBlockDeviceMappingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) BootMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.BootMode })
}

func (o LookupAmiResultOutput) CreationDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.CreationDate })
}

func (o LookupAmiResultOutput) DeprecationTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.DeprecationTime })
}

func (o LookupAmiResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Description })
}

func (o LookupAmiResultOutput) EnaSupport() pulumix.Output[bool] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) bool { return v.EnaSupport })
}

func (o LookupAmiResultOutput) ExecutableUsers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) []string { return v.ExecutableUsers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) Filters() pulumix.GArrayOutput[GetAmiFilter, GetAmiFilterOutput] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) []GetAmiFilter { return v.Filters })
	return pulumix.GArrayOutput[GetAmiFilter, GetAmiFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) Hypervisor() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Hypervisor })
}

func (o LookupAmiResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Id })
}

func (o LookupAmiResultOutput) ImageId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.ImageId })
}

func (o LookupAmiResultOutput) ImageLocation() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.ImageLocation })
}

func (o LookupAmiResultOutput) ImageOwnerAlias() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.ImageOwnerAlias })
}

func (o LookupAmiResultOutput) ImageType() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.ImageType })
}

func (o LookupAmiResultOutput) ImdsSupport() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.ImdsSupport })
}

func (o LookupAmiResultOutput) IncludeDeprecated() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) *bool { return v.IncludeDeprecated })
}

func (o LookupAmiResultOutput) KernelId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.KernelId })
}

func (o LookupAmiResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) *bool { return v.MostRecent })
}

func (o LookupAmiResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Name })
}

func (o LookupAmiResultOutput) NameRegex() pulumix.Output[*string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) *string { return v.NameRegex })
}

func (o LookupAmiResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.OwnerId })
}

func (o LookupAmiResultOutput) Owners() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) []string { return v.Owners })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) Platform() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.Platform })
}

func (o LookupAmiResultOutput) PlatformDetails() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.PlatformDetails })
}

func (o LookupAmiResultOutput) ProductCodes() pulumix.GArrayOutput[GetAmiProductCode, GetAmiProductCodeOutput] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) []GetAmiProductCode { return v.ProductCodes })
	return pulumix.GArrayOutput[GetAmiProductCode, GetAmiProductCodeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) Public() pulumix.Output[bool] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) bool { return v.Public })
}

func (o LookupAmiResultOutput) RamdiskId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.RamdiskId })
}

func (o LookupAmiResultOutput) RootDeviceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.RootDeviceName })
}

func (o LookupAmiResultOutput) RootDeviceType() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.RootDeviceType })
}

func (o LookupAmiResultOutput) RootSnapshotId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.RootSnapshotId })
}

func (o LookupAmiResultOutput) SriovNetSupport() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.SriovNetSupport })
}

func (o LookupAmiResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.State })
}

func (o LookupAmiResultOutput) StateReason() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) map[string]string { return v.StateReason })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupAmiResultOutput) TpmSupport() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.TpmSupport })
}

func (o LookupAmiResultOutput) UsageOperation() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.UsageOperation })
}

func (o LookupAmiResultOutput) VirtualizationType() pulumix.Output[string] {
	return pulumix.Apply[*LookupAmiResult](o, func(v *LookupAmiResult) string { return v.VirtualizationType })
}
