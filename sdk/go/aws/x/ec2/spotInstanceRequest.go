// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EC2 Spot Instance Request resource. This allows instances to be
// requested on the spot market.
//
// By default this provider creates Spot Instance Requests with a `persistent` type,
// which means that for the duration of their lifetime, AWS will launch an
// instance with the configured details if and when the spot market will accept
// the requested price.
//
// On destruction, this provider will make an attempt to terminate the associated Spot
// Instance if there is one present.
//
// Spot Instances requests with a `one-time` type will close the spot request
// when the instance is terminated either by the request being below the current spot
// price availability or by a user.
//
// > **NOTE:** Because their behavior depends on the live status of the spot
// market, Spot Instance Requests have a unique lifecycle that makes them behave
// differently than other resources. Most importantly: there is __no
// guarantee__ that a Spot Instance exists to fulfill the request at any given
// point in time. See the [AWS Spot Instance
// documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html)
// for more information.
//
// > **NOTE [AWS strongly discourages](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use) the use of the legacy APIs called by this resource.
// We recommend using the EC2 Instance resource with `instanceMarketOptions` instead.
type SpotInstanceRequest struct {
	pulumi.CustomResourceState

	// AMI to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
	Ami pulumix.Output[string] `pulumi:"ami"`
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether to associate a public IP address with an instance in a VPC.
	AssociatePublicIpAddress pulumix.Output[bool] `pulumi:"associatePublicIpAddress"`
	// AZ to start the instance in.
	AvailabilityZone pulumix.Output[string] `pulumi:"availabilityZone"`
	// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
	// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
	BlockDurationMinutes pulumix.Output[*int] `pulumi:"blockDurationMinutes"`
	// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
	//
	// > **NOTE:** Changing `cpuCoreCount` and/or `cpuThreadsPerCore` will cause the resource to be destroyed and re-created.
	CapacityReservationSpecification pulumix.GPtrOutput[SpotInstanceRequestCapacityReservationSpecification, SpotInstanceRequestCapacityReservationSpecificationOutput] `pulumi:"capacityReservationSpecification"`
	// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuCoreCount pulumix.Output[int] `pulumi:"cpuCoreCount"`
	// The CPU options for the instance. See CPU Options below for more details.
	CpuOptions pulumix.GPtrOutput[SpotInstanceRequestCpuOptions, SpotInstanceRequestCpuOptionsOutput] `pulumi:"cpuOptions"`
	// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuThreadsPerCore pulumix.Output[int] `pulumi:"cpuThreadsPerCore"`
	// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
	CreditSpecification pulumix.GPtrOutput[SpotInstanceRequestCreditSpecification, SpotInstanceRequestCreditSpecificationOutput] `pulumi:"creditSpecification"`
	// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
	DisableApiStop pulumix.Output[bool] `pulumi:"disableApiStop"`
	// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
	DisableApiTermination pulumix.Output[bool] `pulumi:"disableApiTermination"`
	// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
	EbsBlockDevices pulumix.GArrayOutput[SpotInstanceRequestEbsBlockDevice, SpotInstanceRequestEbsBlockDeviceOutput] `pulumi:"ebsBlockDevices"`
	// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
	EbsOptimized pulumix.Output[bool] `pulumi:"ebsOptimized"`
	// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
	EnclaveOptions pulumix.GPtrOutput[SpotInstanceRequestEnclaveOptions, SpotInstanceRequestEnclaveOptionsOutput] `pulumi:"enclaveOptions"`
	// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
	EphemeralBlockDevices pulumix.GArrayOutput[SpotInstanceRequestEphemeralBlockDevice, SpotInstanceRequestEphemeralBlockDeviceOutput] `pulumi:"ephemeralBlockDevices"`
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData pulumix.Output[*bool] `pulumi:"getPasswordData"`
	// If true, the launched EC2 instance will support hibernation.
	Hibernation pulumix.Output[*bool] `pulumi:"hibernation"`
	// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
	HostId pulumix.Output[string] `pulumi:"hostId"`
	// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
	HostResourceGroupArn pulumix.Output[string] `pulumi:"hostResourceGroupArn"`
	// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
	IamInstanceProfile pulumix.Output[string] `pulumi:"iamInstanceProfile"`
	// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
	InstanceInitiatedShutdownBehavior pulumix.Output[string] `pulumi:"instanceInitiatedShutdownBehavior"`
	// The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
	InstanceInterruptionBehavior pulumix.Output[*string] `pulumi:"instanceInterruptionBehavior"`
	InstanceState                pulumix.Output[string]  `pulumi:"instanceState"`
	// Instance type to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instanceType` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
	InstanceType pulumix.Output[string] `pulumi:"instanceType"`
	// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
	Ipv6AddressCount pulumix.Output[int] `pulumi:"ipv6AddressCount"`
	// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
	Ipv6Addresses pulumix.ArrayOutput[string] `pulumi:"ipv6Addresses"`
	// Key name of the Key Pair to use for the instance; which can be managed using the `ec2.KeyPair` resource.
	KeyName pulumix.Output[string] `pulumi:"keyName"`
	// A launch group is a group of spot instances that launch together and terminate together.
	// If left empty instances are launched and terminated individually.
	LaunchGroup pulumix.Output[*string] `pulumi:"launchGroup"`
	// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
	LaunchTemplate pulumix.GPtrOutput[SpotInstanceRequestLaunchTemplate, SpotInstanceRequestLaunchTemplateOutput] `pulumi:"launchTemplate"`
	// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
	MaintenanceOptions pulumix.GPtrOutput[SpotInstanceRequestMaintenanceOptions, SpotInstanceRequestMaintenanceOptionsOutput] `pulumi:"maintenanceOptions"`
	// Customize the metadata options of the instance. See Metadata Options below for more details.
	MetadataOptions pulumix.GPtrOutput[SpotInstanceRequestMetadataOptions, SpotInstanceRequestMetadataOptionsOutput] `pulumi:"metadataOptions"`
	// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
	Monitoring pulumix.Output[bool] `pulumi:"monitoring"`
	// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
	NetworkInterfaces pulumix.GArrayOutput[SpotInstanceRequestNetworkInterface, SpotInstanceRequestNetworkInterfaceOutput] `pulumi:"networkInterfaces"`
	OutpostArn        pulumix.Output[string]                                                                               `pulumi:"outpostArn"`
	PasswordData      pulumix.Output[string]                                                                               `pulumi:"passwordData"`
	// Placement Group to start the instance in.
	PlacementGroup pulumix.Output[string] `pulumi:"placementGroup"`
	// Number of the partition the instance is in. Valid only if the `ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
	PlacementPartitionNumber  pulumix.Output[int]    `pulumi:"placementPartitionNumber"`
	PrimaryNetworkInterfaceId pulumix.Output[string] `pulumi:"primaryNetworkInterfaceId"`
	// The private DNS name assigned to the instance. Can only be
	// used inside the Amazon EC2, and only available if you've enabled DNS hostnames
	// for your VPC
	PrivateDns pulumix.Output[string] `pulumi:"privateDns"`
	// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
	PrivateDnsNameOptions pulumix.GPtrOutput[SpotInstanceRequestPrivateDnsNameOptions, SpotInstanceRequestPrivateDnsNameOptionsOutput] `pulumi:"privateDnsNameOptions"`
	// Private IP address to associate with the instance in a VPC.
	PrivateIp pulumix.Output[string] `pulumi:"privateIp"`
	// The public DNS name assigned to the instance. For EC2-VPC, this
	// is only available if you've enabled DNS hostnames for your VPC
	PublicDns pulumix.Output[string] `pulumi:"publicDns"`
	// The public IP address assigned to the instance, if applicable.
	PublicIp pulumix.Output[string] `pulumi:"publicIp"`
	// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
	RootBlockDevice pulumix.GPtrOutput[SpotInstanceRequestRootBlockDevice, SpotInstanceRequestRootBlockDeviceOutput] `pulumi:"rootBlockDevice"`
	// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `networkInterface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
	SecondaryPrivateIps pulumix.ArrayOutput[string] `pulumi:"secondaryPrivateIps"`
	// List of security group names to associate with.
	//
	// > **NOTE:** If you are creating Instances in a VPC, use `vpcSecurityGroupIds` instead.
	SecurityGroups pulumix.ArrayOutput[string] `pulumi:"securityGroups"`
	// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
	SourceDestCheck pulumix.Output[*bool] `pulumi:"sourceDestCheck"`
	// The current [bid
	// status](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
	// of the Spot Instance Request.
	SpotBidStatus pulumix.Output[string] `pulumi:"spotBidStatus"`
	// The Instance ID (if any) that is currently fulfilling
	// the Spot Instance request.
	SpotInstanceId pulumix.Output[string] `pulumi:"spotInstanceId"`
	// The maximum price to request on the spot market.
	SpotPrice pulumix.Output[string] `pulumi:"spotPrice"`
	// The current [request
	// state](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html#creating-spot-request-status)
	// of the Spot Instance Request.
	SpotRequestState pulumix.Output[string] `pulumi:"spotRequestState"`
	// If set to `one-time`, after
	// the instance is terminated, the spot request will be closed.
	SpotType pulumix.Output[*string] `pulumi:"spotType"`
	// VPC Subnet ID to launch in.
	SubnetId pulumix.Output[string] `pulumi:"subnetId"`
	// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
	Tenancy pulumix.Output[string] `pulumi:"tenancy"`
	// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserData pulumix.Output[string] `pulumi:"userData"`
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserDataBase64 pulumix.Output[string] `pulumi:"userDataBase64"`
	// When used in combination with `userData` or `userDataBase64` will trigger a destroy and recreate when set to `true`. Defaults to `false` if not set.
	UserDataReplaceOnChange pulumix.Output[*bool] `pulumi:"userDataReplaceOnChange"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumix.Output[string] `pulumi:"validFrom"`
	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
	ValidUntil pulumix.Output[string] `pulumi:"validUntil"`
	// Map of tags to assign, at instance-creation time, to root and EBS volumes.
	//
	// > **NOTE:** Do not use `volumeTags` if you plan to manage block device tags outside the `ec2.Instance` configuration, such as using `tags` in an `ebs.Volume` resource attached via `ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
	VolumeTags pulumix.MapOutput[string] `pulumi:"volumeTags"`
	// List of security group IDs to associate with.
	VpcSecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"vpcSecurityGroupIds"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumix.Output[*bool] `pulumi:"waitForFulfillment"`
}

// NewSpotInstanceRequest registers a new resource with the given unique name, arguments, and options.
func NewSpotInstanceRequest(ctx *pulumi.Context,
	name string, args *SpotInstanceRequestArgs, opts ...pulumi.ResourceOption) (*SpotInstanceRequest, error) {
	if args == nil {
		args = &SpotInstanceRequestArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpotInstanceRequest
	err := ctx.RegisterResource("aws:ec2/spotInstanceRequest:SpotInstanceRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpotInstanceRequest gets an existing SpotInstanceRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpotInstanceRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpotInstanceRequestState, opts ...pulumi.ResourceOption) (*SpotInstanceRequest, error) {
	var resource SpotInstanceRequest
	err := ctx.ReadResource("aws:ec2/spotInstanceRequest:SpotInstanceRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpotInstanceRequest resources.
type spotInstanceRequestState struct {
	// AMI to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
	Ami *string `pulumi:"ami"`
	Arn *string `pulumi:"arn"`
	// Whether to associate a public IP address with an instance in a VPC.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// AZ to start the instance in.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
	// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
	BlockDurationMinutes *int `pulumi:"blockDurationMinutes"`
	// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
	//
	// > **NOTE:** Changing `cpuCoreCount` and/or `cpuThreadsPerCore` will cause the resource to be destroyed and re-created.
	CapacityReservationSpecification *SpotInstanceRequestCapacityReservationSpecification `pulumi:"capacityReservationSpecification"`
	// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuCoreCount *int `pulumi:"cpuCoreCount"`
	// The CPU options for the instance. See CPU Options below for more details.
	CpuOptions *SpotInstanceRequestCpuOptions `pulumi:"cpuOptions"`
	// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuThreadsPerCore *int `pulumi:"cpuThreadsPerCore"`
	// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
	CreditSpecification *SpotInstanceRequestCreditSpecification `pulumi:"creditSpecification"`
	// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
	DisableApiStop *bool `pulumi:"disableApiStop"`
	// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
	DisableApiTermination *bool `pulumi:"disableApiTermination"`
	// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
	EbsBlockDevices []SpotInstanceRequestEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
	EnclaveOptions *SpotInstanceRequestEnclaveOptions `pulumi:"enclaveOptions"`
	// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
	EphemeralBlockDevices []SpotInstanceRequestEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData *bool `pulumi:"getPasswordData"`
	// If true, the launched EC2 instance will support hibernation.
	Hibernation *bool `pulumi:"hibernation"`
	// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
	HostId *string `pulumi:"hostId"`
	// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
	HostResourceGroupArn *string `pulumi:"hostResourceGroupArn"`
	// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
	InstanceInitiatedShutdownBehavior *string `pulumi:"instanceInitiatedShutdownBehavior"`
	// The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
	InstanceInterruptionBehavior *string `pulumi:"instanceInterruptionBehavior"`
	InstanceState                *string `pulumi:"instanceState"`
	// Instance type to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instanceType` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
	InstanceType *string `pulumi:"instanceType"`
	// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Key name of the Key Pair to use for the instance; which can be managed using the `ec2.KeyPair` resource.
	KeyName *string `pulumi:"keyName"`
	// A launch group is a group of spot instances that launch together and terminate together.
	// If left empty instances are launched and terminated individually.
	LaunchGroup *string `pulumi:"launchGroup"`
	// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
	LaunchTemplate *SpotInstanceRequestLaunchTemplate `pulumi:"launchTemplate"`
	// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
	MaintenanceOptions *SpotInstanceRequestMaintenanceOptions `pulumi:"maintenanceOptions"`
	// Customize the metadata options of the instance. See Metadata Options below for more details.
	MetadataOptions *SpotInstanceRequestMetadataOptions `pulumi:"metadataOptions"`
	// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
	Monitoring *bool `pulumi:"monitoring"`
	// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
	NetworkInterfaces []SpotInstanceRequestNetworkInterface `pulumi:"networkInterfaces"`
	OutpostArn        *string                               `pulumi:"outpostArn"`
	PasswordData      *string                               `pulumi:"passwordData"`
	// Placement Group to start the instance in.
	PlacementGroup *string `pulumi:"placementGroup"`
	// Number of the partition the instance is in. Valid only if the `ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
	PlacementPartitionNumber  *int    `pulumi:"placementPartitionNumber"`
	PrimaryNetworkInterfaceId *string `pulumi:"primaryNetworkInterfaceId"`
	// The private DNS name assigned to the instance. Can only be
	// used inside the Amazon EC2, and only available if you've enabled DNS hostnames
	// for your VPC
	PrivateDns *string `pulumi:"privateDns"`
	// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
	PrivateDnsNameOptions *SpotInstanceRequestPrivateDnsNameOptions `pulumi:"privateDnsNameOptions"`
	// Private IP address to associate with the instance in a VPC.
	PrivateIp *string `pulumi:"privateIp"`
	// The public DNS name assigned to the instance. For EC2-VPC, this
	// is only available if you've enabled DNS hostnames for your VPC
	PublicDns *string `pulumi:"publicDns"`
	// The public IP address assigned to the instance, if applicable.
	PublicIp *string `pulumi:"publicIp"`
	// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
	RootBlockDevice *SpotInstanceRequestRootBlockDevice `pulumi:"rootBlockDevice"`
	// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `networkInterface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
	SecondaryPrivateIps []string `pulumi:"secondaryPrivateIps"`
	// List of security group names to associate with.
	//
	// > **NOTE:** If you are creating Instances in a VPC, use `vpcSecurityGroupIds` instead.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
	SourceDestCheck *bool `pulumi:"sourceDestCheck"`
	// The current [bid
	// status](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
	// of the Spot Instance Request.
	SpotBidStatus *string `pulumi:"spotBidStatus"`
	// The Instance ID (if any) that is currently fulfilling
	// the Spot Instance request.
	SpotInstanceId *string `pulumi:"spotInstanceId"`
	// The maximum price to request on the spot market.
	SpotPrice *string `pulumi:"spotPrice"`
	// The current [request
	// state](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html#creating-spot-request-status)
	// of the Spot Instance Request.
	SpotRequestState *string `pulumi:"spotRequestState"`
	// If set to `one-time`, after
	// the instance is terminated, the spot request will be closed.
	SpotType *string `pulumi:"spotType"`
	// VPC Subnet ID to launch in.
	SubnetId *string `pulumi:"subnetId"`
	// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
	Tenancy *string `pulumi:"tenancy"`
	// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserData *string `pulumi:"userData"`
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserDataBase64 *string `pulumi:"userDataBase64"`
	// When used in combination with `userData` or `userDataBase64` will trigger a destroy and recreate when set to `true`. Defaults to `false` if not set.
	UserDataReplaceOnChange *bool `pulumi:"userDataReplaceOnChange"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
	ValidUntil *string `pulumi:"validUntil"`
	// Map of tags to assign, at instance-creation time, to root and EBS volumes.
	//
	// > **NOTE:** Do not use `volumeTags` if you plan to manage block device tags outside the `ec2.Instance` configuration, such as using `tags` in an `ebs.Volume` resource attached via `ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
	VolumeTags map[string]string `pulumi:"volumeTags"`
	// List of security group IDs to associate with.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment *bool `pulumi:"waitForFulfillment"`
}

type SpotInstanceRequestState struct {
	// AMI to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
	Ami pulumix.Input[*string]
	Arn pulumix.Input[*string]
	// Whether to associate a public IP address with an instance in a VPC.
	AssociatePublicIpAddress pulumix.Input[*bool]
	// AZ to start the instance in.
	AvailabilityZone pulumix.Input[*string]
	// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
	// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
	BlockDurationMinutes pulumix.Input[*int]
	// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
	//
	// > **NOTE:** Changing `cpuCoreCount` and/or `cpuThreadsPerCore` will cause the resource to be destroyed and re-created.
	CapacityReservationSpecification pulumix.Input[*SpotInstanceRequestCapacityReservationSpecificationArgs]
	// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuCoreCount pulumix.Input[*int]
	// The CPU options for the instance. See CPU Options below for more details.
	CpuOptions pulumix.Input[*SpotInstanceRequestCpuOptionsArgs]
	// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuThreadsPerCore pulumix.Input[*int]
	// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
	CreditSpecification pulumix.Input[*SpotInstanceRequestCreditSpecificationArgs]
	// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
	DisableApiStop pulumix.Input[*bool]
	// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
	DisableApiTermination pulumix.Input[*bool]
	// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
	EbsBlockDevices pulumix.Input[[]*SpotInstanceRequestEbsBlockDeviceArgs]
	// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
	EbsOptimized pulumix.Input[*bool]
	// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
	EnclaveOptions pulumix.Input[*SpotInstanceRequestEnclaveOptionsArgs]
	// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
	EphemeralBlockDevices pulumix.Input[[]*SpotInstanceRequestEphemeralBlockDeviceArgs]
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData pulumix.Input[*bool]
	// If true, the launched EC2 instance will support hibernation.
	Hibernation pulumix.Input[*bool]
	// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
	HostId pulumix.Input[*string]
	// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
	HostResourceGroupArn pulumix.Input[*string]
	// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
	IamInstanceProfile pulumix.Input[*string]
	// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
	InstanceInitiatedShutdownBehavior pulumix.Input[*string]
	// The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
	InstanceInterruptionBehavior pulumix.Input[*string]
	InstanceState                pulumix.Input[*string]
	// Instance type to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instanceType` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
	InstanceType pulumix.Input[*string]
	// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
	Ipv6AddressCount pulumix.Input[*int]
	// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
	Ipv6Addresses pulumix.Input[[]string]
	// Key name of the Key Pair to use for the instance; which can be managed using the `ec2.KeyPair` resource.
	KeyName pulumix.Input[*string]
	// A launch group is a group of spot instances that launch together and terminate together.
	// If left empty instances are launched and terminated individually.
	LaunchGroup pulumix.Input[*string]
	// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
	LaunchTemplate pulumix.Input[*SpotInstanceRequestLaunchTemplateArgs]
	// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
	MaintenanceOptions pulumix.Input[*SpotInstanceRequestMaintenanceOptionsArgs]
	// Customize the metadata options of the instance. See Metadata Options below for more details.
	MetadataOptions pulumix.Input[*SpotInstanceRequestMetadataOptionsArgs]
	// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
	Monitoring pulumix.Input[*bool]
	// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
	NetworkInterfaces pulumix.Input[[]*SpotInstanceRequestNetworkInterfaceArgs]
	OutpostArn        pulumix.Input[*string]
	PasswordData      pulumix.Input[*string]
	// Placement Group to start the instance in.
	PlacementGroup pulumix.Input[*string]
	// Number of the partition the instance is in. Valid only if the `ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
	PlacementPartitionNumber  pulumix.Input[*int]
	PrimaryNetworkInterfaceId pulumix.Input[*string]
	// The private DNS name assigned to the instance. Can only be
	// used inside the Amazon EC2, and only available if you've enabled DNS hostnames
	// for your VPC
	PrivateDns pulumix.Input[*string]
	// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
	PrivateDnsNameOptions pulumix.Input[*SpotInstanceRequestPrivateDnsNameOptionsArgs]
	// Private IP address to associate with the instance in a VPC.
	PrivateIp pulumix.Input[*string]
	// The public DNS name assigned to the instance. For EC2-VPC, this
	// is only available if you've enabled DNS hostnames for your VPC
	PublicDns pulumix.Input[*string]
	// The public IP address assigned to the instance, if applicable.
	PublicIp pulumix.Input[*string]
	// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
	RootBlockDevice pulumix.Input[*SpotInstanceRequestRootBlockDeviceArgs]
	// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `networkInterface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
	SecondaryPrivateIps pulumix.Input[[]string]
	// List of security group names to associate with.
	//
	// > **NOTE:** If you are creating Instances in a VPC, use `vpcSecurityGroupIds` instead.
	SecurityGroups pulumix.Input[[]string]
	// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
	SourceDestCheck pulumix.Input[*bool]
	// The current [bid
	// status](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
	// of the Spot Instance Request.
	SpotBidStatus pulumix.Input[*string]
	// The Instance ID (if any) that is currently fulfilling
	// the Spot Instance request.
	SpotInstanceId pulumix.Input[*string]
	// The maximum price to request on the spot market.
	SpotPrice pulumix.Input[*string]
	// The current [request
	// state](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html#creating-spot-request-status)
	// of the Spot Instance Request.
	SpotRequestState pulumix.Input[*string]
	// If set to `one-time`, after
	// the instance is terminated, the spot request will be closed.
	SpotType pulumix.Input[*string]
	// VPC Subnet ID to launch in.
	SubnetId pulumix.Input[*string]
	// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
	Tenancy pulumix.Input[*string]
	// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserData pulumix.Input[*string]
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserDataBase64 pulumix.Input[*string]
	// When used in combination with `userData` or `userDataBase64` will trigger a destroy and recreate when set to `true`. Defaults to `false` if not set.
	UserDataReplaceOnChange pulumix.Input[*bool]
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumix.Input[*string]
	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
	ValidUntil pulumix.Input[*string]
	// Map of tags to assign, at instance-creation time, to root and EBS volumes.
	//
	// > **NOTE:** Do not use `volumeTags` if you plan to manage block device tags outside the `ec2.Instance` configuration, such as using `tags` in an `ebs.Volume` resource attached via `ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
	VolumeTags pulumix.Input[map[string]string]
	// List of security group IDs to associate with.
	VpcSecurityGroupIds pulumix.Input[[]string]
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumix.Input[*bool]
}

func (SpotInstanceRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*spotInstanceRequestState)(nil)).Elem()
}

type spotInstanceRequestArgs struct {
	// AMI to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
	Ami *string `pulumi:"ami"`
	// Whether to associate a public IP address with an instance in a VPC.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// AZ to start the instance in.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
	// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
	BlockDurationMinutes *int `pulumi:"blockDurationMinutes"`
	// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
	//
	// > **NOTE:** Changing `cpuCoreCount` and/or `cpuThreadsPerCore` will cause the resource to be destroyed and re-created.
	CapacityReservationSpecification *SpotInstanceRequestCapacityReservationSpecification `pulumi:"capacityReservationSpecification"`
	// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuCoreCount *int `pulumi:"cpuCoreCount"`
	// The CPU options for the instance. See CPU Options below for more details.
	CpuOptions *SpotInstanceRequestCpuOptions `pulumi:"cpuOptions"`
	// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuThreadsPerCore *int `pulumi:"cpuThreadsPerCore"`
	// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
	CreditSpecification *SpotInstanceRequestCreditSpecification `pulumi:"creditSpecification"`
	// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
	DisableApiStop *bool `pulumi:"disableApiStop"`
	// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
	DisableApiTermination *bool `pulumi:"disableApiTermination"`
	// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
	EbsBlockDevices []SpotInstanceRequestEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
	EnclaveOptions *SpotInstanceRequestEnclaveOptions `pulumi:"enclaveOptions"`
	// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
	EphemeralBlockDevices []SpotInstanceRequestEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData *bool `pulumi:"getPasswordData"`
	// If true, the launched EC2 instance will support hibernation.
	Hibernation *bool `pulumi:"hibernation"`
	// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
	HostId *string `pulumi:"hostId"`
	// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
	HostResourceGroupArn *string `pulumi:"hostResourceGroupArn"`
	// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
	InstanceInitiatedShutdownBehavior *string `pulumi:"instanceInitiatedShutdownBehavior"`
	// The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
	InstanceInterruptionBehavior *string `pulumi:"instanceInterruptionBehavior"`
	// Instance type to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instanceType` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
	InstanceType *string `pulumi:"instanceType"`
	// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// Key name of the Key Pair to use for the instance; which can be managed using the `ec2.KeyPair` resource.
	KeyName *string `pulumi:"keyName"`
	// A launch group is a group of spot instances that launch together and terminate together.
	// If left empty instances are launched and terminated individually.
	LaunchGroup *string `pulumi:"launchGroup"`
	// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
	LaunchTemplate *SpotInstanceRequestLaunchTemplate `pulumi:"launchTemplate"`
	// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
	MaintenanceOptions *SpotInstanceRequestMaintenanceOptions `pulumi:"maintenanceOptions"`
	// Customize the metadata options of the instance. See Metadata Options below for more details.
	MetadataOptions *SpotInstanceRequestMetadataOptions `pulumi:"metadataOptions"`
	// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
	Monitoring *bool `pulumi:"monitoring"`
	// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
	NetworkInterfaces []SpotInstanceRequestNetworkInterface `pulumi:"networkInterfaces"`
	// Placement Group to start the instance in.
	PlacementGroup *string `pulumi:"placementGroup"`
	// Number of the partition the instance is in. Valid only if the `ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
	PlacementPartitionNumber *int `pulumi:"placementPartitionNumber"`
	// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
	PrivateDnsNameOptions *SpotInstanceRequestPrivateDnsNameOptions `pulumi:"privateDnsNameOptions"`
	// Private IP address to associate with the instance in a VPC.
	PrivateIp *string `pulumi:"privateIp"`
	// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
	RootBlockDevice *SpotInstanceRequestRootBlockDevice `pulumi:"rootBlockDevice"`
	// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `networkInterface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
	SecondaryPrivateIps []string `pulumi:"secondaryPrivateIps"`
	// List of security group names to associate with.
	//
	// > **NOTE:** If you are creating Instances in a VPC, use `vpcSecurityGroupIds` instead.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
	SourceDestCheck *bool `pulumi:"sourceDestCheck"`
	// The maximum price to request on the spot market.
	SpotPrice *string `pulumi:"spotPrice"`
	// If set to `one-time`, after
	// the instance is terminated, the spot request will be closed.
	SpotType *string `pulumi:"spotType"`
	// VPC Subnet ID to launch in.
	SubnetId *string `pulumi:"subnetId"`
	// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
	Tenancy *string `pulumi:"tenancy"`
	// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserData *string `pulumi:"userData"`
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserDataBase64 *string `pulumi:"userDataBase64"`
	// When used in combination with `userData` or `userDataBase64` will trigger a destroy and recreate when set to `true`. Defaults to `false` if not set.
	UserDataReplaceOnChange *bool `pulumi:"userDataReplaceOnChange"`
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom *string `pulumi:"validFrom"`
	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
	ValidUntil *string `pulumi:"validUntil"`
	// Map of tags to assign, at instance-creation time, to root and EBS volumes.
	//
	// > **NOTE:** Do not use `volumeTags` if you plan to manage block device tags outside the `ec2.Instance` configuration, such as using `tags` in an `ebs.Volume` resource attached via `ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
	VolumeTags map[string]string `pulumi:"volumeTags"`
	// List of security group IDs to associate with.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment *bool `pulumi:"waitForFulfillment"`
}

// The set of arguments for constructing a SpotInstanceRequest resource.
type SpotInstanceRequestArgs struct {
	// AMI to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
	Ami pulumix.Input[*string]
	// Whether to associate a public IP address with an instance in a VPC.
	AssociatePublicIpAddress pulumix.Input[*bool]
	// AZ to start the instance in.
	AvailabilityZone pulumix.Input[*string]
	// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
	// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
	// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
	BlockDurationMinutes pulumix.Input[*int]
	// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
	//
	// > **NOTE:** Changing `cpuCoreCount` and/or `cpuThreadsPerCore` will cause the resource to be destroyed and re-created.
	CapacityReservationSpecification pulumix.Input[*SpotInstanceRequestCapacityReservationSpecificationArgs]
	// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuCoreCount pulumix.Input[*int]
	// The CPU options for the instance. See CPU Options below for more details.
	CpuOptions pulumix.Input[*SpotInstanceRequestCpuOptionsArgs]
	// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
	//
	// Deprecated: use 'cpu_options' argument instead
	CpuThreadsPerCore pulumix.Input[*int]
	// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
	CreditSpecification pulumix.Input[*SpotInstanceRequestCreditSpecificationArgs]
	// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
	DisableApiStop pulumix.Input[*bool]
	// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
	DisableApiTermination pulumix.Input[*bool]
	// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
	EbsBlockDevices pulumix.Input[[]*SpotInstanceRequestEbsBlockDeviceArgs]
	// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
	EbsOptimized pulumix.Input[*bool]
	// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
	EnclaveOptions pulumix.Input[*SpotInstanceRequestEnclaveOptionsArgs]
	// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
	EphemeralBlockDevices pulumix.Input[[]*SpotInstanceRequestEphemeralBlockDeviceArgs]
	// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
	GetPasswordData pulumix.Input[*bool]
	// If true, the launched EC2 instance will support hibernation.
	Hibernation pulumix.Input[*bool]
	// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
	HostId pulumix.Input[*string]
	// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
	HostResourceGroupArn pulumix.Input[*string]
	// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
	IamInstanceProfile pulumix.Input[*string]
	// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
	InstanceInitiatedShutdownBehavior pulumix.Input[*string]
	// The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
	InstanceInterruptionBehavior pulumix.Input[*string]
	// Instance type to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instanceType` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
	InstanceType pulumix.Input[*string]
	// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
	Ipv6AddressCount pulumix.Input[*int]
	// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
	Ipv6Addresses pulumix.Input[[]string]
	// Key name of the Key Pair to use for the instance; which can be managed using the `ec2.KeyPair` resource.
	KeyName pulumix.Input[*string]
	// A launch group is a group of spot instances that launch together and terminate together.
	// If left empty instances are launched and terminated individually.
	LaunchGroup pulumix.Input[*string]
	// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
	LaunchTemplate pulumix.Input[*SpotInstanceRequestLaunchTemplateArgs]
	// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
	MaintenanceOptions pulumix.Input[*SpotInstanceRequestMaintenanceOptionsArgs]
	// Customize the metadata options of the instance. See Metadata Options below for more details.
	MetadataOptions pulumix.Input[*SpotInstanceRequestMetadataOptionsArgs]
	// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
	Monitoring pulumix.Input[*bool]
	// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
	NetworkInterfaces pulumix.Input[[]*SpotInstanceRequestNetworkInterfaceArgs]
	// Placement Group to start the instance in.
	PlacementGroup pulumix.Input[*string]
	// Number of the partition the instance is in. Valid only if the `ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
	PlacementPartitionNumber pulumix.Input[*int]
	// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
	PrivateDnsNameOptions pulumix.Input[*SpotInstanceRequestPrivateDnsNameOptionsArgs]
	// Private IP address to associate with the instance in a VPC.
	PrivateIp pulumix.Input[*string]
	// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
	RootBlockDevice pulumix.Input[*SpotInstanceRequestRootBlockDeviceArgs]
	// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `networkInterface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
	SecondaryPrivateIps pulumix.Input[[]string]
	// List of security group names to associate with.
	//
	// > **NOTE:** If you are creating Instances in a VPC, use `vpcSecurityGroupIds` instead.
	SecurityGroups pulumix.Input[[]string]
	// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
	SourceDestCheck pulumix.Input[*bool]
	// The maximum price to request on the spot market.
	SpotPrice pulumix.Input[*string]
	// If set to `one-time`, after
	// the instance is terminated, the spot request will be closed.
	SpotType pulumix.Input[*string]
	// VPC Subnet ID to launch in.
	SubnetId pulumix.Input[*string]
	// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
	Tenancy pulumix.Input[*string]
	// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserData pulumix.Input[*string]
	// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
	UserDataBase64 pulumix.Input[*string]
	// When used in combination with `userData` or `userDataBase64` will trigger a destroy and recreate when set to `true`. Defaults to `false` if not set.
	UserDataReplaceOnChange pulumix.Input[*bool]
	// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
	ValidFrom pulumix.Input[*string]
	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
	ValidUntil pulumix.Input[*string]
	// Map of tags to assign, at instance-creation time, to root and EBS volumes.
	//
	// > **NOTE:** Do not use `volumeTags` if you plan to manage block device tags outside the `ec2.Instance` configuration, such as using `tags` in an `ebs.Volume` resource attached via `ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
	VolumeTags pulumix.Input[map[string]string]
	// List of security group IDs to associate with.
	VpcSecurityGroupIds pulumix.Input[[]string]
	// If set, this provider will
	// wait for the Spot Request to be fulfilled, and will throw an error if the
	// timeout of 10m is reached.
	WaitForFulfillment pulumix.Input[*bool]
}

func (SpotInstanceRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spotInstanceRequestArgs)(nil)).Elem()
}

type SpotInstanceRequestOutput struct{ *pulumi.OutputState }

func (SpotInstanceRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpotInstanceRequest)(nil)).Elem()
}

func (o SpotInstanceRequestOutput) ToSpotInstanceRequestOutput() SpotInstanceRequestOutput {
	return o
}

func (o SpotInstanceRequestOutput) ToSpotInstanceRequestOutputWithContext(ctx context.Context) SpotInstanceRequestOutput {
	return o
}

func (o SpotInstanceRequestOutput) ToOutput(ctx context.Context) pulumix.Output[SpotInstanceRequest] {
	return pulumix.Output[SpotInstanceRequest]{
		OutputState: o.OutputState,
	}
}

// AMI to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
func (o SpotInstanceRequestOutput) Ami() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.Ami })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o SpotInstanceRequestOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to associate a public IP address with an instance in a VPC.
func (o SpotInstanceRequestOutput) AssociatePublicIpAddress() pulumix.Output[bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[bool] { return v.AssociatePublicIpAddress })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// AZ to start the instance in.
func (o SpotInstanceRequestOutput) AvailabilityZone() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.AvailabilityZone })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
// The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
// Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
func (o SpotInstanceRequestOutput) BlockDurationMinutes() pulumix.Output[*int] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*int] { return v.BlockDurationMinutes })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
//
// > **NOTE:** Changing `cpuCoreCount` and/or `cpuThreadsPerCore` will cause the resource to be destroyed and re-created.
func (o SpotInstanceRequestOutput) CapacityReservationSpecification() pulumix.GPtrOutput[SpotInstanceRequestCapacityReservationSpecification, SpotInstanceRequestCapacityReservationSpecificationOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestCapacityReservationSpecification, SpotInstanceRequestCapacityReservationSpecificationOutput] {
		return v.CapacityReservationSpecification
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestCapacityReservationSpecification, pulumix.GPtrOutput[SpotInstanceRequestCapacityReservationSpecification, SpotInstanceRequestCapacityReservationSpecificationOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestCapacityReservationSpecification, SpotInstanceRequestCapacityReservationSpecificationOutput]{OutputState: unwrapped.OutputState}
}

// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
//
// Deprecated: use 'cpu_options' argument instead
func (o SpotInstanceRequestOutput) CpuCoreCount() pulumix.Output[int] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[int] { return v.CpuCoreCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The CPU options for the instance. See CPU Options below for more details.
func (o SpotInstanceRequestOutput) CpuOptions() pulumix.GPtrOutput[SpotInstanceRequestCpuOptions, SpotInstanceRequestCpuOptionsOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestCpuOptions, SpotInstanceRequestCpuOptionsOutput] {
		return v.CpuOptions
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestCpuOptions, pulumix.GPtrOutput[SpotInstanceRequestCpuOptions, SpotInstanceRequestCpuOptionsOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestCpuOptions, SpotInstanceRequestCpuOptionsOutput]{OutputState: unwrapped.OutputState}
}

// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
//
// Deprecated: use 'cpu_options' argument instead
func (o SpotInstanceRequestOutput) CpuThreadsPerCore() pulumix.Output[int] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[int] { return v.CpuThreadsPerCore })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. This provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
func (o SpotInstanceRequestOutput) CreditSpecification() pulumix.GPtrOutput[SpotInstanceRequestCreditSpecification, SpotInstanceRequestCreditSpecificationOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestCreditSpecification, SpotInstanceRequestCreditSpecificationOutput] {
		return v.CreditSpecification
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestCreditSpecification, pulumix.GPtrOutput[SpotInstanceRequestCreditSpecification, SpotInstanceRequestCreditSpecificationOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestCreditSpecification, SpotInstanceRequestCreditSpecificationOutput]{OutputState: unwrapped.OutputState}
}

// If true, enables [EC2 Instance Stop Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
func (o SpotInstanceRequestOutput) DisableApiStop() pulumix.Output[bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[bool] { return v.DisableApiStop })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
func (o SpotInstanceRequestOutput) DisableApiTermination() pulumix.Output[bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[bool] { return v.DisableApiTermination })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
func (o SpotInstanceRequestOutput) EbsBlockDevices() pulumix.GArrayOutput[SpotInstanceRequestEbsBlockDevice, SpotInstanceRequestEbsBlockDeviceOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GArrayOutput[SpotInstanceRequestEbsBlockDevice, SpotInstanceRequestEbsBlockDeviceOutput] {
		return v.EbsBlockDevices
	})
	unwrapped := pulumix.Flatten[[]SpotInstanceRequestEbsBlockDevice, pulumix.GArrayOutput[SpotInstanceRequestEbsBlockDevice, SpotInstanceRequestEbsBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[SpotInstanceRequestEbsBlockDevice, SpotInstanceRequestEbsBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
func (o SpotInstanceRequestOutput) EbsOptimized() pulumix.Output[bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[bool] { return v.EbsOptimized })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
func (o SpotInstanceRequestOutput) EnclaveOptions() pulumix.GPtrOutput[SpotInstanceRequestEnclaveOptions, SpotInstanceRequestEnclaveOptionsOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestEnclaveOptions, SpotInstanceRequestEnclaveOptionsOutput] {
		return v.EnclaveOptions
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestEnclaveOptions, pulumix.GPtrOutput[SpotInstanceRequestEnclaveOptions, SpotInstanceRequestEnclaveOptionsOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestEnclaveOptions, SpotInstanceRequestEnclaveOptionsOutput]{OutputState: unwrapped.OutputState}
}

// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
func (o SpotInstanceRequestOutput) EphemeralBlockDevices() pulumix.GArrayOutput[SpotInstanceRequestEphemeralBlockDevice, SpotInstanceRequestEphemeralBlockDeviceOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GArrayOutput[SpotInstanceRequestEphemeralBlockDevice, SpotInstanceRequestEphemeralBlockDeviceOutput] {
		return v.EphemeralBlockDevices
	})
	unwrapped := pulumix.Flatten[[]SpotInstanceRequestEphemeralBlockDevice, pulumix.GArrayOutput[SpotInstanceRequestEphemeralBlockDevice, SpotInstanceRequestEphemeralBlockDeviceOutput]](value)
	return pulumix.GArrayOutput[SpotInstanceRequestEphemeralBlockDevice, SpotInstanceRequestEphemeralBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `passwordData` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
func (o SpotInstanceRequestOutput) GetPasswordData() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*bool] { return v.GetPasswordData })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// If true, the launched EC2 instance will support hibernation.
func (o SpotInstanceRequestOutput) Hibernation() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*bool] { return v.Hibernation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
func (o SpotInstanceRequestOutput) HostId() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.HostId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the `tenancy` parameter or set it to `host`.
func (o SpotInstanceRequestOutput) HostResourceGroupArn() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.HostResourceGroupArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
func (o SpotInstanceRequestOutput) IamInstanceProfile() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.IamInstanceProfile })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
func (o SpotInstanceRequestOutput) InstanceInitiatedShutdownBehavior() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.InstanceInitiatedShutdownBehavior })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The behavior when a Spot Instance is interrupted. Valid values include `hibernate`, `stop`, `terminate` . The default is `terminate`.
func (o SpotInstanceRequestOutput) InstanceInterruptionBehavior() pulumix.Output[*string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*string] { return v.InstanceInterruptionBehavior })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o SpotInstanceRequestOutput) InstanceState() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.InstanceState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Instance type to use for the instance. Required unless `launchTemplate` is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting `instanceType` will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
func (o SpotInstanceRequestOutput) InstanceType() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.InstanceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
func (o SpotInstanceRequestOutput) Ipv6AddressCount() pulumix.Output[int] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[int] { return v.Ipv6AddressCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
func (o SpotInstanceRequestOutput) Ipv6Addresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.ArrayOutput[string] { return v.Ipv6Addresses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Key name of the Key Pair to use for the instance; which can be managed using the `ec2.KeyPair` resource.
func (o SpotInstanceRequestOutput) KeyName() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.KeyName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A launch group is a group of spot instances that launch together and terminate together.
// If left empty instances are launched and terminated individually.
func (o SpotInstanceRequestOutput) LaunchGroup() pulumix.Output[*string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*string] { return v.LaunchGroup })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
func (o SpotInstanceRequestOutput) LaunchTemplate() pulumix.GPtrOutput[SpotInstanceRequestLaunchTemplate, SpotInstanceRequestLaunchTemplateOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestLaunchTemplate, SpotInstanceRequestLaunchTemplateOutput] {
		return v.LaunchTemplate
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestLaunchTemplate, pulumix.GPtrOutput[SpotInstanceRequestLaunchTemplate, SpotInstanceRequestLaunchTemplateOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestLaunchTemplate, SpotInstanceRequestLaunchTemplateOutput]{OutputState: unwrapped.OutputState}
}

// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
func (o SpotInstanceRequestOutput) MaintenanceOptions() pulumix.GPtrOutput[SpotInstanceRequestMaintenanceOptions, SpotInstanceRequestMaintenanceOptionsOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestMaintenanceOptions, SpotInstanceRequestMaintenanceOptionsOutput] {
		return v.MaintenanceOptions
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestMaintenanceOptions, pulumix.GPtrOutput[SpotInstanceRequestMaintenanceOptions, SpotInstanceRequestMaintenanceOptionsOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestMaintenanceOptions, SpotInstanceRequestMaintenanceOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Customize the metadata options of the instance. See Metadata Options below for more details.
func (o SpotInstanceRequestOutput) MetadataOptions() pulumix.GPtrOutput[SpotInstanceRequestMetadataOptions, SpotInstanceRequestMetadataOptionsOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestMetadataOptions, SpotInstanceRequestMetadataOptionsOutput] {
		return v.MetadataOptions
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestMetadataOptions, pulumix.GPtrOutput[SpotInstanceRequestMetadataOptions, SpotInstanceRequestMetadataOptionsOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestMetadataOptions, SpotInstanceRequestMetadataOptionsOutput]{OutputState: unwrapped.OutputState}
}

// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
func (o SpotInstanceRequestOutput) Monitoring() pulumix.Output[bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[bool] { return v.Monitoring })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
func (o SpotInstanceRequestOutput) NetworkInterfaces() pulumix.GArrayOutput[SpotInstanceRequestNetworkInterface, SpotInstanceRequestNetworkInterfaceOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GArrayOutput[SpotInstanceRequestNetworkInterface, SpotInstanceRequestNetworkInterfaceOutput] {
		return v.NetworkInterfaces
	})
	unwrapped := pulumix.Flatten[[]SpotInstanceRequestNetworkInterface, pulumix.GArrayOutput[SpotInstanceRequestNetworkInterface, SpotInstanceRequestNetworkInterfaceOutput]](value)
	return pulumix.GArrayOutput[SpotInstanceRequestNetworkInterface, SpotInstanceRequestNetworkInterfaceOutput]{OutputState: unwrapped.OutputState}
}

func (o SpotInstanceRequestOutput) OutpostArn() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.OutpostArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o SpotInstanceRequestOutput) PasswordData() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PasswordData })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Placement Group to start the instance in.
func (o SpotInstanceRequestOutput) PlacementGroup() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PlacementGroup })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Number of the partition the instance is in. Valid only if the `ec2.PlacementGroup` resource's `strategy` argument is set to `"partition"`.
func (o SpotInstanceRequestOutput) PlacementPartitionNumber() pulumix.Output[int] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[int] { return v.PlacementPartitionNumber })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o SpotInstanceRequestOutput) PrimaryNetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PrimaryNetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The private DNS name assigned to the instance. Can only be
// used inside the Amazon EC2, and only available if you've enabled DNS hostnames
// for your VPC
func (o SpotInstanceRequestOutput) PrivateDns() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PrivateDns })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
func (o SpotInstanceRequestOutput) PrivateDnsNameOptions() pulumix.GPtrOutput[SpotInstanceRequestPrivateDnsNameOptions, SpotInstanceRequestPrivateDnsNameOptionsOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestPrivateDnsNameOptions, SpotInstanceRequestPrivateDnsNameOptionsOutput] {
		return v.PrivateDnsNameOptions
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestPrivateDnsNameOptions, pulumix.GPtrOutput[SpotInstanceRequestPrivateDnsNameOptions, SpotInstanceRequestPrivateDnsNameOptionsOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestPrivateDnsNameOptions, SpotInstanceRequestPrivateDnsNameOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Private IP address to associate with the instance in a VPC.
func (o SpotInstanceRequestOutput) PrivateIp() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PrivateIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public DNS name assigned to the instance. For EC2-VPC, this
// is only available if you've enabled DNS hostnames for your VPC
func (o SpotInstanceRequestOutput) PublicDns() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PublicDns })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The public IP address assigned to the instance, if applicable.
func (o SpotInstanceRequestOutput) PublicIp() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.PublicIp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
func (o SpotInstanceRequestOutput) RootBlockDevice() pulumix.GPtrOutput[SpotInstanceRequestRootBlockDevice, SpotInstanceRequestRootBlockDeviceOutput] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.GPtrOutput[SpotInstanceRequestRootBlockDevice, SpotInstanceRequestRootBlockDeviceOutput] {
		return v.RootBlockDevice
	})
	unwrapped := pulumix.Flatten[*SpotInstanceRequestRootBlockDevice, pulumix.GPtrOutput[SpotInstanceRequestRootBlockDevice, SpotInstanceRequestRootBlockDeviceOutput]](value)
	return pulumix.GPtrOutput[SpotInstanceRequestRootBlockDevice, SpotInstanceRequestRootBlockDeviceOutput]{OutputState: unwrapped.OutputState}
}

// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `networkInterface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
func (o SpotInstanceRequestOutput) SecondaryPrivateIps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.ArrayOutput[string] { return v.SecondaryPrivateIps })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of security group names to associate with.
//
// > **NOTE:** If you are creating Instances in a VPC, use `vpcSecurityGroupIds` instead.
func (o SpotInstanceRequestOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.ArrayOutput[string] { return v.SecurityGroups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
func (o SpotInstanceRequestOutput) SourceDestCheck() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*bool] { return v.SourceDestCheck })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The current [bid
// status](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
// of the Spot Instance Request.
func (o SpotInstanceRequestOutput) SpotBidStatus() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.SpotBidStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Instance ID (if any) that is currently fulfilling
// the Spot Instance request.
func (o SpotInstanceRequestOutput) SpotInstanceId() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.SpotInstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum price to request on the spot market.
func (o SpotInstanceRequestOutput) SpotPrice() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.SpotPrice })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current [request
// state](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html#creating-spot-request-status)
// of the Spot Instance Request.
func (o SpotInstanceRequestOutput) SpotRequestState() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.SpotRequestState })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If set to `one-time`, after
// the instance is terminated, the spot request will be closed.
func (o SpotInstanceRequestOutput) SpotType() pulumix.Output[*string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*string] { return v.SpotType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// VPC Subnet ID to launch in.
func (o SpotInstanceRequestOutput) SubnetId() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.SubnetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SpotInstanceRequestOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SpotInstanceRequestOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for the import-instance command. Valid values are `default`, `dedicated`, and `host`.
func (o SpotInstanceRequestOutput) Tenancy() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.Tenancy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `userDataBase64` instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
func (o SpotInstanceRequestOutput) UserData() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.UserData })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Can be used instead of `userData` to pass base64-encoded binary data directly. Use this instead of `userData` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the `userDataReplaceOnChange` is set then updates to this field will trigger a destroy and recreate.
func (o SpotInstanceRequestOutput) UserDataBase64() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.UserDataBase64 })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When used in combination with `userData` or `userDataBase64` will trigger a destroy and recreate when set to `true`. Defaults to `false` if not set.
func (o SpotInstanceRequestOutput) UserDataReplaceOnChange() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*bool] { return v.UserDataReplaceOnChange })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
func (o SpotInstanceRequestOutput) ValidFrom() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.ValidFrom })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
func (o SpotInstanceRequestOutput) ValidUntil() pulumix.Output[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[string] { return v.ValidUntil })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign, at instance-creation time, to root and EBS volumes.
//
// > **NOTE:** Do not use `volumeTags` if you plan to manage block device tags outside the `ec2.Instance` configuration, such as using `tags` in an `ebs.Volume` resource attached via `ec2.VolumeAttachment`. Doing so will result in resource cycling and inconsistent behavior.
func (o SpotInstanceRequestOutput) VolumeTags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.MapOutput[string] { return v.VolumeTags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// List of security group IDs to associate with.
func (o SpotInstanceRequestOutput) VpcSecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.ArrayOutput[string] { return v.VpcSecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// If set, this provider will
// wait for the Spot Request to be fulfilled, and will throw an error if the
// timeout of 10m is reached.
func (o SpotInstanceRequestOutput) WaitForFulfillment() pulumix.Output[*bool] {
	value := pulumix.Apply[SpotInstanceRequest](o, func(v SpotInstanceRequest) pulumix.Output[*bool] { return v.WaitForFulfillment })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(SpotInstanceRequestOutput{})
}
