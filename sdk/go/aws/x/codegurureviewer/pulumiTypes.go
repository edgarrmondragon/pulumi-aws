// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codegurureviewer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RepositoryAssociationKmsKeyDetails struct {
	// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
	EncryptionOption *string `pulumi:"encryptionOption"`
	// The ID of the AWS KMS key that is associated with a repository association.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

type RepositoryAssociationKmsKeyDetailsArgs struct {
	// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
	EncryptionOption pulumix.Input[*string] `pulumi:"encryptionOption"`
	// The ID of the AWS KMS key that is associated with a repository association.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
}

func (RepositoryAssociationKmsKeyDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationKmsKeyDetails)(nil)).Elem()
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToRepositoryAssociationKmsKeyDetailsOutput() RepositoryAssociationKmsKeyDetailsOutput {
	return i.ToRepositoryAssociationKmsKeyDetailsOutputWithContext(context.Background())
}

func (i RepositoryAssociationKmsKeyDetailsArgs) ToRepositoryAssociationKmsKeyDetailsOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationKmsKeyDetailsOutput)
}

func (i *RepositoryAssociationKmsKeyDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationKmsKeyDetailsArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationKmsKeyDetailsOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationKmsKeyDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationKmsKeyDetails)(nil)).Elem()
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToRepositoryAssociationKmsKeyDetailsOutput() RepositoryAssociationKmsKeyDetailsOutput {
	return o
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToRepositoryAssociationKmsKeyDetailsOutputWithContext(ctx context.Context) RepositoryAssociationKmsKeyDetailsOutput {
	return o
}

func (o RepositoryAssociationKmsKeyDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationKmsKeyDetails] {
	return pulumix.Output[RepositoryAssociationKmsKeyDetails]{
		OutputState: o.OutputState,
	}
}

// The encryption option for a repository association. It is either owned by AWS Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).
func (o RepositoryAssociationKmsKeyDetailsOutput) EncryptionOption() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryAssociationKmsKeyDetails](o, func(v RepositoryAssociationKmsKeyDetails) *string { return v.EncryptionOption })
}

// The ID of the AWS KMS key that is associated with a repository association.
func (o RepositoryAssociationKmsKeyDetailsOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryAssociationKmsKeyDetails](o, func(v RepositoryAssociationKmsKeyDetails) *string { return v.KmsKeyId })
}

type RepositoryAssociationRepository struct {
	Bitbucket              *RepositoryAssociationRepositoryBitbucket              `pulumi:"bitbucket"`
	Codecommit             *RepositoryAssociationRepositoryCodecommit             `pulumi:"codecommit"`
	GithubEnterpriseServer *RepositoryAssociationRepositoryGithubEnterpriseServer `pulumi:"githubEnterpriseServer"`
	S3Bucket               *RepositoryAssociationRepositoryS3Bucket               `pulumi:"s3Bucket"`
}

type RepositoryAssociationRepositoryArgs struct {
	Bitbucket              pulumix.Input[*RepositoryAssociationRepositoryBitbucketArgs]              `pulumi:"bitbucket"`
	Codecommit             pulumix.Input[*RepositoryAssociationRepositoryCodecommitArgs]             `pulumi:"codecommit"`
	GithubEnterpriseServer pulumix.Input[*RepositoryAssociationRepositoryGithubEnterpriseServerArgs] `pulumi:"githubEnterpriseServer"`
	S3Bucket               pulumix.Input[*RepositoryAssociationRepositoryS3BucketArgs]               `pulumi:"s3Bucket"`
}

func (RepositoryAssociationRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepository)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryArgs) ToRepositoryAssociationRepositoryOutput() RepositoryAssociationRepositoryOutput {
	return i.ToRepositoryAssociationRepositoryOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryArgs) ToRepositoryAssociationRepositoryOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryOutput)
}

func (i *RepositoryAssociationRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepository)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryOutput) ToRepositoryAssociationRepositoryOutput() RepositoryAssociationRepositoryOutput {
	return o
}

func (o RepositoryAssociationRepositoryOutput) ToRepositoryAssociationRepositoryOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryOutput {
	return o
}

func (o RepositoryAssociationRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepository] {
	return pulumix.Output[RepositoryAssociationRepository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationRepositoryOutput) Bitbucket() pulumix.GPtrOutput[RepositoryAssociationRepositoryBitbucket, RepositoryAssociationRepositoryBitbucketOutput] {
	value := pulumix.Apply[RepositoryAssociationRepository](o, func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryBitbucket { return v.Bitbucket })
	return pulumix.GPtrOutput[RepositoryAssociationRepositoryBitbucket, RepositoryAssociationRepositoryBitbucketOutput]{OutputState: value.OutputState}
}

func (o RepositoryAssociationRepositoryOutput) Codecommit() pulumix.GPtrOutput[RepositoryAssociationRepositoryCodecommit, RepositoryAssociationRepositoryCodecommitOutput] {
	value := pulumix.Apply[RepositoryAssociationRepository](o, func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryCodecommit {
		return v.Codecommit
	})
	return pulumix.GPtrOutput[RepositoryAssociationRepositoryCodecommit, RepositoryAssociationRepositoryCodecommitOutput]{OutputState: value.OutputState}
}

func (o RepositoryAssociationRepositoryOutput) GithubEnterpriseServer() pulumix.GPtrOutput[RepositoryAssociationRepositoryGithubEnterpriseServer, RepositoryAssociationRepositoryGithubEnterpriseServerOutput] {
	value := pulumix.Apply[RepositoryAssociationRepository](o, func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryGithubEnterpriseServer {
		return v.GithubEnterpriseServer
	})
	return pulumix.GPtrOutput[RepositoryAssociationRepositoryGithubEnterpriseServer, RepositoryAssociationRepositoryGithubEnterpriseServerOutput]{OutputState: value.OutputState}
}

func (o RepositoryAssociationRepositoryOutput) S3Bucket() pulumix.GPtrOutput[RepositoryAssociationRepositoryS3Bucket, RepositoryAssociationRepositoryS3BucketOutput] {
	value := pulumix.Apply[RepositoryAssociationRepository](o, func(v RepositoryAssociationRepository) *RepositoryAssociationRepositoryS3Bucket { return v.S3Bucket })
	return pulumix.GPtrOutput[RepositoryAssociationRepositoryS3Bucket, RepositoryAssociationRepositoryS3BucketOutput]{OutputState: value.OutputState}
}

type RepositoryAssociationRepositoryBitbucket struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn string `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name string `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner string `pulumi:"owner"`
}

type RepositoryAssociationRepositoryBitbucketArgs struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumix.Input[string] `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name pulumix.Input[string] `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner pulumix.Input[string] `pulumi:"owner"`
}

func (RepositoryAssociationRepositoryBitbucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryBitbucket)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToRepositoryAssociationRepositoryBitbucketOutput() RepositoryAssociationRepositoryBitbucketOutput {
	return i.ToRepositoryAssociationRepositoryBitbucketOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryBitbucketArgs) ToRepositoryAssociationRepositoryBitbucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryBitbucketOutput)
}

func (i *RepositoryAssociationRepositoryBitbucketArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryBitbucketArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationRepositoryBitbucketOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryBitbucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryBitbucket)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToRepositoryAssociationRepositoryBitbucketOutput() RepositoryAssociationRepositoryBitbucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToRepositoryAssociationRepositoryBitbucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryBitbucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryBitbucketOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryBitbucket] {
	return pulumix.Output[RepositoryAssociationRepositoryBitbucket]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationRepositoryBitbucketOutput) ConnectionArn() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryBitbucket](o, func(v RepositoryAssociationRepositoryBitbucket) string { return v.ConnectionArn })
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryBitbucketOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryBitbucket](o, func(v RepositoryAssociationRepositoryBitbucket) string { return v.Name })
}

// The username for the account that owns the repository.
func (o RepositoryAssociationRepositoryBitbucketOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryBitbucket](o, func(v RepositoryAssociationRepositoryBitbucket) string { return v.Owner })
}

type RepositoryAssociationRepositoryCodecommit struct {
	// The name of the AWS CodeCommit repository.
	Name string `pulumi:"name"`
}

type RepositoryAssociationRepositoryCodecommitArgs struct {
	// The name of the AWS CodeCommit repository.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RepositoryAssociationRepositoryCodecommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryCodecommit)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToRepositoryAssociationRepositoryCodecommitOutput() RepositoryAssociationRepositoryCodecommitOutput {
	return i.ToRepositoryAssociationRepositoryCodecommitOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryCodecommitArgs) ToRepositoryAssociationRepositoryCodecommitOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryCodecommitOutput)
}

func (i *RepositoryAssociationRepositoryCodecommitArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryCodecommitArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationRepositoryCodecommitOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryCodecommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryCodecommit)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToRepositoryAssociationRepositoryCodecommitOutput() RepositoryAssociationRepositoryCodecommitOutput {
	return o
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToRepositoryAssociationRepositoryCodecommitOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryCodecommitOutput {
	return o
}

func (o RepositoryAssociationRepositoryCodecommitOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryCodecommit] {
	return pulumix.Output[RepositoryAssociationRepositoryCodecommit]{
		OutputState: o.OutputState,
	}
}

// The name of the AWS CodeCommit repository.
func (o RepositoryAssociationRepositoryCodecommitOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryCodecommit](o, func(v RepositoryAssociationRepositoryCodecommit) string { return v.Name })
}

type RepositoryAssociationRepositoryGithubEnterpriseServer struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn string `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name string `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner string `pulumi:"owner"`
}

type RepositoryAssociationRepositoryGithubEnterpriseServerArgs struct {
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
	ConnectionArn pulumix.Input[string] `pulumi:"connectionArn"`
	// The name of the third party source repository.
	Name pulumix.Input[string] `pulumi:"name"`
	// The username for the account that owns the repository.
	Owner pulumix.Input[string] `pulumi:"owner"`
}

func (RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryGithubEnterpriseServer)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutput() RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return i.ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryGithubEnterpriseServerOutput)
}

func (i *RepositoryAssociationRepositoryGithubEnterpriseServerArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryGithubEnterpriseServerArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationRepositoryGithubEnterpriseServerOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryGithubEnterpriseServer)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutput() RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return o
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToRepositoryAssociationRepositoryGithubEnterpriseServerOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryGithubEnterpriseServerOutput {
	return o
}

func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryGithubEnterpriseServer] {
	return pulumix.Output[RepositoryAssociationRepositoryGithubEnterpriseServer]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) ConnectionArn() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryGithubEnterpriseServer](o, func(v RepositoryAssociationRepositoryGithubEnterpriseServer) string { return v.ConnectionArn })
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryGithubEnterpriseServer](o, func(v RepositoryAssociationRepositoryGithubEnterpriseServer) string { return v.Name })
}

// The username for the account that owns the repository.
func (o RepositoryAssociationRepositoryGithubEnterpriseServerOutput) Owner() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryGithubEnterpriseServer](o, func(v RepositoryAssociationRepositoryGithubEnterpriseServer) string { return v.Owner })
}

type RepositoryAssociationRepositoryS3Bucket struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName string `pulumi:"bucketName"`
	// The name of the third party source repository.
	Name string `pulumi:"name"`
}

type RepositoryAssociationRepositoryS3BucketArgs struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// The name of the third party source repository.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (RepositoryAssociationRepositoryS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryS3Bucket)(nil)).Elem()
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToRepositoryAssociationRepositoryS3BucketOutput() RepositoryAssociationRepositoryS3BucketOutput {
	return i.ToRepositoryAssociationRepositoryS3BucketOutputWithContext(context.Background())
}

func (i RepositoryAssociationRepositoryS3BucketArgs) ToRepositoryAssociationRepositoryS3BucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationRepositoryS3BucketOutput)
}

func (i *RepositoryAssociationRepositoryS3BucketArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationRepositoryS3BucketArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationRepositoryS3BucketOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationRepositoryS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationRepositoryS3Bucket)(nil)).Elem()
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToRepositoryAssociationRepositoryS3BucketOutput() RepositoryAssociationRepositoryS3BucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToRepositoryAssociationRepositoryS3BucketOutputWithContext(ctx context.Context) RepositoryAssociationRepositoryS3BucketOutput {
	return o
}

func (o RepositoryAssociationRepositoryS3BucketOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationRepositoryS3Bucket] {
	return pulumix.Output[RepositoryAssociationRepositoryS3Bucket]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
func (o RepositoryAssociationRepositoryS3BucketOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryS3Bucket](o, func(v RepositoryAssociationRepositoryS3Bucket) string { return v.BucketName })
}

// The name of the third party source repository.
func (o RepositoryAssociationRepositoryS3BucketOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RepositoryAssociationRepositoryS3Bucket](o, func(v RepositoryAssociationRepositoryS3Bucket) string { return v.Name })
}

type RepositoryAssociationS3RepositoryDetail struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName    *string                                               `pulumi:"bucketName"`
	CodeArtifacts []RepositoryAssociationS3RepositoryDetailCodeArtifact `pulumi:"codeArtifacts"`
}

type RepositoryAssociationS3RepositoryDetailArgs struct {
	// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
	BucketName    pulumix.Input[*string]                                                    `pulumi:"bucketName"`
	CodeArtifacts pulumix.Input[[]*RepositoryAssociationS3RepositoryDetailCodeArtifactArgs] `pulumi:"codeArtifacts"`
}

func (RepositoryAssociationS3RepositoryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetail)(nil)).Elem()
}

func (i RepositoryAssociationS3RepositoryDetailArgs) ToRepositoryAssociationS3RepositoryDetailOutput() RepositoryAssociationS3RepositoryDetailOutput {
	return i.ToRepositoryAssociationS3RepositoryDetailOutputWithContext(context.Background())
}

func (i RepositoryAssociationS3RepositoryDetailArgs) ToRepositoryAssociationS3RepositoryDetailOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationS3RepositoryDetailOutput)
}

func (i *RepositoryAssociationS3RepositoryDetailArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationS3RepositoryDetailArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationS3RepositoryDetailOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationS3RepositoryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetail)(nil)).Elem()
}

func (o RepositoryAssociationS3RepositoryDetailOutput) ToRepositoryAssociationS3RepositoryDetailOutput() RepositoryAssociationS3RepositoryDetailOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailOutput) ToRepositoryAssociationS3RepositoryDetailOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationS3RepositoryDetail] {
	return pulumix.Output[RepositoryAssociationS3RepositoryDetail]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket used for associating a new S3 repository. Note: The name must begin with `codeguru-reviewer-`.
func (o RepositoryAssociationS3RepositoryDetailOutput) BucketName() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryAssociationS3RepositoryDetail](o, func(v RepositoryAssociationS3RepositoryDetail) *string { return v.BucketName })
}

func (o RepositoryAssociationS3RepositoryDetailOutput) CodeArtifacts() pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetailCodeArtifact, RepositoryAssociationS3RepositoryDetailCodeArtifactOutput] {
	value := pulumix.Apply[RepositoryAssociationS3RepositoryDetail](o, func(v RepositoryAssociationS3RepositoryDetail) []RepositoryAssociationS3RepositoryDetailCodeArtifact {
		return v.CodeArtifacts
	})
	return pulumix.GArrayOutput[RepositoryAssociationS3RepositoryDetailCodeArtifact, RepositoryAssociationS3RepositoryDetailCodeArtifactOutput]{OutputState: value.OutputState}
}

type RepositoryAssociationS3RepositoryDetailCodeArtifact struct {
	BuildArtifactsObjectKey      *string `pulumi:"buildArtifactsObjectKey"`
	SourceCodeArtifactsObjectKey *string `pulumi:"sourceCodeArtifactsObjectKey"`
}

type RepositoryAssociationS3RepositoryDetailCodeArtifactArgs struct {
	BuildArtifactsObjectKey      pulumix.Input[*string] `pulumi:"buildArtifactsObjectKey"`
	SourceCodeArtifactsObjectKey pulumix.Input[*string] `pulumi:"sourceCodeArtifactsObjectKey"`
}

func (RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailCodeArtifact)(nil)).Elem()
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return i.ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(context.Background())
}

func (i RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryAssociationS3RepositoryDetailCodeArtifactOutput)
}

func (i *RepositoryAssociationS3RepositoryDetailCodeArtifactArgs) ToOutput(ctx context.Context) pulumix.Output[*RepositoryAssociationS3RepositoryDetailCodeArtifactArgs] {
	return pulumix.Val(i)
}

type RepositoryAssociationS3RepositoryDetailCodeArtifactOutput struct{ *pulumi.OutputState }

func (RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryAssociationS3RepositoryDetailCodeArtifact)(nil)).Elem()
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutput() RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ToRepositoryAssociationS3RepositoryDetailCodeArtifactOutputWithContext(ctx context.Context) RepositoryAssociationS3RepositoryDetailCodeArtifactOutput {
	return o
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryAssociationS3RepositoryDetailCodeArtifact] {
	return pulumix.Output[RepositoryAssociationS3RepositoryDetailCodeArtifact]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) BuildArtifactsObjectKey() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryAssociationS3RepositoryDetailCodeArtifact](o, func(v RepositoryAssociationS3RepositoryDetailCodeArtifact) *string { return v.BuildArtifactsObjectKey })
}

func (o RepositoryAssociationS3RepositoryDetailCodeArtifactOutput) SourceCodeArtifactsObjectKey() pulumix.Output[*string] {
	return pulumix.Apply[RepositoryAssociationS3RepositoryDetailCodeArtifact](o, func(v RepositoryAssociationS3RepositoryDetailCodeArtifact) *string {
		return v.SourceCodeArtifactsObjectKey
	})
}

func init() {
	pulumi.RegisterOutputType(RepositoryAssociationKmsKeyDetailsOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryBitbucketOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryCodecommitOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryGithubEnterpriseServerOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationRepositoryS3BucketOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationS3RepositoryDetailOutput{})
	pulumi.RegisterOutputType(RepositoryAssociationS3RepositoryDetailCodeArtifactOutput{})
}
