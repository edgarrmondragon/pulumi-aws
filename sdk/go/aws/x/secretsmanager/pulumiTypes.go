// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type SecretReplica struct {
	// ARN, Key ID, or Alias of the AWS KMS key within the region secret is replicated to. If one is not specified, then Secrets Manager defaults to using the AWS account's default KMS key (`aws/secretsmanager`) in the region or creates one for use if non-existent.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Date that you last accessed the secret in the Region.
	LastAccessedDate *string `pulumi:"lastAccessedDate"`
	// Region for replicating the secret.
	Region string `pulumi:"region"`
	// Status can be `InProgress`, `Failed`, or `InSync`.
	Status *string `pulumi:"status"`
	// Message such as `Replication succeeded` or `Secret with this name already exists in this region`.
	StatusMessage *string `pulumi:"statusMessage"`
}

type SecretReplicaArgs struct {
	// ARN, Key ID, or Alias of the AWS KMS key within the region secret is replicated to. If one is not specified, then Secrets Manager defaults to using the AWS account's default KMS key (`aws/secretsmanager`) in the region or creates one for use if non-existent.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Date that you last accessed the secret in the Region.
	LastAccessedDate pulumix.Input[*string] `pulumi:"lastAccessedDate"`
	// Region for replicating the secret.
	Region pulumix.Input[string] `pulumi:"region"`
	// Status can be `InProgress`, `Failed`, or `InSync`.
	Status pulumix.Input[*string] `pulumi:"status"`
	// Message such as `Replication succeeded` or `Secret with this name already exists in this region`.
	StatusMessage pulumix.Input[*string] `pulumi:"statusMessage"`
}

func (SecretReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReplica)(nil)).Elem()
}

func (i SecretReplicaArgs) ToSecretReplicaOutput() SecretReplicaOutput {
	return i.ToSecretReplicaOutputWithContext(context.Background())
}

func (i SecretReplicaArgs) ToSecretReplicaOutputWithContext(ctx context.Context) SecretReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReplicaOutput)
}

func (i *SecretReplicaArgs) ToOutput(ctx context.Context) pulumix.Output[*SecretReplicaArgs] {
	return pulumix.Val(i)
}

type SecretReplicaOutput struct{ *pulumi.OutputState }

func (SecretReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReplica)(nil)).Elem()
}

func (o SecretReplicaOutput) ToSecretReplicaOutput() SecretReplicaOutput {
	return o
}

func (o SecretReplicaOutput) ToSecretReplicaOutputWithContext(ctx context.Context) SecretReplicaOutput {
	return o
}

func (o SecretReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[SecretReplica] {
	return pulumix.Output[SecretReplica]{
		OutputState: o.OutputState,
	}
}

// ARN, Key ID, or Alias of the AWS KMS key within the region secret is replicated to. If one is not specified, then Secrets Manager defaults to using the AWS account's default KMS key (`aws/secretsmanager`) in the region or creates one for use if non-existent.
func (o SecretReplicaOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[SecretReplica](o, func(v SecretReplica) *string { return v.KmsKeyId })
}

// Date that you last accessed the secret in the Region.
func (o SecretReplicaOutput) LastAccessedDate() pulumix.Output[*string] {
	return pulumix.Apply[SecretReplica](o, func(v SecretReplica) *string { return v.LastAccessedDate })
}

// Region for replicating the secret.
func (o SecretReplicaOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[SecretReplica](o, func(v SecretReplica) string { return v.Region })
}

// Status can be `InProgress`, `Failed`, or `InSync`.
func (o SecretReplicaOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[SecretReplica](o, func(v SecretReplica) *string { return v.Status })
}

// Message such as `Replication succeeded` or `Secret with this name already exists in this region`.
func (o SecretReplicaOutput) StatusMessage() pulumix.Output[*string] {
	return pulumix.Apply[SecretReplica](o, func(v SecretReplica) *string { return v.StatusMessage })
}

type SecretRotationRotationRules struct {
	// Specifies the number of days between automatic scheduled rotations of the secret. Either `automaticallyAfterDays` or `scheduleExpression` must be specified.
	AutomaticallyAfterDays *int `pulumi:"automaticallyAfterDays"`
	// The length of the rotation window in hours. For example, `3h` for a three hour window.
	Duration *string `pulumi:"duration"`
	// A `cron()` or `rate()` expression that defines the schedule for rotating your secret. Either `automaticallyAfterDays` or `scheduleExpression` must be specified.
	ScheduleExpression *string `pulumi:"scheduleExpression"`
}

type SecretRotationRotationRulesArgs struct {
	// Specifies the number of days between automatic scheduled rotations of the secret. Either `automaticallyAfterDays` or `scheduleExpression` must be specified.
	AutomaticallyAfterDays pulumix.Input[*int] `pulumi:"automaticallyAfterDays"`
	// The length of the rotation window in hours. For example, `3h` for a three hour window.
	Duration pulumix.Input[*string] `pulumi:"duration"`
	// A `cron()` or `rate()` expression that defines the schedule for rotating your secret. Either `automaticallyAfterDays` or `scheduleExpression` must be specified.
	ScheduleExpression pulumix.Input[*string] `pulumi:"scheduleExpression"`
}

func (SecretRotationRotationRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretRotationRotationRules)(nil)).Elem()
}

func (i SecretRotationRotationRulesArgs) ToSecretRotationRotationRulesOutput() SecretRotationRotationRulesOutput {
	return i.ToSecretRotationRotationRulesOutputWithContext(context.Background())
}

func (i SecretRotationRotationRulesArgs) ToSecretRotationRotationRulesOutputWithContext(ctx context.Context) SecretRotationRotationRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretRotationRotationRulesOutput)
}

func (i *SecretRotationRotationRulesArgs) ToOutput(ctx context.Context) pulumix.Output[*SecretRotationRotationRulesArgs] {
	return pulumix.Val(i)
}

type SecretRotationRotationRulesOutput struct{ *pulumi.OutputState }

func (SecretRotationRotationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretRotationRotationRules)(nil)).Elem()
}

func (o SecretRotationRotationRulesOutput) ToSecretRotationRotationRulesOutput() SecretRotationRotationRulesOutput {
	return o
}

func (o SecretRotationRotationRulesOutput) ToSecretRotationRotationRulesOutputWithContext(ctx context.Context) SecretRotationRotationRulesOutput {
	return o
}

func (o SecretRotationRotationRulesOutput) ToOutput(ctx context.Context) pulumix.Output[SecretRotationRotationRules] {
	return pulumix.Output[SecretRotationRotationRules]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of days between automatic scheduled rotations of the secret. Either `automaticallyAfterDays` or `scheduleExpression` must be specified.
func (o SecretRotationRotationRulesOutput) AutomaticallyAfterDays() pulumix.Output[*int] {
	return pulumix.Apply[SecretRotationRotationRules](o, func(v SecretRotationRotationRules) *int { return v.AutomaticallyAfterDays })
}

// The length of the rotation window in hours. For example, `3h` for a three hour window.
func (o SecretRotationRotationRulesOutput) Duration() pulumix.Output[*string] {
	return pulumix.Apply[SecretRotationRotationRules](o, func(v SecretRotationRotationRules) *string { return v.Duration })
}

// A `cron()` or `rate()` expression that defines the schedule for rotating your secret. Either `automaticallyAfterDays` or `scheduleExpression` must be specified.
func (o SecretRotationRotationRulesOutput) ScheduleExpression() pulumix.Output[*string] {
	return pulumix.Apply[SecretRotationRotationRules](o, func(v SecretRotationRotationRules) *string { return v.ScheduleExpression })
}

type GetSecretRotationRotationRule struct {
	AutomaticallyAfterDays int    `pulumi:"automaticallyAfterDays"`
	Duration               string `pulumi:"duration"`
	ScheduleExpression     string `pulumi:"scheduleExpression"`
}

type GetSecretRotationRotationRuleArgs struct {
	AutomaticallyAfterDays pulumix.Input[int]    `pulumi:"automaticallyAfterDays"`
	Duration               pulumix.Input[string] `pulumi:"duration"`
	ScheduleExpression     pulumix.Input[string] `pulumi:"scheduleExpression"`
}

func (GetSecretRotationRotationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretRotationRotationRule)(nil)).Elem()
}

func (i GetSecretRotationRotationRuleArgs) ToGetSecretRotationRotationRuleOutput() GetSecretRotationRotationRuleOutput {
	return i.ToGetSecretRotationRotationRuleOutputWithContext(context.Background())
}

func (i GetSecretRotationRotationRuleArgs) ToGetSecretRotationRotationRuleOutputWithContext(ctx context.Context) GetSecretRotationRotationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretRotationRotationRuleOutput)
}

func (i *GetSecretRotationRotationRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSecretRotationRotationRuleArgs] {
	return pulumix.Val(i)
}

type GetSecretRotationRotationRuleOutput struct{ *pulumi.OutputState }

func (GetSecretRotationRotationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretRotationRotationRule)(nil)).Elem()
}

func (o GetSecretRotationRotationRuleOutput) ToGetSecretRotationRotationRuleOutput() GetSecretRotationRotationRuleOutput {
	return o
}

func (o GetSecretRotationRotationRuleOutput) ToGetSecretRotationRotationRuleOutputWithContext(ctx context.Context) GetSecretRotationRotationRuleOutput {
	return o
}

func (o GetSecretRotationRotationRuleOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecretRotationRotationRule] {
	return pulumix.Output[GetSecretRotationRotationRule]{
		OutputState: o.OutputState,
	}
}

func (o GetSecretRotationRotationRuleOutput) AutomaticallyAfterDays() pulumix.Output[int] {
	return pulumix.Apply[GetSecretRotationRotationRule](o, func(v GetSecretRotationRotationRule) int { return v.AutomaticallyAfterDays })
}

func (o GetSecretRotationRotationRuleOutput) Duration() pulumix.Output[string] {
	return pulumix.Apply[GetSecretRotationRotationRule](o, func(v GetSecretRotationRotationRule) string { return v.Duration })
}

func (o GetSecretRotationRotationRuleOutput) ScheduleExpression() pulumix.Output[string] {
	return pulumix.Apply[GetSecretRotationRotationRule](o, func(v GetSecretRotationRotationRule) string { return v.ScheduleExpression })
}

type GetSecretsFilter struct {
	// Name of the filter field. Valid values can be found in the [Secrets Manager ListSecrets API Reference](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_ListSecrets.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetSecretsFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [Secrets Manager ListSecrets API Reference](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_ListSecrets.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetSecretsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsFilter)(nil)).Elem()
}

func (i GetSecretsFilterArgs) ToGetSecretsFilterOutput() GetSecretsFilterOutput {
	return i.ToGetSecretsFilterOutputWithContext(context.Background())
}

func (i GetSecretsFilterArgs) ToGetSecretsFilterOutputWithContext(ctx context.Context) GetSecretsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsFilterOutput)
}

func (i *GetSecretsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSecretsFilterArgs] {
	return pulumix.Val(i)
}

type GetSecretsFilterOutput struct{ *pulumi.OutputState }

func (GetSecretsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsFilter)(nil)).Elem()
}

func (o GetSecretsFilterOutput) ToGetSecretsFilterOutput() GetSecretsFilterOutput {
	return o
}

func (o GetSecretsFilterOutput) ToGetSecretsFilterOutputWithContext(ctx context.Context) GetSecretsFilterOutput {
	return o
}

func (o GetSecretsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSecretsFilter] {
	return pulumix.Output[GetSecretsFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [Secrets Manager ListSecrets API Reference](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_ListSecrets.html).
func (o GetSecretsFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSecretsFilter](o, func(v GetSecretsFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetSecretsFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetSecretsFilter](o, func(v GetSecretsFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SecretReplicaOutput{})
	pulumi.RegisterOutputType(SecretRotationRotationRulesOutput{})
	pulumi.RegisterOutputType(GetSecretRotationRotationRuleOutput{})
	pulumi.RegisterOutputType(GetSecretsFilterOutput{})
}
