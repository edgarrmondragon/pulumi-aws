// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Evidently Launch resource.
type Launch struct {
	pulumi.CustomResourceState

	// The ARN of the launch.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The date and time that the launch is created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Specifies the description of the launch.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A block that contains information about the start and end times of the launch. Detailed below
	Executions pulumix.GArrayOutput[LaunchExecution, LaunchExecutionOutput] `pulumi:"executions"`
	// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
	Groups pulumix.GArrayOutput[LaunchGroup, LaunchGroupOutput] `pulumi:"groups"`
	// The date and time that the launch was most recently updated.
	LastUpdatedTime pulumix.Output[string] `pulumi:"lastUpdatedTime"`
	// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
	MetricMonitors pulumix.GArrayOutput[LaunchMetricMonitor, LaunchMetricMonitorOutput] `pulumi:"metricMonitors"`
	// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name or ARN of the project that is to contain the new launch.
	Project pulumix.Output[string] `pulumi:"project"`
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
	RandomizationSalt pulumix.Output[*string] `pulumi:"randomizationSalt"`
	// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
	ScheduledSplitsConfig pulumix.GPtrOutput[LaunchScheduledSplitsConfig, LaunchScheduledSplitsConfigOutput] `pulumi:"scheduledSplitsConfig"`
	// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
	Status pulumix.Output[string] `pulumi:"status"`
	// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
	StatusReason pulumix.Output[string] `pulumi:"statusReason"`
	// Tags to apply to the launch. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of launch.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewLaunch registers a new resource with the given unique name, arguments, and options.
func NewLaunch(ctx *pulumi.Context,
	name string, args *LaunchArgs, opts ...pulumi.ResourceOption) (*Launch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Launch
	err := ctx.RegisterResource("aws:evidently/launch:Launch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLaunch gets an existing Launch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLaunch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaunchState, opts ...pulumi.ResourceOption) (*Launch, error) {
	var resource Launch
	err := ctx.ReadResource("aws:evidently/launch:Launch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Launch resources.
type launchState struct {
	// The ARN of the launch.
	Arn *string `pulumi:"arn"`
	// The date and time that the launch is created.
	CreatedTime *string `pulumi:"createdTime"`
	// Specifies the description of the launch.
	Description *string `pulumi:"description"`
	// A block that contains information about the start and end times of the launch. Detailed below
	Executions []LaunchExecution `pulumi:"executions"`
	// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
	Groups []LaunchGroup `pulumi:"groups"`
	// The date and time that the launch was most recently updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
	MetricMonitors []LaunchMetricMonitor `pulumi:"metricMonitors"`
	// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new launch.
	Project *string `pulumi:"project"`
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
	RandomizationSalt *string `pulumi:"randomizationSalt"`
	// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
	ScheduledSplitsConfig *LaunchScheduledSplitsConfig `pulumi:"scheduledSplitsConfig"`
	// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
	Status *string `pulumi:"status"`
	// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
	StatusReason *string `pulumi:"statusReason"`
	// Tags to apply to the launch. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of launch.
	Type *string `pulumi:"type"`
}

type LaunchState struct {
	// The ARN of the launch.
	Arn pulumix.Input[*string]
	// The date and time that the launch is created.
	CreatedTime pulumix.Input[*string]
	// Specifies the description of the launch.
	Description pulumix.Input[*string]
	// A block that contains information about the start and end times of the launch. Detailed below
	Executions pulumix.Input[[]*LaunchExecutionArgs]
	// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
	Groups pulumix.Input[[]*LaunchGroupArgs]
	// The date and time that the launch was most recently updated.
	LastUpdatedTime pulumix.Input[*string]
	// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
	MetricMonitors pulumix.Input[[]*LaunchMetricMonitorArgs]
	// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Input[*string]
	// The name or ARN of the project that is to contain the new launch.
	Project pulumix.Input[*string]
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
	RandomizationSalt pulumix.Input[*string]
	// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
	ScheduledSplitsConfig pulumix.Input[*LaunchScheduledSplitsConfigArgs]
	// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
	Status pulumix.Input[*string]
	// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
	StatusReason pulumix.Input[*string]
	// Tags to apply to the launch. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of launch.
	Type pulumix.Input[*string]
}

func (LaunchState) ElementType() reflect.Type {
	return reflect.TypeOf((*launchState)(nil)).Elem()
}

type launchArgs struct {
	// Specifies the description of the launch.
	Description *string `pulumi:"description"`
	// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
	Groups []LaunchGroup `pulumi:"groups"`
	// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
	MetricMonitors []LaunchMetricMonitor `pulumi:"metricMonitors"`
	// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new launch.
	Project string `pulumi:"project"`
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
	RandomizationSalt *string `pulumi:"randomizationSalt"`
	// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
	ScheduledSplitsConfig *LaunchScheduledSplitsConfig `pulumi:"scheduledSplitsConfig"`
	// Tags to apply to the launch. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Launch resource.
type LaunchArgs struct {
	// Specifies the description of the launch.
	Description pulumix.Input[*string]
	// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
	Groups pulumix.Input[[]*LaunchGroupArgs]
	// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
	MetricMonitors pulumix.Input[[]*LaunchMetricMonitorArgs]
	// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
	Name pulumix.Input[*string]
	// The name or ARN of the project that is to contain the new launch.
	Project pulumix.Input[string]
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
	RandomizationSalt pulumix.Input[*string]
	// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
	ScheduledSplitsConfig pulumix.Input[*LaunchScheduledSplitsConfigArgs]
	// Tags to apply to the launch. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LaunchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*launchArgs)(nil)).Elem()
}

type LaunchOutput struct{ *pulumi.OutputState }

func (LaunchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Launch)(nil)).Elem()
}

func (o LaunchOutput) ToLaunchOutput() LaunchOutput {
	return o
}

func (o LaunchOutput) ToLaunchOutputWithContext(ctx context.Context) LaunchOutput {
	return o
}

func (o LaunchOutput) ToOutput(ctx context.Context) pulumix.Output[Launch] {
	return pulumix.Output[Launch]{
		OutputState: o.OutputState,
	}
}

// The ARN of the launch.
func (o LaunchOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time that the launch is created.
func (o LaunchOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the description of the launch.
func (o LaunchOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A block that contains information about the start and end times of the launch. Detailed below
func (o LaunchOutput) Executions() pulumix.GArrayOutput[LaunchExecution, LaunchExecutionOutput] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.GArrayOutput[LaunchExecution, LaunchExecutionOutput] { return v.Executions })
	unwrapped := pulumix.Flatten[[]LaunchExecution, pulumix.GArrayOutput[LaunchExecution, LaunchExecutionOutput]](value)
	return pulumix.GArrayOutput[LaunchExecution, LaunchExecutionOutput]{OutputState: unwrapped.OutputState}
}

// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
func (o LaunchOutput) Groups() pulumix.GArrayOutput[LaunchGroup, LaunchGroupOutput] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.GArrayOutput[LaunchGroup, LaunchGroupOutput] { return v.Groups })
	unwrapped := pulumix.Flatten[[]LaunchGroup, pulumix.GArrayOutput[LaunchGroup, LaunchGroupOutput]](value)
	return pulumix.GArrayOutput[LaunchGroup, LaunchGroupOutput]{OutputState: unwrapped.OutputState}
}

// The date and time that the launch was most recently updated.
func (o LaunchOutput) LastUpdatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.LastUpdatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
func (o LaunchOutput) MetricMonitors() pulumix.GArrayOutput[LaunchMetricMonitor, LaunchMetricMonitorOutput] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.GArrayOutput[LaunchMetricMonitor, LaunchMetricMonitorOutput] {
		return v.MetricMonitors
	})
	unwrapped := pulumix.Flatten[[]LaunchMetricMonitor, pulumix.GArrayOutput[LaunchMetricMonitor, LaunchMetricMonitorOutput]](value)
	return pulumix.GArrayOutput[LaunchMetricMonitor, LaunchMetricMonitorOutput]{OutputState: unwrapped.OutputState}
}

// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
func (o LaunchOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name or ARN of the project that is to contain the new launch.
func (o LaunchOutput) Project() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.Project })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
func (o LaunchOutput) RandomizationSalt() pulumix.Output[*string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[*string] { return v.RandomizationSalt })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
func (o LaunchOutput) ScheduledSplitsConfig() pulumix.GPtrOutput[LaunchScheduledSplitsConfig, LaunchScheduledSplitsConfigOutput] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.GPtrOutput[LaunchScheduledSplitsConfig, LaunchScheduledSplitsConfigOutput] {
		return v.ScheduledSplitsConfig
	})
	unwrapped := pulumix.Flatten[*LaunchScheduledSplitsConfig, pulumix.GPtrOutput[LaunchScheduledSplitsConfig, LaunchScheduledSplitsConfigOutput]](value)
	return pulumix.GPtrOutput[LaunchScheduledSplitsConfig, LaunchScheduledSplitsConfigOutput]{OutputState: unwrapped.OutputState}
}

// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
func (o LaunchOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
func (o LaunchOutput) StatusReason() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.StatusReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the launch. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LaunchOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LaunchOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of launch.
func (o LaunchOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Launch](o, func(v Launch) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(LaunchOutput{})
}
