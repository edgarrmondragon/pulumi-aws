// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Internet Monitor Monitor resource.
type InternetMonitor struct {
	pulumi.CustomResourceState

	// ARN of the Monitor.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig pulumix.GPtrOutput[InternetMonitorHealthEventsConfig, InternetMonitorHealthEventsConfigOutput] `pulumi:"healthEventsConfig"`
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDelivery, InternetMonitorInternetMeasurementsLogDeliveryOutput] `pulumi:"internetMeasurementsLogDelivery"`
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor pulumix.Output[*int] `pulumi:"maxCityNetworksToMonitor"`
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName pulumix.Output[string] `pulumi:"monitorName"`
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources pulumix.ArrayOutput[string] `pulumi:"resources"`
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status pulumix.Output[*string] `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor pulumix.Output[*int] `pulumi:"trafficPercentageToMonitor"`
}

// NewInternetMonitor registers a new resource with the given unique name, arguments, and options.
func NewInternetMonitor(ctx *pulumi.Context,
	name string, args *InternetMonitorArgs, opts ...pulumi.ResourceOption) (*InternetMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternetMonitor
	err := ctx.RegisterResource("aws:cloudwatch/internetMonitor:InternetMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternetMonitor gets an existing InternetMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternetMonitorState, opts ...pulumi.ResourceOption) (*InternetMonitor, error) {
	var resource InternetMonitor
	err := ctx.ReadResource("aws:cloudwatch/internetMonitor:InternetMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternetMonitor resources.
type internetMonitorState struct {
	// ARN of the Monitor.
	Arn *string `pulumi:"arn"`
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig *InternetMonitorHealthEventsConfig `pulumi:"healthEventsConfig"`
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery *InternetMonitorInternetMeasurementsLogDelivery `pulumi:"internetMeasurementsLogDelivery"`
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor *int `pulumi:"maxCityNetworksToMonitor"`
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName *string `pulumi:"monitorName"`
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources []string `pulumi:"resources"`
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor *int `pulumi:"trafficPercentageToMonitor"`
}

type InternetMonitorState struct {
	// ARN of the Monitor.
	Arn pulumix.Input[*string]
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig pulumix.Input[*InternetMonitorHealthEventsConfigArgs]
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery pulumix.Input[*InternetMonitorInternetMeasurementsLogDeliveryArgs]
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor pulumix.Input[*int]
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName pulumix.Input[*string]
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources pulumix.Input[[]string]
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor pulumix.Input[*int]
}

func (InternetMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*internetMonitorState)(nil)).Elem()
}

type internetMonitorArgs struct {
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig *InternetMonitorHealthEventsConfig `pulumi:"healthEventsConfig"`
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery *InternetMonitorInternetMeasurementsLogDelivery `pulumi:"internetMeasurementsLogDelivery"`
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor *int `pulumi:"maxCityNetworksToMonitor"`
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName string `pulumi:"monitorName"`
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources []string `pulumi:"resources"`
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status *string `pulumi:"status"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor *int `pulumi:"trafficPercentageToMonitor"`
}

// The set of arguments for constructing a InternetMonitor resource.
type InternetMonitorArgs struct {
	// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
	HealthEventsConfig pulumix.Input[*InternetMonitorHealthEventsConfigArgs]
	// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
	InternetMeasurementsLogDelivery pulumix.Input[*InternetMonitorInternetMeasurementsLogDeliveryArgs]
	// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
	MaxCityNetworksToMonitor pulumix.Input[*int]
	// The name of the monitor.
	//
	// The following arguments are optional:
	MonitorName pulumix.Input[string]
	// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
	Resources pulumix.Input[[]string]
	// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
	Status pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
	TrafficPercentageToMonitor pulumix.Input[*int]
}

func (InternetMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internetMonitorArgs)(nil)).Elem()
}

type InternetMonitorOutput struct{ *pulumi.OutputState }

func (InternetMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternetMonitor)(nil)).Elem()
}

func (o InternetMonitorOutput) ToInternetMonitorOutput() InternetMonitorOutput {
	return o
}

func (o InternetMonitorOutput) ToInternetMonitorOutputWithContext(ctx context.Context) InternetMonitorOutput {
	return o
}

func (o InternetMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[InternetMonitor] {
	return pulumix.Output[InternetMonitor]{
		OutputState: o.OutputState,
	}
}

// ARN of the Monitor.
func (o InternetMonitorOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
func (o InternetMonitorOutput) HealthEventsConfig() pulumix.GPtrOutput[InternetMonitorHealthEventsConfig, InternetMonitorHealthEventsConfigOutput] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.GPtrOutput[InternetMonitorHealthEventsConfig, InternetMonitorHealthEventsConfigOutput] {
		return v.HealthEventsConfig
	})
	unwrapped := pulumix.Flatten[*InternetMonitorHealthEventsConfig, pulumix.GPtrOutput[InternetMonitorHealthEventsConfig, InternetMonitorHealthEventsConfigOutput]](value)
	return pulumix.GPtrOutput[InternetMonitorHealthEventsConfig, InternetMonitorHealthEventsConfigOutput]{OutputState: unwrapped.OutputState}
}

// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
func (o InternetMonitorOutput) InternetMeasurementsLogDelivery() pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDelivery, InternetMonitorInternetMeasurementsLogDeliveryOutput] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDelivery, InternetMonitorInternetMeasurementsLogDeliveryOutput] {
		return v.InternetMeasurementsLogDelivery
	})
	unwrapped := pulumix.Flatten[*InternetMonitorInternetMeasurementsLogDelivery, pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDelivery, InternetMonitorInternetMeasurementsLogDeliveryOutput]](value)
	return pulumix.GPtrOutput[InternetMonitorInternetMeasurementsLogDelivery, InternetMonitorInternetMeasurementsLogDeliveryOutput]{OutputState: unwrapped.OutputState}
}

// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
func (o InternetMonitorOutput) MaxCityNetworksToMonitor() pulumix.Output[*int] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.Output[*int] { return v.MaxCityNetworksToMonitor })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name of the monitor.
//
// The following arguments are optional:
func (o InternetMonitorOutput) MonitorName() pulumix.Output[string] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.Output[string] { return v.MonitorName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
func (o InternetMonitorOutput) Resources() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.ArrayOutput[string] { return v.Resources })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
func (o InternetMonitorOutput) Status() pulumix.Output[*string] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.Output[*string] { return v.Status })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o InternetMonitorOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o InternetMonitorOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
func (o InternetMonitorOutput) TrafficPercentageToMonitor() pulumix.Output[*int] {
	value := pulumix.Apply[InternetMonitor](o, func(v InternetMonitor) pulumix.Output[*int] { return v.TrafficPercentageToMonitor })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(InternetMonitorOutput{})
}
