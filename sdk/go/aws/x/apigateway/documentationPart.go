// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a settings of an API Gateway Documentation Part.
type DocumentationPart struct {
	pulumi.CustomResourceState

	// Location of the targeted API entity of the to-be-created documentation part. See below.
	Location pulumix.GPtrOutput[DocumentationPartLocation, DocumentationPartLocationOutput] `pulumi:"location"`
	// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
	Properties pulumix.Output[string] `pulumi:"properties"`
	// ID of the associated Rest API
	RestApiId pulumix.Output[string] `pulumi:"restApiId"`
}

// NewDocumentationPart registers a new resource with the given unique name, arguments, and options.
func NewDocumentationPart(ctx *pulumi.Context,
	name string, args *DocumentationPartArgs, opts ...pulumi.ResourceOption) (*DocumentationPart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.RestApiId == nil {
		return nil, errors.New("invalid value for required argument 'RestApiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DocumentationPart
	err := ctx.RegisterResource("aws:apigateway/documentationPart:DocumentationPart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentationPart gets an existing DocumentationPart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentationPart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentationPartState, opts ...pulumi.ResourceOption) (*DocumentationPart, error) {
	var resource DocumentationPart
	err := ctx.ReadResource("aws:apigateway/documentationPart:DocumentationPart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentationPart resources.
type documentationPartState struct {
	// Location of the targeted API entity of the to-be-created documentation part. See below.
	Location *DocumentationPartLocation `pulumi:"location"`
	// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
	Properties *string `pulumi:"properties"`
	// ID of the associated Rest API
	RestApiId *string `pulumi:"restApiId"`
}

type DocumentationPartState struct {
	// Location of the targeted API entity of the to-be-created documentation part. See below.
	Location pulumix.Input[*DocumentationPartLocationArgs]
	// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
	Properties pulumix.Input[*string]
	// ID of the associated Rest API
	RestApiId pulumix.Input[*string]
}

func (DocumentationPartState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentationPartState)(nil)).Elem()
}

type documentationPartArgs struct {
	// Location of the targeted API entity of the to-be-created documentation part. See below.
	Location DocumentationPartLocation `pulumi:"location"`
	// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
	Properties string `pulumi:"properties"`
	// ID of the associated Rest API
	RestApiId string `pulumi:"restApiId"`
}

// The set of arguments for constructing a DocumentationPart resource.
type DocumentationPartArgs struct {
	// Location of the targeted API entity of the to-be-created documentation part. See below.
	Location pulumix.Input[*DocumentationPartLocationArgs]
	// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
	Properties pulumix.Input[string]
	// ID of the associated Rest API
	RestApiId pulumix.Input[string]
}

func (DocumentationPartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentationPartArgs)(nil)).Elem()
}

type DocumentationPartOutput struct{ *pulumi.OutputState }

func (DocumentationPartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationPart)(nil)).Elem()
}

func (o DocumentationPartOutput) ToDocumentationPartOutput() DocumentationPartOutput {
	return o
}

func (o DocumentationPartOutput) ToDocumentationPartOutputWithContext(ctx context.Context) DocumentationPartOutput {
	return o
}

func (o DocumentationPartOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentationPart] {
	return pulumix.Output[DocumentationPart]{
		OutputState: o.OutputState,
	}
}

// Location of the targeted API entity of the to-be-created documentation part. See below.
func (o DocumentationPartOutput) Location() pulumix.GPtrOutput[DocumentationPartLocation, DocumentationPartLocationOutput] {
	value := pulumix.Apply[DocumentationPart](o, func(v DocumentationPart) pulumix.GPtrOutput[DocumentationPartLocation, DocumentationPartLocationOutput] {
		return v.Location
	})
	unwrapped := pulumix.Flatten[*DocumentationPartLocation, pulumix.GPtrOutput[DocumentationPartLocation, DocumentationPartLocationOutput]](value)
	return pulumix.GPtrOutput[DocumentationPartLocation, DocumentationPartLocationOutput]{OutputState: unwrapped.OutputState}
}

// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
func (o DocumentationPartOutput) Properties() pulumix.Output[string] {
	value := pulumix.Apply[DocumentationPart](o, func(v DocumentationPart) pulumix.Output[string] { return v.Properties })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the associated Rest API
func (o DocumentationPartOutput) RestApiId() pulumix.Output[string] {
	value := pulumix.Apply[DocumentationPart](o, func(v DocumentationPart) pulumix.Output[string] { return v.RestApiId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DocumentationPartOutput{})
}
