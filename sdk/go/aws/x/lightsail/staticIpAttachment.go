// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a static IP address attachment - relationship between a Lightsail static IP & Lightsail instance.
//
// > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
type StaticIpAttachment struct {
	pulumi.CustomResourceState

	// The name of the Lightsail instance to attach the IP to
	InstanceName pulumix.Output[string] `pulumi:"instanceName"`
	// The allocated static IP address
	IpAddress pulumix.Output[string] `pulumi:"ipAddress"`
	// The name of the allocated static IP
	StaticIpName pulumix.Output[string] `pulumi:"staticIpName"`
}

// NewStaticIpAttachment registers a new resource with the given unique name, arguments, and options.
func NewStaticIpAttachment(ctx *pulumi.Context,
	name string, args *StaticIpAttachmentArgs, opts ...pulumi.ResourceOption) (*StaticIpAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.StaticIpName == nil {
		return nil, errors.New("invalid value for required argument 'StaticIpName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticIpAttachment
	err := ctx.RegisterResource("aws:lightsail/staticIpAttachment:StaticIpAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticIpAttachment gets an existing StaticIpAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticIpAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticIpAttachmentState, opts ...pulumi.ResourceOption) (*StaticIpAttachment, error) {
	var resource StaticIpAttachment
	err := ctx.ReadResource("aws:lightsail/staticIpAttachment:StaticIpAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticIpAttachment resources.
type staticIpAttachmentState struct {
	// The name of the Lightsail instance to attach the IP to
	InstanceName *string `pulumi:"instanceName"`
	// The allocated static IP address
	IpAddress *string `pulumi:"ipAddress"`
	// The name of the allocated static IP
	StaticIpName *string `pulumi:"staticIpName"`
}

type StaticIpAttachmentState struct {
	// The name of the Lightsail instance to attach the IP to
	InstanceName pulumix.Input[*string]
	// The allocated static IP address
	IpAddress pulumix.Input[*string]
	// The name of the allocated static IP
	StaticIpName pulumix.Input[*string]
}

func (StaticIpAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpAttachmentState)(nil)).Elem()
}

type staticIpAttachmentArgs struct {
	// The name of the Lightsail instance to attach the IP to
	InstanceName string `pulumi:"instanceName"`
	// The name of the allocated static IP
	StaticIpName string `pulumi:"staticIpName"`
}

// The set of arguments for constructing a StaticIpAttachment resource.
type StaticIpAttachmentArgs struct {
	// The name of the Lightsail instance to attach the IP to
	InstanceName pulumix.Input[string]
	// The name of the allocated static IP
	StaticIpName pulumix.Input[string]
}

func (StaticIpAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpAttachmentArgs)(nil)).Elem()
}

type StaticIpAttachmentOutput struct{ *pulumi.OutputState }

func (StaticIpAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIpAttachment)(nil)).Elem()
}

func (o StaticIpAttachmentOutput) ToStaticIpAttachmentOutput() StaticIpAttachmentOutput {
	return o
}

func (o StaticIpAttachmentOutput) ToStaticIpAttachmentOutputWithContext(ctx context.Context) StaticIpAttachmentOutput {
	return o
}

func (o StaticIpAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[StaticIpAttachment] {
	return pulumix.Output[StaticIpAttachment]{
		OutputState: o.OutputState,
	}
}

// The name of the Lightsail instance to attach the IP to
func (o StaticIpAttachmentOutput) InstanceName() pulumix.Output[string] {
	value := pulumix.Apply[StaticIpAttachment](o, func(v StaticIpAttachment) pulumix.Output[string] { return v.InstanceName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The allocated static IP address
func (o StaticIpAttachmentOutput) IpAddress() pulumix.Output[string] {
	value := pulumix.Apply[StaticIpAttachment](o, func(v StaticIpAttachment) pulumix.Output[string] { return v.IpAddress })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the allocated static IP
func (o StaticIpAttachmentOutput) StaticIpName() pulumix.Output[string] {
	value := pulumix.Apply[StaticIpAttachment](o, func(v StaticIpAttachment) pulumix.Output[string] { return v.StaticIpName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(StaticIpAttachmentOutput{})
}
