// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can be used to fetch information about a specific
// QuickSight group. By using this data source, you can reference QuickSight group
// properties without having to hard code ARNs or unique IDs as input.
func GetQuicksightGroup(ctx *pulumi.Context, args *GetQuicksightGroupArgs, opts ...pulumi.InvokeOption) (*GetQuicksightGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetQuicksightGroupResult
	err := ctx.Invoke("aws:quicksight/getQuicksightGroup:getQuicksightGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuicksightGroup.
type GetQuicksightGroupArgs struct {
	// AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The name of the group that you want to match.
	//
	// The following arguments are optional:
	GroupName string `pulumi:"groupName"`
	// QuickSight namespace. Defaults to `default`.
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getQuicksightGroup.
type GetQuicksightGroupResult struct {
	// The Amazon Resource Name (ARN) for the group.
	Arn          string `pulumi:"arn"`
	AwsAccountId string `pulumi:"awsAccountId"`
	// The group description.
	Description string `pulumi:"description"`
	GroupName   string `pulumi:"groupName"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	Namespace *string `pulumi:"namespace"`
	// The principal ID of the group.
	PrincipalId string `pulumi:"principalId"`
}

func GetQuicksightGroupOutput(ctx *pulumi.Context, args GetQuicksightGroupOutputArgs, opts ...pulumi.InvokeOption) GetQuicksightGroupResultOutput {
	outputResult := pulumix.ApplyErr[*GetQuicksightGroupArgs](args.ToOutput(), func(plainArgs *GetQuicksightGroupArgs) (*GetQuicksightGroupResult, error) {
		return GetQuicksightGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetQuicksightGroupResultOutput, *GetQuicksightGroupResult](outputResult)
}

// A collection of arguments for invoking getQuicksightGroup.
type GetQuicksightGroupOutputArgs struct {
	// AWS account ID.
	AwsAccountId pulumix.Input[*string] `pulumi:"awsAccountId"`
	// The name of the group that you want to match.
	//
	// The following arguments are optional:
	GroupName pulumix.Input[string] `pulumi:"groupName"`
	// QuickSight namespace. Defaults to `default`.
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
}

func (args GetQuicksightGroupOutputArgs) ToOutput() pulumix.Output[*GetQuicksightGroupArgs] {
	allArgs := pulumix.All(
		args.AwsAccountId.ToOutput(context.Background()).AsAny(),
		args.GroupName.ToOutput(context.Background()).AsAny(),
		args.Namespace.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetQuicksightGroupArgs {
		return &GetQuicksightGroupArgs{
			AwsAccountId: resolvedArgs[0].(*string),
			GroupName:    resolvedArgs[1].(string),
			Namespace:    resolvedArgs[2].(*string),
		}
	})
}

type GetQuicksightGroupResultOutput struct{ *pulumi.OutputState }

func (GetQuicksightGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuicksightGroupResult)(nil)).Elem()
}

func (o GetQuicksightGroupResultOutput) ToOutput(context.Context) pulumix.Output[*GetQuicksightGroupResult] {
	return pulumix.Output[*GetQuicksightGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o GetQuicksightGroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) string { return v.Arn })
}

func (o GetQuicksightGroupResultOutput) AwsAccountId() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) string { return v.AwsAccountId })
}

func (o GetQuicksightGroupResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) string { return v.Description })
}

func (o GetQuicksightGroupResultOutput) GroupName() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) string { return v.GroupName })
}

func (o GetQuicksightGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) string { return v.Id })
}

func (o GetQuicksightGroupResultOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) *string { return v.Namespace })
}

func (o GetQuicksightGroupResultOutput) PrincipalId() pulumix.Output[string] {
	return pulumix.Apply[*GetQuicksightGroupResult](o, func(v *GetQuicksightGroupResult) string { return v.PrincipalId })
}
