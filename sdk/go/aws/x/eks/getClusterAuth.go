// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get an authentication token to communicate with an EKS cluster.
//
// Uses IAM credentials from the AWS provider to generate a temporary token that is compatible with
// [AWS IAM Authenticator](https://github.com/kubernetes-sigs/aws-iam-authenticator) authentication.
// This can be used to authenticate to an EKS cluster or to a cluster that has the AWS IAM Authenticator
// server configured.
func GetClusterAuth(ctx *pulumi.Context, args *GetClusterAuthArgs, opts ...pulumi.InvokeOption) (*GetClusterAuthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClusterAuthResult
	err := ctx.Invoke("aws:eks/getClusterAuth:getClusterAuth", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterAuth.
type GetClusterAuthArgs struct {
	// Name of the cluster
	Name string `pulumi:"name"`
}

// A collection of values returned by getClusterAuth.
type GetClusterAuthResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Token to use to authenticate with the cluster.
	Token string `pulumi:"token"`
}

func GetClusterAuthOutput(ctx *pulumi.Context, args GetClusterAuthOutputArgs, opts ...pulumi.InvokeOption) GetClusterAuthResultOutput {
	outputResult := pulumix.ApplyErr[*GetClusterAuthArgs](args.ToOutput(), func(plainArgs *GetClusterAuthArgs) (*GetClusterAuthResult, error) {
		return GetClusterAuth(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetClusterAuthResultOutput, *GetClusterAuthResult](outputResult)
}

// A collection of arguments for invoking getClusterAuth.
type GetClusterAuthOutputArgs struct {
	// Name of the cluster
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args GetClusterAuthOutputArgs) ToOutput() pulumix.Output[*GetClusterAuthArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetClusterAuthArgs {
		return &GetClusterAuthArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type GetClusterAuthResultOutput struct{ *pulumi.OutputState }

func (GetClusterAuthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAuthResult)(nil)).Elem()
}

func (o GetClusterAuthResultOutput) ToOutput(context.Context) pulumix.Output[*GetClusterAuthResult] {
	return pulumix.Output[*GetClusterAuthResult]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterAuthResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterAuthResult](o, func(v *GetClusterAuthResult) string { return v.Id })
}

func (o GetClusterAuthResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterAuthResult](o, func(v *GetClusterAuthResult) string { return v.Name })
}

func (o GetClusterAuthResultOutput) Token() pulumix.Output[string] {
	return pulumix.Apply[*GetClusterAuthResult](o, func(v *GetClusterAuthResult) string { return v.Token })
}
