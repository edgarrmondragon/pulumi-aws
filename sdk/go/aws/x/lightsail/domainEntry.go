// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a domain entry resource
//
// > **NOTE on `id`:** In an effort to simplify imports, this resource `id` field has been updated to the standard resource id separator, a comma (`,`). For backward compatibility, the previous separator (underscore `_`) can still be used to read and import existing resources. When state is refreshed, the `id` will be updated to use the new standard separator. The previous separator will be deprecated in a future major release.
type DomainEntry struct {
	pulumi.CustomResourceState

	// The name of the Lightsail domain in which to create the entry
	DomainName pulumix.Output[string] `pulumi:"domainName"`
	// If the entry should be an alias Defaults to `false`
	IsAlias pulumix.Output[*bool] `pulumi:"isAlias"`
	// Name of the entry record
	Name pulumix.Output[string] `pulumi:"name"`
	// Target of the domain entry
	Target pulumix.Output[string] `pulumi:"target"`
	// Type of record
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewDomainEntry registers a new resource with the given unique name, arguments, and options.
func NewDomainEntry(ctx *pulumi.Context,
	name string, args *DomainEntryArgs, opts ...pulumi.ResourceOption) (*DomainEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainEntry
	err := ctx.RegisterResource("aws:lightsail/domainEntry:DomainEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainEntry gets an existing DomainEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainEntryState, opts ...pulumi.ResourceOption) (*DomainEntry, error) {
	var resource DomainEntry
	err := ctx.ReadResource("aws:lightsail/domainEntry:DomainEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainEntry resources.
type domainEntryState struct {
	// The name of the Lightsail domain in which to create the entry
	DomainName *string `pulumi:"domainName"`
	// If the entry should be an alias Defaults to `false`
	IsAlias *bool `pulumi:"isAlias"`
	// Name of the entry record
	Name *string `pulumi:"name"`
	// Target of the domain entry
	Target *string `pulumi:"target"`
	// Type of record
	Type *string `pulumi:"type"`
}

type DomainEntryState struct {
	// The name of the Lightsail domain in which to create the entry
	DomainName pulumix.Input[*string]
	// If the entry should be an alias Defaults to `false`
	IsAlias pulumix.Input[*bool]
	// Name of the entry record
	Name pulumix.Input[*string]
	// Target of the domain entry
	Target pulumix.Input[*string]
	// Type of record
	Type pulumix.Input[*string]
}

func (DomainEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainEntryState)(nil)).Elem()
}

type domainEntryArgs struct {
	// The name of the Lightsail domain in which to create the entry
	DomainName string `pulumi:"domainName"`
	// If the entry should be an alias Defaults to `false`
	IsAlias *bool `pulumi:"isAlias"`
	// Name of the entry record
	Name *string `pulumi:"name"`
	// Target of the domain entry
	Target string `pulumi:"target"`
	// Type of record
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DomainEntry resource.
type DomainEntryArgs struct {
	// The name of the Lightsail domain in which to create the entry
	DomainName pulumix.Input[string]
	// If the entry should be an alias Defaults to `false`
	IsAlias pulumix.Input[*bool]
	// Name of the entry record
	Name pulumix.Input[*string]
	// Target of the domain entry
	Target pulumix.Input[string]
	// Type of record
	Type pulumix.Input[string]
}

func (DomainEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainEntryArgs)(nil)).Elem()
}

type DomainEntryOutput struct{ *pulumi.OutputState }

func (DomainEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainEntry)(nil)).Elem()
}

func (o DomainEntryOutput) ToDomainEntryOutput() DomainEntryOutput {
	return o
}

func (o DomainEntryOutput) ToDomainEntryOutputWithContext(ctx context.Context) DomainEntryOutput {
	return o
}

func (o DomainEntryOutput) ToOutput(ctx context.Context) pulumix.Output[DomainEntry] {
	return pulumix.Output[DomainEntry]{
		OutputState: o.OutputState,
	}
}

// The name of the Lightsail domain in which to create the entry
func (o DomainEntryOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainEntry](o, func(v DomainEntry) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If the entry should be an alias Defaults to `false`
func (o DomainEntryOutput) IsAlias() pulumix.Output[*bool] {
	value := pulumix.Apply[DomainEntry](o, func(v DomainEntry) pulumix.Output[*bool] { return v.IsAlias })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the entry record
func (o DomainEntryOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[DomainEntry](o, func(v DomainEntry) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Target of the domain entry
func (o DomainEntryOutput) Target() pulumix.Output[string] {
	value := pulumix.Apply[DomainEntry](o, func(v DomainEntry) pulumix.Output[string] { return v.Target })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Type of record
func (o DomainEntryOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[DomainEntry](o, func(v DomainEntry) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainEntryOutput{})
}
