// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS IVS (Interactive Video) Channel.
type Channel struct {
	pulumi.CustomResourceState

	// ARN of the Channel.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// If `true`, channel is private (enabled for playback authorization).
	Authorized pulumix.Output[bool] `pulumi:"authorized"`
	// Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
	IngestEndpoint pulumix.Output[string] `pulumi:"ingestEndpoint"`
	// Channel latency mode. Valid values: `NORMAL`, `LOW`.
	LatencyMode pulumix.Output[string] `pulumi:"latencyMode"`
	// Channel name.
	Name pulumix.Output[string] `pulumi:"name"`
	// Channel playback URL.
	PlaybackUrl pulumix.Output[string] `pulumi:"playbackUrl"`
	// Recording configuration ARN.
	RecordingConfigurationArn pulumix.Output[string] `pulumi:"recordingConfigurationArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		args = &ChannelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws:ivs/channel:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws:ivs/channel:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
	// ARN of the Channel.
	Arn *string `pulumi:"arn"`
	// If `true`, channel is private (enabled for playback authorization).
	Authorized *bool `pulumi:"authorized"`
	// Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
	IngestEndpoint *string `pulumi:"ingestEndpoint"`
	// Channel latency mode. Valid values: `NORMAL`, `LOW`.
	LatencyMode *string `pulumi:"latencyMode"`
	// Channel name.
	Name *string `pulumi:"name"`
	// Channel playback URL.
	PlaybackUrl *string `pulumi:"playbackUrl"`
	// Recording configuration ARN.
	RecordingConfigurationArn *string `pulumi:"recordingConfigurationArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
	Type *string `pulumi:"type"`
}

type ChannelState struct {
	// ARN of the Channel.
	Arn pulumix.Input[*string]
	// If `true`, channel is private (enabled for playback authorization).
	Authorized pulumix.Input[*bool]
	// Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
	IngestEndpoint pulumix.Input[*string]
	// Channel latency mode. Valid values: `NORMAL`, `LOW`.
	LatencyMode pulumix.Input[*string]
	// Channel name.
	Name pulumix.Input[*string]
	// Channel playback URL.
	PlaybackUrl pulumix.Input[*string]
	// Recording configuration ARN.
	RecordingConfigurationArn pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
	Type pulumix.Input[*string]
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// If `true`, channel is private (enabled for playback authorization).
	Authorized *bool `pulumi:"authorized"`
	// Channel latency mode. Valid values: `NORMAL`, `LOW`.
	LatencyMode *string `pulumi:"latencyMode"`
	// Channel name.
	Name *string `pulumi:"name"`
	// Recording configuration ARN.
	RecordingConfigurationArn *string `pulumi:"recordingConfigurationArn"`
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// If `true`, channel is private (enabled for playback authorization).
	Authorized pulumix.Input[*bool]
	// Channel latency mode. Valid values: `NORMAL`, `LOW`.
	LatencyMode pulumix.Input[*string]
	// Channel name.
	Name pulumix.Input[*string]
	// Recording configuration ARN.
	RecordingConfigurationArn pulumix.Input[*string]
	// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
	Type pulumix.Input[*string]
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) ToOutput(ctx context.Context) pulumix.Output[Channel] {
	return pulumix.Output[Channel]{
		OutputState: o.OutputState,
	}
}

// ARN of the Channel.
func (o ChannelOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If `true`, channel is private (enabled for playback authorization).
func (o ChannelOutput) Authorized() pulumix.Output[bool] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[bool] { return v.Authorized })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Channel ingest endpoint, part of the definition of an ingest server, used when setting up streaming software.
func (o ChannelOutput) IngestEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.IngestEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Channel latency mode. Valid values: `NORMAL`, `LOW`.
func (o ChannelOutput) LatencyMode() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.LatencyMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Channel name.
func (o ChannelOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Channel playback URL.
func (o ChannelOutput) PlaybackUrl() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.PlaybackUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Recording configuration ARN.
func (o ChannelOutput) RecordingConfigurationArn() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.RecordingConfigurationArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ChannelOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ChannelOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Channel type, which determines the allowable resolution and bitrate. Valid values: `STANDARD`, `BASIC`.
func (o ChannelOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Channel](o, func(v Channel) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ChannelOutput{})
}
