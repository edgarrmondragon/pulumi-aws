// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a directory's multi-factor authentication (MFA) using a Remote Authentication Dial In User Service (RADIUS) server.
type RadiusSettings struct {
	pulumi.CustomResourceState

	// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
	AuthenticationProtocol pulumix.Output[string] `pulumi:"authenticationProtocol"`
	// The identifier of the directory for which you want to manager RADIUS settings.
	DirectoryId pulumix.Output[string] `pulumi:"directoryId"`
	// Display label.
	DisplayLabel pulumix.Output[string] `pulumi:"displayLabel"`
	// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
	RadiusPort pulumix.Output[int] `pulumi:"radiusPort"`
	// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
	RadiusRetries pulumix.Output[int] `pulumi:"radiusRetries"`
	// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers pulumix.ArrayOutput[string] `pulumi:"radiusServers"`
	// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
	RadiusTimeout pulumix.Output[int] `pulumi:"radiusTimeout"`
	// Required for enabling RADIUS on the directory.
	SharedSecret pulumix.Output[string] `pulumi:"sharedSecret"`
	// Not currently used.
	UseSameUsername pulumix.Output[*bool] `pulumi:"useSameUsername"`
}

// NewRadiusSettings registers a new resource with the given unique name, arguments, and options.
func NewRadiusSettings(ctx *pulumi.Context,
	name string, args *RadiusSettingsArgs, opts ...pulumi.ResourceOption) (*RadiusSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationProtocol == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationProtocol'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.DisplayLabel == nil {
		return nil, errors.New("invalid value for required argument 'DisplayLabel'")
	}
	if args.RadiusPort == nil {
		return nil, errors.New("invalid value for required argument 'RadiusPort'")
	}
	if args.RadiusRetries == nil {
		return nil, errors.New("invalid value for required argument 'RadiusRetries'")
	}
	if args.RadiusServers == nil {
		return nil, errors.New("invalid value for required argument 'RadiusServers'")
	}
	if args.RadiusTimeout == nil {
		return nil, errors.New("invalid value for required argument 'RadiusTimeout'")
	}
	if args.SharedSecret == nil {
		return nil, errors.New("invalid value for required argument 'SharedSecret'")
	}
	if args.SharedSecret != nil {
		untypedSecretValue := pulumi.ToSecret(args.SharedSecret.ToOutput(ctx.Context()).Untyped())
		args.SharedSecret = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RadiusSettings
	err := ctx.RegisterResource("aws:directoryservice/radiusSettings:RadiusSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRadiusSettings gets an existing RadiusSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRadiusSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RadiusSettingsState, opts ...pulumi.ResourceOption) (*RadiusSettings, error) {
	var resource RadiusSettings
	err := ctx.ReadResource("aws:directoryservice/radiusSettings:RadiusSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RadiusSettings resources.
type radiusSettingsState struct {
	// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
	AuthenticationProtocol *string `pulumi:"authenticationProtocol"`
	// The identifier of the directory for which you want to manager RADIUS settings.
	DirectoryId *string `pulumi:"directoryId"`
	// Display label.
	DisplayLabel *string `pulumi:"displayLabel"`
	// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
	RadiusPort *int `pulumi:"radiusPort"`
	// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
	RadiusRetries *int `pulumi:"radiusRetries"`
	// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers []string `pulumi:"radiusServers"`
	// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
	RadiusTimeout *int `pulumi:"radiusTimeout"`
	// Required for enabling RADIUS on the directory.
	SharedSecret *string `pulumi:"sharedSecret"`
	// Not currently used.
	UseSameUsername *bool `pulumi:"useSameUsername"`
}

type RadiusSettingsState struct {
	// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
	AuthenticationProtocol pulumix.Input[*string]
	// The identifier of the directory for which you want to manager RADIUS settings.
	DirectoryId pulumix.Input[*string]
	// Display label.
	DisplayLabel pulumix.Input[*string]
	// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
	RadiusPort pulumix.Input[*int]
	// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
	RadiusRetries pulumix.Input[*int]
	// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers pulumix.Input[[]string]
	// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
	RadiusTimeout pulumix.Input[*int]
	// Required for enabling RADIUS on the directory.
	SharedSecret pulumix.Input[*string]
	// Not currently used.
	UseSameUsername pulumix.Input[*bool]
}

func (RadiusSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*radiusSettingsState)(nil)).Elem()
}

type radiusSettingsArgs struct {
	// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
	AuthenticationProtocol string `pulumi:"authenticationProtocol"`
	// The identifier of the directory for which you want to manager RADIUS settings.
	DirectoryId string `pulumi:"directoryId"`
	// Display label.
	DisplayLabel string `pulumi:"displayLabel"`
	// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
	RadiusPort int `pulumi:"radiusPort"`
	// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
	RadiusRetries int `pulumi:"radiusRetries"`
	// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers []string `pulumi:"radiusServers"`
	// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
	RadiusTimeout int `pulumi:"radiusTimeout"`
	// Required for enabling RADIUS on the directory.
	SharedSecret string `pulumi:"sharedSecret"`
	// Not currently used.
	UseSameUsername *bool `pulumi:"useSameUsername"`
}

// The set of arguments for constructing a RadiusSettings resource.
type RadiusSettingsArgs struct {
	// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
	AuthenticationProtocol pulumix.Input[string]
	// The identifier of the directory for which you want to manager RADIUS settings.
	DirectoryId pulumix.Input[string]
	// Display label.
	DisplayLabel pulumix.Input[string]
	// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
	RadiusPort pulumix.Input[int]
	// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
	RadiusRetries pulumix.Input[int]
	// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
	RadiusServers pulumix.Input[[]string]
	// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
	RadiusTimeout pulumix.Input[int]
	// Required for enabling RADIUS on the directory.
	SharedSecret pulumix.Input[string]
	// Not currently used.
	UseSameUsername pulumix.Input[*bool]
}

func (RadiusSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*radiusSettingsArgs)(nil)).Elem()
}

type RadiusSettingsOutput struct{ *pulumi.OutputState }

func (RadiusSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusSettings)(nil)).Elem()
}

func (o RadiusSettingsOutput) ToRadiusSettingsOutput() RadiusSettingsOutput {
	return o
}

func (o RadiusSettingsOutput) ToRadiusSettingsOutputWithContext(ctx context.Context) RadiusSettingsOutput {
	return o
}

func (o RadiusSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[RadiusSettings] {
	return pulumix.Output[RadiusSettings]{
		OutputState: o.OutputState,
	}
}

// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
func (o RadiusSettingsOutput) AuthenticationProtocol() pulumix.Output[string] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[string] { return v.AuthenticationProtocol })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The identifier of the directory for which you want to manager RADIUS settings.
func (o RadiusSettingsOutput) DirectoryId() pulumix.Output[string] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[string] { return v.DirectoryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Display label.
func (o RadiusSettingsOutput) DisplayLabel() pulumix.Output[string] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[string] { return v.DisplayLabel })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
func (o RadiusSettingsOutput) RadiusPort() pulumix.Output[int] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[int] { return v.RadiusPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
func (o RadiusSettingsOutput) RadiusRetries() pulumix.Output[int] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[int] { return v.RadiusRetries })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
func (o RadiusSettingsOutput) RadiusServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.ArrayOutput[string] { return v.RadiusServers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
func (o RadiusSettingsOutput) RadiusTimeout() pulumix.Output[int] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[int] { return v.RadiusTimeout })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Required for enabling RADIUS on the directory.
func (o RadiusSettingsOutput) SharedSecret() pulumix.Output[string] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[string] { return v.SharedSecret })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Not currently used.
func (o RadiusSettingsOutput) UseSameUsername() pulumix.Output[*bool] {
	value := pulumix.Apply[RadiusSettings](o, func(v RadiusSettings) pulumix.Output[*bool] { return v.UseSameUsername })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(RadiusSettingsOutput{})
}
