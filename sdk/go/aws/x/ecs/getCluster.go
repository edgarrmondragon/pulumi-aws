// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECS Cluster data source allows access to details of a specific
// cluster within an AWS ECS service.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws:ecs/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Name of the ECS Cluster
	ClusterName string `pulumi:"clusterName"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// ARN of the ECS Cluster
	Arn         string `pulumi:"arn"`
	ClusterName string `pulumi:"clusterName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Number of pending tasks for the ECS Cluster
	PendingTasksCount int `pulumi:"pendingTasksCount"`
	// The number of registered container instances for the ECS Cluster
	RegisteredContainerInstancesCount int `pulumi:"registeredContainerInstancesCount"`
	// Number of running tasks for the ECS Cluster
	RunningTasksCount int `pulumi:"runningTasksCount"`
	// The default Service Connect namespace
	ServiceConnectDefaults []GetClusterServiceConnectDefault `pulumi:"serviceConnectDefaults"`
	// Settings associated with the ECS Cluster
	Settings []GetClusterSetting `pulumi:"settings"`
	// Status of the ECS Cluster
	Status string `pulumi:"status"`
	// Key-value map of resource tags
	Tags map[string]string `pulumi:"tags"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterArgs](args.ToOutput(), func(plainArgs *LookupClusterArgs) (*LookupClusterResult, error) {
		return LookupCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterResultOutput, *LookupClusterResult](outputResult)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Name of the ECS Cluster
	ClusterName pulumix.Input[string] `pulumi:"clusterName"`
	// Key-value map of resource tags
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupClusterOutputArgs) ToOutput() pulumix.Output[*LookupClusterArgs] {
	allArgs := pulumix.All(
		args.ClusterName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterArgs {
		return &LookupClusterArgs{
			ClusterName: resolvedArgs[0].(string),
			Tags:        resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterResult] {
	return pulumix.Output[*LookupClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Arn })
}

func (o LookupClusterResultOutput) ClusterName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ClusterName })
}

func (o LookupClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Id })
}

func (o LookupClusterResultOutput) PendingTasksCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.PendingTasksCount })
}

func (o LookupClusterResultOutput) RegisteredContainerInstancesCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.RegisteredContainerInstancesCount })
}

func (o LookupClusterResultOutput) RunningTasksCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.RunningTasksCount })
}

func (o LookupClusterResultOutput) ServiceConnectDefaults() pulumix.GArrayOutput[GetClusterServiceConnectDefault, GetClusterServiceConnectDefaultOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterServiceConnectDefault { return v.ServiceConnectDefaults })
	return pulumix.GArrayOutput[GetClusterServiceConnectDefault, GetClusterServiceConnectDefaultOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Settings() pulumix.GArrayOutput[GetClusterSetting, GetClusterSettingOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterSetting { return v.Settings })
	return pulumix.GArrayOutput[GetClusterSetting, GetClusterSettingOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Status })
}

func (o LookupClusterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
