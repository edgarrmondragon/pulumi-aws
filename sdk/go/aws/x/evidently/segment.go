// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Evidently Segment resource.
type Segment struct {
	pulumi.CustomResourceState

	// The ARN of the segment.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The date and time that the segment is created.
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Specifies the description of the segment.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
	ExperimentCount pulumix.Output[int] `pulumi:"experimentCount"`
	// The date and time that this segment was most recently updated.
	LastUpdatedTime pulumix.Output[string] `pulumi:"lastUpdatedTime"`
	// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
	LaunchCount pulumix.Output[int] `pulumi:"launchCount"`
	// A name for the segment.
	Name pulumix.Output[string] `pulumi:"name"`
	// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
	Pattern pulumix.Output[string] `pulumi:"pattern"`
	// Tags to apply to the segment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSegment registers a new resource with the given unique name, arguments, and options.
func NewSegment(ctx *pulumi.Context,
	name string, args *SegmentArgs, opts ...pulumi.ResourceOption) (*Segment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Pattern == nil {
		return nil, errors.New("invalid value for required argument 'Pattern'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Segment
	err := ctx.RegisterResource("aws:evidently/segment:Segment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegment gets an existing Segment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentState, opts ...pulumi.ResourceOption) (*Segment, error) {
	var resource Segment
	err := ctx.ReadResource("aws:evidently/segment:Segment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Segment resources.
type segmentState struct {
	// The ARN of the segment.
	Arn *string `pulumi:"arn"`
	// The date and time that the segment is created.
	CreatedTime *string `pulumi:"createdTime"`
	// Specifies the description of the segment.
	Description *string `pulumi:"description"`
	// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
	ExperimentCount *int `pulumi:"experimentCount"`
	// The date and time that this segment was most recently updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
	LaunchCount *int `pulumi:"launchCount"`
	// A name for the segment.
	Name *string `pulumi:"name"`
	// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
	Pattern *string `pulumi:"pattern"`
	// Tags to apply to the segment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SegmentState struct {
	// The ARN of the segment.
	Arn pulumix.Input[*string]
	// The date and time that the segment is created.
	CreatedTime pulumix.Input[*string]
	// Specifies the description of the segment.
	Description pulumix.Input[*string]
	// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
	ExperimentCount pulumix.Input[*int]
	// The date and time that this segment was most recently updated.
	LastUpdatedTime pulumix.Input[*string]
	// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
	LaunchCount pulumix.Input[*int]
	// A name for the segment.
	Name pulumix.Input[*string]
	// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
	Pattern pulumix.Input[*string]
	// Tags to apply to the segment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (SegmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentState)(nil)).Elem()
}

type segmentArgs struct {
	// Specifies the description of the segment.
	Description *string `pulumi:"description"`
	// A name for the segment.
	Name *string `pulumi:"name"`
	// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
	Pattern string `pulumi:"pattern"`
	// Tags to apply to the segment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Segment resource.
type SegmentArgs struct {
	// Specifies the description of the segment.
	Description pulumix.Input[*string]
	// A name for the segment.
	Name pulumix.Input[*string]
	// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
	Pattern pulumix.Input[string]
	// Tags to apply to the segment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentArgs)(nil)).Elem()
}

type SegmentOutput struct{ *pulumi.OutputState }

func (SegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Segment)(nil)).Elem()
}

func (o SegmentOutput) ToSegmentOutput() SegmentOutput {
	return o
}

func (o SegmentOutput) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return o
}

func (o SegmentOutput) ToOutput(ctx context.Context) pulumix.Output[Segment] {
	return pulumix.Output[Segment]{
		OutputState: o.OutputState,
	}
}

// The ARN of the segment.
func (o SegmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time that the segment is created.
func (o SegmentOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the description of the segment.
func (o SegmentOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
func (o SegmentOutput) ExperimentCount() pulumix.Output[int] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[int] { return v.ExperimentCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The date and time that this segment was most recently updated.
func (o SegmentOutput) LastUpdatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[string] { return v.LastUpdatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
func (o SegmentOutput) LaunchCount() pulumix.Output[int] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[int] { return v.LaunchCount })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A name for the segment.
func (o SegmentOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
func (o SegmentOutput) Pattern() pulumix.Output[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.Output[string] { return v.Pattern })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the segment. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SegmentOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SegmentOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Segment](o, func(v Segment) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SegmentOutput{})
}
