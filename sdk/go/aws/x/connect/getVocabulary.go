// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Amazon Connect Vocabulary.
func LookupVocabulary(ctx *pulumi.Context, args *LookupVocabularyArgs, opts ...pulumi.InvokeOption) (*LookupVocabularyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVocabularyResult
	err := ctx.Invoke("aws:connect/getVocabulary:getVocabulary", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVocabulary.
type LookupVocabularyArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId string `pulumi:"instanceId"`
	// Returns information on a specific Vocabulary by name
	Name *string `pulumi:"name"`
	// A map of tags to assign to the Vocabulary.
	Tags map[string]string `pulumi:"tags"`
	// Returns information on a specific Vocabulary by Vocabulary id
	VocabularyId *string `pulumi:"vocabularyId"`
}

// A collection of values returned by getVocabulary.
type LookupVocabularyResult struct {
	// The Amazon Resource Name (ARN) of the Vocabulary.
	Arn string `pulumi:"arn"`
	// The content of the custom vocabulary in plain-text format with a table of values. Each row in the table represents a word or a phrase, described with Phrase, IPA, SoundsLike, and DisplayAs fields. Separate the fields with TAB characters. For more information, see [Create a custom vocabulary using a table](https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html#create-vocabulary-table).
	Content string `pulumi:"content"`
	// The reason why the custom vocabulary was not created.
	FailureReason string `pulumi:"failureReason"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see [What is Amazon Transcribe?](https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html). Valid Values are `ar-AE`, `de-CH`, `de-DE`, `en-AB`, `en-AU`, `en-GB`, `en-IE`, `en-IN`, `en-US`, `en-WL`, `es-ES`, `es-US`, `fr-CA`, `fr-FR`, `hi-IN`, `it-IT`, `ja-JP`, `ko-KR`, `pt-BR`, `pt-PT`, `zh-CN`.
	LanguageCode string `pulumi:"languageCode"`
	// The timestamp when the custom vocabulary was last modified.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	Name             string `pulumi:"name"`
	// The current state of the custom vocabulary. Valid values are `CREATION_IN_PROGRESS`, `ACTIVE`, `CREATION_FAILED`, `DELETE_IN_PROGRESS`.
	State string `pulumi:"state"`
	// A map of tags to assign to the Vocabulary.
	Tags map[string]string `pulumi:"tags"`
	// The identifier of the custom vocabulary.
	VocabularyId string `pulumi:"vocabularyId"`
}

func LookupVocabularyOutput(ctx *pulumi.Context, args LookupVocabularyOutputArgs, opts ...pulumi.InvokeOption) LookupVocabularyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVocabularyArgs](args.ToOutput(), func(plainArgs *LookupVocabularyArgs) (*LookupVocabularyResult, error) {
		return LookupVocabulary(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVocabularyResultOutput, *LookupVocabularyResult](outputResult)
}

// A collection of arguments for invoking getVocabulary.
type LookupVocabularyOutputArgs struct {
	// Reference to the hosting Amazon Connect Instance
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Returns information on a specific Vocabulary by name
	Name pulumix.Input[*string] `pulumi:"name"`
	// A map of tags to assign to the Vocabulary.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// Returns information on a specific Vocabulary by Vocabulary id
	VocabularyId pulumix.Input[*string] `pulumi:"vocabularyId"`
}

func (args LookupVocabularyOutputArgs) ToOutput() pulumix.Output[*LookupVocabularyArgs] {
	allArgs := pulumix.All(
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VocabularyId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVocabularyArgs {
		return &LookupVocabularyArgs{
			InstanceId:   resolvedArgs[0].(string),
			Name:         resolvedArgs[1].(*string),
			Tags:         resolvedArgs[2].(map[string]string),
			VocabularyId: resolvedArgs[3].(*string),
		}
	})
}

type LookupVocabularyResultOutput struct{ *pulumi.OutputState }

func (LookupVocabularyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVocabularyResult)(nil)).Elem()
}

func (o LookupVocabularyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVocabularyResult] {
	return pulumix.Output[*LookupVocabularyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVocabularyResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.Arn })
}

func (o LookupVocabularyResultOutput) Content() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.Content })
}

func (o LookupVocabularyResultOutput) FailureReason() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.FailureReason })
}

func (o LookupVocabularyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.Id })
}

func (o LookupVocabularyResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.InstanceId })
}

func (o LookupVocabularyResultOutput) LanguageCode() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.LanguageCode })
}

func (o LookupVocabularyResultOutput) LastModifiedTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.LastModifiedTime })
}

func (o LookupVocabularyResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.Name })
}

func (o LookupVocabularyResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.State })
}

func (o LookupVocabularyResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVocabularyResultOutput) VocabularyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVocabularyResult](o, func(v *LookupVocabularyResult) string { return v.VocabularyId })
}
