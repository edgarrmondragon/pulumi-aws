// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get a list of AWS accounts that are designated as delegated administrators in this organization
func GetDelegatedAdministrators(ctx *pulumi.Context, args *GetDelegatedAdministratorsArgs, opts ...pulumi.InvokeOption) (*GetDelegatedAdministratorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDelegatedAdministratorsResult
	err := ctx.Invoke("aws:organizations/getDelegatedAdministrators:getDelegatedAdministrators", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDelegatedAdministrators.
type GetDelegatedAdministratorsArgs struct {
	// Specifies a service principal name. If specified, then the operation lists the delegated administrators only for the specified service. If you don't specify a service principal, the operation lists all delegated administrators for all services in your organization.
	ServicePrincipal *string `pulumi:"servicePrincipal"`
}

// A collection of values returned by getDelegatedAdministrators.
type GetDelegatedAdministratorsResult struct {
	// The list of delegated administrators in your organization, which have the following attributes:
	DelegatedAdministrators []GetDelegatedAdministratorsDelegatedAdministrator `pulumi:"delegatedAdministrators"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ServicePrincipal *string `pulumi:"servicePrincipal"`
}

func GetDelegatedAdministratorsOutput(ctx *pulumi.Context, args GetDelegatedAdministratorsOutputArgs, opts ...pulumi.InvokeOption) GetDelegatedAdministratorsResultOutput {
	outputResult := pulumix.ApplyErr[*GetDelegatedAdministratorsArgs](args.ToOutput(), func(plainArgs *GetDelegatedAdministratorsArgs) (*GetDelegatedAdministratorsResult, error) {
		return GetDelegatedAdministrators(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetDelegatedAdministratorsResultOutput, *GetDelegatedAdministratorsResult](outputResult)
}

// A collection of arguments for invoking getDelegatedAdministrators.
type GetDelegatedAdministratorsOutputArgs struct {
	// Specifies a service principal name. If specified, then the operation lists the delegated administrators only for the specified service. If you don't specify a service principal, the operation lists all delegated administrators for all services in your organization.
	ServicePrincipal pulumix.Input[*string] `pulumi:"servicePrincipal"`
}

func (args GetDelegatedAdministratorsOutputArgs) ToOutput() pulumix.Output[*GetDelegatedAdministratorsArgs] {
	allArgs := pulumix.All(
		args.ServicePrincipal.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetDelegatedAdministratorsArgs {
		return &GetDelegatedAdministratorsArgs{
			ServicePrincipal: resolvedArgs[0].(*string),
		}
	})
}

type GetDelegatedAdministratorsResultOutput struct{ *pulumi.OutputState }

func (GetDelegatedAdministratorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegatedAdministratorsResult)(nil)).Elem()
}

func (o GetDelegatedAdministratorsResultOutput) ToOutput(context.Context) pulumix.Output[*GetDelegatedAdministratorsResult] {
	return pulumix.Output[*GetDelegatedAdministratorsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetDelegatedAdministratorsResultOutput) DelegatedAdministrators() pulumix.GArrayOutput[GetDelegatedAdministratorsDelegatedAdministrator, GetDelegatedAdministratorsDelegatedAdministratorOutput] {
	value := pulumix.Apply[*GetDelegatedAdministratorsResult](o, func(v *GetDelegatedAdministratorsResult) []GetDelegatedAdministratorsDelegatedAdministrator {
		return v.DelegatedAdministrators
	})
	return pulumix.GArrayOutput[GetDelegatedAdministratorsDelegatedAdministrator, GetDelegatedAdministratorsDelegatedAdministratorOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetDelegatedAdministratorsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetDelegatedAdministratorsResult](o, func(v *GetDelegatedAdministratorsResult) string { return v.Id })
}

func (o GetDelegatedAdministratorsResultOutput) ServicePrincipal() pulumix.Output[*string] {
	return pulumix.Apply[*GetDelegatedAdministratorsResult](o, func(v *GetDelegatedAdministratorsResult) *string { return v.ServicePrincipal })
}
