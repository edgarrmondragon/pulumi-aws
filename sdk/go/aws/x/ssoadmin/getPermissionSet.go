// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssoadmin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get a Single Sign-On (SSO) Permission Set.
func LookupPermissionSet(ctx *pulumi.Context, args *LookupPermissionSetArgs, opts ...pulumi.InvokeOption) (*LookupPermissionSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPermissionSetResult
	err := ctx.Invoke("aws:ssoadmin/getPermissionSet:getPermissionSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPermissionSet.
type LookupPermissionSetArgs struct {
	// ARN of the permission set.
	Arn *string `pulumi:"arn"`
	// ARN of the SSO Instance associated with the permission set.
	InstanceArn string `pulumi:"instanceArn"`
	// Name of the SSO Permission Set.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPermissionSet.
type LookupPermissionSetResult struct {
	Arn         string `pulumi:"arn"`
	CreatedDate string `pulumi:"createdDate"`
	// Description of the Permission Set.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	InstanceArn string `pulumi:"instanceArn"`
	Name        string `pulumi:"name"`
	// Relay state URL used to redirect users within the application during the federation authentication process.
	RelayState string `pulumi:"relayState"`
	// Length of time that the application user sessions are valid in the ISO-8601 standard.
	SessionDuration string `pulumi:"sessionDuration"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

func LookupPermissionSetOutput(ctx *pulumi.Context, args LookupPermissionSetOutputArgs, opts ...pulumi.InvokeOption) LookupPermissionSetResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPermissionSetArgs](args.ToOutput(), func(plainArgs *LookupPermissionSetArgs) (*LookupPermissionSetResult, error) {
		return LookupPermissionSet(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPermissionSetResultOutput, *LookupPermissionSetResult](outputResult)
}

// A collection of arguments for invoking getPermissionSet.
type LookupPermissionSetOutputArgs struct {
	// ARN of the permission set.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// ARN of the SSO Instance associated with the permission set.
	InstanceArn pulumix.Input[string] `pulumi:"instanceArn"`
	// Name of the SSO Permission Set.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Key-value map of resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupPermissionSetOutputArgs) ToOutput() pulumix.Output[*LookupPermissionSetArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.InstanceArn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPermissionSetArgs {
		return &LookupPermissionSetArgs{
			Arn:         resolvedArgs[0].(*string),
			InstanceArn: resolvedArgs[1].(string),
			Name:        resolvedArgs[2].(*string),
			Tags:        resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupPermissionSetResultOutput struct{ *pulumi.OutputState }

func (LookupPermissionSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionSetResult)(nil)).Elem()
}

func (o LookupPermissionSetResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPermissionSetResult] {
	return pulumix.Output[*LookupPermissionSetResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPermissionSetResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.Arn })
}

func (o LookupPermissionSetResultOutput) CreatedDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.CreatedDate })
}

func (o LookupPermissionSetResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.Description })
}

func (o LookupPermissionSetResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.Id })
}

func (o LookupPermissionSetResultOutput) InstanceArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.InstanceArn })
}

func (o LookupPermissionSetResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.Name })
}

func (o LookupPermissionSetResultOutput) RelayState() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.RelayState })
}

func (o LookupPermissionSetResultOutput) SessionDuration() pulumix.Output[string] {
	return pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) string { return v.SessionDuration })
}

func (o LookupPermissionSetResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupPermissionSetResult](o, func(v *LookupPermissionSetResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
