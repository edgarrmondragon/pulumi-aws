// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.Subnet` provides details about a specific VPC subnet.
//
// This resource can prove useful when a module accepts a subnet ID as an input variable and needs to, for example, determine the ID of the VPC that the subnet belongs to.
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("aws:ec2/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// Availability zone where the subnet must reside.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ID of the Availability Zone for the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// CIDR block of the desired subnet.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Whether the desired subnet must be the default subnet for its associated availability zone.
	DefaultForAz *bool `pulumi:"defaultForAz"`
	// Configuration block. Detailed below.
	Filters []GetSubnetFilter `pulumi:"filters"`
	// ID of the specific subnet to retrieve.
	Id *string `pulumi:"id"`
	// IPv6 CIDR block of the desired subnet.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// State that the desired subnet must have.
	State *string `pulumi:"state"`
	// Map of tags, each pair of which must exactly match a pair on the desired subnet.
	Tags map[string]string `pulumi:"tags"`
	// ID of the VPC that the desired subnet belongs to.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	// ARN of the subnet.
	Arn string `pulumi:"arn"`
	// Whether an IPv6 address is assigned on creation.
	AssignIpv6AddressOnCreation bool   `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone            string `pulumi:"availabilityZone"`
	AvailabilityZoneId          string `pulumi:"availabilityZoneId"`
	// Available IP addresses of the subnet.
	AvailableIpAddressCount int    `pulumi:"availableIpAddressCount"`
	CidrBlock               string `pulumi:"cidrBlock"`
	// Identifier of customer owned IPv4 address pool.
	CustomerOwnedIpv4Pool string `pulumi:"customerOwnedIpv4Pool"`
	DefaultForAz          bool   `pulumi:"defaultForAz"`
	// Whether DNS queries made to the Amazon-provided DNS Resolver in this subnet return synthetic IPv6 addresses for IPv4-only destinations.
	EnableDns64 bool `pulumi:"enableDns64"`
	// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
	EnableLniAtDeviceIndex int `pulumi:"enableLniAtDeviceIndex"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
	EnableResourceNameDnsARecordOnLaunch bool `pulumi:"enableResourceNameDnsARecordOnLaunch"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
	EnableResourceNameDnsAaaaRecordOnLaunch bool              `pulumi:"enableResourceNameDnsAaaaRecordOnLaunch"`
	Filters                                 []GetSubnetFilter `pulumi:"filters"`
	Id                                      string            `pulumi:"id"`
	Ipv6CidrBlock                           string            `pulumi:"ipv6CidrBlock"`
	// Association ID of the IPv6 CIDR block.
	Ipv6CidrBlockAssociationId string `pulumi:"ipv6CidrBlockAssociationId"`
	// Whether this is an IPv6-only subnet.
	Ipv6Native bool `pulumi:"ipv6Native"`
	// Whether customer owned IP addresses are assigned on network interface creation.
	MapCustomerOwnedIpOnLaunch bool `pulumi:"mapCustomerOwnedIpOnLaunch"`
	// Whether public IP addresses are assigned on instance launch.
	MapPublicIpOnLaunch bool `pulumi:"mapPublicIpOnLaunch"`
	// ARN of the Outpost.
	OutpostArn string `pulumi:"outpostArn"`
	// ID of the AWS account that owns the subnet.
	OwnerId string `pulumi:"ownerId"`
	// The type of hostnames assigned to instances in the subnet at launch.
	PrivateDnsHostnameTypeOnLaunch string            `pulumi:"privateDnsHostnameTypeOnLaunch"`
	State                          string            `pulumi:"state"`
	Tags                           map[string]string `pulumi:"tags"`
	VpcId                          string            `pulumi:"vpcId"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSubnetArgs](args.ToOutput(), func(plainArgs *LookupSubnetArgs) (*LookupSubnetResult, error) {
		return LookupSubnet(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSubnetResultOutput, *LookupSubnetResult](outputResult)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	// Availability zone where the subnet must reside.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	// ID of the Availability Zone for the subnet. This argument is not supported in all regions or partitions. If necessary, use `availabilityZone` instead.
	AvailabilityZoneId pulumix.Input[*string] `pulumi:"availabilityZoneId"`
	// CIDR block of the desired subnet.
	CidrBlock pulumix.Input[*string] `pulumi:"cidrBlock"`
	// Whether the desired subnet must be the default subnet for its associated availability zone.
	DefaultForAz pulumix.Input[*bool] `pulumi:"defaultForAz"`
	// Configuration block. Detailed below.
	Filters pulumix.Input[[]*GetSubnetFilterArgs] `pulumi:"filters"`
	// ID of the specific subnet to retrieve.
	Id pulumix.Input[*string] `pulumi:"id"`
	// IPv6 CIDR block of the desired subnet.
	Ipv6CidrBlock pulumix.Input[*string] `pulumi:"ipv6CidrBlock"`
	// State that the desired subnet must have.
	State pulumix.Input[*string] `pulumi:"state"`
	// Map of tags, each pair of which must exactly match a pair on the desired subnet.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// ID of the VPC that the desired subnet belongs to.
	VpcId pulumix.Input[*string] `pulumi:"vpcId"`
}

func (args LookupSubnetOutputArgs) ToOutput() pulumix.Output[*LookupSubnetArgs] {
	allArgs := pulumix.All(
		args.AvailabilityZone.ToOutput(context.Background()).AsAny(),
		args.AvailabilityZoneId.ToOutput(context.Background()).AsAny(),
		args.CidrBlock.ToOutput(context.Background()).AsAny(),
		args.DefaultForAz.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Ipv6CidrBlock.ToOutput(context.Background()).AsAny(),
		args.State.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny(),
		args.VpcId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSubnetArgs {
		return &LookupSubnetArgs{
			AvailabilityZone:   resolvedArgs[0].(*string),
			AvailabilityZoneId: resolvedArgs[1].(*string),
			CidrBlock:          resolvedArgs[2].(*string),
			DefaultForAz:       resolvedArgs[3].(*bool),
			Filters:            resolvedArgs[4].([]GetSubnetFilter),
			Id:                 resolvedArgs[5].(*string),
			Ipv6CidrBlock:      resolvedArgs[6].(*string),
			State:              resolvedArgs[7].(*string),
			Tags:               resolvedArgs[8].(map[string]string),
			VpcId:              resolvedArgs[9].(*string),
		}
	})
}

type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSubnetResult] {
	return pulumix.Output[*LookupSubnetResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSubnetResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.Arn })
}

func (o LookupSubnetResultOutput) AssignIpv6AddressOnCreation() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.AssignIpv6AddressOnCreation })
}

func (o LookupSubnetResultOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.AvailabilityZone })
}

func (o LookupSubnetResultOutput) AvailabilityZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.AvailabilityZoneId })
}

func (o LookupSubnetResultOutput) AvailableIpAddressCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) int { return v.AvailableIpAddressCount })
}

func (o LookupSubnetResultOutput) CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.CidrBlock })
}

func (o LookupSubnetResultOutput) CustomerOwnedIpv4Pool() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.CustomerOwnedIpv4Pool })
}

func (o LookupSubnetResultOutput) DefaultForAz() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.DefaultForAz })
}

func (o LookupSubnetResultOutput) EnableDns64() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.EnableDns64 })
}

func (o LookupSubnetResultOutput) EnableLniAtDeviceIndex() pulumix.Output[int] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) int { return v.EnableLniAtDeviceIndex })
}

func (o LookupSubnetResultOutput) EnableResourceNameDnsARecordOnLaunch() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.EnableResourceNameDnsARecordOnLaunch })
}

func (o LookupSubnetResultOutput) EnableResourceNameDnsAaaaRecordOnLaunch() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.EnableResourceNameDnsAaaaRecordOnLaunch })
}

func (o LookupSubnetResultOutput) Filters() pulumix.GArrayOutput[GetSubnetFilter, GetSubnetFilterOutput] {
	value := pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) []GetSubnetFilter { return v.Filters })
	return pulumix.GArrayOutput[GetSubnetFilter, GetSubnetFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSubnetResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.Id })
}

func (o LookupSubnetResultOutput) Ipv6CidrBlock() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.Ipv6CidrBlock })
}

func (o LookupSubnetResultOutput) Ipv6CidrBlockAssociationId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.Ipv6CidrBlockAssociationId })
}

func (o LookupSubnetResultOutput) Ipv6Native() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.Ipv6Native })
}

func (o LookupSubnetResultOutput) MapCustomerOwnedIpOnLaunch() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.MapCustomerOwnedIpOnLaunch })
}

func (o LookupSubnetResultOutput) MapPublicIpOnLaunch() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) bool { return v.MapPublicIpOnLaunch })
}

func (o LookupSubnetResultOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.OutpostArn })
}

func (o LookupSubnetResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.OwnerId })
}

func (o LookupSubnetResultOutput) PrivateDnsHostnameTypeOnLaunch() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.PrivateDnsHostnameTypeOnLaunch })
}

func (o LookupSubnetResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.State })
}

func (o LookupSubnetResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSubnetResultOutput) VpcId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSubnetResult](o, func(v *LookupSubnetResult) string { return v.VpcId })
}
