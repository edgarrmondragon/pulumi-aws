// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create a Service Catalog Portfolio.
type Portfolio struct {
	pulumi.CustomResourceState

	Arn         pulumix.Output[string] `pulumi:"arn"`
	CreatedTime pulumix.Output[string] `pulumi:"createdTime"`
	// Description of the portfolio
	Description pulumix.Output[string] `pulumi:"description"`
	// The name of the portfolio.
	Name pulumix.Output[string] `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumix.Output[string] `pulumi:"providerName"`
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewPortfolio registers a new resource with the given unique name, arguments, and options.
func NewPortfolio(ctx *pulumi.Context,
	name string, args *PortfolioArgs, opts ...pulumi.ResourceOption) (*Portfolio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderName == nil {
		return nil, errors.New("invalid value for required argument 'ProviderName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Portfolio
	err := ctx.RegisterResource("aws:servicecatalog/portfolio:Portfolio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortfolio gets an existing Portfolio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortfolio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortfolioState, opts ...pulumi.ResourceOption) (*Portfolio, error) {
	var resource Portfolio
	err := ctx.ReadResource("aws:servicecatalog/portfolio:Portfolio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Portfolio resources.
type portfolioState struct {
	Arn         *string `pulumi:"arn"`
	CreatedTime *string `pulumi:"createdTime"`
	// Description of the portfolio
	Description *string `pulumi:"description"`
	// The name of the portfolio.
	Name *string `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName *string `pulumi:"providerName"`
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type PortfolioState struct {
	Arn         pulumix.Input[*string]
	CreatedTime pulumix.Input[*string]
	// Description of the portfolio
	Description pulumix.Input[*string]
	// The name of the portfolio.
	Name pulumix.Input[*string]
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumix.Input[*string]
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (PortfolioState) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioState)(nil)).Elem()
}

type portfolioArgs struct {
	// Description of the portfolio
	Description *string `pulumi:"description"`
	// The name of the portfolio.
	Name *string `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName string `pulumi:"providerName"`
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Portfolio resource.
type PortfolioArgs struct {
	// Description of the portfolio
	Description pulumix.Input[*string]
	// The name of the portfolio.
	Name pulumix.Input[*string]
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumix.Input[string]
	// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PortfolioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioArgs)(nil)).Elem()
}

type PortfolioOutput struct{ *pulumi.OutputState }

func (PortfolioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Portfolio)(nil)).Elem()
}

func (o PortfolioOutput) ToPortfolioOutput() PortfolioOutput {
	return o
}

func (o PortfolioOutput) ToPortfolioOutputWithContext(ctx context.Context) PortfolioOutput {
	return o
}

func (o PortfolioOutput) ToOutput(ctx context.Context) pulumix.Output[Portfolio] {
	return pulumix.Output[Portfolio]{
		OutputState: o.OutputState,
	}
}

func (o PortfolioOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o PortfolioOutput) CreatedTime() pulumix.Output[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.Output[string] { return v.CreatedTime })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the portfolio
func (o PortfolioOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the portfolio.
func (o PortfolioOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the person or organization who owns the portfolio.
func (o PortfolioOutput) ProviderName() pulumix.Output[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.Output[string] { return v.ProviderName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Tags to apply to the connection. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PortfolioOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PortfolioOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Portfolio](o, func(v Portfolio) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PortfolioOutput{})
}
