// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARNs and names of Image Builder Image Pipelines matching the specified criteria.
func GetImagePipelines(ctx *pulumi.Context, args *GetImagePipelinesArgs, opts ...pulumi.InvokeOption) (*GetImagePipelinesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImagePipelinesResult
	err := ctx.Invoke("aws:imagebuilder/getImagePipelines:getImagePipelines", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImagePipelines.
type GetImagePipelinesArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetImagePipelinesFilter `pulumi:"filters"`
}

// A collection of values returned by getImagePipelines.
type GetImagePipelinesResult struct {
	// Set of ARNs of the matched Image Builder Image Pipelines.
	Arns    []string                  `pulumi:"arns"`
	Filters []GetImagePipelinesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of names of the matched Image Builder Image Pipelines.
	Names []string `pulumi:"names"`
}

func GetImagePipelinesOutput(ctx *pulumi.Context, args GetImagePipelinesOutputArgs, opts ...pulumi.InvokeOption) GetImagePipelinesResultOutput {
	outputResult := pulumix.ApplyErr[*GetImagePipelinesArgs](args.ToOutput(), func(plainArgs *GetImagePipelinesArgs) (*GetImagePipelinesResult, error) {
		return GetImagePipelines(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetImagePipelinesResultOutput, *GetImagePipelinesResult](outputResult)
}

// A collection of arguments for invoking getImagePipelines.
type GetImagePipelinesOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetImagePipelinesFilterArgs] `pulumi:"filters"`
}

func (args GetImagePipelinesOutputArgs) ToOutput() pulumix.Output[*GetImagePipelinesArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetImagePipelinesArgs {
		return &GetImagePipelinesArgs{
			Filters: resolvedArgs[0].([]GetImagePipelinesFilter),
		}
	})
}

type GetImagePipelinesResultOutput struct{ *pulumi.OutputState }

func (GetImagePipelinesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagePipelinesResult)(nil)).Elem()
}

func (o GetImagePipelinesResultOutput) ToOutput(context.Context) pulumix.Output[*GetImagePipelinesResult] {
	return pulumix.Output[*GetImagePipelinesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetImagePipelinesResultOutput) Arns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetImagePipelinesResult](o, func(v *GetImagePipelinesResult) []string { return v.Arns })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetImagePipelinesResultOutput) Filters() pulumix.GArrayOutput[GetImagePipelinesFilter, GetImagePipelinesFilterOutput] {
	value := pulumix.Apply[*GetImagePipelinesResult](o, func(v *GetImagePipelinesResult) []GetImagePipelinesFilter { return v.Filters })
	return pulumix.GArrayOutput[GetImagePipelinesFilter, GetImagePipelinesFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetImagePipelinesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetImagePipelinesResult](o, func(v *GetImagePipelinesResult) string { return v.Id })
}

func (o GetImagePipelinesResultOutput) Names() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetImagePipelinesResult](o, func(v *GetImagePipelinesResult) []string { return v.Names })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
