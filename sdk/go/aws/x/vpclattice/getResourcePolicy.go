// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS VPC Lattice Resource Policy.
func LookupResourcePolicy(ctx *pulumi.Context, args *LookupResourcePolicyArgs, opts ...pulumi.InvokeOption) (*LookupResourcePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourcePolicyResult
	err := ctx.Invoke("aws:vpclattice/getResourcePolicy:getResourcePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourcePolicy.
type LookupResourcePolicyArgs struct {
	// Resource ARN of the resource for which a policy is retrieved.
	ResourceArn string `pulumi:"resourceArn"`
}

// A collection of values returned by getResourcePolicy.
type LookupResourcePolicyResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// JSON-encoded string representation of the applied resource policy.
	Policy      string `pulumi:"policy"`
	ResourceArn string `pulumi:"resourceArn"`
}

func LookupResourcePolicyOutput(ctx *pulumi.Context, args LookupResourcePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupResourcePolicyResultOutput {
	outputResult := pulumix.ApplyErr[*LookupResourcePolicyArgs](args.ToOutput(), func(plainArgs *LookupResourcePolicyArgs) (*LookupResourcePolicyResult, error) {
		return LookupResourcePolicy(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResourcePolicyResultOutput, *LookupResourcePolicyResult](outputResult)
}

// A collection of arguments for invoking getResourcePolicy.
type LookupResourcePolicyOutputArgs struct {
	// Resource ARN of the resource for which a policy is retrieved.
	ResourceArn pulumix.Input[string] `pulumi:"resourceArn"`
}

func (args LookupResourcePolicyOutputArgs) ToOutput() pulumix.Output[*LookupResourcePolicyArgs] {
	allArgs := pulumix.All(
		args.ResourceArn.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupResourcePolicyArgs {
		return &LookupResourcePolicyArgs{
			ResourceArn: resolvedArgs[0].(string),
		}
	})
}

type LookupResourcePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupResourcePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourcePolicyResult)(nil)).Elem()
}

func (o LookupResourcePolicyResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResourcePolicyResult] {
	return pulumix.Output[*LookupResourcePolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResourcePolicyResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourcePolicyResult](o, func(v *LookupResourcePolicyResult) string { return v.Id })
}

func (o LookupResourcePolicyResultOutput) Policy() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourcePolicyResult](o, func(v *LookupResourcePolicyResult) string { return v.Policy })
}

func (o LookupResourcePolicyResultOutput) ResourceArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupResourcePolicyResult](o, func(v *LookupResourcePolicyResult) string { return v.ResourceArn })
}
