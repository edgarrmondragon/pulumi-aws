// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accessanalyzer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS AccessAnalyzer Archive Rule.
type ArchiveRule struct {
	pulumi.CustomResourceState

	// Analyzer name.
	AnalyzerName pulumix.Output[string] `pulumi:"analyzerName"`
	// Filter criteria for the archive rule. See Filter for more details.
	Filters pulumix.GArrayOutput[ArchiveRuleFilter, ArchiveRuleFilterOutput] `pulumi:"filters"`
	// Rule name.
	RuleName pulumix.Output[string] `pulumi:"ruleName"`
}

// NewArchiveRule registers a new resource with the given unique name, arguments, and options.
func NewArchiveRule(ctx *pulumi.Context,
	name string, args *ArchiveRuleArgs, opts ...pulumi.ResourceOption) (*ArchiveRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalyzerName == nil {
		return nil, errors.New("invalid value for required argument 'AnalyzerName'")
	}
	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ArchiveRule
	err := ctx.RegisterResource("aws:accessanalyzer/archiveRule:ArchiveRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArchiveRule gets an existing ArchiveRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchiveRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArchiveRuleState, opts ...pulumi.ResourceOption) (*ArchiveRule, error) {
	var resource ArchiveRule
	err := ctx.ReadResource("aws:accessanalyzer/archiveRule:ArchiveRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArchiveRule resources.
type archiveRuleState struct {
	// Analyzer name.
	AnalyzerName *string `pulumi:"analyzerName"`
	// Filter criteria for the archive rule. See Filter for more details.
	Filters []ArchiveRuleFilter `pulumi:"filters"`
	// Rule name.
	RuleName *string `pulumi:"ruleName"`
}

type ArchiveRuleState struct {
	// Analyzer name.
	AnalyzerName pulumix.Input[*string]
	// Filter criteria for the archive rule. See Filter for more details.
	Filters pulumix.Input[[]*ArchiveRuleFilterArgs]
	// Rule name.
	RuleName pulumix.Input[*string]
}

func (ArchiveRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveRuleState)(nil)).Elem()
}

type archiveRuleArgs struct {
	// Analyzer name.
	AnalyzerName string `pulumi:"analyzerName"`
	// Filter criteria for the archive rule. See Filter for more details.
	Filters []ArchiveRuleFilter `pulumi:"filters"`
	// Rule name.
	RuleName string `pulumi:"ruleName"`
}

// The set of arguments for constructing a ArchiveRule resource.
type ArchiveRuleArgs struct {
	// Analyzer name.
	AnalyzerName pulumix.Input[string]
	// Filter criteria for the archive rule. See Filter for more details.
	Filters pulumix.Input[[]*ArchiveRuleFilterArgs]
	// Rule name.
	RuleName pulumix.Input[string]
}

func (ArchiveRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveRuleArgs)(nil)).Elem()
}

type ArchiveRuleOutput struct{ *pulumi.OutputState }

func (ArchiveRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveRule)(nil)).Elem()
}

func (o ArchiveRuleOutput) ToArchiveRuleOutput() ArchiveRuleOutput {
	return o
}

func (o ArchiveRuleOutput) ToArchiveRuleOutputWithContext(ctx context.Context) ArchiveRuleOutput {
	return o
}

func (o ArchiveRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ArchiveRule] {
	return pulumix.Output[ArchiveRule]{
		OutputState: o.OutputState,
	}
}

// Analyzer name.
func (o ArchiveRuleOutput) AnalyzerName() pulumix.Output[string] {
	value := pulumix.Apply[ArchiveRule](o, func(v ArchiveRule) pulumix.Output[string] { return v.AnalyzerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Filter criteria for the archive rule. See Filter for more details.
func (o ArchiveRuleOutput) Filters() pulumix.GArrayOutput[ArchiveRuleFilter, ArchiveRuleFilterOutput] {
	value := pulumix.Apply[ArchiveRule](o, func(v ArchiveRule) pulumix.GArrayOutput[ArchiveRuleFilter, ArchiveRuleFilterOutput] { return v.Filters })
	unwrapped := pulumix.Flatten[[]ArchiveRuleFilter, pulumix.GArrayOutput[ArchiveRuleFilter, ArchiveRuleFilterOutput]](value)
	return pulumix.GArrayOutput[ArchiveRuleFilter, ArchiveRuleFilterOutput]{OutputState: unwrapped.OutputState}
}

// Rule name.
func (o ArchiveRuleOutput) RuleName() pulumix.Output[string] {
	value := pulumix.Apply[ArchiveRule](o, func(v ArchiveRule) pulumix.Output[string] { return v.RuleName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ArchiveRuleOutput{})
}
