// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Client VPN endpoint for OpenVPN clients. For more information on usage, please see the
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
type Endpoint struct {
	pulumi.CustomResourceState

	// The ARN of the Client VPN endpoint.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions pulumix.GArrayOutput[EndpointAuthenticationOption, EndpointAuthenticationOptionOutput] `pulumi:"authenticationOptions"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock pulumix.Output[string] `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions pulumix.GPtrOutput[EndpointClientConnectOptions, EndpointClientConnectOptionsOutput] `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions pulumix.GPtrOutput[EndpointClientLoginBannerOptions, EndpointClientLoginBannerOptionsOutput] `pulumi:"clientLoginBannerOptions"`
	// Information about the client connection logging options.
	ConnectionLogOptions pulumix.GPtrOutput[EndpointConnectionLogOptions, EndpointConnectionLogOptionsOutput] `pulumi:"connectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers pulumix.ArrayOutput[string] `pulumi:"dnsServers"`
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal pulumix.Output[*string] `pulumi:"selfServicePortal"`
	// The ARN of the ACM server certificate.
	ServerCertificateArn pulumix.Output[string] `pulumi:"serverCertificateArn"`
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours pulumix.Output[*int] `pulumi:"sessionTimeoutHours"`
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel pulumix.Output[*bool] `pulumi:"splitTunnel"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol pulumix.Output[*string] `pulumi:"transportProtocol"`
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort pulumix.Output[*int] `pulumi:"vpnPort"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationOptions == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationOptions'")
	}
	if args.ClientCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'ClientCidrBlock'")
	}
	if args.ConnectionLogOptions == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionLogOptions'")
	}
	if args.ServerCertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'ServerCertificateArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("aws:ec2clientvpn/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("aws:ec2clientvpn/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	// The ARN of the Client VPN endpoint.
	Arn *string `pulumi:"arn"`
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions []EndpointAuthenticationOption `pulumi:"authenticationOptions"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock *string `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions *EndpointClientConnectOptions `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions *EndpointClientLoginBannerOptions `pulumi:"clientLoginBannerOptions"`
	// Information about the client connection logging options.
	ConnectionLogOptions *EndpointConnectionLogOptions `pulumi:"connectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description *string `pulumi:"description"`
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName *string `pulumi:"dnsName"`
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers []string `pulumi:"dnsServers"`
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal *string `pulumi:"selfServicePortal"`
	// The ARN of the ACM server certificate.
	ServerCertificateArn *string `pulumi:"serverCertificateArn"`
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours *int `pulumi:"sessionTimeoutHours"`
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel *bool `pulumi:"splitTunnel"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol *string `pulumi:"transportProtocol"`
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId *string `pulumi:"vpcId"`
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort *int `pulumi:"vpnPort"`
}

type EndpointState struct {
	// The ARN of the Client VPN endpoint.
	Arn pulumix.Input[*string]
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions pulumix.Input[[]*EndpointAuthenticationOptionArgs]
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock pulumix.Input[*string]
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions pulumix.Input[*EndpointClientConnectOptionsArgs]
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions pulumix.Input[*EndpointClientLoginBannerOptionsArgs]
	// Information about the client connection logging options.
	ConnectionLogOptions pulumix.Input[*EndpointConnectionLogOptionsArgs]
	// A brief description of the Client VPN endpoint.
	Description pulumix.Input[*string]
	// The DNS name to be used by clients when establishing their VPN session.
	DnsName pulumix.Input[*string]
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers pulumix.Input[[]string]
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds pulumix.Input[[]string]
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal pulumix.Input[*string]
	// The ARN of the ACM server certificate.
	ServerCertificateArn pulumix.Input[*string]
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours pulumix.Input[*int]
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel pulumix.Input[*bool]
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol pulumix.Input[*string]
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId pulumix.Input[*string]
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort pulumix.Input[*int]
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions []EndpointAuthenticationOption `pulumi:"authenticationOptions"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock string `pulumi:"clientCidrBlock"`
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions *EndpointClientConnectOptions `pulumi:"clientConnectOptions"`
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions *EndpointClientLoginBannerOptions `pulumi:"clientLoginBannerOptions"`
	// Information about the client connection logging options.
	ConnectionLogOptions EndpointConnectionLogOptions `pulumi:"connectionLogOptions"`
	// A brief description of the Client VPN endpoint.
	Description *string `pulumi:"description"`
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers []string `pulumi:"dnsServers"`
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal *string `pulumi:"selfServicePortal"`
	// The ARN of the ACM server certificate.
	ServerCertificateArn string `pulumi:"serverCertificateArn"`
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours *int `pulumi:"sessionTimeoutHours"`
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel *bool `pulumi:"splitTunnel"`
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol *string `pulumi:"transportProtocol"`
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId *string `pulumi:"vpcId"`
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort *int `pulumi:"vpnPort"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// Information about the authentication method to be used to authenticate clients.
	AuthenticationOptions pulumix.Input[[]*EndpointAuthenticationOptionArgs]
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
	ClientCidrBlock pulumix.Input[string]
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions pulumix.Input[*EndpointClientConnectOptionsArgs]
	// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
	ClientLoginBannerOptions pulumix.Input[*EndpointClientLoginBannerOptionsArgs]
	// Information about the client connection logging options.
	ConnectionLogOptions pulumix.Input[*EndpointConnectionLogOptionsArgs]
	// A brief description of the Client VPN endpoint.
	Description pulumix.Input[*string]
	// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
	DnsServers pulumix.Input[[]string]
	// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds pulumix.Input[[]string]
	// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
	SelfServicePortal pulumix.Input[*string]
	// The ARN of the ACM server certificate.
	ServerCertificateArn pulumix.Input[string]
	// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
	SessionTimeoutHours pulumix.Input[*int]
	// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
	SplitTunnel pulumix.Input[*bool]
	// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The transport protocol to be used by the VPN session. Default value is `udp`.
	TransportProtocol pulumix.Input[*string]
	// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
	VpcId pulumix.Input[*string]
	// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
	VpnPort pulumix.Input[*int]
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) ToOutput(ctx context.Context) pulumix.Output[Endpoint] {
	return pulumix.Output[Endpoint]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Client VPN endpoint.
func (o EndpointOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the authentication method to be used to authenticate clients.
func (o EndpointOutput) AuthenticationOptions() pulumix.GArrayOutput[EndpointAuthenticationOption, EndpointAuthenticationOptionOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GArrayOutput[EndpointAuthenticationOption, EndpointAuthenticationOptionOutput] {
		return v.AuthenticationOptions
	})
	unwrapped := pulumix.Flatten[[]EndpointAuthenticationOption, pulumix.GArrayOutput[EndpointAuthenticationOption, EndpointAuthenticationOptionOutput]](value)
	return pulumix.GArrayOutput[EndpointAuthenticationOption, EndpointAuthenticationOptionOutput]{OutputState: unwrapped.OutputState}
}

// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
func (o EndpointOutput) ClientCidrBlock() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.ClientCidrBlock })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The options for managing connection authorization for new client connections.
func (o EndpointOutput) ClientConnectOptions() pulumix.GPtrOutput[EndpointClientConnectOptions, EndpointClientConnectOptionsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointClientConnectOptions, EndpointClientConnectOptionsOutput] {
		return v.ClientConnectOptions
	})
	unwrapped := pulumix.Flatten[*EndpointClientConnectOptions, pulumix.GPtrOutput[EndpointClientConnectOptions, EndpointClientConnectOptionsOutput]](value)
	return pulumix.GPtrOutput[EndpointClientConnectOptions, EndpointClientConnectOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Options for enabling a customizable text banner that will be displayed on AWS provided clients when a VPN session is established.
func (o EndpointOutput) ClientLoginBannerOptions() pulumix.GPtrOutput[EndpointClientLoginBannerOptions, EndpointClientLoginBannerOptionsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointClientLoginBannerOptions, EndpointClientLoginBannerOptionsOutput] {
		return v.ClientLoginBannerOptions
	})
	unwrapped := pulumix.Flatten[*EndpointClientLoginBannerOptions, pulumix.GPtrOutput[EndpointClientLoginBannerOptions, EndpointClientLoginBannerOptionsOutput]](value)
	return pulumix.GPtrOutput[EndpointClientLoginBannerOptions, EndpointClientLoginBannerOptionsOutput]{OutputState: unwrapped.OutputState}
}

// Information about the client connection logging options.
func (o EndpointOutput) ConnectionLogOptions() pulumix.GPtrOutput[EndpointConnectionLogOptions, EndpointConnectionLogOptionsOutput] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.GPtrOutput[EndpointConnectionLogOptions, EndpointConnectionLogOptionsOutput] {
		return v.ConnectionLogOptions
	})
	unwrapped := pulumix.Flatten[*EndpointConnectionLogOptions, pulumix.GPtrOutput[EndpointConnectionLogOptions, EndpointConnectionLogOptionsOutput]](value)
	return pulumix.GPtrOutput[EndpointConnectionLogOptions, EndpointConnectionLogOptionsOutput]{OutputState: unwrapped.OutputState}
}

// A brief description of the Client VPN endpoint.
func (o EndpointOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The DNS name to be used by clients when establishing their VPN session.
func (o EndpointOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the connecting device is used.
func (o EndpointOutput) DnsServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.ArrayOutput[string] { return v.DnsServers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
func (o EndpointOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
func (o EndpointOutput) SelfServicePortal() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.SelfServicePortal })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ARN of the ACM server certificate.
func (o EndpointOutput) ServerCertificateArn() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.ServerCertificateArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum session duration is a trigger by which end-users are required to re-authenticate prior to establishing a VPN session. Default value is `24` - Valid values: `8 | 10 | 12 | 24`
func (o EndpointOutput) SessionTimeoutHours() pulumix.Output[*int] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*int] { return v.SessionTimeoutHours })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
func (o EndpointOutput) SplitTunnel() pulumix.Output[*bool] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*bool] { return v.SplitTunnel })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A mapping of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EndpointOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o EndpointOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The transport protocol to be used by the VPN session. Default value is `udp`.
func (o EndpointOutput) TransportProtocol() pulumix.Output[*string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*string] { return v.TransportProtocol })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
func (o EndpointOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The port number for the Client VPN endpoint. Valid values are `443` and `1194`. Default value is `443`.
func (o EndpointOutput) VpnPort() pulumix.Output[*int] {
	value := pulumix.Apply[Endpoint](o, func(v Endpoint) pulumix.Output[*int] { return v.VpnPort })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(EndpointOutput{})
}
