// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to lookup information about the current AWS partition in
// which the provider is working.
func GetPartition(ctx *pulumi.Context, args *GetPartitionArgs, opts ...pulumi.InvokeOption) (*GetPartitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPartitionResult
	err := ctx.Invoke("aws:index/getPartition:getPartition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPartition.
type GetPartitionArgs struct {
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Id *string `pulumi:"id"`
}

// A collection of values returned by getPartition.
type GetPartitionResult struct {
	// Base DNS domain name for the current partition (e.g., `amazonaws.com` in AWS Commercial, `amazonaws.com.cn` in AWS China).
	DnsSuffix string `pulumi:"dnsSuffix"`
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Id string `pulumi:"id"`
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Partition string `pulumi:"partition"`
	// Prefix of service names (e.g., `com.amazonaws` in AWS Commercial, `cn.com.amazonaws` in AWS China).
	ReverseDnsPrefix string `pulumi:"reverseDnsPrefix"`
}

func GetPartitionOutput(ctx *pulumi.Context, args GetPartitionOutputArgs, opts ...pulumi.InvokeOption) GetPartitionResultOutput {
	outputResult := pulumix.ApplyErr[*GetPartitionArgs](args.ToOutput(), func(plainArgs *GetPartitionArgs) (*GetPartitionResult, error) {
		return GetPartition(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPartitionResultOutput, *GetPartitionResult](outputResult)
}

// A collection of arguments for invoking getPartition.
type GetPartitionOutputArgs struct {
	// Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (args GetPartitionOutputArgs) ToOutput() pulumix.Output[*GetPartitionArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPartitionArgs {
		return &GetPartitionArgs{
			Id: resolvedArgs[0].(*string),
		}
	})
}

type GetPartitionResultOutput struct{ *pulumi.OutputState }

func (GetPartitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPartitionResult)(nil)).Elem()
}

func (o GetPartitionResultOutput) ToOutput(context.Context) pulumix.Output[*GetPartitionResult] {
	return pulumix.Output[*GetPartitionResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPartitionResultOutput) DnsSuffix() pulumix.Output[string] {
	return pulumix.Apply[*GetPartitionResult](o, func(v *GetPartitionResult) string { return v.DnsSuffix })
}

func (o GetPartitionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPartitionResult](o, func(v *GetPartitionResult) string { return v.Id })
}

func (o GetPartitionResultOutput) Partition() pulumix.Output[string] {
	return pulumix.Apply[*GetPartitionResult](o, func(v *GetPartitionResult) string { return v.Partition })
}

func (o GetPartitionResultOutput) ReverseDnsPrefix() pulumix.Output[string] {
	return pulumix.Apply[*GetPartitionResult](o, func(v *GetPartitionResult) string { return v.ReverseDnsPrefix })
}
