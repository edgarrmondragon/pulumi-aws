// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an ElastiCache Global Replication Group resource, which manages replication between two or more Replication Groups in different regions. For more information, see the [ElastiCache User Guide](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html).
type GlobalReplicationGroup struct {
	pulumi.CustomResourceState

	// The ARN of the ElastiCache Global Replication Group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A flag that indicate whether the encryption at rest is enabled.
	AtRestEncryptionEnabled pulumix.Output[bool] `pulumi:"atRestEncryptionEnabled"`
	// A flag that indicate whether AuthToken (password) is enabled.
	AuthTokenEnabled pulumix.Output[bool] `pulumi:"authTokenEnabled"`
	// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
	// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
	AutomaticFailoverEnabled pulumix.Output[bool] `pulumi:"automaticFailoverEnabled"`
	// The instance class used.
	// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
	// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
	CacheNodeType pulumix.Output[string] `pulumi:"cacheNodeType"`
	// Indicates whether the Global Datastore is cluster enabled.
	ClusterEnabled pulumix.Output[bool] `pulumi:"clusterEnabled"`
	// The name of the cache engine to be used for the clusters in this global replication group.
	Engine pulumix.Output[string] `pulumi:"engine"`
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
	// When the version is 6, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
	EngineVersion pulumix.Output[string] `pulumi:"engineVersion"`
	// The full version number of the cache engine running on the members of this global replication group.
	EngineVersionActual pulumix.Output[string] `pulumi:"engineVersionActual"`
	// Set of node groups (shards) on the global replication group.
	// Has the values:
	GlobalNodeGroups pulumix.GArrayOutput[GlobalReplicationGroupGlobalNodeGroup, GlobalReplicationGroupGlobalNodeGroupOutput] `pulumi:"globalNodeGroups"`
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription pulumix.Output[*string] `pulumi:"globalReplicationGroupDescription"`
	// The full ID of the global replication group.
	GlobalReplicationGroupId pulumix.Output[string] `pulumi:"globalReplicationGroupId"`
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix pulumix.Output[string] `pulumi:"globalReplicationGroupIdSuffix"`
	// The number of node groups (shards) on the global replication group.
	NumNodeGroups pulumix.Output[int] `pulumi:"numNodeGroups"`
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName pulumix.Output[*string] `pulumi:"parameterGroupName"`
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId pulumix.Output[string] `pulumi:"primaryReplicationGroupId"`
	// A flag that indicates whether the encryption in transit is enabled.
	TransitEncryptionEnabled pulumix.Output[bool] `pulumi:"transitEncryptionEnabled"`
}

// NewGlobalReplicationGroup registers a new resource with the given unique name, arguments, and options.
func NewGlobalReplicationGroup(ctx *pulumi.Context,
	name string, args *GlobalReplicationGroupArgs, opts ...pulumi.ResourceOption) (*GlobalReplicationGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalReplicationGroupIdSuffix == nil {
		return nil, errors.New("invalid value for required argument 'GlobalReplicationGroupIdSuffix'")
	}
	if args.PrimaryReplicationGroupId == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryReplicationGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalReplicationGroup
	err := ctx.RegisterResource("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalReplicationGroup gets an existing GlobalReplicationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalReplicationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalReplicationGroupState, opts ...pulumi.ResourceOption) (*GlobalReplicationGroup, error) {
	var resource GlobalReplicationGroup
	err := ctx.ReadResource("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalReplicationGroup resources.
type globalReplicationGroupState struct {
	// The ARN of the ElastiCache Global Replication Group.
	Arn *string `pulumi:"arn"`
	// A flag that indicate whether the encryption at rest is enabled.
	AtRestEncryptionEnabled *bool `pulumi:"atRestEncryptionEnabled"`
	// A flag that indicate whether AuthToken (password) is enabled.
	AuthTokenEnabled *bool `pulumi:"authTokenEnabled"`
	// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
	// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
	AutomaticFailoverEnabled *bool `pulumi:"automaticFailoverEnabled"`
	// The instance class used.
	// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
	// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
	CacheNodeType *string `pulumi:"cacheNodeType"`
	// Indicates whether the Global Datastore is cluster enabled.
	ClusterEnabled *bool `pulumi:"clusterEnabled"`
	// The name of the cache engine to be used for the clusters in this global replication group.
	Engine *string `pulumi:"engine"`
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
	// When the version is 6, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
	EngineVersion *string `pulumi:"engineVersion"`
	// The full version number of the cache engine running on the members of this global replication group.
	EngineVersionActual *string `pulumi:"engineVersionActual"`
	// Set of node groups (shards) on the global replication group.
	// Has the values:
	GlobalNodeGroups []GlobalReplicationGroupGlobalNodeGroup `pulumi:"globalNodeGroups"`
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription *string `pulumi:"globalReplicationGroupDescription"`
	// The full ID of the global replication group.
	GlobalReplicationGroupId *string `pulumi:"globalReplicationGroupId"`
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix *string `pulumi:"globalReplicationGroupIdSuffix"`
	// The number of node groups (shards) on the global replication group.
	NumNodeGroups *int `pulumi:"numNodeGroups"`
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId *string `pulumi:"primaryReplicationGroupId"`
	// A flag that indicates whether the encryption in transit is enabled.
	TransitEncryptionEnabled *bool `pulumi:"transitEncryptionEnabled"`
}

type GlobalReplicationGroupState struct {
	// The ARN of the ElastiCache Global Replication Group.
	Arn pulumix.Input[*string]
	// A flag that indicate whether the encryption at rest is enabled.
	AtRestEncryptionEnabled pulumix.Input[*bool]
	// A flag that indicate whether AuthToken (password) is enabled.
	AuthTokenEnabled pulumix.Input[*bool]
	// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
	// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
	AutomaticFailoverEnabled pulumix.Input[*bool]
	// The instance class used.
	// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
	// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
	CacheNodeType pulumix.Input[*string]
	// Indicates whether the Global Datastore is cluster enabled.
	ClusterEnabled pulumix.Input[*bool]
	// The name of the cache engine to be used for the clusters in this global replication group.
	Engine pulumix.Input[*string]
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
	// When the version is 6, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
	EngineVersion pulumix.Input[*string]
	// The full version number of the cache engine running on the members of this global replication group.
	EngineVersionActual pulumix.Input[*string]
	// Set of node groups (shards) on the global replication group.
	// Has the values:
	GlobalNodeGroups pulumix.Input[[]*GlobalReplicationGroupGlobalNodeGroupArgs]
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription pulumix.Input[*string]
	// The full ID of the global replication group.
	GlobalReplicationGroupId pulumix.Input[*string]
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix pulumix.Input[*string]
	// The number of node groups (shards) on the global replication group.
	NumNodeGroups pulumix.Input[*int]
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName pulumix.Input[*string]
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId pulumix.Input[*string]
	// A flag that indicates whether the encryption in transit is enabled.
	TransitEncryptionEnabled pulumix.Input[*bool]
}

func (GlobalReplicationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalReplicationGroupState)(nil)).Elem()
}

type globalReplicationGroupArgs struct {
	// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
	// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
	AutomaticFailoverEnabled *bool `pulumi:"automaticFailoverEnabled"`
	// The instance class used.
	// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
	// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
	CacheNodeType *string `pulumi:"cacheNodeType"`
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
	// When the version is 6, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
	EngineVersion *string `pulumi:"engineVersion"`
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription *string `pulumi:"globalReplicationGroupDescription"`
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix string `pulumi:"globalReplicationGroupIdSuffix"`
	// The number of node groups (shards) on the global replication group.
	NumNodeGroups *int `pulumi:"numNodeGroups"`
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId string `pulumi:"primaryReplicationGroupId"`
}

// The set of arguments for constructing a GlobalReplicationGroup resource.
type GlobalReplicationGroupArgs struct {
	// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
	// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
	AutomaticFailoverEnabled pulumix.Input[*bool]
	// The instance class used.
	// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
	// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
	// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
	CacheNodeType pulumix.Input[*string]
	// Redis version to use for the Global Replication Group.
	// When creating, by default the Global Replication Group inherits the version of the primary replication group.
	// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
	// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
	// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
	// When the version is 6, the major and minor version can be set, e.g., `6.2`,
	// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
	// The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
	EngineVersion pulumix.Input[*string]
	// A user-created description for the global replication group.
	GlobalReplicationGroupDescription pulumix.Input[*string]
	// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
	GlobalReplicationGroupIdSuffix pulumix.Input[string]
	// The number of node groups (shards) on the global replication group.
	NumNodeGroups pulumix.Input[*int]
	// An ElastiCache Parameter Group to use for the Global Replication Group.
	// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
	// Specifying without a major version upgrade will fail.
	// Note that ElastiCache creates a copy of this parameter group for each member replication group.
	ParameterGroupName pulumix.Input[*string]
	// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
	PrimaryReplicationGroupId pulumix.Input[string]
}

func (GlobalReplicationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalReplicationGroupArgs)(nil)).Elem()
}

type GlobalReplicationGroupOutput struct{ *pulumi.OutputState }

func (GlobalReplicationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalReplicationGroup)(nil)).Elem()
}

func (o GlobalReplicationGroupOutput) ToGlobalReplicationGroupOutput() GlobalReplicationGroupOutput {
	return o
}

func (o GlobalReplicationGroupOutput) ToGlobalReplicationGroupOutputWithContext(ctx context.Context) GlobalReplicationGroupOutput {
	return o
}

func (o GlobalReplicationGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalReplicationGroup] {
	return pulumix.Output[GlobalReplicationGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN of the ElastiCache Global Replication Group.
func (o GlobalReplicationGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A flag that indicate whether the encryption at rest is enabled.
func (o GlobalReplicationGroupOutput) AtRestEncryptionEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[bool] { return v.AtRestEncryptionEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// A flag that indicate whether AuthToken (password) is enabled.
func (o GlobalReplicationGroupOutput) AuthTokenEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[bool] { return v.AuthTokenEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
func (o GlobalReplicationGroupOutput) AutomaticFailoverEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[bool] { return v.AutomaticFailoverEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The instance class used.
// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
func (o GlobalReplicationGroupOutput) CacheNodeType() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.CacheNodeType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Indicates whether the Global Datastore is cluster enabled.
func (o GlobalReplicationGroupOutput) ClusterEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[bool] { return v.ClusterEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

// The name of the cache engine to be used for the clusters in this global replication group.
func (o GlobalReplicationGroupOutput) Engine() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.Engine })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Redis version to use for the Global Replication Group.
// When creating, by default the Global Replication Group inherits the version of the primary replication group.
// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
// When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
// When the version is 6, the major and minor version can be set, e.g., `6.2`,
// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
// The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
func (o GlobalReplicationGroupOutput) EngineVersion() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.EngineVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The full version number of the cache engine running on the members of this global replication group.
func (o GlobalReplicationGroupOutput) EngineVersionActual() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.EngineVersionActual })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of node groups (shards) on the global replication group.
// Has the values:
func (o GlobalReplicationGroupOutput) GlobalNodeGroups() pulumix.GArrayOutput[GlobalReplicationGroupGlobalNodeGroup, GlobalReplicationGroupGlobalNodeGroupOutput] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.GArrayOutput[GlobalReplicationGroupGlobalNodeGroup, GlobalReplicationGroupGlobalNodeGroupOutput] {
		return v.GlobalNodeGroups
	})
	unwrapped := pulumix.Flatten[[]GlobalReplicationGroupGlobalNodeGroup, pulumix.GArrayOutput[GlobalReplicationGroupGlobalNodeGroup, GlobalReplicationGroupGlobalNodeGroupOutput]](value)
	return pulumix.GArrayOutput[GlobalReplicationGroupGlobalNodeGroup, GlobalReplicationGroupGlobalNodeGroupOutput]{OutputState: unwrapped.OutputState}
}

// A user-created description for the global replication group.
func (o GlobalReplicationGroupOutput) GlobalReplicationGroupDescription() pulumix.Output[*string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[*string] { return v.GlobalReplicationGroupDescription })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The full ID of the global replication group.
func (o GlobalReplicationGroupOutput) GlobalReplicationGroupId() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.GlobalReplicationGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
func (o GlobalReplicationGroupOutput) GlobalReplicationGroupIdSuffix() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.GlobalReplicationGroupIdSuffix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The number of node groups (shards) on the global replication group.
func (o GlobalReplicationGroupOutput) NumNodeGroups() pulumix.Output[int] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[int] { return v.NumNodeGroups })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// An ElastiCache Parameter Group to use for the Global Replication Group.
// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
// Specifying without a major version upgrade will fail.
// Note that ElastiCache creates a copy of this parameter group for each member replication group.
func (o GlobalReplicationGroupOutput) ParameterGroupName() pulumix.Output[*string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[*string] { return v.ParameterGroupName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
func (o GlobalReplicationGroupOutput) PrimaryReplicationGroupId() pulumix.Output[string] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[string] { return v.PrimaryReplicationGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A flag that indicates whether the encryption in transit is enabled.
func (o GlobalReplicationGroupOutput) TransitEncryptionEnabled() pulumix.Output[bool] {
	value := pulumix.Apply[GlobalReplicationGroup](o, func(v GlobalReplicationGroup) pulumix.Output[bool] { return v.TransitEncryptionEnabled })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func init() {
	pulumi.RegisterOutputType(GlobalReplicationGroupOutput{})
}
