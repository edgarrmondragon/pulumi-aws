// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create an association between a route table and a subnet or a route table and an
// internet gateway or virtual private gateway.
type RouteTableAssociation struct {
	pulumi.CustomResourceState

	// The gateway ID to create an association. Conflicts with `subnetId`.
	GatewayId pulumix.Output[*string] `pulumi:"gatewayId"`
	// The ID of the routing table to associate with.
	RouteTableId pulumix.Output[string] `pulumi:"routeTableId"`
	// The subnet ID to create an association. Conflicts with `gatewayId`.
	SubnetId pulumix.Output[*string] `pulumi:"subnetId"`
}

// NewRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewRouteTableAssociation(ctx *pulumi.Context,
	name string, args *RouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*RouteTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTableAssociation
	err := ctx.RegisterResource("aws:ec2/routeTableAssociation:RouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableAssociation gets an existing RouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableAssociationState, opts ...pulumi.ResourceOption) (*RouteTableAssociation, error) {
	var resource RouteTableAssociation
	err := ctx.ReadResource("aws:ec2/routeTableAssociation:RouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableAssociation resources.
type routeTableAssociationState struct {
	// The gateway ID to create an association. Conflicts with `subnetId`.
	GatewayId *string `pulumi:"gatewayId"`
	// The ID of the routing table to associate with.
	RouteTableId *string `pulumi:"routeTableId"`
	// The subnet ID to create an association. Conflicts with `gatewayId`.
	SubnetId *string `pulumi:"subnetId"`
}

type RouteTableAssociationState struct {
	// The gateway ID to create an association. Conflicts with `subnetId`.
	GatewayId pulumix.Input[*string]
	// The ID of the routing table to associate with.
	RouteTableId pulumix.Input[*string]
	// The subnet ID to create an association. Conflicts with `gatewayId`.
	SubnetId pulumix.Input[*string]
}

func (RouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociationState)(nil)).Elem()
}

type routeTableAssociationArgs struct {
	// The gateway ID to create an association. Conflicts with `subnetId`.
	GatewayId *string `pulumi:"gatewayId"`
	// The ID of the routing table to associate with.
	RouteTableId string `pulumi:"routeTableId"`
	// The subnet ID to create an association. Conflicts with `gatewayId`.
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a RouteTableAssociation resource.
type RouteTableAssociationArgs struct {
	// The gateway ID to create an association. Conflicts with `subnetId`.
	GatewayId pulumix.Input[*string]
	// The ID of the routing table to associate with.
	RouteTableId pulumix.Input[string]
	// The subnet ID to create an association. Conflicts with `gatewayId`.
	SubnetId pulumix.Input[*string]
}

func (RouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociationArgs)(nil)).Elem()
}

type RouteTableAssociationOutput struct{ *pulumi.OutputState }

func (RouteTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableAssociation)(nil)).Elem()
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationOutput() RouteTableAssociationOutput {
	return o
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput {
	return o
}

func (o RouteTableAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[RouteTableAssociation] {
	return pulumix.Output[RouteTableAssociation]{
		OutputState: o.OutputState,
	}
}

// The gateway ID to create an association. Conflicts with `subnetId`.
func (o RouteTableAssociationOutput) GatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[RouteTableAssociation](o, func(v RouteTableAssociation) pulumix.Output[*string] { return v.GatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the routing table to associate with.
func (o RouteTableAssociationOutput) RouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[RouteTableAssociation](o, func(v RouteTableAssociation) pulumix.Output[string] { return v.RouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The subnet ID to create an association. Conflicts with `gatewayId`.
func (o RouteTableAssociationOutput) SubnetId() pulumix.Output[*string] {
	value := pulumix.Apply[RouteTableAssociation](o, func(v RouteTableAssociation) pulumix.Output[*string] { return v.SubnetId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(RouteTableAssociationOutput{})
}
