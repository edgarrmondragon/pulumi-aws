// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an Amazon File Cache cache.
// See the [Create File Cache](https://docs.aws.amazon.com/fsx/latest/APIReference/API_CreateFileCache.html) for more information.
type FileCache struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the resource.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
	CopyTagsToDataRepositoryAssociations pulumix.Output[*bool] `pulumi:"copyTagsToDataRepositoryAssociations"`
	// A list of IDs of data repository associations that are associated with this cache.
	DataRepositoryAssociationIds pulumix.ArrayOutput[string] `pulumi:"dataRepositoryAssociationIds"`
	// See the `dataRepositoryAssociation` configuration block. Max of 8.
	// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements: 1) All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time. 2) An NFS DRA must link to an NFS file system that supports the NFSv3 protocol. DRA automatic import and automatic export is not supported.
	DataRepositoryAssociations pulumix.GArrayOutput[FileCacheDataRepositoryAssociation, FileCacheDataRepositoryAssociationOutput] `pulumi:"dataRepositoryAssociations"`
	// The Domain Name System (DNS) name for the cache.
	DnsName pulumix.Output[string] `pulumi:"dnsName"`
	// The system-generated, unique ID of the cache.
	FileCacheId pulumix.Output[string] `pulumi:"fileCacheId"`
	// The type of cache that you're creating. The only supported value is `LUSTRE`.
	FileCacheType pulumix.Output[string] `pulumi:"fileCacheType"`
	// The version for the type of cache that you're creating. The only supported value is `2.12`.
	FileCacheTypeVersion pulumix.Output[string] `pulumi:"fileCacheTypeVersion"`
	// Specifies the ID of the AWS Key Management Service (AWS KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed AWS KMS key for your account is used.
	KmsKeyId pulumix.Output[string] `pulumi:"kmsKeyId"`
	// See the `lustreConfiguration` block. Required when `fileCacheType` is `LUSTRE`.
	LustreConfigurations pulumix.GArrayOutput[FileCacheLustreConfiguration, FileCacheLustreConfigurationOutput] `pulumi:"lustreConfigurations"`
	// A list of network interface IDs.
	NetworkInterfaceIds pulumix.ArrayOutput[string] `pulumi:"networkInterfaceIds"`
	OwnerId             pulumix.Output[string]      `pulumi:"ownerId"`
	// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access.
	SecurityGroupIds pulumix.ArrayOutput[string] `pulumi:"securityGroupIds"`
	// The storage capacity of the cache in gibibytes (GiB). Valid values are `1200` GiB, `2400` GiB, and increments of `2400` GiB.
	StorageCapacity pulumix.Output[int] `pulumi:"storageCapacity"`
	// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID.
	//
	// The following arguments are optional:
	SubnetIds pulumix.ArrayOutput[string] `pulumi:"subnetIds"`
	// A map of tags to assign to the file cache. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of your virtual private cloud (VPC).
	VpcId pulumix.Output[string] `pulumi:"vpcId"`
}

// NewFileCache registers a new resource with the given unique name, arguments, and options.
func NewFileCache(ctx *pulumi.Context,
	name string, args *FileCacheArgs, opts ...pulumi.ResourceOption) (*FileCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileCacheType == nil {
		return nil, errors.New("invalid value for required argument 'FileCacheType'")
	}
	if args.FileCacheTypeVersion == nil {
		return nil, errors.New("invalid value for required argument 'FileCacheTypeVersion'")
	}
	if args.StorageCapacity == nil {
		return nil, errors.New("invalid value for required argument 'StorageCapacity'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileCache
	err := ctx.RegisterResource("aws:fsx/fileCache:FileCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileCache gets an existing FileCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileCacheState, opts ...pulumi.ResourceOption) (*FileCache, error) {
	var resource FileCache
	err := ctx.ReadResource("aws:fsx/fileCache:FileCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileCache resources.
type fileCacheState struct {
	// The Amazon Resource Name (ARN) for the resource.
	Arn *string `pulumi:"arn"`
	// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
	CopyTagsToDataRepositoryAssociations *bool `pulumi:"copyTagsToDataRepositoryAssociations"`
	// A list of IDs of data repository associations that are associated with this cache.
	DataRepositoryAssociationIds []string `pulumi:"dataRepositoryAssociationIds"`
	// See the `dataRepositoryAssociation` configuration block. Max of 8.
	// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements: 1) All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time. 2) An NFS DRA must link to an NFS file system that supports the NFSv3 protocol. DRA automatic import and automatic export is not supported.
	DataRepositoryAssociations []FileCacheDataRepositoryAssociation `pulumi:"dataRepositoryAssociations"`
	// The Domain Name System (DNS) name for the cache.
	DnsName *string `pulumi:"dnsName"`
	// The system-generated, unique ID of the cache.
	FileCacheId *string `pulumi:"fileCacheId"`
	// The type of cache that you're creating. The only supported value is `LUSTRE`.
	FileCacheType *string `pulumi:"fileCacheType"`
	// The version for the type of cache that you're creating. The only supported value is `2.12`.
	FileCacheTypeVersion *string `pulumi:"fileCacheTypeVersion"`
	// Specifies the ID of the AWS Key Management Service (AWS KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed AWS KMS key for your account is used.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// See the `lustreConfiguration` block. Required when `fileCacheType` is `LUSTRE`.
	LustreConfigurations []FileCacheLustreConfiguration `pulumi:"lustreConfigurations"`
	// A list of network interface IDs.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	OwnerId             *string  `pulumi:"ownerId"`
	// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The storage capacity of the cache in gibibytes (GiB). Valid values are `1200` GiB, `2400` GiB, and increments of `2400` GiB.
	StorageCapacity *int `pulumi:"storageCapacity"`
	// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the file cache. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of your virtual private cloud (VPC).
	VpcId *string `pulumi:"vpcId"`
}

type FileCacheState struct {
	// The Amazon Resource Name (ARN) for the resource.
	Arn pulumix.Input[*string]
	// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
	CopyTagsToDataRepositoryAssociations pulumix.Input[*bool]
	// A list of IDs of data repository associations that are associated with this cache.
	DataRepositoryAssociationIds pulumix.Input[[]string]
	// See the `dataRepositoryAssociation` configuration block. Max of 8.
	// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements: 1) All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time. 2) An NFS DRA must link to an NFS file system that supports the NFSv3 protocol. DRA automatic import and automatic export is not supported.
	DataRepositoryAssociations pulumix.Input[[]*FileCacheDataRepositoryAssociationArgs]
	// The Domain Name System (DNS) name for the cache.
	DnsName pulumix.Input[*string]
	// The system-generated, unique ID of the cache.
	FileCacheId pulumix.Input[*string]
	// The type of cache that you're creating. The only supported value is `LUSTRE`.
	FileCacheType pulumix.Input[*string]
	// The version for the type of cache that you're creating. The only supported value is `2.12`.
	FileCacheTypeVersion pulumix.Input[*string]
	// Specifies the ID of the AWS Key Management Service (AWS KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed AWS KMS key for your account is used.
	KmsKeyId pulumix.Input[*string]
	// See the `lustreConfiguration` block. Required when `fileCacheType` is `LUSTRE`.
	LustreConfigurations pulumix.Input[[]*FileCacheLustreConfigurationArgs]
	// A list of network interface IDs.
	NetworkInterfaceIds pulumix.Input[[]string]
	OwnerId             pulumix.Input[*string]
	// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access.
	SecurityGroupIds pulumix.Input[[]string]
	// The storage capacity of the cache in gibibytes (GiB). Valid values are `1200` GiB, `2400` GiB, and increments of `2400` GiB.
	StorageCapacity pulumix.Input[*int]
	// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID.
	//
	// The following arguments are optional:
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the file cache. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// The ID of your virtual private cloud (VPC).
	VpcId pulumix.Input[*string]
}

func (FileCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileCacheState)(nil)).Elem()
}

type fileCacheArgs struct {
	// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
	CopyTagsToDataRepositoryAssociations *bool `pulumi:"copyTagsToDataRepositoryAssociations"`
	// See the `dataRepositoryAssociation` configuration block. Max of 8.
	// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements: 1) All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time. 2) An NFS DRA must link to an NFS file system that supports the NFSv3 protocol. DRA automatic import and automatic export is not supported.
	DataRepositoryAssociations []FileCacheDataRepositoryAssociation `pulumi:"dataRepositoryAssociations"`
	// The type of cache that you're creating. The only supported value is `LUSTRE`.
	FileCacheType string `pulumi:"fileCacheType"`
	// The version for the type of cache that you're creating. The only supported value is `2.12`.
	FileCacheTypeVersion string `pulumi:"fileCacheTypeVersion"`
	// Specifies the ID of the AWS Key Management Service (AWS KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed AWS KMS key for your account is used.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// See the `lustreConfiguration` block. Required when `fileCacheType` is `LUSTRE`.
	LustreConfigurations []FileCacheLustreConfiguration `pulumi:"lustreConfigurations"`
	// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The storage capacity of the cache in gibibytes (GiB). Valid values are `1200` GiB, `2400` GiB, and increments of `2400` GiB.
	StorageCapacity int `pulumi:"storageCapacity"`
	// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID.
	//
	// The following arguments are optional:
	SubnetIds []string `pulumi:"subnetIds"`
	// A map of tags to assign to the file cache. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FileCache resource.
type FileCacheArgs struct {
	// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
	CopyTagsToDataRepositoryAssociations pulumix.Input[*bool]
	// See the `dataRepositoryAssociation` configuration block. Max of 8.
	// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements: 1) All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time. 2) An NFS DRA must link to an NFS file system that supports the NFSv3 protocol. DRA automatic import and automatic export is not supported.
	DataRepositoryAssociations pulumix.Input[[]*FileCacheDataRepositoryAssociationArgs]
	// The type of cache that you're creating. The only supported value is `LUSTRE`.
	FileCacheType pulumix.Input[string]
	// The version for the type of cache that you're creating. The only supported value is `2.12`.
	FileCacheTypeVersion pulumix.Input[string]
	// Specifies the ID of the AWS Key Management Service (AWS KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed AWS KMS key for your account is used.
	KmsKeyId pulumix.Input[*string]
	// See the `lustreConfiguration` block. Required when `fileCacheType` is `LUSTRE`.
	LustreConfigurations pulumix.Input[[]*FileCacheLustreConfigurationArgs]
	// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access.
	SecurityGroupIds pulumix.Input[[]string]
	// The storage capacity of the cache in gibibytes (GiB). Valid values are `1200` GiB, `2400` GiB, and increments of `2400` GiB.
	StorageCapacity pulumix.Input[int]
	// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID.
	//
	// The following arguments are optional:
	SubnetIds pulumix.Input[[]string]
	// A map of tags to assign to the file cache. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (FileCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileCacheArgs)(nil)).Elem()
}

type FileCacheOutput struct{ *pulumi.OutputState }

func (FileCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileCache)(nil)).Elem()
}

func (o FileCacheOutput) ToFileCacheOutput() FileCacheOutput {
	return o
}

func (o FileCacheOutput) ToFileCacheOutputWithContext(ctx context.Context) FileCacheOutput {
	return o
}

func (o FileCacheOutput) ToOutput(ctx context.Context) pulumix.Output[FileCache] {
	return pulumix.Output[FileCache]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for the resource.
func (o FileCacheOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
func (o FileCacheOutput) CopyTagsToDataRepositoryAssociations() pulumix.Output[*bool] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[*bool] { return v.CopyTagsToDataRepositoryAssociations })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A list of IDs of data repository associations that are associated with this cache.
func (o FileCacheOutput) DataRepositoryAssociationIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.ArrayOutput[string] { return v.DataRepositoryAssociationIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// See the `dataRepositoryAssociation` configuration block. Max of 8.
// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements: 1) All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time. 2) An NFS DRA must link to an NFS file system that supports the NFSv3 protocol. DRA automatic import and automatic export is not supported.
func (o FileCacheOutput) DataRepositoryAssociations() pulumix.GArrayOutput[FileCacheDataRepositoryAssociation, FileCacheDataRepositoryAssociationOutput] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.GArrayOutput[FileCacheDataRepositoryAssociation, FileCacheDataRepositoryAssociationOutput] {
		return v.DataRepositoryAssociations
	})
	unwrapped := pulumix.Flatten[[]FileCacheDataRepositoryAssociation, pulumix.GArrayOutput[FileCacheDataRepositoryAssociation, FileCacheDataRepositoryAssociationOutput]](value)
	return pulumix.GArrayOutput[FileCacheDataRepositoryAssociation, FileCacheDataRepositoryAssociationOutput]{OutputState: unwrapped.OutputState}
}

// The Domain Name System (DNS) name for the cache.
func (o FileCacheOutput) DnsName() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.DnsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The system-generated, unique ID of the cache.
func (o FileCacheOutput) FileCacheId() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.FileCacheId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of cache that you're creating. The only supported value is `LUSTRE`.
func (o FileCacheOutput) FileCacheType() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.FileCacheType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version for the type of cache that you're creating. The only supported value is `2.12`.
func (o FileCacheOutput) FileCacheTypeVersion() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.FileCacheTypeVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the ID of the AWS Key Management Service (AWS KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed AWS KMS key for your account is used.
func (o FileCacheOutput) KmsKeyId() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.KmsKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// See the `lustreConfiguration` block. Required when `fileCacheType` is `LUSTRE`.
func (o FileCacheOutput) LustreConfigurations() pulumix.GArrayOutput[FileCacheLustreConfiguration, FileCacheLustreConfigurationOutput] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.GArrayOutput[FileCacheLustreConfiguration, FileCacheLustreConfigurationOutput] {
		return v.LustreConfigurations
	})
	unwrapped := pulumix.Flatten[[]FileCacheLustreConfiguration, pulumix.GArrayOutput[FileCacheLustreConfiguration, FileCacheLustreConfigurationOutput]](value)
	return pulumix.GArrayOutput[FileCacheLustreConfiguration, FileCacheLustreConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// A list of network interface IDs.
func (o FileCacheOutput) NetworkInterfaceIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.ArrayOutput[string] { return v.NetworkInterfaceIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func (o FileCacheOutput) OwnerId() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.OwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access.
func (o FileCacheOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.ArrayOutput[string] { return v.SecurityGroupIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The storage capacity of the cache in gibibytes (GiB). Valid values are `1200` GiB, `2400` GiB, and increments of `2400` GiB.
func (o FileCacheOutput) StorageCapacity() pulumix.Output[int] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[int] { return v.StorageCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID.
//
// The following arguments are optional:
func (o FileCacheOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.ArrayOutput[string] { return v.SubnetIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags to assign to the file cache. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FileCacheOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o FileCacheOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of your virtual private cloud (VPC).
func (o FileCacheOutput) VpcId() pulumix.Output[string] {
	value := pulumix.Apply[FileCache](o, func(v FileCache) pulumix.Output[string] { return v.VpcId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(FileCacheOutput{})
}
