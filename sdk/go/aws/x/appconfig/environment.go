// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AppConfig Environment resource for an `appconfig.Application` resource. One or more environments can be defined for an application.
type Environment struct {
	pulumi.CustomResourceState

	// AppConfig application ID. Must be between 4 and 7 characters in length.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// ARN of the AppConfig Environment.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the environment. Can be at most 1024 characters.
	Description pulumix.Output[string] `pulumi:"description"`
	// AppConfig environment ID.
	EnvironmentId pulumix.Output[string] `pulumi:"environmentId"`
	// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
	Monitors pulumix.GArrayOutput[EnvironmentMonitor, EnvironmentMonitorOutput] `pulumi:"monitors"`
	// Name for the environment. Must be between 1 and 64 characters in length.
	Name pulumix.Output[string] `pulumi:"name"`
	// State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
	// or `ROLLED_BACK`.
	State pulumix.Output[string] `pulumi:"state"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("aws:appconfig/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws:appconfig/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	// AppConfig application ID. Must be between 4 and 7 characters in length.
	ApplicationId *string `pulumi:"applicationId"`
	// ARN of the AppConfig Environment.
	Arn *string `pulumi:"arn"`
	// Description of the environment. Can be at most 1024 characters.
	Description *string `pulumi:"description"`
	// AppConfig environment ID.
	EnvironmentId *string `pulumi:"environmentId"`
	// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
	Monitors []EnvironmentMonitor `pulumi:"monitors"`
	// Name for the environment. Must be between 1 and 64 characters in length.
	Name *string `pulumi:"name"`
	// State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
	// or `ROLLED_BACK`.
	State *string `pulumi:"state"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type EnvironmentState struct {
	// AppConfig application ID. Must be between 4 and 7 characters in length.
	ApplicationId pulumix.Input[*string]
	// ARN of the AppConfig Environment.
	Arn pulumix.Input[*string]
	// Description of the environment. Can be at most 1024 characters.
	Description pulumix.Input[*string]
	// AppConfig environment ID.
	EnvironmentId pulumix.Input[*string]
	// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
	Monitors pulumix.Input[[]*EnvironmentMonitorArgs]
	// Name for the environment. Must be between 1 and 64 characters in length.
	Name pulumix.Input[*string]
	// State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
	// or `ROLLED_BACK`.
	State pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// AppConfig application ID. Must be between 4 and 7 characters in length.
	ApplicationId string `pulumi:"applicationId"`
	// Description of the environment. Can be at most 1024 characters.
	Description *string `pulumi:"description"`
	// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
	Monitors []EnvironmentMonitor `pulumi:"monitors"`
	// Name for the environment. Must be between 1 and 64 characters in length.
	Name *string `pulumi:"name"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// AppConfig application ID. Must be between 4 and 7 characters in length.
	ApplicationId pulumix.Input[string]
	// Description of the environment. Can be at most 1024 characters.
	Description pulumix.Input[*string]
	// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
	Monitors pulumix.Input[[]*EnvironmentMonitorArgs]
	// Name for the environment. Must be between 1 and 64 characters in length.
	Name pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[Environment] {
	return pulumix.Output[Environment]{
		OutputState: o.OutputState,
	}
}

// AppConfig application ID. Must be between 4 and 7 characters in length.
func (o EnvironmentOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ARN of the AppConfig Environment.
func (o EnvironmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the environment. Can be at most 1024 characters.
func (o EnvironmentOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// AppConfig environment ID.
func (o EnvironmentOutput) EnvironmentId() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.EnvironmentId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
func (o EnvironmentOutput) Monitors() pulumix.GArrayOutput[EnvironmentMonitor, EnvironmentMonitorOutput] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.GArrayOutput[EnvironmentMonitor, EnvironmentMonitorOutput] {
		return v.Monitors
	})
	unwrapped := pulumix.Flatten[[]EnvironmentMonitor, pulumix.GArrayOutput[EnvironmentMonitor, EnvironmentMonitorOutput]](value)
	return pulumix.GArrayOutput[EnvironmentMonitor, EnvironmentMonitorOutput]{OutputState: unwrapped.OutputState}
}

// Name for the environment. Must be between 1 and 64 characters in length.
func (o EnvironmentOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
// or `ROLLED_BACK`.
func (o EnvironmentOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EnvironmentOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o EnvironmentOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(EnvironmentOutput{})
}
