// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a CloudWatch Logs destination policy resource.
type LogDestinationPolicy struct {
	pulumi.CustomResourceState

	// The policy document. This is a JSON formatted string.
	AccessPolicy pulumix.Output[string] `pulumi:"accessPolicy"`
	// A name for the subscription filter
	DestinationName pulumix.Output[string] `pulumi:"destinationName"`
	// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts.
	ForceUpdate pulumix.Output[*bool] `pulumi:"forceUpdate"`
}

// NewLogDestinationPolicy registers a new resource with the given unique name, arguments, and options.
func NewLogDestinationPolicy(ctx *pulumi.Context,
	name string, args *LogDestinationPolicyArgs, opts ...pulumi.ResourceOption) (*LogDestinationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicy'")
	}
	if args.DestinationName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDestinationPolicy
	err := ctx.RegisterResource("aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDestinationPolicy gets an existing LogDestinationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDestinationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDestinationPolicyState, opts ...pulumi.ResourceOption) (*LogDestinationPolicy, error) {
	var resource LogDestinationPolicy
	err := ctx.ReadResource("aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDestinationPolicy resources.
type logDestinationPolicyState struct {
	// The policy document. This is a JSON formatted string.
	AccessPolicy *string `pulumi:"accessPolicy"`
	// A name for the subscription filter
	DestinationName *string `pulumi:"destinationName"`
	// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts.
	ForceUpdate *bool `pulumi:"forceUpdate"`
}

type LogDestinationPolicyState struct {
	// The policy document. This is a JSON formatted string.
	AccessPolicy pulumix.Input[*string]
	// A name for the subscription filter
	DestinationName pulumix.Input[*string]
	// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts.
	ForceUpdate pulumix.Input[*bool]
}

func (LogDestinationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDestinationPolicyState)(nil)).Elem()
}

type logDestinationPolicyArgs struct {
	// The policy document. This is a JSON formatted string.
	AccessPolicy string `pulumi:"accessPolicy"`
	// A name for the subscription filter
	DestinationName string `pulumi:"destinationName"`
	// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts.
	ForceUpdate *bool `pulumi:"forceUpdate"`
}

// The set of arguments for constructing a LogDestinationPolicy resource.
type LogDestinationPolicyArgs struct {
	// The policy document. This is a JSON formatted string.
	AccessPolicy pulumix.Input[string]
	// A name for the subscription filter
	DestinationName pulumix.Input[string]
	// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts.
	ForceUpdate pulumix.Input[*bool]
}

func (LogDestinationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDestinationPolicyArgs)(nil)).Elem()
}

type LogDestinationPolicyOutput struct{ *pulumi.OutputState }

func (LogDestinationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogDestinationPolicy)(nil)).Elem()
}

func (o LogDestinationPolicyOutput) ToLogDestinationPolicyOutput() LogDestinationPolicyOutput {
	return o
}

func (o LogDestinationPolicyOutput) ToLogDestinationPolicyOutputWithContext(ctx context.Context) LogDestinationPolicyOutput {
	return o
}

func (o LogDestinationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LogDestinationPolicy] {
	return pulumix.Output[LogDestinationPolicy]{
		OutputState: o.OutputState,
	}
}

// The policy document. This is a JSON formatted string.
func (o LogDestinationPolicyOutput) AccessPolicy() pulumix.Output[string] {
	value := pulumix.Apply[LogDestinationPolicy](o, func(v LogDestinationPolicy) pulumix.Output[string] { return v.AccessPolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A name for the subscription filter
func (o LogDestinationPolicyOutput) DestinationName() pulumix.Output[string] {
	value := pulumix.Apply[LogDestinationPolicy](o, func(v LogDestinationPolicy) pulumix.Output[string] { return v.DestinationName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts.
func (o LogDestinationPolicyOutput) ForceUpdate() pulumix.Output[*bool] {
	value := pulumix.Apply[LogDestinationPolicy](o, func(v LogDestinationPolicy) pulumix.Output[*bool] { return v.ForceUpdate })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(LogDestinationPolicyOutput{})
}
