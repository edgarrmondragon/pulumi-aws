// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ARN of a State Machine in AWS Step
// Function (SFN). By using this data source, you can reference a
// state machine without having to hard code the ARNs as input.
func LookupStateMachine(ctx *pulumi.Context, args *LookupStateMachineArgs, opts ...pulumi.InvokeOption) (*LookupStateMachineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStateMachineResult
	err := ctx.Invoke("aws:sfn/getStateMachine:getStateMachine", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStateMachine.
type LookupStateMachineArgs struct {
	// Friendly name of the state machine to match.
	Name string `pulumi:"name"`
}

// A collection of values returned by getStateMachine.
type LookupStateMachineResult struct {
	// Set to the arn of the state function.
	Arn string `pulumi:"arn"`
	// Date the state machine was created.
	CreationDate string `pulumi:"creationDate"`
	// Set to the state machine definition.
	Definition  string `pulumi:"definition"`
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The revision identifier for the state machine.
	RevisionId string `pulumi:"revisionId"`
	// Set to the roleArn used by the state function.
	RoleArn string `pulumi:"roleArn"`
	// Set to the current status of the state machine.
	Status string `pulumi:"status"`
}

func LookupStateMachineOutput(ctx *pulumi.Context, args LookupStateMachineOutputArgs, opts ...pulumi.InvokeOption) LookupStateMachineResultOutput {
	outputResult := pulumix.ApplyErr[*LookupStateMachineArgs](args.ToOutput(), func(plainArgs *LookupStateMachineArgs) (*LookupStateMachineResult, error) {
		return LookupStateMachine(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupStateMachineResultOutput, *LookupStateMachineResult](outputResult)
}

// A collection of arguments for invoking getStateMachine.
type LookupStateMachineOutputArgs struct {
	// Friendly name of the state machine to match.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupStateMachineOutputArgs) ToOutput() pulumix.Output[*LookupStateMachineArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupStateMachineArgs {
		return &LookupStateMachineArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupStateMachineResultOutput struct{ *pulumi.OutputState }

func (LookupStateMachineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStateMachineResult)(nil)).Elem()
}

func (o LookupStateMachineResultOutput) ToOutput(context.Context) pulumix.Output[*LookupStateMachineResult] {
	return pulumix.Output[*LookupStateMachineResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupStateMachineResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.Arn })
}

func (o LookupStateMachineResultOutput) CreationDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.CreationDate })
}

func (o LookupStateMachineResultOutput) Definition() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.Definition })
}

func (o LookupStateMachineResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.Description })
}

func (o LookupStateMachineResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.Id })
}

func (o LookupStateMachineResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.Name })
}

func (o LookupStateMachineResultOutput) RevisionId() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.RevisionId })
}

func (o LookupStateMachineResultOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.RoleArn })
}

func (o LookupStateMachineResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupStateMachineResult](o, func(v *LookupStateMachineResult) string { return v.Status })
}
