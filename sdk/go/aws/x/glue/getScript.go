// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to generate a Glue script from a Directed Acyclic Graph (DAG).
func GetScript(ctx *pulumi.Context, args *GetScriptArgs, opts ...pulumi.InvokeOption) (*GetScriptResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetScriptResult
	err := ctx.Invoke("aws:glue/getScript:getScript", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScript.
type GetScriptArgs struct {
	// List of the edges in the DAG. Defined below.
	DagEdges []GetScriptDagEdge `pulumi:"dagEdges"`
	// List of the nodes in the DAG. Defined below.
	DagNodes []GetScriptDagNode `pulumi:"dagNodes"`
	// Programming language of the resulting code from the DAG. Defaults to `PYTHON`. Valid values are `PYTHON` and `SCALA`.
	Language *string `pulumi:"language"`
}

// A collection of values returned by getScript.
type GetScriptResult struct {
	DagEdges []GetScriptDagEdge `pulumi:"dagEdges"`
	DagNodes []GetScriptDagNode `pulumi:"dagNodes"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Language *string `pulumi:"language"`
	// Python script generated from the DAG when the `language` argument is set to `PYTHON`.
	PythonScript string `pulumi:"pythonScript"`
	// Scala code generated from the DAG when the `language` argument is set to `SCALA`.
	ScalaCode string `pulumi:"scalaCode"`
}

func GetScriptOutput(ctx *pulumi.Context, args GetScriptOutputArgs, opts ...pulumi.InvokeOption) GetScriptResultOutput {
	outputResult := pulumix.ApplyErr[*GetScriptArgs](args.ToOutput(), func(plainArgs *GetScriptArgs) (*GetScriptResult, error) {
		return GetScript(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetScriptResultOutput, *GetScriptResult](outputResult)
}

// A collection of arguments for invoking getScript.
type GetScriptOutputArgs struct {
	// List of the edges in the DAG. Defined below.
	DagEdges pulumix.Input[[]*GetScriptDagEdgeArgs] `pulumi:"dagEdges"`
	// List of the nodes in the DAG. Defined below.
	DagNodes pulumix.Input[[]*GetScriptDagNodeArgs] `pulumi:"dagNodes"`
	// Programming language of the resulting code from the DAG. Defaults to `PYTHON`. Valid values are `PYTHON` and `SCALA`.
	Language pulumix.Input[*string] `pulumi:"language"`
}

func (args GetScriptOutputArgs) ToOutput() pulumix.Output[*GetScriptArgs] {
	allArgs := pulumix.All(
		args.DagEdges.ToOutput(context.Background()).AsAny(),
		args.DagNodes.ToOutput(context.Background()).AsAny(),
		args.Language.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetScriptArgs {
		return &GetScriptArgs{
			DagEdges: resolvedArgs[0].([]GetScriptDagEdge),
			DagNodes: resolvedArgs[1].([]GetScriptDagNode),
			Language: resolvedArgs[2].(*string),
		}
	})
}

type GetScriptResultOutput struct{ *pulumi.OutputState }

func (GetScriptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptResult)(nil)).Elem()
}

func (o GetScriptResultOutput) ToOutput(context.Context) pulumix.Output[*GetScriptResult] {
	return pulumix.Output[*GetScriptResult]{
		OutputState: o.OutputState,
	}
}

func (o GetScriptResultOutput) DagEdges() pulumix.GArrayOutput[GetScriptDagEdge, GetScriptDagEdgeOutput] {
	value := pulumix.Apply[*GetScriptResult](o, func(v *GetScriptResult) []GetScriptDagEdge { return v.DagEdges })
	return pulumix.GArrayOutput[GetScriptDagEdge, GetScriptDagEdgeOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetScriptResultOutput) DagNodes() pulumix.GArrayOutput[GetScriptDagNode, GetScriptDagNodeOutput] {
	value := pulumix.Apply[*GetScriptResult](o, func(v *GetScriptResult) []GetScriptDagNode { return v.DagNodes })
	return pulumix.GArrayOutput[GetScriptDagNode, GetScriptDagNodeOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetScriptResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetScriptResult](o, func(v *GetScriptResult) string { return v.Id })
}

func (o GetScriptResultOutput) Language() pulumix.Output[*string] {
	return pulumix.Apply[*GetScriptResult](o, func(v *GetScriptResult) *string { return v.Language })
}

func (o GetScriptResultOutput) PythonScript() pulumix.Output[string] {
	return pulumix.Apply[*GetScriptResult](o, func(v *GetScriptResult) string { return v.PythonScript })
}

func (o GetScriptResultOutput) ScalaCode() pulumix.Output[string] {
	return pulumix.Apply[*GetScriptResult](o, func(v *GetScriptResult) string { return v.ScalaCode })
}
