// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an ElastiCache user group resource.
type UserGroup struct {
	pulumi.CustomResourceState

	// The ARN that identifies the user group.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The current supported value is `REDIS`.
	Engine pulumix.Output[string] `pulumi:"engine"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The ID of the user group.
	//
	// The following arguments are optional:
	UserGroupId pulumix.Output[string] `pulumi:"userGroupId"`
	// The list of user IDs that belong to the user group.
	UserIds pulumix.ArrayOutput[string] `pulumi:"userIds"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.UserGroupId == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroup
	err := ctx.RegisterResource("aws:elasticache/userGroup:UserGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupState, opts ...pulumi.ResourceOption) (*UserGroup, error) {
	var resource UserGroup
	err := ctx.ReadResource("aws:elasticache/userGroup:UserGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroup resources.
type userGroupState struct {
	// The ARN that identifies the user group.
	Arn *string `pulumi:"arn"`
	// The current supported value is `REDIS`.
	Engine *string `pulumi:"engine"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The ID of the user group.
	//
	// The following arguments are optional:
	UserGroupId *string `pulumi:"userGroupId"`
	// The list of user IDs that belong to the user group.
	UserIds []string `pulumi:"userIds"`
}

type UserGroupState struct {
	// The ARN that identifies the user group.
	Arn pulumix.Input[*string]
	// The current supported value is `REDIS`.
	Engine pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The ID of the user group.
	//
	// The following arguments are optional:
	UserGroupId pulumix.Input[*string]
	// The list of user IDs that belong to the user group.
	UserIds pulumix.Input[[]string]
}

func (UserGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupState)(nil)).Elem()
}

type userGroupArgs struct {
	// The current supported value is `REDIS`.
	Engine string `pulumi:"engine"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the user group.
	//
	// The following arguments are optional:
	UserGroupId string `pulumi:"userGroupId"`
	// The list of user IDs that belong to the user group.
	UserIds []string `pulumi:"userIds"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// The current supported value is `REDIS`.
	Engine pulumix.Input[string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The ID of the user group.
	//
	// The following arguments are optional:
	UserGroupId pulumix.Input[string]
	// The list of user IDs that belong to the user group.
	UserIds pulumix.Input[[]string]
}

func (UserGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupArgs)(nil)).Elem()
}

type UserGroupOutput struct{ *pulumi.OutputState }

func (UserGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroup)(nil)).Elem()
}

func (o UserGroupOutput) ToUserGroupOutput() UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToUserGroupOutputWithContext(ctx context.Context) UserGroupOutput {
	return o
}

func (o UserGroupOutput) ToOutput(ctx context.Context) pulumix.Output[UserGroup] {
	return pulumix.Output[UserGroup]{
		OutputState: o.OutputState,
	}
}

// The ARN that identifies the user group.
func (o UserGroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current supported value is `REDIS`.
func (o UserGroupOutput) Engine() pulumix.Output[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[string] { return v.Engine })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o UserGroupOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o UserGroupOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the user group.
//
// The following arguments are optional:
func (o UserGroupOutput) UserGroupId() pulumix.Output[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.Output[string] { return v.UserGroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of user IDs that belong to the user group.
func (o UserGroupOutput) UserIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserGroup](o, func(v UserGroup) pulumix.ArrayOutput[string] { return v.UserIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(UserGroupOutput{})
}
