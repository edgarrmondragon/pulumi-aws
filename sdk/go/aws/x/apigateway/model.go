// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Model for a REST API Gateway.
type Model struct {
	pulumi.CustomResourceState

	// Content type of the model
	ContentType pulumix.Output[string] `pulumi:"contentType"`
	// Description of the model
	Description pulumix.Output[*string] `pulumi:"description"`
	// Name of the model
	Name pulumix.Output[string] `pulumi:"name"`
	// ID of the associated REST API
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// Schema of the model in a JSON form
	Schema pulumix.Output[*string] `pulumi:"schema"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Model
	err := ctx.RegisterResource("aws:apigateway/model:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("aws:apigateway/model:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
	// Content type of the model
	ContentType *string `pulumi:"contentType"`
	// Description of the model
	Description *string `pulumi:"description"`
	// Name of the model
	Name *string `pulumi:"name"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// Schema of the model in a JSON form
	Schema *string `pulumi:"schema"`
}

type ModelState struct {
	// Content type of the model
	ContentType pulumix.Input[*string]
	// Description of the model
	Description pulumix.Input[*string]
	// Name of the model
	Name pulumix.Input[*string]
	// ID of the associated REST API
	RestApi pulumix.Input[*any]
	// Schema of the model in a JSON form
	Schema pulumix.Input[*string]
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	// Content type of the model
	ContentType string `pulumi:"contentType"`
	// Description of the model
	Description *string `pulumi:"description"`
	// Name of the model
	Name *string `pulumi:"name"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// Schema of the model in a JSON form
	Schema *string `pulumi:"schema"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// Content type of the model
	ContentType pulumix.Input[string]
	// Description of the model
	Description pulumix.Input[*string]
	// Name of the model
	Name pulumix.Input[*string]
	// ID of the associated REST API
	RestApi pulumix.Input[any]
	// Schema of the model in a JSON form
	Schema pulumix.Input[*string]
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Model)(nil)).Elem()
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

func (o ModelOutput) ToOutput(ctx context.Context) pulumix.Output[Model] {
	return pulumix.Output[Model]{
		OutputState: o.OutputState,
	}
}

// Content type of the model
func (o ModelOutput) ContentType() pulumix.Output[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[string] { return v.ContentType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the model
func (o ModelOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the model
func (o ModelOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the associated REST API
func (o ModelOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Schema of the model in a JSON form
func (o ModelOutput) Schema() pulumix.Output[*string] {
	value := pulumix.Apply[Model](o, func(v Model) pulumix.Output[*string] { return v.Schema })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ModelOutput{})
}
