// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an HTTP Method Integration for an API Gateway Integration.
type Integration struct {
	pulumi.CustomResourceState

	// List of cache key parameters for the integration.
	CacheKeyParameters pulumix.ArrayOutput[string] `pulumi:"cacheKeyParameters"`
	// Integration's cache namespace.
	CacheNamespace pulumix.Output[string] `pulumi:"cacheNamespace"`
	// ID of the VpcLink used for the integration. **Required** if `connectionType` is `VPC_LINK`
	ConnectionId pulumix.Output[*string] `pulumi:"connectionId"`
	// Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType pulumix.Output[*string] `pulumi:"connectionType"`
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling pulumix.Output[*string] `pulumi:"contentHandling"`
	// Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials pulumix.Output[*string] `pulumi:"credentials"`
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod pulumix.Output[string] `pulumi:"httpMethod"`
	// Integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod pulumix.Output[*string] `pulumi:"integrationHttpMethod"`
	// Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `requestTemplates` is used.
	PassthroughBehavior pulumix.Output[string] `pulumi:"passthroughBehavior"`
	// Map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `requestParameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters pulumix.MapOutput[string] `pulumi:"requestParameters"`
	// Map of the integration's request templates.
	RequestTemplates pulumix.MapOutput[string] `pulumi:"requestTemplates"`
	// API resource ID.
	ResourceId pulumix.Output[string] `pulumi:"resourceId"`
	// ID of the associated REST API.
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds pulumix.Output[*int] `pulumi:"timeoutMilliseconds"`
	// TLS configuration. See below.
	TlsConfig pulumix.GPtrOutput[IntegrationTlsConfig, IntegrationTlsConfigOutput] `pulumi:"tlsConfig"`
	// Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connectionType` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type pulumix.Output[string] `pulumi:"type"`
	// Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
	Uri pulumix.Output[*string] `pulumi:"uri"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Integration
	err := ctx.RegisterResource("aws:apigateway/integration:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("aws:apigateway/integration:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
	// List of cache key parameters for the integration.
	CacheKeyParameters []string `pulumi:"cacheKeyParameters"`
	// Integration's cache namespace.
	CacheNamespace *string `pulumi:"cacheNamespace"`
	// ID of the VpcLink used for the integration. **Required** if `connectionType` is `VPC_LINK`
	ConnectionId *string `pulumi:"connectionId"`
	// Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType *string `pulumi:"connectionType"`
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling *string `pulumi:"contentHandling"`
	// Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials *string `pulumi:"credentials"`
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod *string `pulumi:"httpMethod"`
	// Integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod *string `pulumi:"integrationHttpMethod"`
	// Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `requestTemplates` is used.
	PassthroughBehavior *string `pulumi:"passthroughBehavior"`
	// Map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `requestParameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters map[string]string `pulumi:"requestParameters"`
	// Map of the integration's request templates.
	RequestTemplates map[string]string `pulumi:"requestTemplates"`
	// API resource ID.
	ResourceId *string `pulumi:"resourceId"`
	// ID of the associated REST API.
	RestApi interface{} `pulumi:"restApi"`
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds *int `pulumi:"timeoutMilliseconds"`
	// TLS configuration. See below.
	TlsConfig *IntegrationTlsConfig `pulumi:"tlsConfig"`
	// Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connectionType` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type *string `pulumi:"type"`
	// Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
	Uri *string `pulumi:"uri"`
}

type IntegrationState struct {
	// List of cache key parameters for the integration.
	CacheKeyParameters pulumix.Input[[]string]
	// Integration's cache namespace.
	CacheNamespace pulumix.Input[*string]
	// ID of the VpcLink used for the integration. **Required** if `connectionType` is `VPC_LINK`
	ConnectionId pulumix.Input[*string]
	// Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType pulumix.Input[*string]
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling pulumix.Input[*string]
	// Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials pulumix.Input[*string]
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod pulumix.Input[*string]
	// Integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod pulumix.Input[*string]
	// Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `requestTemplates` is used.
	PassthroughBehavior pulumix.Input[*string]
	// Map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `requestParameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters pulumix.Input[map[string]string]
	// Map of the integration's request templates.
	RequestTemplates pulumix.Input[map[string]string]
	// API resource ID.
	ResourceId pulumix.Input[*string]
	// ID of the associated REST API.
	RestApi pulumix.Input[*any]
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds pulumix.Input[*int]
	// TLS configuration. See below.
	TlsConfig pulumix.Input[*IntegrationTlsConfigArgs]
	// Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connectionType` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type pulumix.Input[*string]
	// Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
	Uri pulumix.Input[*string]
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	// List of cache key parameters for the integration.
	CacheKeyParameters []string `pulumi:"cacheKeyParameters"`
	// Integration's cache namespace.
	CacheNamespace *string `pulumi:"cacheNamespace"`
	// ID of the VpcLink used for the integration. **Required** if `connectionType` is `VPC_LINK`
	ConnectionId *string `pulumi:"connectionId"`
	// Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType *string `pulumi:"connectionType"`
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling *string `pulumi:"contentHandling"`
	// Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials *string `pulumi:"credentials"`
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod string `pulumi:"httpMethod"`
	// Integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod *string `pulumi:"integrationHttpMethod"`
	// Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `requestTemplates` is used.
	PassthroughBehavior *string `pulumi:"passthroughBehavior"`
	// Map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `requestParameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters map[string]string `pulumi:"requestParameters"`
	// Map of the integration's request templates.
	RequestTemplates map[string]string `pulumi:"requestTemplates"`
	// API resource ID.
	ResourceId string `pulumi:"resourceId"`
	// ID of the associated REST API.
	RestApi interface{} `pulumi:"restApi"`
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds *int `pulumi:"timeoutMilliseconds"`
	// TLS configuration. See below.
	TlsConfig *IntegrationTlsConfig `pulumi:"tlsConfig"`
	// Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connectionType` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type string `pulumi:"type"`
	// Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// List of cache key parameters for the integration.
	CacheKeyParameters pulumix.Input[[]string]
	// Integration's cache namespace.
	CacheNamespace pulumix.Input[*string]
	// ID of the VpcLink used for the integration. **Required** if `connectionType` is `VPC_LINK`
	ConnectionId pulumix.Input[*string]
	// Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
	ConnectionType pulumix.Input[*string]
	// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	ContentHandling pulumix.Input[*string]
	// Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
	Credentials pulumix.Input[*string]
	// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
	// when calling the associated resource.
	HttpMethod pulumix.Input[string]
	// Integration HTTP method
	// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
	// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// Not all methods are compatible with all `AWS` integrations.
	// e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
	IntegrationHttpMethod pulumix.Input[*string]
	// Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `requestTemplates` is used.
	PassthroughBehavior pulumix.Input[*string]
	// Map of request query string parameters and headers that should be passed to the backend responder.
	// For example: `requestParameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
	RequestParameters pulumix.Input[map[string]string]
	// Map of the integration's request templates.
	RequestTemplates pulumix.Input[map[string]string]
	// API resource ID.
	ResourceId pulumix.Input[string]
	// ID of the associated REST API.
	RestApi pulumix.Input[any]
	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	TimeoutMilliseconds pulumix.Input[*int]
	// TLS configuration. See below.
	TlsConfig pulumix.Input[*IntegrationTlsConfigArgs]
	// Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connectionType` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	Type pulumix.Input[string]
	// Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
	// e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
	Uri pulumix.Input[*string]
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Integration)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[Integration] {
	return pulumix.Output[Integration]{
		OutputState: o.OutputState,
	}
}

// List of cache key parameters for the integration.
func (o IntegrationOutput) CacheKeyParameters() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.ArrayOutput[string] { return v.CacheKeyParameters })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Integration's cache namespace.
func (o IntegrationOutput) CacheNamespace() pulumix.Output[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[string] { return v.CacheNamespace })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the VpcLink used for the integration. **Required** if `connectionType` is `VPC_LINK`
func (o IntegrationOutput) ConnectionId() pulumix.Output[*string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*string] { return v.ConnectionId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
func (o IntegrationOutput) ConnectionType() pulumix.Output[*string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*string] { return v.ConnectionType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
func (o IntegrationOutput) ContentHandling() pulumix.Output[*string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*string] { return v.ContentHandling })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
func (o IntegrationOutput) Credentials() pulumix.Output[*string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*string] { return v.Credentials })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
// when calling the associated resource.
func (o IntegrationOutput) HttpMethod() pulumix.Output[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[string] { return v.HttpMethod })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Integration HTTP method
// (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
// **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
// Not all methods are compatible with all `AWS` integrations.
// e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
func (o IntegrationOutput) IntegrationHttpMethod() pulumix.Output[*string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*string] { return v.IntegrationHttpMethod })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `requestTemplates` is used.
func (o IntegrationOutput) PassthroughBehavior() pulumix.Output[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[string] { return v.PassthroughBehavior })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of request query string parameters and headers that should be passed to the backend responder.
// For example: `requestParameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
func (o IntegrationOutput) RequestParameters() pulumix.MapOutput[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.MapOutput[string] { return v.RequestParameters })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of the integration's request templates.
func (o IntegrationOutput) RequestTemplates() pulumix.MapOutput[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.MapOutput[string] { return v.RequestTemplates })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// API resource ID.
func (o IntegrationOutput) ResourceId() pulumix.Output[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[string] { return v.ResourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the associated REST API.
func (o IntegrationOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
func (o IntegrationOutput) TimeoutMilliseconds() pulumix.Output[*int] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*int] { return v.TimeoutMilliseconds })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// TLS configuration. See below.
func (o IntegrationOutput) TlsConfig() pulumix.GPtrOutput[IntegrationTlsConfig, IntegrationTlsConfigOutput] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.GPtrOutput[IntegrationTlsConfig, IntegrationTlsConfigOutput] {
		return v.TlsConfig
	})
	unwrapped := pulumix.Flatten[*IntegrationTlsConfig, pulumix.GPtrOutput[IntegrationTlsConfig, IntegrationTlsConfigOutput]](value)
	return pulumix.GPtrOutput[IntegrationTlsConfig, IntegrationTlsConfigOutput]{OutputState: unwrapped.OutputState}
}

// Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connectionType` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
func (o IntegrationOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
// e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
func (o IntegrationOutput) Uri() pulumix.Output[*string] {
	value := pulumix.Apply[Integration](o, func(v Integration) pulumix.Output[*string] { return v.Uri })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(IntegrationOutput{})
}
