// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides the ability to register instances and containers with an Application Load Balancer (ALB) or Network Load Balancer (NLB) target group. For attaching resources with Elastic Load Balancer (ELB), see the `elb.Attachment` resource.
//
// > **Note:** `alb.TargetGroupAttachment` is known as `lb.TargetGroupAttachment`. The functionality is identical.
type TargetGroupAttachment struct {
	pulumi.CustomResourceState

	// The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
	AvailabilityZone pulumix.Output[*string] `pulumi:"availabilityZone"`
	// The port on which targets receive traffic.
	Port pulumix.Output[*int] `pulumi:"port"`
	// The ARN of the target group with which to register targets.
	TargetGroupArn pulumix.Output[string] `pulumi:"targetGroupArn"`
	// The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.
	//
	// The following arguments are optional:
	TargetId pulumix.Output[string] `pulumi:"targetId"`
}

// NewTargetGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewTargetGroupAttachment(ctx *pulumi.Context,
	name string, args *TargetGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*TargetGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetGroupArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetGroupArn'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:applicationloadbalancing/targetGroupAttachment:TargetGroupAttachment"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetGroupAttachment
	err := ctx.RegisterResource("aws:alb/targetGroupAttachment:TargetGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetGroupAttachment gets an existing TargetGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetGroupAttachmentState, opts ...pulumi.ResourceOption) (*TargetGroupAttachment, error) {
	var resource TargetGroupAttachment
	err := ctx.ReadResource("aws:alb/targetGroupAttachment:TargetGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetGroupAttachment resources.
type targetGroupAttachmentState struct {
	// The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The port on which targets receive traffic.
	Port *int `pulumi:"port"`
	// The ARN of the target group with which to register targets.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
	// The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.
	//
	// The following arguments are optional:
	TargetId *string `pulumi:"targetId"`
}

type TargetGroupAttachmentState struct {
	// The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
	AvailabilityZone pulumix.Input[*string]
	// The port on which targets receive traffic.
	Port pulumix.Input[*int]
	// The ARN of the target group with which to register targets.
	TargetGroupArn pulumix.Input[*string]
	// The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.
	//
	// The following arguments are optional:
	TargetId pulumix.Input[*string]
}

func (TargetGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupAttachmentState)(nil)).Elem()
}

type targetGroupAttachmentArgs struct {
	// The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The port on which targets receive traffic.
	Port *int `pulumi:"port"`
	// The ARN of the target group with which to register targets.
	TargetGroupArn string `pulumi:"targetGroupArn"`
	// The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.
	//
	// The following arguments are optional:
	TargetId string `pulumi:"targetId"`
}

// The set of arguments for constructing a TargetGroupAttachment resource.
type TargetGroupAttachmentArgs struct {
	// The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
	AvailabilityZone pulumix.Input[*string]
	// The port on which targets receive traffic.
	Port pulumix.Input[*int]
	// The ARN of the target group with which to register targets.
	TargetGroupArn pulumix.Input[string]
	// The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.
	//
	// The following arguments are optional:
	TargetId pulumix.Input[string]
}

func (TargetGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupAttachmentArgs)(nil)).Elem()
}

type TargetGroupAttachmentOutput struct{ *pulumi.OutputState }

func (TargetGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupAttachment)(nil)).Elem()
}

func (o TargetGroupAttachmentOutput) ToTargetGroupAttachmentOutput() TargetGroupAttachmentOutput {
	return o
}

func (o TargetGroupAttachmentOutput) ToTargetGroupAttachmentOutputWithContext(ctx context.Context) TargetGroupAttachmentOutput {
	return o
}

func (o TargetGroupAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupAttachment] {
	return pulumix.Output[TargetGroupAttachment]{
		OutputState: o.OutputState,
	}
}

// The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
func (o TargetGroupAttachmentOutput) AvailabilityZone() pulumix.Output[*string] {
	value := pulumix.Apply[TargetGroupAttachment](o, func(v TargetGroupAttachment) pulumix.Output[*string] { return v.AvailabilityZone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The port on which targets receive traffic.
func (o TargetGroupAttachmentOutput) Port() pulumix.Output[*int] {
	value := pulumix.Apply[TargetGroupAttachment](o, func(v TargetGroupAttachment) pulumix.Output[*int] { return v.Port })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ARN of the target group with which to register targets.
func (o TargetGroupAttachmentOutput) TargetGroupArn() pulumix.Output[string] {
	value := pulumix.Apply[TargetGroupAttachment](o, func(v TargetGroupAttachment) pulumix.Output[string] { return v.TargetGroupArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.
//
// The following arguments are optional:
func (o TargetGroupAttachmentOutput) TargetId() pulumix.Output[string] {
	value := pulumix.Apply[TargetGroupAttachment](o, func(v TargetGroupAttachment) pulumix.Output[string] { return v.TargetId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TargetGroupAttachmentOutput{})
}
