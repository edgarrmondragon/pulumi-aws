// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an API Gateway Stage. A stage is a named reference to a deployment, which can be done via the `apigateway.Deployment` resource. Stages can be optionally managed further with the `apigateway.BasePathMapping` resource, `apigateway.DomainName` resource, and `awsApiMethodSettings` resource. For more information, see the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-stages.html).
type Stage struct {
	pulumi.CustomResourceState

	// Enables access logs for the API stage. See Access Log Settings below.
	AccessLogSettings pulumix.GPtrOutput[StageAccessLogSettings, StageAccessLogSettingsOutput] `pulumi:"accessLogSettings"`
	// ARN
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Whether a cache cluster is enabled for the stage
	CacheClusterEnabled pulumix.Output[*bool] `pulumi:"cacheClusterEnabled"`
	// Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize pulumix.Output[*string] `pulumi:"cacheClusterSize"`
	// Configuration settings of a canary deployment. See Canary Settings below.
	CanarySettings pulumix.GPtrOutput[StageCanarySettings, StageCanarySettingsOutput] `pulumi:"canarySettings"`
	// Identifier of a client certificate for the stage.
	ClientCertificateId pulumix.Output[*string] `pulumi:"clientCertificateId"`
	// ID of the deployment that the stage points to
	Deployment pulumix.Output[string] `pulumi:"deployment"`
	// Description of the stage.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Version of the associated API documentation
	DocumentationVersion pulumix.Output[*string] `pulumi:"documentationVersion"`
	// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn pulumix.Output[string] `pulumi:"executionArn"`
	// URL to invoke the API pointing to the stage,
	// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl pulumix.Output[string] `pulumi:"invokeUrl"`
	// ID of the associated REST API
	RestApi pulumix.Output[string] `pulumi:"restApi"`
	// Name of the stage
	StageName pulumix.Output[string] `pulumi:"stageName"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Map that defines the stage variables
	Variables pulumix.MapOutput[string] `pulumi:"variables"`
	// ARN of the WebAcl associated with the Stage.
	WebAclArn pulumix.Output[string] `pulumi:"webAclArn"`
	// Whether active tracing with X-ray is enabled. Defaults to `false`.
	XrayTracingEnabled pulumix.Output[*bool] `pulumi:"xrayTracingEnabled"`
}

// NewStage registers a new resource with the given unique name, arguments, and options.
func NewStage(ctx *pulumi.Context,
	name string, args *StageArgs, opts ...pulumi.ResourceOption) (*Stage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Deployment == nil {
		return nil, errors.New("invalid value for required argument 'Deployment'")
	}
	if args.RestApi == nil {
		return nil, errors.New("invalid value for required argument 'RestApi'")
	}
	if args.StageName == nil {
		return nil, errors.New("invalid value for required argument 'StageName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Stage
	err := ctx.RegisterResource("aws:apigateway/stage:Stage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStage gets an existing Stage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageState, opts ...pulumi.ResourceOption) (*Stage, error) {
	var resource Stage
	err := ctx.ReadResource("aws:apigateway/stage:Stage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stage resources.
type stageState struct {
	// Enables access logs for the API stage. See Access Log Settings below.
	AccessLogSettings *StageAccessLogSettings `pulumi:"accessLogSettings"`
	// ARN
	Arn *string `pulumi:"arn"`
	// Whether a cache cluster is enabled for the stage
	CacheClusterEnabled *bool `pulumi:"cacheClusterEnabled"`
	// Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize *string `pulumi:"cacheClusterSize"`
	// Configuration settings of a canary deployment. See Canary Settings below.
	CanarySettings *StageCanarySettings `pulumi:"canarySettings"`
	// Identifier of a client certificate for the stage.
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// ID of the deployment that the stage points to
	Deployment interface{} `pulumi:"deployment"`
	// Description of the stage.
	Description *string `pulumi:"description"`
	// Version of the associated API documentation
	DocumentationVersion *string `pulumi:"documentationVersion"`
	// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn *string `pulumi:"executionArn"`
	// URL to invoke the API pointing to the stage,
	// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl *string `pulumi:"invokeUrl"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// Name of the stage
	StageName *string `pulumi:"stageName"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Map that defines the stage variables
	Variables map[string]string `pulumi:"variables"`
	// ARN of the WebAcl associated with the Stage.
	WebAclArn *string `pulumi:"webAclArn"`
	// Whether active tracing with X-ray is enabled. Defaults to `false`.
	XrayTracingEnabled *bool `pulumi:"xrayTracingEnabled"`
}

type StageState struct {
	// Enables access logs for the API stage. See Access Log Settings below.
	AccessLogSettings pulumix.Input[*StageAccessLogSettingsArgs]
	// ARN
	Arn pulumix.Input[*string]
	// Whether a cache cluster is enabled for the stage
	CacheClusterEnabled pulumix.Input[*bool]
	// Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize pulumix.Input[*string]
	// Configuration settings of a canary deployment. See Canary Settings below.
	CanarySettings pulumix.Input[*StageCanarySettingsArgs]
	// Identifier of a client certificate for the stage.
	ClientCertificateId pulumix.Input[*string]
	// ID of the deployment that the stage points to
	Deployment pulumix.Input[*any]
	// Description of the stage.
	Description pulumix.Input[*string]
	// Version of the associated API documentation
	DocumentationVersion pulumix.Input[*string]
	// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
	ExecutionArn pulumix.Input[*string]
	// URL to invoke the API pointing to the stage,
	// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
	InvokeUrl pulumix.Input[*string]
	// ID of the associated REST API
	RestApi pulumix.Input[*any]
	// Name of the stage
	StageName pulumix.Input[*string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Map that defines the stage variables
	Variables pulumix.Input[map[string]string]
	// ARN of the WebAcl associated with the Stage.
	WebAclArn pulumix.Input[*string]
	// Whether active tracing with X-ray is enabled. Defaults to `false`.
	XrayTracingEnabled pulumix.Input[*bool]
}

func (StageState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageState)(nil)).Elem()
}

type stageArgs struct {
	// Enables access logs for the API stage. See Access Log Settings below.
	AccessLogSettings *StageAccessLogSettings `pulumi:"accessLogSettings"`
	// Whether a cache cluster is enabled for the stage
	CacheClusterEnabled *bool `pulumi:"cacheClusterEnabled"`
	// Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize *string `pulumi:"cacheClusterSize"`
	// Configuration settings of a canary deployment. See Canary Settings below.
	CanarySettings *StageCanarySettings `pulumi:"canarySettings"`
	// Identifier of a client certificate for the stage.
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// ID of the deployment that the stage points to
	Deployment interface{} `pulumi:"deployment"`
	// Description of the stage.
	Description *string `pulumi:"description"`
	// Version of the associated API documentation
	DocumentationVersion *string `pulumi:"documentationVersion"`
	// ID of the associated REST API
	RestApi interface{} `pulumi:"restApi"`
	// Name of the stage
	StageName string `pulumi:"stageName"`
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Map that defines the stage variables
	Variables map[string]string `pulumi:"variables"`
	// Whether active tracing with X-ray is enabled. Defaults to `false`.
	XrayTracingEnabled *bool `pulumi:"xrayTracingEnabled"`
}

// The set of arguments for constructing a Stage resource.
type StageArgs struct {
	// Enables access logs for the API stage. See Access Log Settings below.
	AccessLogSettings pulumix.Input[*StageAccessLogSettingsArgs]
	// Whether a cache cluster is enabled for the stage
	CacheClusterEnabled pulumix.Input[*bool]
	// Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
	CacheClusterSize pulumix.Input[*string]
	// Configuration settings of a canary deployment. See Canary Settings below.
	CanarySettings pulumix.Input[*StageCanarySettingsArgs]
	// Identifier of a client certificate for the stage.
	ClientCertificateId pulumix.Input[*string]
	// ID of the deployment that the stage points to
	Deployment pulumix.Input[any]
	// Description of the stage.
	Description pulumix.Input[*string]
	// Version of the associated API documentation
	DocumentationVersion pulumix.Input[*string]
	// ID of the associated REST API
	RestApi pulumix.Input[any]
	// Name of the stage
	StageName pulumix.Input[string]
	// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Map that defines the stage variables
	Variables pulumix.Input[map[string]string]
	// Whether active tracing with X-ray is enabled. Defaults to `false`.
	XrayTracingEnabled pulumix.Input[*bool]
}

func (StageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageArgs)(nil)).Elem()
}

type StageOutput struct{ *pulumi.OutputState }

func (StageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil)).Elem()
}

func (o StageOutput) ToStageOutput() StageOutput {
	return o
}

func (o StageOutput) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return o
}

func (o StageOutput) ToOutput(ctx context.Context) pulumix.Output[Stage] {
	return pulumix.Output[Stage]{
		OutputState: o.OutputState,
	}
}

// Enables access logs for the API stage. See Access Log Settings below.
func (o StageOutput) AccessLogSettings() pulumix.GPtrOutput[StageAccessLogSettings, StageAccessLogSettingsOutput] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.GPtrOutput[StageAccessLogSettings, StageAccessLogSettingsOutput] {
		return v.AccessLogSettings
	})
	unwrapped := pulumix.Flatten[*StageAccessLogSettings, pulumix.GPtrOutput[StageAccessLogSettings, StageAccessLogSettingsOutput]](value)
	return pulumix.GPtrOutput[StageAccessLogSettings, StageAccessLogSettingsOutput]{OutputState: unwrapped.OutputState}
}

// ARN
func (o StageOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether a cache cluster is enabled for the stage
func (o StageOutput) CacheClusterEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[*bool] { return v.CacheClusterEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
func (o StageOutput) CacheClusterSize() pulumix.Output[*string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[*string] { return v.CacheClusterSize })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Configuration settings of a canary deployment. See Canary Settings below.
func (o StageOutput) CanarySettings() pulumix.GPtrOutput[StageCanarySettings, StageCanarySettingsOutput] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.GPtrOutput[StageCanarySettings, StageCanarySettingsOutput] {
		return v.CanarySettings
	})
	unwrapped := pulumix.Flatten[*StageCanarySettings, pulumix.GPtrOutput[StageCanarySettings, StageCanarySettingsOutput]](value)
	return pulumix.GPtrOutput[StageCanarySettings, StageCanarySettingsOutput]{OutputState: unwrapped.OutputState}
}

// Identifier of a client certificate for the stage.
func (o StageOutput) ClientCertificateId() pulumix.Output[*string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[*string] { return v.ClientCertificateId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of the deployment that the stage points to
func (o StageOutput) Deployment() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.Deployment })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the stage.
func (o StageOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Version of the associated API documentation
func (o StageOutput) DocumentationVersion() pulumix.Output[*string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[*string] { return v.DocumentationVersion })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Execution ARN to be used in `lambdaPermission`'s `sourceArn`
// when allowing API Gateway to invoke a Lambda function,
// e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
func (o StageOutput) ExecutionArn() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.ExecutionArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// URL to invoke the API pointing to the stage,
// e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
func (o StageOutput) InvokeUrl() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.InvokeUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the associated REST API
func (o StageOutput) RestApi() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.RestApi })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the stage
func (o StageOutput) StageName() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.StageName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o StageOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o StageOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Map that defines the stage variables
func (o StageOutput) Variables() pulumix.MapOutput[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.MapOutput[string] { return v.Variables })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// ARN of the WebAcl associated with the Stage.
func (o StageOutput) WebAclArn() pulumix.Output[string] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[string] { return v.WebAclArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether active tracing with X-ray is enabled. Defaults to `false`.
func (o StageOutput) XrayTracingEnabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Stage](o, func(v Stage) pulumix.Output[*bool] { return v.XrayTracingEnabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(StageOutput{})
}
