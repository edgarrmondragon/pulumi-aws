// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscalingplans

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AWS Auto Scaling scaling plan.
// More information can be found in the [AWS Auto Scaling User Guide](https://docs.aws.amazon.com/autoscaling/plans/userguide/what-is-aws-auto-scaling.html).
//
// > **NOTE:** The AWS Auto Scaling service uses an AWS IAM service-linked role to manage predictive scaling of Amazon EC2 Auto Scaling groups. The service attempts to automatically create this role the first time a scaling plan with predictive scaling enabled is created.
// An `iam.ServiceLinkedRole` resource can be used to manually manage this role.
// See the [AWS documentation](https://docs.aws.amazon.com/autoscaling/plans/userguide/aws-auto-scaling-service-linked-roles.html#create-service-linked-role-manual) for more details.
type ScalingPlan struct {
	pulumi.CustomResourceState

	// CloudFormation stack or set of tags. You can create one scaling plan per application source.
	ApplicationSource pulumix.GPtrOutput[ScalingPlanApplicationSource, ScalingPlanApplicationSourceOutput] `pulumi:"applicationSource"`
	// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
	Name pulumix.Output[string] `pulumi:"name"`
	// Scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
	ScalingInstructions pulumix.GArrayOutput[ScalingPlanScalingInstruction, ScalingPlanScalingInstructionOutput] `pulumi:"scalingInstructions"`
	// The version number of the scaling plan. This value is always 1.
	ScalingPlanVersion pulumix.Output[int] `pulumi:"scalingPlanVersion"`
}

// NewScalingPlan registers a new resource with the given unique name, arguments, and options.
func NewScalingPlan(ctx *pulumi.Context,
	name string, args *ScalingPlanArgs, opts ...pulumi.ResourceOption) (*ScalingPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationSource == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationSource'")
	}
	if args.ScalingInstructions == nil {
		return nil, errors.New("invalid value for required argument 'ScalingInstructions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScalingPlan
	err := ctx.RegisterResource("aws:autoscalingplans/scalingPlan:ScalingPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScalingPlan gets an existing ScalingPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScalingPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScalingPlanState, opts ...pulumi.ResourceOption) (*ScalingPlan, error) {
	var resource ScalingPlan
	err := ctx.ReadResource("aws:autoscalingplans/scalingPlan:ScalingPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScalingPlan resources.
type scalingPlanState struct {
	// CloudFormation stack or set of tags. You can create one scaling plan per application source.
	ApplicationSource *ScalingPlanApplicationSource `pulumi:"applicationSource"`
	// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
	Name *string `pulumi:"name"`
	// Scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
	ScalingInstructions []ScalingPlanScalingInstruction `pulumi:"scalingInstructions"`
	// The version number of the scaling plan. This value is always 1.
	ScalingPlanVersion *int `pulumi:"scalingPlanVersion"`
}

type ScalingPlanState struct {
	// CloudFormation stack or set of tags. You can create one scaling plan per application source.
	ApplicationSource pulumix.Input[*ScalingPlanApplicationSourceArgs]
	// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
	Name pulumix.Input[*string]
	// Scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
	ScalingInstructions pulumix.Input[[]*ScalingPlanScalingInstructionArgs]
	// The version number of the scaling plan. This value is always 1.
	ScalingPlanVersion pulumix.Input[*int]
}

func (ScalingPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingPlanState)(nil)).Elem()
}

type scalingPlanArgs struct {
	// CloudFormation stack or set of tags. You can create one scaling plan per application source.
	ApplicationSource ScalingPlanApplicationSource `pulumi:"applicationSource"`
	// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
	Name *string `pulumi:"name"`
	// Scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
	ScalingInstructions []ScalingPlanScalingInstruction `pulumi:"scalingInstructions"`
}

// The set of arguments for constructing a ScalingPlan resource.
type ScalingPlanArgs struct {
	// CloudFormation stack or set of tags. You can create one scaling plan per application source.
	ApplicationSource pulumix.Input[*ScalingPlanApplicationSourceArgs]
	// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
	Name pulumix.Input[*string]
	// Scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
	ScalingInstructions pulumix.Input[[]*ScalingPlanScalingInstructionArgs]
}

func (ScalingPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingPlanArgs)(nil)).Elem()
}

type ScalingPlanOutput struct{ *pulumi.OutputState }

func (ScalingPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingPlan)(nil)).Elem()
}

func (o ScalingPlanOutput) ToScalingPlanOutput() ScalingPlanOutput {
	return o
}

func (o ScalingPlanOutput) ToScalingPlanOutputWithContext(ctx context.Context) ScalingPlanOutput {
	return o
}

func (o ScalingPlanOutput) ToOutput(ctx context.Context) pulumix.Output[ScalingPlan] {
	return pulumix.Output[ScalingPlan]{
		OutputState: o.OutputState,
	}
}

// CloudFormation stack or set of tags. You can create one scaling plan per application source.
func (o ScalingPlanOutput) ApplicationSource() pulumix.GPtrOutput[ScalingPlanApplicationSource, ScalingPlanApplicationSourceOutput] {
	value := pulumix.Apply[ScalingPlan](o, func(v ScalingPlan) pulumix.GPtrOutput[ScalingPlanApplicationSource, ScalingPlanApplicationSourceOutput] {
		return v.ApplicationSource
	})
	unwrapped := pulumix.Flatten[*ScalingPlanApplicationSource, pulumix.GPtrOutput[ScalingPlanApplicationSource, ScalingPlanApplicationSourceOutput]](value)
	return pulumix.GPtrOutput[ScalingPlanApplicationSource, ScalingPlanApplicationSourceOutput]{OutputState: unwrapped.OutputState}
}

// Name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
func (o ScalingPlanOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ScalingPlan](o, func(v ScalingPlan) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Scaling instructions. More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html).
func (o ScalingPlanOutput) ScalingInstructions() pulumix.GArrayOutput[ScalingPlanScalingInstruction, ScalingPlanScalingInstructionOutput] {
	value := pulumix.Apply[ScalingPlan](o, func(v ScalingPlan) pulumix.GArrayOutput[ScalingPlanScalingInstruction, ScalingPlanScalingInstructionOutput] {
		return v.ScalingInstructions
	})
	unwrapped := pulumix.Flatten[[]ScalingPlanScalingInstruction, pulumix.GArrayOutput[ScalingPlanScalingInstruction, ScalingPlanScalingInstructionOutput]](value)
	return pulumix.GArrayOutput[ScalingPlanScalingInstruction, ScalingPlanScalingInstructionOutput]{OutputState: unwrapped.OutputState}
}

// The version number of the scaling plan. This value is always 1.
func (o ScalingPlanOutput) ScalingPlanVersion() pulumix.Output[int] {
	value := pulumix.Apply[ScalingPlan](o, func(v ScalingPlan) pulumix.Output[int] { return v.ScalingPlanVersion })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(ScalingPlanOutput{})
}
