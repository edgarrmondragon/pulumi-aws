// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rbin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type RuleLockConfiguration struct {
	// Information about the retention rule unlock delay. See `unlockDelay` below.
	UnlockDelay RuleLockConfigurationUnlockDelay `pulumi:"unlockDelay"`
}

type RuleLockConfigurationArgs struct {
	// Information about the retention rule unlock delay. See `unlockDelay` below.
	UnlockDelay pulumix.Input[*RuleLockConfigurationUnlockDelayArgs] `pulumi:"unlockDelay"`
}

func (RuleLockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfiguration)(nil)).Elem()
}

func (i RuleLockConfigurationArgs) ToRuleLockConfigurationOutput() RuleLockConfigurationOutput {
	return i.ToRuleLockConfigurationOutputWithContext(context.Background())
}

func (i RuleLockConfigurationArgs) ToRuleLockConfigurationOutputWithContext(ctx context.Context) RuleLockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationOutput)
}

func (i *RuleLockConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleLockConfigurationArgs] {
	return pulumix.Val(i)
}

type RuleLockConfigurationOutput struct{ *pulumi.OutputState }

func (RuleLockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfiguration)(nil)).Elem()
}

func (o RuleLockConfigurationOutput) ToRuleLockConfigurationOutput() RuleLockConfigurationOutput {
	return o
}

func (o RuleLockConfigurationOutput) ToRuleLockConfigurationOutputWithContext(ctx context.Context) RuleLockConfigurationOutput {
	return o
}

func (o RuleLockConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RuleLockConfiguration] {
	return pulumix.Output[RuleLockConfiguration]{
		OutputState: o.OutputState,
	}
}

// Information about the retention rule unlock delay. See `unlockDelay` below.
func (o RuleLockConfigurationOutput) UnlockDelay() pulumix.GPtrOutput[RuleLockConfigurationUnlockDelay, RuleLockConfigurationUnlockDelayOutput] {
	value := pulumix.Apply[RuleLockConfiguration](o, func(v RuleLockConfiguration) RuleLockConfigurationUnlockDelay { return v.UnlockDelay })
	return pulumix.GPtrOutput[RuleLockConfigurationUnlockDelay, RuleLockConfigurationUnlockDelayOutput]{OutputState: value.OutputState}
}

type RuleLockConfigurationUnlockDelay struct {
	// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
	UnlockDelayUnit string `pulumi:"unlockDelayUnit"`
	// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
	UnlockDelayValue int `pulumi:"unlockDelayValue"`
}

type RuleLockConfigurationUnlockDelayArgs struct {
	// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
	UnlockDelayUnit pulumix.Input[string] `pulumi:"unlockDelayUnit"`
	// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
	UnlockDelayValue pulumix.Input[int] `pulumi:"unlockDelayValue"`
}

func (RuleLockConfigurationUnlockDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfigurationUnlockDelay)(nil)).Elem()
}

func (i RuleLockConfigurationUnlockDelayArgs) ToRuleLockConfigurationUnlockDelayOutput() RuleLockConfigurationUnlockDelayOutput {
	return i.ToRuleLockConfigurationUnlockDelayOutputWithContext(context.Background())
}

func (i RuleLockConfigurationUnlockDelayArgs) ToRuleLockConfigurationUnlockDelayOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleLockConfigurationUnlockDelayOutput)
}

func (i *RuleLockConfigurationUnlockDelayArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleLockConfigurationUnlockDelayArgs] {
	return pulumix.Val(i)
}

type RuleLockConfigurationUnlockDelayOutput struct{ *pulumi.OutputState }

func (RuleLockConfigurationUnlockDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleLockConfigurationUnlockDelay)(nil)).Elem()
}

func (o RuleLockConfigurationUnlockDelayOutput) ToRuleLockConfigurationUnlockDelayOutput() RuleLockConfigurationUnlockDelayOutput {
	return o
}

func (o RuleLockConfigurationUnlockDelayOutput) ToRuleLockConfigurationUnlockDelayOutputWithContext(ctx context.Context) RuleLockConfigurationUnlockDelayOutput {
	return o
}

func (o RuleLockConfigurationUnlockDelayOutput) ToOutput(ctx context.Context) pulumix.Output[RuleLockConfigurationUnlockDelay] {
	return pulumix.Output[RuleLockConfigurationUnlockDelay]{
		OutputState: o.OutputState,
	}
}

// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
func (o RuleLockConfigurationUnlockDelayOutput) UnlockDelayUnit() pulumix.Output[string] {
	return pulumix.Apply[RuleLockConfigurationUnlockDelay](o, func(v RuleLockConfigurationUnlockDelay) string { return v.UnlockDelayUnit })
}

// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
func (o RuleLockConfigurationUnlockDelayOutput) UnlockDelayValue() pulumix.Output[int] {
	return pulumix.Apply[RuleLockConfigurationUnlockDelay](o, func(v RuleLockConfigurationUnlockDelay) int { return v.UnlockDelayValue })
}

type RuleResourceTag struct {
	// The tag key.
	//
	// The following argument is optional:
	ResourceTagKey string `pulumi:"resourceTagKey"`
	// The tag value.
	ResourceTagValue *string `pulumi:"resourceTagValue"`
}

type RuleResourceTagArgs struct {
	// The tag key.
	//
	// The following argument is optional:
	ResourceTagKey pulumix.Input[string] `pulumi:"resourceTagKey"`
	// The tag value.
	ResourceTagValue pulumix.Input[*string] `pulumi:"resourceTagValue"`
}

func (RuleResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResourceTag)(nil)).Elem()
}

func (i RuleResourceTagArgs) ToRuleResourceTagOutput() RuleResourceTagOutput {
	return i.ToRuleResourceTagOutputWithContext(context.Background())
}

func (i RuleResourceTagArgs) ToRuleResourceTagOutputWithContext(ctx context.Context) RuleResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResourceTagOutput)
}

func (i *RuleResourceTagArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleResourceTagArgs] {
	return pulumix.Val(i)
}

type RuleResourceTagOutput struct{ *pulumi.OutputState }

func (RuleResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResourceTag)(nil)).Elem()
}

func (o RuleResourceTagOutput) ToRuleResourceTagOutput() RuleResourceTagOutput {
	return o
}

func (o RuleResourceTagOutput) ToRuleResourceTagOutputWithContext(ctx context.Context) RuleResourceTagOutput {
	return o
}

func (o RuleResourceTagOutput) ToOutput(ctx context.Context) pulumix.Output[RuleResourceTag] {
	return pulumix.Output[RuleResourceTag]{
		OutputState: o.OutputState,
	}
}

// The tag key.
//
// The following argument is optional:
func (o RuleResourceTagOutput) ResourceTagKey() pulumix.Output[string] {
	return pulumix.Apply[RuleResourceTag](o, func(v RuleResourceTag) string { return v.ResourceTagKey })
}

// The tag value.
func (o RuleResourceTagOutput) ResourceTagValue() pulumix.Output[*string] {
	return pulumix.Apply[RuleResourceTag](o, func(v RuleResourceTag) *string { return v.ResourceTagValue })
}

type RuleRetentionPeriod struct {
	// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
	RetentionPeriodUnit string `pulumi:"retentionPeriodUnit"`
	// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
	RetentionPeriodValue int `pulumi:"retentionPeriodValue"`
}

type RuleRetentionPeriodArgs struct {
	// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
	RetentionPeriodUnit pulumix.Input[string] `pulumi:"retentionPeriodUnit"`
	// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
	RetentionPeriodValue pulumix.Input[int] `pulumi:"retentionPeriodValue"`
}

func (RuleRetentionPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetentionPeriod)(nil)).Elem()
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput {
	return i.ToRuleRetentionPeriodOutputWithContext(context.Background())
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodOutputWithContext(ctx context.Context) RuleRetentionPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetentionPeriodOutput)
}

func (i *RuleRetentionPeriodArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleRetentionPeriodArgs] {
	return pulumix.Val(i)
}

type RuleRetentionPeriodOutput struct{ *pulumi.OutputState }

func (RuleRetentionPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetentionPeriod)(nil)).Elem()
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput {
	return o
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodOutputWithContext(ctx context.Context) RuleRetentionPeriodOutput {
	return o
}

func (o RuleRetentionPeriodOutput) ToOutput(ctx context.Context) pulumix.Output[RuleRetentionPeriod] {
	return pulumix.Output[RuleRetentionPeriod]{
		OutputState: o.OutputState,
	}
}

// The unit of time in which the retention period is measured. Currently, only DAYS is supported.
func (o RuleRetentionPeriodOutput) RetentionPeriodUnit() pulumix.Output[string] {
	return pulumix.Apply[RuleRetentionPeriod](o, func(v RuleRetentionPeriod) string { return v.RetentionPeriodUnit })
}

// The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
func (o RuleRetentionPeriodOutput) RetentionPeriodValue() pulumix.Output[int] {
	return pulumix.Apply[RuleRetentionPeriod](o, func(v RuleRetentionPeriod) int { return v.RetentionPeriodValue })
}

func init() {
	pulumi.RegisterOutputType(RuleLockConfigurationOutput{})
	pulumi.RegisterOutputType(RuleLockConfigurationUnlockDelayOutput{})
	pulumi.RegisterOutputType(RuleResourceTagOutput{})
	pulumi.RegisterOutputType(RuleRetentionPeriodOutput{})
}
