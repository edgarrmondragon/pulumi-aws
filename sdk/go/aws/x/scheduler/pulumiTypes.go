// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scheduler

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ScheduleFlexibleTimeWindow struct {
	// Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
	MaximumWindowInMinutes *int `pulumi:"maximumWindowInMinutes"`
	// Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
	Mode string `pulumi:"mode"`
}

type ScheduleFlexibleTimeWindowArgs struct {
	// Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
	MaximumWindowInMinutes pulumix.Input[*int] `pulumi:"maximumWindowInMinutes"`
	// Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
	Mode pulumix.Input[string] `pulumi:"mode"`
}

func (ScheduleFlexibleTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFlexibleTimeWindow)(nil)).Elem()
}

func (i ScheduleFlexibleTimeWindowArgs) ToScheduleFlexibleTimeWindowOutput() ScheduleFlexibleTimeWindowOutput {
	return i.ToScheduleFlexibleTimeWindowOutputWithContext(context.Background())
}

func (i ScheduleFlexibleTimeWindowArgs) ToScheduleFlexibleTimeWindowOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleFlexibleTimeWindowOutput)
}

func (i *ScheduleFlexibleTimeWindowArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleFlexibleTimeWindowArgs] {
	return pulumix.Val(i)
}

type ScheduleFlexibleTimeWindowOutput struct{ *pulumi.OutputState }

func (ScheduleFlexibleTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFlexibleTimeWindow)(nil)).Elem()
}

func (o ScheduleFlexibleTimeWindowOutput) ToScheduleFlexibleTimeWindowOutput() ScheduleFlexibleTimeWindowOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowOutput) ToScheduleFlexibleTimeWindowOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleFlexibleTimeWindow] {
	return pulumix.Output[ScheduleFlexibleTimeWindow]{
		OutputState: o.OutputState,
	}
}

// Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
func (o ScheduleFlexibleTimeWindowOutput) MaximumWindowInMinutes() pulumix.Output[*int] {
	return pulumix.Apply[ScheduleFlexibleTimeWindow](o, func(v ScheduleFlexibleTimeWindow) *int { return v.MaximumWindowInMinutes })
}

// Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
func (o ScheduleFlexibleTimeWindowOutput) Mode() pulumix.Output[string] {
	return pulumix.Apply[ScheduleFlexibleTimeWindow](o, func(v ScheduleFlexibleTimeWindow) string { return v.Mode })
}

type ScheduleTarget struct {
	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn string `pulumi:"arn"`
	// Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.
	DeadLetterConfig *ScheduleTargetDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Templated target type for the Amazon ECS [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation. Detailed below.
	EcsParameters *ScheduleTargetEcsParameters `pulumi:"ecsParameters"`
	// Templated target type for the EventBridge [`PutEvents`](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation. Detailed below.
	EventbridgeParameters *ScheduleTargetEventbridgeParameters `pulumi:"eventbridgeParameters"`
	// Text, or well-formed JSON, passed to the target. Read more in [Universal target](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html).
	Input *string `pulumi:"input"`
	// Templated target type for the Amazon Kinesis [`PutRecord`](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html) API operation. Detailed below.
	KinesisParameters *ScheduleTargetKinesisParameters `pulumi:"kinesisParameters"`
	// Information about the retry policy settings. Detailed below.
	RetryPolicy *ScheduleTargetRetryPolicy `pulumi:"retryPolicy"`
	// ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in [Set up the execution role](https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role).
	//
	// The following arguments are optional:
	RoleArn string `pulumi:"roleArn"`
	// Templated target type for the Amazon SageMaker [`StartPipelineExecution`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation. Detailed below.
	SagemakerPipelineParameters *ScheduleTargetSagemakerPipelineParameters `pulumi:"sagemakerPipelineParameters"`
	// The templated target type for the Amazon SQS [`SendMessage`](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Detailed below.
	SqsParameters *ScheduleTargetSqsParameters `pulumi:"sqsParameters"`
}

type ScheduleTargetArgs struct {
	// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.
	DeadLetterConfig pulumix.Input[*ScheduleTargetDeadLetterConfigArgs] `pulumi:"deadLetterConfig"`
	// Templated target type for the Amazon ECS [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation. Detailed below.
	EcsParameters pulumix.Input[*ScheduleTargetEcsParametersArgs] `pulumi:"ecsParameters"`
	// Templated target type for the EventBridge [`PutEvents`](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation. Detailed below.
	EventbridgeParameters pulumix.Input[*ScheduleTargetEventbridgeParametersArgs] `pulumi:"eventbridgeParameters"`
	// Text, or well-formed JSON, passed to the target. Read more in [Universal target](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html).
	Input pulumix.Input[*string] `pulumi:"input"`
	// Templated target type for the Amazon Kinesis [`PutRecord`](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html) API operation. Detailed below.
	KinesisParameters pulumix.Input[*ScheduleTargetKinesisParametersArgs] `pulumi:"kinesisParameters"`
	// Information about the retry policy settings. Detailed below.
	RetryPolicy pulumix.Input[*ScheduleTargetRetryPolicyArgs] `pulumi:"retryPolicy"`
	// ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in [Set up the execution role](https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role).
	//
	// The following arguments are optional:
	RoleArn pulumix.Input[string] `pulumi:"roleArn"`
	// Templated target type for the Amazon SageMaker [`StartPipelineExecution`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation. Detailed below.
	SagemakerPipelineParameters pulumix.Input[*ScheduleTargetSagemakerPipelineParametersArgs] `pulumi:"sagemakerPipelineParameters"`
	// The templated target type for the Amazon SQS [`SendMessage`](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Detailed below.
	SqsParameters pulumix.Input[*ScheduleTargetSqsParametersArgs] `pulumi:"sqsParameters"`
}

func (ScheduleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTarget)(nil)).Elem()
}

func (i ScheduleTargetArgs) ToScheduleTargetOutput() ScheduleTargetOutput {
	return i.ToScheduleTargetOutputWithContext(context.Background())
}

func (i ScheduleTargetArgs) ToScheduleTargetOutputWithContext(ctx context.Context) ScheduleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetOutput)
}

func (i *ScheduleTargetArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetOutput struct{ *pulumi.OutputState }

func (ScheduleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTarget)(nil)).Elem()
}

func (o ScheduleTargetOutput) ToScheduleTargetOutput() ScheduleTargetOutput {
	return o
}

func (o ScheduleTargetOutput) ToScheduleTargetOutputWithContext(ctx context.Context) ScheduleTargetOutput {
	return o
}

func (o ScheduleTargetOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTarget] {
	return pulumix.Output[ScheduleTarget]{
		OutputState: o.OutputState,
	}
}

// ARN of the target of this schedule, such as a SQS queue or ECS cluster. For universal targets, this is a [Service ARN specific to the target service](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html#supported-universal-targets).
func (o ScheduleTargetOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) string { return v.Arn })
}

// Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.
func (o ScheduleTargetOutput) DeadLetterConfig() pulumix.GPtrOutput[ScheduleTargetDeadLetterConfig, ScheduleTargetDeadLetterConfigOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetDeadLetterConfig { return v.DeadLetterConfig })
	return pulumix.GPtrOutput[ScheduleTargetDeadLetterConfig, ScheduleTargetDeadLetterConfigOutput]{OutputState: value.OutputState}
}

// Templated target type for the Amazon ECS [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation. Detailed below.
func (o ScheduleTargetOutput) EcsParameters() pulumix.GPtrOutput[ScheduleTargetEcsParameters, ScheduleTargetEcsParametersOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetEcsParameters { return v.EcsParameters })
	return pulumix.GPtrOutput[ScheduleTargetEcsParameters, ScheduleTargetEcsParametersOutput]{OutputState: value.OutputState}
}

// Templated target type for the EventBridge [`PutEvents`](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation. Detailed below.
func (o ScheduleTargetOutput) EventbridgeParameters() pulumix.GPtrOutput[ScheduleTargetEventbridgeParameters, ScheduleTargetEventbridgeParametersOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetEventbridgeParameters { return v.EventbridgeParameters })
	return pulumix.GPtrOutput[ScheduleTargetEventbridgeParameters, ScheduleTargetEventbridgeParametersOutput]{OutputState: value.OutputState}
}

// Text, or well-formed JSON, passed to the target. Read more in [Universal target](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html).
func (o ScheduleTargetOutput) Input() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *string { return v.Input })
}

// Templated target type for the Amazon Kinesis [`PutRecord`](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html) API operation. Detailed below.
func (o ScheduleTargetOutput) KinesisParameters() pulumix.GPtrOutput[ScheduleTargetKinesisParameters, ScheduleTargetKinesisParametersOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetKinesisParameters { return v.KinesisParameters })
	return pulumix.GPtrOutput[ScheduleTargetKinesisParameters, ScheduleTargetKinesisParametersOutput]{OutputState: value.OutputState}
}

// Information about the retry policy settings. Detailed below.
func (o ScheduleTargetOutput) RetryPolicy() pulumix.GPtrOutput[ScheduleTargetRetryPolicy, ScheduleTargetRetryPolicyOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetRetryPolicy { return v.RetryPolicy })
	return pulumix.GPtrOutput[ScheduleTargetRetryPolicy, ScheduleTargetRetryPolicyOutput]{OutputState: value.OutputState}
}

// ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in [Set up the execution role](https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role).
//
// The following arguments are optional:
func (o ScheduleTargetOutput) RoleArn() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) string { return v.RoleArn })
}

// Templated target type for the Amazon SageMaker [`StartPipelineExecution`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation. Detailed below.
func (o ScheduleTargetOutput) SagemakerPipelineParameters() pulumix.GPtrOutput[ScheduleTargetSagemakerPipelineParameters, ScheduleTargetSagemakerPipelineParametersOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetSagemakerPipelineParameters {
		return v.SagemakerPipelineParameters
	})
	return pulumix.GPtrOutput[ScheduleTargetSagemakerPipelineParameters, ScheduleTargetSagemakerPipelineParametersOutput]{OutputState: value.OutputState}
}

// The templated target type for the Amazon SQS [`SendMessage`](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Detailed below.
func (o ScheduleTargetOutput) SqsParameters() pulumix.GPtrOutput[ScheduleTargetSqsParameters, ScheduleTargetSqsParametersOutput] {
	value := pulumix.Apply[ScheduleTarget](o, func(v ScheduleTarget) *ScheduleTargetSqsParameters { return v.SqsParameters })
	return pulumix.GPtrOutput[ScheduleTargetSqsParameters, ScheduleTargetSqsParametersOutput]{OutputState: value.OutputState}
}

type ScheduleTargetDeadLetterConfig struct {
	// ARN of the SQS queue specified as the destination for the dead-letter queue.
	Arn string `pulumi:"arn"`
}

type ScheduleTargetDeadLetterConfigArgs struct {
	// ARN of the SQS queue specified as the destination for the dead-letter queue.
	Arn pulumix.Input[string] `pulumi:"arn"`
}

func (ScheduleTargetDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetDeadLetterConfig)(nil)).Elem()
}

func (i ScheduleTargetDeadLetterConfigArgs) ToScheduleTargetDeadLetterConfigOutput() ScheduleTargetDeadLetterConfigOutput {
	return i.ToScheduleTargetDeadLetterConfigOutputWithContext(context.Background())
}

func (i ScheduleTargetDeadLetterConfigArgs) ToScheduleTargetDeadLetterConfigOutputWithContext(ctx context.Context) ScheduleTargetDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetDeadLetterConfigOutput)
}

func (i *ScheduleTargetDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetDeadLetterConfigArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (ScheduleTargetDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetDeadLetterConfig)(nil)).Elem()
}

func (o ScheduleTargetDeadLetterConfigOutput) ToScheduleTargetDeadLetterConfigOutput() ScheduleTargetDeadLetterConfigOutput {
	return o
}

func (o ScheduleTargetDeadLetterConfigOutput) ToScheduleTargetDeadLetterConfigOutputWithContext(ctx context.Context) ScheduleTargetDeadLetterConfigOutput {
	return o
}

func (o ScheduleTargetDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetDeadLetterConfig] {
	return pulumix.Output[ScheduleTargetDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// ARN of the SQS queue specified as the destination for the dead-letter queue.
func (o ScheduleTargetDeadLetterConfigOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetDeadLetterConfig](o, func(v ScheduleTargetDeadLetterConfig) string { return v.Arn })
}

type ScheduleTargetEcsParameters struct {
	// Up to `6` capacity provider strategies to use for the task. Detailed below.
	CapacityProviderStrategies []ScheduleTargetEcsParametersCapacityProviderStrategy `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable the execute command functionality for the containers in this task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. At most 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
	LaunchType *string `pulumi:"launchType"`
	// Configures the networking associated with the task. Detailed below.
	NetworkConfiguration *ScheduleTargetEcsParametersNetworkConfiguration `pulumi:"networkConfiguration"`
	// A set of up to 10 placement constraints to use for the task. Detailed below.
	PlacementConstraints []ScheduleTargetEcsParametersPlacementConstraint `pulumi:"placementConstraints"`
	// A set of up to 5 placement strategies. Detailed below.
	PlacementStrategies []ScheduleTargetEcsParametersPlacementStrategy `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
	PropagateTags *string `pulumi:"propagateTags"`
	// Reference ID to use for the task.
	ReferenceId *string `pulumi:"referenceId"`
	// The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
	Tags map[string]string `pulumi:"tags"`
	// The number of tasks to create. Ranges from `1` (default) to `10`.
	TaskCount *int `pulumi:"taskCount"`
	// ARN of the task definition to use.
	//
	// The following arguments are optional:
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

type ScheduleTargetEcsParametersArgs struct {
	// Up to `6` capacity provider strategies to use for the task. Detailed below.
	CapacityProviderStrategies pulumix.Input[[]*ScheduleTargetEcsParametersCapacityProviderStrategyArgs] `pulumi:"capacityProviderStrategies"`
	// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
	EnableEcsManagedTags pulumix.Input[*bool] `pulumi:"enableEcsManagedTags"`
	// Specifies whether to enable the execute command functionality for the containers in this task.
	EnableExecuteCommand pulumix.Input[*bool] `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. At most 255 characters.
	Group pulumix.Input[*string] `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
	LaunchType pulumix.Input[*string] `pulumi:"launchType"`
	// Configures the networking associated with the task. Detailed below.
	NetworkConfiguration pulumix.Input[*ScheduleTargetEcsParametersNetworkConfigurationArgs] `pulumi:"networkConfiguration"`
	// A set of up to 10 placement constraints to use for the task. Detailed below.
	PlacementConstraints pulumix.Input[[]*ScheduleTargetEcsParametersPlacementConstraintArgs] `pulumi:"placementConstraints"`
	// A set of up to 5 placement strategies. Detailed below.
	PlacementStrategies pulumix.Input[[]*ScheduleTargetEcsParametersPlacementStrategyArgs] `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
	PlatformVersion pulumix.Input[*string] `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
	PropagateTags pulumix.Input[*string] `pulumi:"propagateTags"`
	// Reference ID to use for the task.
	ReferenceId pulumix.Input[*string] `pulumi:"referenceId"`
	// The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
	// The number of tasks to create. Ranges from `1` (default) to `10`.
	TaskCount pulumix.Input[*int] `pulumi:"taskCount"`
	// ARN of the task definition to use.
	//
	// The following arguments are optional:
	TaskDefinitionArn pulumix.Input[string] `pulumi:"taskDefinitionArn"`
}

func (ScheduleTargetEcsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParameters)(nil)).Elem()
}

func (i ScheduleTargetEcsParametersArgs) ToScheduleTargetEcsParametersOutput() ScheduleTargetEcsParametersOutput {
	return i.ToScheduleTargetEcsParametersOutputWithContext(context.Background())
}

func (i ScheduleTargetEcsParametersArgs) ToScheduleTargetEcsParametersOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetEcsParametersOutput)
}

func (i *ScheduleTargetEcsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetEcsParametersArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetEcsParametersOutput struct{ *pulumi.OutputState }

func (ScheduleTargetEcsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParameters)(nil)).Elem()
}

func (o ScheduleTargetEcsParametersOutput) ToScheduleTargetEcsParametersOutput() ScheduleTargetEcsParametersOutput {
	return o
}

func (o ScheduleTargetEcsParametersOutput) ToScheduleTargetEcsParametersOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersOutput {
	return o
}

func (o ScheduleTargetEcsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetEcsParameters] {
	return pulumix.Output[ScheduleTargetEcsParameters]{
		OutputState: o.OutputState,
	}
}

// Up to `6` capacity provider strategies to use for the task. Detailed below.
func (o ScheduleTargetEcsParametersOutput) CapacityProviderStrategies() pulumix.GArrayOutput[ScheduleTargetEcsParametersCapacityProviderStrategy, ScheduleTargetEcsParametersCapacityProviderStrategyOutput] {
	value := pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) []ScheduleTargetEcsParametersCapacityProviderStrategy {
		return v.CapacityProviderStrategies
	})
	return pulumix.GArrayOutput[ScheduleTargetEcsParametersCapacityProviderStrategy, ScheduleTargetEcsParametersCapacityProviderStrategyOutput]{OutputState: value.OutputState}
}

// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
func (o ScheduleTargetEcsParametersOutput) EnableEcsManagedTags() pulumix.Output[*bool] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *bool { return v.EnableEcsManagedTags })
}

// Specifies whether to enable the execute command functionality for the containers in this task.
func (o ScheduleTargetEcsParametersOutput) EnableExecuteCommand() pulumix.Output[*bool] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *bool { return v.EnableExecuteCommand })
}

// Specifies an ECS task group for the task. At most 255 characters.
func (o ScheduleTargetEcsParametersOutput) Group() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *string { return v.Group })
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
func (o ScheduleTargetEcsParametersOutput) LaunchType() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *string { return v.LaunchType })
}

// Configures the networking associated with the task. Detailed below.
func (o ScheduleTargetEcsParametersOutput) NetworkConfiguration() pulumix.GPtrOutput[ScheduleTargetEcsParametersNetworkConfiguration, ScheduleTargetEcsParametersNetworkConfigurationOutput] {
	value := pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *ScheduleTargetEcsParametersNetworkConfiguration {
		return v.NetworkConfiguration
	})
	return pulumix.GPtrOutput[ScheduleTargetEcsParametersNetworkConfiguration, ScheduleTargetEcsParametersNetworkConfigurationOutput]{OutputState: value.OutputState}
}

// A set of up to 10 placement constraints to use for the task. Detailed below.
func (o ScheduleTargetEcsParametersOutput) PlacementConstraints() pulumix.GArrayOutput[ScheduleTargetEcsParametersPlacementConstraint, ScheduleTargetEcsParametersPlacementConstraintOutput] {
	value := pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) []ScheduleTargetEcsParametersPlacementConstraint {
		return v.PlacementConstraints
	})
	return pulumix.GArrayOutput[ScheduleTargetEcsParametersPlacementConstraint, ScheduleTargetEcsParametersPlacementConstraintOutput]{OutputState: value.OutputState}
}

// A set of up to 5 placement strategies. Detailed below.
func (o ScheduleTargetEcsParametersOutput) PlacementStrategies() pulumix.GArrayOutput[ScheduleTargetEcsParametersPlacementStrategy, ScheduleTargetEcsParametersPlacementStrategyOutput] {
	value := pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) []ScheduleTargetEcsParametersPlacementStrategy {
		return v.PlacementStrategies
	})
	return pulumix.GArrayOutput[ScheduleTargetEcsParametersPlacementStrategy, ScheduleTargetEcsParametersPlacementStrategyOutput]{OutputState: value.OutputState}
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
func (o ScheduleTargetEcsParametersOutput) PlatformVersion() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *string { return v.PlatformVersion })
}

// Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
func (o ScheduleTargetEcsParametersOutput) PropagateTags() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *string { return v.PropagateTags })
}

// Reference ID to use for the task.
func (o ScheduleTargetEcsParametersOutput) ReferenceId() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *string { return v.ReferenceId })
}

// The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
func (o ScheduleTargetEcsParametersOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The number of tasks to create. Ranges from `1` (default) to `10`.
func (o ScheduleTargetEcsParametersOutput) TaskCount() pulumix.Output[*int] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) *int { return v.TaskCount })
}

// ARN of the task definition to use.
//
// The following arguments are optional:
func (o ScheduleTargetEcsParametersOutput) TaskDefinitionArn() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetEcsParameters](o, func(v ScheduleTargetEcsParameters) string { return v.TaskDefinitionArn })
}

type ScheduleTargetEcsParametersCapacityProviderStrategy struct {
	// How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from `0` (default) to `100000`.
	Base *int `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from `0` to `1000`.
	Weight *int `pulumi:"weight"`
}

type ScheduleTargetEcsParametersCapacityProviderStrategyArgs struct {
	// How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from `0` (default) to `100000`.
	Base pulumix.Input[*int] `pulumi:"base"`
	// Short name of the capacity provider.
	CapacityProvider pulumix.Input[string] `pulumi:"capacityProvider"`
	// Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from `0` to `1000`.
	Weight pulumix.Input[*int] `pulumi:"weight"`
}

func (ScheduleTargetEcsParametersCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersCapacityProviderStrategy)(nil)).Elem()
}

func (i ScheduleTargetEcsParametersCapacityProviderStrategyArgs) ToScheduleTargetEcsParametersCapacityProviderStrategyOutput() ScheduleTargetEcsParametersCapacityProviderStrategyOutput {
	return i.ToScheduleTargetEcsParametersCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ScheduleTargetEcsParametersCapacityProviderStrategyArgs) ToScheduleTargetEcsParametersCapacityProviderStrategyOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetEcsParametersCapacityProviderStrategyOutput)
}

func (i *ScheduleTargetEcsParametersCapacityProviderStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetEcsParametersCapacityProviderStrategyArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetEcsParametersCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ScheduleTargetEcsParametersCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersCapacityProviderStrategy)(nil)).Elem()
}

func (o ScheduleTargetEcsParametersCapacityProviderStrategyOutput) ToScheduleTargetEcsParametersCapacityProviderStrategyOutput() ScheduleTargetEcsParametersCapacityProviderStrategyOutput {
	return o
}

func (o ScheduleTargetEcsParametersCapacityProviderStrategyOutput) ToScheduleTargetEcsParametersCapacityProviderStrategyOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersCapacityProviderStrategyOutput {
	return o
}

func (o ScheduleTargetEcsParametersCapacityProviderStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetEcsParametersCapacityProviderStrategy] {
	return pulumix.Output[ScheduleTargetEcsParametersCapacityProviderStrategy]{
		OutputState: o.OutputState,
	}
}

// How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from `0` (default) to `100000`.
func (o ScheduleTargetEcsParametersCapacityProviderStrategyOutput) Base() pulumix.Output[*int] {
	return pulumix.Apply[ScheduleTargetEcsParametersCapacityProviderStrategy](o, func(v ScheduleTargetEcsParametersCapacityProviderStrategy) *int { return v.Base })
}

// Short name of the capacity provider.
func (o ScheduleTargetEcsParametersCapacityProviderStrategyOutput) CapacityProvider() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetEcsParametersCapacityProviderStrategy](o, func(v ScheduleTargetEcsParametersCapacityProviderStrategy) string { return v.CapacityProvider })
}

// Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from `0` to `1000`.
func (o ScheduleTargetEcsParametersCapacityProviderStrategyOutput) Weight() pulumix.Output[*int] {
	return pulumix.Apply[ScheduleTargetEcsParametersCapacityProviderStrategy](o, func(v ScheduleTargetEcsParametersCapacityProviderStrategy) *int { return v.Weight })
}

type ScheduleTargetEcsParametersNetworkConfiguration struct {
	// Specifies whether the task's elastic network interface receives a public IP address. This attribute is a boolean type, where `true` maps to `ENABLED` and `false` to `DISABLED`. You can specify `true` only when the `launchType` is set to `FARGATE`.
	AssignPublicIp *bool `pulumi:"assignPublicIp"`
	// Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.
	Subnets []string `pulumi:"subnets"`
}

type ScheduleTargetEcsParametersNetworkConfigurationArgs struct {
	// Specifies whether the task's elastic network interface receives a public IP address. This attribute is a boolean type, where `true` maps to `ENABLED` and `false` to `DISABLED`. You can specify `true` only when the `launchType` is set to `FARGATE`.
	AssignPublicIp pulumix.Input[*bool] `pulumi:"assignPublicIp"`
	// Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.
	SecurityGroups pulumix.Input[[]string] `pulumi:"securityGroups"`
	// Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.
	Subnets pulumix.Input[[]string] `pulumi:"subnets"`
}

func (ScheduleTargetEcsParametersNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersNetworkConfiguration)(nil)).Elem()
}

func (i ScheduleTargetEcsParametersNetworkConfigurationArgs) ToScheduleTargetEcsParametersNetworkConfigurationOutput() ScheduleTargetEcsParametersNetworkConfigurationOutput {
	return i.ToScheduleTargetEcsParametersNetworkConfigurationOutputWithContext(context.Background())
}

func (i ScheduleTargetEcsParametersNetworkConfigurationArgs) ToScheduleTargetEcsParametersNetworkConfigurationOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetEcsParametersNetworkConfigurationOutput)
}

func (i *ScheduleTargetEcsParametersNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetEcsParametersNetworkConfigurationArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetEcsParametersNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ScheduleTargetEcsParametersNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersNetworkConfiguration)(nil)).Elem()
}

func (o ScheduleTargetEcsParametersNetworkConfigurationOutput) ToScheduleTargetEcsParametersNetworkConfigurationOutput() ScheduleTargetEcsParametersNetworkConfigurationOutput {
	return o
}

func (o ScheduleTargetEcsParametersNetworkConfigurationOutput) ToScheduleTargetEcsParametersNetworkConfigurationOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersNetworkConfigurationOutput {
	return o
}

func (o ScheduleTargetEcsParametersNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetEcsParametersNetworkConfiguration] {
	return pulumix.Output[ScheduleTargetEcsParametersNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the task's elastic network interface receives a public IP address. This attribute is a boolean type, where `true` maps to `ENABLED` and `false` to `DISABLED`. You can specify `true` only when the `launchType` is set to `FARGATE`.
func (o ScheduleTargetEcsParametersNetworkConfigurationOutput) AssignPublicIp() pulumix.Output[*bool] {
	return pulumix.Apply[ScheduleTargetEcsParametersNetworkConfiguration](o, func(v ScheduleTargetEcsParametersNetworkConfiguration) *bool { return v.AssignPublicIp })
}

// Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.
func (o ScheduleTargetEcsParametersNetworkConfigurationOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ScheduleTargetEcsParametersNetworkConfiguration](o, func(v ScheduleTargetEcsParametersNetworkConfiguration) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.
func (o ScheduleTargetEcsParametersNetworkConfigurationOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ScheduleTargetEcsParametersNetworkConfiguration](o, func(v ScheduleTargetEcsParametersNetworkConfiguration) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ScheduleTargetEcsParametersPlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance`. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon ECS Developer Guide.
	Expression *string `pulumi:"expression"`
	// The type of constraint. One of: `distinctInstance`, `memberOf`.
	Type string `pulumi:"type"`
}

type ScheduleTargetEcsParametersPlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance`. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon ECS Developer Guide.
	Expression pulumix.Input[*string] `pulumi:"expression"`
	// The type of constraint. One of: `distinctInstance`, `memberOf`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ScheduleTargetEcsParametersPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersPlacementConstraint)(nil)).Elem()
}

func (i ScheduleTargetEcsParametersPlacementConstraintArgs) ToScheduleTargetEcsParametersPlacementConstraintOutput() ScheduleTargetEcsParametersPlacementConstraintOutput {
	return i.ToScheduleTargetEcsParametersPlacementConstraintOutputWithContext(context.Background())
}

func (i ScheduleTargetEcsParametersPlacementConstraintArgs) ToScheduleTargetEcsParametersPlacementConstraintOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetEcsParametersPlacementConstraintOutput)
}

func (i *ScheduleTargetEcsParametersPlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetEcsParametersPlacementConstraintArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetEcsParametersPlacementConstraintOutput struct{ *pulumi.OutputState }

func (ScheduleTargetEcsParametersPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersPlacementConstraint)(nil)).Elem()
}

func (o ScheduleTargetEcsParametersPlacementConstraintOutput) ToScheduleTargetEcsParametersPlacementConstraintOutput() ScheduleTargetEcsParametersPlacementConstraintOutput {
	return o
}

func (o ScheduleTargetEcsParametersPlacementConstraintOutput) ToScheduleTargetEcsParametersPlacementConstraintOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersPlacementConstraintOutput {
	return o
}

func (o ScheduleTargetEcsParametersPlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetEcsParametersPlacementConstraint] {
	return pulumix.Output[ScheduleTargetEcsParametersPlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance`. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon ECS Developer Guide.
func (o ScheduleTargetEcsParametersPlacementConstraintOutput) Expression() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParametersPlacementConstraint](o, func(v ScheduleTargetEcsParametersPlacementConstraint) *string { return v.Expression })
}

// The type of constraint. One of: `distinctInstance`, `memberOf`.
func (o ScheduleTargetEcsParametersPlacementConstraintOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetEcsParametersPlacementConstraint](o, func(v ScheduleTargetEcsParametersPlacementConstraint) string { return v.Type })
}

type ScheduleTargetEcsParametersPlacementStrategy struct {
	// The field to apply the placement strategy against.
	Field *string `pulumi:"field"`
	// The type of placement strategy. One of: `random`, `spread`, `binpack`.
	Type string `pulumi:"type"`
}

type ScheduleTargetEcsParametersPlacementStrategyArgs struct {
	// The field to apply the placement strategy against.
	Field pulumix.Input[*string] `pulumi:"field"`
	// The type of placement strategy. One of: `random`, `spread`, `binpack`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (ScheduleTargetEcsParametersPlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersPlacementStrategy)(nil)).Elem()
}

func (i ScheduleTargetEcsParametersPlacementStrategyArgs) ToScheduleTargetEcsParametersPlacementStrategyOutput() ScheduleTargetEcsParametersPlacementStrategyOutput {
	return i.ToScheduleTargetEcsParametersPlacementStrategyOutputWithContext(context.Background())
}

func (i ScheduleTargetEcsParametersPlacementStrategyArgs) ToScheduleTargetEcsParametersPlacementStrategyOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersPlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetEcsParametersPlacementStrategyOutput)
}

func (i *ScheduleTargetEcsParametersPlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetEcsParametersPlacementStrategyArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetEcsParametersPlacementStrategyOutput struct{ *pulumi.OutputState }

func (ScheduleTargetEcsParametersPlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEcsParametersPlacementStrategy)(nil)).Elem()
}

func (o ScheduleTargetEcsParametersPlacementStrategyOutput) ToScheduleTargetEcsParametersPlacementStrategyOutput() ScheduleTargetEcsParametersPlacementStrategyOutput {
	return o
}

func (o ScheduleTargetEcsParametersPlacementStrategyOutput) ToScheduleTargetEcsParametersPlacementStrategyOutputWithContext(ctx context.Context) ScheduleTargetEcsParametersPlacementStrategyOutput {
	return o
}

func (o ScheduleTargetEcsParametersPlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetEcsParametersPlacementStrategy] {
	return pulumix.Output[ScheduleTargetEcsParametersPlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// The field to apply the placement strategy against.
func (o ScheduleTargetEcsParametersPlacementStrategyOutput) Field() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetEcsParametersPlacementStrategy](o, func(v ScheduleTargetEcsParametersPlacementStrategy) *string { return v.Field })
}

// The type of placement strategy. One of: `random`, `spread`, `binpack`.
func (o ScheduleTargetEcsParametersPlacementStrategyOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetEcsParametersPlacementStrategy](o, func(v ScheduleTargetEcsParametersPlacementStrategy) string { return v.Type })
}

type ScheduleTargetEventbridgeParameters struct {
	// Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.
	DetailType string `pulumi:"detailType"`
	// Source of the event.
	Source string `pulumi:"source"`
}

type ScheduleTargetEventbridgeParametersArgs struct {
	// Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.
	DetailType pulumix.Input[string] `pulumi:"detailType"`
	// Source of the event.
	Source pulumix.Input[string] `pulumi:"source"`
}

func (ScheduleTargetEventbridgeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEventbridgeParameters)(nil)).Elem()
}

func (i ScheduleTargetEventbridgeParametersArgs) ToScheduleTargetEventbridgeParametersOutput() ScheduleTargetEventbridgeParametersOutput {
	return i.ToScheduleTargetEventbridgeParametersOutputWithContext(context.Background())
}

func (i ScheduleTargetEventbridgeParametersArgs) ToScheduleTargetEventbridgeParametersOutputWithContext(ctx context.Context) ScheduleTargetEventbridgeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetEventbridgeParametersOutput)
}

func (i *ScheduleTargetEventbridgeParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetEventbridgeParametersArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetEventbridgeParametersOutput struct{ *pulumi.OutputState }

func (ScheduleTargetEventbridgeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetEventbridgeParameters)(nil)).Elem()
}

func (o ScheduleTargetEventbridgeParametersOutput) ToScheduleTargetEventbridgeParametersOutput() ScheduleTargetEventbridgeParametersOutput {
	return o
}

func (o ScheduleTargetEventbridgeParametersOutput) ToScheduleTargetEventbridgeParametersOutputWithContext(ctx context.Context) ScheduleTargetEventbridgeParametersOutput {
	return o
}

func (o ScheduleTargetEventbridgeParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetEventbridgeParameters] {
	return pulumix.Output[ScheduleTargetEventbridgeParameters]{
		OutputState: o.OutputState,
	}
}

// Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.
func (o ScheduleTargetEventbridgeParametersOutput) DetailType() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetEventbridgeParameters](o, func(v ScheduleTargetEventbridgeParameters) string { return v.DetailType })
}

// Source of the event.
func (o ScheduleTargetEventbridgeParametersOutput) Source() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetEventbridgeParameters](o, func(v ScheduleTargetEventbridgeParameters) string { return v.Source })
}

type ScheduleTargetKinesisParameters struct {
	// Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.
	PartitionKey string `pulumi:"partitionKey"`
}

type ScheduleTargetKinesisParametersArgs struct {
	// Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.
	PartitionKey pulumix.Input[string] `pulumi:"partitionKey"`
}

func (ScheduleTargetKinesisParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetKinesisParameters)(nil)).Elem()
}

func (i ScheduleTargetKinesisParametersArgs) ToScheduleTargetKinesisParametersOutput() ScheduleTargetKinesisParametersOutput {
	return i.ToScheduleTargetKinesisParametersOutputWithContext(context.Background())
}

func (i ScheduleTargetKinesisParametersArgs) ToScheduleTargetKinesisParametersOutputWithContext(ctx context.Context) ScheduleTargetKinesisParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetKinesisParametersOutput)
}

func (i *ScheduleTargetKinesisParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetKinesisParametersArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetKinesisParametersOutput struct{ *pulumi.OutputState }

func (ScheduleTargetKinesisParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetKinesisParameters)(nil)).Elem()
}

func (o ScheduleTargetKinesisParametersOutput) ToScheduleTargetKinesisParametersOutput() ScheduleTargetKinesisParametersOutput {
	return o
}

func (o ScheduleTargetKinesisParametersOutput) ToScheduleTargetKinesisParametersOutputWithContext(ctx context.Context) ScheduleTargetKinesisParametersOutput {
	return o
}

func (o ScheduleTargetKinesisParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetKinesisParameters] {
	return pulumix.Output[ScheduleTargetKinesisParameters]{
		OutputState: o.OutputState,
	}
}

// Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.
func (o ScheduleTargetKinesisParametersOutput) PartitionKey() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetKinesisParameters](o, func(v ScheduleTargetKinesisParameters) string { return v.PartitionKey })
}

type ScheduleTargetRetryPolicy struct {
	// Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
	MaximumEventAgeInSeconds *int `pulumi:"maximumEventAgeInSeconds"`
	// Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
}

type ScheduleTargetRetryPolicyArgs struct {
	// Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
	MaximumEventAgeInSeconds pulumix.Input[*int] `pulumi:"maximumEventAgeInSeconds"`
	// Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
	MaximumRetryAttempts pulumix.Input[*int] `pulumi:"maximumRetryAttempts"`
}

func (ScheduleTargetRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetRetryPolicy)(nil)).Elem()
}

func (i ScheduleTargetRetryPolicyArgs) ToScheduleTargetRetryPolicyOutput() ScheduleTargetRetryPolicyOutput {
	return i.ToScheduleTargetRetryPolicyOutputWithContext(context.Background())
}

func (i ScheduleTargetRetryPolicyArgs) ToScheduleTargetRetryPolicyOutputWithContext(ctx context.Context) ScheduleTargetRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetRetryPolicyOutput)
}

func (i *ScheduleTargetRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetRetryPolicyArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetRetryPolicyOutput struct{ *pulumi.OutputState }

func (ScheduleTargetRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetRetryPolicy)(nil)).Elem()
}

func (o ScheduleTargetRetryPolicyOutput) ToScheduleTargetRetryPolicyOutput() ScheduleTargetRetryPolicyOutput {
	return o
}

func (o ScheduleTargetRetryPolicyOutput) ToScheduleTargetRetryPolicyOutputWithContext(ctx context.Context) ScheduleTargetRetryPolicyOutput {
	return o
}

func (o ScheduleTargetRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetRetryPolicy] {
	return pulumix.Output[ScheduleTargetRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
func (o ScheduleTargetRetryPolicyOutput) MaximumEventAgeInSeconds() pulumix.Output[*int] {
	return pulumix.Apply[ScheduleTargetRetryPolicy](o, func(v ScheduleTargetRetryPolicy) *int { return v.MaximumEventAgeInSeconds })
}

// Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
func (o ScheduleTargetRetryPolicyOutput) MaximumRetryAttempts() pulumix.Output[*int] {
	return pulumix.Apply[ScheduleTargetRetryPolicy](o, func(v ScheduleTargetRetryPolicy) *int { return v.MaximumRetryAttempts })
}

type ScheduleTargetSagemakerPipelineParameters struct {
	// Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.
	PipelineParameters []ScheduleTargetSagemakerPipelineParametersPipelineParameter `pulumi:"pipelineParameters"`
}

type ScheduleTargetSagemakerPipelineParametersArgs struct {
	// Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.
	PipelineParameters pulumix.Input[[]*ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs] `pulumi:"pipelineParameters"`
}

func (ScheduleTargetSagemakerPipelineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetSagemakerPipelineParameters)(nil)).Elem()
}

func (i ScheduleTargetSagemakerPipelineParametersArgs) ToScheduleTargetSagemakerPipelineParametersOutput() ScheduleTargetSagemakerPipelineParametersOutput {
	return i.ToScheduleTargetSagemakerPipelineParametersOutputWithContext(context.Background())
}

func (i ScheduleTargetSagemakerPipelineParametersArgs) ToScheduleTargetSagemakerPipelineParametersOutputWithContext(ctx context.Context) ScheduleTargetSagemakerPipelineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetSagemakerPipelineParametersOutput)
}

func (i *ScheduleTargetSagemakerPipelineParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetSagemakerPipelineParametersArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetSagemakerPipelineParametersOutput struct{ *pulumi.OutputState }

func (ScheduleTargetSagemakerPipelineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetSagemakerPipelineParameters)(nil)).Elem()
}

func (o ScheduleTargetSagemakerPipelineParametersOutput) ToScheduleTargetSagemakerPipelineParametersOutput() ScheduleTargetSagemakerPipelineParametersOutput {
	return o
}

func (o ScheduleTargetSagemakerPipelineParametersOutput) ToScheduleTargetSagemakerPipelineParametersOutputWithContext(ctx context.Context) ScheduleTargetSagemakerPipelineParametersOutput {
	return o
}

func (o ScheduleTargetSagemakerPipelineParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetSagemakerPipelineParameters] {
	return pulumix.Output[ScheduleTargetSagemakerPipelineParameters]{
		OutputState: o.OutputState,
	}
}

// Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.
func (o ScheduleTargetSagemakerPipelineParametersOutput) PipelineParameters() pulumix.GArrayOutput[ScheduleTargetSagemakerPipelineParametersPipelineParameter, ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput] {
	value := pulumix.Apply[ScheduleTargetSagemakerPipelineParameters](o, func(v ScheduleTargetSagemakerPipelineParameters) []ScheduleTargetSagemakerPipelineParametersPipelineParameter {
		return v.PipelineParameters
	})
	return pulumix.GArrayOutput[ScheduleTargetSagemakerPipelineParametersPipelineParameter, ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput]{OutputState: value.OutputState}
}

type ScheduleTargetSagemakerPipelineParametersPipelineParameter struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value string `pulumi:"value"`
}

type ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name pulumix.Input[string] `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (i ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs) ToScheduleTargetSagemakerPipelineParametersPipelineParameterOutput() ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput {
	return i.ToScheduleTargetSagemakerPipelineParametersPipelineParameterOutputWithContext(context.Background())
}

func (i ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs) ToScheduleTargetSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx context.Context) ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput)
}

func (i *ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetSagemakerPipelineParametersPipelineParameterArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput struct{ *pulumi.OutputState }

func (ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetSagemakerPipelineParametersPipelineParameter)(nil)).Elem()
}

func (o ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput) ToScheduleTargetSagemakerPipelineParametersPipelineParameterOutput() ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput {
	return o
}

func (o ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput) ToScheduleTargetSagemakerPipelineParametersPipelineParameterOutputWithContext(ctx context.Context) ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput {
	return o
}

func (o ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetSagemakerPipelineParametersPipelineParameter] {
	return pulumix.Output[ScheduleTargetSagemakerPipelineParametersPipelineParameter]{
		OutputState: o.OutputState,
	}
}

// Name of parameter to start execution of a SageMaker Model Building Pipeline.
func (o ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetSagemakerPipelineParametersPipelineParameter](o, func(v ScheduleTargetSagemakerPipelineParametersPipelineParameter) string { return v.Name })
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline.
func (o ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ScheduleTargetSagemakerPipelineParametersPipelineParameter](o, func(v ScheduleTargetSagemakerPipelineParametersPipelineParameter) string { return v.Value })
}

type ScheduleTargetSqsParameters struct {
	// FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

type ScheduleTargetSqsParametersArgs struct {
	// FIFO message group ID to use as the target.
	MessageGroupId pulumix.Input[*string] `pulumi:"messageGroupId"`
}

func (ScheduleTargetSqsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetSqsParameters)(nil)).Elem()
}

func (i ScheduleTargetSqsParametersArgs) ToScheduleTargetSqsParametersOutput() ScheduleTargetSqsParametersOutput {
	return i.ToScheduleTargetSqsParametersOutputWithContext(context.Background())
}

func (i ScheduleTargetSqsParametersArgs) ToScheduleTargetSqsParametersOutputWithContext(ctx context.Context) ScheduleTargetSqsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetSqsParametersOutput)
}

func (i *ScheduleTargetSqsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTargetSqsParametersArgs] {
	return pulumix.Val(i)
}

type ScheduleTargetSqsParametersOutput struct{ *pulumi.OutputState }

func (ScheduleTargetSqsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTargetSqsParameters)(nil)).Elem()
}

func (o ScheduleTargetSqsParametersOutput) ToScheduleTargetSqsParametersOutput() ScheduleTargetSqsParametersOutput {
	return o
}

func (o ScheduleTargetSqsParametersOutput) ToScheduleTargetSqsParametersOutputWithContext(ctx context.Context) ScheduleTargetSqsParametersOutput {
	return o
}

func (o ScheduleTargetSqsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTargetSqsParameters] {
	return pulumix.Output[ScheduleTargetSqsParameters]{
		OutputState: o.OutputState,
	}
}

// FIFO message group ID to use as the target.
func (o ScheduleTargetSqsParametersOutput) MessageGroupId() pulumix.Output[*string] {
	return pulumix.Apply[ScheduleTargetSqsParameters](o, func(v ScheduleTargetSqsParameters) *string { return v.MessageGroupId })
}

func init() {
	pulumi.RegisterOutputType(ScheduleFlexibleTimeWindowOutput{})
	pulumi.RegisterOutputType(ScheduleTargetOutput{})
	pulumi.RegisterOutputType(ScheduleTargetDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(ScheduleTargetEcsParametersOutput{})
	pulumi.RegisterOutputType(ScheduleTargetEcsParametersCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ScheduleTargetEcsParametersNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ScheduleTargetEcsParametersPlacementConstraintOutput{})
	pulumi.RegisterOutputType(ScheduleTargetEcsParametersPlacementStrategyOutput{})
	pulumi.RegisterOutputType(ScheduleTargetEventbridgeParametersOutput{})
	pulumi.RegisterOutputType(ScheduleTargetKinesisParametersOutput{})
	pulumi.RegisterOutputType(ScheduleTargetRetryPolicyOutput{})
	pulumi.RegisterOutputType(ScheduleTargetSagemakerPipelineParametersOutput{})
	pulumi.RegisterOutputType(ScheduleTargetSagemakerPipelineParametersPipelineParameterOutput{})
	pulumi.RegisterOutputType(ScheduleTargetSqsParametersOutput{})
}
