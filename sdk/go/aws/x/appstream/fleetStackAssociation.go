// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AppStream Fleet Stack association.
type FleetStackAssociation struct {
	pulumi.CustomResourceState

	// Name of the fleet.
	FleetName pulumix.Output[string] `pulumi:"fleetName"`
	// Name of the stack.
	StackName pulumix.Output[string] `pulumi:"stackName"`
}

// NewFleetStackAssociation registers a new resource with the given unique name, arguments, and options.
func NewFleetStackAssociation(ctx *pulumi.Context,
	name string, args *FleetStackAssociationArgs, opts ...pulumi.ResourceOption) (*FleetStackAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FleetName == nil {
		return nil, errors.New("invalid value for required argument 'FleetName'")
	}
	if args.StackName == nil {
		return nil, errors.New("invalid value for required argument 'StackName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FleetStackAssociation
	err := ctx.RegisterResource("aws:appstream/fleetStackAssociation:FleetStackAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleetStackAssociation gets an existing FleetStackAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleetStackAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetStackAssociationState, opts ...pulumi.ResourceOption) (*FleetStackAssociation, error) {
	var resource FleetStackAssociation
	err := ctx.ReadResource("aws:appstream/fleetStackAssociation:FleetStackAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FleetStackAssociation resources.
type fleetStackAssociationState struct {
	// Name of the fleet.
	FleetName *string `pulumi:"fleetName"`
	// Name of the stack.
	StackName *string `pulumi:"stackName"`
}

type FleetStackAssociationState struct {
	// Name of the fleet.
	FleetName pulumix.Input[*string]
	// Name of the stack.
	StackName pulumix.Input[*string]
}

func (FleetStackAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetStackAssociationState)(nil)).Elem()
}

type fleetStackAssociationArgs struct {
	// Name of the fleet.
	FleetName string `pulumi:"fleetName"`
	// Name of the stack.
	StackName string `pulumi:"stackName"`
}

// The set of arguments for constructing a FleetStackAssociation resource.
type FleetStackAssociationArgs struct {
	// Name of the fleet.
	FleetName pulumix.Input[string]
	// Name of the stack.
	StackName pulumix.Input[string]
}

func (FleetStackAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetStackAssociationArgs)(nil)).Elem()
}

type FleetStackAssociationOutput struct{ *pulumi.OutputState }

func (FleetStackAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetStackAssociation)(nil)).Elem()
}

func (o FleetStackAssociationOutput) ToFleetStackAssociationOutput() FleetStackAssociationOutput {
	return o
}

func (o FleetStackAssociationOutput) ToFleetStackAssociationOutputWithContext(ctx context.Context) FleetStackAssociationOutput {
	return o
}

func (o FleetStackAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[FleetStackAssociation] {
	return pulumix.Output[FleetStackAssociation]{
		OutputState: o.OutputState,
	}
}

// Name of the fleet.
func (o FleetStackAssociationOutput) FleetName() pulumix.Output[string] {
	value := pulumix.Apply[FleetStackAssociation](o, func(v FleetStackAssociation) pulumix.Output[string] { return v.FleetName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the stack.
func (o FleetStackAssociationOutput) StackName() pulumix.Output[string] {
	value := pulumix.Apply[FleetStackAssociation](o, func(v FleetStackAssociation) pulumix.Output[string] { return v.StackName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(FleetStackAssociationOutput{})
}
