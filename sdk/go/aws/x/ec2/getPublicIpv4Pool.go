// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific AWS EC2 Public IPv4 Pool.
func GetPublicIpv4Pool(ctx *pulumi.Context, args *GetPublicIpv4PoolArgs, opts ...pulumi.InvokeOption) (*GetPublicIpv4PoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPublicIpv4PoolResult
	err := ctx.Invoke("aws:ec2/getPublicIpv4Pool:getPublicIpv4Pool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPublicIpv4Pool.
type GetPublicIpv4PoolArgs struct {
	// AWS resource IDs of a public IPv4 pool (as a string) for which this data source will fetch detailed information.
	PoolId string `pulumi:"poolId"`
	// Any tags for the address pool.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getPublicIpv4Pool.
type GetPublicIpv4PoolResult struct {
	// Description of the pool, if any.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the location from which the address pool is advertised.
	// * poolAddressRanges` - List of Address Ranges in the Pool; each address range record contains:
	NetworkBorderGroup string                              `pulumi:"networkBorderGroup"`
	PoolAddressRanges  []GetPublicIpv4PoolPoolAddressRange `pulumi:"poolAddressRanges"`
	PoolId             string                              `pulumi:"poolId"`
	// Any tags for the address pool.
	Tags map[string]string `pulumi:"tags"`
	// Total number of addresses in the pool.
	TotalAddressCount int `pulumi:"totalAddressCount"`
	// Total number of available addresses in the pool.
	TotalAvailableAddressCount int `pulumi:"totalAvailableAddressCount"`
}

func GetPublicIpv4PoolOutput(ctx *pulumi.Context, args GetPublicIpv4PoolOutputArgs, opts ...pulumi.InvokeOption) GetPublicIpv4PoolResultOutput {
	outputResult := pulumix.ApplyErr[*GetPublicIpv4PoolArgs](args.ToOutput(), func(plainArgs *GetPublicIpv4PoolArgs) (*GetPublicIpv4PoolResult, error) {
		return GetPublicIpv4Pool(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPublicIpv4PoolResultOutput, *GetPublicIpv4PoolResult](outputResult)
}

// A collection of arguments for invoking getPublicIpv4Pool.
type GetPublicIpv4PoolOutputArgs struct {
	// AWS resource IDs of a public IPv4 pool (as a string) for which this data source will fetch detailed information.
	PoolId pulumix.Input[string] `pulumi:"poolId"`
	// Any tags for the address pool.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetPublicIpv4PoolOutputArgs) ToOutput() pulumix.Output[*GetPublicIpv4PoolArgs] {
	allArgs := pulumix.All(
		args.PoolId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPublicIpv4PoolArgs {
		return &GetPublicIpv4PoolArgs{
			PoolId: resolvedArgs[0].(string),
			Tags:   resolvedArgs[1].(map[string]string),
		}
	})
}

type GetPublicIpv4PoolResultOutput struct{ *pulumi.OutputState }

func (GetPublicIpv4PoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicIpv4PoolResult)(nil)).Elem()
}

func (o GetPublicIpv4PoolResultOutput) ToOutput(context.Context) pulumix.Output[*GetPublicIpv4PoolResult] {
	return pulumix.Output[*GetPublicIpv4PoolResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicIpv4PoolResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) string { return v.Description })
}

func (o GetPublicIpv4PoolResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) string { return v.Id })
}

func (o GetPublicIpv4PoolResultOutput) NetworkBorderGroup() pulumix.Output[string] {
	return pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) string { return v.NetworkBorderGroup })
}

func (o GetPublicIpv4PoolResultOutput) PoolAddressRanges() pulumix.GArrayOutput[GetPublicIpv4PoolPoolAddressRange, GetPublicIpv4PoolPoolAddressRangeOutput] {
	value := pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) []GetPublicIpv4PoolPoolAddressRange { return v.PoolAddressRanges })
	return pulumix.GArrayOutput[GetPublicIpv4PoolPoolAddressRange, GetPublicIpv4PoolPoolAddressRangeOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetPublicIpv4PoolResultOutput) PoolId() pulumix.Output[string] {
	return pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) string { return v.PoolId })
}

func (o GetPublicIpv4PoolResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetPublicIpv4PoolResultOutput) TotalAddressCount() pulumix.Output[int] {
	return pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) int { return v.TotalAddressCount })
}

func (o GetPublicIpv4PoolResultOutput) TotalAvailableAddressCount() pulumix.Output[int] {
	return pulumix.Apply[*GetPublicIpv4PoolResult](o, func(v *GetPublicIpv4PoolResult) int { return v.TotalAvailableAddressCount })
}
