// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the ID of an [elastic beanstalk hosted zone](http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region).
func GetHostedZone(ctx *pulumi.Context, args *GetHostedZoneArgs, opts ...pulumi.InvokeOption) (*GetHostedZoneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHostedZoneResult
	err := ctx.Invoke("aws:elasticbeanstalk/getHostedZone:getHostedZone", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHostedZone.
type GetHostedZoneArgs struct {
	// Region you'd like the zone for. By default, fetches the current region.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getHostedZone.
type GetHostedZoneResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Region of the hosted zone.
	Region *string `pulumi:"region"`
}

func GetHostedZoneOutput(ctx *pulumi.Context, args GetHostedZoneOutputArgs, opts ...pulumi.InvokeOption) GetHostedZoneResultOutput {
	outputResult := pulumix.ApplyErr[*GetHostedZoneArgs](args.ToOutput(), func(plainArgs *GetHostedZoneArgs) (*GetHostedZoneResult, error) {
		return GetHostedZone(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetHostedZoneResultOutput, *GetHostedZoneResult](outputResult)
}

// A collection of arguments for invoking getHostedZone.
type GetHostedZoneOutputArgs struct {
	// Region you'd like the zone for. By default, fetches the current region.
	Region pulumix.Input[*string] `pulumi:"region"`
}

func (args GetHostedZoneOutputArgs) ToOutput() pulumix.Output[*GetHostedZoneArgs] {
	allArgs := pulumix.All(
		args.Region.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetHostedZoneArgs {
		return &GetHostedZoneArgs{
			Region: resolvedArgs[0].(*string),
		}
	})
}

type GetHostedZoneResultOutput struct{ *pulumi.OutputState }

func (GetHostedZoneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostedZoneResult)(nil)).Elem()
}

func (o GetHostedZoneResultOutput) ToOutput(context.Context) pulumix.Output[*GetHostedZoneResult] {
	return pulumix.Output[*GetHostedZoneResult]{
		OutputState: o.OutputState,
	}
}

func (o GetHostedZoneResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetHostedZoneResult](o, func(v *GetHostedZoneResult) string { return v.Id })
}

func (o GetHostedZoneResultOutput) Region() pulumix.Output[*string] {
	return pulumix.Apply[*GetHostedZoneResult](o, func(v *GetHostedZoneResult) *string { return v.Region })
}
