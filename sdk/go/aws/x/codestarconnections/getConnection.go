// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarconnections

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about CodeStar Connection.
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("aws:codestarconnections/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	// CodeStar Connection ARN.
	Arn *string `pulumi:"arn"`
	// CodeStar Connection name.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence.
	Name *string `pulumi:"name"`
	// Map of key-value resource tags to associate with the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	Arn string `pulumi:"arn"`
	// CodeStar Connection status. Possible values are `PENDING`, `AVAILABLE` and `ERROR`.
	ConnectionStatus string `pulumi:"connectionStatus"`
	// ARN of the host associated with the connection.
	HostArn string `pulumi:"hostArn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the CodeStar Connection. The name is unique in the calling AWS account.
	Name string `pulumi:"name"`
	// Name of the external provider where your third-party code repository is configured. Possible values are `Bitbucket` and `GitHub`. For connections to a GitHub Enterprise Server instance, you must create an codestarconnections.Host resource and use `hostArn` instead.
	ProviderType string `pulumi:"providerType"`
	// Map of key-value resource tags to associate with the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	outputResult := pulumix.ApplyErr[*LookupConnectionArgs](args.ToOutput(), func(plainArgs *LookupConnectionArgs) (*LookupConnectionResult, error) {
		return LookupConnection(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupConnectionResultOutput, *LookupConnectionResult](outputResult)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	// CodeStar Connection ARN.
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// CodeStar Connection name.
	//
	// > **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of key-value resource tags to associate with the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupConnectionOutputArgs) ToOutput() pulumix.Output[*LookupConnectionArgs] {
	allArgs := pulumix.All(
		args.Arn.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupConnectionArgs {
		return &LookupConnectionArgs{
			Arn:  resolvedArgs[0].(*string),
			Name: resolvedArgs[1].(*string),
			Tags: resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToOutput(context.Context) pulumix.Output[*LookupConnectionResult] {
	return pulumix.Output[*LookupConnectionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupConnectionResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Arn })
}

func (o LookupConnectionResultOutput) ConnectionStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ConnectionStatus })
}

func (o LookupConnectionResultOutput) HostArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.HostArn })
}

func (o LookupConnectionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Id })
}

func (o LookupConnectionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.Name })
}

func (o LookupConnectionResultOutput) ProviderType() pulumix.Output[string] {
	return pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) string { return v.ProviderType })
}

func (o LookupConnectionResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupConnectionResult](o, func(v *LookupConnectionResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
