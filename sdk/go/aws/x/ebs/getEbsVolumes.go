// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ebs.getEbsVolumes` provides identifying information for EBS volumes matching given criteria.
//
// This data source can be useful for getting a list of volume IDs with (for example) matching tags.
func GetEbsVolumes(ctx *pulumi.Context, args *GetEbsVolumesArgs, opts ...pulumi.InvokeOption) (*GetEbsVolumesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEbsVolumesResult
	err := ctx.Invoke("aws:ebs/getEbsVolumes:getEbsVolumes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEbsVolumes.
type GetEbsVolumesArgs struct {
	// Custom filter block as described below.
	Filters []GetEbsVolumesFilter `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired volumes.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getEbsVolumes.
type GetEbsVolumesResult struct {
	Filters []GetEbsVolumesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of all the EBS Volume IDs found. This data source will fail if
	// no volumes match the provided criteria.
	Ids  []string          `pulumi:"ids"`
	Tags map[string]string `pulumi:"tags"`
}

func GetEbsVolumesOutput(ctx *pulumi.Context, args GetEbsVolumesOutputArgs, opts ...pulumi.InvokeOption) GetEbsVolumesResultOutput {
	outputResult := pulumix.ApplyErr[*GetEbsVolumesArgs](args.ToOutput(), func(plainArgs *GetEbsVolumesArgs) (*GetEbsVolumesResult, error) {
		return GetEbsVolumes(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetEbsVolumesResultOutput, *GetEbsVolumesResult](outputResult)
}

// A collection of arguments for invoking getEbsVolumes.
type GetEbsVolumesOutputArgs struct {
	// Custom filter block as described below.
	Filters pulumix.Input[[]*GetEbsVolumesFilterArgs] `pulumi:"filters"`
	// Map of tags, each pair of which must exactly match
	// a pair on the desired volumes.
	//
	// More complex filters can be expressed using one or more `filter` sub-blocks,
	// which take the following arguments:
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args GetEbsVolumesOutputArgs) ToOutput() pulumix.Output[*GetEbsVolumesArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetEbsVolumesArgs {
		return &GetEbsVolumesArgs{
			Filters: resolvedArgs[0].([]GetEbsVolumesFilter),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type GetEbsVolumesResultOutput struct{ *pulumi.OutputState }

func (GetEbsVolumesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEbsVolumesResult)(nil)).Elem()
}

func (o GetEbsVolumesResultOutput) ToOutput(context.Context) pulumix.Output[*GetEbsVolumesResult] {
	return pulumix.Output[*GetEbsVolumesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetEbsVolumesResultOutput) Filters() pulumix.GArrayOutput[GetEbsVolumesFilter, GetEbsVolumesFilterOutput] {
	value := pulumix.Apply[*GetEbsVolumesResult](o, func(v *GetEbsVolumesResult) []GetEbsVolumesFilter { return v.Filters })
	return pulumix.GArrayOutput[GetEbsVolumesFilter, GetEbsVolumesFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetEbsVolumesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetEbsVolumesResult](o, func(v *GetEbsVolumesResult) string { return v.Id })
}

func (o GetEbsVolumesResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetEbsVolumesResult](o, func(v *GetEbsVolumesResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o GetEbsVolumesResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*GetEbsVolumesResult](o, func(v *GetEbsVolumesResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
