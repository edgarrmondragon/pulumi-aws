// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get information on an EC2 Transit Gateway Route Table.
func LookupRouteTable(ctx *pulumi.Context, args *LookupRouteTableArgs, opts ...pulumi.InvokeOption) (*LookupRouteTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteTableResult
	err := ctx.Invoke("aws:ec2transitgateway/getRouteTable:getRouteTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters []GetRouteTableFilter `pulumi:"filters"`
	// Identifier of the EC2 Transit Gateway Route Table.
	Id *string `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway Route Table
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getRouteTable.
type LookupRouteTableResult struct {
	// EC2 Transit Gateway Route Table ARN.
	Arn string `pulumi:"arn"`
	// Boolean whether this is the default association route table for the EC2 Transit Gateway
	DefaultAssociationRouteTable bool `pulumi:"defaultAssociationRouteTable"`
	// Boolean whether this is the default propagation route table for the EC2 Transit Gateway
	DefaultPropagationRouteTable bool                  `pulumi:"defaultPropagationRouteTable"`
	Filters                      []GetRouteTableFilter `pulumi:"filters"`
	// EC2 Transit Gateway Route Table identifier
	Id string `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway Route Table
	Tags map[string]string `pulumi:"tags"`
	// EC2 Transit Gateway identifier
	TransitGatewayId string `pulumi:"transitGatewayId"`
}

func LookupRouteTableOutput(ctx *pulumi.Context, args LookupRouteTableOutputArgs, opts ...pulumi.InvokeOption) LookupRouteTableResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRouteTableArgs](args.ToOutput(), func(plainArgs *LookupRouteTableArgs) (*LookupRouteTableResult, error) {
		return LookupRouteTable(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRouteTableResultOutput, *LookupRouteTableResult](outputResult)
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableOutputArgs struct {
	// One or more configuration blocks containing name-values filters. Detailed below.
	Filters pulumix.Input[[]*GetRouteTableFilterArgs] `pulumi:"filters"`
	// Identifier of the EC2 Transit Gateway Route Table.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Key-value tags for the EC2 Transit Gateway Route Table
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupRouteTableOutputArgs) ToOutput() pulumix.Output[*LookupRouteTableArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRouteTableArgs {
		return &LookupRouteTableArgs{
			Filters: resolvedArgs[0].([]GetRouteTableFilter),
			Id:      resolvedArgs[1].(*string),
			Tags:    resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupRouteTableResultOutput struct{ *pulumi.OutputState }

func (LookupRouteTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableResult)(nil)).Elem()
}

func (o LookupRouteTableResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRouteTableResult] {
	return pulumix.Output[*LookupRouteTableResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRouteTableResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.Arn })
}

func (o LookupRouteTableResultOutput) DefaultAssociationRouteTable() pulumix.Output[bool] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) bool { return v.DefaultAssociationRouteTable })
}

func (o LookupRouteTableResultOutput) DefaultPropagationRouteTable() pulumix.Output[bool] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) bool { return v.DefaultPropagationRouteTable })
}

func (o LookupRouteTableResultOutput) Filters() pulumix.GArrayOutput[GetRouteTableFilter, GetRouteTableFilterOutput] {
	value := pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) []GetRouteTableFilter { return v.Filters })
	return pulumix.GArrayOutput[GetRouteTableFilter, GetRouteTableFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteTableResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.Id })
}

func (o LookupRouteTableResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupRouteTableResultOutput) TransitGatewayId() pulumix.Output[string] {
	return pulumix.Apply[*LookupRouteTableResult](o, func(v *LookupRouteTableResult) string { return v.TransitGatewayId })
}
