// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudsearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an CloudSearch domain service access policy resource.
//
// The provider waits for the domain service access policy to become `Active` when applying a configuration.
type DomainServiceAccessPolicy struct {
	pulumi.CustomResourceState

	// The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
	AccessPolicy pulumix.Output[string] `pulumi:"accessPolicy"`
	// The CloudSearch domain name the policy applies to.
	DomainName pulumix.Output[string] `pulumi:"domainName"`
}

// NewDomainServiceAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewDomainServiceAccessPolicy(ctx *pulumi.Context,
	name string, args *DomainServiceAccessPolicyArgs, opts ...pulumi.ResourceOption) (*DomainServiceAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicy'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainServiceAccessPolicy
	err := ctx.RegisterResource("aws:cloudsearch/domainServiceAccessPolicy:DomainServiceAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainServiceAccessPolicy gets an existing DomainServiceAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainServiceAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainServiceAccessPolicyState, opts ...pulumi.ResourceOption) (*DomainServiceAccessPolicy, error) {
	var resource DomainServiceAccessPolicy
	err := ctx.ReadResource("aws:cloudsearch/domainServiceAccessPolicy:DomainServiceAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainServiceAccessPolicy resources.
type domainServiceAccessPolicyState struct {
	// The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
	AccessPolicy *string `pulumi:"accessPolicy"`
	// The CloudSearch domain name the policy applies to.
	DomainName *string `pulumi:"domainName"`
}

type DomainServiceAccessPolicyState struct {
	// The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
	AccessPolicy pulumix.Input[*string]
	// The CloudSearch domain name the policy applies to.
	DomainName pulumix.Input[*string]
}

func (DomainServiceAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainServiceAccessPolicyState)(nil)).Elem()
}

type domainServiceAccessPolicyArgs struct {
	// The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
	AccessPolicy string `pulumi:"accessPolicy"`
	// The CloudSearch domain name the policy applies to.
	DomainName string `pulumi:"domainName"`
}

// The set of arguments for constructing a DomainServiceAccessPolicy resource.
type DomainServiceAccessPolicyArgs struct {
	// The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
	AccessPolicy pulumix.Input[string]
	// The CloudSearch domain name the policy applies to.
	DomainName pulumix.Input[string]
}

func (DomainServiceAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainServiceAccessPolicyArgs)(nil)).Elem()
}

type DomainServiceAccessPolicyOutput struct{ *pulumi.OutputState }

func (DomainServiceAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainServiceAccessPolicy)(nil)).Elem()
}

func (o DomainServiceAccessPolicyOutput) ToDomainServiceAccessPolicyOutput() DomainServiceAccessPolicyOutput {
	return o
}

func (o DomainServiceAccessPolicyOutput) ToDomainServiceAccessPolicyOutputWithContext(ctx context.Context) DomainServiceAccessPolicyOutput {
	return o
}

func (o DomainServiceAccessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[DomainServiceAccessPolicy] {
	return pulumix.Output[DomainServiceAccessPolicy]{
		OutputState: o.OutputState,
	}
}

// The access rules you want to configure. These rules replace any existing rules. See the [AWS documentation](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html) for details.
func (o DomainServiceAccessPolicyOutput) AccessPolicy() pulumix.Output[string] {
	value := pulumix.Apply[DomainServiceAccessPolicy](o, func(v DomainServiceAccessPolicy) pulumix.Output[string] { return v.AccessPolicy })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The CloudSearch domain name the policy applies to.
func (o DomainServiceAccessPolicyOutput) DomainName() pulumix.Output[string] {
	value := pulumix.Apply[DomainServiceAccessPolicy](o, func(v DomainServiceAccessPolicy) pulumix.Output[string] { return v.DomainName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DomainServiceAccessPolicyOutput{})
}
