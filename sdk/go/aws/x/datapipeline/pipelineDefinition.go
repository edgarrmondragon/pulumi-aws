// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datapipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DataPipeline Pipeline Definition resource.
type PipelineDefinition struct {
	pulumi.CustomResourceState

	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects pulumix.GArrayOutput[PipelineDefinitionParameterObject, PipelineDefinitionParameterObjectOutput] `pulumi:"parameterObjects"`
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues pulumix.GArrayOutput[PipelineDefinitionParameterValue, PipelineDefinitionParameterValueOutput] `pulumi:"parameterValues"`
	// ID of the pipeline.
	PipelineId pulumix.Output[string] `pulumi:"pipelineId"`
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects pulumix.GArrayOutput[PipelineDefinitionPipelineObject, PipelineDefinitionPipelineObjectOutput] `pulumi:"pipelineObjects"`
}

// NewPipelineDefinition registers a new resource with the given unique name, arguments, and options.
func NewPipelineDefinition(ctx *pulumi.Context,
	name string, args *PipelineDefinitionArgs, opts ...pulumi.ResourceOption) (*PipelineDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	if args.PipelineObjects == nil {
		return nil, errors.New("invalid value for required argument 'PipelineObjects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineDefinition
	err := ctx.RegisterResource("aws:datapipeline/pipelineDefinition:PipelineDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineDefinition gets an existing PipelineDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineDefinitionState, opts ...pulumi.ResourceOption) (*PipelineDefinition, error) {
	var resource PipelineDefinition
	err := ctx.ReadResource("aws:datapipeline/pipelineDefinition:PipelineDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineDefinition resources.
type pipelineDefinitionState struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects []PipelineDefinitionParameterObject `pulumi:"parameterObjects"`
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues []PipelineDefinitionParameterValue `pulumi:"parameterValues"`
	// ID of the pipeline.
	PipelineId *string `pulumi:"pipelineId"`
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects []PipelineDefinitionPipelineObject `pulumi:"pipelineObjects"`
}

type PipelineDefinitionState struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects pulumix.Input[[]*PipelineDefinitionParameterObjectArgs]
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues pulumix.Input[[]*PipelineDefinitionParameterValueArgs]
	// ID of the pipeline.
	PipelineId pulumix.Input[*string]
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects pulumix.Input[[]*PipelineDefinitionPipelineObjectArgs]
}

func (PipelineDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineDefinitionState)(nil)).Elem()
}

type pipelineDefinitionArgs struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects []PipelineDefinitionParameterObject `pulumi:"parameterObjects"`
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues []PipelineDefinitionParameterValue `pulumi:"parameterValues"`
	// ID of the pipeline.
	PipelineId string `pulumi:"pipelineId"`
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects []PipelineDefinitionPipelineObject `pulumi:"pipelineObjects"`
}

// The set of arguments for constructing a PipelineDefinition resource.
type PipelineDefinitionArgs struct {
	// Configuration block for the parameter objects used in the pipeline definition. See below
	ParameterObjects pulumix.Input[[]*PipelineDefinitionParameterObjectArgs]
	// Configuration block for the parameter values used in the pipeline definition. See below
	ParameterValues pulumix.Input[[]*PipelineDefinitionParameterValueArgs]
	// ID of the pipeline.
	PipelineId pulumix.Input[string]
	// Configuration block for the objects that define the pipeline. See below
	//
	// The following arguments are optional:
	PipelineObjects pulumix.Input[[]*PipelineDefinitionPipelineObjectArgs]
}

func (PipelineDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineDefinitionArgs)(nil)).Elem()
}

type PipelineDefinitionOutput struct{ *pulumi.OutputState }

func (PipelineDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineDefinition)(nil)).Elem()
}

func (o PipelineDefinitionOutput) ToPipelineDefinitionOutput() PipelineDefinitionOutput {
	return o
}

func (o PipelineDefinitionOutput) ToPipelineDefinitionOutputWithContext(ctx context.Context) PipelineDefinitionOutput {
	return o
}

func (o PipelineDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[PipelineDefinition] {
	return pulumix.Output[PipelineDefinition]{
		OutputState: o.OutputState,
	}
}

// Configuration block for the parameter objects used in the pipeline definition. See below
func (o PipelineDefinitionOutput) ParameterObjects() pulumix.GArrayOutput[PipelineDefinitionParameterObject, PipelineDefinitionParameterObjectOutput] {
	value := pulumix.Apply[PipelineDefinition](o, func(v PipelineDefinition) pulumix.GArrayOutput[PipelineDefinitionParameterObject, PipelineDefinitionParameterObjectOutput] {
		return v.ParameterObjects
	})
	unwrapped := pulumix.Flatten[[]PipelineDefinitionParameterObject, pulumix.GArrayOutput[PipelineDefinitionParameterObject, PipelineDefinitionParameterObjectOutput]](value)
	return pulumix.GArrayOutput[PipelineDefinitionParameterObject, PipelineDefinitionParameterObjectOutput]{OutputState: unwrapped.OutputState}
}

// Configuration block for the parameter values used in the pipeline definition. See below
func (o PipelineDefinitionOutput) ParameterValues() pulumix.GArrayOutput[PipelineDefinitionParameterValue, PipelineDefinitionParameterValueOutput] {
	value := pulumix.Apply[PipelineDefinition](o, func(v PipelineDefinition) pulumix.GArrayOutput[PipelineDefinitionParameterValue, PipelineDefinitionParameterValueOutput] {
		return v.ParameterValues
	})
	unwrapped := pulumix.Flatten[[]PipelineDefinitionParameterValue, pulumix.GArrayOutput[PipelineDefinitionParameterValue, PipelineDefinitionParameterValueOutput]](value)
	return pulumix.GArrayOutput[PipelineDefinitionParameterValue, PipelineDefinitionParameterValueOutput]{OutputState: unwrapped.OutputState}
}

// ID of the pipeline.
func (o PipelineDefinitionOutput) PipelineId() pulumix.Output[string] {
	value := pulumix.Apply[PipelineDefinition](o, func(v PipelineDefinition) pulumix.Output[string] { return v.PipelineId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Configuration block for the objects that define the pipeline. See below
//
// The following arguments are optional:
func (o PipelineDefinitionOutput) PipelineObjects() pulumix.GArrayOutput[PipelineDefinitionPipelineObject, PipelineDefinitionPipelineObjectOutput] {
	value := pulumix.Apply[PipelineDefinition](o, func(v PipelineDefinition) pulumix.GArrayOutput[PipelineDefinitionPipelineObject, PipelineDefinitionPipelineObjectOutput] {
		return v.PipelineObjects
	})
	unwrapped := pulumix.Flatten[[]PipelineDefinitionPipelineObject, pulumix.GArrayOutput[PipelineDefinitionPipelineObject, PipelineDefinitionPipelineObjectOutput]](value)
	return pulumix.GArrayOutput[PipelineDefinitionPipelineObject, PipelineDefinitionPipelineObjectOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(PipelineDefinitionOutput{})
}
