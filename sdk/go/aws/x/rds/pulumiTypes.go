// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterMasterUserSecret struct {
	// ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Amazon Resource Name (ARN) of the secret.
	SecretArn *string `pulumi:"secretArn"`
	// Status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
	SecretStatus *string `pulumi:"secretStatus"`
}

type ClusterMasterUserSecretArgs struct {
	// ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// Amazon Resource Name (ARN) of the secret.
	SecretArn pulumix.Input[*string] `pulumi:"secretArn"`
	// Status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
	SecretStatus pulumix.Input[*string] `pulumi:"secretStatus"`
}

func (ClusterMasterUserSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterUserSecret)(nil)).Elem()
}

func (i ClusterMasterUserSecretArgs) ToClusterMasterUserSecretOutput() ClusterMasterUserSecretOutput {
	return i.ToClusterMasterUserSecretOutputWithContext(context.Background())
}

func (i ClusterMasterUserSecretArgs) ToClusterMasterUserSecretOutputWithContext(ctx context.Context) ClusterMasterUserSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterUserSecretOutput)
}

func (i *ClusterMasterUserSecretArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterMasterUserSecretArgs] {
	return pulumix.Val(i)
}

type ClusterMasterUserSecretOutput struct{ *pulumi.OutputState }

func (ClusterMasterUserSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterUserSecret)(nil)).Elem()
}

func (o ClusterMasterUserSecretOutput) ToClusterMasterUserSecretOutput() ClusterMasterUserSecretOutput {
	return o
}

func (o ClusterMasterUserSecretOutput) ToClusterMasterUserSecretOutputWithContext(ctx context.Context) ClusterMasterUserSecretOutput {
	return o
}

func (o ClusterMasterUserSecretOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterMasterUserSecret] {
	return pulumix.Output[ClusterMasterUserSecret]{
		OutputState: o.OutputState,
	}
}

// ARN for the KMS encryption key. When specifying `kmsKeyId`, `storageEncrypted` needs to be set to true.
func (o ClusterMasterUserSecretOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterUserSecret](o, func(v ClusterMasterUserSecret) *string { return v.KmsKeyId })
}

// Amazon Resource Name (ARN) of the secret.
func (o ClusterMasterUserSecretOutput) SecretArn() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterUserSecret](o, func(v ClusterMasterUserSecret) *string { return v.SecretArn })
}

// Status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
func (o ClusterMasterUserSecretOutput) SecretStatus() pulumix.Output[*string] {
	return pulumix.Apply[ClusterMasterUserSecret](o, func(v ClusterMasterUserSecret) *string { return v.SecretStatus })
}

type ClusterParameterGroupParameter struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name string `pulumi:"name"`
	// The value of the DB parameter.
	Value string `pulumi:"value"`
}

type ClusterParameterGroupParameterArgs struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod pulumix.Input[*string] `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the DB parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ClusterParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterParameterGroupParameter)(nil)).Elem()
}

func (i ClusterParameterGroupParameterArgs) ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput {
	return i.ToClusterParameterGroupParameterOutputWithContext(context.Background())
}

func (i ClusterParameterGroupParameterArgs) ToClusterParameterGroupParameterOutputWithContext(ctx context.Context) ClusterParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterParameterGroupParameterOutput)
}

func (i *ClusterParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ClusterParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ClusterParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterParameterGroupParameter)(nil)).Elem()
}

func (o ClusterParameterGroupParameterOutput) ToClusterParameterGroupParameterOutput() ClusterParameterGroupParameterOutput {
	return o
}

func (o ClusterParameterGroupParameterOutput) ToClusterParameterGroupParameterOutputWithContext(ctx context.Context) ClusterParameterGroupParameterOutput {
	return o
}

func (o ClusterParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterParameterGroupParameter] {
	return pulumix.Output[ClusterParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// "immediate" (default), or "pending-reboot". Some
// engines can't apply some parameters without a reboot, and you will need to
// specify "pending-reboot" here.
func (o ClusterParameterGroupParameterOutput) ApplyMethod() pulumix.Output[*string] {
	return pulumix.Apply[ClusterParameterGroupParameter](o, func(v ClusterParameterGroupParameter) *string { return v.ApplyMethod })
}

// The name of the DB parameter.
func (o ClusterParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ClusterParameterGroupParameter](o, func(v ClusterParameterGroupParameter) string { return v.Name })
}

// The value of the DB parameter.
func (o ClusterParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ClusterParameterGroupParameter](o, func(v ClusterParameterGroupParameter) string { return v.Value })
}

type ClusterRestoreToPointInTime struct {
	// Date and time in UTC format to restore the database cluster to. Conflicts with `useLatestRestorableTime`.
	RestoreToTime *string `pulumi:"restoreToTime"`
	// Type of restore to be performed.
	// Valid options are `full-copy` (default) and `copy-on-write`.
	RestoreType *string `pulumi:"restoreType"`
	// Identifier of the source database cluster from which to restore. When restoring from a cluster in another AWS account, the identifier is the ARN of that cluster.
	SourceClusterIdentifier string `pulumi:"sourceClusterIdentifier"`
	// Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with `restoreToTime`.
	UseLatestRestorableTime *bool `pulumi:"useLatestRestorableTime"`
}

type ClusterRestoreToPointInTimeArgs struct {
	// Date and time in UTC format to restore the database cluster to. Conflicts with `useLatestRestorableTime`.
	RestoreToTime pulumix.Input[*string] `pulumi:"restoreToTime"`
	// Type of restore to be performed.
	// Valid options are `full-copy` (default) and `copy-on-write`.
	RestoreType pulumix.Input[*string] `pulumi:"restoreType"`
	// Identifier of the source database cluster from which to restore. When restoring from a cluster in another AWS account, the identifier is the ARN of that cluster.
	SourceClusterIdentifier pulumix.Input[string] `pulumi:"sourceClusterIdentifier"`
	// Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with `restoreToTime`.
	UseLatestRestorableTime pulumix.Input[*bool] `pulumi:"useLatestRestorableTime"`
}

func (ClusterRestoreToPointInTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRestoreToPointInTime)(nil)).Elem()
}

func (i ClusterRestoreToPointInTimeArgs) ToClusterRestoreToPointInTimeOutput() ClusterRestoreToPointInTimeOutput {
	return i.ToClusterRestoreToPointInTimeOutputWithContext(context.Background())
}

func (i ClusterRestoreToPointInTimeArgs) ToClusterRestoreToPointInTimeOutputWithContext(ctx context.Context) ClusterRestoreToPointInTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRestoreToPointInTimeOutput)
}

func (i *ClusterRestoreToPointInTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterRestoreToPointInTimeArgs] {
	return pulumix.Val(i)
}

type ClusterRestoreToPointInTimeOutput struct{ *pulumi.OutputState }

func (ClusterRestoreToPointInTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRestoreToPointInTime)(nil)).Elem()
}

func (o ClusterRestoreToPointInTimeOutput) ToClusterRestoreToPointInTimeOutput() ClusterRestoreToPointInTimeOutput {
	return o
}

func (o ClusterRestoreToPointInTimeOutput) ToClusterRestoreToPointInTimeOutputWithContext(ctx context.Context) ClusterRestoreToPointInTimeOutput {
	return o
}

func (o ClusterRestoreToPointInTimeOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterRestoreToPointInTime] {
	return pulumix.Output[ClusterRestoreToPointInTime]{
		OutputState: o.OutputState,
	}
}

// Date and time in UTC format to restore the database cluster to. Conflicts with `useLatestRestorableTime`.
func (o ClusterRestoreToPointInTimeOutput) RestoreToTime() pulumix.Output[*string] {
	return pulumix.Apply[ClusterRestoreToPointInTime](o, func(v ClusterRestoreToPointInTime) *string { return v.RestoreToTime })
}

// Type of restore to be performed.
// Valid options are `full-copy` (default) and `copy-on-write`.
func (o ClusterRestoreToPointInTimeOutput) RestoreType() pulumix.Output[*string] {
	return pulumix.Apply[ClusterRestoreToPointInTime](o, func(v ClusterRestoreToPointInTime) *string { return v.RestoreType })
}

// Identifier of the source database cluster from which to restore. When restoring from a cluster in another AWS account, the identifier is the ARN of that cluster.
func (o ClusterRestoreToPointInTimeOutput) SourceClusterIdentifier() pulumix.Output[string] {
	return pulumix.Apply[ClusterRestoreToPointInTime](o, func(v ClusterRestoreToPointInTime) string { return v.SourceClusterIdentifier })
}

// Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with `restoreToTime`.
func (o ClusterRestoreToPointInTimeOutput) UseLatestRestorableTime() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterRestoreToPointInTime](o, func(v ClusterRestoreToPointInTime) *bool { return v.UseLatestRestorableTime })
}

type ClusterS3Import struct {
	// Bucket name where your backup is stored
	BucketName string `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole string `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine string `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	//
	// This will not recreate the resource if the S3 object changes in some way. It's only used to initialize the database. This only works currently with the aurora engine. See AWS for currently supported engines and options. See [Aurora S3 Migration Docs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3).
	SourceEngineVersion string `pulumi:"sourceEngineVersion"`
}

type ClusterS3ImportArgs struct {
	// Bucket name where your backup is stored
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole pulumix.Input[string] `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine pulumix.Input[string] `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	//
	// This will not recreate the resource if the S3 object changes in some way. It's only used to initialize the database. This only works currently with the aurora engine. See AWS for currently supported engines and options. See [Aurora S3 Migration Docs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3).
	SourceEngineVersion pulumix.Input[string] `pulumi:"sourceEngineVersion"`
}

func (ClusterS3ImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Import)(nil)).Elem()
}

func (i ClusterS3ImportArgs) ToClusterS3ImportOutput() ClusterS3ImportOutput {
	return i.ToClusterS3ImportOutputWithContext(context.Background())
}

func (i ClusterS3ImportArgs) ToClusterS3ImportOutputWithContext(ctx context.Context) ClusterS3ImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3ImportOutput)
}

func (i *ClusterS3ImportArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterS3ImportArgs] {
	return pulumix.Val(i)
}

type ClusterS3ImportOutput struct{ *pulumi.OutputState }

func (ClusterS3ImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Import)(nil)).Elem()
}

func (o ClusterS3ImportOutput) ToClusterS3ImportOutput() ClusterS3ImportOutput {
	return o
}

func (o ClusterS3ImportOutput) ToClusterS3ImportOutputWithContext(ctx context.Context) ClusterS3ImportOutput {
	return o
}

func (o ClusterS3ImportOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterS3Import] {
	return pulumix.Output[ClusterS3Import]{
		OutputState: o.OutputState,
	}
}

// Bucket name where your backup is stored
func (o ClusterS3ImportOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[ClusterS3Import](o, func(v ClusterS3Import) string { return v.BucketName })
}

// Can be blank, but is the path to your backup
func (o ClusterS3ImportOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[ClusterS3Import](o, func(v ClusterS3Import) *string { return v.BucketPrefix })
}

// Role applied to load the data.
func (o ClusterS3ImportOutput) IngestionRole() pulumix.Output[string] {
	return pulumix.Apply[ClusterS3Import](o, func(v ClusterS3Import) string { return v.IngestionRole })
}

// Source engine for the backup
func (o ClusterS3ImportOutput) SourceEngine() pulumix.Output[string] {
	return pulumix.Apply[ClusterS3Import](o, func(v ClusterS3Import) string { return v.SourceEngine })
}

// Version of the source engine used to make the backup
//
// This will not recreate the resource if the S3 object changes in some way. It's only used to initialize the database. This only works currently with the aurora engine. See AWS for currently supported engines and options. See [Aurora S3 Migration Docs](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3).
func (o ClusterS3ImportOutput) SourceEngineVersion() pulumix.Output[string] {
	return pulumix.Apply[ClusterS3Import](o, func(v ClusterS3Import) string { return v.SourceEngineVersion })
}

type ClusterScalingConfiguration struct {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
	AutoPause *bool `pulumi:"autoPause"`
	// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
	MaxCapacity *int `pulumi:"maxCapacity"`
	// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
	MinCapacity *int `pulumi:"minCapacity"`
	// Time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
	SecondsUntilAutoPause *int `pulumi:"secondsUntilAutoPause"`
	// Action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
	TimeoutAction *string `pulumi:"timeoutAction"`
}

type ClusterScalingConfigurationArgs struct {
	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
	AutoPause pulumix.Input[*bool] `pulumi:"autoPause"`
	// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
	MaxCapacity pulumix.Input[*int] `pulumi:"maxCapacity"`
	// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
	MinCapacity pulumix.Input[*int] `pulumi:"minCapacity"`
	// Time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
	SecondsUntilAutoPause pulumix.Input[*int] `pulumi:"secondsUntilAutoPause"`
	// Action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
	TimeoutAction pulumix.Input[*string] `pulumi:"timeoutAction"`
}

func (ClusterScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterScalingConfiguration)(nil)).Elem()
}

func (i ClusterScalingConfigurationArgs) ToClusterScalingConfigurationOutput() ClusterScalingConfigurationOutput {
	return i.ToClusterScalingConfigurationOutputWithContext(context.Background())
}

func (i ClusterScalingConfigurationArgs) ToClusterScalingConfigurationOutputWithContext(ctx context.Context) ClusterScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScalingConfigurationOutput)
}

func (i *ClusterScalingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterScalingConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterScalingConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterScalingConfiguration)(nil)).Elem()
}

func (o ClusterScalingConfigurationOutput) ToClusterScalingConfigurationOutput() ClusterScalingConfigurationOutput {
	return o
}

func (o ClusterScalingConfigurationOutput) ToClusterScalingConfigurationOutputWithContext(ctx context.Context) ClusterScalingConfigurationOutput {
	return o
}

func (o ClusterScalingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterScalingConfiguration] {
	return pulumix.Output[ClusterScalingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
func (o ClusterScalingConfigurationOutput) AutoPause() pulumix.Output[*bool] {
	return pulumix.Apply[ClusterScalingConfiguration](o, func(v ClusterScalingConfiguration) *bool { return v.AutoPause })
}

// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
func (o ClusterScalingConfigurationOutput) MaxCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterScalingConfiguration](o, func(v ClusterScalingConfiguration) *int { return v.MaxCapacity })
}

// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
func (o ClusterScalingConfigurationOutput) MinCapacity() pulumix.Output[*int] {
	return pulumix.Apply[ClusterScalingConfiguration](o, func(v ClusterScalingConfiguration) *int { return v.MinCapacity })
}

// Time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
func (o ClusterScalingConfigurationOutput) SecondsUntilAutoPause() pulumix.Output[*int] {
	return pulumix.Apply[ClusterScalingConfiguration](o, func(v ClusterScalingConfiguration) *int { return v.SecondsUntilAutoPause })
}

// Action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
func (o ClusterScalingConfigurationOutput) TimeoutAction() pulumix.Output[*string] {
	return pulumix.Apply[ClusterScalingConfiguration](o, func(v ClusterScalingConfiguration) *string { return v.TimeoutAction })
}

type ClusterServerlessv2ScalingConfiguration struct {
	// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
	MaxCapacity float64 `pulumi:"maxCapacity"`
	// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
	MinCapacity float64 `pulumi:"minCapacity"`
}

type ClusterServerlessv2ScalingConfigurationArgs struct {
	// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
	MaxCapacity pulumix.Input[float64] `pulumi:"maxCapacity"`
	// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
	MinCapacity pulumix.Input[float64] `pulumi:"minCapacity"`
}

func (ClusterServerlessv2ScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerlessv2ScalingConfiguration)(nil)).Elem()
}

func (i ClusterServerlessv2ScalingConfigurationArgs) ToClusterServerlessv2ScalingConfigurationOutput() ClusterServerlessv2ScalingConfigurationOutput {
	return i.ToClusterServerlessv2ScalingConfigurationOutputWithContext(context.Background())
}

func (i ClusterServerlessv2ScalingConfigurationArgs) ToClusterServerlessv2ScalingConfigurationOutputWithContext(ctx context.Context) ClusterServerlessv2ScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessv2ScalingConfigurationOutput)
}

func (i *ClusterServerlessv2ScalingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterServerlessv2ScalingConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterServerlessv2ScalingConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterServerlessv2ScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerlessv2ScalingConfiguration)(nil)).Elem()
}

func (o ClusterServerlessv2ScalingConfigurationOutput) ToClusterServerlessv2ScalingConfigurationOutput() ClusterServerlessv2ScalingConfigurationOutput {
	return o
}

func (o ClusterServerlessv2ScalingConfigurationOutput) ToClusterServerlessv2ScalingConfigurationOutputWithContext(ctx context.Context) ClusterServerlessv2ScalingConfigurationOutput {
	return o
}

func (o ClusterServerlessv2ScalingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterServerlessv2ScalingConfiguration] {
	return pulumix.Output[ClusterServerlessv2ScalingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
func (o ClusterServerlessv2ScalingConfigurationOutput) MaxCapacity() pulumix.Output[float64] {
	return pulumix.Apply[ClusterServerlessv2ScalingConfiguration](o, func(v ClusterServerlessv2ScalingConfiguration) float64 { return v.MaxCapacity })
}

// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode. The minimum capacity must be lesser than or equal to the maximum capacity. Valid Aurora MySQL capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, `256`. Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `1`.
func (o ClusterServerlessv2ScalingConfigurationOutput) MinCapacity() pulumix.Output[float64] {
	return pulumix.Apply[ClusterServerlessv2ScalingConfiguration](o, func(v ClusterServerlessv2ScalingConfiguration) float64 { return v.MinCapacity })
}

type ExportTaskTimeouts struct {
	Create *string `pulumi:"create"`
	Delete *string `pulumi:"delete"`
}

type ExportTaskTimeoutsArgs struct {
	Create pulumix.Input[*string] `pulumi:"create"`
	Delete pulumix.Input[*string] `pulumi:"delete"`
}

func (ExportTaskTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTaskTimeouts)(nil)).Elem()
}

func (i ExportTaskTimeoutsArgs) ToExportTaskTimeoutsOutput() ExportTaskTimeoutsOutput {
	return i.ToExportTaskTimeoutsOutputWithContext(context.Background())
}

func (i ExportTaskTimeoutsArgs) ToExportTaskTimeoutsOutputWithContext(ctx context.Context) ExportTaskTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTaskTimeoutsOutput)
}

func (i *ExportTaskTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[*ExportTaskTimeoutsArgs] {
	return pulumix.Val(i)
}

type ExportTaskTimeoutsOutput struct{ *pulumi.OutputState }

func (ExportTaskTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTaskTimeouts)(nil)).Elem()
}

func (o ExportTaskTimeoutsOutput) ToExportTaskTimeoutsOutput() ExportTaskTimeoutsOutput {
	return o
}

func (o ExportTaskTimeoutsOutput) ToExportTaskTimeoutsOutputWithContext(ctx context.Context) ExportTaskTimeoutsOutput {
	return o
}

func (o ExportTaskTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[ExportTaskTimeouts] {
	return pulumix.Output[ExportTaskTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o ExportTaskTimeoutsOutput) Create() pulumix.Output[*string] {
	return pulumix.Apply[ExportTaskTimeouts](o, func(v ExportTaskTimeouts) *string { return v.Create })
}

func (o ExportTaskTimeoutsOutput) Delete() pulumix.Output[*string] {
	return pulumix.Apply[ExportTaskTimeouts](o, func(v ExportTaskTimeouts) *string { return v.Delete })
}

type GlobalClusterGlobalClusterMember struct {
	// Amazon Resource Name (ARN) of member DB Cluster
	DbClusterArn *string `pulumi:"dbClusterArn"`
	// Whether the member is the primary DB Cluster
	IsWriter *bool `pulumi:"isWriter"`
}

type GlobalClusterGlobalClusterMemberArgs struct {
	// Amazon Resource Name (ARN) of member DB Cluster
	DbClusterArn pulumix.Input[*string] `pulumi:"dbClusterArn"`
	// Whether the member is the primary DB Cluster
	IsWriter pulumix.Input[*bool] `pulumi:"isWriter"`
}

func (GlobalClusterGlobalClusterMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalClusterGlobalClusterMember)(nil)).Elem()
}

func (i GlobalClusterGlobalClusterMemberArgs) ToGlobalClusterGlobalClusterMemberOutput() GlobalClusterGlobalClusterMemberOutput {
	return i.ToGlobalClusterGlobalClusterMemberOutputWithContext(context.Background())
}

func (i GlobalClusterGlobalClusterMemberArgs) ToGlobalClusterGlobalClusterMemberOutputWithContext(ctx context.Context) GlobalClusterGlobalClusterMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalClusterGlobalClusterMemberOutput)
}

func (i *GlobalClusterGlobalClusterMemberArgs) ToOutput(ctx context.Context) pulumix.Output[*GlobalClusterGlobalClusterMemberArgs] {
	return pulumix.Val(i)
}

type GlobalClusterGlobalClusterMemberOutput struct{ *pulumi.OutputState }

func (GlobalClusterGlobalClusterMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalClusterGlobalClusterMember)(nil)).Elem()
}

func (o GlobalClusterGlobalClusterMemberOutput) ToGlobalClusterGlobalClusterMemberOutput() GlobalClusterGlobalClusterMemberOutput {
	return o
}

func (o GlobalClusterGlobalClusterMemberOutput) ToGlobalClusterGlobalClusterMemberOutputWithContext(ctx context.Context) GlobalClusterGlobalClusterMemberOutput {
	return o
}

func (o GlobalClusterGlobalClusterMemberOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalClusterGlobalClusterMember] {
	return pulumix.Output[GlobalClusterGlobalClusterMember]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of member DB Cluster
func (o GlobalClusterGlobalClusterMemberOutput) DbClusterArn() pulumix.Output[*string] {
	return pulumix.Apply[GlobalClusterGlobalClusterMember](o, func(v GlobalClusterGlobalClusterMember) *string { return v.DbClusterArn })
}

// Whether the member is the primary DB Cluster
func (o GlobalClusterGlobalClusterMemberOutput) IsWriter() pulumix.Output[*bool] {
	return pulumix.Apply[GlobalClusterGlobalClusterMember](o, func(v GlobalClusterGlobalClusterMember) *bool { return v.IsWriter })
}

type InstanceBlueGreenUpdate struct {
	// Enables low-downtime updates when `true`.
	// Default is `false`.
	//
	// [instance-replication]:
	// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html
	// [instance-maintenance]:
	// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html
	// [blue-green]:
	// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html
	Enabled *bool `pulumi:"enabled"`
}

type InstanceBlueGreenUpdateArgs struct {
	// Enables low-downtime updates when `true`.
	// Default is `false`.
	//
	// [instance-replication]:
	// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html
	// [instance-maintenance]:
	// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html
	// [blue-green]:
	// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (InstanceBlueGreenUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBlueGreenUpdate)(nil)).Elem()
}

func (i InstanceBlueGreenUpdateArgs) ToInstanceBlueGreenUpdateOutput() InstanceBlueGreenUpdateOutput {
	return i.ToInstanceBlueGreenUpdateOutputWithContext(context.Background())
}

func (i InstanceBlueGreenUpdateArgs) ToInstanceBlueGreenUpdateOutputWithContext(ctx context.Context) InstanceBlueGreenUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBlueGreenUpdateOutput)
}

func (i *InstanceBlueGreenUpdateArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceBlueGreenUpdateArgs] {
	return pulumix.Val(i)
}

type InstanceBlueGreenUpdateOutput struct{ *pulumi.OutputState }

func (InstanceBlueGreenUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBlueGreenUpdate)(nil)).Elem()
}

func (o InstanceBlueGreenUpdateOutput) ToInstanceBlueGreenUpdateOutput() InstanceBlueGreenUpdateOutput {
	return o
}

func (o InstanceBlueGreenUpdateOutput) ToInstanceBlueGreenUpdateOutputWithContext(ctx context.Context) InstanceBlueGreenUpdateOutput {
	return o
}

func (o InstanceBlueGreenUpdateOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceBlueGreenUpdate] {
	return pulumix.Output[InstanceBlueGreenUpdate]{
		OutputState: o.OutputState,
	}
}

// Enables low-downtime updates when `true`.
// Default is `false`.
//
// [instance-replication]:
// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html
// [instance-maintenance]:
// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html
// [blue-green]:
// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html
func (o InstanceBlueGreenUpdateOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[InstanceBlueGreenUpdate](o, func(v InstanceBlueGreenUpdate) *bool { return v.Enabled })
}

type InstanceListenerEndpoint struct {
	// Specifies the DNS address of the DB instance.
	Address *string `pulumi:"address"`
	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	HostedZoneId *string `pulumi:"hostedZoneId"`
	// The port on which the DB accepts connections.
	Port *int `pulumi:"port"`
}

type InstanceListenerEndpointArgs struct {
	// Specifies the DNS address of the DB instance.
	Address pulumix.Input[*string] `pulumi:"address"`
	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	HostedZoneId pulumix.Input[*string] `pulumi:"hostedZoneId"`
	// The port on which the DB accepts connections.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (InstanceListenerEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceListenerEndpoint)(nil)).Elem()
}

func (i InstanceListenerEndpointArgs) ToInstanceListenerEndpointOutput() InstanceListenerEndpointOutput {
	return i.ToInstanceListenerEndpointOutputWithContext(context.Background())
}

func (i InstanceListenerEndpointArgs) ToInstanceListenerEndpointOutputWithContext(ctx context.Context) InstanceListenerEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceListenerEndpointOutput)
}

func (i *InstanceListenerEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceListenerEndpointArgs] {
	return pulumix.Val(i)
}

type InstanceListenerEndpointOutput struct{ *pulumi.OutputState }

func (InstanceListenerEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceListenerEndpoint)(nil)).Elem()
}

func (o InstanceListenerEndpointOutput) ToInstanceListenerEndpointOutput() InstanceListenerEndpointOutput {
	return o
}

func (o InstanceListenerEndpointOutput) ToInstanceListenerEndpointOutputWithContext(ctx context.Context) InstanceListenerEndpointOutput {
	return o
}

func (o InstanceListenerEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceListenerEndpoint] {
	return pulumix.Output[InstanceListenerEndpoint]{
		OutputState: o.OutputState,
	}
}

// Specifies the DNS address of the DB instance.
func (o InstanceListenerEndpointOutput) Address() pulumix.Output[*string] {
	return pulumix.Apply[InstanceListenerEndpoint](o, func(v InstanceListenerEndpoint) *string { return v.Address })
}

// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
func (o InstanceListenerEndpointOutput) HostedZoneId() pulumix.Output[*string] {
	return pulumix.Apply[InstanceListenerEndpoint](o, func(v InstanceListenerEndpoint) *string { return v.HostedZoneId })
}

// The port on which the DB accepts connections.
func (o InstanceListenerEndpointOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[InstanceListenerEndpoint](o, func(v InstanceListenerEndpoint) *int { return v.Port })
}

type InstanceMasterUserSecret struct {
	// The ARN for the KMS encryption key. If creating an
	// encrypted replica, set this to the destination KMS ARN.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the secret.
	SecretArn *string `pulumi:"secretArn"`
	// The status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
	SecretStatus *string `pulumi:"secretStatus"`
}

type InstanceMasterUserSecretArgs struct {
	// The ARN for the KMS encryption key. If creating an
	// encrypted replica, set this to the destination KMS ARN.
	KmsKeyId pulumix.Input[*string] `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the secret.
	SecretArn pulumix.Input[*string] `pulumi:"secretArn"`
	// The status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
	SecretStatus pulumix.Input[*string] `pulumi:"secretStatus"`
}

func (InstanceMasterUserSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMasterUserSecret)(nil)).Elem()
}

func (i InstanceMasterUserSecretArgs) ToInstanceMasterUserSecretOutput() InstanceMasterUserSecretOutput {
	return i.ToInstanceMasterUserSecretOutputWithContext(context.Background())
}

func (i InstanceMasterUserSecretArgs) ToInstanceMasterUserSecretOutputWithContext(ctx context.Context) InstanceMasterUserSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMasterUserSecretOutput)
}

func (i *InstanceMasterUserSecretArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceMasterUserSecretArgs] {
	return pulumix.Val(i)
}

type InstanceMasterUserSecretOutput struct{ *pulumi.OutputState }

func (InstanceMasterUserSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMasterUserSecret)(nil)).Elem()
}

func (o InstanceMasterUserSecretOutput) ToInstanceMasterUserSecretOutput() InstanceMasterUserSecretOutput {
	return o
}

func (o InstanceMasterUserSecretOutput) ToInstanceMasterUserSecretOutputWithContext(ctx context.Context) InstanceMasterUserSecretOutput {
	return o
}

func (o InstanceMasterUserSecretOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceMasterUserSecret] {
	return pulumix.Output[InstanceMasterUserSecret]{
		OutputState: o.OutputState,
	}
}

// The ARN for the KMS encryption key. If creating an
// encrypted replica, set this to the destination KMS ARN.
func (o InstanceMasterUserSecretOutput) KmsKeyId() pulumix.Output[*string] {
	return pulumix.Apply[InstanceMasterUserSecret](o, func(v InstanceMasterUserSecret) *string { return v.KmsKeyId })
}

// The Amazon Resource Name (ARN) of the secret.
func (o InstanceMasterUserSecretOutput) SecretArn() pulumix.Output[*string] {
	return pulumix.Apply[InstanceMasterUserSecret](o, func(v InstanceMasterUserSecret) *string { return v.SecretArn })
}

// The status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
func (o InstanceMasterUserSecretOutput) SecretStatus() pulumix.Output[*string] {
	return pulumix.Apply[InstanceMasterUserSecret](o, func(v InstanceMasterUserSecret) *string { return v.SecretStatus })
}

type InstanceRestoreToPointInTime struct {
	// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with `useLatestRestorableTime`.
	RestoreTime *string `pulumi:"restoreTime"`
	// The ARN of the automated backup from which to restore. Required if `sourceDbInstanceIdentifier` or `sourceDbiResourceId` is not specified.
	SourceDbInstanceAutomatedBackupsArn *string `pulumi:"sourceDbInstanceAutomatedBackupsArn"`
	// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if `sourceDbInstanceAutomatedBackupsArn` or `sourceDbiResourceId` is not specified.
	SourceDbInstanceIdentifier *string `pulumi:"sourceDbInstanceIdentifier"`
	// The resource ID of the source DB instance from which to restore. Required if `sourceDbInstanceIdentifier` or `sourceDbInstanceAutomatedBackupsArn` is not specified.
	SourceDbiResourceId *string `pulumi:"sourceDbiResourceId"`
	// A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to `false`. Cannot be specified with `restoreTime`.
	UseLatestRestorableTime *bool `pulumi:"useLatestRestorableTime"`
}

type InstanceRestoreToPointInTimeArgs struct {
	// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with `useLatestRestorableTime`.
	RestoreTime pulumix.Input[*string] `pulumi:"restoreTime"`
	// The ARN of the automated backup from which to restore. Required if `sourceDbInstanceIdentifier` or `sourceDbiResourceId` is not specified.
	SourceDbInstanceAutomatedBackupsArn pulumix.Input[*string] `pulumi:"sourceDbInstanceAutomatedBackupsArn"`
	// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if `sourceDbInstanceAutomatedBackupsArn` or `sourceDbiResourceId` is not specified.
	SourceDbInstanceIdentifier pulumix.Input[*string] `pulumi:"sourceDbInstanceIdentifier"`
	// The resource ID of the source DB instance from which to restore. Required if `sourceDbInstanceIdentifier` or `sourceDbInstanceAutomatedBackupsArn` is not specified.
	SourceDbiResourceId pulumix.Input[*string] `pulumi:"sourceDbiResourceId"`
	// A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to `false`. Cannot be specified with `restoreTime`.
	UseLatestRestorableTime pulumix.Input[*bool] `pulumi:"useLatestRestorableTime"`
}

func (InstanceRestoreToPointInTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRestoreToPointInTime)(nil)).Elem()
}

func (i InstanceRestoreToPointInTimeArgs) ToInstanceRestoreToPointInTimeOutput() InstanceRestoreToPointInTimeOutput {
	return i.ToInstanceRestoreToPointInTimeOutputWithContext(context.Background())
}

func (i InstanceRestoreToPointInTimeArgs) ToInstanceRestoreToPointInTimeOutputWithContext(ctx context.Context) InstanceRestoreToPointInTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceRestoreToPointInTimeOutput)
}

func (i *InstanceRestoreToPointInTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceRestoreToPointInTimeArgs] {
	return pulumix.Val(i)
}

type InstanceRestoreToPointInTimeOutput struct{ *pulumi.OutputState }

func (InstanceRestoreToPointInTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceRestoreToPointInTime)(nil)).Elem()
}

func (o InstanceRestoreToPointInTimeOutput) ToInstanceRestoreToPointInTimeOutput() InstanceRestoreToPointInTimeOutput {
	return o
}

func (o InstanceRestoreToPointInTimeOutput) ToInstanceRestoreToPointInTimeOutputWithContext(ctx context.Context) InstanceRestoreToPointInTimeOutput {
	return o
}

func (o InstanceRestoreToPointInTimeOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceRestoreToPointInTime] {
	return pulumix.Output[InstanceRestoreToPointInTime]{
		OutputState: o.OutputState,
	}
}

// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with `useLatestRestorableTime`.
func (o InstanceRestoreToPointInTimeOutput) RestoreTime() pulumix.Output[*string] {
	return pulumix.Apply[InstanceRestoreToPointInTime](o, func(v InstanceRestoreToPointInTime) *string { return v.RestoreTime })
}

// The ARN of the automated backup from which to restore. Required if `sourceDbInstanceIdentifier` or `sourceDbiResourceId` is not specified.
func (o InstanceRestoreToPointInTimeOutput) SourceDbInstanceAutomatedBackupsArn() pulumix.Output[*string] {
	return pulumix.Apply[InstanceRestoreToPointInTime](o, func(v InstanceRestoreToPointInTime) *string { return v.SourceDbInstanceAutomatedBackupsArn })
}

// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if `sourceDbInstanceAutomatedBackupsArn` or `sourceDbiResourceId` is not specified.
func (o InstanceRestoreToPointInTimeOutput) SourceDbInstanceIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[InstanceRestoreToPointInTime](o, func(v InstanceRestoreToPointInTime) *string { return v.SourceDbInstanceIdentifier })
}

// The resource ID of the source DB instance from which to restore. Required if `sourceDbInstanceIdentifier` or `sourceDbInstanceAutomatedBackupsArn` is not specified.
func (o InstanceRestoreToPointInTimeOutput) SourceDbiResourceId() pulumix.Output[*string] {
	return pulumix.Apply[InstanceRestoreToPointInTime](o, func(v InstanceRestoreToPointInTime) *string { return v.SourceDbiResourceId })
}

// A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to `false`. Cannot be specified with `restoreTime`.
func (o InstanceRestoreToPointInTimeOutput) UseLatestRestorableTime() pulumix.Output[*bool] {
	return pulumix.Apply[InstanceRestoreToPointInTime](o, func(v InstanceRestoreToPointInTime) *bool { return v.UseLatestRestorableTime })
}

type InstanceS3Import struct {
	// The bucket name where your backup is stored
	BucketName string `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole string `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine string `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	//
	// This will not recreate the resource if the S3 object changes in some way.  It's only used to initialize the database.
	SourceEngineVersion string `pulumi:"sourceEngineVersion"`
}

type InstanceS3ImportArgs struct {
	// The bucket name where your backup is stored
	BucketName pulumix.Input[string] `pulumi:"bucketName"`
	// Can be blank, but is the path to your backup
	BucketPrefix pulumix.Input[*string] `pulumi:"bucketPrefix"`
	// Role applied to load the data.
	IngestionRole pulumix.Input[string] `pulumi:"ingestionRole"`
	// Source engine for the backup
	SourceEngine pulumix.Input[string] `pulumi:"sourceEngine"`
	// Version of the source engine used to make the backup
	//
	// This will not recreate the resource if the S3 object changes in some way.  It's only used to initialize the database.
	SourceEngineVersion pulumix.Input[string] `pulumi:"sourceEngineVersion"`
}

func (InstanceS3ImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceS3Import)(nil)).Elem()
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportOutput() InstanceS3ImportOutput {
	return i.ToInstanceS3ImportOutputWithContext(context.Background())
}

func (i InstanceS3ImportArgs) ToInstanceS3ImportOutputWithContext(ctx context.Context) InstanceS3ImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceS3ImportOutput)
}

func (i *InstanceS3ImportArgs) ToOutput(ctx context.Context) pulumix.Output[*InstanceS3ImportArgs] {
	return pulumix.Val(i)
}

type InstanceS3ImportOutput struct{ *pulumi.OutputState }

func (InstanceS3ImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceS3Import)(nil)).Elem()
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportOutput() InstanceS3ImportOutput {
	return o
}

func (o InstanceS3ImportOutput) ToInstanceS3ImportOutputWithContext(ctx context.Context) InstanceS3ImportOutput {
	return o
}

func (o InstanceS3ImportOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceS3Import] {
	return pulumix.Output[InstanceS3Import]{
		OutputState: o.OutputState,
	}
}

// The bucket name where your backup is stored
func (o InstanceS3ImportOutput) BucketName() pulumix.Output[string] {
	return pulumix.Apply[InstanceS3Import](o, func(v InstanceS3Import) string { return v.BucketName })
}

// Can be blank, but is the path to your backup
func (o InstanceS3ImportOutput) BucketPrefix() pulumix.Output[*string] {
	return pulumix.Apply[InstanceS3Import](o, func(v InstanceS3Import) *string { return v.BucketPrefix })
}

// Role applied to load the data.
func (o InstanceS3ImportOutput) IngestionRole() pulumix.Output[string] {
	return pulumix.Apply[InstanceS3Import](o, func(v InstanceS3Import) string { return v.IngestionRole })
}

// Source engine for the backup
func (o InstanceS3ImportOutput) SourceEngine() pulumix.Output[string] {
	return pulumix.Apply[InstanceS3Import](o, func(v InstanceS3Import) string { return v.SourceEngine })
}

// Version of the source engine used to make the backup
//
// This will not recreate the resource if the S3 object changes in some way.  It's only used to initialize the database.
func (o InstanceS3ImportOutput) SourceEngineVersion() pulumix.Output[string] {
	return pulumix.Apply[InstanceS3Import](o, func(v InstanceS3Import) string { return v.SourceEngineVersion })
}

type OptionGroupOption struct {
	// A list of DB Security Groups for which the option is enabled.
	DbSecurityGroupMemberships []string `pulumi:"dbSecurityGroupMemberships"`
	// The Name of the Option (e.g., MEMCACHED).
	OptionName string `pulumi:"optionName"`
	// A list of option settings to apply.
	OptionSettings []OptionGroupOptionOptionSetting `pulumi:"optionSettings"`
	// The Port number when connecting to the Option (e.g., 11211).
	Port *int `pulumi:"port"`
	// The version of the option (e.g., 13.1.0.0).
	Version *string `pulumi:"version"`
	// A list of VPC Security Groups for which the option is enabled.
	VpcSecurityGroupMemberships []string `pulumi:"vpcSecurityGroupMemberships"`
}

type OptionGroupOptionArgs struct {
	// A list of DB Security Groups for which the option is enabled.
	DbSecurityGroupMemberships pulumix.Input[[]string] `pulumi:"dbSecurityGroupMemberships"`
	// The Name of the Option (e.g., MEMCACHED).
	OptionName pulumix.Input[string] `pulumi:"optionName"`
	// A list of option settings to apply.
	OptionSettings pulumix.Input[[]*OptionGroupOptionOptionSettingArgs] `pulumi:"optionSettings"`
	// The Port number when connecting to the Option (e.g., 11211).
	Port pulumix.Input[*int] `pulumi:"port"`
	// The version of the option (e.g., 13.1.0.0).
	Version pulumix.Input[*string] `pulumi:"version"`
	// A list of VPC Security Groups for which the option is enabled.
	VpcSecurityGroupMemberships pulumix.Input[[]string] `pulumi:"vpcSecurityGroupMemberships"`
}

func (OptionGroupOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOption)(nil)).Elem()
}

func (i OptionGroupOptionArgs) ToOptionGroupOptionOutput() OptionGroupOptionOutput {
	return i.ToOptionGroupOptionOutputWithContext(context.Background())
}

func (i OptionGroupOptionArgs) ToOptionGroupOptionOutputWithContext(ctx context.Context) OptionGroupOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOptionOutput)
}

func (i *OptionGroupOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*OptionGroupOptionArgs] {
	return pulumix.Val(i)
}

type OptionGroupOptionOutput struct{ *pulumi.OutputState }

func (OptionGroupOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOption)(nil)).Elem()
}

func (o OptionGroupOptionOutput) ToOptionGroupOptionOutput() OptionGroupOptionOutput {
	return o
}

func (o OptionGroupOptionOutput) ToOptionGroupOptionOutputWithContext(ctx context.Context) OptionGroupOptionOutput {
	return o
}

func (o OptionGroupOptionOutput) ToOutput(ctx context.Context) pulumix.Output[OptionGroupOption] {
	return pulumix.Output[OptionGroupOption]{
		OutputState: o.OutputState,
	}
}

// A list of DB Security Groups for which the option is enabled.
func (o OptionGroupOptionOutput) DbSecurityGroupMemberships() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OptionGroupOption](o, func(v OptionGroupOption) []string { return v.DbSecurityGroupMemberships })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The Name of the Option (e.g., MEMCACHED).
func (o OptionGroupOptionOutput) OptionName() pulumix.Output[string] {
	return pulumix.Apply[OptionGroupOption](o, func(v OptionGroupOption) string { return v.OptionName })
}

// A list of option settings to apply.
func (o OptionGroupOptionOutput) OptionSettings() pulumix.GArrayOutput[OptionGroupOptionOptionSetting, OptionGroupOptionOptionSettingOutput] {
	value := pulumix.Apply[OptionGroupOption](o, func(v OptionGroupOption) []OptionGroupOptionOptionSetting { return v.OptionSettings })
	return pulumix.GArrayOutput[OptionGroupOptionOptionSetting, OptionGroupOptionOptionSettingOutput]{OutputState: value.OutputState}
}

// The Port number when connecting to the Option (e.g., 11211).
func (o OptionGroupOptionOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[OptionGroupOption](o, func(v OptionGroupOption) *int { return v.Port })
}

// The version of the option (e.g., 13.1.0.0).
func (o OptionGroupOptionOutput) Version() pulumix.Output[*string] {
	return pulumix.Apply[OptionGroupOption](o, func(v OptionGroupOption) *string { return v.Version })
}

// A list of VPC Security Groups for which the option is enabled.
func (o OptionGroupOptionOutput) VpcSecurityGroupMemberships() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OptionGroupOption](o, func(v OptionGroupOption) []string { return v.VpcSecurityGroupMemberships })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type OptionGroupOptionOptionSetting struct {
	// The Name of the setting.
	Name string `pulumi:"name"`
	// The Value of the setting.
	Value string `pulumi:"value"`
}

type OptionGroupOptionOptionSettingArgs struct {
	// The Name of the setting.
	Name pulumix.Input[string] `pulumi:"name"`
	// The Value of the setting.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (OptionGroupOptionOptionSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOptionOptionSetting)(nil)).Elem()
}

func (i OptionGroupOptionOptionSettingArgs) ToOptionGroupOptionOptionSettingOutput() OptionGroupOptionOptionSettingOutput {
	return i.ToOptionGroupOptionOptionSettingOutputWithContext(context.Background())
}

func (i OptionGroupOptionOptionSettingArgs) ToOptionGroupOptionOptionSettingOutputWithContext(ctx context.Context) OptionGroupOptionOptionSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOptionOptionSettingOutput)
}

func (i *OptionGroupOptionOptionSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*OptionGroupOptionOptionSettingArgs] {
	return pulumix.Val(i)
}

type OptionGroupOptionOptionSettingOutput struct{ *pulumi.OutputState }

func (OptionGroupOptionOptionSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionGroupOptionOptionSetting)(nil)).Elem()
}

func (o OptionGroupOptionOptionSettingOutput) ToOptionGroupOptionOptionSettingOutput() OptionGroupOptionOptionSettingOutput {
	return o
}

func (o OptionGroupOptionOptionSettingOutput) ToOptionGroupOptionOptionSettingOutputWithContext(ctx context.Context) OptionGroupOptionOptionSettingOutput {
	return o
}

func (o OptionGroupOptionOptionSettingOutput) ToOutput(ctx context.Context) pulumix.Output[OptionGroupOptionOptionSetting] {
	return pulumix.Output[OptionGroupOptionOptionSetting]{
		OutputState: o.OutputState,
	}
}

// The Name of the setting.
func (o OptionGroupOptionOptionSettingOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[OptionGroupOptionOptionSetting](o, func(v OptionGroupOptionOptionSetting) string { return v.Name })
}

// The Value of the setting.
func (o OptionGroupOptionOptionSettingOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[OptionGroupOptionOptionSetting](o, func(v OptionGroupOptionOptionSetting) string { return v.Value })
}

type ParameterGroupParameter struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod *string `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name string `pulumi:"name"`
	// The value of the DB parameter.
	Value string `pulumi:"value"`
}

type ParameterGroupParameterArgs struct {
	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod pulumix.Input[*string] `pulumi:"applyMethod"`
	// The name of the DB parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the DB parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

func (i *ParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ParameterGroupParameter] {
	return pulumix.Output[ParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// "immediate" (default), or "pending-reboot". Some
// engines can't apply some parameters without a reboot, and you will need to
// specify "pending-reboot" here.
func (o ParameterGroupParameterOutput) ApplyMethod() pulumix.Output[*string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) *string { return v.ApplyMethod })
}

// The name of the DB parameter.
func (o ParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Name })
}

// The value of the DB parameter.
func (o ParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Value })
}

type ProxyAuth struct {
	// The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
	AuthScheme *string `pulumi:"authScheme"`
	// The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
	ClientPasswordAuthType *string `pulumi:"clientPasswordAuthType"`
	// A user-specified description about the authentication used by a proxy to log in as a specific database user.
	Description *string `pulumi:"description"`
	// Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
	IamAuth *string `pulumi:"iamAuth"`
	// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
	SecretArn *string `pulumi:"secretArn"`
	// The name of the database user to which the proxy connects.
	Username *string `pulumi:"username"`
}

type ProxyAuthArgs struct {
	// The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
	AuthScheme pulumix.Input[*string] `pulumi:"authScheme"`
	// The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
	ClientPasswordAuthType pulumix.Input[*string] `pulumi:"clientPasswordAuthType"`
	// A user-specified description about the authentication used by a proxy to log in as a specific database user.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
	IamAuth pulumix.Input[*string] `pulumi:"iamAuth"`
	// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
	SecretArn pulumix.Input[*string] `pulumi:"secretArn"`
	// The name of the database user to which the proxy connects.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ProxyAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyAuth)(nil)).Elem()
}

func (i ProxyAuthArgs) ToProxyAuthOutput() ProxyAuthOutput {
	return i.ToProxyAuthOutputWithContext(context.Background())
}

func (i ProxyAuthArgs) ToProxyAuthOutputWithContext(ctx context.Context) ProxyAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyAuthOutput)
}

func (i *ProxyAuthArgs) ToOutput(ctx context.Context) pulumix.Output[*ProxyAuthArgs] {
	return pulumix.Val(i)
}

type ProxyAuthOutput struct{ *pulumi.OutputState }

func (ProxyAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyAuth)(nil)).Elem()
}

func (o ProxyAuthOutput) ToProxyAuthOutput() ProxyAuthOutput {
	return o
}

func (o ProxyAuthOutput) ToProxyAuthOutputWithContext(ctx context.Context) ProxyAuthOutput {
	return o
}

func (o ProxyAuthOutput) ToOutput(ctx context.Context) pulumix.Output[ProxyAuth] {
	return pulumix.Output[ProxyAuth]{
		OutputState: o.OutputState,
	}
}

// The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
func (o ProxyAuthOutput) AuthScheme() pulumix.Output[*string] {
	return pulumix.Apply[ProxyAuth](o, func(v ProxyAuth) *string { return v.AuthScheme })
}

// The type of authentication the proxy uses for connections from clients. Valid values are `MYSQL_NATIVE_PASSWORD`, `POSTGRES_SCRAM_SHA_256`, `POSTGRES_MD5`, and `SQL_SERVER_AUTHENTICATION`.
func (o ProxyAuthOutput) ClientPasswordAuthType() pulumix.Output[*string] {
	return pulumix.Apply[ProxyAuth](o, func(v ProxyAuth) *string { return v.ClientPasswordAuthType })
}

// A user-specified description about the authentication used by a proxy to log in as a specific database user.
func (o ProxyAuthOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ProxyAuth](o, func(v ProxyAuth) *string { return v.Description })
}

// Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
func (o ProxyAuthOutput) IamAuth() pulumix.Output[*string] {
	return pulumix.Apply[ProxyAuth](o, func(v ProxyAuth) *string { return v.IamAuth })
}

// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
func (o ProxyAuthOutput) SecretArn() pulumix.Output[*string] {
	return pulumix.Apply[ProxyAuth](o, func(v ProxyAuth) *string { return v.SecretArn })
}

// The name of the database user to which the proxy connects.
func (o ProxyAuthOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ProxyAuth](o, func(v ProxyAuth) *string { return v.Username })
}

type ProxyDefaultTargetGroupConnectionPoolConfig struct {
	// The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.
	ConnectionBorrowTimeout *int `pulumi:"connectionBorrowTimeout"`
	// One or more SQL statements for the proxy to run when opening each new database connection. Typically used with `SET` statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single `SET` statement, such as `SET x=1, y=2`.
	InitQuery *string `pulumi:"initQuery"`
	// The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
	MaxConnectionsPercent *int `pulumi:"maxConnectionsPercent"`
	// Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
	MaxIdleConnectionsPercent *int `pulumi:"maxIdleConnectionsPercent"`
	// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is `EXCLUDE_VARIABLE_SETS`.
	SessionPinningFilters []string `pulumi:"sessionPinningFilters"`
}

type ProxyDefaultTargetGroupConnectionPoolConfigArgs struct {
	// The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.
	ConnectionBorrowTimeout pulumix.Input[*int] `pulumi:"connectionBorrowTimeout"`
	// One or more SQL statements for the proxy to run when opening each new database connection. Typically used with `SET` statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single `SET` statement, such as `SET x=1, y=2`.
	InitQuery pulumix.Input[*string] `pulumi:"initQuery"`
	// The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
	MaxConnectionsPercent pulumix.Input[*int] `pulumi:"maxConnectionsPercent"`
	// Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
	MaxIdleConnectionsPercent pulumix.Input[*int] `pulumi:"maxIdleConnectionsPercent"`
	// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is `EXCLUDE_VARIABLE_SETS`.
	SessionPinningFilters pulumix.Input[[]string] `pulumi:"sessionPinningFilters"`
}

func (ProxyDefaultTargetGroupConnectionPoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyDefaultTargetGroupConnectionPoolConfig)(nil)).Elem()
}

func (i ProxyDefaultTargetGroupConnectionPoolConfigArgs) ToProxyDefaultTargetGroupConnectionPoolConfigOutput() ProxyDefaultTargetGroupConnectionPoolConfigOutput {
	return i.ToProxyDefaultTargetGroupConnectionPoolConfigOutputWithContext(context.Background())
}

func (i ProxyDefaultTargetGroupConnectionPoolConfigArgs) ToProxyDefaultTargetGroupConnectionPoolConfigOutputWithContext(ctx context.Context) ProxyDefaultTargetGroupConnectionPoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyDefaultTargetGroupConnectionPoolConfigOutput)
}

func (i *ProxyDefaultTargetGroupConnectionPoolConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ProxyDefaultTargetGroupConnectionPoolConfigArgs] {
	return pulumix.Val(i)
}

type ProxyDefaultTargetGroupConnectionPoolConfigOutput struct{ *pulumi.OutputState }

func (ProxyDefaultTargetGroupConnectionPoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyDefaultTargetGroupConnectionPoolConfig)(nil)).Elem()
}

func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) ToProxyDefaultTargetGroupConnectionPoolConfigOutput() ProxyDefaultTargetGroupConnectionPoolConfigOutput {
	return o
}

func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) ToProxyDefaultTargetGroupConnectionPoolConfigOutputWithContext(ctx context.Context) ProxyDefaultTargetGroupConnectionPoolConfigOutput {
	return o
}

func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ProxyDefaultTargetGroupConnectionPoolConfig] {
	return pulumix.Output[ProxyDefaultTargetGroupConnectionPoolConfig]{
		OutputState: o.OutputState,
	}
}

// The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.
func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) ConnectionBorrowTimeout() pulumix.Output[*int] {
	return pulumix.Apply[ProxyDefaultTargetGroupConnectionPoolConfig](o, func(v ProxyDefaultTargetGroupConnectionPoolConfig) *int { return v.ConnectionBorrowTimeout })
}

// One or more SQL statements for the proxy to run when opening each new database connection. Typically used with `SET` statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single `SET` statement, such as `SET x=1, y=2`.
func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) InitQuery() pulumix.Output[*string] {
	return pulumix.Apply[ProxyDefaultTargetGroupConnectionPoolConfig](o, func(v ProxyDefaultTargetGroupConnectionPoolConfig) *string { return v.InitQuery })
}

// The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) MaxConnectionsPercent() pulumix.Output[*int] {
	return pulumix.Apply[ProxyDefaultTargetGroupConnectionPoolConfig](o, func(v ProxyDefaultTargetGroupConnectionPoolConfig) *int { return v.MaxConnectionsPercent })
}

// Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) MaxIdleConnectionsPercent() pulumix.Output[*int] {
	return pulumix.Apply[ProxyDefaultTargetGroupConnectionPoolConfig](o, func(v ProxyDefaultTargetGroupConnectionPoolConfig) *int { return v.MaxIdleConnectionsPercent })
}

// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is `EXCLUDE_VARIABLE_SETS`.
func (o ProxyDefaultTargetGroupConnectionPoolConfigOutput) SessionPinningFilters() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ProxyDefaultTargetGroupConnectionPoolConfig](o, func(v ProxyDefaultTargetGroupConnectionPoolConfig) []string { return v.SessionPinningFilters })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ReservedInstanceRecurringCharge struct {
	RecurringChargeAmount    *int    `pulumi:"recurringChargeAmount"`
	RecurringChargeFrequency *string `pulumi:"recurringChargeFrequency"`
}

type ReservedInstanceRecurringChargeArgs struct {
	RecurringChargeAmount    pulumix.Input[*int]    `pulumi:"recurringChargeAmount"`
	RecurringChargeFrequency pulumix.Input[*string] `pulumi:"recurringChargeFrequency"`
}

func (ReservedInstanceRecurringChargeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedInstanceRecurringCharge)(nil)).Elem()
}

func (i ReservedInstanceRecurringChargeArgs) ToReservedInstanceRecurringChargeOutput() ReservedInstanceRecurringChargeOutput {
	return i.ToReservedInstanceRecurringChargeOutputWithContext(context.Background())
}

func (i ReservedInstanceRecurringChargeArgs) ToReservedInstanceRecurringChargeOutputWithContext(ctx context.Context) ReservedInstanceRecurringChargeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceRecurringChargeOutput)
}

func (i *ReservedInstanceRecurringChargeArgs) ToOutput(ctx context.Context) pulumix.Output[*ReservedInstanceRecurringChargeArgs] {
	return pulumix.Val(i)
}

type ReservedInstanceRecurringChargeOutput struct{ *pulumi.OutputState }

func (ReservedInstanceRecurringChargeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservedInstanceRecurringCharge)(nil)).Elem()
}

func (o ReservedInstanceRecurringChargeOutput) ToReservedInstanceRecurringChargeOutput() ReservedInstanceRecurringChargeOutput {
	return o
}

func (o ReservedInstanceRecurringChargeOutput) ToReservedInstanceRecurringChargeOutputWithContext(ctx context.Context) ReservedInstanceRecurringChargeOutput {
	return o
}

func (o ReservedInstanceRecurringChargeOutput) ToOutput(ctx context.Context) pulumix.Output[ReservedInstanceRecurringCharge] {
	return pulumix.Output[ReservedInstanceRecurringCharge]{
		OutputState: o.OutputState,
	}
}

func (o ReservedInstanceRecurringChargeOutput) RecurringChargeAmount() pulumix.Output[*int] {
	return pulumix.Apply[ReservedInstanceRecurringCharge](o, func(v ReservedInstanceRecurringCharge) *int { return v.RecurringChargeAmount })
}

func (o ReservedInstanceRecurringChargeOutput) RecurringChargeFrequency() pulumix.Output[*string] {
	return pulumix.Apply[ReservedInstanceRecurringCharge](o, func(v ReservedInstanceRecurringCharge) *string { return v.RecurringChargeFrequency })
}

type GetClusterMasterUserSecret struct {
	KmsKeyId     string `pulumi:"kmsKeyId"`
	SecretArn    string `pulumi:"secretArn"`
	SecretStatus string `pulumi:"secretStatus"`
}

type GetClusterMasterUserSecretArgs struct {
	KmsKeyId     pulumix.Input[string] `pulumi:"kmsKeyId"`
	SecretArn    pulumix.Input[string] `pulumi:"secretArn"`
	SecretStatus pulumix.Input[string] `pulumi:"secretStatus"`
}

func (GetClusterMasterUserSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMasterUserSecret)(nil)).Elem()
}

func (i GetClusterMasterUserSecretArgs) ToGetClusterMasterUserSecretOutput() GetClusterMasterUserSecretOutput {
	return i.ToGetClusterMasterUserSecretOutputWithContext(context.Background())
}

func (i GetClusterMasterUserSecretArgs) ToGetClusterMasterUserSecretOutputWithContext(ctx context.Context) GetClusterMasterUserSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMasterUserSecretOutput)
}

func (i *GetClusterMasterUserSecretArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterMasterUserSecretArgs] {
	return pulumix.Val(i)
}

type GetClusterMasterUserSecretOutput struct{ *pulumi.OutputState }

func (GetClusterMasterUserSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMasterUserSecret)(nil)).Elem()
}

func (o GetClusterMasterUserSecretOutput) ToGetClusterMasterUserSecretOutput() GetClusterMasterUserSecretOutput {
	return o
}

func (o GetClusterMasterUserSecretOutput) ToGetClusterMasterUserSecretOutputWithContext(ctx context.Context) GetClusterMasterUserSecretOutput {
	return o
}

func (o GetClusterMasterUserSecretOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterMasterUserSecret] {
	return pulumix.Output[GetClusterMasterUserSecret]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterMasterUserSecretOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetClusterMasterUserSecret](o, func(v GetClusterMasterUserSecret) string { return v.KmsKeyId })
}

func (o GetClusterMasterUserSecretOutput) SecretArn() pulumix.Output[string] {
	return pulumix.Apply[GetClusterMasterUserSecret](o, func(v GetClusterMasterUserSecret) string { return v.SecretArn })
}

func (o GetClusterMasterUserSecretOutput) SecretStatus() pulumix.Output[string] {
	return pulumix.Apply[GetClusterMasterUserSecret](o, func(v GetClusterMasterUserSecret) string { return v.SecretStatus })
}

type GetClustersFilter struct {
	// Name of the filter field. Valid values can be found in the [RDS DescribeDBClusters API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetClustersFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [RDS DescribeDBClusters API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetClustersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersFilter)(nil)).Elem()
}

func (i GetClustersFilterArgs) ToGetClustersFilterOutput() GetClustersFilterOutput {
	return i.ToGetClustersFilterOutputWithContext(context.Background())
}

func (i GetClustersFilterArgs) ToGetClustersFilterOutputWithContext(ctx context.Context) GetClustersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersFilterOutput)
}

func (i *GetClustersFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClustersFilterArgs] {
	return pulumix.Val(i)
}

type GetClustersFilterOutput struct{ *pulumi.OutputState }

func (GetClustersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersFilter)(nil)).Elem()
}

func (o GetClustersFilterOutput) ToGetClustersFilterOutput() GetClustersFilterOutput {
	return o
}

func (o GetClustersFilterOutput) ToGetClustersFilterOutputWithContext(ctx context.Context) GetClustersFilterOutput {
	return o
}

func (o GetClustersFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetClustersFilter] {
	return pulumix.Output[GetClustersFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [RDS DescribeDBClusters API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html).
func (o GetClustersFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetClustersFilter](o, func(v GetClustersFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetClustersFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetClustersFilter](o, func(v GetClustersFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetEngineVersionFilter struct {
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

type GetEngineVersionFilterArgs struct {
	Name   pulumix.Input[string]   `pulumi:"name"`
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetEngineVersionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEngineVersionFilter)(nil)).Elem()
}

func (i GetEngineVersionFilterArgs) ToGetEngineVersionFilterOutput() GetEngineVersionFilterOutput {
	return i.ToGetEngineVersionFilterOutputWithContext(context.Background())
}

func (i GetEngineVersionFilterArgs) ToGetEngineVersionFilterOutputWithContext(ctx context.Context) GetEngineVersionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEngineVersionFilterOutput)
}

func (i *GetEngineVersionFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetEngineVersionFilterArgs] {
	return pulumix.Val(i)
}

type GetEngineVersionFilterOutput struct{ *pulumi.OutputState }

func (GetEngineVersionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEngineVersionFilter)(nil)).Elem()
}

func (o GetEngineVersionFilterOutput) ToGetEngineVersionFilterOutput() GetEngineVersionFilterOutput {
	return o
}

func (o GetEngineVersionFilterOutput) ToGetEngineVersionFilterOutputWithContext(ctx context.Context) GetEngineVersionFilterOutput {
	return o
}

func (o GetEngineVersionFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetEngineVersionFilter] {
	return pulumix.Output[GetEngineVersionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetEngineVersionFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetEngineVersionFilter](o, func(v GetEngineVersionFilter) string { return v.Name })
}

func (o GetEngineVersionFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetEngineVersionFilter](o, func(v GetEngineVersionFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetInstanceMasterUserSecret struct {
	// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the secret.
	SecretArn string `pulumi:"secretArn"`
	// The status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
	SecretStatus string `pulumi:"secretStatus"`
}

type GetInstanceMasterUserSecretArgs struct {
	// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
	KmsKeyId pulumix.Input[string] `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the secret.
	SecretArn pulumix.Input[string] `pulumi:"secretArn"`
	// The status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
	SecretStatus pulumix.Input[string] `pulumi:"secretStatus"`
}

func (GetInstanceMasterUserSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceMasterUserSecret)(nil)).Elem()
}

func (i GetInstanceMasterUserSecretArgs) ToGetInstanceMasterUserSecretOutput() GetInstanceMasterUserSecretOutput {
	return i.ToGetInstanceMasterUserSecretOutputWithContext(context.Background())
}

func (i GetInstanceMasterUserSecretArgs) ToGetInstanceMasterUserSecretOutputWithContext(ctx context.Context) GetInstanceMasterUserSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceMasterUserSecretOutput)
}

func (i *GetInstanceMasterUserSecretArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstanceMasterUserSecretArgs] {
	return pulumix.Val(i)
}

type GetInstanceMasterUserSecretOutput struct{ *pulumi.OutputState }

func (GetInstanceMasterUserSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceMasterUserSecret)(nil)).Elem()
}

func (o GetInstanceMasterUserSecretOutput) ToGetInstanceMasterUserSecretOutput() GetInstanceMasterUserSecretOutput {
	return o
}

func (o GetInstanceMasterUserSecretOutput) ToGetInstanceMasterUserSecretOutputWithContext(ctx context.Context) GetInstanceMasterUserSecretOutput {
	return o
}

func (o GetInstanceMasterUserSecretOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstanceMasterUserSecret] {
	return pulumix.Output[GetInstanceMasterUserSecret]{
		OutputState: o.OutputState,
	}
}

// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
func (o GetInstanceMasterUserSecretOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceMasterUserSecret](o, func(v GetInstanceMasterUserSecret) string { return v.KmsKeyId })
}

// The Amazon Resource Name (ARN) of the secret.
func (o GetInstanceMasterUserSecretOutput) SecretArn() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceMasterUserSecret](o, func(v GetInstanceMasterUserSecret) string { return v.SecretArn })
}

// The status of the secret. Valid Values: `creating` | `active` | `rotating` | `impaired`.
func (o GetInstanceMasterUserSecretOutput) SecretStatus() pulumix.Output[string] {
	return pulumix.Apply[GetInstanceMasterUserSecret](o, func(v GetInstanceMasterUserSecret) string { return v.SecretStatus })
}

type GetInstancesFilter struct {
	// Name of the filter field. Valid values can be found in the [RDS DescribeDBClusters API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html) or [RDS DescribeDBInstances API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html).
	Name string `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values []string `pulumi:"values"`
}

type GetInstancesFilterArgs struct {
	// Name of the filter field. Valid values can be found in the [RDS DescribeDBClusters API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html) or [RDS DescribeDBInstances API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html).
	Name pulumix.Input[string] `pulumi:"name"`
	// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
	Values pulumix.Input[[]string] `pulumi:"values"`
}

func (GetInstancesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesFilter)(nil)).Elem()
}

func (i GetInstancesFilterArgs) ToGetInstancesFilterOutput() GetInstancesFilterOutput {
	return i.ToGetInstancesFilterOutputWithContext(context.Background())
}

func (i GetInstancesFilterArgs) ToGetInstancesFilterOutputWithContext(ctx context.Context) GetInstancesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesFilterOutput)
}

func (i *GetInstancesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[*GetInstancesFilterArgs] {
	return pulumix.Val(i)
}

type GetInstancesFilterOutput struct{ *pulumi.OutputState }

func (GetInstancesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesFilter)(nil)).Elem()
}

func (o GetInstancesFilterOutput) ToGetInstancesFilterOutput() GetInstancesFilterOutput {
	return o
}

func (o GetInstancesFilterOutput) ToGetInstancesFilterOutputWithContext(ctx context.Context) GetInstancesFilterOutput {
	return o
}

func (o GetInstancesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstancesFilter] {
	return pulumix.Output[GetInstancesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the filter field. Valid values can be found in the [RDS DescribeDBClusters API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBClusters.html) or [RDS DescribeDBInstances API Reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html).
func (o GetInstancesFilterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetInstancesFilter](o, func(v GetInstancesFilter) string { return v.Name })
}

// Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
func (o GetInstancesFilterOutput) Values() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetInstancesFilter](o, func(v GetInstancesFilter) []string { return v.Values })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetProxyAuth struct {
	AuthScheme             string `pulumi:"authScheme"`
	ClientPasswordAuthType string `pulumi:"clientPasswordAuthType"`
	Description            string `pulumi:"description"`
	IamAuth                string `pulumi:"iamAuth"`
	SecretArn              string `pulumi:"secretArn"`
	Username               string `pulumi:"username"`
}

type GetProxyAuthArgs struct {
	AuthScheme             pulumix.Input[string] `pulumi:"authScheme"`
	ClientPasswordAuthType pulumix.Input[string] `pulumi:"clientPasswordAuthType"`
	Description            pulumix.Input[string] `pulumi:"description"`
	IamAuth                pulumix.Input[string] `pulumi:"iamAuth"`
	SecretArn              pulumix.Input[string] `pulumi:"secretArn"`
	Username               pulumix.Input[string] `pulumi:"username"`
}

func (GetProxyAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProxyAuth)(nil)).Elem()
}

func (i GetProxyAuthArgs) ToGetProxyAuthOutput() GetProxyAuthOutput {
	return i.ToGetProxyAuthOutputWithContext(context.Background())
}

func (i GetProxyAuthArgs) ToGetProxyAuthOutputWithContext(ctx context.Context) GetProxyAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProxyAuthOutput)
}

func (i *GetProxyAuthArgs) ToOutput(ctx context.Context) pulumix.Output[*GetProxyAuthArgs] {
	return pulumix.Val(i)
}

type GetProxyAuthOutput struct{ *pulumi.OutputState }

func (GetProxyAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProxyAuth)(nil)).Elem()
}

func (o GetProxyAuthOutput) ToGetProxyAuthOutput() GetProxyAuthOutput {
	return o
}

func (o GetProxyAuthOutput) ToGetProxyAuthOutputWithContext(ctx context.Context) GetProxyAuthOutput {
	return o
}

func (o GetProxyAuthOutput) ToOutput(ctx context.Context) pulumix.Output[GetProxyAuth] {
	return pulumix.Output[GetProxyAuth]{
		OutputState: o.OutputState,
	}
}

func (o GetProxyAuthOutput) AuthScheme() pulumix.Output[string] {
	return pulumix.Apply[GetProxyAuth](o, func(v GetProxyAuth) string { return v.AuthScheme })
}

func (o GetProxyAuthOutput) ClientPasswordAuthType() pulumix.Output[string] {
	return pulumix.Apply[GetProxyAuth](o, func(v GetProxyAuth) string { return v.ClientPasswordAuthType })
}

func (o GetProxyAuthOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetProxyAuth](o, func(v GetProxyAuth) string { return v.Description })
}

func (o GetProxyAuthOutput) IamAuth() pulumix.Output[string] {
	return pulumix.Apply[GetProxyAuth](o, func(v GetProxyAuth) string { return v.IamAuth })
}

func (o GetProxyAuthOutput) SecretArn() pulumix.Output[string] {
	return pulumix.Apply[GetProxyAuth](o, func(v GetProxyAuth) string { return v.SecretArn })
}

func (o GetProxyAuthOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[GetProxyAuth](o, func(v GetProxyAuth) string { return v.Username })
}

func init() {
	pulumi.RegisterOutputType(ClusterMasterUserSecretOutput{})
	pulumi.RegisterOutputType(ClusterParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ClusterRestoreToPointInTimeOutput{})
	pulumi.RegisterOutputType(ClusterS3ImportOutput{})
	pulumi.RegisterOutputType(ClusterScalingConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterServerlessv2ScalingConfigurationOutput{})
	pulumi.RegisterOutputType(ExportTaskTimeoutsOutput{})
	pulumi.RegisterOutputType(GlobalClusterGlobalClusterMemberOutput{})
	pulumi.RegisterOutputType(InstanceBlueGreenUpdateOutput{})
	pulumi.RegisterOutputType(InstanceListenerEndpointOutput{})
	pulumi.RegisterOutputType(InstanceMasterUserSecretOutput{})
	pulumi.RegisterOutputType(InstanceRestoreToPointInTimeOutput{})
	pulumi.RegisterOutputType(InstanceS3ImportOutput{})
	pulumi.RegisterOutputType(OptionGroupOptionOutput{})
	pulumi.RegisterOutputType(OptionGroupOptionOptionSettingOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ProxyAuthOutput{})
	pulumi.RegisterOutputType(ProxyDefaultTargetGroupConnectionPoolConfigOutput{})
	pulumi.RegisterOutputType(ReservedInstanceRecurringChargeOutput{})
	pulumi.RegisterOutputType(GetClusterMasterUserSecretOutput{})
	pulumi.RegisterOutputType(GetClustersFilterOutput{})
	pulumi.RegisterOutputType(GetEngineVersionFilterOutput{})
	pulumi.RegisterOutputType(GetInstanceMasterUserSecretOutput{})
	pulumi.RegisterOutputType(GetInstancesFilterOutput{})
	pulumi.RegisterOutputType(GetProxyAuthOutput{})
}
