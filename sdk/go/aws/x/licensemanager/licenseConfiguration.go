// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a License Manager license configuration resource.
//
// > **Note:** Removing the `licenseCount` attribute is not supported by the License Manager API - recreate the resource instead.
type LicenseConfiguration struct {
	pulumi.CustomResourceState

	// The license configuration ARN.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// Description of the license configuration.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Number of licenses managed by the license configuration.
	LicenseCount pulumix.Output[*int] `pulumi:"licenseCount"`
	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit pulumix.Output[*bool] `pulumi:"licenseCountHardLimit"`
	// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
	LicenseCountingType pulumix.Output[string] `pulumi:"licenseCountingType"`
	// Array of configured License Manager rules.
	LicenseRules pulumix.ArrayOutput[string] `pulumi:"licenseRules"`
	// Name of the license configuration.
	Name pulumix.Output[string] `pulumi:"name"`
	// Account ID of the owner of the license configuration.
	OwnerAccountId pulumix.Output[string] `pulumi:"ownerAccountId"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewLicenseConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLicenseConfiguration(ctx *pulumi.Context,
	name string, args *LicenseConfigurationArgs, opts ...pulumi.ResourceOption) (*LicenseConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseCountingType == nil {
		return nil, errors.New("invalid value for required argument 'LicenseCountingType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseConfiguration
	err := ctx.RegisterResource("aws:licensemanager/licenseConfiguration:LicenseConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseConfiguration gets an existing LicenseConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseConfigurationState, opts ...pulumi.ResourceOption) (*LicenseConfiguration, error) {
	var resource LicenseConfiguration
	err := ctx.ReadResource("aws:licensemanager/licenseConfiguration:LicenseConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseConfiguration resources.
type licenseConfigurationState struct {
	// The license configuration ARN.
	Arn *string `pulumi:"arn"`
	// Description of the license configuration.
	Description *string `pulumi:"description"`
	// Number of licenses managed by the license configuration.
	LicenseCount *int `pulumi:"licenseCount"`
	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit *bool `pulumi:"licenseCountHardLimit"`
	// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
	LicenseCountingType *string `pulumi:"licenseCountingType"`
	// Array of configured License Manager rules.
	LicenseRules []string `pulumi:"licenseRules"`
	// Name of the license configuration.
	Name *string `pulumi:"name"`
	// Account ID of the owner of the license configuration.
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type LicenseConfigurationState struct {
	// The license configuration ARN.
	Arn pulumix.Input[*string]
	// Description of the license configuration.
	Description pulumix.Input[*string]
	// Number of licenses managed by the license configuration.
	LicenseCount pulumix.Input[*int]
	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit pulumix.Input[*bool]
	// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
	LicenseCountingType pulumix.Input[*string]
	// Array of configured License Manager rules.
	LicenseRules pulumix.Input[[]string]
	// Name of the license configuration.
	Name pulumix.Input[*string]
	// Account ID of the owner of the license configuration.
	OwnerAccountId pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (LicenseConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigurationState)(nil)).Elem()
}

type licenseConfigurationArgs struct {
	// Description of the license configuration.
	Description *string `pulumi:"description"`
	// Number of licenses managed by the license configuration.
	LicenseCount *int `pulumi:"licenseCount"`
	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit *bool `pulumi:"licenseCountHardLimit"`
	// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
	LicenseCountingType string `pulumi:"licenseCountingType"`
	// Array of configured License Manager rules.
	LicenseRules []string `pulumi:"licenseRules"`
	// Name of the license configuration.
	Name *string `pulumi:"name"`
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LicenseConfiguration resource.
type LicenseConfigurationArgs struct {
	// Description of the license configuration.
	Description pulumix.Input[*string]
	// Number of licenses managed by the license configuration.
	LicenseCount pulumix.Input[*int]
	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit pulumix.Input[*bool]
	// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
	LicenseCountingType pulumix.Input[string]
	// Array of configured License Manager rules.
	LicenseRules pulumix.Input[[]string]
	// Name of the license configuration.
	Name pulumix.Input[*string]
	// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (LicenseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseConfigurationArgs)(nil)).Elem()
}

type LicenseConfigurationOutput struct{ *pulumi.OutputState }

func (LicenseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseConfiguration)(nil)).Elem()
}

func (o LicenseConfigurationOutput) ToLicenseConfigurationOutput() LicenseConfigurationOutput {
	return o
}

func (o LicenseConfigurationOutput) ToLicenseConfigurationOutputWithContext(ctx context.Context) LicenseConfigurationOutput {
	return o
}

func (o LicenseConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LicenseConfiguration] {
	return pulumix.Output[LicenseConfiguration]{
		OutputState: o.OutputState,
	}
}

// The license configuration ARN.
func (o LicenseConfigurationOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Description of the license configuration.
func (o LicenseConfigurationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Number of licenses managed by the license configuration.
func (o LicenseConfigurationOutput) LicenseCount() pulumix.Output[*int] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[*int] { return v.LicenseCount })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Sets the number of available licenses as a hard limit.
func (o LicenseConfigurationOutput) LicenseCountHardLimit() pulumix.Output[*bool] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[*bool] { return v.LicenseCountHardLimit })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Dimension to use to track license inventory. Specify either `vCPU`, `Instance`, `Core` or `Socket`.
func (o LicenseConfigurationOutput) LicenseCountingType() pulumix.Output[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[string] { return v.LicenseCountingType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Array of configured License Manager rules.
func (o LicenseConfigurationOutput) LicenseRules() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.ArrayOutput[string] { return v.LicenseRules })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Name of the license configuration.
func (o LicenseConfigurationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Account ID of the owner of the license configuration.
func (o LicenseConfigurationOutput) OwnerAccountId() pulumix.Output[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.Output[string] { return v.OwnerAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o LicenseConfigurationOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o LicenseConfigurationOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[LicenseConfiguration](o, func(v LicenseConfiguration) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(LicenseConfigurationOutput{})
}
