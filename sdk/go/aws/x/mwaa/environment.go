// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mwaa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a MWAA Environment resource.
type Environment struct {
	pulumi.CustomResourceState

	// The `airflowConfigurationOptions` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
	AirflowConfigurationOptions pulumix.MapOutput[string] `pulumi:"airflowConfigurationOptions"`
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion pulumix.Output[string] `pulumi:"airflowVersion"`
	// The ARN of the MWAA Environment
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The Created At date of the MWAA Environment
	// * `logging_configuration[0].<LOG_CONFIGURATION_TYPE>[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	DagS3Path pulumix.Output[string] `pulumi:"dagS3Path"`
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
	EnvironmentClass pulumix.Output[string] `pulumi:"environmentClass"`
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
	ExecutionRoleArn pulumix.Output[string] `pulumi:"executionRoleArn"`
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
	KmsKey       pulumix.Output[*string]                                                    `pulumi:"kmsKey"`
	LastUpdateds pulumix.GArrayOutput[EnvironmentLastUpdated, EnvironmentLastUpdatedOutput] `pulumi:"lastUpdateds"`
	// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
	LoggingConfiguration pulumix.GPtrOutput[EnvironmentLoggingConfiguration, EnvironmentLoggingConfigurationOutput] `pulumi:"loggingConfiguration"`
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
	MaxWorkers pulumix.Output[int] `pulumi:"maxWorkers"`
	// The minimum number of workers that you want to run in your environment. Will be `1` by default.
	MinWorkers pulumix.Output[int] `pulumi:"minWorkers"`
	// The name of the Apache Airflow Environment
	Name pulumix.Output[string] `pulumi:"name"`
	// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
	NetworkConfiguration pulumix.GPtrOutput[EnvironmentNetworkConfiguration, EnvironmentNetworkConfigurationOutput] `pulumi:"networkConfiguration"`
	// The plugins.zip file version you want to use.
	PluginsS3ObjectVersion pulumix.Output[string] `pulumi:"pluginsS3ObjectVersion"`
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then pluginsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	PluginsS3Path pulumix.Output[*string] `pulumi:"pluginsS3Path"`
	// The requirements.txt file version you want to use.
	RequirementsS3ObjectVersion pulumix.Output[string] `pulumi:"requirementsS3ObjectVersion"`
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirementsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	RequirementsS3Path pulumix.Output[*string] `pulumi:"requirementsS3Path"`
	// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts `2` - `5`, default `2`. v1.10.12 accepts `1`.
	Schedulers pulumix.Output[int] `pulumi:"schedulers"`
	// The Service Role ARN of the Amazon MWAA Environment
	ServiceRoleArn pulumix.Output[string] `pulumi:"serviceRoleArn"`
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn pulumix.Output[string] `pulumi:"sourceBucketArn"`
	// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
	StartupScriptS3ObjectVersion pulumix.Output[string] `pulumi:"startupScriptS3ObjectVersion"`
	// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html). Supported for environment versions 2.x and later.
	StartupScriptS3Path pulumix.Output[*string] `pulumi:"startupScriptS3Path"`
	// The status of the Amazon MWAA Environment
	Status pulumix.Output[string] `pulumi:"status"`
	// A map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
	WebserverAccessMode pulumix.Output[string] `pulumi:"webserverAccessMode"`
	// The webserver URL of the MWAA Environment
	WebserverUrl pulumix.Output[string] `pulumi:"webserverUrl"`
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart pulumix.Output[string] `pulumi:"weeklyMaintenanceWindowStart"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DagS3Path == nil {
		return nil, errors.New("invalid value for required argument 'DagS3Path'")
	}
	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	if args.NetworkConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfiguration'")
	}
	if args.SourceBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceBucketArn'")
	}
	if args.AirflowConfigurationOptions != nil {
		untypedSecretValue := pulumi.ToSecret(args.AirflowConfigurationOptions.ToOutput(ctx.Context()).Untyped())
		args.AirflowConfigurationOptions = pulumix.MustConvertTyped[map[string]string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"airflowConfigurationOptions",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("aws:mwaa/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws:mwaa/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
	AirflowConfigurationOptions map[string]string `pulumi:"airflowConfigurationOptions"`
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion *string `pulumi:"airflowVersion"`
	// The ARN of the MWAA Environment
	Arn *string `pulumi:"arn"`
	// The Created At date of the MWAA Environment
	// * `logging_configuration[0].<LOG_CONFIGURATION_TYPE>[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
	CreatedAt *string `pulumi:"createdAt"`
	// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	DagS3Path *string `pulumi:"dagS3Path"`
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
	EnvironmentClass *string `pulumi:"environmentClass"`
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
	KmsKey       *string                  `pulumi:"kmsKey"`
	LastUpdateds []EnvironmentLastUpdated `pulumi:"lastUpdateds"`
	// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
	LoggingConfiguration *EnvironmentLoggingConfiguration `pulumi:"loggingConfiguration"`
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
	MaxWorkers *int `pulumi:"maxWorkers"`
	// The minimum number of workers that you want to run in your environment. Will be `1` by default.
	MinWorkers *int `pulumi:"minWorkers"`
	// The name of the Apache Airflow Environment
	Name *string `pulumi:"name"`
	// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
	NetworkConfiguration *EnvironmentNetworkConfiguration `pulumi:"networkConfiguration"`
	// The plugins.zip file version you want to use.
	PluginsS3ObjectVersion *string `pulumi:"pluginsS3ObjectVersion"`
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then pluginsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	PluginsS3Path *string `pulumi:"pluginsS3Path"`
	// The requirements.txt file version you want to use.
	RequirementsS3ObjectVersion *string `pulumi:"requirementsS3ObjectVersion"`
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirementsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	RequirementsS3Path *string `pulumi:"requirementsS3Path"`
	// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts `2` - `5`, default `2`. v1.10.12 accepts `1`.
	Schedulers *int `pulumi:"schedulers"`
	// The Service Role ARN of the Amazon MWAA Environment
	ServiceRoleArn *string `pulumi:"serviceRoleArn"`
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn *string `pulumi:"sourceBucketArn"`
	// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
	StartupScriptS3ObjectVersion *string `pulumi:"startupScriptS3ObjectVersion"`
	// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html). Supported for environment versions 2.x and later.
	StartupScriptS3Path *string `pulumi:"startupScriptS3Path"`
	// The status of the Amazon MWAA Environment
	Status *string `pulumi:"status"`
	// A map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
	WebserverAccessMode *string `pulumi:"webserverAccessMode"`
	// The webserver URL of the MWAA Environment
	WebserverUrl *string `pulumi:"webserverUrl"`
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart *string `pulumi:"weeklyMaintenanceWindowStart"`
}

type EnvironmentState struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
	AirflowConfigurationOptions pulumix.Input[map[string]string]
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion pulumix.Input[*string]
	// The ARN of the MWAA Environment
	Arn pulumix.Input[*string]
	// The Created At date of the MWAA Environment
	// * `logging_configuration[0].<LOG_CONFIGURATION_TYPE>[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
	CreatedAt pulumix.Input[*string]
	// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	DagS3Path pulumix.Input[*string]
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
	EnvironmentClass pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
	ExecutionRoleArn pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
	KmsKey       pulumix.Input[*string]
	LastUpdateds pulumix.Input[[]*EnvironmentLastUpdatedArgs]
	// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
	LoggingConfiguration pulumix.Input[*EnvironmentLoggingConfigurationArgs]
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
	MaxWorkers pulumix.Input[*int]
	// The minimum number of workers that you want to run in your environment. Will be `1` by default.
	MinWorkers pulumix.Input[*int]
	// The name of the Apache Airflow Environment
	Name pulumix.Input[*string]
	// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
	NetworkConfiguration pulumix.Input[*EnvironmentNetworkConfigurationArgs]
	// The plugins.zip file version you want to use.
	PluginsS3ObjectVersion pulumix.Input[*string]
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then pluginsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	PluginsS3Path pulumix.Input[*string]
	// The requirements.txt file version you want to use.
	RequirementsS3ObjectVersion pulumix.Input[*string]
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirementsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	RequirementsS3Path pulumix.Input[*string]
	// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts `2` - `5`, default `2`. v1.10.12 accepts `1`.
	Schedulers pulumix.Input[*int]
	// The Service Role ARN of the Amazon MWAA Environment
	ServiceRoleArn pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn pulumix.Input[*string]
	// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
	StartupScriptS3ObjectVersion pulumix.Input[*string]
	// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html). Supported for environment versions 2.x and later.
	StartupScriptS3Path pulumix.Input[*string]
	// The status of the Amazon MWAA Environment
	Status pulumix.Input[*string]
	// A map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
	WebserverAccessMode pulumix.Input[*string]
	// The webserver URL of the MWAA Environment
	WebserverUrl pulumix.Input[*string]
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart pulumix.Input[*string]
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
	AirflowConfigurationOptions map[string]string `pulumi:"airflowConfigurationOptions"`
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion *string `pulumi:"airflowVersion"`
	// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	DagS3Path string `pulumi:"dagS3Path"`
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
	EnvironmentClass *string `pulumi:"environmentClass"`
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
	KmsKey *string `pulumi:"kmsKey"`
	// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
	LoggingConfiguration *EnvironmentLoggingConfiguration `pulumi:"loggingConfiguration"`
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
	MaxWorkers *int `pulumi:"maxWorkers"`
	// The minimum number of workers that you want to run in your environment. Will be `1` by default.
	MinWorkers *int `pulumi:"minWorkers"`
	// The name of the Apache Airflow Environment
	Name *string `pulumi:"name"`
	// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
	NetworkConfiguration EnvironmentNetworkConfiguration `pulumi:"networkConfiguration"`
	// The plugins.zip file version you want to use.
	PluginsS3ObjectVersion *string `pulumi:"pluginsS3ObjectVersion"`
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then pluginsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	PluginsS3Path *string `pulumi:"pluginsS3Path"`
	// The requirements.txt file version you want to use.
	RequirementsS3ObjectVersion *string `pulumi:"requirementsS3ObjectVersion"`
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirementsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	RequirementsS3Path *string `pulumi:"requirementsS3Path"`
	// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts `2` - `5`, default `2`. v1.10.12 accepts `1`.
	Schedulers *int `pulumi:"schedulers"`
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn string `pulumi:"sourceBucketArn"`
	// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
	StartupScriptS3ObjectVersion *string `pulumi:"startupScriptS3ObjectVersion"`
	// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html). Supported for environment versions 2.x and later.
	StartupScriptS3Path *string `pulumi:"startupScriptS3Path"`
	// A map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
	WebserverAccessMode *string `pulumi:"webserverAccessMode"`
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart *string `pulumi:"weeklyMaintenanceWindowStart"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// The `airflowConfigurationOptions` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
	AirflowConfigurationOptions pulumix.Input[map[string]string]
	// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
	AirflowVersion pulumix.Input[*string]
	// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	DagS3Path pulumix.Input[string]
	// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
	EnvironmentClass pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
	ExecutionRoleArn pulumix.Input[string]
	// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
	KmsKey pulumix.Input[*string]
	// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
	LoggingConfiguration pulumix.Input[*EnvironmentLoggingConfigurationArgs]
	// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
	MaxWorkers pulumix.Input[*int]
	// The minimum number of workers that you want to run in your environment. Will be `1` by default.
	MinWorkers pulumix.Input[*int]
	// The name of the Apache Airflow Environment
	Name pulumix.Input[*string]
	// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
	NetworkConfiguration pulumix.Input[*EnvironmentNetworkConfigurationArgs]
	// The plugins.zip file version you want to use.
	PluginsS3ObjectVersion pulumix.Input[*string]
	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then pluginsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	PluginsS3Path pulumix.Input[*string]
	// The requirements.txt file version you want to use.
	RequirementsS3ObjectVersion pulumix.Input[*string]
	// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirementsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	RequirementsS3Path pulumix.Input[*string]
	// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts `2` - `5`, default `2`. v1.10.12 accepts `1`.
	Schedulers pulumix.Input[*int]
	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
	SourceBucketArn pulumix.Input[string]
	// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
	StartupScriptS3ObjectVersion pulumix.Input[*string]
	// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html). Supported for environment versions 2.x and later.
	StartupScriptS3Path pulumix.Input[*string]
	// A map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
	WebserverAccessMode pulumix.Input[*string]
	// Specifies the start date for the weekly maintenance window.
	WeeklyMaintenanceWindowStart pulumix.Input[*string]
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[Environment] {
	return pulumix.Output[Environment]{
		OutputState: o.OutputState,
	}
}

// The `airflowConfigurationOptions` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
func (o EnvironmentOutput) AirflowConfigurationOptions() pulumix.MapOutput[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.MapOutput[string] { return v.AirflowConfigurationOptions })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
func (o EnvironmentOutput) AirflowVersion() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.AirflowVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ARN of the MWAA Environment
func (o EnvironmentOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Created At date of the MWAA Environment
// * `logging_configuration[0].<LOG_CONFIGURATION_TYPE>[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
func (o EnvironmentOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
func (o EnvironmentOutput) DagS3Path() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.DagS3Path })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
func (o EnvironmentOutput) EnvironmentClass() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.EnvironmentClass })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
func (o EnvironmentOutput) ExecutionRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.ExecutionRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
func (o EnvironmentOutput) KmsKey() pulumix.Output[*string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[*string] { return v.KmsKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o EnvironmentOutput) LastUpdateds() pulumix.GArrayOutput[EnvironmentLastUpdated, EnvironmentLastUpdatedOutput] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.GArrayOutput[EnvironmentLastUpdated, EnvironmentLastUpdatedOutput] {
		return v.LastUpdateds
	})
	unwrapped := pulumix.Flatten[[]EnvironmentLastUpdated, pulumix.GArrayOutput[EnvironmentLastUpdated, EnvironmentLastUpdatedOutput]](value)
	return pulumix.GArrayOutput[EnvironmentLastUpdated, EnvironmentLastUpdatedOutput]{OutputState: unwrapped.OutputState}
}

// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
func (o EnvironmentOutput) LoggingConfiguration() pulumix.GPtrOutput[EnvironmentLoggingConfiguration, EnvironmentLoggingConfigurationOutput] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.GPtrOutput[EnvironmentLoggingConfiguration, EnvironmentLoggingConfigurationOutput] {
		return v.LoggingConfiguration
	})
	unwrapped := pulumix.Flatten[*EnvironmentLoggingConfiguration, pulumix.GPtrOutput[EnvironmentLoggingConfiguration, EnvironmentLoggingConfigurationOutput]](value)
	return pulumix.GPtrOutput[EnvironmentLoggingConfiguration, EnvironmentLoggingConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
func (o EnvironmentOutput) MaxWorkers() pulumix.Output[int] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[int] { return v.MaxWorkers })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The minimum number of workers that you want to run in your environment. Will be `1` by default.
func (o EnvironmentOutput) MinWorkers() pulumix.Output[int] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[int] { return v.MinWorkers })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The name of the Apache Airflow Environment
func (o EnvironmentOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
func (o EnvironmentOutput) NetworkConfiguration() pulumix.GPtrOutput[EnvironmentNetworkConfiguration, EnvironmentNetworkConfigurationOutput] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.GPtrOutput[EnvironmentNetworkConfiguration, EnvironmentNetworkConfigurationOutput] {
		return v.NetworkConfiguration
	})
	unwrapped := pulumix.Flatten[*EnvironmentNetworkConfiguration, pulumix.GPtrOutput[EnvironmentNetworkConfiguration, EnvironmentNetworkConfigurationOutput]](value)
	return pulumix.GPtrOutput[EnvironmentNetworkConfiguration, EnvironmentNetworkConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// The plugins.zip file version you want to use.
func (o EnvironmentOutput) PluginsS3ObjectVersion() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.PluginsS3ObjectVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then pluginsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
func (o EnvironmentOutput) PluginsS3Path() pulumix.Output[*string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[*string] { return v.PluginsS3Path })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The requirements.txt file version you want to use.
func (o EnvironmentOutput) RequirementsS3ObjectVersion() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.RequirementsS3ObjectVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirementsS3ObjectVersion is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
func (o EnvironmentOutput) RequirementsS3Path() pulumix.Output[*string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[*string] { return v.RequirementsS3Path })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts `2` - `5`, default `2`. v1.10.12 accepts `1`.
func (o EnvironmentOutput) Schedulers() pulumix.Output[int] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[int] { return v.Schedulers })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The Service Role ARN of the Amazon MWAA Environment
func (o EnvironmentOutput) ServiceRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.ServiceRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
func (o EnvironmentOutput) SourceBucketArn() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.SourceBucketArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
func (o EnvironmentOutput) StartupScriptS3ObjectVersion() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.StartupScriptS3ObjectVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See [Using a startup script](https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html). Supported for environment versions 2.x and later.
func (o EnvironmentOutput) StartupScriptS3Path() pulumix.Output[*string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[*string] { return v.StartupScriptS3Path })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The status of the Amazon MWAA Environment
func (o EnvironmentOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of resource tags to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EnvironmentOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o EnvironmentOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
func (o EnvironmentOutput) WebserverAccessMode() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.WebserverAccessMode })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The webserver URL of the MWAA Environment
func (o EnvironmentOutput) WebserverUrl() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.WebserverUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies the start date for the weekly maintenance window.
func (o EnvironmentOutput) WeeklyMaintenanceWindowStart() pulumix.Output[string] {
	value := pulumix.Apply[Environment](o, func(v Environment) pulumix.Output[string] { return v.WeeklyMaintenanceWindowStart })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(EnvironmentOutput{})
}
