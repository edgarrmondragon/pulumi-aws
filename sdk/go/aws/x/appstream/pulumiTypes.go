// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DirectoryConfigServiceAccountCredentials struct {
	// User name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
	AccountName string `pulumi:"accountName"`
	// Password for the account.
	AccountPassword string `pulumi:"accountPassword"`
}

type DirectoryConfigServiceAccountCredentialsArgs struct {
	// User name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
	AccountName pulumix.Input[string] `pulumi:"accountName"`
	// Password for the account.
	AccountPassword pulumix.Input[string] `pulumi:"accountPassword"`
}

func (DirectoryConfigServiceAccountCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryConfigServiceAccountCredentials)(nil)).Elem()
}

func (i DirectoryConfigServiceAccountCredentialsArgs) ToDirectoryConfigServiceAccountCredentialsOutput() DirectoryConfigServiceAccountCredentialsOutput {
	return i.ToDirectoryConfigServiceAccountCredentialsOutputWithContext(context.Background())
}

func (i DirectoryConfigServiceAccountCredentialsArgs) ToDirectoryConfigServiceAccountCredentialsOutputWithContext(ctx context.Context) DirectoryConfigServiceAccountCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryConfigServiceAccountCredentialsOutput)
}

func (i *DirectoryConfigServiceAccountCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[*DirectoryConfigServiceAccountCredentialsArgs] {
	return pulumix.Val(i)
}

type DirectoryConfigServiceAccountCredentialsOutput struct{ *pulumi.OutputState }

func (DirectoryConfigServiceAccountCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectoryConfigServiceAccountCredentials)(nil)).Elem()
}

func (o DirectoryConfigServiceAccountCredentialsOutput) ToDirectoryConfigServiceAccountCredentialsOutput() DirectoryConfigServiceAccountCredentialsOutput {
	return o
}

func (o DirectoryConfigServiceAccountCredentialsOutput) ToDirectoryConfigServiceAccountCredentialsOutputWithContext(ctx context.Context) DirectoryConfigServiceAccountCredentialsOutput {
	return o
}

func (o DirectoryConfigServiceAccountCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[DirectoryConfigServiceAccountCredentials] {
	return pulumix.Output[DirectoryConfigServiceAccountCredentials]{
		OutputState: o.OutputState,
	}
}

// User name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
func (o DirectoryConfigServiceAccountCredentialsOutput) AccountName() pulumix.Output[string] {
	return pulumix.Apply[DirectoryConfigServiceAccountCredentials](o, func(v DirectoryConfigServiceAccountCredentials) string { return v.AccountName })
}

// Password for the account.
func (o DirectoryConfigServiceAccountCredentialsOutput) AccountPassword() pulumix.Output[string] {
	return pulumix.Apply[DirectoryConfigServiceAccountCredentials](o, func(v DirectoryConfigServiceAccountCredentials) string { return v.AccountPassword })
}

type FleetComputeCapacity struct {
	// Number of currently available instances that can be used to stream sessions.
	Available *int `pulumi:"available"`
	// Desired number of streaming instances.
	DesiredInstances int `pulumi:"desiredInstances"`
	// Number of instances in use for streaming.
	InUse *int `pulumi:"inUse"`
	// Total number of simultaneous streaming instances that are running.
	Running *int `pulumi:"running"`
}

type FleetComputeCapacityArgs struct {
	// Number of currently available instances that can be used to stream sessions.
	Available pulumix.Input[*int] `pulumi:"available"`
	// Desired number of streaming instances.
	DesiredInstances pulumix.Input[int] `pulumi:"desiredInstances"`
	// Number of instances in use for streaming.
	InUse pulumix.Input[*int] `pulumi:"inUse"`
	// Total number of simultaneous streaming instances that are running.
	Running pulumix.Input[*int] `pulumi:"running"`
}

func (FleetComputeCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetComputeCapacity)(nil)).Elem()
}

func (i FleetComputeCapacityArgs) ToFleetComputeCapacityOutput() FleetComputeCapacityOutput {
	return i.ToFleetComputeCapacityOutputWithContext(context.Background())
}

func (i FleetComputeCapacityArgs) ToFleetComputeCapacityOutputWithContext(ctx context.Context) FleetComputeCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetComputeCapacityOutput)
}

func (i *FleetComputeCapacityArgs) ToOutput(ctx context.Context) pulumix.Output[*FleetComputeCapacityArgs] {
	return pulumix.Val(i)
}

type FleetComputeCapacityOutput struct{ *pulumi.OutputState }

func (FleetComputeCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetComputeCapacity)(nil)).Elem()
}

func (o FleetComputeCapacityOutput) ToFleetComputeCapacityOutput() FleetComputeCapacityOutput {
	return o
}

func (o FleetComputeCapacityOutput) ToFleetComputeCapacityOutputWithContext(ctx context.Context) FleetComputeCapacityOutput {
	return o
}

func (o FleetComputeCapacityOutput) ToOutput(ctx context.Context) pulumix.Output[FleetComputeCapacity] {
	return pulumix.Output[FleetComputeCapacity]{
		OutputState: o.OutputState,
	}
}

// Number of currently available instances that can be used to stream sessions.
func (o FleetComputeCapacityOutput) Available() pulumix.Output[*int] {
	return pulumix.Apply[FleetComputeCapacity](o, func(v FleetComputeCapacity) *int { return v.Available })
}

// Desired number of streaming instances.
func (o FleetComputeCapacityOutput) DesiredInstances() pulumix.Output[int] {
	return pulumix.Apply[FleetComputeCapacity](o, func(v FleetComputeCapacity) int { return v.DesiredInstances })
}

// Number of instances in use for streaming.
func (o FleetComputeCapacityOutput) InUse() pulumix.Output[*int] {
	return pulumix.Apply[FleetComputeCapacity](o, func(v FleetComputeCapacity) *int { return v.InUse })
}

// Total number of simultaneous streaming instances that are running.
func (o FleetComputeCapacityOutput) Running() pulumix.Output[*int] {
	return pulumix.Apply[FleetComputeCapacity](o, func(v FleetComputeCapacity) *int { return v.Running })
}

type FleetDomainJoinInfo struct {
	// Fully qualified name of the directory (for example, corp.example.com).
	DirectoryName *string `pulumi:"directoryName"`
	// Distinguished name of the organizational unit for computer accounts.
	OrganizationalUnitDistinguishedName *string `pulumi:"organizationalUnitDistinguishedName"`
}

type FleetDomainJoinInfoArgs struct {
	// Fully qualified name of the directory (for example, corp.example.com).
	DirectoryName pulumix.Input[*string] `pulumi:"directoryName"`
	// Distinguished name of the organizational unit for computer accounts.
	OrganizationalUnitDistinguishedName pulumix.Input[*string] `pulumi:"organizationalUnitDistinguishedName"`
}

func (FleetDomainJoinInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetDomainJoinInfo)(nil)).Elem()
}

func (i FleetDomainJoinInfoArgs) ToFleetDomainJoinInfoOutput() FleetDomainJoinInfoOutput {
	return i.ToFleetDomainJoinInfoOutputWithContext(context.Background())
}

func (i FleetDomainJoinInfoArgs) ToFleetDomainJoinInfoOutputWithContext(ctx context.Context) FleetDomainJoinInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetDomainJoinInfoOutput)
}

func (i *FleetDomainJoinInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*FleetDomainJoinInfoArgs] {
	return pulumix.Val(i)
}

type FleetDomainJoinInfoOutput struct{ *pulumi.OutputState }

func (FleetDomainJoinInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetDomainJoinInfo)(nil)).Elem()
}

func (o FleetDomainJoinInfoOutput) ToFleetDomainJoinInfoOutput() FleetDomainJoinInfoOutput {
	return o
}

func (o FleetDomainJoinInfoOutput) ToFleetDomainJoinInfoOutputWithContext(ctx context.Context) FleetDomainJoinInfoOutput {
	return o
}

func (o FleetDomainJoinInfoOutput) ToOutput(ctx context.Context) pulumix.Output[FleetDomainJoinInfo] {
	return pulumix.Output[FleetDomainJoinInfo]{
		OutputState: o.OutputState,
	}
}

// Fully qualified name of the directory (for example, corp.example.com).
func (o FleetDomainJoinInfoOutput) DirectoryName() pulumix.Output[*string] {
	return pulumix.Apply[FleetDomainJoinInfo](o, func(v FleetDomainJoinInfo) *string { return v.DirectoryName })
}

// Distinguished name of the organizational unit for computer accounts.
func (o FleetDomainJoinInfoOutput) OrganizationalUnitDistinguishedName() pulumix.Output[*string] {
	return pulumix.Apply[FleetDomainJoinInfo](o, func(v FleetDomainJoinInfo) *string { return v.OrganizationalUnitDistinguishedName })
}

type FleetVpcConfig struct {
	// Identifiers of the security groups for the fleet or image builder.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance.
	SubnetIds []string `pulumi:"subnetIds"`
}

type FleetVpcConfigArgs struct {
	// Identifiers of the security groups for the fleet or image builder.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// Identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
}

func (FleetVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetVpcConfig)(nil)).Elem()
}

func (i FleetVpcConfigArgs) ToFleetVpcConfigOutput() FleetVpcConfigOutput {
	return i.ToFleetVpcConfigOutputWithContext(context.Background())
}

func (i FleetVpcConfigArgs) ToFleetVpcConfigOutputWithContext(ctx context.Context) FleetVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetVpcConfigOutput)
}

func (i *FleetVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*FleetVpcConfigArgs] {
	return pulumix.Val(i)
}

type FleetVpcConfigOutput struct{ *pulumi.OutputState }

func (FleetVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetVpcConfig)(nil)).Elem()
}

func (o FleetVpcConfigOutput) ToFleetVpcConfigOutput() FleetVpcConfigOutput {
	return o
}

func (o FleetVpcConfigOutput) ToFleetVpcConfigOutputWithContext(ctx context.Context) FleetVpcConfigOutput {
	return o
}

func (o FleetVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FleetVpcConfig] {
	return pulumix.Output[FleetVpcConfig]{
		OutputState: o.OutputState,
	}
}

// Identifiers of the security groups for the fleet or image builder.
func (o FleetVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FleetVpcConfig](o, func(v FleetVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance.
func (o FleetVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[FleetVpcConfig](o, func(v FleetVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type ImageBuilderAccessEndpoint struct {
	// Type of interface endpoint.
	EndpointType string `pulumi:"endpointType"`
	// Identifier (ID) of the VPC in which the interface endpoint is used.
	VpceId *string `pulumi:"vpceId"`
}

type ImageBuilderAccessEndpointArgs struct {
	// Type of interface endpoint.
	EndpointType pulumix.Input[string] `pulumi:"endpointType"`
	// Identifier (ID) of the VPC in which the interface endpoint is used.
	VpceId pulumix.Input[*string] `pulumi:"vpceId"`
}

func (ImageBuilderAccessEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilderAccessEndpoint)(nil)).Elem()
}

func (i ImageBuilderAccessEndpointArgs) ToImageBuilderAccessEndpointOutput() ImageBuilderAccessEndpointOutput {
	return i.ToImageBuilderAccessEndpointOutputWithContext(context.Background())
}

func (i ImageBuilderAccessEndpointArgs) ToImageBuilderAccessEndpointOutputWithContext(ctx context.Context) ImageBuilderAccessEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageBuilderAccessEndpointOutput)
}

func (i *ImageBuilderAccessEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageBuilderAccessEndpointArgs] {
	return pulumix.Val(i)
}

type ImageBuilderAccessEndpointOutput struct{ *pulumi.OutputState }

func (ImageBuilderAccessEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilderAccessEndpoint)(nil)).Elem()
}

func (o ImageBuilderAccessEndpointOutput) ToImageBuilderAccessEndpointOutput() ImageBuilderAccessEndpointOutput {
	return o
}

func (o ImageBuilderAccessEndpointOutput) ToImageBuilderAccessEndpointOutputWithContext(ctx context.Context) ImageBuilderAccessEndpointOutput {
	return o
}

func (o ImageBuilderAccessEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ImageBuilderAccessEndpoint] {
	return pulumix.Output[ImageBuilderAccessEndpoint]{
		OutputState: o.OutputState,
	}
}

// Type of interface endpoint.
func (o ImageBuilderAccessEndpointOutput) EndpointType() pulumix.Output[string] {
	return pulumix.Apply[ImageBuilderAccessEndpoint](o, func(v ImageBuilderAccessEndpoint) string { return v.EndpointType })
}

// Identifier (ID) of the VPC in which the interface endpoint is used.
func (o ImageBuilderAccessEndpointOutput) VpceId() pulumix.Output[*string] {
	return pulumix.Apply[ImageBuilderAccessEndpoint](o, func(v ImageBuilderAccessEndpoint) *string { return v.VpceId })
}

type ImageBuilderDomainJoinInfo struct {
	// Fully qualified name of the directory (for example, corp.example.com).
	DirectoryName *string `pulumi:"directoryName"`
	// Distinguished name of the organizational unit for computer accounts.
	OrganizationalUnitDistinguishedName *string `pulumi:"organizationalUnitDistinguishedName"`
}

type ImageBuilderDomainJoinInfoArgs struct {
	// Fully qualified name of the directory (for example, corp.example.com).
	DirectoryName pulumix.Input[*string] `pulumi:"directoryName"`
	// Distinguished name of the organizational unit for computer accounts.
	OrganizationalUnitDistinguishedName pulumix.Input[*string] `pulumi:"organizationalUnitDistinguishedName"`
}

func (ImageBuilderDomainJoinInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilderDomainJoinInfo)(nil)).Elem()
}

func (i ImageBuilderDomainJoinInfoArgs) ToImageBuilderDomainJoinInfoOutput() ImageBuilderDomainJoinInfoOutput {
	return i.ToImageBuilderDomainJoinInfoOutputWithContext(context.Background())
}

func (i ImageBuilderDomainJoinInfoArgs) ToImageBuilderDomainJoinInfoOutputWithContext(ctx context.Context) ImageBuilderDomainJoinInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageBuilderDomainJoinInfoOutput)
}

func (i *ImageBuilderDomainJoinInfoArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageBuilderDomainJoinInfoArgs] {
	return pulumix.Val(i)
}

type ImageBuilderDomainJoinInfoOutput struct{ *pulumi.OutputState }

func (ImageBuilderDomainJoinInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilderDomainJoinInfo)(nil)).Elem()
}

func (o ImageBuilderDomainJoinInfoOutput) ToImageBuilderDomainJoinInfoOutput() ImageBuilderDomainJoinInfoOutput {
	return o
}

func (o ImageBuilderDomainJoinInfoOutput) ToImageBuilderDomainJoinInfoOutputWithContext(ctx context.Context) ImageBuilderDomainJoinInfoOutput {
	return o
}

func (o ImageBuilderDomainJoinInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ImageBuilderDomainJoinInfo] {
	return pulumix.Output[ImageBuilderDomainJoinInfo]{
		OutputState: o.OutputState,
	}
}

// Fully qualified name of the directory (for example, corp.example.com).
func (o ImageBuilderDomainJoinInfoOutput) DirectoryName() pulumix.Output[*string] {
	return pulumix.Apply[ImageBuilderDomainJoinInfo](o, func(v ImageBuilderDomainJoinInfo) *string { return v.DirectoryName })
}

// Distinguished name of the organizational unit for computer accounts.
func (o ImageBuilderDomainJoinInfoOutput) OrganizationalUnitDistinguishedName() pulumix.Output[*string] {
	return pulumix.Apply[ImageBuilderDomainJoinInfo](o, func(v ImageBuilderDomainJoinInfo) *string { return v.OrganizationalUnitDistinguishedName })
}

type ImageBuilderVpcConfig struct {
	// Identifiers of the security groups for the image builder or image builder.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Identifiers of the subnets to which a network interface is attached from the image builder instance or image builder instance.
	SubnetIds []string `pulumi:"subnetIds"`
}

type ImageBuilderVpcConfigArgs struct {
	// Identifiers of the security groups for the image builder or image builder.
	SecurityGroupIds pulumix.Input[[]string] `pulumi:"securityGroupIds"`
	// Identifiers of the subnets to which a network interface is attached from the image builder instance or image builder instance.
	SubnetIds pulumix.Input[[]string] `pulumi:"subnetIds"`
}

func (ImageBuilderVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilderVpcConfig)(nil)).Elem()
}

func (i ImageBuilderVpcConfigArgs) ToImageBuilderVpcConfigOutput() ImageBuilderVpcConfigOutput {
	return i.ToImageBuilderVpcConfigOutputWithContext(context.Background())
}

func (i ImageBuilderVpcConfigArgs) ToImageBuilderVpcConfigOutputWithContext(ctx context.Context) ImageBuilderVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageBuilderVpcConfigOutput)
}

func (i *ImageBuilderVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*ImageBuilderVpcConfigArgs] {
	return pulumix.Val(i)
}

type ImageBuilderVpcConfigOutput struct{ *pulumi.OutputState }

func (ImageBuilderVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageBuilderVpcConfig)(nil)).Elem()
}

func (o ImageBuilderVpcConfigOutput) ToImageBuilderVpcConfigOutput() ImageBuilderVpcConfigOutput {
	return o
}

func (o ImageBuilderVpcConfigOutput) ToImageBuilderVpcConfigOutputWithContext(ctx context.Context) ImageBuilderVpcConfigOutput {
	return o
}

func (o ImageBuilderVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ImageBuilderVpcConfig] {
	return pulumix.Output[ImageBuilderVpcConfig]{
		OutputState: o.OutputState,
	}
}

// Identifiers of the security groups for the image builder or image builder.
func (o ImageBuilderVpcConfigOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ImageBuilderVpcConfig](o, func(v ImageBuilderVpcConfig) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Identifiers of the subnets to which a network interface is attached from the image builder instance or image builder instance.
func (o ImageBuilderVpcConfigOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ImageBuilderVpcConfig](o, func(v ImageBuilderVpcConfig) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type StackAccessEndpoint struct {
	// Type of the interface endpoint.
	// See the [`AccessEndpoint` AWS API documentation](https://docs.aws.amazon.com/appstream2/latest/APIReference/API_AccessEndpoint.html) for valid values.
	EndpointType string `pulumi:"endpointType"`
	// ID of the VPC in which the interface endpoint is used.
	VpceId *string `pulumi:"vpceId"`
}

type StackAccessEndpointArgs struct {
	// Type of the interface endpoint.
	// See the [`AccessEndpoint` AWS API documentation](https://docs.aws.amazon.com/appstream2/latest/APIReference/API_AccessEndpoint.html) for valid values.
	EndpointType pulumix.Input[string] `pulumi:"endpointType"`
	// ID of the VPC in which the interface endpoint is used.
	VpceId pulumix.Input[*string] `pulumi:"vpceId"`
}

func (StackAccessEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackAccessEndpoint)(nil)).Elem()
}

func (i StackAccessEndpointArgs) ToStackAccessEndpointOutput() StackAccessEndpointOutput {
	return i.ToStackAccessEndpointOutputWithContext(context.Background())
}

func (i StackAccessEndpointArgs) ToStackAccessEndpointOutputWithContext(ctx context.Context) StackAccessEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackAccessEndpointOutput)
}

func (i *StackAccessEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[*StackAccessEndpointArgs] {
	return pulumix.Val(i)
}

type StackAccessEndpointOutput struct{ *pulumi.OutputState }

func (StackAccessEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackAccessEndpoint)(nil)).Elem()
}

func (o StackAccessEndpointOutput) ToStackAccessEndpointOutput() StackAccessEndpointOutput {
	return o
}

func (o StackAccessEndpointOutput) ToStackAccessEndpointOutputWithContext(ctx context.Context) StackAccessEndpointOutput {
	return o
}

func (o StackAccessEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[StackAccessEndpoint] {
	return pulumix.Output[StackAccessEndpoint]{
		OutputState: o.OutputState,
	}
}

// Type of the interface endpoint.
// See the [`AccessEndpoint` AWS API documentation](https://docs.aws.amazon.com/appstream2/latest/APIReference/API_AccessEndpoint.html) for valid values.
func (o StackAccessEndpointOutput) EndpointType() pulumix.Output[string] {
	return pulumix.Apply[StackAccessEndpoint](o, func(v StackAccessEndpoint) string { return v.EndpointType })
}

// ID of the VPC in which the interface endpoint is used.
func (o StackAccessEndpointOutput) VpceId() pulumix.Output[*string] {
	return pulumix.Apply[StackAccessEndpoint](o, func(v StackAccessEndpoint) *string { return v.VpceId })
}

type StackApplicationSettings struct {
	// Whether application settings should be persisted.
	Enabled bool `pulumi:"enabled"`
	// Name of the settings group.
	// Required when `enabled` is `true`.
	// Can be up to 100 characters.
	SettingsGroup *string `pulumi:"settingsGroup"`
}

type StackApplicationSettingsArgs struct {
	// Whether application settings should be persisted.
	Enabled pulumix.Input[bool] `pulumi:"enabled"`
	// Name of the settings group.
	// Required when `enabled` is `true`.
	// Can be up to 100 characters.
	SettingsGroup pulumix.Input[*string] `pulumi:"settingsGroup"`
}

func (StackApplicationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackApplicationSettings)(nil)).Elem()
}

func (i StackApplicationSettingsArgs) ToStackApplicationSettingsOutput() StackApplicationSettingsOutput {
	return i.ToStackApplicationSettingsOutputWithContext(context.Background())
}

func (i StackApplicationSettingsArgs) ToStackApplicationSettingsOutputWithContext(ctx context.Context) StackApplicationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackApplicationSettingsOutput)
}

func (i *StackApplicationSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*StackApplicationSettingsArgs] {
	return pulumix.Val(i)
}

type StackApplicationSettingsOutput struct{ *pulumi.OutputState }

func (StackApplicationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackApplicationSettings)(nil)).Elem()
}

func (o StackApplicationSettingsOutput) ToStackApplicationSettingsOutput() StackApplicationSettingsOutput {
	return o
}

func (o StackApplicationSettingsOutput) ToStackApplicationSettingsOutputWithContext(ctx context.Context) StackApplicationSettingsOutput {
	return o
}

func (o StackApplicationSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[StackApplicationSettings] {
	return pulumix.Output[StackApplicationSettings]{
		OutputState: o.OutputState,
	}
}

// Whether application settings should be persisted.
func (o StackApplicationSettingsOutput) Enabled() pulumix.Output[bool] {
	return pulumix.Apply[StackApplicationSettings](o, func(v StackApplicationSettings) bool { return v.Enabled })
}

// Name of the settings group.
// Required when `enabled` is `true`.
// Can be up to 100 characters.
func (o StackApplicationSettingsOutput) SettingsGroup() pulumix.Output[*string] {
	return pulumix.Apply[StackApplicationSettings](o, func(v StackApplicationSettings) *string { return v.SettingsGroup })
}

type StackStorageConnector struct {
	// Type of storage connector.
	// Valid values are `HOMEFOLDERS`, `GOOGLE_DRIVE`, or `ONE_DRIVE`.
	ConnectorType string `pulumi:"connectorType"`
	// Names of the domains for the account.
	Domains []string `pulumi:"domains"`
	// ARN of the storage connector.
	ResourceIdentifier *string `pulumi:"resourceIdentifier"`
}

type StackStorageConnectorArgs struct {
	// Type of storage connector.
	// Valid values are `HOMEFOLDERS`, `GOOGLE_DRIVE`, or `ONE_DRIVE`.
	ConnectorType pulumix.Input[string] `pulumi:"connectorType"`
	// Names of the domains for the account.
	Domains pulumix.Input[[]string] `pulumi:"domains"`
	// ARN of the storage connector.
	ResourceIdentifier pulumix.Input[*string] `pulumi:"resourceIdentifier"`
}

func (StackStorageConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStorageConnector)(nil)).Elem()
}

func (i StackStorageConnectorArgs) ToStackStorageConnectorOutput() StackStorageConnectorOutput {
	return i.ToStackStorageConnectorOutputWithContext(context.Background())
}

func (i StackStorageConnectorArgs) ToStackStorageConnectorOutputWithContext(ctx context.Context) StackStorageConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStorageConnectorOutput)
}

func (i *StackStorageConnectorArgs) ToOutput(ctx context.Context) pulumix.Output[*StackStorageConnectorArgs] {
	return pulumix.Val(i)
}

type StackStorageConnectorOutput struct{ *pulumi.OutputState }

func (StackStorageConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStorageConnector)(nil)).Elem()
}

func (o StackStorageConnectorOutput) ToStackStorageConnectorOutput() StackStorageConnectorOutput {
	return o
}

func (o StackStorageConnectorOutput) ToStackStorageConnectorOutputWithContext(ctx context.Context) StackStorageConnectorOutput {
	return o
}

func (o StackStorageConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[StackStorageConnector] {
	return pulumix.Output[StackStorageConnector]{
		OutputState: o.OutputState,
	}
}

// Type of storage connector.
// Valid values are `HOMEFOLDERS`, `GOOGLE_DRIVE`, or `ONE_DRIVE`.
func (o StackStorageConnectorOutput) ConnectorType() pulumix.Output[string] {
	return pulumix.Apply[StackStorageConnector](o, func(v StackStorageConnector) string { return v.ConnectorType })
}

// Names of the domains for the account.
func (o StackStorageConnectorOutput) Domains() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StackStorageConnector](o, func(v StackStorageConnector) []string { return v.Domains })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// ARN of the storage connector.
func (o StackStorageConnectorOutput) ResourceIdentifier() pulumix.Output[*string] {
	return pulumix.Apply[StackStorageConnector](o, func(v StackStorageConnector) *string { return v.ResourceIdentifier })
}

type StackStreamingExperienceSettings struct {
	// The preferred protocol that you want to use while streaming your application.
	// Valid values are `TCP` and `UDP`.
	PreferredProtocol *string `pulumi:"preferredProtocol"`
}

type StackStreamingExperienceSettingsArgs struct {
	// The preferred protocol that you want to use while streaming your application.
	// Valid values are `TCP` and `UDP`.
	PreferredProtocol pulumix.Input[*string] `pulumi:"preferredProtocol"`
}

func (StackStreamingExperienceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStreamingExperienceSettings)(nil)).Elem()
}

func (i StackStreamingExperienceSettingsArgs) ToStackStreamingExperienceSettingsOutput() StackStreamingExperienceSettingsOutput {
	return i.ToStackStreamingExperienceSettingsOutputWithContext(context.Background())
}

func (i StackStreamingExperienceSettingsArgs) ToStackStreamingExperienceSettingsOutputWithContext(ctx context.Context) StackStreamingExperienceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackStreamingExperienceSettingsOutput)
}

func (i *StackStreamingExperienceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*StackStreamingExperienceSettingsArgs] {
	return pulumix.Val(i)
}

type StackStreamingExperienceSettingsOutput struct{ *pulumi.OutputState }

func (StackStreamingExperienceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackStreamingExperienceSettings)(nil)).Elem()
}

func (o StackStreamingExperienceSettingsOutput) ToStackStreamingExperienceSettingsOutput() StackStreamingExperienceSettingsOutput {
	return o
}

func (o StackStreamingExperienceSettingsOutput) ToStackStreamingExperienceSettingsOutputWithContext(ctx context.Context) StackStreamingExperienceSettingsOutput {
	return o
}

func (o StackStreamingExperienceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[StackStreamingExperienceSettings] {
	return pulumix.Output[StackStreamingExperienceSettings]{
		OutputState: o.OutputState,
	}
}

// The preferred protocol that you want to use while streaming your application.
// Valid values are `TCP` and `UDP`.
func (o StackStreamingExperienceSettingsOutput) PreferredProtocol() pulumix.Output[*string] {
	return pulumix.Apply[StackStreamingExperienceSettings](o, func(v StackStreamingExperienceSettings) *string { return v.PreferredProtocol })
}

type StackUserSetting struct {
	// Action that is enabled or disabled.
	// Valid values are `CLIPBOARD_COPY_FROM_LOCAL_DEVICE`,  `CLIPBOARD_COPY_TO_LOCAL_DEVICE`, `FILE_UPLOAD`, `FILE_DOWNLOAD`, `PRINTING_TO_LOCAL_DEVICE`, `DOMAIN_PASSWORD_SIGNIN`, or `DOMAIN_SMART_CARD_SIGNIN`.
	Action string `pulumi:"action"`
	// Whether the action is enabled or disabled.
	// Valid values are `ENABLED` or `DISABLED`.
	Permission string `pulumi:"permission"`
}

type StackUserSettingArgs struct {
	// Action that is enabled or disabled.
	// Valid values are `CLIPBOARD_COPY_FROM_LOCAL_DEVICE`,  `CLIPBOARD_COPY_TO_LOCAL_DEVICE`, `FILE_UPLOAD`, `FILE_DOWNLOAD`, `PRINTING_TO_LOCAL_DEVICE`, `DOMAIN_PASSWORD_SIGNIN`, or `DOMAIN_SMART_CARD_SIGNIN`.
	Action pulumix.Input[string] `pulumi:"action"`
	// Whether the action is enabled or disabled.
	// Valid values are `ENABLED` or `DISABLED`.
	Permission pulumix.Input[string] `pulumi:"permission"`
}

func (StackUserSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackUserSetting)(nil)).Elem()
}

func (i StackUserSettingArgs) ToStackUserSettingOutput() StackUserSettingOutput {
	return i.ToStackUserSettingOutputWithContext(context.Background())
}

func (i StackUserSettingArgs) ToStackUserSettingOutputWithContext(ctx context.Context) StackUserSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackUserSettingOutput)
}

func (i *StackUserSettingArgs) ToOutput(ctx context.Context) pulumix.Output[*StackUserSettingArgs] {
	return pulumix.Val(i)
}

type StackUserSettingOutput struct{ *pulumi.OutputState }

func (StackUserSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackUserSetting)(nil)).Elem()
}

func (o StackUserSettingOutput) ToStackUserSettingOutput() StackUserSettingOutput {
	return o
}

func (o StackUserSettingOutput) ToStackUserSettingOutputWithContext(ctx context.Context) StackUserSettingOutput {
	return o
}

func (o StackUserSettingOutput) ToOutput(ctx context.Context) pulumix.Output[StackUserSetting] {
	return pulumix.Output[StackUserSetting]{
		OutputState: o.OutputState,
	}
}

// Action that is enabled or disabled.
// Valid values are `CLIPBOARD_COPY_FROM_LOCAL_DEVICE`,  `CLIPBOARD_COPY_TO_LOCAL_DEVICE`, `FILE_UPLOAD`, `FILE_DOWNLOAD`, `PRINTING_TO_LOCAL_DEVICE`, `DOMAIN_PASSWORD_SIGNIN`, or `DOMAIN_SMART_CARD_SIGNIN`.
func (o StackUserSettingOutput) Action() pulumix.Output[string] {
	return pulumix.Apply[StackUserSetting](o, func(v StackUserSetting) string { return v.Action })
}

// Whether the action is enabled or disabled.
// Valid values are `ENABLED` or `DISABLED`.
func (o StackUserSettingOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[StackUserSetting](o, func(v StackUserSetting) string { return v.Permission })
}

func init() {
	pulumi.RegisterOutputType(DirectoryConfigServiceAccountCredentialsOutput{})
	pulumi.RegisterOutputType(FleetComputeCapacityOutput{})
	pulumi.RegisterOutputType(FleetDomainJoinInfoOutput{})
	pulumi.RegisterOutputType(FleetVpcConfigOutput{})
	pulumi.RegisterOutputType(ImageBuilderAccessEndpointOutput{})
	pulumi.RegisterOutputType(ImageBuilderDomainJoinInfoOutput{})
	pulumi.RegisterOutputType(ImageBuilderVpcConfigOutput{})
	pulumi.RegisterOutputType(StackAccessEndpointOutput{})
	pulumi.RegisterOutputType(StackApplicationSettingsOutput{})
	pulumi.RegisterOutputType(StackStorageConnectorOutput{})
	pulumi.RegisterOutputType(StackStreamingExperienceSettingsOutput{})
	pulumi.RegisterOutputType(StackUserSettingOutput{})
}
