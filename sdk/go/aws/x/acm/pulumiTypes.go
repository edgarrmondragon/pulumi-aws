// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CertificateDomainValidationOption struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName *string `pulumi:"domainName"`
	// The name of the DNS record to create to validate the certificate
	ResourceRecordName *string `pulumi:"resourceRecordName"`
	// The type of DNS record to create
	ResourceRecordType *string `pulumi:"resourceRecordType"`
	// The value the DNS record needs to have
	ResourceRecordValue *string `pulumi:"resourceRecordValue"`
}

type CertificateDomainValidationOptionArgs struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumix.Input[*string] `pulumi:"domainName"`
	// The name of the DNS record to create to validate the certificate
	ResourceRecordName pulumix.Input[*string] `pulumi:"resourceRecordName"`
	// The type of DNS record to create
	ResourceRecordType pulumix.Input[*string] `pulumi:"resourceRecordType"`
	// The value the DNS record needs to have
	ResourceRecordValue pulumix.Input[*string] `pulumi:"resourceRecordValue"`
}

func (CertificateDomainValidationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDomainValidationOption)(nil)).Elem()
}

func (i CertificateDomainValidationOptionArgs) ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput {
	return i.ToCertificateDomainValidationOptionOutputWithContext(context.Background())
}

func (i CertificateDomainValidationOptionArgs) ToCertificateDomainValidationOptionOutputWithContext(ctx context.Context) CertificateDomainValidationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDomainValidationOptionOutput)
}

func (i *CertificateDomainValidationOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateDomainValidationOptionArgs] {
	return pulumix.Val(i)
}

type CertificateDomainValidationOptionOutput struct{ *pulumi.OutputState }

func (CertificateDomainValidationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDomainValidationOption)(nil)).Elem()
}

func (o CertificateDomainValidationOptionOutput) ToCertificateDomainValidationOptionOutput() CertificateDomainValidationOptionOutput {
	return o
}

func (o CertificateDomainValidationOptionOutput) ToCertificateDomainValidationOptionOutputWithContext(ctx context.Context) CertificateDomainValidationOptionOutput {
	return o
}

func (o CertificateDomainValidationOptionOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateDomainValidationOption] {
	return pulumix.Output[CertificateDomainValidationOption]{
		OutputState: o.OutputState,
	}
}

// Fully qualified domain name (FQDN) in the certificate.
func (o CertificateDomainValidationOptionOutput) DomainName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.DomainName })
}

// The name of the DNS record to create to validate the certificate
func (o CertificateDomainValidationOptionOutput) ResourceRecordName() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.ResourceRecordName })
}

// The type of DNS record to create
func (o CertificateDomainValidationOptionOutput) ResourceRecordType() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.ResourceRecordType })
}

// The value the DNS record needs to have
func (o CertificateDomainValidationOptionOutput) ResourceRecordValue() pulumix.Output[*string] {
	return pulumix.Apply[CertificateDomainValidationOption](o, func(v CertificateDomainValidationOption) *string { return v.ResourceRecordValue })
}

type CertificateOptions struct {
	// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
	CertificateTransparencyLoggingPreference *string `pulumi:"certificateTransparencyLoggingPreference"`
}

type CertificateOptionsArgs struct {
	// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
	CertificateTransparencyLoggingPreference pulumix.Input[*string] `pulumi:"certificateTransparencyLoggingPreference"`
}

func (CertificateOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateOptions)(nil)).Elem()
}

func (i CertificateOptionsArgs) ToCertificateOptionsOutput() CertificateOptionsOutput {
	return i.ToCertificateOptionsOutputWithContext(context.Background())
}

func (i CertificateOptionsArgs) ToCertificateOptionsOutputWithContext(ctx context.Context) CertificateOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOptionsOutput)
}

func (i *CertificateOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateOptionsArgs] {
	return pulumix.Val(i)
}

type CertificateOptionsOutput struct{ *pulumi.OutputState }

func (CertificateOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateOptions)(nil)).Elem()
}

func (o CertificateOptionsOutput) ToCertificateOptionsOutput() CertificateOptionsOutput {
	return o
}

func (o CertificateOptionsOutput) ToCertificateOptionsOutputWithContext(ctx context.Context) CertificateOptionsOutput {
	return o
}

func (o CertificateOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateOptions] {
	return pulumix.Output[CertificateOptions]{
		OutputState: o.OutputState,
	}
}

// Whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
func (o CertificateOptionsOutput) CertificateTransparencyLoggingPreference() pulumix.Output[*string] {
	return pulumix.Apply[CertificateOptions](o, func(v CertificateOptions) *string { return v.CertificateTransparencyLoggingPreference })
}

type CertificateRenewalSummary struct {
	// The status of ACM's managed renewal of the certificate
	RenewalStatus *string `pulumi:"renewalStatus"`
	// The reason that a renewal request was unsuccessful or is pending
	RenewalStatusReason *string `pulumi:"renewalStatusReason"`
	UpdatedAt           *string `pulumi:"updatedAt"`
}

type CertificateRenewalSummaryArgs struct {
	// The status of ACM's managed renewal of the certificate
	RenewalStatus pulumix.Input[*string] `pulumi:"renewalStatus"`
	// The reason that a renewal request was unsuccessful or is pending
	RenewalStatusReason pulumix.Input[*string] `pulumi:"renewalStatusReason"`
	UpdatedAt           pulumix.Input[*string] `pulumi:"updatedAt"`
}

func (CertificateRenewalSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRenewalSummary)(nil)).Elem()
}

func (i CertificateRenewalSummaryArgs) ToCertificateRenewalSummaryOutput() CertificateRenewalSummaryOutput {
	return i.ToCertificateRenewalSummaryOutputWithContext(context.Background())
}

func (i CertificateRenewalSummaryArgs) ToCertificateRenewalSummaryOutputWithContext(ctx context.Context) CertificateRenewalSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateRenewalSummaryOutput)
}

func (i *CertificateRenewalSummaryArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateRenewalSummaryArgs] {
	return pulumix.Val(i)
}

type CertificateRenewalSummaryOutput struct{ *pulumi.OutputState }

func (CertificateRenewalSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateRenewalSummary)(nil)).Elem()
}

func (o CertificateRenewalSummaryOutput) ToCertificateRenewalSummaryOutput() CertificateRenewalSummaryOutput {
	return o
}

func (o CertificateRenewalSummaryOutput) ToCertificateRenewalSummaryOutputWithContext(ctx context.Context) CertificateRenewalSummaryOutput {
	return o
}

func (o CertificateRenewalSummaryOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateRenewalSummary] {
	return pulumix.Output[CertificateRenewalSummary]{
		OutputState: o.OutputState,
	}
}

// The status of ACM's managed renewal of the certificate
func (o CertificateRenewalSummaryOutput) RenewalStatus() pulumix.Output[*string] {
	return pulumix.Apply[CertificateRenewalSummary](o, func(v CertificateRenewalSummary) *string { return v.RenewalStatus })
}

// The reason that a renewal request was unsuccessful or is pending
func (o CertificateRenewalSummaryOutput) RenewalStatusReason() pulumix.Output[*string] {
	return pulumix.Apply[CertificateRenewalSummary](o, func(v CertificateRenewalSummary) *string { return v.RenewalStatusReason })
}

func (o CertificateRenewalSummaryOutput) UpdatedAt() pulumix.Output[*string] {
	return pulumix.Apply[CertificateRenewalSummary](o, func(v CertificateRenewalSummary) *string { return v.UpdatedAt })
}

type CertificateValidationOption struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName string `pulumi:"domainName"`
	// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domainName` value or a superdomain of the `domainName` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
	ValidationDomain string `pulumi:"validationDomain"`
}

type CertificateValidationOptionArgs struct {
	// Fully qualified domain name (FQDN) in the certificate.
	DomainName pulumix.Input[string] `pulumi:"domainName"`
	// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domainName` value or a superdomain of the `domainName` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
	ValidationDomain pulumix.Input[string] `pulumi:"validationDomain"`
}

func (CertificateValidationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateValidationOption)(nil)).Elem()
}

func (i CertificateValidationOptionArgs) ToCertificateValidationOptionOutput() CertificateValidationOptionOutput {
	return i.ToCertificateValidationOptionOutputWithContext(context.Background())
}

func (i CertificateValidationOptionArgs) ToCertificateValidationOptionOutputWithContext(ctx context.Context) CertificateValidationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateValidationOptionOutput)
}

func (i *CertificateValidationOptionArgs) ToOutput(ctx context.Context) pulumix.Output[*CertificateValidationOptionArgs] {
	return pulumix.Val(i)
}

type CertificateValidationOptionOutput struct{ *pulumi.OutputState }

func (CertificateValidationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateValidationOption)(nil)).Elem()
}

func (o CertificateValidationOptionOutput) ToCertificateValidationOptionOutput() CertificateValidationOptionOutput {
	return o
}

func (o CertificateValidationOptionOutput) ToCertificateValidationOptionOutputWithContext(ctx context.Context) CertificateValidationOptionOutput {
	return o
}

func (o CertificateValidationOptionOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateValidationOption] {
	return pulumix.Output[CertificateValidationOption]{
		OutputState: o.OutputState,
	}
}

// Fully qualified domain name (FQDN) in the certificate.
func (o CertificateValidationOptionOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[CertificateValidationOption](o, func(v CertificateValidationOption) string { return v.DomainName })
}

// Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domainName` value or a superdomain of the `domainName` value. For example, if you request a certificate for `"testing.example.com"`, you can specify `"example.com"` for this value.
func (o CertificateValidationOptionOutput) ValidationDomain() pulumix.Output[string] {
	return pulumix.Apply[CertificateValidationOption](o, func(v CertificateValidationOption) string { return v.ValidationDomain })
}

func init() {
	pulumi.RegisterOutputType(CertificateDomainValidationOptionOutput{})
	pulumi.RegisterOutputType(CertificateOptionsOutput{})
	pulumi.RegisterOutputType(CertificateRenewalSummaryOutput{})
	pulumi.RegisterOutputType(CertificateValidationOptionOutput{})
}
