// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECR Pull Through Cache Rule data source allows the upstream registry URL and registry ID to be retrieved for a Pull Through Cache Rule.
func LookupPullThroughCacheRule(ctx *pulumi.Context, args *LookupPullThroughCacheRuleArgs, opts ...pulumi.InvokeOption) (*LookupPullThroughCacheRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPullThroughCacheRuleResult
	err := ctx.Invoke("aws:ecr/getPullThroughCacheRule:getPullThroughCacheRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPullThroughCacheRule.
type LookupPullThroughCacheRuleArgs struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
}

// A collection of values returned by getPullThroughCacheRule.
type LookupPullThroughCacheRuleResult struct {
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The registry ID where the repository was created.
	RegistryId string `pulumi:"registryId"`
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl string `pulumi:"upstreamRegistryUrl"`
}

func LookupPullThroughCacheRuleOutput(ctx *pulumi.Context, args LookupPullThroughCacheRuleOutputArgs, opts ...pulumi.InvokeOption) LookupPullThroughCacheRuleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupPullThroughCacheRuleArgs](args.ToOutput(), func(plainArgs *LookupPullThroughCacheRuleArgs) (*LookupPullThroughCacheRuleResult, error) {
		return LookupPullThroughCacheRule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupPullThroughCacheRuleResultOutput, *LookupPullThroughCacheRuleResult](outputResult)
}

// A collection of arguments for invoking getPullThroughCacheRule.
type LookupPullThroughCacheRuleOutputArgs struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix pulumix.Input[string] `pulumi:"ecrRepositoryPrefix"`
}

func (args LookupPullThroughCacheRuleOutputArgs) ToOutput() pulumix.Output[*LookupPullThroughCacheRuleArgs] {
	allArgs := pulumix.All(
		args.EcrRepositoryPrefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupPullThroughCacheRuleArgs {
		return &LookupPullThroughCacheRuleArgs{
			EcrRepositoryPrefix: resolvedArgs[0].(string),
		}
	})
}

type LookupPullThroughCacheRuleResultOutput struct{ *pulumi.OutputState }

func (LookupPullThroughCacheRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPullThroughCacheRuleResult)(nil)).Elem()
}

func (o LookupPullThroughCacheRuleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupPullThroughCacheRuleResult] {
	return pulumix.Output[*LookupPullThroughCacheRuleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPullThroughCacheRuleResultOutput) EcrRepositoryPrefix() pulumix.Output[string] {
	return pulumix.Apply[*LookupPullThroughCacheRuleResult](o, func(v *LookupPullThroughCacheRuleResult) string { return v.EcrRepositoryPrefix })
}

func (o LookupPullThroughCacheRuleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupPullThroughCacheRuleResult](o, func(v *LookupPullThroughCacheRuleResult) string { return v.Id })
}

func (o LookupPullThroughCacheRuleResultOutput) RegistryId() pulumix.Output[string] {
	return pulumix.Apply[*LookupPullThroughCacheRuleResult](o, func(v *LookupPullThroughCacheRuleResult) string { return v.RegistryId })
}

func (o LookupPullThroughCacheRuleResultOutput) UpstreamRegistryUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupPullThroughCacheRuleResult](o, func(v *LookupPullThroughCacheRuleResult) string { return v.UpstreamRegistryUrl })
}
