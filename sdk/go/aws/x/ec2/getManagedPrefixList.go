// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ec2.ManagedPrefixList` provides details about a specific AWS prefix list or
// customer-managed prefix list in the current region.
func LookupManagedPrefixList(ctx *pulumi.Context, args *LookupManagedPrefixListArgs, opts ...pulumi.InvokeOption) (*LookupManagedPrefixListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupManagedPrefixListResult
	err := ctx.Invoke("aws:ec2/getManagedPrefixList:getManagedPrefixList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedPrefixList.
type LookupManagedPrefixListArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters []GetManagedPrefixListFilter `pulumi:"filters"`
	// ID of the prefix list to select.
	Id *string `pulumi:"id"`
	// Name of the prefix list to select.
	Name *string `pulumi:"name"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getManagedPrefixList.
type LookupManagedPrefixListResult struct {
	// Address family of the prefix list. Valid values are `IPv4` and `IPv6`.
	AddressFamily string `pulumi:"addressFamily"`
	// ARN of the selected prefix list.
	Arn string `pulumi:"arn"`
	// Set of entries in this prefix list. Each entry is an object with `cidr` and `description`.
	Entries []GetManagedPrefixListEntryType `pulumi:"entries"`
	Filters []GetManagedPrefixListFilter    `pulumi:"filters"`
	// ID of the selected prefix list.
	Id string `pulumi:"id"`
	// When then prefix list is managed, the maximum number of entries it supports, or null otherwise.
	MaxEntries int `pulumi:"maxEntries"`
	// Name of the selected prefix list.
	Name string `pulumi:"name"`
	// Account ID of the owner of a customer-managed prefix list, or `AWS` otherwise.
	OwnerId string `pulumi:"ownerId"`
	// Map of tags assigned to the resource.
	Tags    map[string]string `pulumi:"tags"`
	Version int               `pulumi:"version"`
}

func LookupManagedPrefixListOutput(ctx *pulumi.Context, args LookupManagedPrefixListOutputArgs, opts ...pulumi.InvokeOption) LookupManagedPrefixListResultOutput {
	outputResult := pulumix.ApplyErr[*LookupManagedPrefixListArgs](args.ToOutput(), func(plainArgs *LookupManagedPrefixListArgs) (*LookupManagedPrefixListResult, error) {
		return LookupManagedPrefixList(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupManagedPrefixListResultOutput, *LookupManagedPrefixListResult](outputResult)
}

// A collection of arguments for invoking getManagedPrefixList.
type LookupManagedPrefixListOutputArgs struct {
	// Configuration block(s) for filtering. Detailed below.
	Filters pulumix.Input[[]*GetManagedPrefixListFilterArgs] `pulumi:"filters"`
	// ID of the prefix list to select.
	Id pulumix.Input[*string] `pulumi:"id"`
	// Name of the prefix list to select.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Map of tags assigned to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupManagedPrefixListOutputArgs) ToOutput() pulumix.Output[*LookupManagedPrefixListArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupManagedPrefixListArgs {
		return &LookupManagedPrefixListArgs{
			Filters: resolvedArgs[0].([]GetManagedPrefixListFilter),
			Id:      resolvedArgs[1].(*string),
			Name:    resolvedArgs[2].(*string),
			Tags:    resolvedArgs[3].(map[string]string),
		}
	})
}

type LookupManagedPrefixListResultOutput struct{ *pulumi.OutputState }

func (LookupManagedPrefixListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedPrefixListResult)(nil)).Elem()
}

func (o LookupManagedPrefixListResultOutput) ToOutput(context.Context) pulumix.Output[*LookupManagedPrefixListResult] {
	return pulumix.Output[*LookupManagedPrefixListResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupManagedPrefixListResultOutput) AddressFamily() pulumix.Output[string] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) string { return v.AddressFamily })
}

func (o LookupManagedPrefixListResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) string { return v.Arn })
}

func (o LookupManagedPrefixListResultOutput) Entries() pulumix.GArrayOutput[GetManagedPrefixListEntryType, GetManagedPrefixListEntryTypeOutput] {
	value := pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) []GetManagedPrefixListEntryType { return v.Entries })
	return pulumix.GArrayOutput[GetManagedPrefixListEntryType, GetManagedPrefixListEntryTypeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupManagedPrefixListResultOutput) Filters() pulumix.GArrayOutput[GetManagedPrefixListFilter, GetManagedPrefixListFilterOutput] {
	value := pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) []GetManagedPrefixListFilter { return v.Filters })
	return pulumix.GArrayOutput[GetManagedPrefixListFilter, GetManagedPrefixListFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupManagedPrefixListResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) string { return v.Id })
}

func (o LookupManagedPrefixListResultOutput) MaxEntries() pulumix.Output[int] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) int { return v.MaxEntries })
}

func (o LookupManagedPrefixListResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) string { return v.Name })
}

func (o LookupManagedPrefixListResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) string { return v.OwnerId })
}

func (o LookupManagedPrefixListResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupManagedPrefixListResultOutput) Version() pulumix.Output[int] {
	return pulumix.Apply[*LookupManagedPrefixListResult](o, func(v *LookupManagedPrefixListResult) int { return v.Version })
}
