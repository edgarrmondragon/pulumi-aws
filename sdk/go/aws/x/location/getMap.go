// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about a Location Service Map.
func LookupMap(ctx *pulumi.Context, args *LookupMapArgs, opts ...pulumi.InvokeOption) (*LookupMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMapResult
	err := ctx.Invoke("aws:location/getMap:getMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMap.
type LookupMapArgs struct {
	// Name of the map resource.
	MapName string `pulumi:"mapName"`
	// Key-value map of resource tags for the map.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getMap.
type LookupMapResult struct {
	// List of configurations that specify the map tile style selected from a partner data provider.
	Configurations []GetMapConfiguration `pulumi:"configurations"`
	// Timestamp for when the map resource was created in ISO 8601 format.
	CreateTime string `pulumi:"createTime"`
	// Optional description for the map resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN for the map resource.
	MapArn  string `pulumi:"mapArn"`
	MapName string `pulumi:"mapName"`
	// Key-value map of resource tags for the map.
	Tags map[string]string `pulumi:"tags"`
	// Timestamp for when the map resource was last updated in ISO 8601 format.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupMapOutput(ctx *pulumi.Context, args LookupMapOutputArgs, opts ...pulumi.InvokeOption) LookupMapResultOutput {
	outputResult := pulumix.ApplyErr[*LookupMapArgs](args.ToOutput(), func(plainArgs *LookupMapArgs) (*LookupMapResult, error) {
		return LookupMap(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupMapResultOutput, *LookupMapResult](outputResult)
}

// A collection of arguments for invoking getMap.
type LookupMapOutputArgs struct {
	// Name of the map resource.
	MapName pulumix.Input[string] `pulumi:"mapName"`
	// Key-value map of resource tags for the map.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupMapOutputArgs) ToOutput() pulumix.Output[*LookupMapArgs] {
	allArgs := pulumix.All(
		args.MapName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupMapArgs {
		return &LookupMapArgs{
			MapName: resolvedArgs[0].(string),
			Tags:    resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupMapResultOutput struct{ *pulumi.OutputState }

func (LookupMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMapResult)(nil)).Elem()
}

func (o LookupMapResultOutput) ToOutput(context.Context) pulumix.Output[*LookupMapResult] {
	return pulumix.Output[*LookupMapResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupMapResultOutput) Configurations() pulumix.GArrayOutput[GetMapConfiguration, GetMapConfigurationOutput] {
	value := pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) []GetMapConfiguration { return v.Configurations })
	return pulumix.GArrayOutput[GetMapConfiguration, GetMapConfigurationOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupMapResultOutput) CreateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) string { return v.CreateTime })
}

func (o LookupMapResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) string { return v.Description })
}

func (o LookupMapResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) string { return v.Id })
}

func (o LookupMapResultOutput) MapArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) string { return v.MapArn })
}

func (o LookupMapResultOutput) MapName() pulumix.Output[string] {
	return pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) string { return v.MapName })
}

func (o LookupMapResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupMapResultOutput) UpdateTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupMapResult](o, func(v *LookupMapResult) string { return v.UpdateTime })
}
