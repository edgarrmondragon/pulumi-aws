// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesisanalyticsv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Kinesis Analytics v2 Application Snapshot.
// Snapshots are the AWS implementation of [Flink Savepoints](https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/savepoints.html).
type ApplicationSnapshot struct {
	pulumi.CustomResourceState

	// The name of an existing  Kinesis Analytics v2 Application. Note that the application must be running for a snapshot to be created.
	ApplicationName pulumix.Output[string] `pulumi:"applicationName"`
	// The current application version ID when the snapshot was created.
	ApplicationVersionId pulumix.Output[int] `pulumi:"applicationVersionId"`
	// The timestamp of the application snapshot.
	SnapshotCreationTimestamp pulumix.Output[string] `pulumi:"snapshotCreationTimestamp"`
	// The name of the application snapshot.
	SnapshotName pulumix.Output[string] `pulumi:"snapshotName"`
}

// NewApplicationSnapshot registers a new resource with the given unique name, arguments, and options.
func NewApplicationSnapshot(ctx *pulumi.Context,
	name string, args *ApplicationSnapshotArgs, opts ...pulumi.ResourceOption) (*ApplicationSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.SnapshotName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSnapshot
	err := ctx.RegisterResource("aws:kinesisanalyticsv2/applicationSnapshot:ApplicationSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSnapshot gets an existing ApplicationSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSnapshotState, opts ...pulumi.ResourceOption) (*ApplicationSnapshot, error) {
	var resource ApplicationSnapshot
	err := ctx.ReadResource("aws:kinesisanalyticsv2/applicationSnapshot:ApplicationSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSnapshot resources.
type applicationSnapshotState struct {
	// The name of an existing  Kinesis Analytics v2 Application. Note that the application must be running for a snapshot to be created.
	ApplicationName *string `pulumi:"applicationName"`
	// The current application version ID when the snapshot was created.
	ApplicationVersionId *int `pulumi:"applicationVersionId"`
	// The timestamp of the application snapshot.
	SnapshotCreationTimestamp *string `pulumi:"snapshotCreationTimestamp"`
	// The name of the application snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
}

type ApplicationSnapshotState struct {
	// The name of an existing  Kinesis Analytics v2 Application. Note that the application must be running for a snapshot to be created.
	ApplicationName pulumix.Input[*string]
	// The current application version ID when the snapshot was created.
	ApplicationVersionId pulumix.Input[*int]
	// The timestamp of the application snapshot.
	SnapshotCreationTimestamp pulumix.Input[*string]
	// The name of the application snapshot.
	SnapshotName pulumix.Input[*string]
}

func (ApplicationSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSnapshotState)(nil)).Elem()
}

type applicationSnapshotArgs struct {
	// The name of an existing  Kinesis Analytics v2 Application. Note that the application must be running for a snapshot to be created.
	ApplicationName string `pulumi:"applicationName"`
	// The name of the application snapshot.
	SnapshotName string `pulumi:"snapshotName"`
}

// The set of arguments for constructing a ApplicationSnapshot resource.
type ApplicationSnapshotArgs struct {
	// The name of an existing  Kinesis Analytics v2 Application. Note that the application must be running for a snapshot to be created.
	ApplicationName pulumix.Input[string]
	// The name of the application snapshot.
	SnapshotName pulumix.Input[string]
}

func (ApplicationSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSnapshotArgs)(nil)).Elem()
}

type ApplicationSnapshotOutput struct{ *pulumi.OutputState }

func (ApplicationSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSnapshot)(nil)).Elem()
}

func (o ApplicationSnapshotOutput) ToApplicationSnapshotOutput() ApplicationSnapshotOutput {
	return o
}

func (o ApplicationSnapshotOutput) ToApplicationSnapshotOutputWithContext(ctx context.Context) ApplicationSnapshotOutput {
	return o
}

func (o ApplicationSnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationSnapshot] {
	return pulumix.Output[ApplicationSnapshot]{
		OutputState: o.OutputState,
	}
}

// The name of an existing  Kinesis Analytics v2 Application. Note that the application must be running for a snapshot to be created.
func (o ApplicationSnapshotOutput) ApplicationName() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationSnapshot](o, func(v ApplicationSnapshot) pulumix.Output[string] { return v.ApplicationName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The current application version ID when the snapshot was created.
func (o ApplicationSnapshotOutput) ApplicationVersionId() pulumix.Output[int] {
	value := pulumix.Apply[ApplicationSnapshot](o, func(v ApplicationSnapshot) pulumix.Output[int] { return v.ApplicationVersionId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The timestamp of the application snapshot.
func (o ApplicationSnapshotOutput) SnapshotCreationTimestamp() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationSnapshot](o, func(v ApplicationSnapshot) pulumix.Output[string] { return v.SnapshotCreationTimestamp })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the application snapshot.
func (o ApplicationSnapshotOutput) SnapshotName() pulumix.Output[string] {
	value := pulumix.Apply[ApplicationSnapshot](o, func(v ApplicationSnapshot) pulumix.Output[string] { return v.SnapshotName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ApplicationSnapshotOutput{})
}
