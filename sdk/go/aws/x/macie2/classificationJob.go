// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to manage an [AWS Macie Classification Job](https://docs.aws.amazon.com/macie/latest/APIReference/jobs.html).
type ClassificationJob struct {
	pulumi.CustomResourceState

	// The date and time, in UTC and extended RFC 3339 format, when the job was created.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// The custom data identifiers to use for data analysis and classification.
	CustomDataIdentifierIds pulumix.ArrayOutput[string] `pulumi:"customDataIdentifierIds"`
	// A custom description of the job. The description can contain as many as 200 characters.
	Description pulumix.Output[string] `pulumi:"description"`
	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	InitialRun pulumix.Output[*bool]  `pulumi:"initialRun"`
	JobArn     pulumix.Output[string] `pulumi:"jobArn"`
	JobId      pulumix.Output[string] `pulumi:"jobId"`
	// The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
	JobStatus pulumix.Output[string] `pulumi:"jobStatus"`
	// The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `scheduleFrequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `scheduleFrequency` property to define the recurrence pattern for the job.
	JobType pulumix.Output[string] `pulumi:"jobType"`
	// A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	S3JobDefinition pulumix.GPtrOutput[ClassificationJobS3JobDefinition, ClassificationJobS3JobDefinitionOutput] `pulumi:"s3JobDefinition"`
	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	SamplingPercentage pulumix.Output[int] `pulumi:"samplingPercentage"`
	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `jobType` property to `ONE_TIME`. (documented below)
	ScheduleFrequency pulumix.GPtrOutput[ClassificationJobScheduleFrequency, ClassificationJobScheduleFrequencyOutput] `pulumi:"scheduleFrequency"`
	// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
	Tags    pulumix.MapOutput[string] `pulumi:"tags"`
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// If the current status of the job is `USER_PAUSED`, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for `job-status` is `USER_PAUSED`.
	UserPausedDetails pulumix.GArrayOutput[ClassificationJobUserPausedDetail, ClassificationJobUserPausedDetailOutput] `pulumi:"userPausedDetails"`
}

// NewClassificationJob registers a new resource with the given unique name, arguments, and options.
func NewClassificationJob(ctx *pulumi.Context,
	name string, args *ClassificationJobArgs, opts ...pulumi.ResourceOption) (*ClassificationJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobType == nil {
		return nil, errors.New("invalid value for required argument 'JobType'")
	}
	if args.S3JobDefinition == nil {
		return nil, errors.New("invalid value for required argument 'S3JobDefinition'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClassificationJob
	err := ctx.RegisterResource("aws:macie2/classificationJob:ClassificationJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClassificationJob gets an existing ClassificationJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClassificationJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClassificationJobState, opts ...pulumi.ResourceOption) (*ClassificationJob, error) {
	var resource ClassificationJob
	err := ctx.ReadResource("aws:macie2/classificationJob:ClassificationJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClassificationJob resources.
type classificationJobState struct {
	// The date and time, in UTC and extended RFC 3339 format, when the job was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The custom data identifiers to use for data analysis and classification.
	CustomDataIdentifierIds []string `pulumi:"customDataIdentifierIds"`
	// A custom description of the job. The description can contain as many as 200 characters.
	Description *string `pulumi:"description"`
	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	InitialRun *bool   `pulumi:"initialRun"`
	JobArn     *string `pulumi:"jobArn"`
	JobId      *string `pulumi:"jobId"`
	// The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
	JobStatus *string `pulumi:"jobStatus"`
	// The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `scheduleFrequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `scheduleFrequency` property to define the recurrence pattern for the job.
	JobType *string `pulumi:"jobType"`
	// A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	S3JobDefinition *ClassificationJobS3JobDefinition `pulumi:"s3JobDefinition"`
	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	SamplingPercentage *int `pulumi:"samplingPercentage"`
	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `jobType` property to `ONE_TIME`. (documented below)
	ScheduleFrequency *ClassificationJobScheduleFrequency `pulumi:"scheduleFrequency"`
	// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
	Tags    map[string]string `pulumi:"tags"`
	TagsAll map[string]string `pulumi:"tagsAll"`
	// If the current status of the job is `USER_PAUSED`, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for `job-status` is `USER_PAUSED`.
	UserPausedDetails []ClassificationJobUserPausedDetail `pulumi:"userPausedDetails"`
}

type ClassificationJobState struct {
	// The date and time, in UTC and extended RFC 3339 format, when the job was created.
	CreatedAt pulumix.Input[*string]
	// The custom data identifiers to use for data analysis and classification.
	CustomDataIdentifierIds pulumix.Input[[]string]
	// A custom description of the job. The description can contain as many as 200 characters.
	Description pulumix.Input[*string]
	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	InitialRun pulumix.Input[*bool]
	JobArn     pulumix.Input[*string]
	JobId      pulumix.Input[*string]
	// The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
	JobStatus pulumix.Input[*string]
	// The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `scheduleFrequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `scheduleFrequency` property to define the recurrence pattern for the job.
	JobType pulumix.Input[*string]
	// A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	S3JobDefinition pulumix.Input[*ClassificationJobS3JobDefinitionArgs]
	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	SamplingPercentage pulumix.Input[*int]
	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `jobType` property to `ONE_TIME`. (documented below)
	ScheduleFrequency pulumix.Input[*ClassificationJobScheduleFrequencyArgs]
	// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
	Tags    pulumix.Input[map[string]string]
	TagsAll pulumix.Input[map[string]string]
	// If the current status of the job is `USER_PAUSED`, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for `job-status` is `USER_PAUSED`.
	UserPausedDetails pulumix.Input[[]*ClassificationJobUserPausedDetailArgs]
}

func (ClassificationJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*classificationJobState)(nil)).Elem()
}

type classificationJobArgs struct {
	// The custom data identifiers to use for data analysis and classification.
	CustomDataIdentifierIds []string `pulumi:"customDataIdentifierIds"`
	// A custom description of the job. The description can contain as many as 200 characters.
	Description *string `pulumi:"description"`
	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	InitialRun *bool `pulumi:"initialRun"`
	// The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
	JobStatus *string `pulumi:"jobStatus"`
	// The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `scheduleFrequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `scheduleFrequency` property to define the recurrence pattern for the job.
	JobType string `pulumi:"jobType"`
	// A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	S3JobDefinition ClassificationJobS3JobDefinition `pulumi:"s3JobDefinition"`
	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	SamplingPercentage *int `pulumi:"samplingPercentage"`
	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `jobType` property to `ONE_TIME`. (documented below)
	ScheduleFrequency *ClassificationJobScheduleFrequency `pulumi:"scheduleFrequency"`
	// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ClassificationJob resource.
type ClassificationJobArgs struct {
	// The custom data identifiers to use for data analysis and classification.
	CustomDataIdentifierIds pulumix.Input[[]string]
	// A custom description of the job. The description can contain as many as 200 characters.
	Description pulumix.Input[*string]
	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	InitialRun pulumix.Input[*bool]
	// The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
	JobStatus pulumix.Input[*string]
	// The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `scheduleFrequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `scheduleFrequency` property to define the recurrence pattern for the job.
	JobType pulumix.Input[string]
	// A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	S3JobDefinition pulumix.Input[*ClassificationJobS3JobDefinitionArgs]
	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	SamplingPercentage pulumix.Input[*int]
	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `jobType` property to `ONE_TIME`. (documented below)
	ScheduleFrequency pulumix.Input[*ClassificationJobScheduleFrequencyArgs]
	// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
	Tags pulumix.Input[map[string]string]
}

func (ClassificationJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*classificationJobArgs)(nil)).Elem()
}

type ClassificationJobOutput struct{ *pulumi.OutputState }

func (ClassificationJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationJob)(nil)).Elem()
}

func (o ClassificationJobOutput) ToClassificationJobOutput() ClassificationJobOutput {
	return o
}

func (o ClassificationJobOutput) ToClassificationJobOutputWithContext(ctx context.Context) ClassificationJobOutput {
	return o
}

func (o ClassificationJobOutput) ToOutput(ctx context.Context) pulumix.Output[ClassificationJob] {
	return pulumix.Output[ClassificationJob]{
		OutputState: o.OutputState,
	}
}

// The date and time, in UTC and extended RFC 3339 format, when the job was created.
func (o ClassificationJobOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The custom data identifiers to use for data analysis and classification.
func (o ClassificationJobOutput) CustomDataIdentifierIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.ArrayOutput[string] { return v.CustomDataIdentifierIds })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A custom description of the job. The description can contain as many as 200 characters.
func (o ClassificationJobOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
func (o ClassificationJobOutput) InitialRun() pulumix.Output[*bool] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[*bool] { return v.InitialRun })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o ClassificationJobOutput) JobArn() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.JobArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ClassificationJobOutput) JobId() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.JobId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status for the job. Valid values are: `CANCELLED`, `RUNNING` and `USER_PAUSED`
func (o ClassificationJobOutput) JobStatus() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.JobStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The schedule for running the job. Valid values are: `ONE_TIME` - Run the job only once. If you specify this value, don't specify a value for the `scheduleFrequency` property. `SCHEDULED` - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the `scheduleFrequency` property to define the recurrence pattern for the job.
func (o ClassificationJobOutput) JobType() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.JobType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A custom name for the job. The name can contain as many as 500 characters. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
func (o ClassificationJobOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o ClassificationJobOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
func (o ClassificationJobOutput) S3JobDefinition() pulumix.GPtrOutput[ClassificationJobS3JobDefinition, ClassificationJobS3JobDefinitionOutput] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.GPtrOutput[ClassificationJobS3JobDefinition, ClassificationJobS3JobDefinitionOutput] {
		return v.S3JobDefinition
	})
	unwrapped := pulumix.Flatten[*ClassificationJobS3JobDefinition, pulumix.GPtrOutput[ClassificationJobS3JobDefinition, ClassificationJobS3JobDefinitionOutput]](value)
	return pulumix.GPtrOutput[ClassificationJobS3JobDefinition, ClassificationJobS3JobDefinitionOutput]{OutputState: unwrapped.OutputState}
}

// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
func (o ClassificationJobOutput) SamplingPercentage() pulumix.Output[int] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.Output[int] { return v.SamplingPercentage })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the `jobType` property to `ONE_TIME`. (documented below)
func (o ClassificationJobOutput) ScheduleFrequency() pulumix.GPtrOutput[ClassificationJobScheduleFrequency, ClassificationJobScheduleFrequencyOutput] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.GPtrOutput[ClassificationJobScheduleFrequency, ClassificationJobScheduleFrequencyOutput] {
		return v.ScheduleFrequency
	})
	unwrapped := pulumix.Flatten[*ClassificationJobScheduleFrequency, pulumix.GPtrOutput[ClassificationJobScheduleFrequency, ClassificationJobScheduleFrequencyOutput]](value)
	return pulumix.GPtrOutput[ClassificationJobScheduleFrequency, ClassificationJobScheduleFrequencyOutput]{OutputState: unwrapped.OutputState}
}

// A map of key-value pairs that specifies the tags to associate with the job. A job can have a maximum of 50 tags. Each tag consists of a tag key and an associated tag value. The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
func (o ClassificationJobOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func (o ClassificationJobOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// If the current status of the job is `USER_PAUSED`, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for `job-status` is `USER_PAUSED`.
func (o ClassificationJobOutput) UserPausedDetails() pulumix.GArrayOutput[ClassificationJobUserPausedDetail, ClassificationJobUserPausedDetailOutput] {
	value := pulumix.Apply[ClassificationJob](o, func(v ClassificationJob) pulumix.GArrayOutput[ClassificationJobUserPausedDetail, ClassificationJobUserPausedDetailOutput] {
		return v.UserPausedDetails
	})
	unwrapped := pulumix.Flatten[[]ClassificationJobUserPausedDetail, pulumix.GArrayOutput[ClassificationJobUserPausedDetail, ClassificationJobUserPausedDetailOutput]](value)
	return pulumix.GArrayOutput[ClassificationJobUserPausedDetail, ClassificationJobUserPausedDetailOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClassificationJobOutput{})
}
