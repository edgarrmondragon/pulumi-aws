// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS Organizations Policies.
func GetPolicies(ctx *pulumi.Context, args *GetPoliciesArgs, opts ...pulumi.InvokeOption) (*GetPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPoliciesResult
	err := ctx.Invoke("aws:organizations/getPolicies:getPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicies.
type GetPoliciesArgs struct {
	// The type of policies to be returned in the response. Valid values are `SERVICE_CONTROL_POLICY | TAG_POLICY | BACKUP_POLICY | AISERVICES_OPT_OUT_POLICY`
	Filter string `pulumi:"filter"`
}

// A collection of values returned by getPolicies.
type GetPoliciesResult struct {
	Filter string `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all the policy ids found.
	Ids []string `pulumi:"ids"`
}

func GetPoliciesOutput(ctx *pulumi.Context, args GetPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetPoliciesResultOutput {
	outputResult := pulumix.ApplyErr[*GetPoliciesArgs](args.ToOutput(), func(plainArgs *GetPoliciesArgs) (*GetPoliciesResult, error) {
		return GetPolicies(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetPoliciesResultOutput, *GetPoliciesResult](outputResult)
}

// A collection of arguments for invoking getPolicies.
type GetPoliciesOutputArgs struct {
	// The type of policies to be returned in the response. Valid values are `SERVICE_CONTROL_POLICY | TAG_POLICY | BACKUP_POLICY | AISERVICES_OPT_OUT_POLICY`
	Filter pulumix.Input[string] `pulumi:"filter"`
}

func (args GetPoliciesOutputArgs) ToOutput() pulumix.Output[*GetPoliciesArgs] {
	allArgs := pulumix.All(
		args.Filter.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetPoliciesArgs {
		return &GetPoliciesArgs{
			Filter: resolvedArgs[0].(string),
		}
	})
}

type GetPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoliciesResult)(nil)).Elem()
}

func (o GetPoliciesResultOutput) ToOutput(context.Context) pulumix.Output[*GetPoliciesResult] {
	return pulumix.Output[*GetPoliciesResult]{
		OutputState: o.OutputState,
	}
}

func (o GetPoliciesResultOutput) Filter() pulumix.Output[string] {
	return pulumix.Apply[*GetPoliciesResult](o, func(v *GetPoliciesResult) string { return v.Filter })
}

func (o GetPoliciesResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetPoliciesResult](o, func(v *GetPoliciesResult) string { return v.Id })
}

func (o GetPoliciesResultOutput) Ids() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetPoliciesResult](o, func(v *GetPoliciesResult) []string { return v.Ids })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
