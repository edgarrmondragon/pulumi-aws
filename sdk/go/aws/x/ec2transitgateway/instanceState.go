// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2transitgateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an EC2 instance state resource. This allows managing an instance power state.
//
// > **NOTE on Instance State Management:** AWS does not currently have an EC2 API operation to determine an instance has finished processing user data. As a result, this resource can interfere with user data processing. For example, this resource may stop an instance while the user data script is in mid run.
type InstanceState struct {
	pulumi.CustomResourceState

	// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
	Force pulumix.Output[*bool] `pulumi:"force"`
	// ID of the instance.
	InstanceId pulumix.Output[string] `pulumi:"instanceId"`
	// State of the instance. Valid values are `stopped`, `running`.
	//
	// The following arguments are optional:
	State pulumix.Output[string] `pulumi:"state"`
}

// NewInstanceState registers a new resource with the given unique name, arguments, and options.
func NewInstanceState(ctx *pulumi.Context,
	name string, args *InstanceStateArgs, opts ...pulumi.ResourceOption) (*InstanceState, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceState
	err := ctx.RegisterResource("aws:ec2transitgateway/instanceState:InstanceState", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceState gets an existing InstanceState resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceState(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceStateState, opts ...pulumi.ResourceOption) (*InstanceState, error) {
	var resource InstanceState
	err := ctx.ReadResource("aws:ec2transitgateway/instanceState:InstanceState", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceState resources.
type instanceStateState struct {
	// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
	Force *bool `pulumi:"force"`
	// ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// State of the instance. Valid values are `stopped`, `running`.
	//
	// The following arguments are optional:
	State *string `pulumi:"state"`
}

type InstanceStateState struct {
	// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
	Force pulumix.Input[*bool]
	// ID of the instance.
	InstanceId pulumix.Input[*string]
	// State of the instance. Valid values are `stopped`, `running`.
	//
	// The following arguments are optional:
	State pulumix.Input[*string]
}

func (InstanceStateState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStateState)(nil)).Elem()
}

type instanceStateArgs struct {
	// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
	Force *bool `pulumi:"force"`
	// ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// State of the instance. Valid values are `stopped`, `running`.
	//
	// The following arguments are optional:
	State string `pulumi:"state"`
}

// The set of arguments for constructing a InstanceState resource.
type InstanceStateArgs struct {
	// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
	Force pulumix.Input[*bool]
	// ID of the instance.
	InstanceId pulumix.Input[string]
	// State of the instance. Valid values are `stopped`, `running`.
	//
	// The following arguments are optional:
	State pulumix.Input[string]
}

func (InstanceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStateArgs)(nil)).Elem()
}

type InstanceStateOutput struct{ *pulumi.OutputState }

func (InstanceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceState)(nil)).Elem()
}

func (o InstanceStateOutput) ToInstanceStateOutput() InstanceStateOutput {
	return o
}

func (o InstanceStateOutput) ToInstanceStateOutputWithContext(ctx context.Context) InstanceStateOutput {
	return o
}

func (o InstanceStateOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceState] {
	return pulumix.Output[InstanceState]{
		OutputState: o.OutputState,
	}
}

// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
func (o InstanceStateOutput) Force() pulumix.Output[*bool] {
	value := pulumix.Apply[InstanceState](o, func(v InstanceState) pulumix.Output[*bool] { return v.Force })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// ID of the instance.
func (o InstanceStateOutput) InstanceId() pulumix.Output[string] {
	value := pulumix.Apply[InstanceState](o, func(v InstanceState) pulumix.Output[string] { return v.InstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// State of the instance. Valid values are `stopped`, `running`.
//
// The following arguments are optional:
func (o InstanceStateOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[InstanceState](o, func(v InstanceState) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(InstanceStateOutput{})
}
