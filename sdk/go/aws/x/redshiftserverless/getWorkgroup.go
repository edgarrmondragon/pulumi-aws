// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS Redshift Serverless Workgroup.
func LookupWorkgroup(ctx *pulumi.Context, args *LookupWorkgroupArgs, opts ...pulumi.InvokeOption) (*LookupWorkgroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkgroupResult
	err := ctx.Invoke("aws:redshiftserverless/getWorkgroup:getWorkgroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkgroup.
type LookupWorkgroupArgs struct {
	// The name of the workgroup associated with the database.
	WorkgroupName string `pulumi:"workgroupName"`
}

// A collection of values returned by getWorkgroup.
type LookupWorkgroupResult struct {
	// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
	Arn string `pulumi:"arn"`
	// The endpoint that is created from the workgroup. See `Endpoint` below.
	Endpoints []GetWorkgroupEndpoint `pulumi:"endpoints"`
	// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
	EnhancedVpcRouting bool `pulumi:"enhancedVpcRouting"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	NamespaceName string `pulumi:"namespaceName"`
	// A value that specifies whether the workgroup can be accessed from a public network.
	PubliclyAccessible bool `pulumi:"publiclyAccessible"`
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
	SubnetIds []string `pulumi:"subnetIds"`
	// The Redshift Workgroup ID.
	WorkgroupId   string `pulumi:"workgroupId"`
	WorkgroupName string `pulumi:"workgroupName"`
}

func LookupWorkgroupOutput(ctx *pulumi.Context, args LookupWorkgroupOutputArgs, opts ...pulumi.InvokeOption) LookupWorkgroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupWorkgroupArgs](args.ToOutput(), func(plainArgs *LookupWorkgroupArgs) (*LookupWorkgroupResult, error) {
		return LookupWorkgroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupWorkgroupResultOutput, *LookupWorkgroupResult](outputResult)
}

// A collection of arguments for invoking getWorkgroup.
type LookupWorkgroupOutputArgs struct {
	// The name of the workgroup associated with the database.
	WorkgroupName pulumix.Input[string] `pulumi:"workgroupName"`
}

func (args LookupWorkgroupOutputArgs) ToOutput() pulumix.Output[*LookupWorkgroupArgs] {
	allArgs := pulumix.All(
		args.WorkgroupName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupWorkgroupArgs {
		return &LookupWorkgroupArgs{
			WorkgroupName: resolvedArgs[0].(string),
		}
	})
}

type LookupWorkgroupResultOutput struct{ *pulumi.OutputState }

func (LookupWorkgroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkgroupResult)(nil)).Elem()
}

func (o LookupWorkgroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupWorkgroupResult] {
	return pulumix.Output[*LookupWorkgroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWorkgroupResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) string { return v.Arn })
}

func (o LookupWorkgroupResultOutput) Endpoints() pulumix.GArrayOutput[GetWorkgroupEndpoint, GetWorkgroupEndpointOutput] {
	value := pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) []GetWorkgroupEndpoint { return v.Endpoints })
	return pulumix.GArrayOutput[GetWorkgroupEndpoint, GetWorkgroupEndpointOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkgroupResultOutput) EnhancedVpcRouting() pulumix.Output[bool] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) bool { return v.EnhancedVpcRouting })
}

func (o LookupWorkgroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) string { return v.Id })
}

func (o LookupWorkgroupResultOutput) NamespaceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) string { return v.NamespaceName })
}

func (o LookupWorkgroupResultOutput) PubliclyAccessible() pulumix.Output[bool] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) bool { return v.PubliclyAccessible })
}

func (o LookupWorkgroupResultOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkgroupResultOutput) SubnetIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) []string { return v.SubnetIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkgroupResultOutput) WorkgroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) string { return v.WorkgroupId })
}

func (o LookupWorkgroupResultOutput) WorkgroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkgroupResult](o, func(v *LookupWorkgroupResult) string { return v.WorkgroupName })
}
