// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Route53 CIDR location resource.
type CidrLocation struct {
	pulumi.CustomResourceState

	// CIDR blocks for the location.
	CidrBlocks pulumix.ArrayOutput[string] `pulumi:"cidrBlocks"`
	// The ID of the CIDR collection to update.
	CidrCollectionId pulumix.Output[string] `pulumi:"cidrCollectionId"`
	// Name for the CIDR location.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewCidrLocation registers a new resource with the given unique name, arguments, and options.
func NewCidrLocation(ctx *pulumi.Context,
	name string, args *CidrLocationArgs, opts ...pulumi.ResourceOption) (*CidrLocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlocks == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlocks'")
	}
	if args.CidrCollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CidrCollectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CidrLocation
	err := ctx.RegisterResource("aws:route53/cidrLocation:CidrLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCidrLocation gets an existing CidrLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCidrLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CidrLocationState, opts ...pulumi.ResourceOption) (*CidrLocation, error) {
	var resource CidrLocation
	err := ctx.ReadResource("aws:route53/cidrLocation:CidrLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CidrLocation resources.
type cidrLocationState struct {
	// CIDR blocks for the location.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// The ID of the CIDR collection to update.
	CidrCollectionId *string `pulumi:"cidrCollectionId"`
	// Name for the CIDR location.
	Name *string `pulumi:"name"`
}

type CidrLocationState struct {
	// CIDR blocks for the location.
	CidrBlocks pulumix.Input[[]string]
	// The ID of the CIDR collection to update.
	CidrCollectionId pulumix.Input[*string]
	// Name for the CIDR location.
	Name pulumix.Input[*string]
}

func (CidrLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrLocationState)(nil)).Elem()
}

type cidrLocationArgs struct {
	// CIDR blocks for the location.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// The ID of the CIDR collection to update.
	CidrCollectionId string `pulumi:"cidrCollectionId"`
	// Name for the CIDR location.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CidrLocation resource.
type CidrLocationArgs struct {
	// CIDR blocks for the location.
	CidrBlocks pulumix.Input[[]string]
	// The ID of the CIDR collection to update.
	CidrCollectionId pulumix.Input[string]
	// Name for the CIDR location.
	Name pulumix.Input[*string]
}

func (CidrLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrLocationArgs)(nil)).Elem()
}

type CidrLocationOutput struct{ *pulumi.OutputState }

func (CidrLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrLocation)(nil)).Elem()
}

func (o CidrLocationOutput) ToCidrLocationOutput() CidrLocationOutput {
	return o
}

func (o CidrLocationOutput) ToCidrLocationOutputWithContext(ctx context.Context) CidrLocationOutput {
	return o
}

func (o CidrLocationOutput) ToOutput(ctx context.Context) pulumix.Output[CidrLocation] {
	return pulumix.Output[CidrLocation]{
		OutputState: o.OutputState,
	}
}

// CIDR blocks for the location.
func (o CidrLocationOutput) CidrBlocks() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CidrLocation](o, func(v CidrLocation) pulumix.ArrayOutput[string] { return v.CidrBlocks })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The ID of the CIDR collection to update.
func (o CidrLocationOutput) CidrCollectionId() pulumix.Output[string] {
	value := pulumix.Apply[CidrLocation](o, func(v CidrLocation) pulumix.Output[string] { return v.CidrCollectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name for the CIDR location.
func (o CidrLocationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CidrLocation](o, func(v CidrLocation) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CidrLocationOutput{})
}
