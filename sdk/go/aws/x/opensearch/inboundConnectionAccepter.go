// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an [AWS Opensearch Inbound Connection Accepter](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_AcceptInboundConnection.html). If connecting domains from different AWS accounts, ensure that the accepter is configured to use the AWS account where the _remote_ opensearch domain exists.
type InboundConnectionAccepter struct {
	pulumi.CustomResourceState

	// Specifies the ID of the connection to accept.
	ConnectionId pulumix.Output[string] `pulumi:"connectionId"`
	// Status of the connection request.
	ConnectionStatus pulumix.Output[string] `pulumi:"connectionStatus"`
}

// NewInboundConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewInboundConnectionAccepter(ctx *pulumi.Context,
	name string, args *InboundConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*InboundConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InboundConnectionAccepter
	err := ctx.RegisterResource("aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInboundConnectionAccepter gets an existing InboundConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInboundConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InboundConnectionAccepterState, opts ...pulumi.ResourceOption) (*InboundConnectionAccepter, error) {
	var resource InboundConnectionAccepter
	err := ctx.ReadResource("aws:opensearch/inboundConnectionAccepter:InboundConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InboundConnectionAccepter resources.
type inboundConnectionAccepterState struct {
	// Specifies the ID of the connection to accept.
	ConnectionId *string `pulumi:"connectionId"`
	// Status of the connection request.
	ConnectionStatus *string `pulumi:"connectionStatus"`
}

type InboundConnectionAccepterState struct {
	// Specifies the ID of the connection to accept.
	ConnectionId pulumix.Input[*string]
	// Status of the connection request.
	ConnectionStatus pulumix.Input[*string]
}

func (InboundConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*inboundConnectionAccepterState)(nil)).Elem()
}

type inboundConnectionAccepterArgs struct {
	// Specifies the ID of the connection to accept.
	ConnectionId string `pulumi:"connectionId"`
}

// The set of arguments for constructing a InboundConnectionAccepter resource.
type InboundConnectionAccepterArgs struct {
	// Specifies the ID of the connection to accept.
	ConnectionId pulumix.Input[string]
}

func (InboundConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inboundConnectionAccepterArgs)(nil)).Elem()
}

type InboundConnectionAccepterOutput struct{ *pulumi.OutputState }

func (InboundConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundConnectionAccepter)(nil)).Elem()
}

func (o InboundConnectionAccepterOutput) ToInboundConnectionAccepterOutput() InboundConnectionAccepterOutput {
	return o
}

func (o InboundConnectionAccepterOutput) ToInboundConnectionAccepterOutputWithContext(ctx context.Context) InboundConnectionAccepterOutput {
	return o
}

func (o InboundConnectionAccepterOutput) ToOutput(ctx context.Context) pulumix.Output[InboundConnectionAccepter] {
	return pulumix.Output[InboundConnectionAccepter]{
		OutputState: o.OutputState,
	}
}

// Specifies the ID of the connection to accept.
func (o InboundConnectionAccepterOutput) ConnectionId() pulumix.Output[string] {
	value := pulumix.Apply[InboundConnectionAccepter](o, func(v InboundConnectionAccepter) pulumix.Output[string] { return v.ConnectionId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the connection request.
func (o InboundConnectionAccepterOutput) ConnectionStatus() pulumix.Output[string] {
	value := pulumix.Apply[InboundConnectionAccepter](o, func(v InboundConnectionAccepter) pulumix.Output[string] { return v.ConnectionStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(InboundConnectionAccepterOutput{})
}
