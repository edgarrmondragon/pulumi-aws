// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type OrganizationAccount struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Email of the account
	Email *string `pulumi:"email"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status *string `pulumi:"status"`
}

type OrganizationAccountArgs struct {
	// ARN of the root
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Email of the account
	Email pulumix.Input[*string] `pulumi:"email"`
	// Identifier of the root
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the policy type
	Name pulumix.Input[*string] `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (OrganizationAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationAccount)(nil)).Elem()
}

func (i OrganizationAccountArgs) ToOrganizationAccountOutput() OrganizationAccountOutput {
	return i.ToOrganizationAccountOutputWithContext(context.Background())
}

func (i OrganizationAccountArgs) ToOrganizationAccountOutputWithContext(ctx context.Context) OrganizationAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationAccountOutput)
}

func (i *OrganizationAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*OrganizationAccountArgs] {
	return pulumix.Val(i)
}

type OrganizationAccountOutput struct{ *pulumi.OutputState }

func (OrganizationAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationAccount)(nil)).Elem()
}

func (o OrganizationAccountOutput) ToOrganizationAccountOutput() OrganizationAccountOutput {
	return o
}

func (o OrganizationAccountOutput) ToOrganizationAccountOutputWithContext(ctx context.Context) OrganizationAccountOutput {
	return o
}

func (o OrganizationAccountOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationAccount] {
	return pulumix.Output[OrganizationAccount]{
		OutputState: o.OutputState,
	}
}

// ARN of the root
func (o OrganizationAccountOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationAccount](o, func(v OrganizationAccount) *string { return v.Arn })
}

// Email of the account
func (o OrganizationAccountOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationAccount](o, func(v OrganizationAccount) *string { return v.Email })
}

// Identifier of the root
func (o OrganizationAccountOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationAccount](o, func(v OrganizationAccount) *string { return v.Id })
}

// The name of the policy type
func (o OrganizationAccountOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationAccount](o, func(v OrganizationAccount) *string { return v.Name })
}

// The status of the policy type as it relates to the associated root
func (o OrganizationAccountOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationAccount](o, func(v OrganizationAccount) *string { return v.Status })
}

type OrganizationNonMasterAccount struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Email of the account
	Email *string `pulumi:"email"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status *string `pulumi:"status"`
}

type OrganizationNonMasterAccountArgs struct {
	// ARN of the root
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Email of the account
	Email pulumix.Input[*string] `pulumi:"email"`
	// Identifier of the root
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the policy type
	Name pulumix.Input[*string] `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumix.Input[*string] `pulumi:"status"`
}

func (OrganizationNonMasterAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationNonMasterAccount)(nil)).Elem()
}

func (i OrganizationNonMasterAccountArgs) ToOrganizationNonMasterAccountOutput() OrganizationNonMasterAccountOutput {
	return i.ToOrganizationNonMasterAccountOutputWithContext(context.Background())
}

func (i OrganizationNonMasterAccountArgs) ToOrganizationNonMasterAccountOutputWithContext(ctx context.Context) OrganizationNonMasterAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationNonMasterAccountOutput)
}

func (i *OrganizationNonMasterAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*OrganizationNonMasterAccountArgs] {
	return pulumix.Val(i)
}

type OrganizationNonMasterAccountOutput struct{ *pulumi.OutputState }

func (OrganizationNonMasterAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationNonMasterAccount)(nil)).Elem()
}

func (o OrganizationNonMasterAccountOutput) ToOrganizationNonMasterAccountOutput() OrganizationNonMasterAccountOutput {
	return o
}

func (o OrganizationNonMasterAccountOutput) ToOrganizationNonMasterAccountOutputWithContext(ctx context.Context) OrganizationNonMasterAccountOutput {
	return o
}

func (o OrganizationNonMasterAccountOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationNonMasterAccount] {
	return pulumix.Output[OrganizationNonMasterAccount]{
		OutputState: o.OutputState,
	}
}

// ARN of the root
func (o OrganizationNonMasterAccountOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationNonMasterAccount](o, func(v OrganizationNonMasterAccount) *string { return v.Arn })
}

// Email of the account
func (o OrganizationNonMasterAccountOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationNonMasterAccount](o, func(v OrganizationNonMasterAccount) *string { return v.Email })
}

// Identifier of the root
func (o OrganizationNonMasterAccountOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationNonMasterAccount](o, func(v OrganizationNonMasterAccount) *string { return v.Id })
}

// The name of the policy type
func (o OrganizationNonMasterAccountOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationNonMasterAccount](o, func(v OrganizationNonMasterAccount) *string { return v.Name })
}

// The status of the policy type as it relates to the associated root
func (o OrganizationNonMasterAccountOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationNonMasterAccount](o, func(v OrganizationNonMasterAccount) *string { return v.Status })
}

type OrganizationRoot struct {
	// ARN of the root
	Arn *string `pulumi:"arn"`
	// Identifier of the root
	Id *string `pulumi:"id"`
	// The name of the policy type
	Name *string `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes []OrganizationRootPolicyType `pulumi:"policyTypes"`
}

type OrganizationRootArgs struct {
	// ARN of the root
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Identifier of the root
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name of the policy type
	Name pulumix.Input[*string] `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes pulumix.Input[[]*OrganizationRootPolicyTypeArgs] `pulumi:"policyTypes"`
}

func (OrganizationRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRoot)(nil)).Elem()
}

func (i OrganizationRootArgs) ToOrganizationRootOutput() OrganizationRootOutput {
	return i.ToOrganizationRootOutputWithContext(context.Background())
}

func (i OrganizationRootArgs) ToOrganizationRootOutputWithContext(ctx context.Context) OrganizationRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootOutput)
}

func (i *OrganizationRootArgs) ToOutput(ctx context.Context) pulumix.Output[*OrganizationRootArgs] {
	return pulumix.Val(i)
}

type OrganizationRootOutput struct{ *pulumi.OutputState }

func (OrganizationRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRoot)(nil)).Elem()
}

func (o OrganizationRootOutput) ToOrganizationRootOutput() OrganizationRootOutput {
	return o
}

func (o OrganizationRootOutput) ToOrganizationRootOutputWithContext(ctx context.Context) OrganizationRootOutput {
	return o
}

func (o OrganizationRootOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationRoot] {
	return pulumix.Output[OrganizationRoot]{
		OutputState: o.OutputState,
	}
}

// ARN of the root
func (o OrganizationRootOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationRoot](o, func(v OrganizationRoot) *string { return v.Arn })
}

// Identifier of the root
func (o OrganizationRootOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationRoot](o, func(v OrganizationRoot) *string { return v.Id })
}

// The name of the policy type
func (o OrganizationRootOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationRoot](o, func(v OrganizationRoot) *string { return v.Name })
}

// List of policy types enabled for this root. All elements have these attributes:
func (o OrganizationRootOutput) PolicyTypes() pulumix.GArrayOutput[OrganizationRootPolicyType, OrganizationRootPolicyTypeOutput] {
	value := pulumix.Apply[OrganizationRoot](o, func(v OrganizationRoot) []OrganizationRootPolicyType { return v.PolicyTypes })
	return pulumix.GArrayOutput[OrganizationRootPolicyType, OrganizationRootPolicyTypeOutput]{OutputState: value.OutputState}
}

type OrganizationRootPolicyType struct {
	// The status of the policy type as it relates to the associated root
	Status *string `pulumi:"status"`
	Type   *string `pulumi:"type"`
}

type OrganizationRootPolicyTypeArgs struct {
	// The status of the policy type as it relates to the associated root
	Status pulumix.Input[*string] `pulumi:"status"`
	Type   pulumix.Input[*string] `pulumi:"type"`
}

func (OrganizationRootPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRootPolicyType)(nil)).Elem()
}

func (i OrganizationRootPolicyTypeArgs) ToOrganizationRootPolicyTypeOutput() OrganizationRootPolicyTypeOutput {
	return i.ToOrganizationRootPolicyTypeOutputWithContext(context.Background())
}

func (i OrganizationRootPolicyTypeArgs) ToOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) OrganizationRootPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRootPolicyTypeOutput)
}

func (i *OrganizationRootPolicyTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*OrganizationRootPolicyTypeArgs] {
	return pulumix.Val(i)
}

type OrganizationRootPolicyTypeOutput struct{ *pulumi.OutputState }

func (OrganizationRootPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRootPolicyType)(nil)).Elem()
}

func (o OrganizationRootPolicyTypeOutput) ToOrganizationRootPolicyTypeOutput() OrganizationRootPolicyTypeOutput {
	return o
}

func (o OrganizationRootPolicyTypeOutput) ToOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) OrganizationRootPolicyTypeOutput {
	return o
}

func (o OrganizationRootPolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationRootPolicyType] {
	return pulumix.Output[OrganizationRootPolicyType]{
		OutputState: o.OutputState,
	}
}

// The status of the policy type as it relates to the associated root
func (o OrganizationRootPolicyTypeOutput) Status() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationRootPolicyType](o, func(v OrganizationRootPolicyType) *string { return v.Status })
}

func (o OrganizationRootPolicyTypeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationRootPolicyType](o, func(v OrganizationRootPolicyType) *string { return v.Type })
}

type OrganizationalUnitAccount struct {
	// ARN of the organizational unit
	Arn *string `pulumi:"arn"`
	// Email of the account
	Email *string `pulumi:"email"`
	// Identifier of the organization unit
	Id *string `pulumi:"id"`
	// The name for the organizational unit
	Name *string `pulumi:"name"`
}

type OrganizationalUnitAccountArgs struct {
	// ARN of the organizational unit
	Arn pulumix.Input[*string] `pulumi:"arn"`
	// Email of the account
	Email pulumix.Input[*string] `pulumi:"email"`
	// Identifier of the organization unit
	Id pulumix.Input[*string] `pulumi:"id"`
	// The name for the organizational unit
	Name pulumix.Input[*string] `pulumi:"name"`
}

func (OrganizationalUnitAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationalUnitAccount)(nil)).Elem()
}

func (i OrganizationalUnitAccountArgs) ToOrganizationalUnitAccountOutput() OrganizationalUnitAccountOutput {
	return i.ToOrganizationalUnitAccountOutputWithContext(context.Background())
}

func (i OrganizationalUnitAccountArgs) ToOrganizationalUnitAccountOutputWithContext(ctx context.Context) OrganizationalUnitAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationalUnitAccountOutput)
}

func (i *OrganizationalUnitAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*OrganizationalUnitAccountArgs] {
	return pulumix.Val(i)
}

type OrganizationalUnitAccountOutput struct{ *pulumi.OutputState }

func (OrganizationalUnitAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationalUnitAccount)(nil)).Elem()
}

func (o OrganizationalUnitAccountOutput) ToOrganizationalUnitAccountOutput() OrganizationalUnitAccountOutput {
	return o
}

func (o OrganizationalUnitAccountOutput) ToOrganizationalUnitAccountOutputWithContext(ctx context.Context) OrganizationalUnitAccountOutput {
	return o
}

func (o OrganizationalUnitAccountOutput) ToOutput(ctx context.Context) pulumix.Output[OrganizationalUnitAccount] {
	return pulumix.Output[OrganizationalUnitAccount]{
		OutputState: o.OutputState,
	}
}

// ARN of the organizational unit
func (o OrganizationalUnitAccountOutput) Arn() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationalUnitAccount](o, func(v OrganizationalUnitAccount) *string { return v.Arn })
}

// Email of the account
func (o OrganizationalUnitAccountOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationalUnitAccount](o, func(v OrganizationalUnitAccount) *string { return v.Email })
}

// Identifier of the organization unit
func (o OrganizationalUnitAccountOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationalUnitAccount](o, func(v OrganizationalUnitAccount) *string { return v.Id })
}

// The name for the organizational unit
func (o OrganizationalUnitAccountOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[OrganizationalUnitAccount](o, func(v OrganizationalUnitAccount) *string { return v.Name })
}

type GetDelegatedAdministratorsDelegatedAdministrator struct {
	// The ARN of the delegated administrator's account.
	Arn string `pulumi:"arn"`
	// The date when the account was made a delegated administrator.
	DelegationEnabledDate string `pulumi:"delegationEnabledDate"`
	// The email address that is associated with the delegated administrator's AWS account.
	Email string `pulumi:"email"`
	// The unique identifier (ID) of the delegated administrator's account.
	Id string `pulumi:"id"`
	// The method by which the delegated administrator's account joined the organization.
	JoinedMethod string `pulumi:"joinedMethod"`
	// The date when the delegated administrator's account became a part of the organization.
	JoinedTimestamp string `pulumi:"joinedTimestamp"`
	// The friendly name of the delegated administrator's account.
	Name string `pulumi:"name"`
	// The status of the delegated administrator's account in the organization.
	Status string `pulumi:"status"`
}

type GetDelegatedAdministratorsDelegatedAdministratorArgs struct {
	// The ARN of the delegated administrator's account.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The date when the account was made a delegated administrator.
	DelegationEnabledDate pulumix.Input[string] `pulumi:"delegationEnabledDate"`
	// The email address that is associated with the delegated administrator's AWS account.
	Email pulumix.Input[string] `pulumi:"email"`
	// The unique identifier (ID) of the delegated administrator's account.
	Id pulumix.Input[string] `pulumi:"id"`
	// The method by which the delegated administrator's account joined the organization.
	JoinedMethod pulumix.Input[string] `pulumi:"joinedMethod"`
	// The date when the delegated administrator's account became a part of the organization.
	JoinedTimestamp pulumix.Input[string] `pulumi:"joinedTimestamp"`
	// The friendly name of the delegated administrator's account.
	Name pulumix.Input[string] `pulumi:"name"`
	// The status of the delegated administrator's account in the organization.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (GetDelegatedAdministratorsDelegatedAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegatedAdministratorsDelegatedAdministrator)(nil)).Elem()
}

func (i GetDelegatedAdministratorsDelegatedAdministratorArgs) ToGetDelegatedAdministratorsDelegatedAdministratorOutput() GetDelegatedAdministratorsDelegatedAdministratorOutput {
	return i.ToGetDelegatedAdministratorsDelegatedAdministratorOutputWithContext(context.Background())
}

func (i GetDelegatedAdministratorsDelegatedAdministratorArgs) ToGetDelegatedAdministratorsDelegatedAdministratorOutputWithContext(ctx context.Context) GetDelegatedAdministratorsDelegatedAdministratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDelegatedAdministratorsDelegatedAdministratorOutput)
}

func (i *GetDelegatedAdministratorsDelegatedAdministratorArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDelegatedAdministratorsDelegatedAdministratorArgs] {
	return pulumix.Val(i)
}

type GetDelegatedAdministratorsDelegatedAdministratorOutput struct{ *pulumi.OutputState }

func (GetDelegatedAdministratorsDelegatedAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegatedAdministratorsDelegatedAdministrator)(nil)).Elem()
}

func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) ToGetDelegatedAdministratorsDelegatedAdministratorOutput() GetDelegatedAdministratorsDelegatedAdministratorOutput {
	return o
}

func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) ToGetDelegatedAdministratorsDelegatedAdministratorOutputWithContext(ctx context.Context) GetDelegatedAdministratorsDelegatedAdministratorOutput {
	return o
}

func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) ToOutput(ctx context.Context) pulumix.Output[GetDelegatedAdministratorsDelegatedAdministrator] {
	return pulumix.Output[GetDelegatedAdministratorsDelegatedAdministrator]{
		OutputState: o.OutputState,
	}
}

// The ARN of the delegated administrator's account.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.Arn })
}

// The date when the account was made a delegated administrator.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) DelegationEnabledDate() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.DelegationEnabledDate })
}

// The email address that is associated with the delegated administrator's AWS account.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.Email })
}

// The unique identifier (ID) of the delegated administrator's account.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.Id })
}

// The method by which the delegated administrator's account joined the organization.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) JoinedMethod() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.JoinedMethod })
}

// The date when the delegated administrator's account became a part of the organization.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) JoinedTimestamp() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.JoinedTimestamp })
}

// The friendly name of the delegated administrator's account.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.Name })
}

// The status of the delegated administrator's account in the organization.
func (o GetDelegatedAdministratorsDelegatedAdministratorOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedAdministratorsDelegatedAdministrator](o, func(v GetDelegatedAdministratorsDelegatedAdministrator) string { return v.Status })
}

type GetDelegatedServicesDelegatedService struct {
	// The date that the account became a delegated administrator for this service.
	DelegationEnabledDate string `pulumi:"delegationEnabledDate"`
	// The name of an AWS service that can request an operation for the specified service.
	ServicePrincipal string `pulumi:"servicePrincipal"`
}

type GetDelegatedServicesDelegatedServiceArgs struct {
	// The date that the account became a delegated administrator for this service.
	DelegationEnabledDate pulumix.Input[string] `pulumi:"delegationEnabledDate"`
	// The name of an AWS service that can request an operation for the specified service.
	ServicePrincipal pulumix.Input[string] `pulumi:"servicePrincipal"`
}

func (GetDelegatedServicesDelegatedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegatedServicesDelegatedService)(nil)).Elem()
}

func (i GetDelegatedServicesDelegatedServiceArgs) ToGetDelegatedServicesDelegatedServiceOutput() GetDelegatedServicesDelegatedServiceOutput {
	return i.ToGetDelegatedServicesDelegatedServiceOutputWithContext(context.Background())
}

func (i GetDelegatedServicesDelegatedServiceArgs) ToGetDelegatedServicesDelegatedServiceOutputWithContext(ctx context.Context) GetDelegatedServicesDelegatedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDelegatedServicesDelegatedServiceOutput)
}

func (i *GetDelegatedServicesDelegatedServiceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDelegatedServicesDelegatedServiceArgs] {
	return pulumix.Val(i)
}

type GetDelegatedServicesDelegatedServiceOutput struct{ *pulumi.OutputState }

func (GetDelegatedServicesDelegatedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDelegatedServicesDelegatedService)(nil)).Elem()
}

func (o GetDelegatedServicesDelegatedServiceOutput) ToGetDelegatedServicesDelegatedServiceOutput() GetDelegatedServicesDelegatedServiceOutput {
	return o
}

func (o GetDelegatedServicesDelegatedServiceOutput) ToGetDelegatedServicesDelegatedServiceOutputWithContext(ctx context.Context) GetDelegatedServicesDelegatedServiceOutput {
	return o
}

func (o GetDelegatedServicesDelegatedServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetDelegatedServicesDelegatedService] {
	return pulumix.Output[GetDelegatedServicesDelegatedService]{
		OutputState: o.OutputState,
	}
}

// The date that the account became a delegated administrator for this service.
func (o GetDelegatedServicesDelegatedServiceOutput) DelegationEnabledDate() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedServicesDelegatedService](o, func(v GetDelegatedServicesDelegatedService) string { return v.DelegationEnabledDate })
}

// The name of an AWS service that can request an operation for the specified service.
func (o GetDelegatedServicesDelegatedServiceOutput) ServicePrincipal() pulumix.Output[string] {
	return pulumix.Apply[GetDelegatedServicesDelegatedService](o, func(v GetDelegatedServicesDelegatedService) string { return v.ServicePrincipal })
}

type GetOrganizationAccount struct {
	// ARN of the root
	Arn string `pulumi:"arn"`
	// Email of the account
	Email string `pulumi:"email"`
	// Identifier of the root
	Id string `pulumi:"id"`
	// The name of the policy type
	Name string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status string `pulumi:"status"`
}

type GetOrganizationAccountArgs struct {
	// ARN of the root
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Email of the account
	Email pulumix.Input[string] `pulumi:"email"`
	// Identifier of the root
	Id pulumix.Input[string] `pulumi:"id"`
	// The name of the policy type
	Name pulumix.Input[string] `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumix.Input[string] `pulumi:"status"`
}

func (GetOrganizationAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationAccount)(nil)).Elem()
}

func (i GetOrganizationAccountArgs) ToGetOrganizationAccountOutput() GetOrganizationAccountOutput {
	return i.ToGetOrganizationAccountOutputWithContext(context.Background())
}

func (i GetOrganizationAccountArgs) ToGetOrganizationAccountOutputWithContext(ctx context.Context) GetOrganizationAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationAccountOutput)
}

func (i *GetOrganizationAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationAccountArgs] {
	return pulumix.Val(i)
}

type GetOrganizationAccountOutput struct{ *pulumi.OutputState }

func (GetOrganizationAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationAccount)(nil)).Elem()
}

func (o GetOrganizationAccountOutput) ToGetOrganizationAccountOutput() GetOrganizationAccountOutput {
	return o
}

func (o GetOrganizationAccountOutput) ToGetOrganizationAccountOutputWithContext(ctx context.Context) GetOrganizationAccountOutput {
	return o
}

func (o GetOrganizationAccountOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationAccount] {
	return pulumix.Output[GetOrganizationAccount]{
		OutputState: o.OutputState,
	}
}

// ARN of the root
func (o GetOrganizationAccountOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationAccount](o, func(v GetOrganizationAccount) string { return v.Arn })
}

// Email of the account
func (o GetOrganizationAccountOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationAccount](o, func(v GetOrganizationAccount) string { return v.Email })
}

// Identifier of the root
func (o GetOrganizationAccountOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationAccount](o, func(v GetOrganizationAccount) string { return v.Id })
}

// The name of the policy type
func (o GetOrganizationAccountOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationAccount](o, func(v GetOrganizationAccount) string { return v.Name })
}

// The status of the policy type as it relates to the associated root
func (o GetOrganizationAccountOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationAccount](o, func(v GetOrganizationAccount) string { return v.Status })
}

type GetOrganizationNonMasterAccount struct {
	// ARN of the root
	Arn string `pulumi:"arn"`
	// Email of the account
	Email string `pulumi:"email"`
	// Identifier of the root
	Id string `pulumi:"id"`
	// The name of the policy type
	Name string `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status string `pulumi:"status"`
}

type GetOrganizationNonMasterAccountArgs struct {
	// ARN of the root
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Email of the account
	Email pulumix.Input[string] `pulumi:"email"`
	// Identifier of the root
	Id pulumix.Input[string] `pulumi:"id"`
	// The name of the policy type
	Name pulumix.Input[string] `pulumi:"name"`
	// The status of the policy type as it relates to the associated root
	Status pulumix.Input[string] `pulumi:"status"`
}

func (GetOrganizationNonMasterAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationNonMasterAccount)(nil)).Elem()
}

func (i GetOrganizationNonMasterAccountArgs) ToGetOrganizationNonMasterAccountOutput() GetOrganizationNonMasterAccountOutput {
	return i.ToGetOrganizationNonMasterAccountOutputWithContext(context.Background())
}

func (i GetOrganizationNonMasterAccountArgs) ToGetOrganizationNonMasterAccountOutputWithContext(ctx context.Context) GetOrganizationNonMasterAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationNonMasterAccountOutput)
}

func (i *GetOrganizationNonMasterAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationNonMasterAccountArgs] {
	return pulumix.Val(i)
}

type GetOrganizationNonMasterAccountOutput struct{ *pulumi.OutputState }

func (GetOrganizationNonMasterAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationNonMasterAccount)(nil)).Elem()
}

func (o GetOrganizationNonMasterAccountOutput) ToGetOrganizationNonMasterAccountOutput() GetOrganizationNonMasterAccountOutput {
	return o
}

func (o GetOrganizationNonMasterAccountOutput) ToGetOrganizationNonMasterAccountOutputWithContext(ctx context.Context) GetOrganizationNonMasterAccountOutput {
	return o
}

func (o GetOrganizationNonMasterAccountOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationNonMasterAccount] {
	return pulumix.Output[GetOrganizationNonMasterAccount]{
		OutputState: o.OutputState,
	}
}

// ARN of the root
func (o GetOrganizationNonMasterAccountOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationNonMasterAccount](o, func(v GetOrganizationNonMasterAccount) string { return v.Arn })
}

// Email of the account
func (o GetOrganizationNonMasterAccountOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationNonMasterAccount](o, func(v GetOrganizationNonMasterAccount) string { return v.Email })
}

// Identifier of the root
func (o GetOrganizationNonMasterAccountOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationNonMasterAccount](o, func(v GetOrganizationNonMasterAccount) string { return v.Id })
}

// The name of the policy type
func (o GetOrganizationNonMasterAccountOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationNonMasterAccount](o, func(v GetOrganizationNonMasterAccount) string { return v.Name })
}

// The status of the policy type as it relates to the associated root
func (o GetOrganizationNonMasterAccountOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationNonMasterAccount](o, func(v GetOrganizationNonMasterAccount) string { return v.Status })
}

type GetOrganizationRoot struct {
	// ARN of the root
	Arn string `pulumi:"arn"`
	// Identifier of the root
	Id string `pulumi:"id"`
	// The name of the policy type
	Name string `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes []GetOrganizationRootPolicyType `pulumi:"policyTypes"`
}

type GetOrganizationRootArgs struct {
	// ARN of the root
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Identifier of the root
	Id pulumix.Input[string] `pulumi:"id"`
	// The name of the policy type
	Name pulumix.Input[string] `pulumi:"name"`
	// List of policy types enabled for this root. All elements have these attributes:
	PolicyTypes pulumix.Input[[]*GetOrganizationRootPolicyTypeArgs] `pulumi:"policyTypes"`
}

func (GetOrganizationRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRoot)(nil)).Elem()
}

func (i GetOrganizationRootArgs) ToGetOrganizationRootOutput() GetOrganizationRootOutput {
	return i.ToGetOrganizationRootOutputWithContext(context.Background())
}

func (i GetOrganizationRootArgs) ToGetOrganizationRootOutputWithContext(ctx context.Context) GetOrganizationRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRootOutput)
}

func (i *GetOrganizationRootArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationRootArgs] {
	return pulumix.Val(i)
}

type GetOrganizationRootOutput struct{ *pulumi.OutputState }

func (GetOrganizationRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRoot)(nil)).Elem()
}

func (o GetOrganizationRootOutput) ToGetOrganizationRootOutput() GetOrganizationRootOutput {
	return o
}

func (o GetOrganizationRootOutput) ToGetOrganizationRootOutputWithContext(ctx context.Context) GetOrganizationRootOutput {
	return o
}

func (o GetOrganizationRootOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationRoot] {
	return pulumix.Output[GetOrganizationRoot]{
		OutputState: o.OutputState,
	}
}

// ARN of the root
func (o GetOrganizationRootOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationRoot](o, func(v GetOrganizationRoot) string { return v.Arn })
}

// Identifier of the root
func (o GetOrganizationRootOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationRoot](o, func(v GetOrganizationRoot) string { return v.Id })
}

// The name of the policy type
func (o GetOrganizationRootOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationRoot](o, func(v GetOrganizationRoot) string { return v.Name })
}

// List of policy types enabled for this root. All elements have these attributes:
func (o GetOrganizationRootOutput) PolicyTypes() pulumix.GArrayOutput[GetOrganizationRootPolicyType, GetOrganizationRootPolicyTypeOutput] {
	value := pulumix.Apply[GetOrganizationRoot](o, func(v GetOrganizationRoot) []GetOrganizationRootPolicyType { return v.PolicyTypes })
	return pulumix.GArrayOutput[GetOrganizationRootPolicyType, GetOrganizationRootPolicyTypeOutput]{OutputState: value.OutputState}
}

type GetOrganizationRootPolicyType struct {
	// The status of the policy type as it relates to the associated root
	Status string `pulumi:"status"`
	Type   string `pulumi:"type"`
}

type GetOrganizationRootPolicyTypeArgs struct {
	// The status of the policy type as it relates to the associated root
	Status pulumix.Input[string] `pulumi:"status"`
	Type   pulumix.Input[string] `pulumi:"type"`
}

func (GetOrganizationRootPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRootPolicyType)(nil)).Elem()
}

func (i GetOrganizationRootPolicyTypeArgs) ToGetOrganizationRootPolicyTypeOutput() GetOrganizationRootPolicyTypeOutput {
	return i.ToGetOrganizationRootPolicyTypeOutputWithContext(context.Background())
}

func (i GetOrganizationRootPolicyTypeArgs) ToGetOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) GetOrganizationRootPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationRootPolicyTypeOutput)
}

func (i *GetOrganizationRootPolicyTypeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationRootPolicyTypeArgs] {
	return pulumix.Val(i)
}

type GetOrganizationRootPolicyTypeOutput struct{ *pulumi.OutputState }

func (GetOrganizationRootPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationRootPolicyType)(nil)).Elem()
}

func (o GetOrganizationRootPolicyTypeOutput) ToGetOrganizationRootPolicyTypeOutput() GetOrganizationRootPolicyTypeOutput {
	return o
}

func (o GetOrganizationRootPolicyTypeOutput) ToGetOrganizationRootPolicyTypeOutputWithContext(ctx context.Context) GetOrganizationRootPolicyTypeOutput {
	return o
}

func (o GetOrganizationRootPolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationRootPolicyType] {
	return pulumix.Output[GetOrganizationRootPolicyType]{
		OutputState: o.OutputState,
	}
}

// The status of the policy type as it relates to the associated root
func (o GetOrganizationRootPolicyTypeOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationRootPolicyType](o, func(v GetOrganizationRootPolicyType) string { return v.Status })
}

func (o GetOrganizationRootPolicyTypeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationRootPolicyType](o, func(v GetOrganizationRootPolicyType) string { return v.Type })
}

type GetOrganizationalUnitChildAccountsAccount struct {
	// The Amazon Resource Name (ARN) of the account.
	Arn string `pulumi:"arn"`
	// The email address associated with the AWS account.
	Email string `pulumi:"email"`
	// Parent identifier of the organizational units.
	Id string `pulumi:"id"`
	// The friendly name of the account.
	Name string `pulumi:"name"`
	// The status of the account in the organization.
	Status string `pulumi:"status"`
}

type GetOrganizationalUnitChildAccountsAccountArgs struct {
	// The Amazon Resource Name (ARN) of the account.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The email address associated with the AWS account.
	Email pulumix.Input[string] `pulumi:"email"`
	// Parent identifier of the organizational units.
	Id pulumix.Input[string] `pulumi:"id"`
	// The friendly name of the account.
	Name pulumix.Input[string] `pulumi:"name"`
	// The status of the account in the organization.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (GetOrganizationalUnitChildAccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitChildAccountsAccount)(nil)).Elem()
}

func (i GetOrganizationalUnitChildAccountsAccountArgs) ToGetOrganizationalUnitChildAccountsAccountOutput() GetOrganizationalUnitChildAccountsAccountOutput {
	return i.ToGetOrganizationalUnitChildAccountsAccountOutputWithContext(context.Background())
}

func (i GetOrganizationalUnitChildAccountsAccountArgs) ToGetOrganizationalUnitChildAccountsAccountOutputWithContext(ctx context.Context) GetOrganizationalUnitChildAccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationalUnitChildAccountsAccountOutput)
}

func (i *GetOrganizationalUnitChildAccountsAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationalUnitChildAccountsAccountArgs] {
	return pulumix.Val(i)
}

type GetOrganizationalUnitChildAccountsAccountOutput struct{ *pulumi.OutputState }

func (GetOrganizationalUnitChildAccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitChildAccountsAccount)(nil)).Elem()
}

func (o GetOrganizationalUnitChildAccountsAccountOutput) ToGetOrganizationalUnitChildAccountsAccountOutput() GetOrganizationalUnitChildAccountsAccountOutput {
	return o
}

func (o GetOrganizationalUnitChildAccountsAccountOutput) ToGetOrganizationalUnitChildAccountsAccountOutputWithContext(ctx context.Context) GetOrganizationalUnitChildAccountsAccountOutput {
	return o
}

func (o GetOrganizationalUnitChildAccountsAccountOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationalUnitChildAccountsAccount] {
	return pulumix.Output[GetOrganizationalUnitChildAccountsAccount]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the account.
func (o GetOrganizationalUnitChildAccountsAccountOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitChildAccountsAccount](o, func(v GetOrganizationalUnitChildAccountsAccount) string { return v.Arn })
}

// The email address associated with the AWS account.
func (o GetOrganizationalUnitChildAccountsAccountOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitChildAccountsAccount](o, func(v GetOrganizationalUnitChildAccountsAccount) string { return v.Email })
}

// Parent identifier of the organizational units.
func (o GetOrganizationalUnitChildAccountsAccountOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitChildAccountsAccount](o, func(v GetOrganizationalUnitChildAccountsAccount) string { return v.Id })
}

// The friendly name of the account.
func (o GetOrganizationalUnitChildAccountsAccountOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitChildAccountsAccount](o, func(v GetOrganizationalUnitChildAccountsAccount) string { return v.Name })
}

// The status of the account in the organization.
func (o GetOrganizationalUnitChildAccountsAccountOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitChildAccountsAccount](o, func(v GetOrganizationalUnitChildAccountsAccount) string { return v.Status })
}

type GetOrganizationalUnitDescendantAccountsAccount struct {
	// The Amazon Resource Name (ARN) of the account.
	Arn string `pulumi:"arn"`
	// The email address associated with the AWS account.
	Email string `pulumi:"email"`
	// Parent identifier of the organizational units.
	Id string `pulumi:"id"`
	// The friendly name of the account.
	Name string `pulumi:"name"`
	// The status of the account in the organization.
	Status string `pulumi:"status"`
}

type GetOrganizationalUnitDescendantAccountsAccountArgs struct {
	// The Amazon Resource Name (ARN) of the account.
	Arn pulumix.Input[string] `pulumi:"arn"`
	// The email address associated with the AWS account.
	Email pulumix.Input[string] `pulumi:"email"`
	// Parent identifier of the organizational units.
	Id pulumix.Input[string] `pulumi:"id"`
	// The friendly name of the account.
	Name pulumix.Input[string] `pulumi:"name"`
	// The status of the account in the organization.
	Status pulumix.Input[string] `pulumi:"status"`
}

func (GetOrganizationalUnitDescendantAccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitDescendantAccountsAccount)(nil)).Elem()
}

func (i GetOrganizationalUnitDescendantAccountsAccountArgs) ToGetOrganizationalUnitDescendantAccountsAccountOutput() GetOrganizationalUnitDescendantAccountsAccountOutput {
	return i.ToGetOrganizationalUnitDescendantAccountsAccountOutputWithContext(context.Background())
}

func (i GetOrganizationalUnitDescendantAccountsAccountArgs) ToGetOrganizationalUnitDescendantAccountsAccountOutputWithContext(ctx context.Context) GetOrganizationalUnitDescendantAccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationalUnitDescendantAccountsAccountOutput)
}

func (i *GetOrganizationalUnitDescendantAccountsAccountArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationalUnitDescendantAccountsAccountArgs] {
	return pulumix.Val(i)
}

type GetOrganizationalUnitDescendantAccountsAccountOutput struct{ *pulumi.OutputState }

func (GetOrganizationalUnitDescendantAccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitDescendantAccountsAccount)(nil)).Elem()
}

func (o GetOrganizationalUnitDescendantAccountsAccountOutput) ToGetOrganizationalUnitDescendantAccountsAccountOutput() GetOrganizationalUnitDescendantAccountsAccountOutput {
	return o
}

func (o GetOrganizationalUnitDescendantAccountsAccountOutput) ToGetOrganizationalUnitDescendantAccountsAccountOutputWithContext(ctx context.Context) GetOrganizationalUnitDescendantAccountsAccountOutput {
	return o
}

func (o GetOrganizationalUnitDescendantAccountsAccountOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationalUnitDescendantAccountsAccount] {
	return pulumix.Output[GetOrganizationalUnitDescendantAccountsAccount]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the account.
func (o GetOrganizationalUnitDescendantAccountsAccountOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitDescendantAccountsAccount](o, func(v GetOrganizationalUnitDescendantAccountsAccount) string { return v.Arn })
}

// The email address associated with the AWS account.
func (o GetOrganizationalUnitDescendantAccountsAccountOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitDescendantAccountsAccount](o, func(v GetOrganizationalUnitDescendantAccountsAccount) string { return v.Email })
}

// Parent identifier of the organizational units.
func (o GetOrganizationalUnitDescendantAccountsAccountOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitDescendantAccountsAccount](o, func(v GetOrganizationalUnitDescendantAccountsAccount) string { return v.Id })
}

// The friendly name of the account.
func (o GetOrganizationalUnitDescendantAccountsAccountOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitDescendantAccountsAccount](o, func(v GetOrganizationalUnitDescendantAccountsAccount) string { return v.Name })
}

// The status of the account in the organization.
func (o GetOrganizationalUnitDescendantAccountsAccountOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitDescendantAccountsAccount](o, func(v GetOrganizationalUnitDescendantAccountsAccount) string { return v.Status })
}

type GetOrganizationalUnitsChild struct {
	// ARN of the organizational unit
	Arn string `pulumi:"arn"`
	// Parent identifier of the organizational units.
	Id string `pulumi:"id"`
	// Name of the organizational unit
	Name string `pulumi:"name"`
}

type GetOrganizationalUnitsChildArgs struct {
	// ARN of the organizational unit
	Arn pulumix.Input[string] `pulumi:"arn"`
	// Parent identifier of the organizational units.
	Id pulumix.Input[string] `pulumi:"id"`
	// Name of the organizational unit
	Name pulumix.Input[string] `pulumi:"name"`
}

func (GetOrganizationalUnitsChildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitsChild)(nil)).Elem()
}

func (i GetOrganizationalUnitsChildArgs) ToGetOrganizationalUnitsChildOutput() GetOrganizationalUnitsChildOutput {
	return i.ToGetOrganizationalUnitsChildOutputWithContext(context.Background())
}

func (i GetOrganizationalUnitsChildArgs) ToGetOrganizationalUnitsChildOutputWithContext(ctx context.Context) GetOrganizationalUnitsChildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationalUnitsChildOutput)
}

func (i *GetOrganizationalUnitsChildArgs) ToOutput(ctx context.Context) pulumix.Output[*GetOrganizationalUnitsChildArgs] {
	return pulumix.Val(i)
}

type GetOrganizationalUnitsChildOutput struct{ *pulumi.OutputState }

func (GetOrganizationalUnitsChildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationalUnitsChild)(nil)).Elem()
}

func (o GetOrganizationalUnitsChildOutput) ToGetOrganizationalUnitsChildOutput() GetOrganizationalUnitsChildOutput {
	return o
}

func (o GetOrganizationalUnitsChildOutput) ToGetOrganizationalUnitsChildOutputWithContext(ctx context.Context) GetOrganizationalUnitsChildOutput {
	return o
}

func (o GetOrganizationalUnitsChildOutput) ToOutput(ctx context.Context) pulumix.Output[GetOrganizationalUnitsChild] {
	return pulumix.Output[GetOrganizationalUnitsChild]{
		OutputState: o.OutputState,
	}
}

// ARN of the organizational unit
func (o GetOrganizationalUnitsChildOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitsChild](o, func(v GetOrganizationalUnitsChild) string { return v.Arn })
}

// Parent identifier of the organizational units.
func (o GetOrganizationalUnitsChildOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitsChild](o, func(v GetOrganizationalUnitsChild) string { return v.Id })
}

// Name of the organizational unit
func (o GetOrganizationalUnitsChildOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetOrganizationalUnitsChild](o, func(v GetOrganizationalUnitsChild) string { return v.Name })
}

func init() {
	pulumi.RegisterOutputType(OrganizationAccountOutput{})
	pulumi.RegisterOutputType(OrganizationNonMasterAccountOutput{})
	pulumi.RegisterOutputType(OrganizationRootOutput{})
	pulumi.RegisterOutputType(OrganizationRootPolicyTypeOutput{})
	pulumi.RegisterOutputType(OrganizationalUnitAccountOutput{})
	pulumi.RegisterOutputType(GetDelegatedAdministratorsDelegatedAdministratorOutput{})
	pulumi.RegisterOutputType(GetDelegatedServicesDelegatedServiceOutput{})
	pulumi.RegisterOutputType(GetOrganizationAccountOutput{})
	pulumi.RegisterOutputType(GetOrganizationNonMasterAccountOutput{})
	pulumi.RegisterOutputType(GetOrganizationRootOutput{})
	pulumi.RegisterOutputType(GetOrganizationRootPolicyTypeOutput{})
	pulumi.RegisterOutputType(GetOrganizationalUnitChildAccountsAccountOutput{})
	pulumi.RegisterOutputType(GetOrganizationalUnitDescendantAccountsAccountOutput{})
	pulumi.RegisterOutputType(GetOrganizationalUnitsChildOutput{})
}
