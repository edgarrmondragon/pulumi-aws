// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides details about a specific Lex (V1) Bot associated with an Amazon Connect instance.
func LookupBotAssociation(ctx *pulumi.Context, args *LookupBotAssociationArgs, opts ...pulumi.InvokeOption) (*LookupBotAssociationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBotAssociationResult
	err := ctx.Invoke("aws:connect/getBotAssociation:getBotAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBotAssociation.
type LookupBotAssociationArgs struct {
	// Identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId string `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot GetBotAssociationLexBot `pulumi:"lexBot"`
}

// A collection of values returned by getBotAssociation.
type LookupBotAssociationResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string                  `pulumi:"id"`
	InstanceId string                  `pulumi:"instanceId"`
	LexBot     GetBotAssociationLexBot `pulumi:"lexBot"`
}

func LookupBotAssociationOutput(ctx *pulumi.Context, args LookupBotAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupBotAssociationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupBotAssociationArgs](args.ToOutput(), func(plainArgs *LookupBotAssociationArgs) (*LookupBotAssociationResult, error) {
		return LookupBotAssociation(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupBotAssociationResultOutput, *LookupBotAssociationResult](outputResult)
}

// A collection of arguments for invoking getBotAssociation.
type LookupBotAssociationOutputArgs struct {
	// Identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
	InstanceId pulumix.Input[string] `pulumi:"instanceId"`
	// Configuration information of an Amazon Lex (V1) bot. Detailed below.
	LexBot pulumix.Input[*GetBotAssociationLexBotArgs] `pulumi:"lexBot"`
}

func (args LookupBotAssociationOutputArgs) ToOutput() pulumix.Output[*LookupBotAssociationArgs] {
	allArgs := pulumix.All(
		args.InstanceId.ToOutput(context.Background()).AsAny(),
		args.LexBot.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupBotAssociationArgs {
		return &LookupBotAssociationArgs{
			InstanceId: resolvedArgs[0].(string),
			LexBot:     resolvedArgs[1].(GetBotAssociationLexBot),
		}
	})
}

type LookupBotAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupBotAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotAssociationResult)(nil)).Elem()
}

func (o LookupBotAssociationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupBotAssociationResult] {
	return pulumix.Output[*LookupBotAssociationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupBotAssociationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotAssociationResult](o, func(v *LookupBotAssociationResult) string { return v.Id })
}

func (o LookupBotAssociationResultOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupBotAssociationResult](o, func(v *LookupBotAssociationResult) string { return v.InstanceId })
}

func (o LookupBotAssociationResultOutput) LexBot() pulumix.GPtrOutput[GetBotAssociationLexBot, GetBotAssociationLexBotOutput] {
	value := pulumix.Apply[*LookupBotAssociationResult](o, func(v *LookupBotAssociationResult) GetBotAssociationLexBot { return v.LexBot })
	return pulumix.GPtrOutput[GetBotAssociationLexBot, GetBotAssociationLexBotOutput]{
		OutputState: value.OutputState,
	}
}
