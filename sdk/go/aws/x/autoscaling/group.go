// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Auto Scaling Group resource.
//
// > **Note:** You must specify either `launchConfiguration`, `launchTemplate`, or `mixedInstancesPolicy`.
//
// > **NOTE on Auto Scaling Groups, Attachments and Traffic Source Attachments:** Pulumi provides standalone Attachment (for attaching Classic Load Balancers and Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target groups) and Traffic Source Attachment (for attaching Load Balancers and VPC Lattice target groups) resources and an Auto Scaling Group resource with `loadBalancers`, `targetGroupArns` and `trafficSource` attributes. Do not use the same traffic source in more than one of these resources. Doing so will cause a conflict of attachments. A `lifecycle` configuration block can be used to suppress differences if necessary.
type Group struct {
	pulumi.CustomResourceState

	// ARN for this Auto Scaling Group
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones pulumix.ArrayOutput[string] `pulumi:"availabilityZones"`
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance pulumix.Output[*bool] `pulumi:"capacityRebalance"`
	// Reserved.
	Context pulumix.Output[*string] `pulumi:"context"`
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumix.Output[int] `pulumi:"defaultCooldown"`
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup pulumix.Output[*int] `pulumi:"defaultInstanceWarmup"`
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumix.Output[int] `pulumi:"desiredCapacity"`
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType pulumix.Output[*string] `pulumi:"desiredCapacityType"`
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics pulumix.ArrayOutput[string] `pulumi:"enabledMetrics"`
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete         pulumix.Output[*bool] `pulumi:"forceDelete"`
	ForceDeleteWarmPool pulumix.Output[*bool] `pulumi:"forceDeleteWarmPool"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumix.Output[*int] `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumix.Output[string] `pulumi:"healthCheckType"`
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities pulumix.Output[*bool] `pulumi:"ignoreFailedScalingActivities"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks pulumix.GArrayOutput[GroupInitialLifecycleHook, GroupInitialLifecycleHookOutput] `pulumi:"initialLifecycleHooks"`
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh pulumix.GPtrOutput[GroupInstanceRefresh, GroupInstanceRefreshOutput] `pulumi:"instanceRefresh"`
	// Name of the launch configuration to use.
	LaunchConfiguration pulumix.Output[*string] `pulumi:"launchConfiguration"`
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate pulumix.GPtrOutput[GroupLaunchTemplate, GroupLaunchTemplateOutput] `pulumi:"launchTemplate"`
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers pulumix.ArrayOutput[string] `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime pulumix.Output[*int] `pulumi:"maxInstanceLifetime"`
	// Maximum size of the Auto Scaling Group.
	MaxSize pulumix.Output[int] `pulumi:"maxSize"`
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumix.Output[*string] `pulumi:"metricsGranularity"`
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumix.Output[*int] `pulumi:"minElbCapacity"`
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize pulumix.Output[int] `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy pulumix.GPtrOutput[GroupMixedInstancesPolicy, GroupMixedInstancesPolicyOutput] `pulumi:"mixedInstancesPolicy"`
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name pulumix.Output[string] `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Output[string] `pulumi:"namePrefix"`
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumix.Output[*string] `pulumi:"placementGroup"`
	// Predicted capacity of the group.
	PredictedCapacity pulumix.Output[int] `pulumi:"predictedCapacity"`
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn pulumix.Output[*bool] `pulumi:"protectFromScaleIn"`
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumix.Output[string] `pulumi:"serviceLinkedRoleArn"`
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses pulumix.ArrayOutput[string] `pulumi:"suspendedProcesses"`
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags pulumix.GArrayOutput[GroupTag, GroupTagOutput] `pulumi:"tags"`
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns pulumix.ArrayOutput[string] `pulumi:"targetGroupArns"`
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies pulumix.ArrayOutput[string] `pulumi:"terminationPolicies"`
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources pulumix.GArrayOutput[GroupTrafficSource, GroupTrafficSourceOutput] `pulumi:"trafficSources"`
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers pulumix.ArrayOutput[string] `pulumi:"vpcZoneIdentifiers"`
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout pulumix.Output[*string] `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumix.Output[*int] `pulumi:"waitForElbCapacity"`
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool pulumix.GPtrOutput[GroupWarmPool, GroupWarmPoolOutput] `pulumi:"warmPool"`
	// Current size of the warm pool.
	WarmPoolSize pulumix.Output[int] `pulumi:"warmPoolSize"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxSize == nil {
		return nil, errors.New("invalid value for required argument 'MaxSize'")
	}
	if args.MinSize == nil {
		return nil, errors.New("invalid value for required argument 'MinSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("aws:autoscaling/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("aws:autoscaling/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// ARN for this Auto Scaling Group
	Arn *string `pulumi:"arn"`
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance *bool `pulumi:"capacityRebalance"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown *int `pulumi:"defaultCooldown"`
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup *int `pulumi:"defaultInstanceWarmup"`
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType *string `pulumi:"desiredCapacityType"`
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics []string `pulumi:"enabledMetrics"`
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete         *bool `pulumi:"forceDelete"`
	ForceDeleteWarmPool *bool `pulumi:"forceDeleteWarmPool"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities *bool `pulumi:"ignoreFailedScalingActivities"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks []GroupInitialLifecycleHook `pulumi:"initialLifecycleHooks"`
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh *GroupInstanceRefresh `pulumi:"instanceRefresh"`
	// Name of the launch configuration to use.
	LaunchConfiguration interface{} `pulumi:"launchConfiguration"`
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate *GroupLaunchTemplate `pulumi:"launchTemplate"`
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime *int `pulumi:"maxInstanceLifetime"`
	// Maximum size of the Auto Scaling Group.
	MaxSize *int `pulumi:"maxSize"`
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity *string `pulumi:"metricsGranularity"`
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity *int `pulumi:"minElbCapacity"`
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize *int `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy *GroupMixedInstancesPolicy `pulumi:"mixedInstancesPolicy"`
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup interface{} `pulumi:"placementGroup"`
	// Predicted capacity of the group.
	PredictedCapacity *int `pulumi:"predictedCapacity"`
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn *string `pulumi:"serviceLinkedRoleArn"`
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses []string `pulumi:"suspendedProcesses"`
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags []GroupTag `pulumi:"tags"`
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies []string `pulumi:"terminationPolicies"`
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources []GroupTrafficSource `pulumi:"trafficSources"`
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers []string `pulumi:"vpcZoneIdentifiers"`
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout *string `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity *int `pulumi:"waitForElbCapacity"`
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool *GroupWarmPool `pulumi:"warmPool"`
	// Current size of the warm pool.
	WarmPoolSize *int `pulumi:"warmPoolSize"`
}

type GroupState struct {
	// ARN for this Auto Scaling Group
	Arn pulumix.Input[*string]
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones pulumix.Input[[]string]
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance pulumix.Input[*bool]
	// Reserved.
	Context pulumix.Input[*string]
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumix.Input[*int]
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup pulumix.Input[*int]
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumix.Input[*int]
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType pulumix.Input[*string]
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics pulumix.Input[[]string]
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete         pulumix.Input[*bool]
	ForceDeleteWarmPool pulumix.Input[*bool]
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumix.Input[*int]
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumix.Input[*string]
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities pulumix.Input[*bool]
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks pulumix.Input[[]*GroupInitialLifecycleHookArgs]
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh pulumix.Input[*GroupInstanceRefreshArgs]
	// Name of the launch configuration to use.
	LaunchConfiguration pulumix.Input[*any]
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate pulumix.Input[*GroupLaunchTemplateArgs]
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers pulumix.Input[[]string]
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime pulumix.Input[*int]
	// Maximum size of the Auto Scaling Group.
	MaxSize pulumix.Input[*int]
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumix.Input[*string]
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumix.Input[*int]
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize pulumix.Input[*int]
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy pulumix.Input[*GroupMixedInstancesPolicyArgs]
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumix.Input[*any]
	// Predicted capacity of the group.
	PredictedCapacity pulumix.Input[*int]
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn pulumix.Input[*bool]
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumix.Input[*string]
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses pulumix.Input[[]string]
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags pulumix.Input[[]*GroupTagArgs]
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns pulumix.Input[[]string]
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies pulumix.Input[[]string]
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources pulumix.Input[[]*GroupTrafficSourceArgs]
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers pulumix.Input[[]string]
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout pulumix.Input[*string]
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumix.Input[*int]
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool pulumix.Input[*GroupWarmPoolArgs]
	// Current size of the warm pool.
	WarmPoolSize pulumix.Input[*int]
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance *bool `pulumi:"capacityRebalance"`
	// Reserved.
	Context *string `pulumi:"context"`
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown *int `pulumi:"defaultCooldown"`
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup *int `pulumi:"defaultInstanceWarmup"`
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType *string `pulumi:"desiredCapacityType"`
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics []string `pulumi:"enabledMetrics"`
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete         *bool `pulumi:"forceDelete"`
	ForceDeleteWarmPool *bool `pulumi:"forceDeleteWarmPool"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities *bool `pulumi:"ignoreFailedScalingActivities"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks []GroupInitialLifecycleHook `pulumi:"initialLifecycleHooks"`
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh *GroupInstanceRefresh `pulumi:"instanceRefresh"`
	// Name of the launch configuration to use.
	LaunchConfiguration interface{} `pulumi:"launchConfiguration"`
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate *GroupLaunchTemplate `pulumi:"launchTemplate"`
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers []string `pulumi:"loadBalancers"`
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime *int `pulumi:"maxInstanceLifetime"`
	// Maximum size of the Auto Scaling Group.
	MaxSize int `pulumi:"maxSize"`
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity *string `pulumi:"metricsGranularity"`
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity *int `pulumi:"minElbCapacity"`
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize int `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy *GroupMixedInstancesPolicy `pulumi:"mixedInstancesPolicy"`
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup interface{} `pulumi:"placementGroup"`
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn *string `pulumi:"serviceLinkedRoleArn"`
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses []string `pulumi:"suspendedProcesses"`
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags []GroupTag `pulumi:"tags"`
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns []string `pulumi:"targetGroupArns"`
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies []string `pulumi:"terminationPolicies"`
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources []GroupTrafficSource `pulumi:"trafficSources"`
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers []string `pulumi:"vpcZoneIdentifiers"`
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout *string `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity *int `pulumi:"waitForElbCapacity"`
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool *GroupWarmPool `pulumi:"warmPool"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
	AvailabilityZones pulumix.Input[[]string]
	// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
	CapacityRebalance pulumix.Input[*bool]
	// Reserved.
	Context pulumix.Input[*string]
	// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumix.Input[*int]
	// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
	DefaultInstanceWarmup pulumix.Input[*int]
	// Number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumix.Input[*int]
	// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
	DesiredCapacityType pulumix.Input[*string]
	// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
	EnabledMetrics pulumix.Input[[]string]
	// Allows deleting the Auto Scaling Group without waiting
	// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group. This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete         pulumix.Input[*bool]
	ForceDeleteWarmPool pulumix.Input[*bool]
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumix.Input[*int]
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumix.Input[*string]
	// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
	IgnoreFailedScalingActivities pulumix.Input[*bool]
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the Auto Scaling Group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// `autoscaling.LifecycleHook`
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks pulumix.Input[[]*GroupInitialLifecycleHookArgs]
	// If this block is configured, start an
	// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
	// when this Auto Scaling Group is updated. Defined below.
	InstanceRefresh pulumix.Input[*GroupInstanceRefreshArgs]
	// Name of the launch configuration to use.
	LaunchConfiguration pulumix.Input[*any]
	// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
	LaunchTemplate pulumix.Input[*GroupLaunchTemplateArgs]
	// List of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
	LoadBalancers pulumix.Input[[]string]
	// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
	MaxInstanceLifetime pulumix.Input[*int]
	// Maximum size of the Auto Scaling Group.
	MaxSize pulumix.Input[int]
	// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumix.Input[*string]
	// Setting this causes Pulumi to wait for
	// this number of instances from this Auto Scaling Group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumix.Input[*int]
	// Minimum size of the Auto Scaling Group.
	// (See also Waiting for Capacity below.)
	MinSize pulumix.Input[int]
	// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
	MixedInstancesPolicy pulumix.Input[*GroupMixedInstancesPolicyArgs]
	// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
	Name pulumix.Input[*string]
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumix.Input[*string]
	// Name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumix.Input[*any]
	// Whether newly launched instances
	// are automatically protected from termination by Amazon EC2 Auto Scaling when
	// scaling in. For more information about preventing instances from terminating
	// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ProtectFromScaleIn pulumix.Input[*bool]
	// ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumix.Input[*string]
	// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
	SuspendedProcesses pulumix.Input[[]string]
	// Configuration block(s) containing resource tags. See Tag below for more details.
	Tags pulumix.Input[[]*GroupTagArgs]
	// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
	TargetGroupArns pulumix.Input[[]string]
	// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
	TerminationPolicies pulumix.Input[[]string]
	// Attaches one or more traffic sources to the specified Auto Scaling group.
	TrafficSources pulumix.Input[[]*GroupTrafficSourceArgs]
	// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
	VpcZoneIdentifiers pulumix.Input[[]string]
	// Maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
	// wait for ASG instances to be healthy before timing out. (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// the provider to skip all Capacity Waiting behavior.
	WaitForCapacityTimeout pulumix.Input[*string]
	// Setting this will cause Pulumi to wait
	// for exactly this number of healthy instances from this Auto Scaling Group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumix.Input[*int]
	// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
	// to the specified Auto Scaling group. Defined below
	WarmPool pulumix.Input[*GroupWarmPoolArgs]
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) ToOutput(ctx context.Context) pulumix.Output[Group] {
	return pulumix.Output[Group]{
		OutputState: o.OutputState,
	}
}

// ARN for this Auto Scaling Group
func (o GroupOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpcZoneIdentifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpcZoneIdentifier`.
func (o GroupOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.AvailabilityZones })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
func (o GroupOutput) CapacityRebalance() pulumix.Output[*bool] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*bool] { return v.CapacityRebalance })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Reserved.
func (o GroupOutput) Context() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.Context })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
func (o GroupOutput) DefaultCooldown() pulumix.Output[int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[int] { return v.DefaultCooldown })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))
func (o GroupOutput) DefaultInstanceWarmup() pulumix.Output[*int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*int] { return v.DefaultInstanceWarmup })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Number of Amazon EC2 instances that
// should be running in the group. (See also Waiting for
// Capacity below.)
func (o GroupOutput) DesiredCapacity() pulumix.Output[int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[int] { return v.DesiredCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The unit of measurement for the value specified for `desiredCapacity`. Supported for attribute-based instance type selection only. Valid values: `"units"`, `"vcpu"`, `"memory-mib"`.
func (o GroupOutput) DesiredCapacityType() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.DesiredCapacityType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).
func (o GroupOutput) EnabledMetrics() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.EnabledMetrics })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Allows deleting the Auto Scaling Group without waiting
// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
// even if it's in the process of scaling a resource. Normally, this provider
// drains all the instances before deleting the group. This bypasses that
// behavior and potentially leaves resources dangling.
func (o GroupOutput) ForceDelete() pulumix.Output[*bool] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*bool] { return v.ForceDelete })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func (o GroupOutput) ForceDeleteWarmPool() pulumix.Output[*bool] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*bool] { return v.ForceDeleteWarmPool })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Time (in seconds) after instance comes into service before checking health.
func (o GroupOutput) HealthCheckGracePeriod() pulumix.Output[*int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*int] { return v.HealthCheckGracePeriod })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// "EC2" or "ELB". Controls how health checking is done.
func (o GroupOutput) HealthCheckType() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.HealthCheckType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.
func (o GroupOutput) IgnoreFailedScalingActivities() pulumix.Output[*bool] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*bool] { return v.IgnoreFailedScalingActivities })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// One or more
// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
// to attach to the Auto Scaling Group **before** instances are launched. The
// syntax is exactly the same as the separate
// `autoscaling.LifecycleHook`
// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
// a new Auto Scaling Group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
func (o GroupOutput) InitialLifecycleHooks() pulumix.GArrayOutput[GroupInitialLifecycleHook, GroupInitialLifecycleHookOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GArrayOutput[GroupInitialLifecycleHook, GroupInitialLifecycleHookOutput] {
		return v.InitialLifecycleHooks
	})
	unwrapped := pulumix.Flatten[[]GroupInitialLifecycleHook, pulumix.GArrayOutput[GroupInitialLifecycleHook, GroupInitialLifecycleHookOutput]](value)
	return pulumix.GArrayOutput[GroupInitialLifecycleHook, GroupInitialLifecycleHookOutput]{OutputState: unwrapped.OutputState}
}

// If this block is configured, start an
// [Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)
// when this Auto Scaling Group is updated. Defined below.
func (o GroupOutput) InstanceRefresh() pulumix.GPtrOutput[GroupInstanceRefresh, GroupInstanceRefreshOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GPtrOutput[GroupInstanceRefresh, GroupInstanceRefreshOutput] {
		return v.InstanceRefresh
	})
	unwrapped := pulumix.Flatten[*GroupInstanceRefresh, pulumix.GPtrOutput[GroupInstanceRefresh, GroupInstanceRefreshOutput]](value)
	return pulumix.GPtrOutput[GroupInstanceRefresh, GroupInstanceRefreshOutput]{OutputState: unwrapped.OutputState}
}

// Name of the launch configuration to use.
func (o GroupOutput) LaunchConfiguration() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.LaunchConfiguration })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
func (o GroupOutput) LaunchTemplate() pulumix.GPtrOutput[GroupLaunchTemplate, GroupLaunchTemplateOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GPtrOutput[GroupLaunchTemplate, GroupLaunchTemplateOutput] {
		return v.LaunchTemplate
	})
	unwrapped := pulumix.Flatten[*GroupLaunchTemplate, pulumix.GPtrOutput[GroupLaunchTemplate, GroupLaunchTemplateOutput]](value)
	return pulumix.GPtrOutput[GroupLaunchTemplate, GroupLaunchTemplateOutput]{OutputState: unwrapped.OutputState}
}

// List of elastic load balancer names to add to the autoscaling
// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead. To remove all load balancer attachments an empty list should be specified.
func (o GroupOutput) LoadBalancers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.LoadBalancers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
func (o GroupOutput) MaxInstanceLifetime() pulumix.Output[*int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*int] { return v.MaxInstanceLifetime })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Maximum size of the Auto Scaling Group.
func (o GroupOutput) MaxSize() pulumix.Output[int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[int] { return v.MaxSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
func (o GroupOutput) MetricsGranularity() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.MetricsGranularity })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Setting this causes Pulumi to wait for
// this number of instances from this Auto Scaling Group to show up healthy in the
// ELB only on creation. Updates will not wait on ELB instance number changes.
// (See also Waiting for Capacity below.)
func (o GroupOutput) MinElbCapacity() pulumix.Output[*int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*int] { return v.MinElbCapacity })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Minimum size of the Auto Scaling Group.
// (See also Waiting for Capacity below.)
func (o GroupOutput) MinSize() pulumix.Output[int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[int] { return v.MinSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
func (o GroupOutput) MixedInstancesPolicy() pulumix.GPtrOutput[GroupMixedInstancesPolicy, GroupMixedInstancesPolicyOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GPtrOutput[GroupMixedInstancesPolicy, GroupMixedInstancesPolicyOutput] {
		return v.MixedInstancesPolicy
	})
	unwrapped := pulumix.Flatten[*GroupMixedInstancesPolicy, pulumix.GPtrOutput[GroupMixedInstancesPolicy, GroupMixedInstancesPolicyOutput]](value)
	return pulumix.GPtrOutput[GroupMixedInstancesPolicy, GroupMixedInstancesPolicyOutput]{OutputState: unwrapped.OutputState}
}

// Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `namePrefix`.
func (o GroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creates a unique name beginning with the specified
// prefix. Conflicts with `name`.
func (o GroupOutput) NamePrefix() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.NamePrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the placement group into which you'll launch your instances, if any.
func (o GroupOutput) PlacementGroup() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.PlacementGroup })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Predicted capacity of the group.
func (o GroupOutput) PredictedCapacity() pulumix.Output[int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[int] { return v.PredictedCapacity })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Whether newly launched instances
// are automatically protected from termination by Amazon EC2 Auto Scaling when
// scaling in. For more information about preventing instances from terminating
// on scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
// in the Amazon EC2 Auto Scaling User Guide.
func (o GroupOutput) ProtectFromScaleIn() pulumix.Output[*bool] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*bool] { return v.ProtectFromScaleIn })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// ARN of the service-linked role that the ASG will use to call other AWS services
func (o GroupOutput) ServiceLinkedRoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.ServiceLinkedRoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.
// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.
func (o GroupOutput) SuspendedProcesses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.SuspendedProcesses })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Configuration block(s) containing resource tags. See Tag below for more details.
func (o GroupOutput) Tags() pulumix.GArrayOutput[GroupTag, GroupTagOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GArrayOutput[GroupTag, GroupTagOutput] { return v.Tags })
	unwrapped := pulumix.Flatten[[]GroupTag, pulumix.GArrayOutput[GroupTag, GroupTagOutput]](value)
	return pulumix.GArrayOutput[GroupTag, GroupTagOutput]{OutputState: unwrapped.OutputState}
}

// Set of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
func (o GroupOutput) TargetGroupArns() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.TargetGroupArns })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
func (o GroupOutput) TerminationPolicies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.TerminationPolicies })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Attaches one or more traffic sources to the specified Auto Scaling group.
func (o GroupOutput) TrafficSources() pulumix.GArrayOutput[GroupTrafficSource, GroupTrafficSourceOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GArrayOutput[GroupTrafficSource, GroupTrafficSourceOutput] {
		return v.TrafficSources
	})
	unwrapped := pulumix.Flatten[[]GroupTrafficSource, pulumix.GArrayOutput[GroupTrafficSource, GroupTrafficSourceOutput]](value)
	return pulumix.GArrayOutput[GroupTrafficSource, GroupTrafficSourceOutput]{OutputState: unwrapped.OutputState}
}

// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availabilityZones`.
func (o GroupOutput) VpcZoneIdentifiers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.VpcZoneIdentifiers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Maximum
// [duration](https://golang.org/pkg/time/#ParseDuration) that the provider should
// wait for ASG instances to be healthy before timing out. (See also Waiting
// for Capacity below.) Setting this to "0" causes
// the provider to skip all Capacity Waiting behavior.
func (o GroupOutput) WaitForCapacityTimeout() pulumix.Output[*string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*string] { return v.WaitForCapacityTimeout })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Setting this will cause Pulumi to wait
// for exactly this number of healthy instances from this Auto Scaling Group in
// all attached load balancers on both create and update operations. (Takes
// precedence over `minElbCapacity` behavior.)
// (See also Waiting for Capacity below.)
func (o GroupOutput) WaitForElbCapacity() pulumix.Output[*int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[*int] { return v.WaitForElbCapacity })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)
// to the specified Auto Scaling group. Defined below
func (o GroupOutput) WarmPool() pulumix.GPtrOutput[GroupWarmPool, GroupWarmPoolOutput] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.GPtrOutput[GroupWarmPool, GroupWarmPoolOutput] { return v.WarmPool })
	unwrapped := pulumix.Flatten[*GroupWarmPool, pulumix.GPtrOutput[GroupWarmPool, GroupWarmPoolOutput]](value)
	return pulumix.GPtrOutput[GroupWarmPool, GroupWarmPoolOutput]{OutputState: unwrapped.OutputState}
}

// Current size of the warm pool.
func (o GroupOutput) WarmPoolSize() pulumix.Output[int] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[int] { return v.WarmPoolSize })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupOutput{})
}
