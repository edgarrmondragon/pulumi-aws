// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Glue Job resource.
//
// > Glue functionality, such as monitoring and logging of jobs, is typically managed with the `defaultArguments` argument. See the [Special Parameters Used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) topic in the Glue developer guide for additional information.
type Job struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN) of Glue Job
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The command of the job. Defined below.
	Command pulumix.GPtrOutput[JobCommand, JobCommandOutput] `pulumi:"command"`
	// The list of connections used for this job.
	Connections pulumix.ArrayOutput[string] `pulumi:"connections"`
	// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
	DefaultArguments pulumix.MapOutput[string] `pulumi:"defaultArguments"`
	// Description of the job.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
	ExecutionClass pulumix.Output[*string] `pulumi:"executionClass"`
	// Execution property of the job. Defined below.
	ExecutionProperty pulumix.GPtrOutput[JobExecutionProperty, JobExecutionPropertyOutput] `pulumi:"executionProperty"`
	// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
	GlueVersion pulumix.Output[string] `pulumi:"glueVersion"`
	// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `numberOfWorkers` and `workerType` arguments instead with `glueVersion` `2.0` and above.
	MaxCapacity pulumix.Output[float64] `pulumi:"maxCapacity"`
	// The maximum number of times to retry this job if it fails.
	MaxRetries pulumix.Output[*int] `pulumi:"maxRetries"`
	// The name you assign to this job. It must be unique in your account.
	Name pulumix.Output[string] `pulumi:"name"`
	// Non-overridable arguments for this job, specified as name-value pairs.
	NonOverridableArguments pulumix.MapOutput[string] `pulumi:"nonOverridableArguments"`
	// Notification property of the job. Defined below.
	NotificationProperty pulumix.GPtrOutput[JobNotificationProperty, JobNotificationPropertyOutput] `pulumi:"notificationProperty"`
	// The number of workers of a defined workerType that are allocated when a job runs.
	NumberOfWorkers pulumix.Output[*int] `pulumi:"numberOfWorkers"`
	// The ARN of the IAM role associated with this job.
	RoleArn pulumix.Output[string] `pulumi:"roleArn"`
	// The name of the Security Configuration to be associated with the job.
	SecurityConfiguration pulumix.Output[*string] `pulumi:"securityConfiguration"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
	Timeout pulumix.Output[int] `pulumi:"timeout"`
	// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
	// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
	// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
	// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
	WorkerType pulumix.Output[*string] `pulumi:"workerType"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Command == nil {
		return nil, errors.New("invalid value for required argument 'Command'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("aws:glue/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("aws:glue/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Amazon Resource Name (ARN) of Glue Job
	Arn *string `pulumi:"arn"`
	// The command of the job. Defined below.
	Command *JobCommand `pulumi:"command"`
	// The list of connections used for this job.
	Connections []string `pulumi:"connections"`
	// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
	DefaultArguments map[string]string `pulumi:"defaultArguments"`
	// Description of the job.
	Description *string `pulumi:"description"`
	// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
	ExecutionClass *string `pulumi:"executionClass"`
	// Execution property of the job. Defined below.
	ExecutionProperty *JobExecutionProperty `pulumi:"executionProperty"`
	// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
	GlueVersion *string `pulumi:"glueVersion"`
	// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `numberOfWorkers` and `workerType` arguments instead with `glueVersion` `2.0` and above.
	MaxCapacity *float64 `pulumi:"maxCapacity"`
	// The maximum number of times to retry this job if it fails.
	MaxRetries *int `pulumi:"maxRetries"`
	// The name you assign to this job. It must be unique in your account.
	Name *string `pulumi:"name"`
	// Non-overridable arguments for this job, specified as name-value pairs.
	NonOverridableArguments map[string]string `pulumi:"nonOverridableArguments"`
	// Notification property of the job. Defined below.
	NotificationProperty *JobNotificationProperty `pulumi:"notificationProperty"`
	// The number of workers of a defined workerType that are allocated when a job runs.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// The ARN of the IAM role associated with this job.
	RoleArn *string `pulumi:"roleArn"`
	// The name of the Security Configuration to be associated with the job.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
	Timeout *int `pulumi:"timeout"`
	// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
	// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
	// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
	// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
	WorkerType *string `pulumi:"workerType"`
}

type JobState struct {
	// Amazon Resource Name (ARN) of Glue Job
	Arn pulumix.Input[*string]
	// The command of the job. Defined below.
	Command pulumix.Input[*JobCommandArgs]
	// The list of connections used for this job.
	Connections pulumix.Input[[]string]
	// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
	DefaultArguments pulumix.Input[map[string]string]
	// Description of the job.
	Description pulumix.Input[*string]
	// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
	ExecutionClass pulumix.Input[*string]
	// Execution property of the job. Defined below.
	ExecutionProperty pulumix.Input[*JobExecutionPropertyArgs]
	// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
	GlueVersion pulumix.Input[*string]
	// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `numberOfWorkers` and `workerType` arguments instead with `glueVersion` `2.0` and above.
	MaxCapacity pulumix.Input[*float64]
	// The maximum number of times to retry this job if it fails.
	MaxRetries pulumix.Input[*int]
	// The name you assign to this job. It must be unique in your account.
	Name pulumix.Input[*string]
	// Non-overridable arguments for this job, specified as name-value pairs.
	NonOverridableArguments pulumix.Input[map[string]string]
	// Notification property of the job. Defined below.
	NotificationProperty pulumix.Input[*JobNotificationPropertyArgs]
	// The number of workers of a defined workerType that are allocated when a job runs.
	NumberOfWorkers pulumix.Input[*int]
	// The ARN of the IAM role associated with this job.
	RoleArn pulumix.Input[*string]
	// The name of the Security Configuration to be associated with the job.
	SecurityConfiguration pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
	Timeout pulumix.Input[*int]
	// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
	// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
	// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
	// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
	WorkerType pulumix.Input[*string]
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// The command of the job. Defined below.
	Command JobCommand `pulumi:"command"`
	// The list of connections used for this job.
	Connections []string `pulumi:"connections"`
	// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
	DefaultArguments map[string]string `pulumi:"defaultArguments"`
	// Description of the job.
	Description *string `pulumi:"description"`
	// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
	ExecutionClass *string `pulumi:"executionClass"`
	// Execution property of the job. Defined below.
	ExecutionProperty *JobExecutionProperty `pulumi:"executionProperty"`
	// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
	GlueVersion *string `pulumi:"glueVersion"`
	// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `numberOfWorkers` and `workerType` arguments instead with `glueVersion` `2.0` and above.
	MaxCapacity *float64 `pulumi:"maxCapacity"`
	// The maximum number of times to retry this job if it fails.
	MaxRetries *int `pulumi:"maxRetries"`
	// The name you assign to this job. It must be unique in your account.
	Name *string `pulumi:"name"`
	// Non-overridable arguments for this job, specified as name-value pairs.
	NonOverridableArguments map[string]string `pulumi:"nonOverridableArguments"`
	// Notification property of the job. Defined below.
	NotificationProperty *JobNotificationProperty `pulumi:"notificationProperty"`
	// The number of workers of a defined workerType that are allocated when a job runs.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// The ARN of the IAM role associated with this job.
	RoleArn string `pulumi:"roleArn"`
	// The name of the Security Configuration to be associated with the job.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
	Timeout *int `pulumi:"timeout"`
	// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
	// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
	// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
	// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
	WorkerType *string `pulumi:"workerType"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// The command of the job. Defined below.
	Command pulumix.Input[*JobCommandArgs]
	// The list of connections used for this job.
	Connections pulumix.Input[[]string]
	// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
	DefaultArguments pulumix.Input[map[string]string]
	// Description of the job.
	Description pulumix.Input[*string]
	// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
	ExecutionClass pulumix.Input[*string]
	// Execution property of the job. Defined below.
	ExecutionProperty pulumix.Input[*JobExecutionPropertyArgs]
	// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
	GlueVersion pulumix.Input[*string]
	// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `numberOfWorkers` and `workerType` arguments instead with `glueVersion` `2.0` and above.
	MaxCapacity pulumix.Input[*float64]
	// The maximum number of times to retry this job if it fails.
	MaxRetries pulumix.Input[*int]
	// The name you assign to this job. It must be unique in your account.
	Name pulumix.Input[*string]
	// Non-overridable arguments for this job, specified as name-value pairs.
	NonOverridableArguments pulumix.Input[map[string]string]
	// Notification property of the job. Defined below.
	NotificationProperty pulumix.Input[*JobNotificationPropertyArgs]
	// The number of workers of a defined workerType that are allocated when a job runs.
	NumberOfWorkers pulumix.Input[*int]
	// The ARN of the IAM role associated with this job.
	RoleArn pulumix.Input[string]
	// The name of the Security Configuration to be associated with the job.
	SecurityConfiguration pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
	Timeout pulumix.Input[*int]
	// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
	// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
	// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
	// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
	// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
	WorkerType pulumix.Input[*string]
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

func (o JobOutput) ToOutput(ctx context.Context) pulumix.Output[Job] {
	return pulumix.Output[Job]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN) of Glue Job
func (o JobOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The command of the job. Defined below.
func (o JobOutput) Command() pulumix.GPtrOutput[JobCommand, JobCommandOutput] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.GPtrOutput[JobCommand, JobCommandOutput] { return v.Command })
	unwrapped := pulumix.Flatten[*JobCommand, pulumix.GPtrOutput[JobCommand, JobCommandOutput]](value)
	return pulumix.GPtrOutput[JobCommand, JobCommandOutput]{OutputState: unwrapped.OutputState}
}

// The list of connections used for this job.
func (o JobOutput) Connections() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.ArrayOutput[string] { return v.Connections })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The map of default arguments for this job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes. For information about how to specify and consume your own Job arguments, see the [Calling AWS Glue APIs in Python](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) topic in the developer guide. For information about the key-value pairs that AWS Glue consumes to set up your job, see the [Special Parameters Used by AWS Glue](http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html) topic in the developer guide.
func (o JobOutput) DefaultArguments() pulumix.MapOutput[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.MapOutput[string] { return v.DefaultArguments })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Description of the job.
func (o JobOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources. Valid value: `FLEX`, `STANDARD`.
func (o JobOutput) ExecutionClass() pulumix.Output[*string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[*string] { return v.ExecutionClass })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Execution property of the job. Defined below.
func (o JobOutput) ExecutionProperty() pulumix.GPtrOutput[JobExecutionProperty, JobExecutionPropertyOutput] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.GPtrOutput[JobExecutionProperty, JobExecutionPropertyOutput] {
		return v.ExecutionProperty
	})
	unwrapped := pulumix.Flatten[*JobExecutionProperty, pulumix.GPtrOutput[JobExecutionProperty, JobExecutionPropertyOutput]](value)
	return pulumix.GPtrOutput[JobExecutionProperty, JobExecutionPropertyOutput]{OutputState: unwrapped.OutputState}
}

// The version of glue to use, for example "1.0". Ray jobs should set this to 4.0 or greater. For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
func (o JobOutput) GlueVersion() pulumix.Output[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[string] { return v.GlueVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. `Required` when `pythonshell` is set, accept either `0.0625` or `1.0`. Use `numberOfWorkers` and `workerType` arguments instead with `glueVersion` `2.0` and above.
func (o JobOutput) MaxCapacity() pulumix.Output[float64] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[float64] { return v.MaxCapacity })
	return pulumix.Flatten[float64, pulumix.Output[float64]](value)
}

// The maximum number of times to retry this job if it fails.
func (o JobOutput) MaxRetries() pulumix.Output[*int] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[*int] { return v.MaxRetries })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The name you assign to this job. It must be unique in your account.
func (o JobOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Non-overridable arguments for this job, specified as name-value pairs.
func (o JobOutput) NonOverridableArguments() pulumix.MapOutput[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.MapOutput[string] { return v.NonOverridableArguments })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Notification property of the job. Defined below.
func (o JobOutput) NotificationProperty() pulumix.GPtrOutput[JobNotificationProperty, JobNotificationPropertyOutput] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.GPtrOutput[JobNotificationProperty, JobNotificationPropertyOutput] {
		return v.NotificationProperty
	})
	unwrapped := pulumix.Flatten[*JobNotificationProperty, pulumix.GPtrOutput[JobNotificationProperty, JobNotificationPropertyOutput]](value)
	return pulumix.GPtrOutput[JobNotificationProperty, JobNotificationPropertyOutput]{OutputState: unwrapped.OutputState}
}

// The number of workers of a defined workerType that are allocated when a job runs.
func (o JobOutput) NumberOfWorkers() pulumix.Output[*int] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[*int] { return v.NumberOfWorkers })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ARN of the IAM role associated with this job.
func (o JobOutput) RoleArn() pulumix.Output[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[string] { return v.RoleArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Security Configuration to be associated with the job.
func (o JobOutput) SecurityConfiguration() pulumix.Output[*string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[*string] { return v.SecurityConfiguration })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o JobOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o JobOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The job timeout in minutes. The default is 2880 minutes (48 hours) for `glueetl` and `pythonshell` jobs, and null (unlimited) for `gluestreaming` jobs.
func (o JobOutput) Timeout() pulumix.Output[int] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[int] { return v.Timeout })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
// * For the G.2X worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Recommended for memory-intensive jobs.
// * For the G.025X worker type, each worker maps to 0.25 DPU (2 vCPU, 4GB of memory, 64 GB disk), and provides 1 executor per worker. Recommended for low volume streaming jobs. Only available for Glue version 3.0.
// * For the Z.2X worker type, each worker maps to 2 M-DPU (8vCPU, 64 GB of m emory, 128 GB disk), and provides up to 8 Ray workers based on the autoscaler.
func (o JobOutput) WorkerType() pulumix.Output[*string] {
	value := pulumix.Apply[Job](o, func(v Job) pulumix.Output[*string] { return v.WorkerType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(JobOutput{})
}
