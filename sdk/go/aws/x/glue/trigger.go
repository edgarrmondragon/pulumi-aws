// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Glue Trigger resource.
type Trigger struct {
	pulumi.CustomResourceState

	// List of actions initiated by this trigger when it fires. See Actions Below.
	Actions pulumix.GArrayOutput[TriggerAction, TriggerActionOutput] `pulumi:"actions"`
	// Amazon Resource Name (ARN) of Glue Trigger
	Arn pulumix.Output[string] `pulumi:"arn"`
	// A description of the new trigger.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Start the trigger. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	EventBatchingConditions pulumix.GArrayOutput[TriggerEventBatchingCondition, TriggerEventBatchingConditionOutput] `pulumi:"eventBatchingConditions"`
	// The name of the trigger.
	Name pulumix.Output[string] `pulumi:"name"`
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
	Predicate pulumix.GPtrOutput[TriggerPredicate, TriggerPredicateOutput] `pulumi:"predicate"`
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule pulumix.Output[*string] `pulumi:"schedule"`
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation pulumix.Output[*bool] `pulumi:"startOnCreation"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State pulumix.Output[string] `pulumi:"state"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
	Type pulumix.Output[string] `pulumi:"type"`
	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
	WorkflowName pulumix.Output[*string] `pulumi:"workflowName"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trigger
	err := ctx.RegisterResource("aws:glue/trigger:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("aws:glue/trigger:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
	// List of actions initiated by this trigger when it fires. See Actions Below.
	Actions []TriggerAction `pulumi:"actions"`
	// Amazon Resource Name (ARN) of Glue Trigger
	Arn *string `pulumi:"arn"`
	// A description of the new trigger.
	Description *string `pulumi:"description"`
	// Start the trigger. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	EventBatchingConditions []TriggerEventBatchingCondition `pulumi:"eventBatchingConditions"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
	Predicate *TriggerPredicate `pulumi:"predicate"`
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule *string `pulumi:"schedule"`
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation *bool `pulumi:"startOnCreation"`
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State *string `pulumi:"state"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
	Type *string `pulumi:"type"`
	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
	WorkflowName *string `pulumi:"workflowName"`
}

type TriggerState struct {
	// List of actions initiated by this trigger when it fires. See Actions Below.
	Actions pulumix.Input[[]*TriggerActionArgs]
	// Amazon Resource Name (ARN) of Glue Trigger
	Arn pulumix.Input[*string]
	// A description of the new trigger.
	Description pulumix.Input[*string]
	// Start the trigger. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	EventBatchingConditions pulumix.Input[[]*TriggerEventBatchingConditionArgs]
	// The name of the trigger.
	Name pulumix.Input[*string]
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
	Predicate pulumix.Input[*TriggerPredicateArgs]
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule pulumix.Input[*string]
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation pulumix.Input[*bool]
	// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
	State pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
	Type pulumix.Input[*string]
	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
	WorkflowName pulumix.Input[*string]
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// List of actions initiated by this trigger when it fires. See Actions Below.
	Actions []TriggerAction `pulumi:"actions"`
	// A description of the new trigger.
	Description *string `pulumi:"description"`
	// Start the trigger. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	EventBatchingConditions []TriggerEventBatchingCondition `pulumi:"eventBatchingConditions"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
	Predicate *TriggerPredicate `pulumi:"predicate"`
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule *string `pulumi:"schedule"`
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation *bool `pulumi:"startOnCreation"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
	Type string `pulumi:"type"`
	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
	WorkflowName *string `pulumi:"workflowName"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// List of actions initiated by this trigger when it fires. See Actions Below.
	Actions pulumix.Input[[]*TriggerActionArgs]
	// A description of the new trigger.
	Description pulumix.Input[*string]
	// Start the trigger. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
	EventBatchingConditions pulumix.Input[[]*TriggerEventBatchingConditionArgs]
	// The name of the trigger.
	Name pulumix.Input[*string]
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
	Predicate pulumix.Input[*TriggerPredicateArgs]
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule pulumix.Input[*string]
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation pulumix.Input[*bool]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
	Type pulumix.Input[string]
	// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
	WorkflowName pulumix.Input[*string]
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

func (o TriggerOutput) ToOutput(ctx context.Context) pulumix.Output[Trigger] {
	return pulumix.Output[Trigger]{
		OutputState: o.OutputState,
	}
}

// List of actions initiated by this trigger when it fires. See Actions Below.
func (o TriggerOutput) Actions() pulumix.GArrayOutput[TriggerAction, TriggerActionOutput] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.GArrayOutput[TriggerAction, TriggerActionOutput] { return v.Actions })
	unwrapped := pulumix.Flatten[[]TriggerAction, pulumix.GArrayOutput[TriggerAction, TriggerActionOutput]](value)
	return pulumix.GArrayOutput[TriggerAction, TriggerActionOutput]{OutputState: unwrapped.OutputState}
}

// Amazon Resource Name (ARN) of Glue Trigger
func (o TriggerOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the new trigger.
func (o TriggerOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Start the trigger. Defaults to `true`.
func (o TriggerOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
func (o TriggerOutput) EventBatchingConditions() pulumix.GArrayOutput[TriggerEventBatchingCondition, TriggerEventBatchingConditionOutput] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.GArrayOutput[TriggerEventBatchingCondition, TriggerEventBatchingConditionOutput] {
		return v.EventBatchingConditions
	})
	unwrapped := pulumix.Flatten[[]TriggerEventBatchingCondition, pulumix.GArrayOutput[TriggerEventBatchingCondition, TriggerEventBatchingConditionOutput]](value)
	return pulumix.GArrayOutput[TriggerEventBatchingCondition, TriggerEventBatchingConditionOutput]{OutputState: unwrapped.OutputState}
}

// The name of the trigger.
func (o TriggerOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
func (o TriggerOutput) Predicate() pulumix.GPtrOutput[TriggerPredicate, TriggerPredicateOutput] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.GPtrOutput[TriggerPredicate, TriggerPredicateOutput] { return v.Predicate })
	unwrapped := pulumix.Flatten[*TriggerPredicate, pulumix.GPtrOutput[TriggerPredicate, TriggerPredicateOutput]](value)
	return pulumix.GPtrOutput[TriggerPredicate, TriggerPredicateOutput]{OutputState: unwrapped.OutputState}
}

// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
func (o TriggerOutput) Schedule() pulumix.Output[*string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[*string] { return v.Schedule })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
func (o TriggerOutput) StartOnCreation() pulumix.Output[*bool] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[*bool] { return v.StartOnCreation })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
func (o TriggerOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o TriggerOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o TriggerOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
func (o TriggerOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
func (o TriggerOutput) WorkflowName() pulumix.Output[*string] {
	value := pulumix.Apply[Trigger](o, func(v Trigger) pulumix.Output[*string] { return v.WorkflowName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(TriggerOutput{})
}
