// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a DynamoDB table.
func LookupTable(ctx *pulumi.Context, args *LookupTableArgs, opts ...pulumi.InvokeOption) (*LookupTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTableResult
	err := ctx.Invoke("aws:dynamodb/getTable:getTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTable.
type LookupTableArgs struct {
	// Name of the DynamoDB table.
	Name                 string                        `pulumi:"name"`
	ServerSideEncryption *GetTableServerSideEncryption `pulumi:"serverSideEncryption"`
	Tags                 map[string]string             `pulumi:"tags"`
}

// A collection of values returned by getTable.
type LookupTableResult struct {
	Arn                       string                         `pulumi:"arn"`
	Attributes                []GetTableAttribute            `pulumi:"attributes"`
	BillingMode               string                         `pulumi:"billingMode"`
	DeletionProtectionEnabled bool                           `pulumi:"deletionProtectionEnabled"`
	GlobalSecondaryIndexes    []GetTableGlobalSecondaryIndex `pulumi:"globalSecondaryIndexes"`
	HashKey                   string                         `pulumi:"hashKey"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                        `pulumi:"id"`
	LocalSecondaryIndexes []GetTableLocalSecondaryIndex `pulumi:"localSecondaryIndexes"`
	Name                  string                        `pulumi:"name"`
	PointInTimeRecovery   GetTablePointInTimeRecovery   `pulumi:"pointInTimeRecovery"`
	RangeKey              string                        `pulumi:"rangeKey"`
	ReadCapacity          int                           `pulumi:"readCapacity"`
	Replicas              []GetTableReplicaType         `pulumi:"replicas"`
	ServerSideEncryption  GetTableServerSideEncryption  `pulumi:"serverSideEncryption"`
	StreamArn             string                        `pulumi:"streamArn"`
	StreamEnabled         bool                          `pulumi:"streamEnabled"`
	StreamLabel           string                        `pulumi:"streamLabel"`
	StreamViewType        string                        `pulumi:"streamViewType"`
	TableClass            string                        `pulumi:"tableClass"`
	Tags                  map[string]string             `pulumi:"tags"`
	Ttl                   GetTableTtl                   `pulumi:"ttl"`
	WriteCapacity         int                           `pulumi:"writeCapacity"`
}

func LookupTableOutput(ctx *pulumi.Context, args LookupTableOutputArgs, opts ...pulumi.InvokeOption) LookupTableResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTableArgs](args.ToOutput(), func(plainArgs *LookupTableArgs) (*LookupTableResult, error) {
		return LookupTable(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTableResultOutput, *LookupTableResult](outputResult)
}

// A collection of arguments for invoking getTable.
type LookupTableOutputArgs struct {
	// Name of the DynamoDB table.
	Name                 pulumix.Input[string]                            `pulumi:"name"`
	ServerSideEncryption pulumix.Input[*GetTableServerSideEncryptionArgs] `pulumi:"serverSideEncryption"`
	Tags                 pulumix.Input[map[string]string]                 `pulumi:"tags"`
}

func (args LookupTableOutputArgs) ToOutput() pulumix.Output[*LookupTableArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.ServerSideEncryption.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTableArgs {
		return &LookupTableArgs{
			Name:                 resolvedArgs[0].(string),
			ServerSideEncryption: resolvedArgs[1].(*GetTableServerSideEncryption),
			Tags:                 resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupTableResultOutput struct{ *pulumi.OutputState }

func (LookupTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableResult)(nil)).Elem()
}

func (o LookupTableResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTableResult] {
	return pulumix.Output[*LookupTableResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTableResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.Arn })
}

func (o LookupTableResultOutput) Attributes() pulumix.GArrayOutput[GetTableAttribute, GetTableAttributeOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) []GetTableAttribute { return v.Attributes })
	return pulumix.GArrayOutput[GetTableAttribute, GetTableAttributeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) BillingMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.BillingMode })
}

func (o LookupTableResultOutput) DeletionProtectionEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) bool { return v.DeletionProtectionEnabled })
}

func (o LookupTableResultOutput) GlobalSecondaryIndexes() pulumix.GArrayOutput[GetTableGlobalSecondaryIndex, GetTableGlobalSecondaryIndexOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) []GetTableGlobalSecondaryIndex { return v.GlobalSecondaryIndexes })
	return pulumix.GArrayOutput[GetTableGlobalSecondaryIndex, GetTableGlobalSecondaryIndexOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) HashKey() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.HashKey })
}

func (o LookupTableResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.Id })
}

func (o LookupTableResultOutput) LocalSecondaryIndexes() pulumix.GArrayOutput[GetTableLocalSecondaryIndex, GetTableLocalSecondaryIndexOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) []GetTableLocalSecondaryIndex { return v.LocalSecondaryIndexes })
	return pulumix.GArrayOutput[GetTableLocalSecondaryIndex, GetTableLocalSecondaryIndexOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.Name })
}

func (o LookupTableResultOutput) PointInTimeRecovery() pulumix.GPtrOutput[GetTablePointInTimeRecovery, GetTablePointInTimeRecoveryOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) GetTablePointInTimeRecovery { return v.PointInTimeRecovery })
	return pulumix.GPtrOutput[GetTablePointInTimeRecovery, GetTablePointInTimeRecoveryOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) RangeKey() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.RangeKey })
}

func (o LookupTableResultOutput) ReadCapacity() pulumix.Output[int] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) int { return v.ReadCapacity })
}

func (o LookupTableResultOutput) Replicas() pulumix.GArrayOutput[GetTableReplicaType, GetTableReplicaTypeOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) []GetTableReplicaType { return v.Replicas })
	return pulumix.GArrayOutput[GetTableReplicaType, GetTableReplicaTypeOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) ServerSideEncryption() pulumix.GPtrOutput[GetTableServerSideEncryption, GetTableServerSideEncryptionOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) GetTableServerSideEncryption { return v.ServerSideEncryption })
	return pulumix.GPtrOutput[GetTableServerSideEncryption, GetTableServerSideEncryptionOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) StreamArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.StreamArn })
}

func (o LookupTableResultOutput) StreamEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) bool { return v.StreamEnabled })
}

func (o LookupTableResultOutput) StreamLabel() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.StreamLabel })
}

func (o LookupTableResultOutput) StreamViewType() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.StreamViewType })
}

func (o LookupTableResultOutput) TableClass() pulumix.Output[string] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) string { return v.TableClass })
}

func (o LookupTableResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) Ttl() pulumix.GPtrOutput[GetTableTtl, GetTableTtlOutput] {
	value := pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) GetTableTtl { return v.Ttl })
	return pulumix.GPtrOutput[GetTableTtl, GetTableTtlOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTableResultOutput) WriteCapacity() pulumix.Output[int] {
	return pulumix.Apply[*LookupTableResult](o, func(v *LookupTableResult) int { return v.WriteCapacity })
}
