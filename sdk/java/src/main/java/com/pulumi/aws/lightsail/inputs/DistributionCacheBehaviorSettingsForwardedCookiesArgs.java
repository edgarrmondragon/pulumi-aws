// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lightsail.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DistributionCacheBehaviorSettingsForwardedCookiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributionCacheBehaviorSettingsForwardedCookiesArgs Empty = new DistributionCacheBehaviorSettingsForwardedCookiesArgs();

    /**
     * The specific cookies to forward to your distribution&#39;s origin.
     * 
     */
    @Import(name="cookiesAllowLists")
    private @Nullable Output<List<String>> cookiesAllowLists;

    /**
     * @return The specific cookies to forward to your distribution&#39;s origin.
     * 
     */
    public Optional<Output<List<String>>> cookiesAllowLists() {
        return Optional.ofNullable(this.cookiesAllowLists);
    }

    /**
     * Specifies which cookies to forward to the distribution&#39;s origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
     * 
     */
    @Import(name="option")
    private @Nullable Output<String> option;

    /**
     * @return Specifies which cookies to forward to the distribution&#39;s origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
     * 
     */
    public Optional<Output<String>> option() {
        return Optional.ofNullable(this.option);
    }

    private DistributionCacheBehaviorSettingsForwardedCookiesArgs() {}

    private DistributionCacheBehaviorSettingsForwardedCookiesArgs(DistributionCacheBehaviorSettingsForwardedCookiesArgs $) {
        this.cookiesAllowLists = $.cookiesAllowLists;
        this.option = $.option;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributionCacheBehaviorSettingsForwardedCookiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributionCacheBehaviorSettingsForwardedCookiesArgs $;

        public Builder() {
            $ = new DistributionCacheBehaviorSettingsForwardedCookiesArgs();
        }

        public Builder(DistributionCacheBehaviorSettingsForwardedCookiesArgs defaults) {
            $ = new DistributionCacheBehaviorSettingsForwardedCookiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cookiesAllowLists The specific cookies to forward to your distribution&#39;s origin.
         * 
         * @return builder
         * 
         */
        public Builder cookiesAllowLists(@Nullable Output<List<String>> cookiesAllowLists) {
            $.cookiesAllowLists = cookiesAllowLists;
            return this;
        }

        /**
         * @param cookiesAllowLists The specific cookies to forward to your distribution&#39;s origin.
         * 
         * @return builder
         * 
         */
        public Builder cookiesAllowLists(List<String> cookiesAllowLists) {
            return cookiesAllowLists(Output.of(cookiesAllowLists));
        }

        /**
         * @param cookiesAllowLists The specific cookies to forward to your distribution&#39;s origin.
         * 
         * @return builder
         * 
         */
        public Builder cookiesAllowLists(String... cookiesAllowLists) {
            return cookiesAllowLists(List.of(cookiesAllowLists));
        }

        /**
         * @param option Specifies which cookies to forward to the distribution&#39;s origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
         * 
         * @return builder
         * 
         */
        public Builder option(@Nullable Output<String> option) {
            $.option = option;
            return this;
        }

        /**
         * @param option Specifies which cookies to forward to the distribution&#39;s origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
         * 
         * @return builder
         * 
         */
        public Builder option(String option) {
            return option(Output.of(option));
        }

        public DistributionCacheBehaviorSettingsForwardedCookiesArgs build() {
            return $;
        }
    }

}
