// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a "classic" Elastic Load Balancer (ELB).
// See LB Data Source if you are looking for "v2"
// Application Load Balancer (ALB) or Network Load Balancer (NLB).
//
// This data source can prove useful when a module accepts an LB as an input
// variable and needs to, for example, determine the security groups associated
// with it, etc.
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("aws:elb/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// Unique name of the load balancer.
	Name string            `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	AccessLogs                GetLoadBalancerAccessLogs  `pulumi:"accessLogs"`
	Arn                       string                     `pulumi:"arn"`
	AvailabilityZones         []string                   `pulumi:"availabilityZones"`
	ConnectionDraining        bool                       `pulumi:"connectionDraining"`
	ConnectionDrainingTimeout int                        `pulumi:"connectionDrainingTimeout"`
	CrossZoneLoadBalancing    bool                       `pulumi:"crossZoneLoadBalancing"`
	DesyncMitigationMode      string                     `pulumi:"desyncMitigationMode"`
	DnsName                   string                     `pulumi:"dnsName"`
	HealthCheck               GetLoadBalancerHealthCheck `pulumi:"healthCheck"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                    `pulumi:"id"`
	IdleTimeout           int                       `pulumi:"idleTimeout"`
	Instances             []string                  `pulumi:"instances"`
	Internal              bool                      `pulumi:"internal"`
	Listeners             []GetLoadBalancerListener `pulumi:"listeners"`
	Name                  string                    `pulumi:"name"`
	SecurityGroups        []string                  `pulumi:"securityGroups"`
	SourceSecurityGroup   string                    `pulumi:"sourceSecurityGroup"`
	SourceSecurityGroupId string                    `pulumi:"sourceSecurityGroupId"`
	Subnets               []string                  `pulumi:"subnets"`
	Tags                  map[string]string         `pulumi:"tags"`
	ZoneId                string                    `pulumi:"zoneId"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLoadBalancerArgs](args.ToOutput(), func(plainArgs *LookupLoadBalancerArgs) (*LookupLoadBalancerResult, error) {
		return LookupLoadBalancer(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLoadBalancerResultOutput, *LookupLoadBalancerResult](outputResult)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// Unique name of the load balancer.
	Name pulumix.Input[string]            `pulumi:"name"`
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupLoadBalancerOutputArgs) ToOutput() pulumix.Output[*LookupLoadBalancerArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLoadBalancerArgs {
		return &LookupLoadBalancerArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLoadBalancerResult] {
	return pulumix.Output[*LookupLoadBalancerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) AccessLogs() pulumix.GPtrOutput[GetLoadBalancerAccessLogs, GetLoadBalancerAccessLogsOutput] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) GetLoadBalancerAccessLogs { return v.AccessLogs })
	return pulumix.GPtrOutput[GetLoadBalancerAccessLogs, GetLoadBalancerAccessLogsOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.Arn })
}

func (o LookupLoadBalancerResultOutput) AvailabilityZones() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []string { return v.AvailabilityZones })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) ConnectionDraining() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.ConnectionDraining })
}

func (o LookupLoadBalancerResultOutput) ConnectionDrainingTimeout() pulumix.Output[int] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) int { return v.ConnectionDrainingTimeout })
}

func (o LookupLoadBalancerResultOutput) CrossZoneLoadBalancing() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.CrossZoneLoadBalancing })
}

func (o LookupLoadBalancerResultOutput) DesyncMitigationMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.DesyncMitigationMode })
}

func (o LookupLoadBalancerResultOutput) DnsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.DnsName })
}

func (o LookupLoadBalancerResultOutput) HealthCheck() pulumix.GPtrOutput[GetLoadBalancerHealthCheck, GetLoadBalancerHealthCheckOutput] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) GetLoadBalancerHealthCheck { return v.HealthCheck })
	return pulumix.GPtrOutput[GetLoadBalancerHealthCheck, GetLoadBalancerHealthCheckOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.Id })
}

func (o LookupLoadBalancerResultOutput) IdleTimeout() pulumix.Output[int] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) int { return v.IdleTimeout })
}

func (o LookupLoadBalancerResultOutput) Instances() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []string { return v.Instances })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Internal() pulumix.Output[bool] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) bool { return v.Internal })
}

func (o LookupLoadBalancerResultOutput) Listeners() pulumix.GArrayOutput[GetLoadBalancerListener, GetLoadBalancerListenerOutput] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []GetLoadBalancerListener { return v.Listeners })
	return pulumix.GArrayOutput[GetLoadBalancerListener, GetLoadBalancerListenerOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.Name })
}

func (o LookupLoadBalancerResultOutput) SecurityGroups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []string { return v.SecurityGroups })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) SourceSecurityGroup() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.SourceSecurityGroup })
}

func (o LookupLoadBalancerResultOutput) SourceSecurityGroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.SourceSecurityGroupId })
}

func (o LookupLoadBalancerResultOutput) Subnets() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) []string { return v.Subnets })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupLoadBalancerResultOutput) ZoneId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLoadBalancerResult](o, func(v *LookupLoadBalancerResult) string { return v.ZoneId })
}
