// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sesv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS SESv2 (Simple Email V2) Dedicated IP Assignment.
//
// This resource is used with "Standard" dedicated IP addresses. This includes addresses [requested and relinquished manually](https://docs.aws.amazon.com/ses/latest/dg/dedicated-ip-case.html) via an AWS support case, or [Bring Your Own IP](https://docs.aws.amazon.com/ses/latest/dg/dedicated-ip-byo.html) addresses. Once no longer assigned, this resource returns the IP to the [`ses-default-dedicated-pool`](https://docs.aws.amazon.com/ses/latest/dg/managing-ip-pools.html), managed by AWS.
type DedicatedIpAssignment struct {
	pulumi.CustomResourceState

	// Dedicated IP address.
	DestinationPoolName pulumix.Output[string] `pulumi:"destinationPoolName"`
	// Dedicated IP address.
	Ip pulumix.Output[string] `pulumi:"ip"`
}

// NewDedicatedIpAssignment registers a new resource with the given unique name, arguments, and options.
func NewDedicatedIpAssignment(ctx *pulumi.Context,
	name string, args *DedicatedIpAssignmentArgs, opts ...pulumi.ResourceOption) (*DedicatedIpAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationPoolName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationPoolName'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DedicatedIpAssignment
	err := ctx.RegisterResource("aws:sesv2/dedicatedIpAssignment:DedicatedIpAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedIpAssignment gets an existing DedicatedIpAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedIpAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedIpAssignmentState, opts ...pulumi.ResourceOption) (*DedicatedIpAssignment, error) {
	var resource DedicatedIpAssignment
	err := ctx.ReadResource("aws:sesv2/dedicatedIpAssignment:DedicatedIpAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedIpAssignment resources.
type dedicatedIpAssignmentState struct {
	// Dedicated IP address.
	DestinationPoolName *string `pulumi:"destinationPoolName"`
	// Dedicated IP address.
	Ip *string `pulumi:"ip"`
}

type DedicatedIpAssignmentState struct {
	// Dedicated IP address.
	DestinationPoolName pulumix.Input[*string]
	// Dedicated IP address.
	Ip pulumix.Input[*string]
}

func (DedicatedIpAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedIpAssignmentState)(nil)).Elem()
}

type dedicatedIpAssignmentArgs struct {
	// Dedicated IP address.
	DestinationPoolName string `pulumi:"destinationPoolName"`
	// Dedicated IP address.
	Ip string `pulumi:"ip"`
}

// The set of arguments for constructing a DedicatedIpAssignment resource.
type DedicatedIpAssignmentArgs struct {
	// Dedicated IP address.
	DestinationPoolName pulumix.Input[string]
	// Dedicated IP address.
	Ip pulumix.Input[string]
}

func (DedicatedIpAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedIpAssignmentArgs)(nil)).Elem()
}

type DedicatedIpAssignmentOutput struct{ *pulumi.OutputState }

func (DedicatedIpAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedIpAssignment)(nil)).Elem()
}

func (o DedicatedIpAssignmentOutput) ToDedicatedIpAssignmentOutput() DedicatedIpAssignmentOutput {
	return o
}

func (o DedicatedIpAssignmentOutput) ToDedicatedIpAssignmentOutputWithContext(ctx context.Context) DedicatedIpAssignmentOutput {
	return o
}

func (o DedicatedIpAssignmentOutput) ToOutput(ctx context.Context) pulumix.Output[DedicatedIpAssignment] {
	return pulumix.Output[DedicatedIpAssignment]{
		OutputState: o.OutputState,
	}
}

// Dedicated IP address.
func (o DedicatedIpAssignmentOutput) DestinationPoolName() pulumix.Output[string] {
	value := pulumix.Apply[DedicatedIpAssignment](o, func(v DedicatedIpAssignment) pulumix.Output[string] { return v.DestinationPoolName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Dedicated IP address.
func (o DedicatedIpAssignmentOutput) Ip() pulumix.Output[string] {
	value := pulumix.Apply[DedicatedIpAssignment](o, func(v DedicatedIpAssignment) pulumix.Output[string] { return v.Ip })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(DedicatedIpAssignmentOutput{})
}
