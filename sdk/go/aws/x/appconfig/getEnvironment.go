// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides access to an AppConfig Environment.
func LookupEnvironment(ctx *pulumi.Context, args *LookupEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentResult
	err := ctx.Invoke("aws:appconfig/getEnvironment:getEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironment.
type LookupEnvironmentArgs struct {
	// ID of the AppConfig Application to which this Environment belongs.
	ApplicationId string `pulumi:"applicationId"`
	// ID of the AppConfig Environment.
	EnvironmentId string `pulumi:"environmentId"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getEnvironment.
type LookupEnvironmentResult struct {
	ApplicationId string `pulumi:"applicationId"`
	// ARN of the environment.
	Arn string `pulumi:"arn"`
	// Name of the environment.
	Description   string `pulumi:"description"`
	EnvironmentId string `pulumi:"environmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Set of Amazon CloudWatch alarms to monitor during the deployment process.
	Monitors []GetEnvironmentMonitor `pulumi:"monitors"`
	// Name of the environment.
	Name string `pulumi:"name"`
	// State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
	// or `ROLLED_BACK`.
	State string `pulumi:"state"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupEnvironmentOutput(ctx *pulumi.Context, args LookupEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentResultOutput {
	outputResult := pulumix.ApplyErr[*LookupEnvironmentArgs](args.ToOutput(), func(plainArgs *LookupEnvironmentArgs) (*LookupEnvironmentResult, error) {
		return LookupEnvironment(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupEnvironmentResultOutput, *LookupEnvironmentResult](outputResult)
}

// A collection of arguments for invoking getEnvironment.
type LookupEnvironmentOutputArgs struct {
	// ID of the AppConfig Application to which this Environment belongs.
	ApplicationId pulumix.Input[string] `pulumi:"applicationId"`
	// ID of the AppConfig Environment.
	EnvironmentId pulumix.Input[string] `pulumi:"environmentId"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupEnvironmentOutputArgs) ToOutput() pulumix.Output[*LookupEnvironmentArgs] {
	allArgs := pulumix.All(
		args.ApplicationId.ToOutput(context.Background()).AsAny(),
		args.EnvironmentId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupEnvironmentArgs {
		return &LookupEnvironmentArgs{
			ApplicationId: resolvedArgs[0].(string),
			EnvironmentId: resolvedArgs[1].(string),
			Tags:          resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentResult)(nil)).Elem()
}

func (o LookupEnvironmentResultOutput) ToOutput(context.Context) pulumix.Output[*LookupEnvironmentResult] {
	return pulumix.Output[*LookupEnvironmentResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupEnvironmentResultOutput) ApplicationId() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.ApplicationId })
}

func (o LookupEnvironmentResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.Arn })
}

func (o LookupEnvironmentResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.Description })
}

func (o LookupEnvironmentResultOutput) EnvironmentId() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.EnvironmentId })
}

func (o LookupEnvironmentResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.Id })
}

func (o LookupEnvironmentResultOutput) Monitors() pulumix.GArrayOutput[GetEnvironmentMonitor, GetEnvironmentMonitorOutput] {
	value := pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) []GetEnvironmentMonitor { return v.Monitors })
	return pulumix.GArrayOutput[GetEnvironmentMonitor, GetEnvironmentMonitorOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupEnvironmentResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.Name })
}

func (o LookupEnvironmentResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) string { return v.State })
}

func (o LookupEnvironmentResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupEnvironmentResult](o, func(v *LookupEnvironmentResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
