// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a WAF Rate Based Rule Resource
type RateBasedRule struct {
	pulumi.CustomResourceState

	// Amazon Resource Name (ARN)
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName pulumix.Output[string] `pulumi:"metricName"`
	// The name or description of the rule.
	Name pulumix.Output[string] `pulumi:"name"`
	// The objects to include in a rule (documented below).
	Predicates pulumix.GArrayOutput[RateBasedRulePredicate, RateBasedRulePredicateOutput] `pulumi:"predicates"`
	// Valid value is IP.
	RateKey pulumix.Output[string] `pulumi:"rateKey"`
	// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
	RateLimit pulumix.Output[int] `pulumi:"rateLimit"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewRateBasedRule registers a new resource with the given unique name, arguments, and options.
func NewRateBasedRule(ctx *pulumi.Context,
	name string, args *RateBasedRuleArgs, opts ...pulumi.ResourceOption) (*RateBasedRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.RateKey == nil {
		return nil, errors.New("invalid value for required argument 'RateKey'")
	}
	if args.RateLimit == nil {
		return nil, errors.New("invalid value for required argument 'RateLimit'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RateBasedRule
	err := ctx.RegisterResource("aws:waf/rateBasedRule:RateBasedRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRateBasedRule gets an existing RateBasedRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRateBasedRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RateBasedRuleState, opts ...pulumi.ResourceOption) (*RateBasedRule, error) {
	var resource RateBasedRule
	err := ctx.ReadResource("aws:waf/rateBasedRule:RateBasedRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RateBasedRule resources.
type rateBasedRuleState struct {
	// Amazon Resource Name (ARN)
	Arn *string `pulumi:"arn"`
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName *string `pulumi:"metricName"`
	// The name or description of the rule.
	Name *string `pulumi:"name"`
	// The objects to include in a rule (documented below).
	Predicates []RateBasedRulePredicate `pulumi:"predicates"`
	// Valid value is IP.
	RateKey *string `pulumi:"rateKey"`
	// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
	RateLimit *int `pulumi:"rateLimit"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type RateBasedRuleState struct {
	// Amazon Resource Name (ARN)
	Arn pulumix.Input[*string]
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName pulumix.Input[*string]
	// The name or description of the rule.
	Name pulumix.Input[*string]
	// The objects to include in a rule (documented below).
	Predicates pulumix.Input[[]*RateBasedRulePredicateArgs]
	// Valid value is IP.
	RateKey pulumix.Input[*string]
	// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
	RateLimit pulumix.Input[*int]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (RateBasedRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*rateBasedRuleState)(nil)).Elem()
}

type rateBasedRuleArgs struct {
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName string `pulumi:"metricName"`
	// The name or description of the rule.
	Name *string `pulumi:"name"`
	// The objects to include in a rule (documented below).
	Predicates []RateBasedRulePredicate `pulumi:"predicates"`
	// Valid value is IP.
	RateKey string `pulumi:"rateKey"`
	// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
	RateLimit int `pulumi:"rateLimit"`
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RateBasedRule resource.
type RateBasedRuleArgs struct {
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName pulumix.Input[string]
	// The name or description of the rule.
	Name pulumix.Input[*string]
	// The objects to include in a rule (documented below).
	Predicates pulumix.Input[[]*RateBasedRulePredicateArgs]
	// Valid value is IP.
	RateKey pulumix.Input[string]
	// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
	RateLimit pulumix.Input[int]
	// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (RateBasedRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rateBasedRuleArgs)(nil)).Elem()
}

type RateBasedRuleOutput struct{ *pulumi.OutputState }

func (RateBasedRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateBasedRule)(nil)).Elem()
}

func (o RateBasedRuleOutput) ToRateBasedRuleOutput() RateBasedRuleOutput {
	return o
}

func (o RateBasedRuleOutput) ToRateBasedRuleOutputWithContext(ctx context.Context) RateBasedRuleOutput {
	return o
}

func (o RateBasedRuleOutput) ToOutput(ctx context.Context) pulumix.Output[RateBasedRule] {
	return pulumix.Output[RateBasedRule]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name (ARN)
func (o RateBasedRuleOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name or description for the Amazon CloudWatch metric of this rule.
func (o RateBasedRuleOutput) MetricName() pulumix.Output[string] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.Output[string] { return v.MetricName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name or description of the rule.
func (o RateBasedRuleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The objects to include in a rule (documented below).
func (o RateBasedRuleOutput) Predicates() pulumix.GArrayOutput[RateBasedRulePredicate, RateBasedRulePredicateOutput] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.GArrayOutput[RateBasedRulePredicate, RateBasedRulePredicateOutput] {
		return v.Predicates
	})
	unwrapped := pulumix.Flatten[[]RateBasedRulePredicate, pulumix.GArrayOutput[RateBasedRulePredicate, RateBasedRulePredicateOutput]](value)
	return pulumix.GArrayOutput[RateBasedRulePredicate, RateBasedRulePredicateOutput]{OutputState: unwrapped.OutputState}
}

// Valid value is IP.
func (o RateBasedRuleOutput) RateKey() pulumix.Output[string] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.Output[string] { return v.RateKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. Minimum value is 100.
func (o RateBasedRuleOutput) RateLimit() pulumix.Output[int] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.Output[int] { return v.RateLimit })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o RateBasedRuleOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o RateBasedRuleOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[RateBasedRule](o, func(v RateBasedRule) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RateBasedRuleOutput{})
}
