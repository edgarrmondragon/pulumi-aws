// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `waf.RateBasedRule` Retrieves a WAF Rate Based Rule Resource Id.
func LookupRateBasedRule(ctx *pulumi.Context, args *LookupRateBasedRuleArgs, opts ...pulumi.InvokeOption) (*LookupRateBasedRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRateBasedRuleResult
	err := ctx.Invoke("aws:waf/getRateBasedRule:getRateBasedRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRateBasedRule.
type LookupRateBasedRuleArgs struct {
	// Name of the WAF rate based rule.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRateBasedRule.
type LookupRateBasedRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupRateBasedRuleOutput(ctx *pulumi.Context, args LookupRateBasedRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRateBasedRuleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupRateBasedRuleArgs](args.ToOutput(), func(plainArgs *LookupRateBasedRuleArgs) (*LookupRateBasedRuleResult, error) {
		return LookupRateBasedRule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupRateBasedRuleResultOutput, *LookupRateBasedRuleResult](outputResult)
}

// A collection of arguments for invoking getRateBasedRule.
type LookupRateBasedRuleOutputArgs struct {
	// Name of the WAF rate based rule.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupRateBasedRuleOutputArgs) ToOutput() pulumix.Output[*LookupRateBasedRuleArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupRateBasedRuleArgs {
		return &LookupRateBasedRuleArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupRateBasedRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRateBasedRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRateBasedRuleResult)(nil)).Elem()
}

func (o LookupRateBasedRuleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupRateBasedRuleResult] {
	return pulumix.Output[*LookupRateBasedRuleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRateBasedRuleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupRateBasedRuleResult](o, func(v *LookupRateBasedRuleResult) string { return v.Id })
}

func (o LookupRateBasedRuleResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupRateBasedRuleResult](o, func(v *LookupRateBasedRuleResult) string { return v.Name })
}
