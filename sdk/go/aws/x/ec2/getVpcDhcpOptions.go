// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve information about an EC2 DHCP Options configuration.
func LookupVpcDhcpOptions(ctx *pulumi.Context, args *LookupVpcDhcpOptionsArgs, opts ...pulumi.InvokeOption) (*LookupVpcDhcpOptionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcDhcpOptionsResult
	err := ctx.Invoke("aws:ec2/getVpcDhcpOptions:getVpcDhcpOptions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcDhcpOptions.
type LookupVpcDhcpOptionsArgs struct {
	// EC2 DHCP Options ID.
	DhcpOptionsId *string `pulumi:"dhcpOptionsId"`
	// List of custom filters as described below.
	Filters []GetVpcDhcpOptionsFilter `pulumi:"filters"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcDhcpOptions.
type LookupVpcDhcpOptionsResult struct {
	// ARN of the DHCP Options Set.
	Arn string `pulumi:"arn"`
	// EC2 DHCP Options ID
	DhcpOptionsId string `pulumi:"dhcpOptionsId"`
	// Suffix domain name to used when resolving non Fully Qualified Domain NamesE.g., the `search` value in the `/etc/resolv.conf` file.
	DomainName string `pulumi:"domainName"`
	// List of name servers.
	DomainNameServers []string                  `pulumi:"domainNameServers"`
	Filters           []GetVpcDhcpOptionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of NETBIOS name servers.
	NetbiosNameServers []string `pulumi:"netbiosNameServers"`
	// NetBIOS node type (1, 2, 4, or 8). For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
	NetbiosNodeType string `pulumi:"netbiosNodeType"`
	// List of NTP servers.
	NtpServers []string `pulumi:"ntpServers"`
	// ID of the AWS account that owns the DHCP options set.
	OwnerId string `pulumi:"ownerId"`
	// Map of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupVpcDhcpOptionsOutput(ctx *pulumi.Context, args LookupVpcDhcpOptionsOutputArgs, opts ...pulumi.InvokeOption) LookupVpcDhcpOptionsResultOutput {
	outputResult := pulumix.ApplyErr[*LookupVpcDhcpOptionsArgs](args.ToOutput(), func(plainArgs *LookupVpcDhcpOptionsArgs) (*LookupVpcDhcpOptionsResult, error) {
		return LookupVpcDhcpOptions(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupVpcDhcpOptionsResultOutput, *LookupVpcDhcpOptionsResult](outputResult)
}

// A collection of arguments for invoking getVpcDhcpOptions.
type LookupVpcDhcpOptionsOutputArgs struct {
	// EC2 DHCP Options ID.
	DhcpOptionsId pulumix.Input[*string] `pulumi:"dhcpOptionsId"`
	// List of custom filters as described below.
	Filters pulumix.Input[[]*GetVpcDhcpOptionsFilterArgs] `pulumi:"filters"`
	// Map of tags assigned to the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupVpcDhcpOptionsOutputArgs) ToOutput() pulumix.Output[*LookupVpcDhcpOptionsArgs] {
	allArgs := pulumix.All(
		args.DhcpOptionsId.ToOutput(context.Background()).AsAny(),
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupVpcDhcpOptionsArgs {
		return &LookupVpcDhcpOptionsArgs{
			DhcpOptionsId: resolvedArgs[0].(*string),
			Filters:       resolvedArgs[1].([]GetVpcDhcpOptionsFilter),
			Tags:          resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupVpcDhcpOptionsResultOutput struct{ *pulumi.OutputState }

func (LookupVpcDhcpOptionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcDhcpOptionsResult)(nil)).Elem()
}

func (o LookupVpcDhcpOptionsResultOutput) ToOutput(context.Context) pulumix.Output[*LookupVpcDhcpOptionsResult] {
	return pulumix.Output[*LookupVpcDhcpOptionsResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpcDhcpOptionsResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) string { return v.Arn })
}

func (o LookupVpcDhcpOptionsResultOutput) DhcpOptionsId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) string { return v.DhcpOptionsId })
}

func (o LookupVpcDhcpOptionsResultOutput) DomainName() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) string { return v.DomainName })
}

func (o LookupVpcDhcpOptionsResultOutput) DomainNameServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) []string { return v.DomainNameServers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcDhcpOptionsResultOutput) Filters() pulumix.GArrayOutput[GetVpcDhcpOptionsFilter, GetVpcDhcpOptionsFilterOutput] {
	value := pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) []GetVpcDhcpOptionsFilter { return v.Filters })
	return pulumix.GArrayOutput[GetVpcDhcpOptionsFilter, GetVpcDhcpOptionsFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcDhcpOptionsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) string { return v.Id })
}

func (o LookupVpcDhcpOptionsResultOutput) NetbiosNameServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) []string { return v.NetbiosNameServers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcDhcpOptionsResultOutput) NetbiosNodeType() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) string { return v.NetbiosNodeType })
}

func (o LookupVpcDhcpOptionsResultOutput) NtpServers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) []string { return v.NtpServers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupVpcDhcpOptionsResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) string { return v.OwnerId })
}

func (o LookupVpcDhcpOptionsResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupVpcDhcpOptionsResult](o, func(v *LookupVpcDhcpOptionsResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
