// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AppCampaignHook struct {
	// Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
	LambdaFunctionName *string `pulumi:"lambdaFunctionName"`
	// What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.
	Mode *string `pulumi:"mode"`
	// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
	WebUrl *string `pulumi:"webUrl"`
}

type AppCampaignHookArgs struct {
	// Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
	LambdaFunctionName pulumix.Input[*string] `pulumi:"lambdaFunctionName"`
	// What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.
	Mode pulumix.Input[*string] `pulumi:"mode"`
	// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
	WebUrl pulumix.Input[*string] `pulumi:"webUrl"`
}

func (AppCampaignHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppCampaignHook)(nil)).Elem()
}

func (i AppCampaignHookArgs) ToAppCampaignHookOutput() AppCampaignHookOutput {
	return i.ToAppCampaignHookOutputWithContext(context.Background())
}

func (i AppCampaignHookArgs) ToAppCampaignHookOutputWithContext(ctx context.Context) AppCampaignHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCampaignHookOutput)
}

func (i *AppCampaignHookArgs) ToOutput(ctx context.Context) pulumix.Output[*AppCampaignHookArgs] {
	return pulumix.Val(i)
}

type AppCampaignHookOutput struct{ *pulumi.OutputState }

func (AppCampaignHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppCampaignHook)(nil)).Elem()
}

func (o AppCampaignHookOutput) ToAppCampaignHookOutput() AppCampaignHookOutput {
	return o
}

func (o AppCampaignHookOutput) ToAppCampaignHookOutputWithContext(ctx context.Context) AppCampaignHookOutput {
	return o
}

func (o AppCampaignHookOutput) ToOutput(ctx context.Context) pulumix.Output[AppCampaignHook] {
	return pulumix.Output[AppCampaignHook]{
		OutputState: o.OutputState,
	}
}

// Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
func (o AppCampaignHookOutput) LambdaFunctionName() pulumix.Output[*string] {
	return pulumix.Apply[AppCampaignHook](o, func(v AppCampaignHook) *string { return v.LambdaFunctionName })
}

// What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.
func (o AppCampaignHookOutput) Mode() pulumix.Output[*string] {
	return pulumix.Apply[AppCampaignHook](o, func(v AppCampaignHook) *string { return v.Mode })
}

// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
func (o AppCampaignHookOutput) WebUrl() pulumix.Output[*string] {
	return pulumix.Apply[AppCampaignHook](o, func(v AppCampaignHook) *string { return v.WebUrl })
}

type AppLimits struct {
	// The maximum number of messages that the campaign can send daily.
	Daily *int `pulumi:"daily"`
	// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
	MaximumDuration *int `pulumi:"maximumDuration"`
	// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
	MessagesPerSecond *int `pulumi:"messagesPerSecond"`
	// The maximum total number of messages that the campaign can send.
	Total *int `pulumi:"total"`
}

type AppLimitsArgs struct {
	// The maximum number of messages that the campaign can send daily.
	Daily pulumix.Input[*int] `pulumi:"daily"`
	// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
	MaximumDuration pulumix.Input[*int] `pulumi:"maximumDuration"`
	// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
	MessagesPerSecond pulumix.Input[*int] `pulumi:"messagesPerSecond"`
	// The maximum total number of messages that the campaign can send.
	Total pulumix.Input[*int] `pulumi:"total"`
}

func (AppLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLimits)(nil)).Elem()
}

func (i AppLimitsArgs) ToAppLimitsOutput() AppLimitsOutput {
	return i.ToAppLimitsOutputWithContext(context.Background())
}

func (i AppLimitsArgs) ToAppLimitsOutputWithContext(ctx context.Context) AppLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLimitsOutput)
}

func (i *AppLimitsArgs) ToOutput(ctx context.Context) pulumix.Output[*AppLimitsArgs] {
	return pulumix.Val(i)
}

type AppLimitsOutput struct{ *pulumi.OutputState }

func (AppLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLimits)(nil)).Elem()
}

func (o AppLimitsOutput) ToAppLimitsOutput() AppLimitsOutput {
	return o
}

func (o AppLimitsOutput) ToAppLimitsOutputWithContext(ctx context.Context) AppLimitsOutput {
	return o
}

func (o AppLimitsOutput) ToOutput(ctx context.Context) pulumix.Output[AppLimits] {
	return pulumix.Output[AppLimits]{
		OutputState: o.OutputState,
	}
}

// The maximum number of messages that the campaign can send daily.
func (o AppLimitsOutput) Daily() pulumix.Output[*int] {
	return pulumix.Apply[AppLimits](o, func(v AppLimits) *int { return v.Daily })
}

// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
func (o AppLimitsOutput) MaximumDuration() pulumix.Output[*int] {
	return pulumix.Apply[AppLimits](o, func(v AppLimits) *int { return v.MaximumDuration })
}

// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
func (o AppLimitsOutput) MessagesPerSecond() pulumix.Output[*int] {
	return pulumix.Apply[AppLimits](o, func(v AppLimits) *int { return v.MessagesPerSecond })
}

// The maximum total number of messages that the campaign can send.
func (o AppLimitsOutput) Total() pulumix.Output[*int] {
	return pulumix.Apply[AppLimits](o, func(v AppLimits) *int { return v.Total })
}

type AppQuietTime struct {
	// The default end time for quiet time in ISO 8601 format. Required if `start` is set
	End *string `pulumi:"end"`
	// The default start time for quiet time in ISO 8601 format. Required if `end` is set
	Start *string `pulumi:"start"`
}

type AppQuietTimeArgs struct {
	// The default end time for quiet time in ISO 8601 format. Required if `start` is set
	End pulumix.Input[*string] `pulumi:"end"`
	// The default start time for quiet time in ISO 8601 format. Required if `end` is set
	Start pulumix.Input[*string] `pulumi:"start"`
}

func (AppQuietTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppQuietTime)(nil)).Elem()
}

func (i AppQuietTimeArgs) ToAppQuietTimeOutput() AppQuietTimeOutput {
	return i.ToAppQuietTimeOutputWithContext(context.Background())
}

func (i AppQuietTimeArgs) ToAppQuietTimeOutputWithContext(ctx context.Context) AppQuietTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppQuietTimeOutput)
}

func (i *AppQuietTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*AppQuietTimeArgs] {
	return pulumix.Val(i)
}

type AppQuietTimeOutput struct{ *pulumi.OutputState }

func (AppQuietTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppQuietTime)(nil)).Elem()
}

func (o AppQuietTimeOutput) ToAppQuietTimeOutput() AppQuietTimeOutput {
	return o
}

func (o AppQuietTimeOutput) ToAppQuietTimeOutputWithContext(ctx context.Context) AppQuietTimeOutput {
	return o
}

func (o AppQuietTimeOutput) ToOutput(ctx context.Context) pulumix.Output[AppQuietTime] {
	return pulumix.Output[AppQuietTime]{
		OutputState: o.OutputState,
	}
}

// The default end time for quiet time in ISO 8601 format. Required if `start` is set
func (o AppQuietTimeOutput) End() pulumix.Output[*string] {
	return pulumix.Apply[AppQuietTime](o, func(v AppQuietTime) *string { return v.End })
}

// The default start time for quiet time in ISO 8601 format. Required if `end` is set
func (o AppQuietTimeOutput) Start() pulumix.Output[*string] {
	return pulumix.Apply[AppQuietTime](o, func(v AppQuietTime) *string { return v.Start })
}

func init() {
	pulumi.RegisterOutputType(AppCampaignHookOutput{})
	pulumi.RegisterOutputType(AppLimitsOutput{})
	pulumi.RegisterOutputType(AppQuietTimeOutput{})
}
