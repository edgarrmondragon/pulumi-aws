// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Pinpoint ADM (Amazon Device Messaging) Channel resource.
type AdmChannel struct {
	pulumi.CustomResourceState

	// The application ID.
	ApplicationId pulumix.Output[string] `pulumi:"applicationId"`
	// Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientId pulumix.Output[string] `pulumi:"clientId"`
	// Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientSecret pulumix.Output[string] `pulumi:"clientSecret"`
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
}

// NewAdmChannel registers a new resource with the given unique name, arguments, and options.
func NewAdmChannel(ctx *pulumi.Context,
	name string, args *AdmChannelArgs, opts ...pulumi.ResourceOption) (*AdmChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.ClientId != nil {
		untypedSecretValue := pulumi.ToSecret(args.ClientId.ToOutput(ctx.Context()).Untyped())
		args.ClientId = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	if args.ClientSecret != nil {
		untypedSecretValue := pulumi.ToSecret(args.ClientSecret.ToOutput(ctx.Context()).Untyped())
		args.ClientSecret = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientId",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdmChannel
	err := ctx.RegisterResource("aws:pinpoint/admChannel:AdmChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdmChannel gets an existing AdmChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdmChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdmChannelState, opts ...pulumi.ResourceOption) (*AdmChannel, error) {
	var resource AdmChannel
	err := ctx.ReadResource("aws:pinpoint/admChannel:AdmChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdmChannel resources.
type admChannelState struct {
	// The application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientId *string `pulumi:"clientId"`
	// Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientSecret *string `pulumi:"clientSecret"`
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

type AdmChannelState struct {
	// The application ID.
	ApplicationId pulumix.Input[*string]
	// Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientId pulumix.Input[*string]
	// Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientSecret pulumix.Input[*string]
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled pulumix.Input[*bool]
}

func (AdmChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*admChannelState)(nil)).Elem()
}

type admChannelArgs struct {
	// The application ID.
	ApplicationId string `pulumi:"applicationId"`
	// Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientId string `pulumi:"clientId"`
	// Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientSecret string `pulumi:"clientSecret"`
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// The set of arguments for constructing a AdmChannel resource.
type AdmChannelArgs struct {
	// The application ID.
	ApplicationId pulumix.Input[string]
	// Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientId pulumix.Input[string]
	// Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
	ClientSecret pulumix.Input[string]
	// Specifies whether to enable the channel. Defaults to `true`.
	Enabled pulumix.Input[*bool]
}

func (AdmChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*admChannelArgs)(nil)).Elem()
}

type AdmChannelOutput struct{ *pulumi.OutputState }

func (AdmChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdmChannel)(nil)).Elem()
}

func (o AdmChannelOutput) ToAdmChannelOutput() AdmChannelOutput {
	return o
}

func (o AdmChannelOutput) ToAdmChannelOutputWithContext(ctx context.Context) AdmChannelOutput {
	return o
}

func (o AdmChannelOutput) ToOutput(ctx context.Context) pulumix.Output[AdmChannel] {
	return pulumix.Output[AdmChannel]{
		OutputState: o.OutputState,
	}
}

// The application ID.
func (o AdmChannelOutput) ApplicationId() pulumix.Output[string] {
	value := pulumix.Apply[AdmChannel](o, func(v AdmChannel) pulumix.Output[string] { return v.ApplicationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Client ID (part of OAuth Credentials) obtained via Amazon Developer Account.
func (o AdmChannelOutput) ClientId() pulumix.Output[string] {
	value := pulumix.Apply[AdmChannel](o, func(v AdmChannel) pulumix.Output[string] { return v.ClientId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Client Secret (part of OAuth Credentials) obtained via Amazon Developer Account.
func (o AdmChannelOutput) ClientSecret() pulumix.Output[string] {
	value := pulumix.Apply[AdmChannel](o, func(v AdmChannel) pulumix.Output[string] { return v.ClientSecret })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies whether to enable the channel. Defaults to `true`.
func (o AdmChannelOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[AdmChannel](o, func(v AdmChannel) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

func init() {
	pulumi.RegisterOutputType(AdmChannelOutput{})
}
