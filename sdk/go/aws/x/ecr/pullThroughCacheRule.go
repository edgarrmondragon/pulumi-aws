// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Elastic Container Registry Pull Through Cache Rule.
//
// More information about pull through cache rules, including the set of supported
// upstream repositories, see [Using pull through cache rules](https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache.html).
type PullThroughCacheRule struct {
	pulumi.CustomResourceState

	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix pulumix.Output[string] `pulumi:"ecrRepositoryPrefix"`
	// The registry ID where the repository was created.
	RegistryId pulumix.Output[string] `pulumi:"registryId"`
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl pulumix.Output[string] `pulumi:"upstreamRegistryUrl"`
}

// NewPullThroughCacheRule registers a new resource with the given unique name, arguments, and options.
func NewPullThroughCacheRule(ctx *pulumi.Context,
	name string, args *PullThroughCacheRuleArgs, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EcrRepositoryPrefix == nil {
		return nil, errors.New("invalid value for required argument 'EcrRepositoryPrefix'")
	}
	if args.UpstreamRegistryUrl == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamRegistryUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PullThroughCacheRule
	err := ctx.RegisterResource("aws:ecr/pullThroughCacheRule:PullThroughCacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPullThroughCacheRule gets an existing PullThroughCacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPullThroughCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PullThroughCacheRuleState, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	var resource PullThroughCacheRule
	err := ctx.ReadResource("aws:ecr/pullThroughCacheRule:PullThroughCacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PullThroughCacheRule resources.
type pullThroughCacheRuleState struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix *string `pulumi:"ecrRepositoryPrefix"`
	// The registry ID where the repository was created.
	RegistryId *string `pulumi:"registryId"`
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl *string `pulumi:"upstreamRegistryUrl"`
}

type PullThroughCacheRuleState struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix pulumix.Input[*string]
	// The registry ID where the repository was created.
	RegistryId pulumix.Input[*string]
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl pulumix.Input[*string]
}

func (PullThroughCacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleState)(nil)).Elem()
}

type pullThroughCacheRuleArgs struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl string `pulumi:"upstreamRegistryUrl"`
}

// The set of arguments for constructing a PullThroughCacheRule resource.
type PullThroughCacheRuleArgs struct {
	// The repository name prefix to use when caching images from the source registry.
	EcrRepositoryPrefix pulumix.Input[string]
	// The registry URL of the upstream public registry to use as the source.
	UpstreamRegistryUrl pulumix.Input[string]
}

func (PullThroughCacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleArgs)(nil)).Elem()
}

type PullThroughCacheRuleOutput struct{ *pulumi.OutputState }

func (PullThroughCacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullThroughCacheRule)(nil)).Elem()
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) ToOutput(ctx context.Context) pulumix.Output[PullThroughCacheRule] {
	return pulumix.Output[PullThroughCacheRule]{
		OutputState: o.OutputState,
	}
}

// The repository name prefix to use when caching images from the source registry.
func (o PullThroughCacheRuleOutput) EcrRepositoryPrefix() pulumix.Output[string] {
	value := pulumix.Apply[PullThroughCacheRule](o, func(v PullThroughCacheRule) pulumix.Output[string] { return v.EcrRepositoryPrefix })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The registry ID where the repository was created.
func (o PullThroughCacheRuleOutput) RegistryId() pulumix.Output[string] {
	value := pulumix.Apply[PullThroughCacheRule](o, func(v PullThroughCacheRule) pulumix.Output[string] { return v.RegistryId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The registry URL of the upstream public registry to use as the source.
func (o PullThroughCacheRuleOutput) UpstreamRegistryUrl() pulumix.Output[string] {
	value := pulumix.Apply[PullThroughCacheRule](o, func(v PullThroughCacheRule) pulumix.Output[string] { return v.UpstreamRegistryUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PullThroughCacheRuleOutput{})
}
