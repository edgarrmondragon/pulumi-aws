// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the name of a elastic beanstalk solution stack.
func GetSolutionStack(ctx *pulumi.Context, args *GetSolutionStackArgs, opts ...pulumi.InvokeOption) (*GetSolutionStackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSolutionStackResult
	err := ctx.Invoke("aws:elasticbeanstalk/getSolutionStack:getSolutionStack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSolutionStack.
type GetSolutionStackArgs struct {
	// If more than one result is returned, use the most
	// recent solution stack.
	MostRecent *bool `pulumi:"mostRecent"`
	// Regex string to apply to the solution stack list returned
	// by AWS. See [Elastic Beanstalk Supported Platforms][beanstalk-platforms] from
	// AWS documentation for reference solution stack names.
	//
	// > **NOTE:** If more or less than a single match is returned by the search,
	// this call will fail. Ensure that your search is specific enough to return
	// a single solution stack, or use `mostRecent` to choose the most recent one.
	NameRegex string `pulumi:"nameRegex"`
}

// A collection of values returned by getSolutionStack.
type GetSolutionStackResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	MostRecent *bool  `pulumi:"mostRecent"`
	// Name of the solution stack.
	Name      string `pulumi:"name"`
	NameRegex string `pulumi:"nameRegex"`
}

func GetSolutionStackOutput(ctx *pulumi.Context, args GetSolutionStackOutputArgs, opts ...pulumi.InvokeOption) GetSolutionStackResultOutput {
	outputResult := pulumix.ApplyErr[*GetSolutionStackArgs](args.ToOutput(), func(plainArgs *GetSolutionStackArgs) (*GetSolutionStackResult, error) {
		return GetSolutionStack(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetSolutionStackResultOutput, *GetSolutionStackResult](outputResult)
}

// A collection of arguments for invoking getSolutionStack.
type GetSolutionStackOutputArgs struct {
	// If more than one result is returned, use the most
	// recent solution stack.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Regex string to apply to the solution stack list returned
	// by AWS. See [Elastic Beanstalk Supported Platforms][beanstalk-platforms] from
	// AWS documentation for reference solution stack names.
	//
	// > **NOTE:** If more or less than a single match is returned by the search,
	// this call will fail. Ensure that your search is specific enough to return
	// a single solution stack, or use `mostRecent` to choose the most recent one.
	NameRegex pulumix.Input[string] `pulumi:"nameRegex"`
}

func (args GetSolutionStackOutputArgs) ToOutput() pulumix.Output[*GetSolutionStackArgs] {
	allArgs := pulumix.All(
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.NameRegex.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetSolutionStackArgs {
		return &GetSolutionStackArgs{
			MostRecent: resolvedArgs[0].(*bool),
			NameRegex:  resolvedArgs[1].(string),
		}
	})
}

type GetSolutionStackResultOutput struct{ *pulumi.OutputState }

func (GetSolutionStackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSolutionStackResult)(nil)).Elem()
}

func (o GetSolutionStackResultOutput) ToOutput(context.Context) pulumix.Output[*GetSolutionStackResult] {
	return pulumix.Output[*GetSolutionStackResult]{
		OutputState: o.OutputState,
	}
}

func (o GetSolutionStackResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetSolutionStackResult](o, func(v *GetSolutionStackResult) string { return v.Id })
}

func (o GetSolutionStackResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*GetSolutionStackResult](o, func(v *GetSolutionStackResult) *bool { return v.MostRecent })
}

func (o GetSolutionStackResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetSolutionStackResult](o, func(v *GetSolutionStackResult) string { return v.Name })
}

func (o GetSolutionStackResultOutput) NameRegex() pulumix.Output[string] {
	return pulumix.Apply[*GetSolutionStackResult](o, func(v *GetSolutionStackResult) string { return v.NameRegex })
}
