// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource to create a routing table entry (a route) in a VPC routing table.
//
// > **NOTE on Route Tables and Routes:** This provider currently provides both a standalone Route resource and a Route Table resource with routes defined in-line. At this time you cannot use a Route Table with in-line routes in conjunction with any Route resources. Doing so will cause a conflict of rule settings and will overwrite rules.
//
// > **NOTE on `gatewayId` attribute:** The AWS API is very forgiving with the resource ID passed in the `gatewayId` attribute. For example an `ec2.Route` resource can be created with an `ec2.NatGateway` or `ec2.EgressOnlyInternetGateway` ID specified for the `gatewayId` attribute. Specifying anything other than an `ec2.InternetGateway` or `ec2.VpnGateway` ID will lead to this provider reporting a permanent diff between your configuration and recorded state, as the AWS API returns the more-specific attribute. If you are experiencing constant diffs with an `ec2.Route` resource, the first thing to check is that the correct attribute is being specified.
type Route struct {
	pulumi.CustomResourceState

	// Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
	CarrierGatewayId pulumix.Output[*string] `pulumi:"carrierGatewayId"`
	// The Amazon Resource Name (ARN) of a core network.
	CoreNetworkArn pulumix.Output[*string] `pulumi:"coreNetworkArn"`
	// The destination CIDR block.
	DestinationCidrBlock pulumix.Output[*string] `pulumi:"destinationCidrBlock"`
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock pulumix.Output[*string] `pulumi:"destinationIpv6CidrBlock"`
	// The ID of a managed prefix list destination.
	//
	// One of the following target arguments must be supplied:
	DestinationPrefixListId pulumix.Output[*string] `pulumi:"destinationPrefixListId"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumix.Output[*string] `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously imported local route.
	GatewayId pulumix.Output[*string] `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId pulumix.Output[string] `pulumi:"instanceId"`
	// The AWS account ID of the owner of the EC2 instance.
	InstanceOwnerId pulumix.Output[string] `pulumi:"instanceOwnerId"`
	// Identifier of a Outpost local gateway.
	LocalGatewayId pulumix.Output[*string] `pulumi:"localGatewayId"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumix.Output[*string] `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumix.Output[string] `pulumi:"networkInterfaceId"`
	// How the route was created - `CreateRouteTable`, `CreateRoute` or `EnableVgwRoutePropagation`.
	Origin pulumix.Output[string] `pulumi:"origin"`
	// The ID of the routing table.
	//
	// One of the following destination arguments must be supplied:
	RouteTableId pulumix.Output[string] `pulumi:"routeTableId"`
	// The state of the route - `active` or `blackhole`.
	State pulumix.Output[string] `pulumi:"state"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumix.Output[*string] `pulumi:"transitGatewayId"`
	// Identifier of a VPC Endpoint.
	VpcEndpointId pulumix.Output[*string] `pulumi:"vpcEndpointId"`
	// Identifier of a VPC peering connection.
	//
	// Note that the default route, mapping the VPC's CIDR block to "local", is created implicitly and cannot be specified.
	VpcPeeringConnectionId pulumix.Output[*string] `pulumi:"vpcPeeringConnectionId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("aws:ec2/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws:ec2/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
	CarrierGatewayId *string `pulumi:"carrierGatewayId"`
	// The Amazon Resource Name (ARN) of a core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// The destination CIDR block.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	// The ID of a managed prefix list destination.
	//
	// One of the following target arguments must be supplied:
	DestinationPrefixListId *string `pulumi:"destinationPrefixListId"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId *string `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously imported local route.
	GatewayId *string `pulumi:"gatewayId"`
	// Identifier of an EC2 instance.
	InstanceId *string `pulumi:"instanceId"`
	// The AWS account ID of the owner of the EC2 instance.
	InstanceOwnerId *string `pulumi:"instanceOwnerId"`
	// Identifier of a Outpost local gateway.
	LocalGatewayId *string `pulumi:"localGatewayId"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// How the route was created - `CreateRouteTable`, `CreateRoute` or `EnableVgwRoutePropagation`.
	Origin *string `pulumi:"origin"`
	// The ID of the routing table.
	//
	// One of the following destination arguments must be supplied:
	RouteTableId *string `pulumi:"routeTableId"`
	// The state of the route - `active` or `blackhole`.
	State *string `pulumi:"state"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of a VPC Endpoint.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// Identifier of a VPC peering connection.
	//
	// Note that the default route, mapping the VPC's CIDR block to "local", is created implicitly and cannot be specified.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

type RouteState struct {
	// Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
	CarrierGatewayId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of a core network.
	CoreNetworkArn pulumix.Input[*string]
	// The destination CIDR block.
	DestinationCidrBlock pulumix.Input[*string]
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock pulumix.Input[*string]
	// The ID of a managed prefix list destination.
	//
	// One of the following target arguments must be supplied:
	DestinationPrefixListId pulumix.Input[*string]
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumix.Input[*string]
	// Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously imported local route.
	GatewayId pulumix.Input[*string]
	// Identifier of an EC2 instance.
	InstanceId pulumix.Input[*string]
	// The AWS account ID of the owner of the EC2 instance.
	InstanceOwnerId pulumix.Input[*string]
	// Identifier of a Outpost local gateway.
	LocalGatewayId pulumix.Input[*string]
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumix.Input[*string]
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumix.Input[*string]
	// How the route was created - `CreateRouteTable`, `CreateRoute` or `EnableVgwRoutePropagation`.
	Origin pulumix.Input[*string]
	// The ID of the routing table.
	//
	// One of the following destination arguments must be supplied:
	RouteTableId pulumix.Input[*string]
	// The state of the route - `active` or `blackhole`.
	State pulumix.Input[*string]
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string]
	// Identifier of a VPC Endpoint.
	VpcEndpointId pulumix.Input[*string]
	// Identifier of a VPC peering connection.
	//
	// Note that the default route, mapping the VPC's CIDR block to "local", is created implicitly and cannot be specified.
	VpcPeeringConnectionId pulumix.Input[*string]
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
	CarrierGatewayId *string `pulumi:"carrierGatewayId"`
	// The Amazon Resource Name (ARN) of a core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// The destination CIDR block.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	// The ID of a managed prefix list destination.
	//
	// One of the following target arguments must be supplied:
	DestinationPrefixListId *string `pulumi:"destinationPrefixListId"`
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId *string `pulumi:"egressOnlyGatewayId"`
	// Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously imported local route.
	GatewayId *string `pulumi:"gatewayId"`
	// Identifier of a Outpost local gateway.
	LocalGatewayId *string `pulumi:"localGatewayId"`
	// Identifier of a VPC NAT gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Identifier of an EC2 network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of the routing table.
	//
	// One of the following destination arguments must be supplied:
	RouteTableId string `pulumi:"routeTableId"`
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// Identifier of a VPC Endpoint.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// Identifier of a VPC peering connection.
	//
	// Note that the default route, mapping the VPC's CIDR block to "local", is created implicitly and cannot be specified.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
	CarrierGatewayId pulumix.Input[*string]
	// The Amazon Resource Name (ARN) of a core network.
	CoreNetworkArn pulumix.Input[*string]
	// The destination CIDR block.
	DestinationCidrBlock pulumix.Input[*string]
	// The destination IPv6 CIDR block.
	DestinationIpv6CidrBlock pulumix.Input[*string]
	// The ID of a managed prefix list destination.
	//
	// One of the following target arguments must be supplied:
	DestinationPrefixListId pulumix.Input[*string]
	// Identifier of a VPC Egress Only Internet Gateway.
	EgressOnlyGatewayId pulumix.Input[*string]
	// Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously imported local route.
	GatewayId pulumix.Input[*string]
	// Identifier of a Outpost local gateway.
	LocalGatewayId pulumix.Input[*string]
	// Identifier of a VPC NAT gateway.
	NatGatewayId pulumix.Input[*string]
	// Identifier of an EC2 network interface.
	NetworkInterfaceId pulumix.Input[*string]
	// The ID of the routing table.
	//
	// One of the following destination arguments must be supplied:
	RouteTableId pulumix.Input[string]
	// Identifier of an EC2 Transit Gateway.
	TransitGatewayId pulumix.Input[*string]
	// Identifier of a VPC Endpoint.
	VpcEndpointId pulumix.Input[*string]
	// Identifier of a VPC peering connection.
	//
	// Note that the default route, mapping the VPC's CIDR block to "local", is created implicitly and cannot be specified.
	VpcPeeringConnectionId pulumix.Input[*string]
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToOutput(ctx context.Context) pulumix.Output[Route] {
	return pulumix.Output[Route]{
		OutputState: o.OutputState,
	}
}

// Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
func (o RouteOutput) CarrierGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.CarrierGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Amazon Resource Name (ARN) of a core network.
func (o RouteOutput) CoreNetworkArn() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.CoreNetworkArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The destination CIDR block.
func (o RouteOutput) DestinationCidrBlock() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.DestinationCidrBlock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The destination IPv6 CIDR block.
func (o RouteOutput) DestinationIpv6CidrBlock() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.DestinationIpv6CidrBlock })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of a managed prefix list destination.
//
// One of the following target arguments must be supplied:
func (o RouteOutput) DestinationPrefixListId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.DestinationPrefixListId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of a VPC Egress Only Internet Gateway.
func (o RouteOutput) EgressOnlyGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.EgressOnlyGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of a VPC internet gateway or a virtual private gateway. Specify `local` when updating a previously imported local route.
func (o RouteOutput) GatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.GatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of an EC2 instance.
func (o RouteOutput) InstanceId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.InstanceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The AWS account ID of the owner of the EC2 instance.
func (o RouteOutput) InstanceOwnerId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.InstanceOwnerId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of a Outpost local gateway.
func (o RouteOutput) LocalGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.LocalGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of a VPC NAT gateway.
func (o RouteOutput) NatGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.NatGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of an EC2 network interface.
func (o RouteOutput) NetworkInterfaceId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.NetworkInterfaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// How the route was created - `CreateRouteTable`, `CreateRoute` or `EnableVgwRoutePropagation`.
func (o RouteOutput) Origin() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.Origin })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the routing table.
//
// One of the following destination arguments must be supplied:
func (o RouteOutput) RouteTableId() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.RouteTableId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The state of the route - `active` or `blackhole`.
func (o RouteOutput) State() pulumix.Output[string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[string] { return v.State })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Identifier of an EC2 Transit Gateway.
func (o RouteOutput) TransitGatewayId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.TransitGatewayId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of a VPC Endpoint.
func (o RouteOutput) VpcEndpointId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.VpcEndpointId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Identifier of a VPC peering connection.
//
// Note that the default route, mapping the VPC's CIDR block to "local", is created implicitly and cannot be specified.
func (o RouteOutput) VpcPeeringConnectionId() pulumix.Output[*string] {
	value := pulumix.Apply[Route](o, func(v Route) pulumix.Output[*string] { return v.VpcPeeringConnectionId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(RouteOutput{})
}
