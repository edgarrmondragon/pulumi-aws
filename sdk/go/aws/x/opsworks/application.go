// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an OpsWorks application resource.
type Application struct {
	pulumi.CustomResourceState

	// SCM configuration of the app as described below.
	AppSources pulumix.GArrayOutput[ApplicationAppSource, ApplicationAppSourceOutput] `pulumi:"appSources"`
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy pulumix.Output[*string] `pulumi:"autoBundleOnDeploy"`
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings pulumix.Output[*string] `pulumi:"awsFlowRubySettings"`
	// The data source's ARN.
	DataSourceArn pulumix.Output[*string] `pulumi:"dataSourceArn"`
	// The database name.
	DataSourceDatabaseName pulumix.Output[*string] `pulumi:"dataSourceDatabaseName"`
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType pulumix.Output[*string] `pulumi:"dataSourceType"`
	// A description of the app.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot pulumix.Output[*string] `pulumi:"documentRoot"`
	// A list of virtual host alias.
	Domains pulumix.ArrayOutput[string] `pulumi:"domains"`
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl pulumix.Output[*bool] `pulumi:"enableSsl"`
	// Object to define environment variables.  Object is described below.
	Environments pulumix.GArrayOutput[ApplicationEnvironment, ApplicationEnvironmentOutput] `pulumi:"environments"`
	// A human-readable name for the application.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name of the Rails environment for application of type `rails`.
	RailsEnv pulumix.Output[*string] `pulumi:"railsEnv"`
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName pulumix.Output[string] `pulumi:"shortName"`
	// The SSL configuration of the app. Object is described below.
	SslConfigurations pulumix.GArrayOutput[ApplicationSslConfiguration, ApplicationSslConfigurationOutput] `pulumi:"sslConfigurations"`
	// ID of the stack the application will belong to.
	StackId pulumix.Output[string] `pulumi:"stackId"`
	// Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws:opsworks/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws:opsworks/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// SCM configuration of the app as described below.
	AppSources []ApplicationAppSource `pulumi:"appSources"`
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy *string `pulumi:"autoBundleOnDeploy"`
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings *string `pulumi:"awsFlowRubySettings"`
	// The data source's ARN.
	DataSourceArn *string `pulumi:"dataSourceArn"`
	// The database name.
	DataSourceDatabaseName *string `pulumi:"dataSourceDatabaseName"`
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType *string `pulumi:"dataSourceType"`
	// A description of the app.
	Description *string `pulumi:"description"`
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot *string `pulumi:"documentRoot"`
	// A list of virtual host alias.
	Domains []string `pulumi:"domains"`
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl *bool `pulumi:"enableSsl"`
	// Object to define environment variables.  Object is described below.
	Environments []ApplicationEnvironment `pulumi:"environments"`
	// A human-readable name for the application.
	Name *string `pulumi:"name"`
	// The name of the Rails environment for application of type `rails`.
	RailsEnv *string `pulumi:"railsEnv"`
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName *string `pulumi:"shortName"`
	// The SSL configuration of the app. Object is described below.
	SslConfigurations []ApplicationSslConfiguration `pulumi:"sslConfigurations"`
	// ID of the stack the application will belong to.
	StackId *string `pulumi:"stackId"`
	// Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
	Type *string `pulumi:"type"`
}

type ApplicationState struct {
	// SCM configuration of the app as described below.
	AppSources pulumix.Input[[]*ApplicationAppSourceArgs]
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy pulumix.Input[*string]
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings pulumix.Input[*string]
	// The data source's ARN.
	DataSourceArn pulumix.Input[*string]
	// The database name.
	DataSourceDatabaseName pulumix.Input[*string]
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType pulumix.Input[*string]
	// A description of the app.
	Description pulumix.Input[*string]
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot pulumix.Input[*string]
	// A list of virtual host alias.
	Domains pulumix.Input[[]string]
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl pulumix.Input[*bool]
	// Object to define environment variables.  Object is described below.
	Environments pulumix.Input[[]*ApplicationEnvironmentArgs]
	// A human-readable name for the application.
	Name pulumix.Input[*string]
	// The name of the Rails environment for application of type `rails`.
	RailsEnv pulumix.Input[*string]
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName pulumix.Input[*string]
	// The SSL configuration of the app. Object is described below.
	SslConfigurations pulumix.Input[[]*ApplicationSslConfigurationArgs]
	// ID of the stack the application will belong to.
	StackId pulumix.Input[*string]
	// Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
	Type pulumix.Input[*string]
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// SCM configuration of the app as described below.
	AppSources []ApplicationAppSource `pulumi:"appSources"`
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy *string `pulumi:"autoBundleOnDeploy"`
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings *string `pulumi:"awsFlowRubySettings"`
	// The data source's ARN.
	DataSourceArn *string `pulumi:"dataSourceArn"`
	// The database name.
	DataSourceDatabaseName *string `pulumi:"dataSourceDatabaseName"`
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType *string `pulumi:"dataSourceType"`
	// A description of the app.
	Description *string `pulumi:"description"`
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot *string `pulumi:"documentRoot"`
	// A list of virtual host alias.
	Domains []string `pulumi:"domains"`
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl *bool `pulumi:"enableSsl"`
	// Object to define environment variables.  Object is described below.
	Environments []ApplicationEnvironment `pulumi:"environments"`
	// A human-readable name for the application.
	Name *string `pulumi:"name"`
	// The name of the Rails environment for application of type `rails`.
	RailsEnv *string `pulumi:"railsEnv"`
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName *string `pulumi:"shortName"`
	// The SSL configuration of the app. Object is described below.
	SslConfigurations []ApplicationSslConfiguration `pulumi:"sslConfigurations"`
	// ID of the stack the application will belong to.
	StackId string `pulumi:"stackId"`
	// Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// SCM configuration of the app as described below.
	AppSources pulumix.Input[[]*ApplicationAppSourceArgs]
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy pulumix.Input[*string]
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings pulumix.Input[*string]
	// The data source's ARN.
	DataSourceArn pulumix.Input[*string]
	// The database name.
	DataSourceDatabaseName pulumix.Input[*string]
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType pulumix.Input[*string]
	// A description of the app.
	Description pulumix.Input[*string]
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot pulumix.Input[*string]
	// A list of virtual host alias.
	Domains pulumix.Input[[]string]
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl pulumix.Input[*bool]
	// Object to define environment variables.  Object is described below.
	Environments pulumix.Input[[]*ApplicationEnvironmentArgs]
	// A human-readable name for the application.
	Name pulumix.Input[*string]
	// The name of the Rails environment for application of type `rails`.
	RailsEnv pulumix.Input[*string]
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName pulumix.Input[*string]
	// The SSL configuration of the app. Object is described below.
	SslConfigurations pulumix.Input[[]*ApplicationSslConfigurationArgs]
	// ID of the stack the application will belong to.
	StackId pulumix.Input[string]
	// Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
	Type pulumix.Input[string]
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[Application] {
	return pulumix.Output[Application]{
		OutputState: o.OutputState,
	}
}

// SCM configuration of the app as described below.
func (o ApplicationOutput) AppSources() pulumix.GArrayOutput[ApplicationAppSource, ApplicationAppSourceOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GArrayOutput[ApplicationAppSource, ApplicationAppSourceOutput] {
		return v.AppSources
	})
	unwrapped := pulumix.Flatten[[]ApplicationAppSource, pulumix.GArrayOutput[ApplicationAppSource, ApplicationAppSourceOutput]](value)
	return pulumix.GArrayOutput[ApplicationAppSource, ApplicationAppSourceOutput]{OutputState: unwrapped.OutputState}
}

// Run bundle install when deploying for application of type `rails`.
func (o ApplicationOutput) AutoBundleOnDeploy() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.AutoBundleOnDeploy })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Specify activity and workflow workers for your app using the aws-flow gem.
func (o ApplicationOutput) AwsFlowRubySettings() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.AwsFlowRubySettings })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The data source's ARN.
func (o ApplicationOutput) DataSourceArn() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.DataSourceArn })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The database name.
func (o ApplicationOutput) DataSourceDatabaseName() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.DataSourceDatabaseName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
func (o ApplicationOutput) DataSourceType() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.DataSourceType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A description of the app.
func (o ApplicationOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Subfolder for the document root for application of type `rails`.
func (o ApplicationOutput) DocumentRoot() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.DocumentRoot })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of virtual host alias.
func (o ApplicationOutput) Domains() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.ArrayOutput[string] { return v.Domains })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
func (o ApplicationOutput) EnableSsl() pulumix.Output[*bool] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*bool] { return v.EnableSsl })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Object to define environment variables.  Object is described below.
func (o ApplicationOutput) Environments() pulumix.GArrayOutput[ApplicationEnvironment, ApplicationEnvironmentOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GArrayOutput[ApplicationEnvironment, ApplicationEnvironmentOutput] {
		return v.Environments
	})
	unwrapped := pulumix.Flatten[[]ApplicationEnvironment, pulumix.GArrayOutput[ApplicationEnvironment, ApplicationEnvironmentOutput]](value)
	return pulumix.GArrayOutput[ApplicationEnvironment, ApplicationEnvironmentOutput]{OutputState: unwrapped.OutputState}
}

// A human-readable name for the application.
func (o ApplicationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the Rails environment for application of type `rails`.
func (o ApplicationOutput) RailsEnv() pulumix.Output[*string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[*string] { return v.RailsEnv })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
func (o ApplicationOutput) ShortName() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.ShortName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The SSL configuration of the app. Object is described below.
func (o ApplicationOutput) SslConfigurations() pulumix.GArrayOutput[ApplicationSslConfiguration, ApplicationSslConfigurationOutput] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.GArrayOutput[ApplicationSslConfiguration, ApplicationSslConfigurationOutput] {
		return v.SslConfigurations
	})
	unwrapped := pulumix.Flatten[[]ApplicationSslConfiguration, pulumix.GArrayOutput[ApplicationSslConfiguration, ApplicationSslConfigurationOutput]](value)
	return pulumix.GArrayOutput[ApplicationSslConfiguration, ApplicationSslConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// ID of the stack the application will belong to.
func (o ApplicationOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
func (o ApplicationOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Application](o, func(v Application) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutput{})
}
