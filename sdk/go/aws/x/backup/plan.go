// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an AWS Backup plan resource.
type Plan struct {
	pulumi.CustomResourceState

	// An object that specifies backup options for each resource type.
	AdvancedBackupSettings pulumix.GArrayOutput[PlanAdvancedBackupSetting, PlanAdvancedBackupSettingOutput] `pulumi:"advancedBackupSettings"`
	// The ARN of the backup plan.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The display name of a backup plan.
	Name pulumix.Output[string] `pulumi:"name"`
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules pulumix.GArrayOutput[PlanRule, PlanRuleOutput] `pulumi:"rules"`
	// Metadata that you can assign to help organize the plans you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOption) (*Plan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plan
	err := ctx.RegisterResource("aws:backup/plan:Plan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanState, opts ...pulumi.ResourceOption) (*Plan, error) {
	var resource Plan
	err := ctx.ReadResource("aws:backup/plan:Plan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plan resources.
type planState struct {
	// An object that specifies backup options for each resource type.
	AdvancedBackupSettings []PlanAdvancedBackupSetting `pulumi:"advancedBackupSettings"`
	// The ARN of the backup plan.
	Arn *string `pulumi:"arn"`
	// The display name of a backup plan.
	Name *string `pulumi:"name"`
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules []PlanRule `pulumi:"rules"`
	// Metadata that you can assign to help organize the plans you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version *string `pulumi:"version"`
}

type PlanState struct {
	// An object that specifies backup options for each resource type.
	AdvancedBackupSettings pulumix.Input[[]*PlanAdvancedBackupSettingArgs]
	// The ARN of the backup plan.
	Arn pulumix.Input[*string]
	// The display name of a backup plan.
	Name pulumix.Input[*string]
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules pulumix.Input[[]*PlanRuleArgs]
	// Metadata that you can assign to help organize the plans you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version pulumix.Input[*string]
}

func (PlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*planState)(nil)).Elem()
}

type planArgs struct {
	// An object that specifies backup options for each resource type.
	AdvancedBackupSettings []PlanAdvancedBackupSetting `pulumi:"advancedBackupSettings"`
	// The display name of a backup plan.
	Name *string `pulumi:"name"`
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules []PlanRule `pulumi:"rules"`
	// Metadata that you can assign to help organize the plans you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	// An object that specifies backup options for each resource type.
	AdvancedBackupSettings pulumix.Input[[]*PlanAdvancedBackupSettingArgs]
	// The display name of a backup plan.
	Name pulumix.Input[*string]
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules pulumix.Input[[]*PlanRuleArgs]
	// Metadata that you can assign to help organize the plans you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planArgs)(nil)).Elem()
}

type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToOutput(ctx context.Context) pulumix.Output[Plan] {
	return pulumix.Output[Plan]{
		OutputState: o.OutputState,
	}
}

// An object that specifies backup options for each resource type.
func (o PlanOutput) AdvancedBackupSettings() pulumix.GArrayOutput[PlanAdvancedBackupSetting, PlanAdvancedBackupSettingOutput] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.GArrayOutput[PlanAdvancedBackupSetting, PlanAdvancedBackupSettingOutput] {
		return v.AdvancedBackupSettings
	})
	unwrapped := pulumix.Flatten[[]PlanAdvancedBackupSetting, pulumix.GArrayOutput[PlanAdvancedBackupSetting, PlanAdvancedBackupSettingOutput]](value)
	return pulumix.GArrayOutput[PlanAdvancedBackupSetting, PlanAdvancedBackupSettingOutput]{OutputState: unwrapped.OutputState}
}

// The ARN of the backup plan.
func (o PlanOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The display name of a backup plan.
func (o PlanOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A rule object that specifies a scheduled task that is used to back up a selection of resources.
func (o PlanOutput) Rules() pulumix.GArrayOutput[PlanRule, PlanRuleOutput] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.GArrayOutput[PlanRule, PlanRuleOutput] { return v.Rules })
	unwrapped := pulumix.Flatten[[]PlanRule, pulumix.GArrayOutput[PlanRule, PlanRuleOutput]](value)
	return pulumix.GArrayOutput[PlanRule, PlanRuleOutput]{OutputState: unwrapped.OutputState}
}

// Metadata that you can assign to help organize the plans you create. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o PlanOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o PlanOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
func (o PlanOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[Plan](o, func(v Plan) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(PlanOutput{})
}
