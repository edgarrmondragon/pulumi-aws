// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Batch Scheduling Policy resource.
type SchedulingPolicy struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name of the scheduling policy.
	Arn             pulumix.Output[string]                                                                     `pulumi:"arn"`
	FairSharePolicy pulumix.GPtrOutput[SchedulingPolicyFairSharePolicy, SchedulingPolicyFairSharePolicyOutput] `pulumi:"fairSharePolicy"`
	// Specifies the name of the scheduling policy.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
}

// NewSchedulingPolicy registers a new resource with the given unique name, arguments, and options.
func NewSchedulingPolicy(ctx *pulumi.Context,
	name string, args *SchedulingPolicyArgs, opts ...pulumi.ResourceOption) (*SchedulingPolicy, error) {
	if args == nil {
		args = &SchedulingPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchedulingPolicy
	err := ctx.RegisterResource("aws:batch/schedulingPolicy:SchedulingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedulingPolicy gets an existing SchedulingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedulingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchedulingPolicyState, opts ...pulumi.ResourceOption) (*SchedulingPolicy, error) {
	var resource SchedulingPolicy
	err := ctx.ReadResource("aws:batch/schedulingPolicy:SchedulingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchedulingPolicy resources.
type schedulingPolicyState struct {
	// The Amazon Resource Name of the scheduling policy.
	Arn             *string                          `pulumi:"arn"`
	FairSharePolicy *SchedulingPolicyFairSharePolicy `pulumi:"fairSharePolicy"`
	// Specifies the name of the scheduling policy.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
}

type SchedulingPolicyState struct {
	// The Amazon Resource Name of the scheduling policy.
	Arn             pulumix.Input[*string]
	FairSharePolicy pulumix.Input[*SchedulingPolicyFairSharePolicyArgs]
	// Specifies the name of the scheduling policy.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
}

func (SchedulingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*schedulingPolicyState)(nil)).Elem()
}

type schedulingPolicyArgs struct {
	FairSharePolicy *SchedulingPolicyFairSharePolicy `pulumi:"fairSharePolicy"`
	// Specifies the name of the scheduling policy.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SchedulingPolicy resource.
type SchedulingPolicyArgs struct {
	FairSharePolicy pulumix.Input[*SchedulingPolicyFairSharePolicyArgs]
	// Specifies the name of the scheduling policy.
	Name pulumix.Input[*string]
	// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
}

func (SchedulingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schedulingPolicyArgs)(nil)).Elem()
}

type SchedulingPolicyOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicy)(nil)).Elem()
}

func (o SchedulingPolicyOutput) ToSchedulingPolicyOutput() SchedulingPolicyOutput {
	return o
}

func (o SchedulingPolicyOutput) ToSchedulingPolicyOutputWithContext(ctx context.Context) SchedulingPolicyOutput {
	return o
}

func (o SchedulingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulingPolicy] {
	return pulumix.Output[SchedulingPolicy]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name of the scheduling policy.
func (o SchedulingPolicyOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[SchedulingPolicy](o, func(v SchedulingPolicy) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o SchedulingPolicyOutput) FairSharePolicy() pulumix.GPtrOutput[SchedulingPolicyFairSharePolicy, SchedulingPolicyFairSharePolicyOutput] {
	value := pulumix.Apply[SchedulingPolicy](o, func(v SchedulingPolicy) pulumix.GPtrOutput[SchedulingPolicyFairSharePolicy, SchedulingPolicyFairSharePolicyOutput] {
		return v.FairSharePolicy
	})
	unwrapped := pulumix.Flatten[*SchedulingPolicyFairSharePolicy, pulumix.GPtrOutput[SchedulingPolicyFairSharePolicy, SchedulingPolicyFairSharePolicyOutput]](value)
	return pulumix.GPtrOutput[SchedulingPolicyFairSharePolicy, SchedulingPolicyFairSharePolicyOutput]{OutputState: unwrapped.OutputState}
}

// Specifies the name of the scheduling policy.
func (o SchedulingPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SchedulingPolicy](o, func(v SchedulingPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o SchedulingPolicyOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[SchedulingPolicy](o, func(v SchedulingPolicy) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o SchedulingPolicyOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[SchedulingPolicy](o, func(v SchedulingPolicy) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SchedulingPolicyOutput{})
}
