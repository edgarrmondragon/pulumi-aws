// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides an Athena database.
type Database struct {
	pulumi.CustomResourceState

	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration pulumix.GPtrOutput[DatabaseAclConfiguration, DatabaseAclConfigurationOutput] `pulumi:"aclConfiguration"`
	// Name of S3 bucket to save the results of the query execution.
	Bucket pulumix.Output[*string] `pulumi:"bucket"`
	// Description of the database.
	Comment pulumix.Output[*string] `pulumi:"comment"`
	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	EncryptionConfiguration pulumix.GPtrOutput[DatabaseEncryptionConfiguration, DatabaseEncryptionConfigurationOutput] `pulumi:"encryptionConfiguration"`
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner pulumix.Output[*string] `pulumi:"expectedBucketOwner"`
	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
	ForceDestroy pulumix.Output[*bool] `pulumi:"forceDestroy"`
	// Name of the database to create.
	Name pulumix.Output[string] `pulumi:"name"`
	// Key-value map of custom metadata properties for the database definition.
	Properties pulumix.MapOutput[string] `pulumi:"properties"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		args = &DatabaseArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("aws:athena/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("aws:athena/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration *DatabaseAclConfiguration `pulumi:"aclConfiguration"`
	// Name of S3 bucket to save the results of the query execution.
	Bucket *string `pulumi:"bucket"`
	// Description of the database.
	Comment *string `pulumi:"comment"`
	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	EncryptionConfiguration *DatabaseEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Name of the database to create.
	Name *string `pulumi:"name"`
	// Key-value map of custom metadata properties for the database definition.
	Properties map[string]string `pulumi:"properties"`
}

type DatabaseState struct {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration pulumix.Input[*DatabaseAclConfigurationArgs]
	// Name of S3 bucket to save the results of the query execution.
	Bucket pulumix.Input[*string]
	// Description of the database.
	Comment pulumix.Input[*string]
	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	EncryptionConfiguration pulumix.Input[*DatabaseEncryptionConfigurationArgs]
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner pulumix.Input[*string]
	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
	ForceDestroy pulumix.Input[*bool]
	// Name of the database to create.
	Name pulumix.Input[*string]
	// Key-value map of custom metadata properties for the database definition.
	Properties pulumix.Input[map[string]string]
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration *DatabaseAclConfiguration `pulumi:"aclConfiguration"`
	// Name of S3 bucket to save the results of the query execution.
	Bucket *string `pulumi:"bucket"`
	// Description of the database.
	Comment *string `pulumi:"comment"`
	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	EncryptionConfiguration *DatabaseEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Name of the database to create.
	Name *string `pulumi:"name"`
	// Key-value map of custom metadata properties for the database definition.
	Properties map[string]string `pulumi:"properties"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	AclConfiguration pulumix.Input[*DatabaseAclConfigurationArgs]
	// Name of S3 bucket to save the results of the query execution.
	Bucket pulumix.Input[*string]
	// Description of the database.
	Comment pulumix.Input[*string]
	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	EncryptionConfiguration pulumix.Input[*DatabaseEncryptionConfigurationArgs]
	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	ExpectedBucketOwner pulumix.Input[*string]
	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
	ForceDestroy pulumix.Input[*bool]
	// Name of the database to create.
	Name pulumix.Input[*string]
	// Key-value map of custom metadata properties for the database definition.
	Properties pulumix.Input[map[string]string]
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[Database] {
	return pulumix.Output[Database]{
		OutputState: o.OutputState,
	}
}

// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
func (o DatabaseOutput) AclConfiguration() pulumix.GPtrOutput[DatabaseAclConfiguration, DatabaseAclConfigurationOutput] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.GPtrOutput[DatabaseAclConfiguration, DatabaseAclConfigurationOutput] {
		return v.AclConfiguration
	})
	unwrapped := pulumix.Flatten[*DatabaseAclConfiguration, pulumix.GPtrOutput[DatabaseAclConfiguration, DatabaseAclConfigurationOutput]](value)
	return pulumix.GPtrOutput[DatabaseAclConfiguration, DatabaseAclConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// Name of S3 bucket to save the results of the query execution.
func (o DatabaseOutput) Bucket() pulumix.Output[*string] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.Output[*string] { return v.Bucket })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Description of the database.
func (o DatabaseOutput) Comment() pulumix.Output[*string] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.Output[*string] { return v.Comment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
func (o DatabaseOutput) EncryptionConfiguration() pulumix.GPtrOutput[DatabaseEncryptionConfiguration, DatabaseEncryptionConfigurationOutput] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.GPtrOutput[DatabaseEncryptionConfiguration, DatabaseEncryptionConfigurationOutput] {
		return v.EncryptionConfiguration
	})
	unwrapped := pulumix.Flatten[*DatabaseEncryptionConfiguration, pulumix.GPtrOutput[DatabaseEncryptionConfiguration, DatabaseEncryptionConfigurationOutput]](value)
	return pulumix.GPtrOutput[DatabaseEncryptionConfiguration, DatabaseEncryptionConfigurationOutput]{OutputState: unwrapped.OutputState}
}

// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
func (o DatabaseOutput) ExpectedBucketOwner() pulumix.Output[*string] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.Output[*string] { return v.ExpectedBucketOwner })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
func (o DatabaseOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the database to create.
func (o DatabaseOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Key-value map of custom metadata properties for the database definition.
func (o DatabaseOutput) Properties() pulumix.MapOutput[string] {
	value := pulumix.Apply[Database](o, func(v Database) pulumix.MapOutput[string] { return v.Properties })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DatabaseOutput{})
}
