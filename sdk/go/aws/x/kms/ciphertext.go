// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The KMS ciphertext resource allows you to encrypt plaintext into ciphertext
// by using an AWS KMS customer master key. The value returned by this resource
// is stable across every apply. For a changing ciphertext value each apply, see
// the `kms.Ciphertext` data source.
type Ciphertext struct {
	pulumi.CustomResourceState

	// Base64 encoded ciphertext
	CiphertextBlob pulumix.Output[string] `pulumi:"ciphertextBlob"`
	// An optional mapping that makes up the encryption context.
	Context pulumix.MapOutput[string] `pulumi:"context"`
	// Globally unique key ID for the customer master key.
	KeyId pulumix.Output[string] `pulumi:"keyId"`
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext pulumix.Output[string] `pulumi:"plaintext"`
}

// NewCiphertext registers a new resource with the given unique name, arguments, and options.
func NewCiphertext(ctx *pulumi.Context,
	name string, args *CiphertextArgs, opts ...pulumi.ResourceOption) (*Ciphertext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.Plaintext == nil {
		return nil, errors.New("invalid value for required argument 'Plaintext'")
	}
	if args.Plaintext != nil {
		untypedSecretValue := pulumi.ToSecret(args.Plaintext.ToOutput(ctx.Context()).Untyped())
		args.Plaintext = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"plaintext",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ciphertext
	err := ctx.RegisterResource("aws:kms/ciphertext:Ciphertext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiphertext gets an existing Ciphertext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiphertext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiphertextState, opts ...pulumi.ResourceOption) (*Ciphertext, error) {
	var resource Ciphertext
	err := ctx.ReadResource("aws:kms/ciphertext:Ciphertext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ciphertext resources.
type ciphertextState struct {
	// Base64 encoded ciphertext
	CiphertextBlob *string `pulumi:"ciphertextBlob"`
	// An optional mapping that makes up the encryption context.
	Context map[string]string `pulumi:"context"`
	// Globally unique key ID for the customer master key.
	KeyId *string `pulumi:"keyId"`
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext *string `pulumi:"plaintext"`
}

type CiphertextState struct {
	// Base64 encoded ciphertext
	CiphertextBlob pulumix.Input[*string]
	// An optional mapping that makes up the encryption context.
	Context pulumix.Input[map[string]string]
	// Globally unique key ID for the customer master key.
	KeyId pulumix.Input[*string]
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext pulumix.Input[*string]
}

func (CiphertextState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciphertextState)(nil)).Elem()
}

type ciphertextArgs struct {
	// An optional mapping that makes up the encryption context.
	Context map[string]string `pulumi:"context"`
	// Globally unique key ID for the customer master key.
	KeyId string `pulumi:"keyId"`
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext string `pulumi:"plaintext"`
}

// The set of arguments for constructing a Ciphertext resource.
type CiphertextArgs struct {
	// An optional mapping that makes up the encryption context.
	Context pulumix.Input[map[string]string]
	// Globally unique key ID for the customer master key.
	KeyId pulumix.Input[string]
	// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
	Plaintext pulumix.Input[string]
}

func (CiphertextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciphertextArgs)(nil)).Elem()
}

type CiphertextOutput struct{ *pulumi.OutputState }

func (CiphertextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ciphertext)(nil)).Elem()
}

func (o CiphertextOutput) ToCiphertextOutput() CiphertextOutput {
	return o
}

func (o CiphertextOutput) ToCiphertextOutputWithContext(ctx context.Context) CiphertextOutput {
	return o
}

func (o CiphertextOutput) ToOutput(ctx context.Context) pulumix.Output[Ciphertext] {
	return pulumix.Output[Ciphertext]{
		OutputState: o.OutputState,
	}
}

// Base64 encoded ciphertext
func (o CiphertextOutput) CiphertextBlob() pulumix.Output[string] {
	value := pulumix.Apply[Ciphertext](o, func(v Ciphertext) pulumix.Output[string] { return v.CiphertextBlob })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An optional mapping that makes up the encryption context.
func (o CiphertextOutput) Context() pulumix.MapOutput[string] {
	value := pulumix.Apply[Ciphertext](o, func(v Ciphertext) pulumix.MapOutput[string] { return v.Context })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Globally unique key ID for the customer master key.
func (o CiphertextOutput) KeyId() pulumix.Output[string] {
	value := pulumix.Apply[Ciphertext](o, func(v Ciphertext) pulumix.Output[string] { return v.KeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
func (o CiphertextOutput) Plaintext() pulumix.Output[string] {
	value := pulumix.Apply[Ciphertext](o, func(v Ciphertext) pulumix.Output[string] { return v.Plaintext })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CiphertextOutput{})
}
