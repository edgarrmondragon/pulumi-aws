// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provisions a CIDR from an IPAM address pool.
//
// > **NOTE:** Provisioning Public IPv4 or Public IPv6 require [steps outside the scope of this resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip). The resource accepts `message` and `signature` as part of the `cidrAuthorizationContext` attribute but those must be generated ahead of time. Public IPv6 CIDRs that are provisioned into a Pool with `publiclyAdvertisable = true` and all public IPv4 CIDRs also require creating a Route Origin Authorization (ROA) object in your Regional Internet Registry (RIR).
//
// > **NOTE:** In order to deprovision CIDRs all Allocations must be released. Allocations created by a VPC take up to 30 minutes to be released. However, for IPAM to properly manage the removal of allocation records created by VPCs and other resources, you must [grant it permissions](https://docs.aws.amazon.com/vpc/latest/ipam/choose-single-user-or-orgs-ipam.html) in
// either a single account or organizationally. If you are unable to deprovision a cidr after waiting over 30 minutes, you may be missing the Service Linked Role.
type VpcIpamPoolCidr struct {
	pulumi.CustomResourceState

	// The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
	Cidr pulumix.Output[string] `pulumi:"cidr"`
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext pulumix.GPtrOutput[VpcIpamPoolCidrCidrAuthorizationContext, VpcIpamPoolCidrCidrAuthorizationContextOutput] `pulumi:"cidrAuthorizationContext"`
	// The unique ID generated by AWS for the pool cidr. Typically this is the resource `id` but this attribute was added to the API calls after the fact and is therefore not used as the resource id.
	IpamPoolCidrId pulumix.Output[string] `pulumi:"ipamPoolCidrId"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Output[string] `pulumi:"ipamPoolId"`
	// If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.
	NetmaskLength pulumix.Output[*int] `pulumi:"netmaskLength"`
}

// NewVpcIpamPoolCidr registers a new resource with the given unique name, arguments, and options.
func NewVpcIpamPoolCidr(ctx *pulumi.Context,
	name string, args *VpcIpamPoolCidrArgs, opts ...pulumi.ResourceOption) (*VpcIpamPoolCidr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcIpamPoolCidr
	err := ctx.RegisterResource("aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcIpamPoolCidr gets an existing VpcIpamPoolCidr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcIpamPoolCidr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcIpamPoolCidrState, opts ...pulumi.ResourceOption) (*VpcIpamPoolCidr, error) {
	var resource VpcIpamPoolCidr
	err := ctx.ReadResource("aws:ec2/vpcIpamPoolCidr:VpcIpamPoolCidr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcIpamPoolCidr resources.
type vpcIpamPoolCidrState struct {
	// The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
	Cidr *string `pulumi:"cidr"`
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext *VpcIpamPoolCidrCidrAuthorizationContext `pulumi:"cidrAuthorizationContext"`
	// The unique ID generated by AWS for the pool cidr. Typically this is the resource `id` but this attribute was added to the API calls after the fact and is therefore not used as the resource id.
	IpamPoolCidrId *string `pulumi:"ipamPoolCidrId"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId *string `pulumi:"ipamPoolId"`
	// If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

type VpcIpamPoolCidrState struct {
	// The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
	Cidr pulumix.Input[*string]
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext pulumix.Input[*VpcIpamPoolCidrCidrAuthorizationContextArgs]
	// The unique ID generated by AWS for the pool cidr. Typically this is the resource `id` but this attribute was added to the API calls after the fact and is therefore not used as the resource id.
	IpamPoolCidrId pulumix.Input[*string]
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[*string]
	// If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.
	NetmaskLength pulumix.Input[*int]
}

func (VpcIpamPoolCidrState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPoolCidrState)(nil)).Elem()
}

type vpcIpamPoolCidrArgs struct {
	// The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
	Cidr *string `pulumi:"cidr"`
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext *VpcIpamPoolCidrCidrAuthorizationContext `pulumi:"cidrAuthorizationContext"`
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// The set of arguments for constructing a VpcIpamPoolCidr resource.
type VpcIpamPoolCidrArgs struct {
	// The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
	Cidr pulumix.Input[*string]
	// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
	CidrAuthorizationContext pulumix.Input[*VpcIpamPoolCidrCidrAuthorizationContextArgs]
	// The ID of the pool to which you want to assign a CIDR.
	IpamPoolId pulumix.Input[string]
	// If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.
	NetmaskLength pulumix.Input[*int]
}

func (VpcIpamPoolCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcIpamPoolCidrArgs)(nil)).Elem()
}

type VpcIpamPoolCidrOutput struct{ *pulumi.OutputState }

func (VpcIpamPoolCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcIpamPoolCidr)(nil)).Elem()
}

func (o VpcIpamPoolCidrOutput) ToVpcIpamPoolCidrOutput() VpcIpamPoolCidrOutput {
	return o
}

func (o VpcIpamPoolCidrOutput) ToVpcIpamPoolCidrOutputWithContext(ctx context.Context) VpcIpamPoolCidrOutput {
	return o
}

func (o VpcIpamPoolCidrOutput) ToOutput(ctx context.Context) pulumix.Output[VpcIpamPoolCidr] {
	return pulumix.Output[VpcIpamPoolCidr]{
		OutputState: o.OutputState,
	}
}

// The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
func (o VpcIpamPoolCidrOutput) Cidr() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidr](o, func(v VpcIpamPoolCidr) pulumix.Output[string] { return v.Cidr })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See cidrAuthorizationContext for more information.
func (o VpcIpamPoolCidrOutput) CidrAuthorizationContext() pulumix.GPtrOutput[VpcIpamPoolCidrCidrAuthorizationContext, VpcIpamPoolCidrCidrAuthorizationContextOutput] {
	value := pulumix.Apply[VpcIpamPoolCidr](o, func(v VpcIpamPoolCidr) pulumix.GPtrOutput[VpcIpamPoolCidrCidrAuthorizationContext, VpcIpamPoolCidrCidrAuthorizationContextOutput] {
		return v.CidrAuthorizationContext
	})
	unwrapped := pulumix.Flatten[*VpcIpamPoolCidrCidrAuthorizationContext, pulumix.GPtrOutput[VpcIpamPoolCidrCidrAuthorizationContext, VpcIpamPoolCidrCidrAuthorizationContextOutput]](value)
	return pulumix.GPtrOutput[VpcIpamPoolCidrCidrAuthorizationContext, VpcIpamPoolCidrCidrAuthorizationContextOutput]{OutputState: unwrapped.OutputState}
}

// The unique ID generated by AWS for the pool cidr. Typically this is the resource `id` but this attribute was added to the API calls after the fact and is therefore not used as the resource id.
func (o VpcIpamPoolCidrOutput) IpamPoolCidrId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidr](o, func(v VpcIpamPoolCidr) pulumix.Output[string] { return v.IpamPoolCidrId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the pool to which you want to assign a CIDR.
func (o VpcIpamPoolCidrOutput) IpamPoolId() pulumix.Output[string] {
	value := pulumix.Apply[VpcIpamPoolCidr](o, func(v VpcIpamPoolCidr) pulumix.Output[string] { return v.IpamPoolId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.
func (o VpcIpamPoolCidrOutput) NetmaskLength() pulumix.Output[*int] {
	value := pulumix.Apply[VpcIpamPoolCidr](o, func(v VpcIpamPoolCidr) pulumix.Output[*int] { return v.NetmaskLength })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(VpcIpamPoolCidrOutput{})
}
