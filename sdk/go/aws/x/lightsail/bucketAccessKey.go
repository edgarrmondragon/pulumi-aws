// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a lightsail bucket access key. This is a set of credentials that allow API requests to be made to the lightsail bucket.
type BucketAccessKey struct {
	pulumi.CustomResourceState

	// The ID of the access key.
	AccessKeyId pulumix.Output[string] `pulumi:"accessKeyId"`
	// The name of the bucket that the new access key will belong to, and grant access to.
	BucketName pulumix.Output[string] `pulumi:"bucketName"`
	// The timestamp when the access key was created.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// The secret access key used to sign requests. This attribute is not available for imported resources. Note that this will be written to the state file.
	SecretAccessKey pulumix.Output[string] `pulumi:"secretAccessKey"`
	// The status of the access key.
	Status pulumix.Output[string] `pulumi:"status"`
}

// NewBucketAccessKey registers a new resource with the given unique name, arguments, and options.
func NewBucketAccessKey(ctx *pulumi.Context,
	name string, args *BucketAccessKeyArgs, opts ...pulumi.ResourceOption) (*BucketAccessKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketAccessKey
	err := ctx.RegisterResource("aws:lightsail/bucketAccessKey:BucketAccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketAccessKey gets an existing BucketAccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketAccessKeyState, opts ...pulumi.ResourceOption) (*BucketAccessKey, error) {
	var resource BucketAccessKey
	err := ctx.ReadResource("aws:lightsail/bucketAccessKey:BucketAccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketAccessKey resources.
type bucketAccessKeyState struct {
	// The ID of the access key.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The name of the bucket that the new access key will belong to, and grant access to.
	BucketName *string `pulumi:"bucketName"`
	// The timestamp when the access key was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The secret access key used to sign requests. This attribute is not available for imported resources. Note that this will be written to the state file.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The status of the access key.
	Status *string `pulumi:"status"`
}

type BucketAccessKeyState struct {
	// The ID of the access key.
	AccessKeyId pulumix.Input[*string]
	// The name of the bucket that the new access key will belong to, and grant access to.
	BucketName pulumix.Input[*string]
	// The timestamp when the access key was created.
	CreatedAt pulumix.Input[*string]
	// The secret access key used to sign requests. This attribute is not available for imported resources. Note that this will be written to the state file.
	SecretAccessKey pulumix.Input[*string]
	// The status of the access key.
	Status pulumix.Input[*string]
}

func (BucketAccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAccessKeyState)(nil)).Elem()
}

type bucketAccessKeyArgs struct {
	// The name of the bucket that the new access key will belong to, and grant access to.
	BucketName string `pulumi:"bucketName"`
}

// The set of arguments for constructing a BucketAccessKey resource.
type BucketAccessKeyArgs struct {
	// The name of the bucket that the new access key will belong to, and grant access to.
	BucketName pulumix.Input[string]
}

func (BucketAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAccessKeyArgs)(nil)).Elem()
}

type BucketAccessKeyOutput struct{ *pulumi.OutputState }

func (BucketAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketAccessKey)(nil)).Elem()
}

func (o BucketAccessKeyOutput) ToBucketAccessKeyOutput() BucketAccessKeyOutput {
	return o
}

func (o BucketAccessKeyOutput) ToBucketAccessKeyOutputWithContext(ctx context.Context) BucketAccessKeyOutput {
	return o
}

func (o BucketAccessKeyOutput) ToOutput(ctx context.Context) pulumix.Output[BucketAccessKey] {
	return pulumix.Output[BucketAccessKey]{
		OutputState: o.OutputState,
	}
}

// The ID of the access key.
func (o BucketAccessKeyOutput) AccessKeyId() pulumix.Output[string] {
	value := pulumix.Apply[BucketAccessKey](o, func(v BucketAccessKey) pulumix.Output[string] { return v.AccessKeyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the bucket that the new access key will belong to, and grant access to.
func (o BucketAccessKeyOutput) BucketName() pulumix.Output[string] {
	value := pulumix.Apply[BucketAccessKey](o, func(v BucketAccessKey) pulumix.Output[string] { return v.BucketName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The timestamp when the access key was created.
func (o BucketAccessKeyOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[BucketAccessKey](o, func(v BucketAccessKey) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The secret access key used to sign requests. This attribute is not available for imported resources. Note that this will be written to the state file.
func (o BucketAccessKeyOutput) SecretAccessKey() pulumix.Output[string] {
	value := pulumix.Apply[BucketAccessKey](o, func(v BucketAccessKey) pulumix.Output[string] { return v.SecretAccessKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The status of the access key.
func (o BucketAccessKeyOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[BucketAccessKey](o, func(v BucketAccessKey) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(BucketAccessKeyOutput{})
}
