// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Disable/enable Security Hub standards control in the current region.
//
// The `securityhub.StandardsControl` behaves differently from normal resources, in that
// The provider does not _create_ this resource, but instead "adopts" it
// into management. When you _delete_ this resource configuration, the provider "abandons" resource as is and just removes it from the state.
type StandardsControl struct {
	pulumi.CustomResourceState

	// The identifier of the security standard control.
	ControlId pulumix.Output[string] `pulumi:"controlId"`
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus pulumix.Output[string] `pulumi:"controlStatus"`
	// The date and time that the status of the security standard control was most recently updated.
	ControlStatusUpdatedAt pulumix.Output[string] `pulumi:"controlStatusUpdatedAt"`
	// The standard control longer description. Provides information about what the control is checking for.
	Description pulumix.Output[string] `pulumi:"description"`
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason pulumix.Output[string] `pulumi:"disabledReason"`
	// The list of requirements that are related to this control.
	RelatedRequirements pulumix.ArrayOutput[string] `pulumi:"relatedRequirements"`
	// A link to remediation information for the control in the Security Hub user documentation.
	RemediationUrl pulumix.Output[string] `pulumi:"remediationUrl"`
	// The severity of findings generated from this security standard control.
	SeverityRating pulumix.Output[string] `pulumi:"severityRating"`
	// The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
	StandardsControlArn pulumix.Output[string] `pulumi:"standardsControlArn"`
	// The standard control title.
	Title pulumix.Output[string] `pulumi:"title"`
}

// NewStandardsControl registers a new resource with the given unique name, arguments, and options.
func NewStandardsControl(ctx *pulumi.Context,
	name string, args *StandardsControlArgs, opts ...pulumi.ResourceOption) (*StandardsControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlStatus == nil {
		return nil, errors.New("invalid value for required argument 'ControlStatus'")
	}
	if args.StandardsControlArn == nil {
		return nil, errors.New("invalid value for required argument 'StandardsControlArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StandardsControl
	err := ctx.RegisterResource("aws:securityhub/standardsControl:StandardsControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandardsControl gets an existing StandardsControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandardsControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandardsControlState, opts ...pulumi.ResourceOption) (*StandardsControl, error) {
	var resource StandardsControl
	err := ctx.ReadResource("aws:securityhub/standardsControl:StandardsControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandardsControl resources.
type standardsControlState struct {
	// The identifier of the security standard control.
	ControlId *string `pulumi:"controlId"`
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus *string `pulumi:"controlStatus"`
	// The date and time that the status of the security standard control was most recently updated.
	ControlStatusUpdatedAt *string `pulumi:"controlStatusUpdatedAt"`
	// The standard control longer description. Provides information about what the control is checking for.
	Description *string `pulumi:"description"`
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason *string `pulumi:"disabledReason"`
	// The list of requirements that are related to this control.
	RelatedRequirements []string `pulumi:"relatedRequirements"`
	// A link to remediation information for the control in the Security Hub user documentation.
	RemediationUrl *string `pulumi:"remediationUrl"`
	// The severity of findings generated from this security standard control.
	SeverityRating *string `pulumi:"severityRating"`
	// The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
	StandardsControlArn *string `pulumi:"standardsControlArn"`
	// The standard control title.
	Title *string `pulumi:"title"`
}

type StandardsControlState struct {
	// The identifier of the security standard control.
	ControlId pulumix.Input[*string]
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus pulumix.Input[*string]
	// The date and time that the status of the security standard control was most recently updated.
	ControlStatusUpdatedAt pulumix.Input[*string]
	// The standard control longer description. Provides information about what the control is checking for.
	Description pulumix.Input[*string]
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason pulumix.Input[*string]
	// The list of requirements that are related to this control.
	RelatedRequirements pulumix.Input[[]string]
	// A link to remediation information for the control in the Security Hub user documentation.
	RemediationUrl pulumix.Input[*string]
	// The severity of findings generated from this security standard control.
	SeverityRating pulumix.Input[*string]
	// The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
	StandardsControlArn pulumix.Input[*string]
	// The standard control title.
	Title pulumix.Input[*string]
}

func (StandardsControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlState)(nil)).Elem()
}

type standardsControlArgs struct {
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus string `pulumi:"controlStatus"`
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason *string `pulumi:"disabledReason"`
	// The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
	StandardsControlArn string `pulumi:"standardsControlArn"`
}

// The set of arguments for constructing a StandardsControl resource.
type StandardsControlArgs struct {
	// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
	ControlStatus pulumix.Input[string]
	// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
	DisabledReason pulumix.Input[*string]
	// The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
	StandardsControlArn pulumix.Input[string]
}

func (StandardsControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standardsControlArgs)(nil)).Elem()
}

type StandardsControlOutput struct{ *pulumi.OutputState }

func (StandardsControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardsControl)(nil)).Elem()
}

func (o StandardsControlOutput) ToStandardsControlOutput() StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ToOutput(ctx context.Context) pulumix.Output[StandardsControl] {
	return pulumix.Output[StandardsControl]{
		OutputState: o.OutputState,
	}
}

// The identifier of the security standard control.
func (o StandardsControlOutput) ControlId() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.ControlId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
func (o StandardsControlOutput) ControlStatus() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.ControlStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The date and time that the status of the security standard control was most recently updated.
func (o StandardsControlOutput) ControlStatusUpdatedAt() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.ControlStatusUpdatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The standard control longer description. Provides information about what the control is checking for.
func (o StandardsControlOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.
func (o StandardsControlOutput) DisabledReason() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.DisabledReason })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of requirements that are related to this control.
func (o StandardsControlOutput) RelatedRequirements() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.ArrayOutput[string] { return v.RelatedRequirements })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// A link to remediation information for the control in the Security Hub user documentation.
func (o StandardsControlOutput) RemediationUrl() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.RemediationUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The severity of findings generated from this security standard control.
func (o StandardsControlOutput) SeverityRating() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.SeverityRating })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
func (o StandardsControlOutput) StandardsControlArn() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.StandardsControlArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The standard control title.
func (o StandardsControlOutput) Title() pulumix.Output[string] {
	value := pulumix.Apply[StandardsControl](o, func(v StandardsControl) pulumix.Output[string] { return v.Title })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(StandardsControlOutput{})
}
