// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about an Elastic File System (EFS) Access Point.
func LookupAccessPoint(ctx *pulumi.Context, args *LookupAccessPointArgs, opts ...pulumi.InvokeOption) (*LookupAccessPointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessPointResult
	err := ctx.Invoke("aws:efs/getAccessPoint:getAccessPoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessPoint.
type LookupAccessPointArgs struct {
	// ID that identifies the file system.
	AccessPointId string `pulumi:"accessPointId"`
	// Key-value mapping of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getAccessPoint.
type LookupAccessPointResult struct {
	AccessPointId string `pulumi:"accessPointId"`
	// Amazon Resource Name of the file system.
	Arn string `pulumi:"arn"`
	// Amazon Resource Name of the file system.
	FileSystemArn string `pulumi:"fileSystemArn"`
	// ID of the file system for which the access point is intended.
	FileSystemId string `pulumi:"fileSystemId"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	OwnerId string `pulumi:"ownerId"`
	// Single element list containing operating system user and group applied to all file system requests made using the access point.
	PosixUsers []GetAccessPointPosixUser `pulumi:"posixUsers"`
	// Single element list containing information on the directory on the Amazon EFS file system that the access point provides access to.
	RootDirectories []GetAccessPointRootDirectory `pulumi:"rootDirectories"`
	// Key-value mapping of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

func LookupAccessPointOutput(ctx *pulumi.Context, args LookupAccessPointOutputArgs, opts ...pulumi.InvokeOption) LookupAccessPointResultOutput {
	outputResult := pulumix.ApplyErr[*LookupAccessPointArgs](args.ToOutput(), func(plainArgs *LookupAccessPointArgs) (*LookupAccessPointResult, error) {
		return LookupAccessPoint(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupAccessPointResultOutput, *LookupAccessPointResult](outputResult)
}

// A collection of arguments for invoking getAccessPoint.
type LookupAccessPointOutputArgs struct {
	// ID that identifies the file system.
	AccessPointId pulumix.Input[string] `pulumi:"accessPointId"`
	// Key-value mapping of resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupAccessPointOutputArgs) ToOutput() pulumix.Output[*LookupAccessPointArgs] {
	allArgs := pulumix.All(
		args.AccessPointId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupAccessPointArgs {
		return &LookupAccessPointArgs{
			AccessPointId: resolvedArgs[0].(string),
			Tags:          resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupAccessPointResultOutput struct{ *pulumi.OutputState }

func (LookupAccessPointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPointResult)(nil)).Elem()
}

func (o LookupAccessPointResultOutput) ToOutput(context.Context) pulumix.Output[*LookupAccessPointResult] {
	return pulumix.Output[*LookupAccessPointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupAccessPointResultOutput) AccessPointId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) string { return v.AccessPointId })
}

func (o LookupAccessPointResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) string { return v.Arn })
}

func (o LookupAccessPointResultOutput) FileSystemArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) string { return v.FileSystemArn })
}

func (o LookupAccessPointResultOutput) FileSystemId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) string { return v.FileSystemId })
}

func (o LookupAccessPointResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) string { return v.Id })
}

func (o LookupAccessPointResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) string { return v.OwnerId })
}

func (o LookupAccessPointResultOutput) PosixUsers() pulumix.GArrayOutput[GetAccessPointPosixUser, GetAccessPointPosixUserOutput] {
	value := pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) []GetAccessPointPosixUser { return v.PosixUsers })
	return pulumix.GArrayOutput[GetAccessPointPosixUser, GetAccessPointPosixUserOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAccessPointResultOutput) RootDirectories() pulumix.GArrayOutput[GetAccessPointRootDirectory, GetAccessPointRootDirectoryOutput] {
	value := pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) []GetAccessPointRootDirectory { return v.RootDirectories })
	return pulumix.GArrayOutput[GetAccessPointRootDirectory, GetAccessPointRootDirectoryOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupAccessPointResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupAccessPointResult](o, func(v *LookupAccessPointResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}
