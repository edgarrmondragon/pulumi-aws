// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterCacheNode struct {
	Address *string `pulumi:"address"`
	// Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferredAvailabilityZones` instead. Default: System chosen Availability Zone. Changing this value will re-create the resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	Id               *string `pulumi:"id"`
	OutpostArn       *string `pulumi:"outpostArn"`
	// The port number on which each of the cache nodes will accept connections. For Memcached the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replicationGroupId`. Changing this value will re-create the resource.
	Port *int `pulumi:"port"`
}

type ClusterCacheNodeArgs struct {
	Address pulumix.Input[*string] `pulumi:"address"`
	// Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferredAvailabilityZones` instead. Default: System chosen Availability Zone. Changing this value will re-create the resource.
	AvailabilityZone pulumix.Input[*string] `pulumi:"availabilityZone"`
	Id               pulumix.Input[*string] `pulumi:"id"`
	OutpostArn       pulumix.Input[*string] `pulumi:"outpostArn"`
	// The port number on which each of the cache nodes will accept connections. For Memcached the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replicationGroupId`. Changing this value will re-create the resource.
	Port pulumix.Input[*int] `pulumi:"port"`
}

func (ClusterCacheNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCacheNode)(nil)).Elem()
}

func (i ClusterCacheNodeArgs) ToClusterCacheNodeOutput() ClusterCacheNodeOutput {
	return i.ToClusterCacheNodeOutputWithContext(context.Background())
}

func (i ClusterCacheNodeArgs) ToClusterCacheNodeOutputWithContext(ctx context.Context) ClusterCacheNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCacheNodeOutput)
}

func (i *ClusterCacheNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterCacheNodeArgs] {
	return pulumix.Val(i)
}

type ClusterCacheNodeOutput struct{ *pulumi.OutputState }

func (ClusterCacheNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCacheNode)(nil)).Elem()
}

func (o ClusterCacheNodeOutput) ToClusterCacheNodeOutput() ClusterCacheNodeOutput {
	return o
}

func (o ClusterCacheNodeOutput) ToClusterCacheNodeOutputWithContext(ctx context.Context) ClusterCacheNodeOutput {
	return o
}

func (o ClusterCacheNodeOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCacheNode] {
	return pulumix.Output[ClusterCacheNode]{
		OutputState: o.OutputState,
	}
}

func (o ClusterCacheNodeOutput) Address() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCacheNode](o, func(v ClusterCacheNode) *string { return v.Address })
}

// Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferredAvailabilityZones` instead. Default: System chosen Availability Zone. Changing this value will re-create the resource.
func (o ClusterCacheNodeOutput) AvailabilityZone() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCacheNode](o, func(v ClusterCacheNode) *string { return v.AvailabilityZone })
}

func (o ClusterCacheNodeOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCacheNode](o, func(v ClusterCacheNode) *string { return v.Id })
}

func (o ClusterCacheNodeOutput) OutpostArn() pulumix.Output[*string] {
	return pulumix.Apply[ClusterCacheNode](o, func(v ClusterCacheNode) *string { return v.OutpostArn })
}

// The port number on which each of the cache nodes will accept connections. For Memcached the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replicationGroupId`. Changing this value will re-create the resource.
func (o ClusterCacheNodeOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[ClusterCacheNode](o, func(v ClusterCacheNode) *int { return v.Port })
}

type ClusterLogDeliveryConfiguration struct {
	// Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
	Destination string `pulumi:"destination"`
	// For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
	DestinationType string `pulumi:"destinationType"`
	// Valid values are `json` or `text`
	LogFormat string `pulumi:"logFormat"`
	// Valid values are  `slow-log` or `engine-log`. Max 1 of each.
	LogType string `pulumi:"logType"`
}

type ClusterLogDeliveryConfigurationArgs struct {
	// Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
	Destination pulumix.Input[string] `pulumi:"destination"`
	// For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
	DestinationType pulumix.Input[string] `pulumi:"destinationType"`
	// Valid values are `json` or `text`
	LogFormat pulumix.Input[string] `pulumi:"logFormat"`
	// Valid values are  `slow-log` or `engine-log`. Max 1 of each.
	LogType pulumix.Input[string] `pulumi:"logType"`
}

func (ClusterLogDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogDeliveryConfiguration)(nil)).Elem()
}

func (i ClusterLogDeliveryConfigurationArgs) ToClusterLogDeliveryConfigurationOutput() ClusterLogDeliveryConfigurationOutput {
	return i.ToClusterLogDeliveryConfigurationOutputWithContext(context.Background())
}

func (i ClusterLogDeliveryConfigurationArgs) ToClusterLogDeliveryConfigurationOutputWithContext(ctx context.Context) ClusterLogDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogDeliveryConfigurationOutput)
}

func (i *ClusterLogDeliveryConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ClusterLogDeliveryConfigurationArgs] {
	return pulumix.Val(i)
}

type ClusterLogDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterLogDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogDeliveryConfiguration)(nil)).Elem()
}

func (o ClusterLogDeliveryConfigurationOutput) ToClusterLogDeliveryConfigurationOutput() ClusterLogDeliveryConfigurationOutput {
	return o
}

func (o ClusterLogDeliveryConfigurationOutput) ToClusterLogDeliveryConfigurationOutputWithContext(ctx context.Context) ClusterLogDeliveryConfigurationOutput {
	return o
}

func (o ClusterLogDeliveryConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLogDeliveryConfiguration] {
	return pulumix.Output[ClusterLogDeliveryConfiguration]{
		OutputState: o.OutputState,
	}
}

// Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
func (o ClusterLogDeliveryConfigurationOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[ClusterLogDeliveryConfiguration](o, func(v ClusterLogDeliveryConfiguration) string { return v.Destination })
}

// For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
func (o ClusterLogDeliveryConfigurationOutput) DestinationType() pulumix.Output[string] {
	return pulumix.Apply[ClusterLogDeliveryConfiguration](o, func(v ClusterLogDeliveryConfiguration) string { return v.DestinationType })
}

// Valid values are `json` or `text`
func (o ClusterLogDeliveryConfigurationOutput) LogFormat() pulumix.Output[string] {
	return pulumix.Apply[ClusterLogDeliveryConfiguration](o, func(v ClusterLogDeliveryConfiguration) string { return v.LogFormat })
}

// Valid values are  `slow-log` or `engine-log`. Max 1 of each.
func (o ClusterLogDeliveryConfigurationOutput) LogType() pulumix.Output[string] {
	return pulumix.Apply[ClusterLogDeliveryConfiguration](o, func(v ClusterLogDeliveryConfiguration) string { return v.LogType })
}

type GlobalReplicationGroupGlobalNodeGroup struct {
	// The ID of the global node group.
	GlobalNodeGroupId *string `pulumi:"globalNodeGroupId"`
	// The keyspace for this node group.
	Slots *string `pulumi:"slots"`
}

type GlobalReplicationGroupGlobalNodeGroupArgs struct {
	// The ID of the global node group.
	GlobalNodeGroupId pulumix.Input[*string] `pulumi:"globalNodeGroupId"`
	// The keyspace for this node group.
	Slots pulumix.Input[*string] `pulumi:"slots"`
}

func (GlobalReplicationGroupGlobalNodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalReplicationGroupGlobalNodeGroup)(nil)).Elem()
}

func (i GlobalReplicationGroupGlobalNodeGroupArgs) ToGlobalReplicationGroupGlobalNodeGroupOutput() GlobalReplicationGroupGlobalNodeGroupOutput {
	return i.ToGlobalReplicationGroupGlobalNodeGroupOutputWithContext(context.Background())
}

func (i GlobalReplicationGroupGlobalNodeGroupArgs) ToGlobalReplicationGroupGlobalNodeGroupOutputWithContext(ctx context.Context) GlobalReplicationGroupGlobalNodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalReplicationGroupGlobalNodeGroupOutput)
}

func (i *GlobalReplicationGroupGlobalNodeGroupArgs) ToOutput(ctx context.Context) pulumix.Output[*GlobalReplicationGroupGlobalNodeGroupArgs] {
	return pulumix.Val(i)
}

type GlobalReplicationGroupGlobalNodeGroupOutput struct{ *pulumi.OutputState }

func (GlobalReplicationGroupGlobalNodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalReplicationGroupGlobalNodeGroup)(nil)).Elem()
}

func (o GlobalReplicationGroupGlobalNodeGroupOutput) ToGlobalReplicationGroupGlobalNodeGroupOutput() GlobalReplicationGroupGlobalNodeGroupOutput {
	return o
}

func (o GlobalReplicationGroupGlobalNodeGroupOutput) ToGlobalReplicationGroupGlobalNodeGroupOutputWithContext(ctx context.Context) GlobalReplicationGroupGlobalNodeGroupOutput {
	return o
}

func (o GlobalReplicationGroupGlobalNodeGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalReplicationGroupGlobalNodeGroup] {
	return pulumix.Output[GlobalReplicationGroupGlobalNodeGroup]{
		OutputState: o.OutputState,
	}
}

// The ID of the global node group.
func (o GlobalReplicationGroupGlobalNodeGroupOutput) GlobalNodeGroupId() pulumix.Output[*string] {
	return pulumix.Apply[GlobalReplicationGroupGlobalNodeGroup](o, func(v GlobalReplicationGroupGlobalNodeGroup) *string { return v.GlobalNodeGroupId })
}

// The keyspace for this node group.
func (o GlobalReplicationGroupGlobalNodeGroupOutput) Slots() pulumix.Output[*string] {
	return pulumix.Apply[GlobalReplicationGroupGlobalNodeGroup](o, func(v GlobalReplicationGroupGlobalNodeGroup) *string { return v.Slots })
}

type ParameterGroupParameter struct {
	// The name of the ElastiCache parameter.
	Name string `pulumi:"name"`
	// The value of the ElastiCache parameter.
	Value string `pulumi:"value"`
}

type ParameterGroupParameterArgs struct {
	// The name of the ElastiCache parameter.
	Name pulumix.Input[string] `pulumi:"name"`
	// The value of the ElastiCache parameter.
	Value pulumix.Input[string] `pulumi:"value"`
}

func (ParameterGroupParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return i.ToParameterGroupParameterOutputWithContext(context.Background())
}

func (i ParameterGroupParameterArgs) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterGroupParameterOutput)
}

func (i *ParameterGroupParameterArgs) ToOutput(ctx context.Context) pulumix.Output[*ParameterGroupParameterArgs] {
	return pulumix.Val(i)
}

type ParameterGroupParameterOutput struct{ *pulumi.OutputState }

func (ParameterGroupParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterGroupParameter)(nil)).Elem()
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutput() ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToParameterGroupParameterOutputWithContext(ctx context.Context) ParameterGroupParameterOutput {
	return o
}

func (o ParameterGroupParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ParameterGroupParameter] {
	return pulumix.Output[ParameterGroupParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the ElastiCache parameter.
func (o ParameterGroupParameterOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Name })
}

// The value of the ElastiCache parameter.
func (o ParameterGroupParameterOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[ParameterGroupParameter](o, func(v ParameterGroupParameter) string { return v.Value })
}

type ReplicationGroupLogDeliveryConfiguration struct {
	// Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
	Destination string `pulumi:"destination"`
	// For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
	DestinationType string `pulumi:"destinationType"`
	// Valid values are `json` or `text`
	LogFormat string `pulumi:"logFormat"`
	// Valid values are  `slow-log` or `engine-log`. Max 1 of each.
	LogType string `pulumi:"logType"`
}

type ReplicationGroupLogDeliveryConfigurationArgs struct {
	// Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
	Destination pulumix.Input[string] `pulumi:"destination"`
	// For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
	DestinationType pulumix.Input[string] `pulumi:"destinationType"`
	// Valid values are `json` or `text`
	LogFormat pulumix.Input[string] `pulumi:"logFormat"`
	// Valid values are  `slow-log` or `engine-log`. Max 1 of each.
	LogType pulumix.Input[string] `pulumi:"logType"`
}

func (ReplicationGroupLogDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationGroupLogDeliveryConfiguration)(nil)).Elem()
}

func (i ReplicationGroupLogDeliveryConfigurationArgs) ToReplicationGroupLogDeliveryConfigurationOutput() ReplicationGroupLogDeliveryConfigurationOutput {
	return i.ToReplicationGroupLogDeliveryConfigurationOutputWithContext(context.Background())
}

func (i ReplicationGroupLogDeliveryConfigurationArgs) ToReplicationGroupLogDeliveryConfigurationOutputWithContext(ctx context.Context) ReplicationGroupLogDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationGroupLogDeliveryConfigurationOutput)
}

func (i *ReplicationGroupLogDeliveryConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*ReplicationGroupLogDeliveryConfigurationArgs] {
	return pulumix.Val(i)
}

type ReplicationGroupLogDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicationGroupLogDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationGroupLogDeliveryConfiguration)(nil)).Elem()
}

func (o ReplicationGroupLogDeliveryConfigurationOutput) ToReplicationGroupLogDeliveryConfigurationOutput() ReplicationGroupLogDeliveryConfigurationOutput {
	return o
}

func (o ReplicationGroupLogDeliveryConfigurationOutput) ToReplicationGroupLogDeliveryConfigurationOutputWithContext(ctx context.Context) ReplicationGroupLogDeliveryConfigurationOutput {
	return o
}

func (o ReplicationGroupLogDeliveryConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationGroupLogDeliveryConfiguration] {
	return pulumix.Output[ReplicationGroupLogDeliveryConfiguration]{
		OutputState: o.OutputState,
	}
}

// Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
func (o ReplicationGroupLogDeliveryConfigurationOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[ReplicationGroupLogDeliveryConfiguration](o, func(v ReplicationGroupLogDeliveryConfiguration) string { return v.Destination })
}

// For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
func (o ReplicationGroupLogDeliveryConfigurationOutput) DestinationType() pulumix.Output[string] {
	return pulumix.Apply[ReplicationGroupLogDeliveryConfiguration](o, func(v ReplicationGroupLogDeliveryConfiguration) string { return v.DestinationType })
}

// Valid values are `json` or `text`
func (o ReplicationGroupLogDeliveryConfigurationOutput) LogFormat() pulumix.Output[string] {
	return pulumix.Apply[ReplicationGroupLogDeliveryConfiguration](o, func(v ReplicationGroupLogDeliveryConfiguration) string { return v.LogFormat })
}

// Valid values are  `slow-log` or `engine-log`. Max 1 of each.
func (o ReplicationGroupLogDeliveryConfigurationOutput) LogType() pulumix.Output[string] {
	return pulumix.Apply[ReplicationGroupLogDeliveryConfiguration](o, func(v ReplicationGroupLogDeliveryConfiguration) string { return v.LogType })
}

type UserAuthenticationMode struct {
	PasswordCount *int `pulumi:"passwordCount"`
	// Specifies the passwords to use for authentication if `type` is set to `password`.
	Passwords []string `pulumi:"passwords"`
	// Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
	Type string `pulumi:"type"`
}

type UserAuthenticationModeArgs struct {
	PasswordCount pulumix.Input[*int] `pulumi:"passwordCount"`
	// Specifies the passwords to use for authentication if `type` is set to `password`.
	Passwords pulumix.Input[[]string] `pulumi:"passwords"`
	// Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (UserAuthenticationModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return i.ToUserAuthenticationModeOutputWithContext(context.Background())
}

func (i UserAuthenticationModeArgs) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationModeOutput)
}

func (i *UserAuthenticationModeArgs) ToOutput(ctx context.Context) pulumix.Output[*UserAuthenticationModeArgs] {
	return pulumix.Val(i)
}

type UserAuthenticationModeOutput struct{ *pulumi.OutputState }

func (UserAuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToOutput(ctx context.Context) pulumix.Output[UserAuthenticationMode] {
	return pulumix.Output[UserAuthenticationMode]{
		OutputState: o.OutputState,
	}
}

func (o UserAuthenticationModeOutput) PasswordCount() pulumix.Output[*int] {
	return pulumix.Apply[UserAuthenticationMode](o, func(v UserAuthenticationMode) *int { return v.PasswordCount })
}

// Specifies the passwords to use for authentication if `type` is set to `password`.
func (o UserAuthenticationModeOutput) Passwords() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[UserAuthenticationMode](o, func(v UserAuthenticationMode) []string { return v.Passwords })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
func (o UserAuthenticationModeOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[UserAuthenticationMode](o, func(v UserAuthenticationMode) string { return v.Type })
}

type GetClusterCacheNode struct {
	Address string `pulumi:"address"`
	// Availability Zone for the cache cluster.
	AvailabilityZone string `pulumi:"availabilityZone"`
	Id               string `pulumi:"id"`
	OutpostArn       string `pulumi:"outpostArn"`
	// The port number on which each of the cache nodes will
	// accept connections.
	Port int `pulumi:"port"`
}

type GetClusterCacheNodeArgs struct {
	Address pulumix.Input[string] `pulumi:"address"`
	// Availability Zone for the cache cluster.
	AvailabilityZone pulumix.Input[string] `pulumi:"availabilityZone"`
	Id               pulumix.Input[string] `pulumi:"id"`
	OutpostArn       pulumix.Input[string] `pulumi:"outpostArn"`
	// The port number on which each of the cache nodes will
	// accept connections.
	Port pulumix.Input[int] `pulumi:"port"`
}

func (GetClusterCacheNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCacheNode)(nil)).Elem()
}

func (i GetClusterCacheNodeArgs) ToGetClusterCacheNodeOutput() GetClusterCacheNodeOutput {
	return i.ToGetClusterCacheNodeOutputWithContext(context.Background())
}

func (i GetClusterCacheNodeArgs) ToGetClusterCacheNodeOutputWithContext(ctx context.Context) GetClusterCacheNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCacheNodeOutput)
}

func (i *GetClusterCacheNodeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterCacheNodeArgs] {
	return pulumix.Val(i)
}

type GetClusterCacheNodeOutput struct{ *pulumi.OutputState }

func (GetClusterCacheNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCacheNode)(nil)).Elem()
}

func (o GetClusterCacheNodeOutput) ToGetClusterCacheNodeOutput() GetClusterCacheNodeOutput {
	return o
}

func (o GetClusterCacheNodeOutput) ToGetClusterCacheNodeOutputWithContext(ctx context.Context) GetClusterCacheNodeOutput {
	return o
}

func (o GetClusterCacheNodeOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterCacheNode] {
	return pulumix.Output[GetClusterCacheNode]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterCacheNodeOutput) Address() pulumix.Output[string] {
	return pulumix.Apply[GetClusterCacheNode](o, func(v GetClusterCacheNode) string { return v.Address })
}

// Availability Zone for the cache cluster.
func (o GetClusterCacheNodeOutput) AvailabilityZone() pulumix.Output[string] {
	return pulumix.Apply[GetClusterCacheNode](o, func(v GetClusterCacheNode) string { return v.AvailabilityZone })
}

func (o GetClusterCacheNodeOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[GetClusterCacheNode](o, func(v GetClusterCacheNode) string { return v.Id })
}

func (o GetClusterCacheNodeOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[GetClusterCacheNode](o, func(v GetClusterCacheNode) string { return v.OutpostArn })
}

// The port number on which each of the cache nodes will
// accept connections.
func (o GetClusterCacheNodeOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[GetClusterCacheNode](o, func(v GetClusterCacheNode) int { return v.Port })
}

type GetClusterLogDeliveryConfiguration struct {
	Destination     string `pulumi:"destination"`
	DestinationType string `pulumi:"destinationType"`
	LogFormat       string `pulumi:"logFormat"`
	LogType         string `pulumi:"logType"`
}

type GetClusterLogDeliveryConfigurationArgs struct {
	Destination     pulumix.Input[string] `pulumi:"destination"`
	DestinationType pulumix.Input[string] `pulumi:"destinationType"`
	LogFormat       pulumix.Input[string] `pulumi:"logFormat"`
	LogType         pulumix.Input[string] `pulumi:"logType"`
}

func (GetClusterLogDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterLogDeliveryConfiguration)(nil)).Elem()
}

func (i GetClusterLogDeliveryConfigurationArgs) ToGetClusterLogDeliveryConfigurationOutput() GetClusterLogDeliveryConfigurationOutput {
	return i.ToGetClusterLogDeliveryConfigurationOutputWithContext(context.Background())
}

func (i GetClusterLogDeliveryConfigurationArgs) ToGetClusterLogDeliveryConfigurationOutputWithContext(ctx context.Context) GetClusterLogDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterLogDeliveryConfigurationOutput)
}

func (i *GetClusterLogDeliveryConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetClusterLogDeliveryConfigurationArgs] {
	return pulumix.Val(i)
}

type GetClusterLogDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (GetClusterLogDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterLogDeliveryConfiguration)(nil)).Elem()
}

func (o GetClusterLogDeliveryConfigurationOutput) ToGetClusterLogDeliveryConfigurationOutput() GetClusterLogDeliveryConfigurationOutput {
	return o
}

func (o GetClusterLogDeliveryConfigurationOutput) ToGetClusterLogDeliveryConfigurationOutputWithContext(ctx context.Context) GetClusterLogDeliveryConfigurationOutput {
	return o
}

func (o GetClusterLogDeliveryConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetClusterLogDeliveryConfiguration] {
	return pulumix.Output[GetClusterLogDeliveryConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetClusterLogDeliveryConfigurationOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[GetClusterLogDeliveryConfiguration](o, func(v GetClusterLogDeliveryConfiguration) string { return v.Destination })
}

func (o GetClusterLogDeliveryConfigurationOutput) DestinationType() pulumix.Output[string] {
	return pulumix.Apply[GetClusterLogDeliveryConfiguration](o, func(v GetClusterLogDeliveryConfiguration) string { return v.DestinationType })
}

func (o GetClusterLogDeliveryConfigurationOutput) LogFormat() pulumix.Output[string] {
	return pulumix.Apply[GetClusterLogDeliveryConfiguration](o, func(v GetClusterLogDeliveryConfiguration) string { return v.LogFormat })
}

func (o GetClusterLogDeliveryConfigurationOutput) LogType() pulumix.Output[string] {
	return pulumix.Apply[GetClusterLogDeliveryConfiguration](o, func(v GetClusterLogDeliveryConfiguration) string { return v.LogType })
}

type GetReplicationGroupLogDeliveryConfiguration struct {
	Destination     string `pulumi:"destination"`
	DestinationType string `pulumi:"destinationType"`
	LogFormat       string `pulumi:"logFormat"`
	LogType         string `pulumi:"logType"`
}

type GetReplicationGroupLogDeliveryConfigurationArgs struct {
	Destination     pulumix.Input[string] `pulumi:"destination"`
	DestinationType pulumix.Input[string] `pulumi:"destinationType"`
	LogFormat       pulumix.Input[string] `pulumi:"logFormat"`
	LogType         pulumix.Input[string] `pulumi:"logType"`
}

func (GetReplicationGroupLogDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReplicationGroupLogDeliveryConfiguration)(nil)).Elem()
}

func (i GetReplicationGroupLogDeliveryConfigurationArgs) ToGetReplicationGroupLogDeliveryConfigurationOutput() GetReplicationGroupLogDeliveryConfigurationOutput {
	return i.ToGetReplicationGroupLogDeliveryConfigurationOutputWithContext(context.Background())
}

func (i GetReplicationGroupLogDeliveryConfigurationArgs) ToGetReplicationGroupLogDeliveryConfigurationOutputWithContext(ctx context.Context) GetReplicationGroupLogDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReplicationGroupLogDeliveryConfigurationOutput)
}

func (i *GetReplicationGroupLogDeliveryConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetReplicationGroupLogDeliveryConfigurationArgs] {
	return pulumix.Val(i)
}

type GetReplicationGroupLogDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (GetReplicationGroupLogDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReplicationGroupLogDeliveryConfiguration)(nil)).Elem()
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) ToGetReplicationGroupLogDeliveryConfigurationOutput() GetReplicationGroupLogDeliveryConfigurationOutput {
	return o
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) ToGetReplicationGroupLogDeliveryConfigurationOutputWithContext(ctx context.Context) GetReplicationGroupLogDeliveryConfigurationOutput {
	return o
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GetReplicationGroupLogDeliveryConfiguration] {
	return pulumix.Output[GetReplicationGroupLogDeliveryConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) Destination() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationGroupLogDeliveryConfiguration](o, func(v GetReplicationGroupLogDeliveryConfiguration) string { return v.Destination })
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) DestinationType() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationGroupLogDeliveryConfiguration](o, func(v GetReplicationGroupLogDeliveryConfiguration) string { return v.DestinationType })
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) LogFormat() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationGroupLogDeliveryConfiguration](o, func(v GetReplicationGroupLogDeliveryConfiguration) string { return v.LogFormat })
}

func (o GetReplicationGroupLogDeliveryConfigurationOutput) LogType() pulumix.Output[string] {
	return pulumix.Apply[GetReplicationGroupLogDeliveryConfiguration](o, func(v GetReplicationGroupLogDeliveryConfiguration) string { return v.LogType })
}

type GetUserAuthenticationMode struct {
	PasswordCount *int    `pulumi:"passwordCount"`
	Type          *string `pulumi:"type"`
}

type GetUserAuthenticationModeArgs struct {
	PasswordCount pulumix.Input[*int]    `pulumi:"passwordCount"`
	Type          pulumix.Input[*string] `pulumi:"type"`
}

func (GetUserAuthenticationModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAuthenticationMode)(nil)).Elem()
}

func (i GetUserAuthenticationModeArgs) ToGetUserAuthenticationModeOutput() GetUserAuthenticationModeOutput {
	return i.ToGetUserAuthenticationModeOutputWithContext(context.Background())
}

func (i GetUserAuthenticationModeArgs) ToGetUserAuthenticationModeOutputWithContext(ctx context.Context) GetUserAuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserAuthenticationModeOutput)
}

func (i *GetUserAuthenticationModeArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUserAuthenticationModeArgs] {
	return pulumix.Val(i)
}

type GetUserAuthenticationModeOutput struct{ *pulumi.OutputState }

func (GetUserAuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAuthenticationMode)(nil)).Elem()
}

func (o GetUserAuthenticationModeOutput) ToGetUserAuthenticationModeOutput() GetUserAuthenticationModeOutput {
	return o
}

func (o GetUserAuthenticationModeOutput) ToGetUserAuthenticationModeOutputWithContext(ctx context.Context) GetUserAuthenticationModeOutput {
	return o
}

func (o GetUserAuthenticationModeOutput) ToOutput(ctx context.Context) pulumix.Output[GetUserAuthenticationMode] {
	return pulumix.Output[GetUserAuthenticationMode]{
		OutputState: o.OutputState,
	}
}

func (o GetUserAuthenticationModeOutput) PasswordCount() pulumix.Output[*int] {
	return pulumix.Apply[GetUserAuthenticationMode](o, func(v GetUserAuthenticationMode) *int { return v.PasswordCount })
}

func (o GetUserAuthenticationModeOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[GetUserAuthenticationMode](o, func(v GetUserAuthenticationMode) *string { return v.Type })
}

func init() {
	pulumi.RegisterOutputType(ClusterCacheNodeOutput{})
	pulumi.RegisterOutputType(ClusterLogDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(GlobalReplicationGroupGlobalNodeGroupOutput{})
	pulumi.RegisterOutputType(ParameterGroupParameterOutput{})
	pulumi.RegisterOutputType(ReplicationGroupLogDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(UserAuthenticationModeOutput{})
	pulumi.RegisterOutputType(GetClusterCacheNodeOutput{})
	pulumi.RegisterOutputType(GetClusterLogDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(GetReplicationGroupLogDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(GetUserAuthenticationModeOutput{})
}
