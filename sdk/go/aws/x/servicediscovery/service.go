// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicediscovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Service Discovery Service resource.
type Service struct {
	pulumi.CustomResourceState

	// The ARN of the service.
	Arn pulumix.Output[string] `pulumi:"arn"`
	// The description of the service.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfig pulumix.GPtrOutput[ServiceDnsConfig, ServiceDnsConfigOutput] `pulumi:"dnsConfig"`
	// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
	ForceDestroy pulumix.Output[*bool] `pulumi:"forceDestroy"`
	// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfig pulumix.GPtrOutput[ServiceHealthCheckConfig, ServiceHealthCheckConfigOutput] `pulumi:"healthCheckConfig"`
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfig pulumix.GPtrOutput[ServiceHealthCheckCustomConfig, ServiceHealthCheckCustomConfigOutput] `pulumi:"healthCheckCustomConfig"`
	// The name of the service.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the namespace that you want to use to create the service.
	NamespaceId pulumix.Output[string] `pulumi:"namespaceId"`
	// A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.MapOutput[string] `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.MapOutput[string] `pulumi:"tagsAll"`
	// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		args = &ServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("aws:servicediscovery/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws:servicediscovery/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The ARN of the service.
	Arn *string `pulumi:"arn"`
	// The description of the service.
	Description *string `pulumi:"description"`
	// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfig *ServiceDnsConfig `pulumi:"dnsConfig"`
	// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfig *ServiceHealthCheckConfig `pulumi:"healthCheckConfig"`
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfig *ServiceHealthCheckCustomConfig `pulumi:"healthCheckCustomConfig"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// The ID of the namespace that you want to use to create the service.
	NamespaceId *string `pulumi:"namespaceId"`
	// A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll map[string]string `pulumi:"tagsAll"`
	// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
	Type *string `pulumi:"type"`
}

type ServiceState struct {
	// The ARN of the service.
	Arn pulumix.Input[*string]
	// The description of the service.
	Description pulumix.Input[*string]
	// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfig pulumix.Input[*ServiceDnsConfigArgs]
	// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
	ForceDestroy pulumix.Input[*bool]
	// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfig pulumix.Input[*ServiceHealthCheckConfigArgs]
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfig pulumix.Input[*ServiceHealthCheckCustomConfigArgs]
	// The name of the service.
	Name pulumix.Input[*string]
	// The ID of the namespace that you want to use to create the service.
	NamespaceId pulumix.Input[*string]
	// A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
	TagsAll pulumix.Input[map[string]string]
	// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
	Type pulumix.Input[*string]
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The description of the service.
	Description *string `pulumi:"description"`
	// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfig *ServiceDnsConfig `pulumi:"dnsConfig"`
	// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfig *ServiceHealthCheckConfig `pulumi:"healthCheckConfig"`
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfig *ServiceHealthCheckCustomConfig `pulumi:"healthCheckCustomConfig"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// The ID of the namespace that you want to use to create the service.
	NamespaceId *string `pulumi:"namespaceId"`
	// A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The description of the service.
	Description pulumix.Input[*string]
	// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
	DnsConfig pulumix.Input[*ServiceDnsConfigArgs]
	// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
	ForceDestroy pulumix.Input[*bool]
	// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
	HealthCheckConfig pulumix.Input[*ServiceHealthCheckConfigArgs]
	// A complex type that contains settings for ECS managed health checks.
	HealthCheckCustomConfig pulumix.Input[*ServiceHealthCheckCustomConfigArgs]
	// The name of the service.
	Name pulumix.Input[*string]
	// The ID of the namespace that you want to use to create the service.
	NamespaceId pulumix.Input[*string]
	// A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumix.Input[map[string]string]
	// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
	Type pulumix.Input[*string]
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToOutput(ctx context.Context) pulumix.Output[Service] {
	return pulumix.Output[Service]{
		OutputState: o.OutputState,
	}
}

// The ARN of the service.
func (o ServiceOutput) Arn() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.Arn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The description of the service.
func (o ServiceOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
func (o ServiceOutput) DnsConfig() pulumix.GPtrOutput[ServiceDnsConfig, ServiceDnsConfigOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceDnsConfig, ServiceDnsConfigOutput] { return v.DnsConfig })
	unwrapped := pulumix.Flatten[*ServiceDnsConfig, pulumix.GPtrOutput[ServiceDnsConfig, ServiceDnsConfigOutput]](value)
	return pulumix.GPtrOutput[ServiceDnsConfig, ServiceDnsConfigOutput]{OutputState: unwrapped.OutputState}
}

// A boolean that indicates all instances should be deleted from the service so that the service can be destroyed without error. These instances are not recoverable.
func (o ServiceOutput) ForceDestroy() pulumix.Output[*bool] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[*bool] { return v.ForceDestroy })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
func (o ServiceOutput) HealthCheckConfig() pulumix.GPtrOutput[ServiceHealthCheckConfig, ServiceHealthCheckConfigOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceHealthCheckConfig, ServiceHealthCheckConfigOutput] {
		return v.HealthCheckConfig
	})
	unwrapped := pulumix.Flatten[*ServiceHealthCheckConfig, pulumix.GPtrOutput[ServiceHealthCheckConfig, ServiceHealthCheckConfigOutput]](value)
	return pulumix.GPtrOutput[ServiceHealthCheckConfig, ServiceHealthCheckConfigOutput]{OutputState: unwrapped.OutputState}
}

// A complex type that contains settings for ECS managed health checks.
func (o ServiceOutput) HealthCheckCustomConfig() pulumix.GPtrOutput[ServiceHealthCheckCustomConfig, ServiceHealthCheckCustomConfigOutput] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.GPtrOutput[ServiceHealthCheckCustomConfig, ServiceHealthCheckCustomConfigOutput] {
		return v.HealthCheckCustomConfig
	})
	unwrapped := pulumix.Flatten[*ServiceHealthCheckCustomConfig, pulumix.GPtrOutput[ServiceHealthCheckCustomConfig, ServiceHealthCheckCustomConfigOutput]](value)
	return pulumix.GPtrOutput[ServiceHealthCheckCustomConfig, ServiceHealthCheckCustomConfigOutput]{OutputState: unwrapped.OutputState}
}

// The name of the service.
func (o ServiceOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the namespace that you want to use to create the service.
func (o ServiceOutput) NamespaceId() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.NamespaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o ServiceOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.MapOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
func (o ServiceOutput) TagsAll() pulumix.MapOutput[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.MapOutput[string] { return v.TagsAll })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation. No DNS records is registered for the service instances. The only valid value is `HTTP`.
func (o ServiceOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[Service](o, func(v Service) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceOutput{})
}
