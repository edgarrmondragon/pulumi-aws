// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for managing an AWS DMS (Database Migration) Certificate.
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("aws:dms/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
	CertificateId string            `pulumi:"certificateId"`
	Tags          map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn string `pulumi:"certificateArn"`
	// The date that the certificate was created.
	CertificateCreationDate string `pulumi:"certificateCreationDate"`
	CertificateId           string `pulumi:"certificateId"`
	// The owner of the certificate.
	CertificateOwner string `pulumi:"certificateOwner"`
	// The contents of a .pem file, which contains an X.509 certificate.
	CertificatePem string `pulumi:"certificatePem"`
	// The owner of the certificate.
	CertificateWallet string `pulumi:"certificateWallet"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The key length of the cryptographic algorithm being used.
	KeyLength int `pulumi:"keyLength"`
	// The algorithm for the certificate.
	SigningAlgorithm string            `pulumi:"signingAlgorithm"`
	Tags             map[string]string `pulumi:"tags"`
	// The beginning date that the certificate is valid.
	ValidFromDate string `pulumi:"validFromDate"`
	// The final date that the certificate is valid.
	ValidToDate string `pulumi:"validToDate"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCertificateArgs](args.ToOutput(), func(plainArgs *LookupCertificateArgs) (*LookupCertificateResult, error) {
		return LookupCertificate(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCertificateResultOutput, *LookupCertificateResult](outputResult)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
	CertificateId pulumix.Input[string]            `pulumi:"certificateId"`
	Tags          pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupCertificateOutputArgs) ToOutput() pulumix.Output[*LookupCertificateArgs] {
	allArgs := pulumix.All(
		args.CertificateId.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCertificateArgs {
		return &LookupCertificateArgs{
			CertificateId: resolvedArgs[0].(string),
			Tags:          resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCertificateResult] {
	return pulumix.Output[*LookupCertificateResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCertificateResultOutput) CertificateArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateArn })
}

func (o LookupCertificateResultOutput) CertificateCreationDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateCreationDate })
}

func (o LookupCertificateResultOutput) CertificateId() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateId })
}

func (o LookupCertificateResultOutput) CertificateOwner() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateOwner })
}

func (o LookupCertificateResultOutput) CertificatePem() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificatePem })
}

func (o LookupCertificateResultOutput) CertificateWallet() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.CertificateWallet })
}

func (o LookupCertificateResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.Id })
}

func (o LookupCertificateResultOutput) KeyLength() pulumix.Output[int] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) int { return v.KeyLength })
}

func (o LookupCertificateResultOutput) SigningAlgorithm() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.SigningAlgorithm })
}

func (o LookupCertificateResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupCertificateResultOutput) ValidFromDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.ValidFromDate })
}

func (o LookupCertificateResultOutput) ValidToDate() pulumix.Output[string] {
	return pulumix.Apply[*LookupCertificateResult](o, func(v *LookupCertificateResult) string { return v.ValidToDate })
}
