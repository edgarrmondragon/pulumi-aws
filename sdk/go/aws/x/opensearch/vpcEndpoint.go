// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an [AWS Opensearch VPC Endpoint](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_CreateVpcEndpoint.html). Creates an Amazon OpenSearch Service-managed VPC endpoint.
type VpcEndpoint struct {
	pulumi.CustomResourceState

	// Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
	DomainArn pulumix.Output[string] `pulumi:"domainArn"`
	// The connection endpoint ID for connecting to the domain.
	Endpoint pulumix.Output[string] `pulumi:"endpoint"`
	// Options to specify the subnets and security groups for the endpoint.
	VpcOptions pulumix.GPtrOutput[VpcEndpointVpcOptions, VpcEndpointVpcOptionsOutput] `pulumi:"vpcOptions"`
}

// NewVpcEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVpcEndpoint(ctx *pulumi.Context,
	name string, args *VpcEndpointArgs, opts ...pulumi.ResourceOption) (*VpcEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainArn == nil {
		return nil, errors.New("invalid value for required argument 'DomainArn'")
	}
	if args.VpcOptions == nil {
		return nil, errors.New("invalid value for required argument 'VpcOptions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcEndpoint
	err := ctx.RegisterResource("aws:opensearch/vpcEndpoint:VpcEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcEndpoint gets an existing VpcEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcEndpointState, opts ...pulumi.ResourceOption) (*VpcEndpoint, error) {
	var resource VpcEndpoint
	err := ctx.ReadResource("aws:opensearch/vpcEndpoint:VpcEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcEndpoint resources.
type vpcEndpointState struct {
	// Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
	DomainArn *string `pulumi:"domainArn"`
	// The connection endpoint ID for connecting to the domain.
	Endpoint *string `pulumi:"endpoint"`
	// Options to specify the subnets and security groups for the endpoint.
	VpcOptions *VpcEndpointVpcOptions `pulumi:"vpcOptions"`
}

type VpcEndpointState struct {
	// Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
	DomainArn pulumix.Input[*string]
	// The connection endpoint ID for connecting to the domain.
	Endpoint pulumix.Input[*string]
	// Options to specify the subnets and security groups for the endpoint.
	VpcOptions pulumix.Input[*VpcEndpointVpcOptionsArgs]
}

func (VpcEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointState)(nil)).Elem()
}

type vpcEndpointArgs struct {
	// Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
	DomainArn string `pulumi:"domainArn"`
	// Options to specify the subnets and security groups for the endpoint.
	VpcOptions VpcEndpointVpcOptions `pulumi:"vpcOptions"`
}

// The set of arguments for constructing a VpcEndpoint resource.
type VpcEndpointArgs struct {
	// Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
	DomainArn pulumix.Input[string]
	// Options to specify the subnets and security groups for the endpoint.
	VpcOptions pulumix.Input[*VpcEndpointVpcOptionsArgs]
}

func (VpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcEndpointArgs)(nil)).Elem()
}

type VpcEndpointOutput struct{ *pulumi.OutputState }

func (VpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpoint)(nil)).Elem()
}

func (o VpcEndpointOutput) ToVpcEndpointOutput() VpcEndpointOutput {
	return o
}

func (o VpcEndpointOutput) ToVpcEndpointOutputWithContext(ctx context.Context) VpcEndpointOutput {
	return o
}

func (o VpcEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[VpcEndpoint] {
	return pulumix.Output[VpcEndpoint]{
		OutputState: o.OutputState,
	}
}

// Specifies the Amazon Resource Name (ARN) of the domain to create the endpoint for
func (o VpcEndpointOutput) DomainArn() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.DomainArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The connection endpoint ID for connecting to the domain.
func (o VpcEndpointOutput) Endpoint() pulumix.Output[string] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.Output[string] { return v.Endpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Options to specify the subnets and security groups for the endpoint.
func (o VpcEndpointOutput) VpcOptions() pulumix.GPtrOutput[VpcEndpointVpcOptions, VpcEndpointVpcOptionsOutput] {
	value := pulumix.Apply[VpcEndpoint](o, func(v VpcEndpoint) pulumix.GPtrOutput[VpcEndpointVpcOptions, VpcEndpointVpcOptionsOutput] {
		return v.VpcOptions
	})
	unwrapped := pulumix.Flatten[*VpcEndpointVpcOptions, pulumix.GPtrOutput[VpcEndpointVpcOptions, VpcEndpointVpcOptionsOutput]](value)
	return pulumix.GPtrOutput[VpcEndpointVpcOptions, VpcEndpointVpcOptionsOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(VpcEndpointOutput{})
}
