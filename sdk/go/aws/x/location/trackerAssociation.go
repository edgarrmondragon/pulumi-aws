// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource for managing an AWS Location Tracker Association.
type TrackerAssociation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	ConsumerArn pulumix.Output[string] `pulumi:"consumerArn"`
	// The name of the tracker resource to be associated with a geofence collection.
	TrackerName pulumix.Output[string] `pulumi:"trackerName"`
}

// NewTrackerAssociation registers a new resource with the given unique name, arguments, and options.
func NewTrackerAssociation(ctx *pulumi.Context,
	name string, args *TrackerAssociationArgs, opts ...pulumi.ResourceOption) (*TrackerAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerArn == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerArn'")
	}
	if args.TrackerName == nil {
		return nil, errors.New("invalid value for required argument 'TrackerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrackerAssociation
	err := ctx.RegisterResource("aws:location/trackerAssociation:TrackerAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrackerAssociation gets an existing TrackerAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrackerAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackerAssociationState, opts ...pulumi.ResourceOption) (*TrackerAssociation, error) {
	var resource TrackerAssociation
	err := ctx.ReadResource("aws:location/trackerAssociation:TrackerAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrackerAssociation resources.
type trackerAssociationState struct {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	ConsumerArn *string `pulumi:"consumerArn"`
	// The name of the tracker resource to be associated with a geofence collection.
	TrackerName *string `pulumi:"trackerName"`
}

type TrackerAssociationState struct {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	ConsumerArn pulumix.Input[*string]
	// The name of the tracker resource to be associated with a geofence collection.
	TrackerName pulumix.Input[*string]
}

func (TrackerAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerAssociationState)(nil)).Elem()
}

type trackerAssociationArgs struct {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	ConsumerArn string `pulumi:"consumerArn"`
	// The name of the tracker resource to be associated with a geofence collection.
	TrackerName string `pulumi:"trackerName"`
}

// The set of arguments for constructing a TrackerAssociation resource.
type TrackerAssociationArgs struct {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	ConsumerArn pulumix.Input[string]
	// The name of the tracker resource to be associated with a geofence collection.
	TrackerName pulumix.Input[string]
}

func (TrackerAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerAssociationArgs)(nil)).Elem()
}

type TrackerAssociationOutput struct{ *pulumi.OutputState }

func (TrackerAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackerAssociation)(nil)).Elem()
}

func (o TrackerAssociationOutput) ToTrackerAssociationOutput() TrackerAssociationOutput {
	return o
}

func (o TrackerAssociationOutput) ToTrackerAssociationOutputWithContext(ctx context.Context) TrackerAssociationOutput {
	return o
}

func (o TrackerAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[TrackerAssociation] {
	return pulumix.Output[TrackerAssociation]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
func (o TrackerAssociationOutput) ConsumerArn() pulumix.Output[string] {
	value := pulumix.Apply[TrackerAssociation](o, func(v TrackerAssociation) pulumix.Output[string] { return v.ConsumerArn })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the tracker resource to be associated with a geofence collection.
func (o TrackerAssociationOutput) TrackerName() pulumix.Output[string] {
	value := pulumix.Apply[TrackerAssociation](o, func(v TrackerAssociation) pulumix.Output[string] { return v.TrackerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TrackerAssociationOutput{})
}
