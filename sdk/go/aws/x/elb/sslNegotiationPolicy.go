// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a load balancer SSL negotiation policy, which allows an ELB to control the ciphers and protocols that are supported during SSL negotiations between a client and a load balancer.
type SslNegotiationPolicy struct {
	pulumi.CustomResourceState

	// An SSL Negotiation policy attribute. Each has two properties:
	Attributes pulumix.GArrayOutput[SslNegotiationPolicyAttribute, SslNegotiationPolicyAttributeOutput] `pulumi:"attributes"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Output[int] `pulumi:"lbPort"`
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Output[string] `pulumi:"loadBalancer"`
	// The name of the attribute
	Name pulumix.Output[string] `pulumi:"name"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	//
	// To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.
	//
	// > **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.
	Triggers pulumix.MapOutput[string] `pulumi:"triggers"`
}

// NewSslNegotiationPolicy registers a new resource with the given unique name, arguments, and options.
func NewSslNegotiationPolicy(ctx *pulumi.Context,
	name string, args *SslNegotiationPolicyArgs, opts ...pulumi.ResourceOption) (*SslNegotiationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbPort == nil {
		return nil, errors.New("invalid value for required argument 'LbPort'")
	}
	if args.LoadBalancer == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancer'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("aws:elasticloadbalancing/sslNegotiationPolicy:SslNegotiationPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SslNegotiationPolicy
	err := ctx.RegisterResource("aws:elb/sslNegotiationPolicy:SslNegotiationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslNegotiationPolicy gets an existing SslNegotiationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslNegotiationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslNegotiationPolicyState, opts ...pulumi.ResourceOption) (*SslNegotiationPolicy, error) {
	var resource SslNegotiationPolicy
	err := ctx.ReadResource("aws:elb/sslNegotiationPolicy:SslNegotiationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslNegotiationPolicy resources.
type sslNegotiationPolicyState struct {
	// An SSL Negotiation policy attribute. Each has two properties:
	Attributes []SslNegotiationPolicyAttribute `pulumi:"attributes"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort *int `pulumi:"lbPort"`
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer *string `pulumi:"loadBalancer"`
	// The name of the attribute
	Name *string `pulumi:"name"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	//
	// To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.
	//
	// > **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.
	Triggers map[string]string `pulumi:"triggers"`
}

type SslNegotiationPolicyState struct {
	// An SSL Negotiation policy attribute. Each has two properties:
	Attributes pulumix.Input[[]*SslNegotiationPolicyAttributeArgs]
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Input[*int]
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Input[*string]
	// The name of the attribute
	Name pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	//
	// To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.
	//
	// > **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.
	Triggers pulumix.Input[map[string]string]
}

func (SslNegotiationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslNegotiationPolicyState)(nil)).Elem()
}

type sslNegotiationPolicyArgs struct {
	// An SSL Negotiation policy attribute. Each has two properties:
	Attributes []SslNegotiationPolicyAttribute `pulumi:"attributes"`
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort int `pulumi:"lbPort"`
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer string `pulumi:"loadBalancer"`
	// The name of the attribute
	Name *string `pulumi:"name"`
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	//
	// To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.
	//
	// > **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a SslNegotiationPolicy resource.
type SslNegotiationPolicyArgs struct {
	// An SSL Negotiation policy attribute. Each has two properties:
	Attributes pulumix.Input[[]*SslNegotiationPolicyAttributeArgs]
	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	LbPort pulumix.Input[int]
	// The load balancer to which the policy
	// should be attached.
	LoadBalancer pulumix.Input[string]
	// The name of the attribute
	Name pulumix.Input[*string]
	// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
	//
	// To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.
	//
	// > **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.
	Triggers pulumix.Input[map[string]string]
}

func (SslNegotiationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslNegotiationPolicyArgs)(nil)).Elem()
}

type SslNegotiationPolicyOutput struct{ *pulumi.OutputState }

func (SslNegotiationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslNegotiationPolicy)(nil)).Elem()
}

func (o SslNegotiationPolicyOutput) ToSslNegotiationPolicyOutput() SslNegotiationPolicyOutput {
	return o
}

func (o SslNegotiationPolicyOutput) ToSslNegotiationPolicyOutputWithContext(ctx context.Context) SslNegotiationPolicyOutput {
	return o
}

func (o SslNegotiationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SslNegotiationPolicy] {
	return pulumix.Output[SslNegotiationPolicy]{
		OutputState: o.OutputState,
	}
}

// An SSL Negotiation policy attribute. Each has two properties:
func (o SslNegotiationPolicyOutput) Attributes() pulumix.GArrayOutput[SslNegotiationPolicyAttribute, SslNegotiationPolicyAttributeOutput] {
	value := pulumix.Apply[SslNegotiationPolicy](o, func(v SslNegotiationPolicy) pulumix.GArrayOutput[SslNegotiationPolicyAttribute, SslNegotiationPolicyAttributeOutput] {
		return v.Attributes
	})
	unwrapped := pulumix.Flatten[[]SslNegotiationPolicyAttribute, pulumix.GArrayOutput[SslNegotiationPolicyAttribute, SslNegotiationPolicyAttributeOutput]](value)
	return pulumix.GArrayOutput[SslNegotiationPolicyAttribute, SslNegotiationPolicyAttributeOutput]{OutputState: unwrapped.OutputState}
}

// The load balancer port to which the policy
// should be applied. This must be an active listener on the load
// balancer.
func (o SslNegotiationPolicyOutput) LbPort() pulumix.Output[int] {
	value := pulumix.Apply[SslNegotiationPolicy](o, func(v SslNegotiationPolicy) pulumix.Output[int] { return v.LbPort })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The load balancer to which the policy
// should be attached.
func (o SslNegotiationPolicyOutput) LoadBalancer() pulumix.Output[string] {
	value := pulumix.Apply[SslNegotiationPolicy](o, func(v SslNegotiationPolicy) pulumix.Output[string] { return v.LoadBalancer })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the attribute
func (o SslNegotiationPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SslNegotiationPolicy](o, func(v SslNegotiationPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Map of arbitrary keys and values that, when changed, will trigger a redeployment.
//
// To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.
//
// > **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.
func (o SslNegotiationPolicyOutput) Triggers() pulumix.MapOutput[string] {
	value := pulumix.Apply[SslNegotiationPolicy](o, func(v SslNegotiationPolicy) pulumix.MapOutput[string] { return v.Triggers })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(SslNegotiationPolicyOutput{})
}
