// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a MemoryDB Cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws:memorydb/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Name of the cluster.
	Name string `pulumi:"name"`
	// Map of tags assigned to the cluster.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// Name of the Access Control List associated with the cluster.
	AclName string `pulumi:"aclName"`
	// ARN of the cluster.
	Arn string `pulumi:"arn"`
	// True when the cluster allows automatic minor version upgrades.
	AutoMinorVersionUpgrade bool                        `pulumi:"autoMinorVersionUpgrade"`
	ClusterEndpoints        []GetClusterClusterEndpoint `pulumi:"clusterEndpoints"`
	// True when data tiering is enabled.
	DataTiering bool `pulumi:"dataTiering"`
	// Description for the cluster.
	Description string `pulumi:"description"`
	// Patch version number of the Redis engine used by the cluster.
	EnginePatchVersion string `pulumi:"enginePatchVersion"`
	// Version number of the Redis engine used by the cluster.
	EngineVersion string `pulumi:"engineVersion"`
	// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
	FinalSnapshotName string `pulumi:"finalSnapshotName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN of the KMS key used to encrypt the cluster at rest.
	KmsKeyArn string `pulumi:"kmsKeyArn"`
	// Weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
	MaintenanceWindow string `pulumi:"maintenanceWindow"`
	// Name of this node.
	Name string `pulumi:"name"`
	// Compute and memory capacity of the nodes in the cluster.
	NodeType string `pulumi:"nodeType"`
	// The number of replicas to apply to each shard.
	NumReplicasPerShard int `pulumi:"numReplicasPerShard"`
	// Number of shards in the cluster.
	NumShards int `pulumi:"numShards"`
	// The name of the parameter group associated with the cluster.
	ParameterGroupName string `pulumi:"parameterGroupName"`
	// Port number that this node is listening on.
	Port int `pulumi:"port"`
	// Set of VPC Security Group ID-s associated with this cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Set of shards in this cluster.
	Shards []GetClusterShard `pulumi:"shards"`
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
	SnapshotRetentionLimit int `pulumi:"snapshotRetentionLimit"`
	// Daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
	SnapshotWindow string `pulumi:"snapshotWindow"`
	// ARN of the SNS topic to which cluster notifications are sent.
	SnsTopicArn string `pulumi:"snsTopicArn"`
	// The name of the subnet group used for the cluster.
	SubnetGroupName string `pulumi:"subnetGroupName"`
	// Map of tags assigned to the cluster.
	Tags map[string]string `pulumi:"tags"`
	// When true, in-transit encryption is enabled for the cluster.
	TlsEnabled bool `pulumi:"tlsEnabled"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	outputResult := pulumix.ApplyErr[*LookupClusterArgs](args.ToOutput(), func(plainArgs *LookupClusterArgs) (*LookupClusterResult, error) {
		return LookupCluster(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupClusterResultOutput, *LookupClusterResult](outputResult)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Name of the cluster.
	Name pulumix.Input[string] `pulumi:"name"`
	// Map of tags assigned to the cluster.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupClusterOutputArgs) ToOutput() pulumix.Output[*LookupClusterArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupClusterArgs {
		return &LookupClusterArgs{
			Name: resolvedArgs[0].(string),
			Tags: resolvedArgs[1].(map[string]string),
		}
	})
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToOutput(context.Context) pulumix.Output[*LookupClusterResult] {
	return pulumix.Output[*LookupClusterResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupClusterResultOutput) AclName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.AclName })
}

func (o LookupClusterResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Arn })
}

func (o LookupClusterResultOutput) AutoMinorVersionUpgrade() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.AutoMinorVersionUpgrade })
}

func (o LookupClusterResultOutput) ClusterEndpoints() pulumix.GArrayOutput[GetClusterClusterEndpoint, GetClusterClusterEndpointOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterClusterEndpoint { return v.ClusterEndpoints })
	return pulumix.GArrayOutput[GetClusterClusterEndpoint, GetClusterClusterEndpointOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) DataTiering() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.DataTiering })
}

func (o LookupClusterResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Description })
}

func (o LookupClusterResultOutput) EnginePatchVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.EnginePatchVersion })
}

func (o LookupClusterResultOutput) EngineVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.EngineVersion })
}

func (o LookupClusterResultOutput) FinalSnapshotName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.FinalSnapshotName })
}

func (o LookupClusterResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Id })
}

func (o LookupClusterResultOutput) KmsKeyArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.KmsKeyArn })
}

func (o LookupClusterResultOutput) MaintenanceWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.MaintenanceWindow })
}

func (o LookupClusterResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.Name })
}

func (o LookupClusterResultOutput) NodeType() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.NodeType })
}

func (o LookupClusterResultOutput) NumReplicasPerShard() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.NumReplicasPerShard })
}

func (o LookupClusterResultOutput) NumShards() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.NumShards })
}

func (o LookupClusterResultOutput) ParameterGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.ParameterGroupName })
}

func (o LookupClusterResultOutput) Port() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.Port })
}

func (o LookupClusterResultOutput) SecurityGroupIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []string { return v.SecurityGroupIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) Shards() pulumix.GArrayOutput[GetClusterShard, GetClusterShardOutput] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) []GetClusterShard { return v.Shards })
	return pulumix.GArrayOutput[GetClusterShard, GetClusterShardOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) SnapshotRetentionLimit() pulumix.Output[int] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) int { return v.SnapshotRetentionLimit })
}

func (o LookupClusterResultOutput) SnapshotWindow() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.SnapshotWindow })
}

func (o LookupClusterResultOutput) SnsTopicArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.SnsTopicArn })
}

func (o LookupClusterResultOutput) SubnetGroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) string { return v.SubnetGroupName })
}

func (o LookupClusterResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupClusterResultOutput) TlsEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupClusterResult](o, func(v *LookupClusterResult) bool { return v.TlsEnabled })
}
