// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The ECS Service data source allows access to details of a specific
// Service within a AWS ECS Cluster.
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("aws:ecs/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// ARN of the ECS Cluster
	ClusterArn string `pulumi:"clusterArn"`
	// Name of the ECS Service
	ServiceName string `pulumi:"serviceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// ARN of the ECS Service
	Arn        string `pulumi:"arn"`
	ClusterArn string `pulumi:"clusterArn"`
	// Number of tasks for the ECS Service
	DesiredCount int `pulumi:"desiredCount"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Launch type for the ECS Service
	LaunchType string `pulumi:"launchType"`
	// Scheduling strategy for the ECS Service
	SchedulingStrategy string `pulumi:"schedulingStrategy"`
	ServiceName        string `pulumi:"serviceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Family for the latest ACTIVE revision or full ARN of the task definition.
	TaskDefinition string `pulumi:"taskDefinition"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupServiceArgs](args.ToOutput(), func(plainArgs *LookupServiceArgs) (*LookupServiceResult, error) {
		return LookupService(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupServiceResultOutput, *LookupServiceResult](outputResult)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// ARN of the ECS Cluster
	ClusterArn pulumix.Input[string] `pulumi:"clusterArn"`
	// Name of the ECS Service
	ServiceName pulumix.Input[string] `pulumi:"serviceName"`
	// Resource tags.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupServiceOutputArgs) ToOutput() pulumix.Output[*LookupServiceArgs] {
	allArgs := pulumix.All(
		args.ClusterArn.ToOutput(context.Background()).AsAny(),
		args.ServiceName.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupServiceArgs {
		return &LookupServiceArgs{
			ClusterArn:  resolvedArgs[0].(string),
			ServiceName: resolvedArgs[1].(string),
			Tags:        resolvedArgs[2].(map[string]string),
		}
	})
}

type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupServiceResult] {
	return pulumix.Output[*LookupServiceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupServiceResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Arn })
}

func (o LookupServiceResultOutput) ClusterArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.ClusterArn })
}

func (o LookupServiceResultOutput) DesiredCount() pulumix.Output[int] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) int { return v.DesiredCount })
}

func (o LookupServiceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.Id })
}

func (o LookupServiceResultOutput) LaunchType() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.LaunchType })
}

func (o LookupServiceResultOutput) SchedulingStrategy() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.SchedulingStrategy })
}

func (o LookupServiceResultOutput) ServiceName() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.ServiceName })
}

func (o LookupServiceResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupServiceResultOutput) TaskDefinition() pulumix.Output[string] {
	return pulumix.Apply[*LookupServiceResult](o, func(v *LookupServiceResult) string { return v.TaskDefinition })
}
