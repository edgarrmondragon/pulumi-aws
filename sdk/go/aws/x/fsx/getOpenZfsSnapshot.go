// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an Amazon FSx for OpenZFS Snapshot for use when provisioning new Volumes.
func LookupOpenZfsSnapshot(ctx *pulumi.Context, args *LookupOpenZfsSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupOpenZfsSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOpenZfsSnapshotResult
	err := ctx.Invoke("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpenZfsSnapshot.
type LookupOpenZfsSnapshotArgs struct {
	// One or more name/value pairs to filter off of. The
	// supported names are file-system-id or volume-id.
	Filters []GetOpenZfsSnapshotFilter `pulumi:"filters"`
	// If more than one result is returned, use the most recent snapshot.
	MostRecent *bool `pulumi:"mostRecent"`
	// Name of the snapshot.
	Name *string `pulumi:"name"`
	// Returns information on a specific snapshot_id.
	SnapshotIds []string `pulumi:"snapshotIds"`
	// List of Tag values, with a maximum of 50 elements.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getOpenZfsSnapshot.
type LookupOpenZfsSnapshotResult struct {
	// Amazon Resource Name of the snapshot.
	Arn string `pulumi:"arn"`
	// Time that the resource was created.
	CreationTime string                     `pulumi:"creationTime"`
	Filters      []GetOpenZfsSnapshotFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	MostRecent *bool  `pulumi:"mostRecent"`
	// Name of the snapshot.
	Name *string `pulumi:"name"`
	// ID of the snapshot.
	SnapshotId  string   `pulumi:"snapshotId"`
	SnapshotIds []string `pulumi:"snapshotIds"`
	// List of Tag values, with a maximum of 50 elements.
	Tags map[string]string `pulumi:"tags"`
	// ID of the volume that the snapshot is of.
	VolumeId string `pulumi:"volumeId"`
}

func LookupOpenZfsSnapshotOutput(ctx *pulumi.Context, args LookupOpenZfsSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupOpenZfsSnapshotResultOutput {
	outputResult := pulumix.ApplyErr[*LookupOpenZfsSnapshotArgs](args.ToOutput(), func(plainArgs *LookupOpenZfsSnapshotArgs) (*LookupOpenZfsSnapshotResult, error) {
		return LookupOpenZfsSnapshot(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupOpenZfsSnapshotResultOutput, *LookupOpenZfsSnapshotResult](outputResult)
}

// A collection of arguments for invoking getOpenZfsSnapshot.
type LookupOpenZfsSnapshotOutputArgs struct {
	// One or more name/value pairs to filter off of. The
	// supported names are file-system-id or volume-id.
	Filters pulumix.Input[[]*GetOpenZfsSnapshotFilterArgs] `pulumi:"filters"`
	// If more than one result is returned, use the most recent snapshot.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Name of the snapshot.
	Name pulumix.Input[*string] `pulumi:"name"`
	// Returns information on a specific snapshot_id.
	SnapshotIds pulumix.Input[[]string] `pulumi:"snapshotIds"`
	// List of Tag values, with a maximum of 50 elements.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupOpenZfsSnapshotOutputArgs) ToOutput() pulumix.Output[*LookupOpenZfsSnapshotArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.SnapshotIds.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupOpenZfsSnapshotArgs {
		return &LookupOpenZfsSnapshotArgs{
			Filters:     resolvedArgs[0].([]GetOpenZfsSnapshotFilter),
			MostRecent:  resolvedArgs[1].(*bool),
			Name:        resolvedArgs[2].(*string),
			SnapshotIds: resolvedArgs[3].([]string),
			Tags:        resolvedArgs[4].(map[string]string),
		}
	})
}

type LookupOpenZfsSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupOpenZfsSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenZfsSnapshotResult)(nil)).Elem()
}

func (o LookupOpenZfsSnapshotResultOutput) ToOutput(context.Context) pulumix.Output[*LookupOpenZfsSnapshotResult] {
	return pulumix.Output[*LookupOpenZfsSnapshotResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupOpenZfsSnapshotResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) string { return v.Arn })
}

func (o LookupOpenZfsSnapshotResultOutput) CreationTime() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) string { return v.CreationTime })
}

func (o LookupOpenZfsSnapshotResultOutput) Filters() pulumix.GArrayOutput[GetOpenZfsSnapshotFilter, GetOpenZfsSnapshotFilterOutput] {
	value := pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) []GetOpenZfsSnapshotFilter { return v.Filters })
	return pulumix.GArrayOutput[GetOpenZfsSnapshotFilter, GetOpenZfsSnapshotFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupOpenZfsSnapshotResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) string { return v.Id })
}

func (o LookupOpenZfsSnapshotResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) *bool { return v.MostRecent })
}

func (o LookupOpenZfsSnapshotResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) *string { return v.Name })
}

func (o LookupOpenZfsSnapshotResultOutput) SnapshotId() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) string { return v.SnapshotId })
}

func (o LookupOpenZfsSnapshotResultOutput) SnapshotIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) []string { return v.SnapshotIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOpenZfsSnapshotResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOpenZfsSnapshotResultOutput) VolumeId() pulumix.Output[string] {
	return pulumix.Apply[*LookupOpenZfsSnapshotResult](o, func(v *LookupOpenZfsSnapshotResult) string { return v.VolumeId })
}
