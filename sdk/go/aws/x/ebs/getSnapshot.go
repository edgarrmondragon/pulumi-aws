// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get information about an EBS Snapshot for use when provisioning EBS Volumes
func LookupSnapshot(ctx *pulumi.Context, args *LookupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnapshotResult
	err := ctx.Invoke("aws:ebs/getSnapshot:getSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotArgs struct {
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-snapshots in the AWS CLI reference][1].
	Filters []GetSnapshotFilter `pulumi:"filters"`
	// If more than one result is returned, use the most recent snapshot.
	MostRecent *bool `pulumi:"mostRecent"`
	// Returns the snapshots owned by the specified owner id. Multiple owners can be specified.
	Owners []string `pulumi:"owners"`
	// One or more AWS accounts IDs that can create volumes from the snapshot.
	RestorableByUserIds []string `pulumi:"restorableByUserIds"`
	// Returns information on a specific snapshot_id.
	SnapshotIds []string `pulumi:"snapshotIds"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSnapshot.
type LookupSnapshotResult struct {
	// ARN of the EBS Snapshot.
	Arn string `pulumi:"arn"`
	// The data encryption key identifier for the snapshot.
	DataEncryptionKeyId string `pulumi:"dataEncryptionKeyId"`
	// Description for the snapshot
	Description string `pulumi:"description"`
	// Whether the snapshot is encrypted.
	Encrypted bool                `pulumi:"encrypted"`
	Filters   []GetSnapshotFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ARN for the KMS encryption key.
	KmsKeyId   string `pulumi:"kmsKeyId"`
	MostRecent *bool  `pulumi:"mostRecent"`
	// ARN of the Outpost on which the snapshot is stored.
	OutpostArn string `pulumi:"outpostArn"`
	// Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
	OwnerAlias string `pulumi:"ownerAlias"`
	// AWS account ID of the EBS snapshot owner.
	OwnerId             string   `pulumi:"ownerId"`
	Owners              []string `pulumi:"owners"`
	RestorableByUserIds []string `pulumi:"restorableByUserIds"`
	// Snapshot ID (e.g., snap-59fcb34e).
	SnapshotId  string   `pulumi:"snapshotId"`
	SnapshotIds []string `pulumi:"snapshotIds"`
	// Snapshot state.
	State string `pulumi:"state"`
	// Storage tier in which the snapshot is stored.
	StorageTier string `pulumi:"storageTier"`
	// Map of tags for the resource.
	Tags map[string]string `pulumi:"tags"`
	// Volume ID (e.g., vol-59fcb34e).
	VolumeId string `pulumi:"volumeId"`
	// Size of the drive in GiBs.
	VolumeSize int `pulumi:"volumeSize"`
}

func LookupSnapshotOutput(ctx *pulumi.Context, args LookupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSnapshotArgs](args.ToOutput(), func(plainArgs *LookupSnapshotArgs) (*LookupSnapshotResult, error) {
		return LookupSnapshot(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSnapshotResultOutput, *LookupSnapshotResult](outputResult)
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotOutputArgs struct {
	// One or more name/value pairs to filter off of. There are
	// several valid keys, for a full reference, check out
	// [describe-snapshots in the AWS CLI reference][1].
	Filters pulumix.Input[[]*GetSnapshotFilterArgs] `pulumi:"filters"`
	// If more than one result is returned, use the most recent snapshot.
	MostRecent pulumix.Input[*bool] `pulumi:"mostRecent"`
	// Returns the snapshots owned by the specified owner id. Multiple owners can be specified.
	Owners pulumix.Input[[]string] `pulumi:"owners"`
	// One or more AWS accounts IDs that can create volumes from the snapshot.
	RestorableByUserIds pulumix.Input[[]string] `pulumi:"restorableByUserIds"`
	// Returns information on a specific snapshot_id.
	SnapshotIds pulumix.Input[[]string] `pulumi:"snapshotIds"`
	// Map of tags for the resource.
	Tags pulumix.Input[map[string]string] `pulumi:"tags"`
}

func (args LookupSnapshotOutputArgs) ToOutput() pulumix.Output[*LookupSnapshotArgs] {
	allArgs := pulumix.All(
		args.Filters.ToOutput(context.Background()).AsAny(),
		args.MostRecent.ToOutput(context.Background()).AsAny(),
		args.Owners.ToOutput(context.Background()).AsAny(),
		args.RestorableByUserIds.ToOutput(context.Background()).AsAny(),
		args.SnapshotIds.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSnapshotArgs {
		return &LookupSnapshotArgs{
			Filters:             resolvedArgs[0].([]GetSnapshotFilter),
			MostRecent:          resolvedArgs[1].(*bool),
			Owners:              resolvedArgs[2].([]string),
			RestorableByUserIds: resolvedArgs[3].([]string),
			SnapshotIds:         resolvedArgs[4].([]string),
			Tags:                resolvedArgs[5].(map[string]string),
		}
	})
}

type LookupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotResult)(nil)).Elem()
}

func (o LookupSnapshotResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSnapshotResult] {
	return pulumix.Output[*LookupSnapshotResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSnapshotResultOutput) Arn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Arn })
}

func (o LookupSnapshotResultOutput) DataEncryptionKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.DataEncryptionKeyId })
}

func (o LookupSnapshotResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Description })
}

func (o LookupSnapshotResultOutput) Encrypted() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) bool { return v.Encrypted })
}

func (o LookupSnapshotResultOutput) Filters() pulumix.GArrayOutput[GetSnapshotFilter, GetSnapshotFilterOutput] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) []GetSnapshotFilter { return v.Filters })
	return pulumix.GArrayOutput[GetSnapshotFilter, GetSnapshotFilterOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.Id })
}

func (o LookupSnapshotResultOutput) KmsKeyId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.KmsKeyId })
}

func (o LookupSnapshotResultOutput) MostRecent() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) *bool { return v.MostRecent })
}

func (o LookupSnapshotResultOutput) OutpostArn() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.OutpostArn })
}

func (o LookupSnapshotResultOutput) OwnerAlias() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.OwnerAlias })
}

func (o LookupSnapshotResultOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.OwnerId })
}

func (o LookupSnapshotResultOutput) Owners() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) []string { return v.Owners })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) RestorableByUserIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) []string { return v.RestorableByUserIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) SnapshotId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.SnapshotId })
}

func (o LookupSnapshotResultOutput) SnapshotIds() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) []string { return v.SnapshotIds })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) State() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.State })
}

func (o LookupSnapshotResultOutput) StorageTier() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.StorageTier })
}

func (o LookupSnapshotResultOutput) Tags() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) map[string]string { return v.Tags })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSnapshotResultOutput) VolumeId() pulumix.Output[string] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) string { return v.VolumeId })
}

func (o LookupSnapshotResultOutput) VolumeSize() pulumix.Output[int] {
	return pulumix.Apply[*LookupSnapshotResult](o, func(v *LookupSnapshotResult) int { return v.VolumeSize })
}
